{"content":"    \r\n    <h1 id=\"System_Diagnostics_Process\">\r\n      <span class=\"lang-csharp\">Process</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides access to local and remote processes and enables you to start and stop local system processes.  </p>\n<p> To browse the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#System/services/monitoring/system/diagnosticts/Process.cs#f8b2e604d6f1fe04\" data-linktype=\"external\">Reference Source</a>.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.ComponentModel.DefaultEvent(&quot;Exited&quot;)]\n[System.ComponentModel.DefaultProperty(&quot;StartInfo&quot;)]\n[System.ComponentModel.Designer(&quot;System.Diagnostics.Design.ProcessDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&quot;)]\n[System.Diagnostics.MonitoringDescription(&quot;ProcessDesc&quot;)]\npublic class Process : System.ComponentModel.Component</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component\" data-linktype=\"relative-path\">System.ComponentModel.Component</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l3\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Process</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_CanRaiseEvents\" data-linktype=\"relative-path\">CanRaiseEvents</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Container\" data-linktype=\"relative-path\">Container</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_DesignMode\" data-linktype=\"relative-path\">DesignMode</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Dispose\" data-linktype=\"relative-path\">Dispose()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Disposed\" data-linktype=\"relative-path\">Disposed</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Events\" data-linktype=\"relative-path\">Events</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_GetService_System_Type_\" data-linktype=\"relative-path\">GetService(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Site\" data-linktype=\"relative-path\">Site</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_CreateObjRef_System_Type_\" data-linktype=\"relative-path\">CreateObjRef(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_GetLifetimeService\" data-linktype=\"relative-path\">GetLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_InitializeLifetimeService\" data-linktype=\"relative-path\">InitializeLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_MemberwiseClone_System_Boolean_\" data-linktype=\"relative-path\">MemberwiseClone(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <div class=\"NOTE\"><h5>Note</h5><p> To view the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#System/services/monitoring/system/diagnosticts/Process.cs#f8b2e604d6f1fe04\" data-linktype=\"external\">Reference Source</a>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <a href=\"http://referencesource.microsoft.com/\" data-linktype=\"external\">instructions</a>.  </p>\n</div>\n<p> A Process component provides access to a process that is running on a computer. A process, in the simplest terms, is a running app. A thread is the basic unit to which the operating system allocates processor time. A thread can execute any part of the code of the process, including parts currently being executed by another thread.  </p>\n<p> The Process component is a useful tool for starting, stopping, controlling, and monitoring apps. You can use the Process component, to obtain a list of the processes that are running, or you can start a new process. A Process component is used to access system processes. After a Process component has been initialized, it can be used to obtain information about the running process. Such information includes the set of threads, the loaded modules (.dll and .exe files), and performance information such as the amount of memory the process is using.  </p>\n<p> This type implements the <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <a class=\"xref\" href=\"system.idisposable#System_IDisposable_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method in a <code>try</code>/<code>catch</code> block. To dispose of it indirectly, use a language construct such as <code>using</code> (in C#) or <code>Using</code> (in Visual Basic). For more information, see the â€œUsing an Object that Implements IDisposableâ€ section in the <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface topic.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> 32-bit processes cannot access the modules of a 64-bit process. If you try to get information about a 64-bit process from a 32-bit process, you will get a <a class=\"xref\" href=\"system.componentmodel.win32exception\" data-linktype=\"relative-path\">Win32Exception</a> exception. A 64-bit process, on the other hand, can access the modules of a 32-bit process.  </p>\n</div>\n<p> The process component obtains information about a group of properties all at once. After the Process component has obtained information about one member of any group, it will cache the values for the other properties in that group and not obtain new information about the other members of the group until you call the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Refresh_\" data-linktype=\"relative-path\">Refresh</a> method. Therefore, a property value is not guaranteed to be any newer than the last call to the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Refresh_\" data-linktype=\"relative-path\">Refresh</a> method. The group breakdowns are operating-system dependent.  </p>\n<p> If you have a path variable declared in your system using quotes, you must fully qualify that path when starting any process found in that location. Otherwise, the system will not find the path. For example, if <code>c:\\mypath</code> is not in your path, and you add it using quotation marks: <code>path = %path%;&quot;c:\\mypath&quot;</code>, you must fully qualify any process in <code>c:\\mypath</code> when starting it.  </p>\n<p> A system process is uniquely identified on the system by its process identifier. Like many Windows resources, a process is also identified by its handle, which might not be unique on the computer. A handle is the generic term for an identifier of a resource. The operating system persists the process handle, which is accessed through the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Handle_\" data-linktype=\"relative-path\">Handle</a> property of the Process component, even when the process has exited. Thus, you can get the process&#39;s administrative information, such as the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_ExitCode_\" data-linktype=\"relative-path\">ExitCode</a> (usually either zero for success or a nonzero error code) and the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_ExitTime_\" data-linktype=\"relative-path\">ExitTime</a>. Handles are an extremely valuable resource, so leaking handles is more virulent than leaking memory.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This class contains a link demand and an inheritance demand at the class level that applies to all members. A <a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a> is thrown when either the immediate caller or the derived class does not have full-trust permission. For details about security demands, see <a href=\"../Topic/Link%20Demands.md\" data-linktype=\"relative-path\">Link Demands</a>.  </p>\n</div>\n<p><a name=\"Core\"></a>   </p>\n<h2 id=\"includenetcoreaddincludesnet-core-mdmd-notes\"><!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-core-md.md&quot; -->.NET Core<!--END INCLUDE --> Notes</h2>\n<p> In the .NET Framework on the desktop, the Process class by default uses <a class=\"xref\" href=\"system.console\" data-linktype=\"relative-path\">Console</a> encodings, which are typically code page encodings, for the input, output, and error streams. For example code, on systems whose culture is English (United States), code page 437 is the default encoding for the <a class=\"xref\" href=\"system.console\" data-linktype=\"relative-path\">Console</a> class. However, <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-core-md.md&quot; -->.NET Core<!--END INCLUDE --> may make only a limited subset of these encodings available. If this is the case, it uses <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_UTF8_\" data-linktype=\"relative-path\">UTF8</a> as the default encoding.  </p>\n<p> If a Process object depends on specific code page encodings, you can still make them available by doing the following <em>before</em> you call any Process methods:  </p>\n<ol>\n<li><p>Add a reference to the System.Text.Encoding.CodePages.dll assembly to your project.  </p>\n</li>\n<li><p>Retrieve the <a class=\"xref\" href=\"system.text.encodingprovider\" data-linktype=\"relative-path\">EncodingProvider</a> object from the &lt;xref:System.Text.CodePagesEncodingProvider.Instance%2A?displayProperty=fullName&gt; property.  </p>\n</li>\n<li><p>Pass the <a class=\"xref\" href=\"system.text.encodingprovider\" data-linktype=\"relative-path\">EncodingProvider</a> object to the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_RegisterProvider_\" data-linktype=\"relative-path\">RegisterProvider</a> method to make the additional encodings supported by the encoding provider available.  </p>\n<p>The Process class will then automatically use the default system encoding rather than UTF8, provided that you have registered the encoding provider before calling any Process methods.</p>\n</li>\n</ol>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process__ctor\" data-linktype=\"self-bookmark\">Process()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_BasePriority\" data-linktype=\"self-bookmark\">BasePriority</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the base priority of the associated process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_EnableRaisingEvents\" data-linktype=\"self-bookmark\">EnableRaisingEvents</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets whether the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Exited\" data-linktype=\"relative-path\">Exited</a> event should be raised when the process terminates.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_ExitCode\" data-linktype=\"self-bookmark\">ExitCode</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value that the associated process specified when it terminated.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_ExitTime\" data-linktype=\"self-bookmark\">ExitTime</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the time that the associated process exited.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_Handle\" data-linktype=\"self-bookmark\">Handle</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the native handle of the associated process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_HandleCount\" data-linktype=\"self-bookmark\">HandleCount</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of handles opened by the process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_HasExited\" data-linktype=\"self-bookmark\">HasExited</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the associated process has been terminated.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_Id\" data-linktype=\"self-bookmark\">Id</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the unique identifier for the associated process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_MachineName\" data-linktype=\"self-bookmark\">MachineName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the name of the computer the associated process is running on.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_MainModule\" data-linktype=\"self-bookmark\">MainModule</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the main module for the associated process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_MainWindowHandle\" data-linktype=\"self-bookmark\">MainWindowHandle</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the window handle of the main window of the associated process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_MainWindowTitle\" data-linktype=\"self-bookmark\">MainWindowTitle</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the caption of the main window of the process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_MaxWorkingSet\" data-linktype=\"self-bookmark\">MaxWorkingSet</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the maximum allowable working set size, in bytes, for the associated process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_MinWorkingSet\" data-linktype=\"self-bookmark\">MinWorkingSet</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the minimum allowable working set size, in bytes, for the associated process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_Modules\" data-linktype=\"self-bookmark\">Modules</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the modules that have been loaded by the associated process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_NonpagedSystemMemorySize\" data-linktype=\"self-bookmark\">NonpagedSystemMemorySize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the amount of nonpaged system memory, in bytes, allocated for the associated process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_NonpagedSystemMemorySize64\" data-linktype=\"self-bookmark\">NonpagedSystemMemorySize64</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the amount of nonpaged system memory, in bytes, allocated for the associated process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_PagedMemorySize\" data-linktype=\"self-bookmark\">PagedMemorySize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the amount of paged memory, in bytes, allocated for the associated process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_PagedMemorySize64\" data-linktype=\"self-bookmark\">PagedMemorySize64</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the amount of paged memory, in bytes, allocated for the associated process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_PagedSystemMemorySize\" data-linktype=\"self-bookmark\">PagedSystemMemorySize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the amount of pageable system memory, in bytes, allocated for the associated process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_PagedSystemMemorySize64\" data-linktype=\"self-bookmark\">PagedSystemMemorySize64</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the amount of pageable system memory, in bytes, allocated for the associated process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_PeakPagedMemorySize\" data-linktype=\"self-bookmark\">PeakPagedMemorySize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the maximum amount of memory in the virtual memory paging file, in bytes, used by the associated process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_PeakPagedMemorySize64\" data-linktype=\"self-bookmark\">PeakPagedMemorySize64</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the maximum amount of memory in the virtual memory paging file, in bytes, used by the associated process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_PeakVirtualMemorySize\" data-linktype=\"self-bookmark\">PeakVirtualMemorySize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the maximum amount of virtual memory, in bytes, used by the associated process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_PeakVirtualMemorySize64\" data-linktype=\"self-bookmark\">PeakVirtualMemorySize64</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the maximum amount of virtual memory, in bytes, used by the associated process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_PeakWorkingSet\" data-linktype=\"self-bookmark\">PeakWorkingSet</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the peak working set size for the associated process, in bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_PeakWorkingSet64\" data-linktype=\"self-bookmark\">PeakWorkingSet64</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the maximum amount of physical memory, in bytes, used by the associated process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_PriorityBoostEnabled\" data-linktype=\"self-bookmark\">PriorityBoostEnabled</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether the associated process priority should temporarily be boosted by the operating system when the main window has the focus.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_PriorityClass\" data-linktype=\"self-bookmark\">PriorityClass</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the overall priority category for the associated process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_PrivateMemorySize\" data-linktype=\"self-bookmark\">PrivateMemorySize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the amount of private memory, in bytes, allocated for the associated process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_PrivateMemorySize64\" data-linktype=\"self-bookmark\">PrivateMemorySize64</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the amount of private memory, in bytes, allocated for the associated process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_PrivilegedProcessorTime\" data-linktype=\"self-bookmark\">PrivilegedProcessorTime</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the privileged processor time for this process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_ProcessName\" data-linktype=\"self-bookmark\">ProcessName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the name of the process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_ProcessorAffinity\" data-linktype=\"self-bookmark\">ProcessorAffinity</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the processors on which the threads in this process can be scheduled to run.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_Responding\" data-linktype=\"self-bookmark\">Responding</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the user interface of the process is responding.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_SafeHandle\" data-linktype=\"self-bookmark\">SafeHandle</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the native handle to this process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_SessionId\" data-linktype=\"self-bookmark\">SessionId</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the Terminal Services session identifier for the associated process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_StandardError\" data-linktype=\"self-bookmark\">StandardError</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a stream used to read the error output of the application.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_StandardInput\" data-linktype=\"self-bookmark\">StandardInput</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a stream used to write the input of the application.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_StandardOutput\" data-linktype=\"self-bookmark\">StandardOutput</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a stream used to read the textual output of the application.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_StartInfo\" data-linktype=\"self-bookmark\">StartInfo</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the properties to pass to the <span class=\"xref\">stem.Diagnostics.Process.Start*</span> method of the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_StartTime\" data-linktype=\"self-bookmark\">StartTime</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the time that the associated process was started.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_SynchronizingObject\" data-linktype=\"self-bookmark\">SynchronizingObject</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the object used to marshal the event handler calls that are issued as a result of a process exit event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_Threads\" data-linktype=\"self-bookmark\">Threads</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the set of threads that are running in the associated process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_TotalProcessorTime\" data-linktype=\"self-bookmark\">TotalProcessorTime</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the total processor time for this process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_UserProcessorTime\" data-linktype=\"self-bookmark\">UserProcessorTime</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the user processor time for this process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_VirtualMemorySize\" data-linktype=\"self-bookmark\">VirtualMemorySize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the size of the process&#39;s virtual memory, in bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_VirtualMemorySize64\" data-linktype=\"self-bookmark\">VirtualMemorySize64</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the amount of the virtual memory, in bytes, allocated for the associated process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_WorkingSet\" data-linktype=\"self-bookmark\">WorkingSet</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the associated process&#39;s physical memory usage, in bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_WorkingSet64\" data-linktype=\"self-bookmark\">WorkingSet64</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the amount of physical memory, in bytes, allocated for the associated process.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_BeginErrorReadLine\" data-linktype=\"self-bookmark\">BeginErrorReadLine()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Begins asynchronous read operations on the redirected <span class=\"xref\">stem.Diagnostics.Process.StandardError*</span> stream of the application.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_BeginOutputReadLine\" data-linktype=\"self-bookmark\">BeginOutputReadLine()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Begins asynchronous read operations on the redirected <span class=\"xref\">stem.Diagnostics.Process.StandardOutput*</span> stream of the application.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_CancelErrorRead\" data-linktype=\"self-bookmark\">CancelErrorRead()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Cancels the asynchronous read operation on the redirected <span class=\"xref\">stem.Diagnostics.Process.StandardError*</span> stream of an application.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_CancelOutputRead\" data-linktype=\"self-bookmark\">CancelOutputRead()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Cancels the asynchronous read operation on the redirected <span class=\"xref\">stem.Diagnostics.Process.StandardOutput*</span> stream of an application.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_Close\" data-linktype=\"self-bookmark\">Close()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Frees all the resources that are associated with this component.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_CloseMainWindow\" data-linktype=\"self-bookmark\">CloseMainWindow()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Closes a process that has a user interface by sending a close message to its main window.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_Dispose_System_Boolean_\" data-linktype=\"self-bookmark\">Dispose(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Release all resources used by this process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_EnterDebugMode\" data-linktype=\"self-bookmark\">EnterDebugMode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Puts a <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component in state to interact with operating system processes that run in a special mode by enabling the native property <code>SeDebugPrivilege</code> on the current thread.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_GetCurrentProcess\" data-linktype=\"self-bookmark\">GetCurrentProcess()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component and associates it with the currently active process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_GetProcessById_System_Int32_\" data-linktype=\"self-bookmark\">GetProcessById(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component, given the identifier of a process on the local computer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_GetProcessById_System_Int32_System_String_\" data-linktype=\"self-bookmark\">GetProcessById(Int32,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component, given a process identifier and the name of a computer on the network.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_GetProcesses\" data-linktype=\"self-bookmark\">GetProcesses()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component for each process resource on the local computer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_GetProcesses_System_String_\" data-linktype=\"self-bookmark\">GetProcesses(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component for each process resource on the specified computer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_GetProcessesByName_System_String_\" data-linktype=\"self-bookmark\">GetProcessesByName(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an array of new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> components and associates them with all the process resources on the local computer that share the specified process name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_GetProcessesByName_System_String_System_String_\" data-linktype=\"self-bookmark\">GetProcessesByName(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an array of new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> components and associates them with all the process resources on a remote computer that share the specified process name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_Kill\" data-linktype=\"self-bookmark\">Kill()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Immediately stops the associated process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_LeaveDebugMode\" data-linktype=\"self-bookmark\">LeaveDebugMode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Takes a <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component out of the state that lets it interact with operating system processes that run in a special mode.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_OnExited\" data-linktype=\"self-bookmark\">OnExited()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Exited\" data-linktype=\"relative-path\">Exited</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_Refresh\" data-linktype=\"self-bookmark\">Refresh()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Discards any information about the associated process that has been cached inside the process component.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_Start\" data-linktype=\"self-bookmark\">Start()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Starts (or reuses) the process resource that is specified by the <span class=\"xref\">stem.Diagnostics.Process.StartInfo*</span> property of this <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component and associates it with the component.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_Start_System_Diagnostics_ProcessStartInfo_\" data-linktype=\"self-bookmark\">Start(ProcessStartInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Starts the process resource that is specified by the parameter containing process start information (for example, the file name of the process to start) and associates the resource with a new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_Start_System_String_\" data-linktype=\"self-bookmark\">Start(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Starts a process resource by specifying the name of a document or application file and associates the resource with a new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_Start_System_String_System_String_\" data-linktype=\"self-bookmark\">Start(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Starts a process resource by specifying the name of an application and a set of command-line arguments, and associates the resource with a new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_Start_System_String_System_String_System_Security_SecureString_System_String_\" data-linktype=\"self-bookmark\">Start(String,String,SecureString,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Starts a process resource by specifying the name of an application, a user name, a password, and a domain and associates the resource with a new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_Start_System_String_System_String_System_String_System_Security_SecureString_System_String_\" data-linktype=\"self-bookmark\">Start(String,String,String,SecureString,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Starts a process resource by specifying the name of an application, a set of command-line arguments, a user name, a password, and a domain and associates the resource with a new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Formats the process&#39;s name as a string, combined with the parent component type, if applicable.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_WaitForExit\" data-linktype=\"self-bookmark\">WaitForExit()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Instructs the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component to wait indefinitely for the associated process to exit.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_WaitForExit_System_Int32_\" data-linktype=\"self-bookmark\">WaitForExit(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Instructs the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component to wait the specified number of milliseconds for the associated process to exit.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_WaitForInputIdle\" data-linktype=\"self-bookmark\">WaitForInputIdle()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Causes the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component to wait indefinitely for the associated process to enter an idle state. This overload applies only to processes with a user interface and, therefore, a message loop.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_WaitForInputIdle_System_Int32_\" data-linktype=\"self-bookmark\">WaitForInputIdle(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Causes the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component to wait the specified number of milliseconds for the associated process to enter an idle state. This overload applies only to processes with a user interface and, therefore, a message loop.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Events\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_ErrorDataReceived\" data-linktype=\"self-bookmark\">ErrorDataReceived</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when an application writes to its redirected <span class=\"xref\">stem.Diagnostics.Process.StandardError*</span> stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_Exited\" data-linktype=\"self-bookmark\">Exited</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when a process exits.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Process_OutputDataReceived\" data-linktype=\"self-bookmark\">OutputDataReceived</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs each time an application writes a line to its redirected <span class=\"xref\">stem.Diagnostics.Process.StandardOutput*</span> stream.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process__ctor\">\r\n    \r\n            <a id=\"System_Diagnostics_Process__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Process()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Process ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If you do not specify the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_MachineName_\" data-linktype=\"relative-path\">MachineName</a> property, the default is the local computer, (&quot;.&quot;).  </p>\n<p> You have two options for associating a new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component with a process on the computer. The first option is to use the constructor to create the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component, set the appropriate members of the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StartInfo_\" data-linktype=\"relative-path\">StartInfo</a> property and call <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Start_\" data-linktype=\"relative-path\">Start</a> to associate the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> with a new system process. The second option is to associate the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> with a running system process by using <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_GetProcessById_\" data-linktype=\"relative-path\">GetProcessById</a> or one of the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_GetProcesses_\" data-linktype=\"relative-path\">GetProcesses</a> return values.  </p>\n<p> If you use a <code>static</code> overload of the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Start_\" data-linktype=\"relative-path\">Start</a> method to start a new system process, the method creates a new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component and associates it with the process.  </p>\n<p> When the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_UseShellExecute_\" data-linktype=\"relative-path\">UseShellExecute</a> property is set to its default value, <code>true</code>, you can start applications and documents in a way that is similar to using the <code>Run</code> dialog box of the Windows <code>Start</code> menu. When <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_UseShellExecute_\" data-linktype=\"relative-path\">UseShellExecute</a> is <code>false</code>, you can start only executables.  </p>\n<p> Any executable file that you can call from the command line can be started in one of two ways: by setting the appropriate members of the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StartInfo_\" data-linktype=\"relative-path\">StartInfo</a> property and calling the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Start_\" data-linktype=\"relative-path\">Start</a> method with no parameters, or by passing the appropriate parameter to the <code>static</code><a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Start_\" data-linktype=\"relative-path\">Start</a> member.  </p>\n<p> You can create a <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component by using the constructor, one of the static <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Start_\" data-linktype=\"relative-path\">Start</a> overloads, or any of the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_GetProcessById_\" data-linktype=\"relative-path\">GetProcessById</a>, <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_GetProcesses_\" data-linktype=\"relative-path\">GetProcesses</a>, or <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_GetProcessesByName_\" data-linktype=\"relative-path\">GetProcessesByName</a> methods. After you have done so, you have a view into the associated process. This is not a dynamic view that updates itself automatically when the process properties have changed in memory. Instead, you must call <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Refresh_\" data-linktype=\"relative-path\">Refresh</a> for the component to update the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> property information in your application.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_BasePriority\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_BasePriority_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BasePriority</div>        \r\n          </div>\r\n    \r\n            <p>Gets the base priority of the associated process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int BasePriority { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The base priority, which is computed from the <span class=\"xref\">stem.Diagnostics.Process.PriorityClass*</span> of the associated process.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The platform is Windows 98 or Windows Millennium Edition (Windows Me); set the <span class=\"xref\">stem.Diagnostics.ProcessStartInfo.UseShellExecute*</span> property to <code>false</code> to access this property on Windows 98 and Windows Me.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The process has exited.  </p>\n<p> -or-  </p>\n<p> The process has not started, so there is no process ID.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The BasePriority of the process is the starting priority for threads created within the associated process. You can view information about the base priority through the System Monitor&#39;s Priority Base counter.  </p>\n<p> Based on the time elapsed or other boosts, the operating system can change the base priority when a process should be placed ahead of others.  </p>\n<p> The BasePriority property lets you view the starting priority assigned to a process. However, because it is read-only, you cannot use the BasePriority to set the priority of the process. To change the priority, use the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_PriorityClass_\" data-linktype=\"relative-path\">PriorityClass</a> property. The BasePriority is viewable using the System Monitor, while the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_PriorityClass_\" data-linktype=\"relative-path\">PriorityClass</a> is not. Both the BasePriority and the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_PriorityClass_\" data-linktype=\"relative-path\">PriorityClass</a> can be viewed programmatically. The following table shows the relationship between BasePriority values and <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_PriorityClass_\" data-linktype=\"relative-path\">PriorityClass</a> values.  </p>\n<table>\n<thead>\n<tr>\n<th>BasePriority</th>\n<th>PriorityClass</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>4</td>\n<td><a class=\"xref\" href=\"system.diagnostics.processpriorityclass\" data-linktype=\"relative-path\">ProcessPriorityClass</a></td>\n</tr>\n<tr>\n<td>8</td>\n<td><a class=\"xref\" href=\"system.diagnostics.processpriorityclass\" data-linktype=\"relative-path\">ProcessPriorityClass</a></td>\n</tr>\n<tr>\n<td>13</td>\n<td><a class=\"xref\" href=\"system.diagnostics.processpriorityclass\" data-linktype=\"relative-path\">ProcessPriorityClass</a></td>\n</tr>\n<tr>\n<td>24</td>\n<td><a class=\"xref\" href=\"system.diagnostics.processpriorityclass\" data-linktype=\"relative-path\">ProcessPriorityClass</a></td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example starts an instance of Notepad. The example then retrieves and displays various properties of the associated process. The example detects when the process exits, and displays the process&#39;s exit code.  </p>\n<pre><code class=\"lang-cpp\" name=\"Diag_Process_MemoryProperties64#1\">#using &lt;system.dll&gt;\n\nusing namespace System;\nusing namespace System::Diagnostics;\nint main()\n{\n   \n   // Define variables to track the peak\n   // memory usage of the process.\n   _int64 peakPagedMem = 0,peakWorkingSet = 0,peakVirtualMem = 0;\n   Process^ myProcess = nullptr;\n   try\n   {\n      \n      // Start the process.\n      myProcess = Process::Start( &quot;NotePad.exe&quot; );\n      \n      // Display the process statistics until\n      // the user closes the program.\n      do\n      {\n         if (  !myProcess-&gt;HasExited )\n         {\n            \n            // Refresh the current process property values.\n            myProcess-&gt;Refresh();\n            Console::WriteLine();\n            \n            // Display current process statistics.\n            Console::WriteLine( &quot;{0} -&quot;, myProcess );\n            Console::WriteLine( &quot;-------------------------------------&quot; );\n            Console::WriteLine( &quot;  physical memory usage: {0}&quot;, myProcess-&gt;WorkingSet64 );\n            Console::WriteLine( &quot;  base priority: {0}&quot;, myProcess-&gt;BasePriority );\n            Console::WriteLine( &quot;  priority class: {0}&quot;, myProcess-&gt;PriorityClass );\n            Console::WriteLine( &quot;  user processor time: {0}&quot;, myProcess-&gt;UserProcessorTime );\n            Console::WriteLine( &quot;  privileged processor time: {0}&quot;, myProcess-&gt;PrivilegedProcessorTime );\n            Console::WriteLine( &quot;  total processor time: {0}&quot;, myProcess-&gt;TotalProcessorTime );\n\t\t\tConsole::WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;, myProcess-&gt;PagedSystemMemorySize64);\n            Console::WriteLine(&quot;  PagedMemorySize64: {0}&quot;, myProcess-&gt;PagedMemorySize64);\n            \n            // Update the values for the overall peak memory statistics.\n            peakPagedMem = myProcess-&gt;PeakPagedMemorySize64;\n            peakVirtualMem = myProcess-&gt;PeakVirtualMemorySize64;\n            peakWorkingSet = myProcess-&gt;PeakWorkingSet64;\n            if ( myProcess-&gt;Responding )\n            {\n               Console::WriteLine( &quot;Status = Running&quot; );\n            }\n            else\n            {\n               Console::WriteLine( &quot;Status = Not Responding&quot; );\n            }\n         }\n      }\n      while (  !myProcess-&gt;WaitForExit( 1000 ) );\n      Console::WriteLine();\n      Console::WriteLine( &quot;Process exit code: {0}&quot;, myProcess-&gt;ExitCode );\n      \n      // Display peak memory statistics for the process.\n      Console::WriteLine( &quot;Peak physical memory usage of the process: {0}&quot;, peakWorkingSet );\n      Console::WriteLine( &quot;Peak paged memory usage of the process: {0}&quot;, peakPagedMem );\n      Console::WriteLine( &quot;Peak virtual memory usage of the process: {0}&quot;, peakVirtualMem );\n   }\n   finally\n   {\n      if ( myProcess != nullptr )\n      {\n         myProcess-&gt;Close();\n      }\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Diag_Process_MemoryProperties64#1\">using System;\nusing System.Diagnostics;\n\nnamespace ProcessSample\n{\n    class ProcessMonitorSample\n    {\n        public static void Main()\n        {\n\n            // Define variables to track the peak\n            // memory usage of the process.\n            long peakPagedMem = 0,\n                peakWorkingSet = 0,\n                peakVirtualMem = 0;\n\n            Process myProcess = null;\n\n            try\n            {\n                // Start the process.\n                myProcess = Process.Start(&quot;NotePad.exe&quot;);\n\n                // Display the process statistics until\n                // the user closes the program.\n                do\n                {\n                    if (!myProcess.HasExited)\n                    {\n                        // Refresh the current process property values.\n                        myProcess.Refresh();\n\n                        Console.WriteLine();\n\n                        // Display current process statistics.\n\n                        Console.WriteLine(&quot;{0} -&quot;, myProcess.ToString());\n                        Console.WriteLine(&quot;-------------------------------------&quot;);\n\n                        Console.WriteLine(&quot;  physical memory usage: {0}&quot;,\n                            myProcess.WorkingSet64);\n                        Console.WriteLine(&quot;  base priority: {0}&quot;,\n                            myProcess.BasePriority);\n                        Console.WriteLine(&quot;  priority class: {0}&quot;,\n                            myProcess.PriorityClass);\n                        Console.WriteLine(&quot;  user processor time: {0}&quot;,\n                            myProcess.UserProcessorTime);\n                        Console.WriteLine(&quot;  privileged processor time: {0}&quot;,\n                            myProcess.PrivilegedProcessorTime);\n                        Console.WriteLine(&quot;  total processor time: {0}&quot;,\n                            myProcess.TotalProcessorTime);\n                        Console.WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;,\n                            myProcess.PagedSystemMemorySize64);\n                        Console.WriteLine(&quot;  PagedMemorySize64: {0}&quot;,\n                           myProcess.PagedMemorySize64);\n\n                        // Update the values for the overall peak memory statistics.\n                        peakPagedMem = myProcess.PeakPagedMemorySize64;\n                        peakVirtualMem = myProcess.PeakVirtualMemorySize64;\n                        peakWorkingSet = myProcess.PeakWorkingSet64;\n\n                        if (myProcess.Responding)\n                        {\n                            Console.WriteLine(&quot;Status = Running&quot;);\n                        }\n                        else\n                        {\n                            Console.WriteLine(&quot;Status = Not Responding&quot;);\n                        }\n                    }\n                }\n                while (!myProcess.WaitForExit(1000));\n\n\n                Console.WriteLine();\n                Console.WriteLine(&quot;Process exit code: {0}&quot;,\n                    myProcess.ExitCode);\n\n                // Display peak memory statistics for the process.\n                Console.WriteLine(&quot;Peak physical memory usage of the process: {0}&quot;,\n                    peakWorkingSet);\n                Console.WriteLine(&quot;Peak paged memory usage of the process: {0}&quot;,\n                    peakPagedMem);\n                Console.WriteLine(&quot;Peak virtual memory usage of the process: {0}&quot;,\n                    peakVirtualMem);\n\n            }\n            finally\n            {\n                if (myProcess != null)\n                {\n                    myProcess.Close();\n                }\n            }\n        }\n\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Diag_Process_MemoryProperties64#1\">Imports System\nImports System.Diagnostics\n\nNamespace ProcessSample\n    Class ProcessMonitorSample\n\n        Public Shared Sub Main()\n\n            &#39; Define variables to track the peak\n            &#39; memory usage of the process.\n            Dim peakPagedMem As Long = 0\n            Dim peakWorkingSet As Long = 0\n            Dim peakVirtualMem As Long = 0\n\n            Dim myProcess As Process = Nothing\n\n            Try\n\n                &#39; Start the process.\n                myProcess = Process.Start(&quot;NotePad.exe&quot;)\n\n                &#39; Display process statistics until\n                &#39; the user closes the program.\n                Do\n\n                    If Not myProcess.HasExited Then\n\n                        &#39; Refresh the current process property values.\n                        myProcess.Refresh()\n\n                        Console.WriteLine()\n\n                        &#39; Display current process statistics.\n\n                        Console.WriteLine(&quot;{0} -&quot;, myProcess.ToString())\n                        Console.WriteLine(&quot;-------------------------------------&quot;)\n\n                        Console.WriteLine(&quot;  physical memory usage: {0}&quot;, _\n                             myProcess.WorkingSet64)\n                        Console.WriteLine(&quot;  base priority: {0}&quot;, _\n                             myProcess.BasePriority)\n                        Console.WriteLine(&quot;  priority class: {0}&quot;, _\n                             myProcess.PriorityClass)\n                        Console.WriteLine(&quot;  user processor time: {0}&quot;, _\n                             myProcess.UserProcessorTime)\n                        Console.WriteLine(&quot;  privileged processor time: {0}&quot;, _\n                             myProcess.PrivilegedProcessorTime)\n                        Console.WriteLine(&quot;  total processor time: {0}&quot;, _\n                             myProcess.TotalProcessorTime)\n                        Console.WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;, _\n                            myProcess.PagedSystemMemorySize64)\n                        Console.WriteLine(&quot;  PagedMemorySize64: {0}&quot;, _\n                           myProcess.PagedMemorySize64)\n\n                        &#39; Update the values for the overall peak memory statistics.\n                        peakPagedMem = myProcess.PeakPagedMemorySize64\n                        peakVirtualMem = myProcess.PeakVirtualMemorySize64\n                        peakWorkingSet = myProcess.PeakWorkingSet64\n\n                        If myProcess.Responding Then\n                            Console.WriteLine(&quot;Status = Running&quot;)\n                        Else\n                            Console.WriteLine(&quot;Status = Not Responding&quot;)\n                        End If\n                    End If\n                Loop While Not myProcess.WaitForExit(1000)\n\n                Console.WriteLine()\n                Console.WriteLine(&quot;Process exit code: {0}&quot;, myProcess.ExitCode)\n\n                &#39; Display peak memory statistics for the process.\n                Console.WriteLine(&quot;Peak physical memory usage of the process: {0}&quot;, _\n                    peakWorkingSet)\n                Console.WriteLine(&quot;Peak paged memory usage of the process: {0}&quot;, _\n                    peakPagedMem)\n                Console.WriteLine(&quot;Peak virtual memory usage of the process: {0}&quot;, _\n                    peakVirtualMem)\n\n            Finally\n                If Not myProcess Is Nothing Then\n                    myProcess.Close()\n                End If\n            End Try\n        End Sub &#39;Main\n    End Class\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_EnableRaisingEvents\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_EnableRaisingEvents_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EnableRaisingEvents</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets whether the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Exited\" data-linktype=\"relative-path\">Exited</a> event should be raised when the process terminates.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool EnableRaisingEvents { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Exited\" data-linktype=\"relative-path\">Exited</a> event should be raised when the associated process is terminated (through either an exit or a call to <span class=\"xref\">stem.Diagnostics.Process.Kill*</span>); otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The EnableRaisingEvents property indicates whether the component should be notified when the operating system has shut down a process. The EnableRaisingEvents property is used in asynchronous processing to notify your application that a process has exited. To force your application to synchronously wait for an exit event (which interrupts processing of the application until the exit event has occurred), use the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_WaitForExit_\" data-linktype=\"relative-path\">WaitForExit</a> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If you are using Visual Studio and double-click a <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component in your project, an <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Exited\" data-linktype=\"relative-path\">Exited</a> event delegate and event handler are automatically generated. Additional code sets the EnableRaisingEvents property to <code>false</code>. You must change this property to <code>true</code> for your event handler to be executed when the associated process exits.  </p>\n</div>\n<p> When an associated process exits after being shut down by the operating system either through a normal or abnormal termination, the operating system notifies each process component to which the process was associated, as long as the component&#39;s EnableRaisingEvents value is <code>true</code>. If a component started the process, the component can then access the administrative information for the associated process, which is still being stored by the operating system. Such information includes the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_ExitTime_\" data-linktype=\"relative-path\">ExitTime</a>, and the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_ExitCode_\" data-linktype=\"relative-path\">ExitCode</a>.  </p>\n<p> After the associated process exits, the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Handle_\" data-linktype=\"relative-path\">Handle</a> of the component no longer points to an existing process resource. Instead, it can be used only to access the operating system&#39;s information about the process resource. The operating system is aware that there are handles to exited processes that have not been released by <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> components, so it keeps the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_ExitTime_\" data-linktype=\"relative-path\">ExitTime</a> and <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Handle_\" data-linktype=\"relative-path\">Handle</a> information in memory.  </p>\n<p> There is a cost associated with watching for a process to exit. If EnableRaisingEvents is <code>true</code>, the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Exited\" data-linktype=\"relative-path\">Exited</a> event is raised when the associated process terminates. The procedures that you have specified for the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Exited\" data-linktype=\"relative-path\">Exited</a> event run at that time.  </p>\n<p> Sometimes, your application starts a process but does not need to be notified of its closure. For example, your application can start Notepad to allow the user to perform text editing, but make no further use of the Notepad application. You can choose to not be notified when the process exits, because it is not relevant to the continued operation of your application. Setting EnableRaisingEvents to <code>false</code> saves system resources.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a process that prints a file. It sets the EnableRaisingEvents property to cause the process to raise the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Exited\" data-linktype=\"relative-path\">Exited</a> event when it exits. The <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Exited\" data-linktype=\"relative-path\">Exited</a> event handler displays process information.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Diagnostics.Process.EnableExited#1\">Imports System\nImports System.Diagnostics\nImports System.Threading\n\nClass PrintProcessClass\n\n    Private WithEvents myProcess As New Process\n    Private elapsedTime As Integer\n    Private eventHandled As Boolean\n\n    Public Event Exited As EventHandler\n\n    &#39; Print a file with any known extension.\n    Sub PrintDoc(ByVal fileName As String)\n\n        elapsedTime = 0\n        eventHandled = False\n\n        Try\n            &#39; Start a process to print a file and raise an event when done.\n            myProcess.StartInfo.FileName = fileName\n            myProcess.StartInfo.Verb = &quot;Print&quot;\n            myProcess.StartInfo.CreateNoWindow = True\n            myProcess.EnableRaisingEvents = True\n            myProcess.Start()\n\n        Catch ex As Exception\n            Console.WriteLine(&quot;An error occurred trying to print &quot;&quot;{0}&quot;&quot;:&quot; &amp; _\n                vbCrLf &amp; ex.Message, fileName)\n            Return\n        End Try\n\n        &#39; Wait for Exited event, but not more than 30 seconds.\n        Const SLEEP_AMOUNT As Integer = 100\n        Do While Not eventHandled\n            elapsedTime += SLEEP_AMOUNT\n            If elapsedTime &gt; 30000 Then\n                Exit Do\n            End If\n            Thread.Sleep(SLEEP_AMOUNT)\n        Loop\n    End Sub\n\n    &#39; Handle Exited event and display process information.\n    Private Sub myProcess_Exited(ByVal sender As Object, _\n            ByVal e As System.EventArgs) Handles myProcess.Exited\n\n        eventHandled = True\n        Console.WriteLine(&quot;Exit time:    {0}&quot; &amp; vbCrLf &amp; _\n            &quot;Exit code:    {1}&quot; &amp; vbCrLf &amp; &quot;Elapsed time: {2}&quot;, _\n            myProcess.ExitTime, myProcess.ExitCode, elapsedTime)\n    End Sub\n\n    Shared Sub Main(ByVal args() As String)\n\n        &#39; Verify that an argument has been entered.\n        If args.Length &lt;= 0 Then\n            Console.WriteLine(&quot;Enter a file name.&quot;)\n            Return\n        End If\n\n        &#39; Create the process and print the document.\n        Dim myPrintProcess As New PrintProcessClass\n        myPrintProcess.PrintDoc(args(0))\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Diagnostics.Process.EnableExited#1\">using System;\nusing System.Diagnostics;\nusing System.Threading;\n\nclass PrintProcessClass\n{\n\n    private Process myProcess = new Process();\n    private int elapsedTime;\n    private bool eventHandled;\n\n    // Print a file with any known extension.\n    public void PrintDoc(string fileName)\n    {\n\n        elapsedTime = 0;\n        eventHandled = false;\n\n        try\n        {\n            // Start a process to print a file and raise an event when done.\n            myProcess.StartInfo.FileName = fileName;\n            myProcess.StartInfo.Verb = &quot;Print&quot;;\n            myProcess.StartInfo.CreateNoWindow = true;\n            myProcess.EnableRaisingEvents = true;\n            myProcess.Exited += new EventHandler(myProcess_Exited);\n            myProcess.Start();\n\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(&quot;An error occurred trying to print \\&quot;{0}\\&quot;:&quot; + &quot;<br>&quot; + ex.Message, fileName);\n            return;\n        }\n\n        // Wait for Exited event, but not more than 30 seconds.\n        const int SLEEP_AMOUNT = 100;\n        while (!eventHandled)\n        {\n            elapsedTime += SLEEP_AMOUNT;\n            if (elapsedTime &gt; 30000)\n            {\n                break;\n            }\n            Thread.Sleep(SLEEP_AMOUNT);\n        }\n    }\n\n    // Handle Exited event and display process information.\n    private void myProcess_Exited(object sender, System.EventArgs e)\n    {\n\n        eventHandled = true;\n        Console.WriteLine(&quot;Exit time:    {0}\\r<br>&quot; +\n            &quot;Exit code:    {1}\\r<br>Elapsed time: {2}&quot;, myProcess.ExitTime, myProcess.ExitCode, elapsedTime);\n    }\n\n    public static void Main(string[] args)\n    {\n\n        // Verify that an argument has been entered.\n        if (args.Length &lt;= 0)\n        {\n            Console.WriteLine(&quot;Enter a file name.&quot;);\n            return;\n        }\n\n        // Create the process and print the document.\n        PrintProcessClass myPrintProcess = new PrintProcessClass();\n        myPrintProcess.PrintDoc(args[0]);\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_ExitCode\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_ExitCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExitCode</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value that the associated process specified when it terminated.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int ExitCode { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The code that the associated process specified when it terminated.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The process has not exited.  </p>\n<p> -or-  </p>\n<p> The process <span class=\"xref\">stem.Diagnostics.Process.Handle*</span> is not valid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>You are trying to access the ExitCode property for a process that is running on a remote computer. This property is available only for processes that are running on the local computer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use ExitCode to get the status that the system process returned when it exited. You can use the exit code much like an integer return value from a <code>main()</code> procedure.  </p>\n<p> The ExitCode value for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process.  </p>\n<p> Developers usually indicate a successful exit by an ExitCode value of zero, and designate errors by nonzero values that the calling method can use to identify the cause of an abnormal process termination. It is not necessary to follow these guidelines, but they are the convention.  </p>\n<p> If you try to get the ExitCode before the process has exited, the attempt throws an exception. Examine the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_HasExited_\" data-linktype=\"relative-path\">HasExited</a> property first to verify whether the associated process has terminated.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When standard output has been redirected to asynchronous event handlers, it is possible that output processing will not have completed when <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_HasExited_\" data-linktype=\"relative-path\">HasExited</a> returns <code>true</code>. To ensure that asynchronous event handling has been completed, call the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_WaitForExit\" data-linktype=\"relative-path\">WaitForExit()</a> overload that takes no parameter before checking <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_HasExited_\" data-linktype=\"relative-path\">HasExited</a>.  </p>\n</div>\n<p> You can use the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_CloseMainWindow_\" data-linktype=\"relative-path\">CloseMainWindow</a> or the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Kill_\" data-linktype=\"relative-path\">Kill</a> method to cause an associated process to exit.  </p>\n<p> There are two ways of being notified when the associated process exits: synchronously and asynchronously. Synchronous notification relies on calling the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_WaitForExit_\" data-linktype=\"relative-path\">WaitForExit</a> method to pause the processing of your application until the associated component exits. Asynchronous notification relies on the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Exited\" data-linktype=\"relative-path\">Exited</a> event. When using asynchronous notification, <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_EnableRaisingEvents_\" data-linktype=\"relative-path\">EnableRaisingEvents</a> must be set to <code>true</code> for the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component to receive notification that the process has exited.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example starts an instance of Notepad. The example then retrieves and displays various properties of the associated process. The example detects when the process exits, and displays the process&#39;s exit code.  </p>\n<pre><code class=\"lang-cpp\" name=\"Diag_Process_MemoryProperties64#1\">#using &lt;system.dll&gt;\n\nusing namespace System;\nusing namespace System::Diagnostics;\nint main()\n{\n   \n   // Define variables to track the peak\n   // memory usage of the process.\n   _int64 peakPagedMem = 0,peakWorkingSet = 0,peakVirtualMem = 0;\n   Process^ myProcess = nullptr;\n   try\n   {\n      \n      // Start the process.\n      myProcess = Process::Start( &quot;NotePad.exe&quot; );\n      \n      // Display the process statistics until\n      // the user closes the program.\n      do\n      {\n         if (  !myProcess-&gt;HasExited )\n         {\n            \n            // Refresh the current process property values.\n            myProcess-&gt;Refresh();\n            Console::WriteLine();\n            \n            // Display current process statistics.\n            Console::WriteLine( &quot;{0} -&quot;, myProcess );\n            Console::WriteLine( &quot;-------------------------------------&quot; );\n            Console::WriteLine( &quot;  physical memory usage: {0}&quot;, myProcess-&gt;WorkingSet64 );\n            Console::WriteLine( &quot;  base priority: {0}&quot;, myProcess-&gt;BasePriority );\n            Console::WriteLine( &quot;  priority class: {0}&quot;, myProcess-&gt;PriorityClass );\n            Console::WriteLine( &quot;  user processor time: {0}&quot;, myProcess-&gt;UserProcessorTime );\n            Console::WriteLine( &quot;  privileged processor time: {0}&quot;, myProcess-&gt;PrivilegedProcessorTime );\n            Console::WriteLine( &quot;  total processor time: {0}&quot;, myProcess-&gt;TotalProcessorTime );\n\t\t\tConsole::WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;, myProcess-&gt;PagedSystemMemorySize64);\n            Console::WriteLine(&quot;  PagedMemorySize64: {0}&quot;, myProcess-&gt;PagedMemorySize64);\n            \n            // Update the values for the overall peak memory statistics.\n            peakPagedMem = myProcess-&gt;PeakPagedMemorySize64;\n            peakVirtualMem = myProcess-&gt;PeakVirtualMemorySize64;\n            peakWorkingSet = myProcess-&gt;PeakWorkingSet64;\n            if ( myProcess-&gt;Responding )\n            {\n               Console::WriteLine( &quot;Status = Running&quot; );\n            }\n            else\n            {\n               Console::WriteLine( &quot;Status = Not Responding&quot; );\n            }\n         }\n      }\n      while (  !myProcess-&gt;WaitForExit( 1000 ) );\n      Console::WriteLine();\n      Console::WriteLine( &quot;Process exit code: {0}&quot;, myProcess-&gt;ExitCode );\n      \n      // Display peak memory statistics for the process.\n      Console::WriteLine( &quot;Peak physical memory usage of the process: {0}&quot;, peakWorkingSet );\n      Console::WriteLine( &quot;Peak paged memory usage of the process: {0}&quot;, peakPagedMem );\n      Console::WriteLine( &quot;Peak virtual memory usage of the process: {0}&quot;, peakVirtualMem );\n   }\n   finally\n   {\n      if ( myProcess != nullptr )\n      {\n         myProcess-&gt;Close();\n      }\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Diag_Process_MemoryProperties64#1\">using System;\nusing System.Diagnostics;\n\nnamespace ProcessSample\n{\n    class ProcessMonitorSample\n    {\n        public static void Main()\n        {\n\n            // Define variables to track the peak\n            // memory usage of the process.\n            long peakPagedMem = 0,\n                peakWorkingSet = 0,\n                peakVirtualMem = 0;\n\n            Process myProcess = null;\n\n            try\n            {\n                // Start the process.\n                myProcess = Process.Start(&quot;NotePad.exe&quot;);\n\n                // Display the process statistics until\n                // the user closes the program.\n                do\n                {\n                    if (!myProcess.HasExited)\n                    {\n                        // Refresh the current process property values.\n                        myProcess.Refresh();\n\n                        Console.WriteLine();\n\n                        // Display current process statistics.\n\n                        Console.WriteLine(&quot;{0} -&quot;, myProcess.ToString());\n                        Console.WriteLine(&quot;-------------------------------------&quot;);\n\n                        Console.WriteLine(&quot;  physical memory usage: {0}&quot;,\n                            myProcess.WorkingSet64);\n                        Console.WriteLine(&quot;  base priority: {0}&quot;,\n                            myProcess.BasePriority);\n                        Console.WriteLine(&quot;  priority class: {0}&quot;,\n                            myProcess.PriorityClass);\n                        Console.WriteLine(&quot;  user processor time: {0}&quot;,\n                            myProcess.UserProcessorTime);\n                        Console.WriteLine(&quot;  privileged processor time: {0}&quot;,\n                            myProcess.PrivilegedProcessorTime);\n                        Console.WriteLine(&quot;  total processor time: {0}&quot;,\n                            myProcess.TotalProcessorTime);\n                        Console.WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;,\n                            myProcess.PagedSystemMemorySize64);\n                        Console.WriteLine(&quot;  PagedMemorySize64: {0}&quot;,\n                           myProcess.PagedMemorySize64);\n\n                        // Update the values for the overall peak memory statistics.\n                        peakPagedMem = myProcess.PeakPagedMemorySize64;\n                        peakVirtualMem = myProcess.PeakVirtualMemorySize64;\n                        peakWorkingSet = myProcess.PeakWorkingSet64;\n\n                        if (myProcess.Responding)\n                        {\n                            Console.WriteLine(&quot;Status = Running&quot;);\n                        }\n                        else\n                        {\n                            Console.WriteLine(&quot;Status = Not Responding&quot;);\n                        }\n                    }\n                }\n                while (!myProcess.WaitForExit(1000));\n\n\n                Console.WriteLine();\n                Console.WriteLine(&quot;Process exit code: {0}&quot;,\n                    myProcess.ExitCode);\n\n                // Display peak memory statistics for the process.\n                Console.WriteLine(&quot;Peak physical memory usage of the process: {0}&quot;,\n                    peakWorkingSet);\n                Console.WriteLine(&quot;Peak paged memory usage of the process: {0}&quot;,\n                    peakPagedMem);\n                Console.WriteLine(&quot;Peak virtual memory usage of the process: {0}&quot;,\n                    peakVirtualMem);\n\n            }\n            finally\n            {\n                if (myProcess != null)\n                {\n                    myProcess.Close();\n                }\n            }\n        }\n\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Diag_Process_MemoryProperties64#1\">Imports System\nImports System.Diagnostics\n\nNamespace ProcessSample\n    Class ProcessMonitorSample\n\n        Public Shared Sub Main()\n\n            &#39; Define variables to track the peak\n            &#39; memory usage of the process.\n            Dim peakPagedMem As Long = 0\n            Dim peakWorkingSet As Long = 0\n            Dim peakVirtualMem As Long = 0\n\n            Dim myProcess As Process = Nothing\n\n            Try\n\n                &#39; Start the process.\n                myProcess = Process.Start(&quot;NotePad.exe&quot;)\n\n                &#39; Display process statistics until\n                &#39; the user closes the program.\n                Do\n\n                    If Not myProcess.HasExited Then\n\n                        &#39; Refresh the current process property values.\n                        myProcess.Refresh()\n\n                        Console.WriteLine()\n\n                        &#39; Display current process statistics.\n\n                        Console.WriteLine(&quot;{0} -&quot;, myProcess.ToString())\n                        Console.WriteLine(&quot;-------------------------------------&quot;)\n\n                        Console.WriteLine(&quot;  physical memory usage: {0}&quot;, _\n                             myProcess.WorkingSet64)\n                        Console.WriteLine(&quot;  base priority: {0}&quot;, _\n                             myProcess.BasePriority)\n                        Console.WriteLine(&quot;  priority class: {0}&quot;, _\n                             myProcess.PriorityClass)\n                        Console.WriteLine(&quot;  user processor time: {0}&quot;, _\n                             myProcess.UserProcessorTime)\n                        Console.WriteLine(&quot;  privileged processor time: {0}&quot;, _\n                             myProcess.PrivilegedProcessorTime)\n                        Console.WriteLine(&quot;  total processor time: {0}&quot;, _\n                             myProcess.TotalProcessorTime)\n                        Console.WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;, _\n                            myProcess.PagedSystemMemorySize64)\n                        Console.WriteLine(&quot;  PagedMemorySize64: {0}&quot;, _\n                           myProcess.PagedMemorySize64)\n\n                        &#39; Update the values for the overall peak memory statistics.\n                        peakPagedMem = myProcess.PeakPagedMemorySize64\n                        peakVirtualMem = myProcess.PeakVirtualMemorySize64\n                        peakWorkingSet = myProcess.PeakWorkingSet64\n\n                        If myProcess.Responding Then\n                            Console.WriteLine(&quot;Status = Running&quot;)\n                        Else\n                            Console.WriteLine(&quot;Status = Not Responding&quot;)\n                        End If\n                    End If\n                Loop While Not myProcess.WaitForExit(1000)\n\n                Console.WriteLine()\n                Console.WriteLine(&quot;Process exit code: {0}&quot;, myProcess.ExitCode)\n\n                &#39; Display peak memory statistics for the process.\n                Console.WriteLine(&quot;Peak physical memory usage of the process: {0}&quot;, _\n                    peakWorkingSet)\n                Console.WriteLine(&quot;Peak paged memory usage of the process: {0}&quot;, _\n                    peakPagedMem)\n                Console.WriteLine(&quot;Peak virtual memory usage of the process: {0}&quot;, _\n                    peakVirtualMem)\n\n            Finally\n                If Not myProcess Is Nothing Then\n                    myProcess.Close()\n                End If\n            End Try\n        End Sub &#39;Main\n    End Class\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_ExitTime\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_ExitTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExitTime</div>        \r\n          </div>\r\n    \r\n            <p>Gets the time that the associated process exited.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public DateTime ExitTime { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that indicates when the associated process was terminated.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>You are trying to access the ExitTime property for a process that is running on a remote computer. This property is available only for processes that are running on the local computer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the process has not terminated, attempting to retrieve the ExitTime property throws an exception. Use <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_HasExited_\" data-linktype=\"relative-path\">HasExited</a> before getting the ExitTime property to determine whether the associated process has terminated.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a process that prints a file. The process raises the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Exited\" data-linktype=\"relative-path\">Exited</a> event when it exits, and the event handler displays the ExitTime property and other process information.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Diagnostics.Process.EnableExited#1\">Imports System\nImports System.Diagnostics\nImports System.Threading\n\nClass PrintProcessClass\n\n    Private WithEvents myProcess As New Process\n    Private elapsedTime As Integer\n    Private eventHandled As Boolean\n\n    Public Event Exited As EventHandler\n\n    &#39; Print a file with any known extension.\n    Sub PrintDoc(ByVal fileName As String)\n\n        elapsedTime = 0\n        eventHandled = False\n\n        Try\n            &#39; Start a process to print a file and raise an event when done.\n            myProcess.StartInfo.FileName = fileName\n            myProcess.StartInfo.Verb = &quot;Print&quot;\n            myProcess.StartInfo.CreateNoWindow = True\n            myProcess.EnableRaisingEvents = True\n            myProcess.Start()\n\n        Catch ex As Exception\n            Console.WriteLine(&quot;An error occurred trying to print &quot;&quot;{0}&quot;&quot;:&quot; &amp; _\n                vbCrLf &amp; ex.Message, fileName)\n            Return\n        End Try\n\n        &#39; Wait for Exited event, but not more than 30 seconds.\n        Const SLEEP_AMOUNT As Integer = 100\n        Do While Not eventHandled\n            elapsedTime += SLEEP_AMOUNT\n            If elapsedTime &gt; 30000 Then\n                Exit Do\n            End If\n            Thread.Sleep(SLEEP_AMOUNT)\n        Loop\n    End Sub\n\n    &#39; Handle Exited event and display process information.\n    Private Sub myProcess_Exited(ByVal sender As Object, _\n            ByVal e As System.EventArgs) Handles myProcess.Exited\n\n        eventHandled = True\n        Console.WriteLine(&quot;Exit time:    {0}&quot; &amp; vbCrLf &amp; _\n            &quot;Exit code:    {1}&quot; &amp; vbCrLf &amp; &quot;Elapsed time: {2}&quot;, _\n            myProcess.ExitTime, myProcess.ExitCode, elapsedTime)\n    End Sub\n\n    Shared Sub Main(ByVal args() As String)\n\n        &#39; Verify that an argument has been entered.\n        If args.Length &lt;= 0 Then\n            Console.WriteLine(&quot;Enter a file name.&quot;)\n            Return\n        End If\n\n        &#39; Create the process and print the document.\n        Dim myPrintProcess As New PrintProcessClass\n        myPrintProcess.PrintDoc(args(0))\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Diagnostics.Process.EnableExited#1\">using System;\nusing System.Diagnostics;\nusing System.Threading;\n\nclass PrintProcessClass\n{\n\n    private Process myProcess = new Process();\n    private int elapsedTime;\n    private bool eventHandled;\n\n    // Print a file with any known extension.\n    public void PrintDoc(string fileName)\n    {\n\n        elapsedTime = 0;\n        eventHandled = false;\n\n        try\n        {\n            // Start a process to print a file and raise an event when done.\n            myProcess.StartInfo.FileName = fileName;\n            myProcess.StartInfo.Verb = &quot;Print&quot;;\n            myProcess.StartInfo.CreateNoWindow = true;\n            myProcess.EnableRaisingEvents = true;\n            myProcess.Exited += new EventHandler(myProcess_Exited);\n            myProcess.Start();\n\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(&quot;An error occurred trying to print \\&quot;{0}\\&quot;:&quot; + &quot;<br>&quot; + ex.Message, fileName);\n            return;\n        }\n\n        // Wait for Exited event, but not more than 30 seconds.\n        const int SLEEP_AMOUNT = 100;\n        while (!eventHandled)\n        {\n            elapsedTime += SLEEP_AMOUNT;\n            if (elapsedTime &gt; 30000)\n            {\n                break;\n            }\n            Thread.Sleep(SLEEP_AMOUNT);\n        }\n    }\n\n    // Handle Exited event and display process information.\n    private void myProcess_Exited(object sender, System.EventArgs e)\n    {\n\n        eventHandled = true;\n        Console.WriteLine(&quot;Exit time:    {0}\\r<br>&quot; +\n            &quot;Exit code:    {1}\\r<br>Elapsed time: {2}&quot;, myProcess.ExitTime, myProcess.ExitCode, elapsedTime);\n    }\n\n    public static void Main(string[] args)\n    {\n\n        // Verify that an argument has been entered.\n        if (args.Length &lt;= 0)\n        {\n            Console.WriteLine(&quot;Enter a file name.&quot;);\n            return;\n        }\n\n        // Create the process and print the document.\n        PrintProcessClass myPrintProcess = new PrintProcessClass();\n        myPrintProcess.PrintDoc(args[0]);\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_Handle\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_Handle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Handle</div>        \r\n          </div>\r\n    \r\n            <p>Gets the native handle of the associated process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IntPtr Handle { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>The handle that the operating system assigned to the associated process when the process was started. The system uses this handle to keep track of process attributes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The process has not been started or has exited. The Handle property cannot be read because there is no process associated with this <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> instance.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> instance has been attached to a running process but you do not have the necessary permissions to get a handle with full access rights.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>You are trying to access the Handle property for a process that is running on a remote computer. This property is available only for processes that are running on the local computer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An application can obtain a handle to a process that can be used as a parameter to many process-information and control functions. You can use this handle to initialize a <a class=\"xref\" href=\"system.threading.waithandle\" data-linktype=\"relative-path\">WaitHandle</a> or to call native methods with platform invoke.  </p>\n<p> This process handle is private to an application--in other words, process handles cannot be shared. A process also has a process <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Id_\" data-linktype=\"relative-path\">Id</a> which, unlike the Handle, is unique and, therefore, valid throughout the system.  </p>\n<p> Only processes started through a call to <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Start_\" data-linktype=\"relative-path\">Start</a> set the Handle property of the corresponding <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> instances.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_HandleCount\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_HandleCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HandleCount</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of handles opened by the process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int HandleCount { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of operating system handles the process has opened.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The platform is Windows 98 or Windows Millennium Edition (Windows Me); set the <span class=\"xref\">stem.Diagnostics.ProcessStartInfo.UseShellExecute*</span> property to <code>false</code> to access this property on Windows 98 and Windows Me.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Handles provide a way for a process to refer to objects. A process can obtain handles to files, resources, message queues, and many other operating system objects. The operating system reclaims the memory associated with the process only when the handle count is zero.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_HasExited\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_HasExited_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HasExited</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the associated process has been terminated.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool HasExited { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the operating system process referenced by the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component has terminated; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>There is no process associated with the object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.win32exception\" data-linktype=\"relative-path\">Win32Exception</a></div>\r\n                  </div>\r\n                  <p>The exit code for the process could not be retrieved.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>You are trying to access the HasExited property for a process that is running on a remote computer. This property is available only for processes that are running on the local computer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A value of <code>true</code> for HasExited indicates that the associated process has terminated, either normally or abnormally. You can request or force the associated process to exit by calling <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_CloseMainWindow_\" data-linktype=\"relative-path\">CloseMainWindow</a> or <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Kill_\" data-linktype=\"relative-path\">Kill</a>. If a handle is open to the process, the operating system releases the process memory when the process has exited, but retains administrative information about the process, such as the handle, exit code, and exit time. To get this information, you can use the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_ExitCode_\" data-linktype=\"relative-path\">ExitCode</a> and <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_ExitTime_\" data-linktype=\"relative-path\">ExitTime</a> properties. These properties are populated automatically for processes that were started by this component. The administrative information is released when all the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> components that are associated with the system process are destroyed and hold no more handles to the exited process.  </p>\n<p> A process can terminate independently of your code. If you started the process using this component, the system updates the value of HasExited automatically, even if the associated process exits independently.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When standard output has been redirected to asynchronous event handlers, it is possible that output processing will not have completed when this property returns <code>true</code>. To ensure that asynchronous event handling has been completed, call the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_WaitForExit\" data-linktype=\"relative-path\">WaitForExit()</a> overload that takes no parameter before checking HasExited.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example starts an instance of Notepad. It then retrieves the physical memory usage of the associated process at 2 second intervals for a maximum of 10 seconds. The example detects whether the process exits before 10 seconds have elapsed. The example closes the process if it is still running after 10 seconds.  </p>\n<pre><code class=\"lang-cpp\" name=\"process_refresh#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Diagnostics;\nusing namespace System::Threading;\nint main()\n{\n   try\n   {\n      Process^ myProcess;\n      myProcess = Process::Start(  &quot;Notepad.exe&quot; );\n      \n      // Display physical memory usage 5 times at intervals of 2 seconds.\n      for ( int i = 0; i &lt; 5; i++ )\n      {\n         if (  !myProcess-&gt;HasExited )\n         {\n            \n            // Discard cached information about the process.\n            myProcess-&gt;Refresh();\n            \n            // Print working set to console.\n            Console::WriteLine( &quot;Physical Memory Usage : {0}&quot;, myProcess-&gt;WorkingSet.ToString() );\n            \n            // Wait 2 seconds.\n            Thread::Sleep( 2000 );\n         }\n         else\n         {\n            break;\n         }\n\n      }\n      myProcess-&gt;CloseMainWindow();\n      \n      // Free resources associated with process.\n      myProcess-&gt;Close();\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;The following exception was raised: &quot; );\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"process_refresh#1\">\nusing System;\nusing System.Diagnostics;\nusing System.Threading;\n\nnamespace Process_Sample\n{\n   class MyProcessClass\n   {\n      public static void Main()\n      {\n         try\n         {\n            Process myProcess;\n            myProcess = Process.Start(&quot;Notepad.exe&quot;);\n            // Display physical memory usage 5 times at intervals of 2 seconds.\n            for (int i = 0;i &lt; 5; i++)\n            {\n               if (!myProcess.HasExited)\n               {\n                   // Discard cached information about the process.\n                   myProcess.Refresh();\n                   // Print working set to console.\n                   Console.WriteLine(&quot;Physical Memory Usage: &quot; \n                                        + myProcess.WorkingSet.ToString());\n                   // Wait 2 seconds.\n                   Thread.Sleep(2000);\n               }\n               else {\n                   break;\n               } \n            }\n\n            // Close process by sending a close message to its main window.\n            myProcess.CloseMainWindow();\n            // Free resources associated with process.\n            myProcess.Close();\n\n         }\n         catch(Exception e)\n         {\n            Console.WriteLine(&quot;The following exception was raised: &quot;);\n            Console.WriteLine(e.Message);\n         }\n      }\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"process_refresh#1\">Imports System\nImports System.Diagnostics\nImports System.Threading\n\nNamespace Process_Sample\n   Class MyProcessClass\n\n      Public Shared Sub Main()\n         Try\n\n            Dim myProcess As Process\n            myProcess = Process.Start(&quot;Notepad.exe&quot;)\n            &#39; Display physical memory usage 5 times at intervals of 2 seconds.\n            Dim i As Integer\n            For i = 0 To 4\n               If not myProcess.HasExited Then\n               \n                  &#39; Discard cached information about the process.\n                  myProcess.Refresh()\n                  &#39; Print working set to console.\n                  Console.WriteLine(&quot;Physical Memory Usage: &quot; + _\n                                              myProcess.WorkingSet.ToString())\n                  &#39; Wait 2 seconds.\n                  Thread.Sleep(2000)\n               Else \n                  Exit For\n               End If\n              \n            Next i\n\n           &#39; Close process by sending a close message to its main window.\n           myProcess.CloseMainWindow()\n           &#39; Free resources associated with process.\n           myProcess.Close()\n\n         Catch e As Exception\n            Console.WriteLine(&quot;The following exception was raised: &quot;)\n            Console.WriteLine(e.Message)\n         End Try\n      End Sub &#39;Main\n   End Class &#39;MyProcessClass\nEnd Namespace &#39;Process_Sample\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_Id\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_Id_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Id</div>        \r\n          </div>\r\n    \r\n            <p>Gets the unique identifier for the associated process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Id { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The system-generated unique identifier of the process that is referenced by this <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The process&#39;s Id property has not been set.  </p>\n<p> -or-  </p>\n<p> There is no process associated with this <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The platform is Windows 98 or Windows Millennium Edition (Windows Me); set the <span class=\"xref\">stem.Diagnostics.ProcessStartInfo.UseShellExecute*</span> property to <code>false</code> to access this property on Windows 98 and Windows Me.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The process Id is not valid if the associated process is not running. Therefore, you should ensure that the process is running before attempting to retrieve the Id property. Until the process terminates, the process identifier uniquely identifies the process throughout the system.  </p>\n<p> You can connect a process that is running on a local or remote computer to a new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> instance by passing the process identifier to the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_GetProcessById_\" data-linktype=\"relative-path\">GetProcessById</a> method. <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_GetProcessById_\" data-linktype=\"relative-path\">GetProcessById</a> is a <code>static</code> method that creates a new component and sets the Id property for the new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> instance automatically.  </p>\n<p> Process identifiers can be reused by the system. The Id property value is unique only while the associated process is running. After the process has terminated, the system can reuse the Id property value for an unrelated process.  </p>\n<p> Because the identifier is unique on the system, you can pass it to other threads as an alternative to passing a <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> instance. This action can save system resources yet guarantee that the process is correctly identified.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to obtain the Id for all running instances of an application. The code creates a new instance of Notepad, lists all the instances of Notepad, and then allows the user to enter the Id number to remove a specific instance.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Diagnostics.Process.Id#1\">using System;\nusing System.Threading;\nusing System.Security.Permissions;\nusing System.Security.Principal;\nusing System.Diagnostics;\n\nclass ProcessDemo\n{\n    public static void Main()\n    {\n        Process notePad = Process.Start(&quot;notepad&quot;);\n        Console.WriteLine(&quot;Started notepad process Id = &quot; + notePad.Id);\n        Console.WriteLine(&quot;All instances of notepad:&quot;);\n        // Get Process objects for all running instances on notepad.\n        Process[] localByName = Process.GetProcessesByName(&quot;notepad&quot;);\n        int i = localByName.Length;\n        while (i &gt; 0)\n        {\n            // You can use the process Id to pass to other applications or to\n            // reference that particular instance of the application.\n            Console.WriteLine(localByName[i - 1].Id.ToString());\n            i -= 1;\n        }\n        Process chosen;\n        i = localByName.Length;\n        while (i &gt; 0)\n        {\n            Console.WriteLine(&quot;Enter a process Id to kill the process&quot;);\n            string id = Console.ReadLine();\n            if (id == &quot;&quot;)\n                break;\n            try\n            {\n                chosen = Process.GetProcessById(Int32.Parse(id));\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(&quot;Incorrect entry.&quot;);\n                continue;\n            }\n            if (chosen.ProcessName == &quot;notepad&quot;)\n            {\n                chosen.Kill();\n                chosen.WaitForExit();\n            }\n            i -= 1;\n        }\n\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Diagnostics.Process.Id#1\">Imports System\nImports System.Threading\nImports System.Security.Permissions\nImports System.Security.Principal\nImports System.Diagnostics\n\n\n\nClass ProcessDemo\n\n    Public Shared Sub Main()\n        Dim notePad As Process = Process.Start(&quot;notepad&quot;)\n        Console.WriteLine(&quot;Started notepad process Id = &quot; + notePad.Id.ToString())\n        Console.WriteLine(&quot;All instances of notepad:&quot;)\n        &#39; Get Process objects for all running instances on notepad.\n        Dim localByName As Process() = Process.GetProcessesByName(&quot;notepad&quot;)\n        Dim i As Integer = localByName.Length\n        While i &gt; 0\n            &#39; You can use the process Id to pass to other applications or to\n            &#39; reference that particular instance of the application.\n            Console.WriteLine(localByName((i - 1)).Id.ToString())\n            i -= 1\n        End While\n        Dim chosen As Process\n        i = localByName.Length\n        While i &gt; 0\n            Console.WriteLine(&quot;Enter a process Id to kill the process&quot;)\n            Dim id As String = Console.ReadLine()\n            If id = &quot;&quot; Then\n                Exit While\n            End If\n            Try\n                chosen = Process.GetProcessById(Int32.Parse(id))\n            Catch e As Exception\n                Console.WriteLine(&quot;Incorrect entry.&quot;)\n                GoTo ContinueWhile1\n            End Try\n            If chosen.ProcessName = &quot;notepad&quot; Then\n                chosen.Kill()\n                chosen.WaitForExit()\n            End If\n            i -= 1\nContinueWhile1:\n        End While\n\n    End Sub &#39;Main \nEnd Class &#39;ProcessDemo\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_MachineName\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_MachineName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MachineName</div>        \r\n          </div>\r\n    \r\n            <p>Gets the name of the computer the associated process is running on.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string MachineName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the computer that the associated process is running on.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>There is no process associated with this <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can view statistical data and process information for processes running on remote computers but you cannot call <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Start_\" data-linktype=\"relative-path\">Start</a>, <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_CloseMainWindow_\" data-linktype=\"relative-path\">CloseMainWindow</a>, or <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Kill_\" data-linktype=\"relative-path\">Kill</a> on remote computers.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When the associated process is executing on the local machine, this property returns a period (&quot;.&quot;) for the machine name. You should use the <a class=\"xref\" href=\"system.environment#System_Environment_MachineName_\" data-linktype=\"relative-path\">MachineName</a> property to get the correct machine name.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>To use the following example you must first start at least one instance of Notepad on a remote computer. The example requests the name of the remote computer on which Notepad is running, and then displays the respective <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_ProcessName_\" data-linktype=\"relative-path\">ProcessName</a>, <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Id_\" data-linktype=\"relative-path\">Id</a>, and MachineName properties for each instance.  </p>\n<pre><code class=\"lang-cs\" name=\"process_GetProcessesByName2_2#2\">using System;\nusing System.Diagnostics;\n\nclass GetProcessesByNameClass\n{\n   public static void Main(string[] args)\n   {\n      try\n      {\n\n         Console.Write(&quot;Create notepad processes on remote computer <br>&quot;);\n         Console.Write(&quot;Enter remote computer name : &quot;);\n         string remoteMachineName = Console.ReadLine();\n         // Get all notepad processess into Process array.\n         Process[] myProcesses = Process.GetProcessesByName(&quot;notepad&quot;,remoteMachineName);\n         if(myProcesses.Length == 0)\n            Console.WriteLine(&quot;Could not find notepad processes on remote computer.&quot;);\n         foreach(Process myProcess in myProcesses)\n         {\n            Console.Write(&quot;Process Name : &quot; + myProcess.ProcessName + &quot;  Process ID : &quot;\n               + myProcess.Id + &quot;  MachineName : &quot; + myProcess.MachineName + &quot;<br>&quot;);\n         }\n\n      }\n      catch(SystemException e)\n      {\n         Console.Write(&quot;Caught Exception .... : &quot; + e.Message);\n      }\n      catch(Exception e)\n      {\n         Console.Write(&quot;Caught Exception .... : &quot; + e.Message);\n      }\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"process_GetProcessesByName2_2#2\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Diagnostics;\nint main()\n{\n   try\n   {\n      Console::Write( &quot;Create notepad processes on remote computer <br>&quot; );\n      Console::Write( &quot;Enter remote computer name : &quot; );\n      String^ remoteMachineName = Console::ReadLine();\n      \n      // Get all notepad processess into Process array.\n      array&lt;Process^&gt;^myProcesses = Process::GetProcessesByName( &quot;notepad&quot;, remoteMachineName );\n      if ( myProcesses-&gt;Length == 0 )\n            Console::WriteLine( &quot;Could not find notepad processes on remote computer.&quot; );\n      Collections::IEnumerator^ myEnum = myProcesses-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         Process^ myProcess = safe_cast&lt;Process^&gt;(myEnum-&gt;Current);\n         Console::Write( &quot;Process Name : {0}  Process ID : {1}  MachineName : {2}<br>&quot;, myProcess-&gt;ProcessName, myProcess-&gt;Id, myProcess-&gt;MachineName );\n      }\n   }\n   catch ( SystemException^ e ) \n   {\n      Console::Write( &quot;Caught Exception .... : {0}&quot;, e-&gt;Message );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::Write( &quot;Caught Exception .... : {0}&quot;, e-&gt;Message );\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"process_GetProcessesByName2_2#2\">Imports System\nImports System.Diagnostics\nImports Microsoft.VisualBasic\n\nClass GetProcessesByNameClass\n\n   &#39;Entry point which delegates to C-style main Private Function\n   Public Overloads Shared Sub Main()\n      Main(System.Environment.GetCommandLineArgs())\n   End Sub\n\n   Public Overloads Shared Sub Main(ByVal args() As String)\n      Try\n\n         Console.Writeline(&quot;Create notepad processes on remote computer&quot;)\n         Console.Write(&quot;Enter remote computer name : &quot;)\n         Dim remoteMachineName As String = Console.ReadLine()\n         &#39; Get all notepad processess into Process array.\n         Dim myProcesses As Process() = Process.GetProcessesByName _\n                                             (&quot;notepad&quot;, remoteMachineName)\n         If myProcesses.Length = 0 Then\n            Console.WriteLine(&quot;Could not find notepad processes on remote computer.&quot;)\n         End If\n         Dim myProcess As Process\n         For Each myProcess In myProcesses\n            Console.WriteLine(&quot;Process Name : &quot; &amp; myProcess.ProcessName &amp; _\n                          &quot;  Process ID : &quot; &amp; myProcess.Id &amp; _\n                          &quot;  MachineName : &quot; &amp; myProcess.MachineName)\n         Next myProcess\n\n      Catch e As SystemException\n         Console.Write(&quot;Caught Exception .... : &quot; &amp; e.Message)\n      Catch e As Exception\n         Console.Write(&quot;Caught Exception .... : &quot; &amp; e.Message)\n      End Try\n   End Sub &#39;Main\nEnd Class &#39;GetProcessesByNameClass\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_MainModule\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_MainModule_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MainModule</div>        \r\n          </div>\r\n    \r\n            <p>Gets the main module for the associated process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Diagnostics.ProcessModule MainModule { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.processmodule\" data-linktype=\"relative-path\">ProcessModule</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.diagnostics.processmodule\" data-linktype=\"relative-path\">ProcessModule</a> that was used to start the process.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>You are trying to access the MainModule property for a process that is running on a remote computer. This property is available only for processes that are running on the local computer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.win32exception\" data-linktype=\"relative-path\">Win32Exception</a></div>\r\n                  </div>\r\n                  <p>A 32-bit process is trying to access the modules of a 64-bit process.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The platform is Windows 98 or Windows Millennium Edition (Windows Me); set <span class=\"xref\">stem.Diagnostics.ProcessStartInfo.UseShellExecute*</span> to <code>false</code> to access this property on Windows 98 and Windows Me.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The process <span class=\"xref\">stem.Diagnostics.Process.Id*</span> is not available.  </p>\n<p> -or-  </p>\n<p> The process has exited.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A process module represents a.dll or .exe file that is loaded into a particular process. The MainModule property lets you view information about the executable used to start the process, including the module name, file name, and module memory details.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_MainWindowHandle\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_MainWindowHandle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MainWindowHandle</div>        \r\n          </div>\r\n    \r\n            <p>Gets the window handle of the main window of the associated process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IntPtr MainWindowHandle { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>The system-generated window handle of the main window of the associated process.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The MainWindowHandle is not defined because the process has exited.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>You are trying to access the MainWindowHandle property for a process that is running on a remote computer. This property is available only for processes that are running on the local computer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The platform is Windows 98 or Windows Millennium Edition (Windows Me); set <span class=\"xref\">stem.Diagnostics.ProcessStartInfo.UseShellExecute*</span> to <code>false</code> to access this property on Windows 98 and Windows Me.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The main window is the window opened by the process that currently has the focus (the <a class=\"xref\" href=\"system.windows.forms.form#System_Windows_Forms_Form_TopLevel_\" data-linktype=\"relative-path\">TopLevel</a> form). You must use the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Refresh_\" data-linktype=\"relative-path\">Refresh</a> method to refresh the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> object to get the current main window handle if it has changed. In general, because the window handle is cached, use <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Refresh_\" data-linktype=\"relative-path\">Refresh</a> beforehand to guarantee that youâ€™ll retrieve the current handle.  </p>\n<p> You can get the MainWindowHandle property only for processes that are running on the local computer. The MainWindowHandle property is a value that uniquely identifies the window that is associated with the process.  </p>\n<p> A process has a main window associated with it only if the process has a graphical interface. If the associated process does not have a main window, the MainWindowHandle value is zero. The value is also zero for processes that have been hidden, that is, processes that are not visible in the taskbar. This can be the case for processes that appear as icons in the notification area, at the far right of the taskbar.  </p>\n<p> If you have just started a process and want to use its main window handle, consider using the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_WaitForInputIdle_\" data-linktype=\"relative-path\">WaitForInputIdle</a> method to allow the process to finish starting, ensuring that the main window handle has been created. Otherwise, an exception will be thrown.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_MainWindowTitle\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_MainWindowTitle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MainWindowTitle</div>        \r\n          </div>\r\n    \r\n            <p>Gets the caption of the main window of the process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string MainWindowTitle { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The main window title of the process.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The MainWindowTitle property is not defined because the process has exited.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>You are trying to access the MainWindowTitle property for a process that is running on a remote computer. This property is available only for processes that are running on the local computer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The platform is Windows 98 or Windows Millennium Edition (Windows Me); set <span class=\"xref\">stem.Diagnostics.ProcessStartInfo.UseShellExecute*</span> to <code>false</code> to access this property on Windows 98 and Windows Me.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A process has a main window associated with it only if the process has a graphical interface. If the associated process does not have a main window (so that <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_MainWindowHandle_\" data-linktype=\"relative-path\">MainWindowHandle</a> is zero), MainWindowTitle is an empty string (&quot;&quot;). If you have just started a process and want to use its main window title, consider using the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_WaitForInputIdle_\" data-linktype=\"relative-path\">WaitForInputIdle</a> method to allow the process to finish starting, ensuring that the main window handle has been created. Otherwise, the system throws an exception.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The main window is the window that currently has the focus; note that this might not be the primary window for the process. You must use the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Refresh_\" data-linktype=\"relative-path\">Refresh</a> method to refresh the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> object to get the current main window handle if it has changed.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example starts an instance of Notepad and retrieves the caption of the main window of the process.  </p>\n<pre><code class=\"lang-cpp\" name=\"process_MainWindowTitle#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Diagnostics;\nint main()\n{\n   try\n   {\n      \n      // Create an instance of process component.\n      Process^ myProcess = gcnew Process;\n      \n      // Create an instance of &#39;myProcessStartInfo&#39;.\n      ProcessStartInfo^ myProcessStartInfo = gcnew ProcessStartInfo;\n      myProcessStartInfo-&gt;FileName = &quot;notepad&quot;;\n      myProcess-&gt;StartInfo = myProcessStartInfo;\n      \n      // Start process.\n      myProcess-&gt;Start();\n      \n      // Allow the process to finish starting.\n      myProcess-&gt;WaitForInputIdle();\n      Console::Write( &quot;Main window Title : {0}&quot;, myProcess-&gt;MainWindowTitle );\n      myProcess-&gt;CloseMainWindow();\n      myProcess-&gt;Close();\n   }\n   catch ( Exception^ e ) \n   {\n      Console::Write( &quot; Message : {0}&quot;, e-&gt;Message );\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"process_MainWindowTitle#1\">using System;\nusing System.Diagnostics;\n\nclass MainWindowTitleClass\n{\n   public static void Main()\n   {\n      try\n      {\n\n         // Create an instance of process component.\n         Process myProcess = new Process();\n         // Create an instance of &#39;myProcessStartInfo&#39;.\n         ProcessStartInfo myProcessStartInfo = new ProcessStartInfo();\n         myProcessStartInfo.FileName = &quot;notepad&quot;;\n         myProcess.StartInfo = myProcessStartInfo;\n         // Start process.\n         myProcess.Start();\n         // Allow the process to finish starting.\n         myProcess.WaitForInputIdle();\n         Console.Write(&quot;Main window Title : &quot; + myProcess.MainWindowTitle);\n\n         myProcess.CloseMainWindow();\n         myProcess.Close();\n      }\n      catch(Exception e)\n      {\n         Console.Write(&quot; Message : &quot; + e.Message);\n      }\n    \n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"process_MainWindowTitle#1\">Imports System\nImports System.Diagnostics\n\nClass MainWindowTitleClass\n   Public Shared Sub Main()\n      Try\n\n         &#39; Create an instance of process component.\n         Dim myProcess As New Process()\n         &#39; Create an instance of &#39;myProcessStartInfo&#39;.\n         Dim myProcessStartInfo As New ProcessStartInfo()\n         myProcessStartInfo.FileName = &quot;notepad&quot;\n         myProcess.StartInfo = myProcessStartInfo\n         &#39; Start process.\n         myProcess.Start()\n         &#39; Allow the process to finish starting.\n         myProcess.WaitForInputIdle()\n         Console.Write(&quot;Main window Title : &quot; + myProcess.MainWindowTitle)\n\n         myProcess.CloseMainWindow()\n         myProcess.Close()\n      Catch e As Exception\n         Console.Write(&quot; Message : &quot; + e.Message)\n      End Try\n   End Sub &#39;Main\nEnd Class &#39;MainWindowTitleClass\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_MaxWorkingSet\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_MaxWorkingSet_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MaxWorkingSet</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the maximum allowable working set size, in bytes, for the associated process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IntPtr MaxWorkingSet { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>The maximum working set size that is allowed in memory for the process, in bytes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The maximum working set size is invalid. It must be greater than or equal to the minimum working set size.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.win32exception\" data-linktype=\"relative-path\">Win32Exception</a></div>\r\n                  </div>\r\n                  <p>Working set information cannot be retrieved from the associated process resource.  </p>\n<p> -or-  </p>\n<p> The process identifier or process handle is zero because the process has not been started.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>You are trying to access the MaxWorkingSet property for a process that is running on a remote computer. This property is available only for processes that are running on the local computer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The process <span class=\"xref\">stem.Diagnostics.Process.Id*</span> is not available.  </p>\n<p> -or-  </p>\n<p> The process has exited.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The working set of a process is the set of memory pages currently visible to the process in physical RAM memory. These pages are resident and available for an application to use without triggering a page fault.  </p>\n<p> The working set includes both shared and private data. The shared data includes the pages that contain all the instructions that your application executes, including the pages in your .dll files and the system.dll files. As the working set size increases, memory demand increases.  </p>\n<p> A process has minimum and maximum working set sizes. Each time a process resource is created, the system reserves an amount of memory equal to the minimum working set size for the process. The virtual memory manager attempts to keep at least the minimum amount of memory resident when the process is active, but it never keeps more than the maximum size.  </p>\n<p> The system sets the default working set sizes. You can modify these sizes using the MaxWorkingSet and <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_MinWorkingSet_\" data-linktype=\"relative-path\">MinWorkingSet</a> members. However, setting these values does not guarantee that the memory will be reserved or resident.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When you increase the working set size of a process, you take physical memory away from the rest of the system. Ensure that you do not request a minimum or maximum working set size that is too large, because doing so can degrade system performance.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_MinWorkingSet\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_MinWorkingSet_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MinWorkingSet</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the minimum allowable working set size, in bytes, for the associated process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IntPtr MinWorkingSet { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>The minimum working set size that is required in memory for the process, in bytes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The minimum working set size is invalid. It must be less than or equal to the maximum working set size.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.win32exception\" data-linktype=\"relative-path\">Win32Exception</a></div>\r\n                  </div>\r\n                  <p>Working set information cannot be retrieved from the associated process resource.  </p>\n<p> -or-  </p>\n<p> The process identifier or process handle is zero because the process has not been started.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>You are trying to access the MinWorkingSet property for a process that is running on a remote computer. This property is available only for processes that are running on the local computer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The process <span class=\"xref\">stem.Diagnostics.Process.Id*</span> is not available.  </p>\n<p> -or-  </p>\n<p> The process has exited.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The working set of a process is the set of memory pages currently visible to the process in physical RAM memory. These pages are resident and available for an application to use without triggering a page fault.  </p>\n<p> The working set includes both shared and private data. The shared data includes the pages that contain all the instructions that your application executes, including the pages in your .dll files and the system.dll files. As the working set size increases, memory demand increases.  </p>\n<p> A process has minimum and maximum working set sizes. Each time a process resource is created, the system reserves an amount of memory equal to the minimum working set size for the process. The virtual memory manager attempts to keep at least the minimum amount of memory resident when the process is active, but it never keeps more than the maximum size.  </p>\n<p> The system sets the default working set sizes. You can modify these sizes using the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_MaxWorkingSet_\" data-linktype=\"relative-path\">MaxWorkingSet</a> and MinWorkingSet members. However, setting these values does not guarantee that the memory will be reserved or resident.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When you increase the working set size of a process, you take physical memory away from the rest of the system. Ensure that you do not request a minimum or maximum working set size that is too large, because doing so can degrade system performance.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_Modules\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_Modules_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Modules</div>        \r\n          </div>\r\n    \r\n            <p>Gets the modules that have been loaded by the associated process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Diagnostics.ProcessModuleCollection Modules { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.processmodulecollection\" data-linktype=\"relative-path\">ProcessModuleCollection</a></div>\r\n                  </div>\r\n                  <p>An array of type <a class=\"xref\" href=\"system.diagnostics.processmodule\" data-linktype=\"relative-path\">ProcessModule</a> that represents the modules that have been loaded by the associated process.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>You are attempting to access the Modules property for a process that is running on a remote computer. This property is available only for processes that are running on the local computer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The process <span class=\"xref\">stem.Diagnostics.Process.Id*</span> is not available.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The platform is Windows 98 or Windows Millennium Edition (Windows Me); set <span class=\"xref\">stem.Diagnostics.ProcessStartInfo.UseShellExecute*</span> to <code>false</code> to access this property on Windows 98 and Windows Me.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.win32exception\" data-linktype=\"relative-path\">Win32Exception</a></div>\r\n                  </div>\r\n                  <p>You are attempting to access the Modules property for either the system process or the idle process. These processes do not have modules.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A process module represents a.dll or .exe file that is loaded into a particular process. A <a class=\"xref\" href=\"system.diagnostics.processmodule\" data-linktype=\"relative-path\">ProcessModule</a> instance lets you view information about a module, including the module name, file name, and module memory details.  </p>\n<p> A process can load multiple modules into memory. For example,.exe files that load additional .dll files have multiple modules.  </p>\n<p> After starting the process, this collection is empty until the system has loaded the process. If the process has a main window, you can call <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_WaitForInputIdle_\" data-linktype=\"relative-path\">WaitForInputIdle</a> before retrieving this property to ensure that the collection is nonempty when you get the list.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_NonpagedSystemMemorySize\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_NonpagedSystemMemorySize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NonpagedSystemMemorySize</div>        \r\n          </div>\r\n    \r\n            <p>Gets the amount of nonpaged system memory, in bytes, allocated for the associated process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int NonpagedSystemMemorySize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The amount of memory, in bytes, the system has allocated for the associated process that cannot be written to the virtual memory paging file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_NonpagedSystemMemorySize64\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_NonpagedSystemMemorySize64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NonpagedSystemMemorySize64</div>        \r\n          </div>\r\n    \r\n            <p>Gets the amount of nonpaged system memory, in bytes, allocated for the associated process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public long NonpagedSystemMemorySize64 { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The amount of system memory, in bytes, allocated for the associated process that cannot be written to the virtual memory paging file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value returned by this property represents the current size of nonpaged system memory used by the process, in bytes. System memory is the physical memory used by the operating system, and is divided into paged and nonpaged pools. Nonpaged memory allocations remain in system memory and are not paged out to the virtual memory paging file.  </p>\n<p> This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors. The property value is equivalent to the <strong>Pool Nonpaged Bytes</strong> performance counter for the process.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example starts an instance of the Notepad application. The example then retrieves and displays various properties of the associated process. The example detects when the process exits, and displays its exit code and peak memory statistics.  </p>\n<pre><code class=\"lang-cpp\" name=\"Diag_Process_MemoryProperties64#1\">#using &lt;system.dll&gt;\n\nusing namespace System;\nusing namespace System::Diagnostics;\nint main()\n{\n   \n   // Define variables to track the peak\n   // memory usage of the process.\n   _int64 peakPagedMem = 0,peakWorkingSet = 0,peakVirtualMem = 0;\n   Process^ myProcess = nullptr;\n   try\n   {\n      \n      // Start the process.\n      myProcess = Process::Start( &quot;NotePad.exe&quot; );\n      \n      // Display the process statistics until\n      // the user closes the program.\n      do\n      {\n         if (  !myProcess-&gt;HasExited )\n         {\n            \n            // Refresh the current process property values.\n            myProcess-&gt;Refresh();\n            Console::WriteLine();\n            \n            // Display current process statistics.\n            Console::WriteLine( &quot;{0} -&quot;, myProcess );\n            Console::WriteLine( &quot;-------------------------------------&quot; );\n            Console::WriteLine( &quot;  physical memory usage: {0}&quot;, myProcess-&gt;WorkingSet64 );\n            Console::WriteLine( &quot;  base priority: {0}&quot;, myProcess-&gt;BasePriority );\n            Console::WriteLine( &quot;  priority class: {0}&quot;, myProcess-&gt;PriorityClass );\n            Console::WriteLine( &quot;  user processor time: {0}&quot;, myProcess-&gt;UserProcessorTime );\n            Console::WriteLine( &quot;  privileged processor time: {0}&quot;, myProcess-&gt;PrivilegedProcessorTime );\n            Console::WriteLine( &quot;  total processor time: {0}&quot;, myProcess-&gt;TotalProcessorTime );\n\t\t\tConsole::WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;, myProcess-&gt;PagedSystemMemorySize64);\n            Console::WriteLine(&quot;  PagedMemorySize64: {0}&quot;, myProcess-&gt;PagedMemorySize64);\n            \n            // Update the values for the overall peak memory statistics.\n            peakPagedMem = myProcess-&gt;PeakPagedMemorySize64;\n            peakVirtualMem = myProcess-&gt;PeakVirtualMemorySize64;\n            peakWorkingSet = myProcess-&gt;PeakWorkingSet64;\n            if ( myProcess-&gt;Responding )\n            {\n               Console::WriteLine( &quot;Status = Running&quot; );\n            }\n            else\n            {\n               Console::WriteLine( &quot;Status = Not Responding&quot; );\n            }\n         }\n      }\n      while (  !myProcess-&gt;WaitForExit( 1000 ) );\n      Console::WriteLine();\n      Console::WriteLine( &quot;Process exit code: {0}&quot;, myProcess-&gt;ExitCode );\n      \n      // Display peak memory statistics for the process.\n      Console::WriteLine( &quot;Peak physical memory usage of the process: {0}&quot;, peakWorkingSet );\n      Console::WriteLine( &quot;Peak paged memory usage of the process: {0}&quot;, peakPagedMem );\n      Console::WriteLine( &quot;Peak virtual memory usage of the process: {0}&quot;, peakVirtualMem );\n   }\n   finally\n   {\n      if ( myProcess != nullptr )\n      {\n         myProcess-&gt;Close();\n      }\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Diag_Process_MemoryProperties64#1\">using System;\nusing System.Diagnostics;\n\nnamespace ProcessSample\n{\n    class ProcessMonitorSample\n    {\n        public static void Main()\n        {\n\n            // Define variables to track the peak\n            // memory usage of the process.\n            long peakPagedMem = 0,\n                peakWorkingSet = 0,\n                peakVirtualMem = 0;\n\n            Process myProcess = null;\n\n            try\n            {\n                // Start the process.\n                myProcess = Process.Start(&quot;NotePad.exe&quot;);\n\n                // Display the process statistics until\n                // the user closes the program.\n                do\n                {\n                    if (!myProcess.HasExited)\n                    {\n                        // Refresh the current process property values.\n                        myProcess.Refresh();\n\n                        Console.WriteLine();\n\n                        // Display current process statistics.\n\n                        Console.WriteLine(&quot;{0} -&quot;, myProcess.ToString());\n                        Console.WriteLine(&quot;-------------------------------------&quot;);\n\n                        Console.WriteLine(&quot;  physical memory usage: {0}&quot;,\n                            myProcess.WorkingSet64);\n                        Console.WriteLine(&quot;  base priority: {0}&quot;,\n                            myProcess.BasePriority);\n                        Console.WriteLine(&quot;  priority class: {0}&quot;,\n                            myProcess.PriorityClass);\n                        Console.WriteLine(&quot;  user processor time: {0}&quot;,\n                            myProcess.UserProcessorTime);\n                        Console.WriteLine(&quot;  privileged processor time: {0}&quot;,\n                            myProcess.PrivilegedProcessorTime);\n                        Console.WriteLine(&quot;  total processor time: {0}&quot;,\n                            myProcess.TotalProcessorTime);\n                        Console.WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;,\n                            myProcess.PagedSystemMemorySize64);\n                        Console.WriteLine(&quot;  PagedMemorySize64: {0}&quot;,\n                           myProcess.PagedMemorySize64);\n\n                        // Update the values for the overall peak memory statistics.\n                        peakPagedMem = myProcess.PeakPagedMemorySize64;\n                        peakVirtualMem = myProcess.PeakVirtualMemorySize64;\n                        peakWorkingSet = myProcess.PeakWorkingSet64;\n\n                        if (myProcess.Responding)\n                        {\n                            Console.WriteLine(&quot;Status = Running&quot;);\n                        }\n                        else\n                        {\n                            Console.WriteLine(&quot;Status = Not Responding&quot;);\n                        }\n                    }\n                }\n                while (!myProcess.WaitForExit(1000));\n\n\n                Console.WriteLine();\n                Console.WriteLine(&quot;Process exit code: {0}&quot;,\n                    myProcess.ExitCode);\n\n                // Display peak memory statistics for the process.\n                Console.WriteLine(&quot;Peak physical memory usage of the process: {0}&quot;,\n                    peakWorkingSet);\n                Console.WriteLine(&quot;Peak paged memory usage of the process: {0}&quot;,\n                    peakPagedMem);\n                Console.WriteLine(&quot;Peak virtual memory usage of the process: {0}&quot;,\n                    peakVirtualMem);\n\n            }\n            finally\n            {\n                if (myProcess != null)\n                {\n                    myProcess.Close();\n                }\n            }\n        }\n\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Diag_Process_MemoryProperties64#1\">Imports System\nImports System.Diagnostics\n\nNamespace ProcessSample\n    Class ProcessMonitorSample\n\n        Public Shared Sub Main()\n\n            &#39; Define variables to track the peak\n            &#39; memory usage of the process.\n            Dim peakPagedMem As Long = 0\n            Dim peakWorkingSet As Long = 0\n            Dim peakVirtualMem As Long = 0\n\n            Dim myProcess As Process = Nothing\n\n            Try\n\n                &#39; Start the process.\n                myProcess = Process.Start(&quot;NotePad.exe&quot;)\n\n                &#39; Display process statistics until\n                &#39; the user closes the program.\n                Do\n\n                    If Not myProcess.HasExited Then\n\n                        &#39; Refresh the current process property values.\n                        myProcess.Refresh()\n\n                        Console.WriteLine()\n\n                        &#39; Display current process statistics.\n\n                        Console.WriteLine(&quot;{0} -&quot;, myProcess.ToString())\n                        Console.WriteLine(&quot;-------------------------------------&quot;)\n\n                        Console.WriteLine(&quot;  physical memory usage: {0}&quot;, _\n                             myProcess.WorkingSet64)\n                        Console.WriteLine(&quot;  base priority: {0}&quot;, _\n                             myProcess.BasePriority)\n                        Console.WriteLine(&quot;  priority class: {0}&quot;, _\n                             myProcess.PriorityClass)\n                        Console.WriteLine(&quot;  user processor time: {0}&quot;, _\n                             myProcess.UserProcessorTime)\n                        Console.WriteLine(&quot;  privileged processor time: {0}&quot;, _\n                             myProcess.PrivilegedProcessorTime)\n                        Console.WriteLine(&quot;  total processor time: {0}&quot;, _\n                             myProcess.TotalProcessorTime)\n                        Console.WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;, _\n                            myProcess.PagedSystemMemorySize64)\n                        Console.WriteLine(&quot;  PagedMemorySize64: {0}&quot;, _\n                           myProcess.PagedMemorySize64)\n\n                        &#39; Update the values for the overall peak memory statistics.\n                        peakPagedMem = myProcess.PeakPagedMemorySize64\n                        peakVirtualMem = myProcess.PeakVirtualMemorySize64\n                        peakWorkingSet = myProcess.PeakWorkingSet64\n\n                        If myProcess.Responding Then\n                            Console.WriteLine(&quot;Status = Running&quot;)\n                        Else\n                            Console.WriteLine(&quot;Status = Not Responding&quot;)\n                        End If\n                    End If\n                Loop While Not myProcess.WaitForExit(1000)\n\n                Console.WriteLine()\n                Console.WriteLine(&quot;Process exit code: {0}&quot;, myProcess.ExitCode)\n\n                &#39; Display peak memory statistics for the process.\n                Console.WriteLine(&quot;Peak physical memory usage of the process: {0}&quot;, _\n                    peakWorkingSet)\n                Console.WriteLine(&quot;Peak paged memory usage of the process: {0}&quot;, _\n                    peakPagedMem)\n                Console.WriteLine(&quot;Peak virtual memory usage of the process: {0}&quot;, _\n                    peakVirtualMem)\n\n            Finally\n                If Not myProcess Is Nothing Then\n                    myProcess.Close()\n                End If\n            End Try\n        End Sub &#39;Main\n    End Class\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_PagedMemorySize\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_PagedMemorySize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PagedMemorySize</div>        \r\n          </div>\r\n    \r\n            <p>Gets the amount of paged memory, in bytes, allocated for the associated process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int PagedMemorySize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The amount of memory, in bytes, allocated by the associated process that can be written to the virtual memory paging file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_PagedMemorySize64\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_PagedMemorySize64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PagedMemorySize64</div>        \r\n          </div>\r\n    \r\n            <p>Gets the amount of paged memory, in bytes, allocated for the associated process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public long PagedMemorySize64 { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The amount of memory, in bytes, allocated in the virtual memory paging file for the associated process.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value returned by this property represents the current size of memory in the virtual memory paging file used by the process, in bytes. The operating system uses the virtual memory paging file in conjunction with physical memory to manage the virtual address space for each process. When pageable memory is not in use, it can be transferred to the virtual memory paging file on disk. To obtain the size of memory used by the operating system for the process, use the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_PagedSystemMemorySize64_\" data-linktype=\"relative-path\">PagedSystemMemorySize64</a> property.  </p>\n<p> This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors. The property value is equivalent to the <strong>Page File Bytes</strong> performance counter for the process.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example starts an instance of the Notepad application, and then retrieves and displays various properties of the associated process. The example detects when the process exits, and displays its exit code and peak memory statistics.  </p>\n<pre><code class=\"lang-cpp\" name=\"Diag_Process_MemoryProperties64#1\">#using &lt;system.dll&gt;\n\nusing namespace System;\nusing namespace System::Diagnostics;\nint main()\n{\n   \n   // Define variables to track the peak\n   // memory usage of the process.\n   _int64 peakPagedMem = 0,peakWorkingSet = 0,peakVirtualMem = 0;\n   Process^ myProcess = nullptr;\n   try\n   {\n      \n      // Start the process.\n      myProcess = Process::Start( &quot;NotePad.exe&quot; );\n      \n      // Display the process statistics until\n      // the user closes the program.\n      do\n      {\n         if (  !myProcess-&gt;HasExited )\n         {\n            \n            // Refresh the current process property values.\n            myProcess-&gt;Refresh();\n            Console::WriteLine();\n            \n            // Display current process statistics.\n            Console::WriteLine( &quot;{0} -&quot;, myProcess );\n            Console::WriteLine( &quot;-------------------------------------&quot; );\n            Console::WriteLine( &quot;  physical memory usage: {0}&quot;, myProcess-&gt;WorkingSet64 );\n            Console::WriteLine( &quot;  base priority: {0}&quot;, myProcess-&gt;BasePriority );\n            Console::WriteLine( &quot;  priority class: {0}&quot;, myProcess-&gt;PriorityClass );\n            Console::WriteLine( &quot;  user processor time: {0}&quot;, myProcess-&gt;UserProcessorTime );\n            Console::WriteLine( &quot;  privileged processor time: {0}&quot;, myProcess-&gt;PrivilegedProcessorTime );\n            Console::WriteLine( &quot;  total processor time: {0}&quot;, myProcess-&gt;TotalProcessorTime );\n\t\t\tConsole::WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;, myProcess-&gt;PagedSystemMemorySize64);\n            Console::WriteLine(&quot;  PagedMemorySize64: {0}&quot;, myProcess-&gt;PagedMemorySize64);\n            \n            // Update the values for the overall peak memory statistics.\n            peakPagedMem = myProcess-&gt;PeakPagedMemorySize64;\n            peakVirtualMem = myProcess-&gt;PeakVirtualMemorySize64;\n            peakWorkingSet = myProcess-&gt;PeakWorkingSet64;\n            if ( myProcess-&gt;Responding )\n            {\n               Console::WriteLine( &quot;Status = Running&quot; );\n            }\n            else\n            {\n               Console::WriteLine( &quot;Status = Not Responding&quot; );\n            }\n         }\n      }\n      while (  !myProcess-&gt;WaitForExit( 1000 ) );\n      Console::WriteLine();\n      Console::WriteLine( &quot;Process exit code: {0}&quot;, myProcess-&gt;ExitCode );\n      \n      // Display peak memory statistics for the process.\n      Console::WriteLine( &quot;Peak physical memory usage of the process: {0}&quot;, peakWorkingSet );\n      Console::WriteLine( &quot;Peak paged memory usage of the process: {0}&quot;, peakPagedMem );\n      Console::WriteLine( &quot;Peak virtual memory usage of the process: {0}&quot;, peakVirtualMem );\n   }\n   finally\n   {\n      if ( myProcess != nullptr )\n      {\n         myProcess-&gt;Close();\n      }\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Diag_Process_MemoryProperties64#1\">using System;\nusing System.Diagnostics;\n\nnamespace ProcessSample\n{\n    class ProcessMonitorSample\n    {\n        public static void Main()\n        {\n\n            // Define variables to track the peak\n            // memory usage of the process.\n            long peakPagedMem = 0,\n                peakWorkingSet = 0,\n                peakVirtualMem = 0;\n\n            Process myProcess = null;\n\n            try\n            {\n                // Start the process.\n                myProcess = Process.Start(&quot;NotePad.exe&quot;);\n\n                // Display the process statistics until\n                // the user closes the program.\n                do\n                {\n                    if (!myProcess.HasExited)\n                    {\n                        // Refresh the current process property values.\n                        myProcess.Refresh();\n\n                        Console.WriteLine();\n\n                        // Display current process statistics.\n\n                        Console.WriteLine(&quot;{0} -&quot;, myProcess.ToString());\n                        Console.WriteLine(&quot;-------------------------------------&quot;);\n\n                        Console.WriteLine(&quot;  physical memory usage: {0}&quot;,\n                            myProcess.WorkingSet64);\n                        Console.WriteLine(&quot;  base priority: {0}&quot;,\n                            myProcess.BasePriority);\n                        Console.WriteLine(&quot;  priority class: {0}&quot;,\n                            myProcess.PriorityClass);\n                        Console.WriteLine(&quot;  user processor time: {0}&quot;,\n                            myProcess.UserProcessorTime);\n                        Console.WriteLine(&quot;  privileged processor time: {0}&quot;,\n                            myProcess.PrivilegedProcessorTime);\n                        Console.WriteLine(&quot;  total processor time: {0}&quot;,\n                            myProcess.TotalProcessorTime);\n                        Console.WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;,\n                            myProcess.PagedSystemMemorySize64);\n                        Console.WriteLine(&quot;  PagedMemorySize64: {0}&quot;,\n                           myProcess.PagedMemorySize64);\n\n                        // Update the values for the overall peak memory statistics.\n                        peakPagedMem = myProcess.PeakPagedMemorySize64;\n                        peakVirtualMem = myProcess.PeakVirtualMemorySize64;\n                        peakWorkingSet = myProcess.PeakWorkingSet64;\n\n                        if (myProcess.Responding)\n                        {\n                            Console.WriteLine(&quot;Status = Running&quot;);\n                        }\n                        else\n                        {\n                            Console.WriteLine(&quot;Status = Not Responding&quot;);\n                        }\n                    }\n                }\n                while (!myProcess.WaitForExit(1000));\n\n\n                Console.WriteLine();\n                Console.WriteLine(&quot;Process exit code: {0}&quot;,\n                    myProcess.ExitCode);\n\n                // Display peak memory statistics for the process.\n                Console.WriteLine(&quot;Peak physical memory usage of the process: {0}&quot;,\n                    peakWorkingSet);\n                Console.WriteLine(&quot;Peak paged memory usage of the process: {0}&quot;,\n                    peakPagedMem);\n                Console.WriteLine(&quot;Peak virtual memory usage of the process: {0}&quot;,\n                    peakVirtualMem);\n\n            }\n            finally\n            {\n                if (myProcess != null)\n                {\n                    myProcess.Close();\n                }\n            }\n        }\n\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Diag_Process_MemoryProperties64#1\">Imports System\nImports System.Diagnostics\n\nNamespace ProcessSample\n    Class ProcessMonitorSample\n\n        Public Shared Sub Main()\n\n            &#39; Define variables to track the peak\n            &#39; memory usage of the process.\n            Dim peakPagedMem As Long = 0\n            Dim peakWorkingSet As Long = 0\n            Dim peakVirtualMem As Long = 0\n\n            Dim myProcess As Process = Nothing\n\n            Try\n\n                &#39; Start the process.\n                myProcess = Process.Start(&quot;NotePad.exe&quot;)\n\n                &#39; Display process statistics until\n                &#39; the user closes the program.\n                Do\n\n                    If Not myProcess.HasExited Then\n\n                        &#39; Refresh the current process property values.\n                        myProcess.Refresh()\n\n                        Console.WriteLine()\n\n                        &#39; Display current process statistics.\n\n                        Console.WriteLine(&quot;{0} -&quot;, myProcess.ToString())\n                        Console.WriteLine(&quot;-------------------------------------&quot;)\n\n                        Console.WriteLine(&quot;  physical memory usage: {0}&quot;, _\n                             myProcess.WorkingSet64)\n                        Console.WriteLine(&quot;  base priority: {0}&quot;, _\n                             myProcess.BasePriority)\n                        Console.WriteLine(&quot;  priority class: {0}&quot;, _\n                             myProcess.PriorityClass)\n                        Console.WriteLine(&quot;  user processor time: {0}&quot;, _\n                             myProcess.UserProcessorTime)\n                        Console.WriteLine(&quot;  privileged processor time: {0}&quot;, _\n                             myProcess.PrivilegedProcessorTime)\n                        Console.WriteLine(&quot;  total processor time: {0}&quot;, _\n                             myProcess.TotalProcessorTime)\n                        Console.WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;, _\n                            myProcess.PagedSystemMemorySize64)\n                        Console.WriteLine(&quot;  PagedMemorySize64: {0}&quot;, _\n                           myProcess.PagedMemorySize64)\n\n                        &#39; Update the values for the overall peak memory statistics.\n                        peakPagedMem = myProcess.PeakPagedMemorySize64\n                        peakVirtualMem = myProcess.PeakVirtualMemorySize64\n                        peakWorkingSet = myProcess.PeakWorkingSet64\n\n                        If myProcess.Responding Then\n                            Console.WriteLine(&quot;Status = Running&quot;)\n                        Else\n                            Console.WriteLine(&quot;Status = Not Responding&quot;)\n                        End If\n                    End If\n                Loop While Not myProcess.WaitForExit(1000)\n\n                Console.WriteLine()\n                Console.WriteLine(&quot;Process exit code: {0}&quot;, myProcess.ExitCode)\n\n                &#39; Display peak memory statistics for the process.\n                Console.WriteLine(&quot;Peak physical memory usage of the process: {0}&quot;, _\n                    peakWorkingSet)\n                Console.WriteLine(&quot;Peak paged memory usage of the process: {0}&quot;, _\n                    peakPagedMem)\n                Console.WriteLine(&quot;Peak virtual memory usage of the process: {0}&quot;, _\n                    peakVirtualMem)\n\n            Finally\n                If Not myProcess Is Nothing Then\n                    myProcess.Close()\n                End If\n            End Try\n        End Sub &#39;Main\n    End Class\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_PagedSystemMemorySize\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_PagedSystemMemorySize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PagedSystemMemorySize</div>        \r\n          </div>\r\n    \r\n            <p>Gets the amount of pageable system memory, in bytes, allocated for the associated process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int PagedSystemMemorySize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The amount of memory, in bytes, the system has allocated for the associated process that can be written to the virtual memory paging file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_PagedSystemMemorySize64\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_PagedSystemMemorySize64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PagedSystemMemorySize64</div>        \r\n          </div>\r\n    \r\n            <p>Gets the amount of pageable system memory, in bytes, allocated for the associated process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public long PagedSystemMemorySize64 { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The amount of system memory, in bytes, allocated for the associated process that can be written to the virtual memory paging file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value returned by this property value represents the current size of pageable system memory used by the process, in bytes. System memory is the physical memory used by the operating system, and is divided into paged and nonpaged pools. When pageable memory is not in use, it can be transferred to the virtual memory paging file on disk. To obtain the size of the application memory used by the process, use the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_PagedMemorySize64_\" data-linktype=\"relative-path\">PagedMemorySize64</a> property.  </p>\n<p> This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors. The property value is equivalent to the <strong>Pool Paged Bytes</strong> performance counter for the process.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example starts an instance of the Notepad application. The example then retrieves and displays various properties of the associated process. The example detects when the process exits, and displays its exit code and peak memory statistics.  </p>\n<pre><code class=\"lang-cpp\" name=\"Diag_Process_MemoryProperties64#1\">#using &lt;system.dll&gt;\n\nusing namespace System;\nusing namespace System::Diagnostics;\nint main()\n{\n   \n   // Define variables to track the peak\n   // memory usage of the process.\n   _int64 peakPagedMem = 0,peakWorkingSet = 0,peakVirtualMem = 0;\n   Process^ myProcess = nullptr;\n   try\n   {\n      \n      // Start the process.\n      myProcess = Process::Start( &quot;NotePad.exe&quot; );\n      \n      // Display the process statistics until\n      // the user closes the program.\n      do\n      {\n         if (  !myProcess-&gt;HasExited )\n         {\n            \n            // Refresh the current process property values.\n            myProcess-&gt;Refresh();\n            Console::WriteLine();\n            \n            // Display current process statistics.\n            Console::WriteLine( &quot;{0} -&quot;, myProcess );\n            Console::WriteLine( &quot;-------------------------------------&quot; );\n            Console::WriteLine( &quot;  physical memory usage: {0}&quot;, myProcess-&gt;WorkingSet64 );\n            Console::WriteLine( &quot;  base priority: {0}&quot;, myProcess-&gt;BasePriority );\n            Console::WriteLine( &quot;  priority class: {0}&quot;, myProcess-&gt;PriorityClass );\n            Console::WriteLine( &quot;  user processor time: {0}&quot;, myProcess-&gt;UserProcessorTime );\n            Console::WriteLine( &quot;  privileged processor time: {0}&quot;, myProcess-&gt;PrivilegedProcessorTime );\n            Console::WriteLine( &quot;  total processor time: {0}&quot;, myProcess-&gt;TotalProcessorTime );\n\t\t\tConsole::WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;, myProcess-&gt;PagedSystemMemorySize64);\n            Console::WriteLine(&quot;  PagedMemorySize64: {0}&quot;, myProcess-&gt;PagedMemorySize64);\n            \n            // Update the values for the overall peak memory statistics.\n            peakPagedMem = myProcess-&gt;PeakPagedMemorySize64;\n            peakVirtualMem = myProcess-&gt;PeakVirtualMemorySize64;\n            peakWorkingSet = myProcess-&gt;PeakWorkingSet64;\n            if ( myProcess-&gt;Responding )\n            {\n               Console::WriteLine( &quot;Status = Running&quot; );\n            }\n            else\n            {\n               Console::WriteLine( &quot;Status = Not Responding&quot; );\n            }\n         }\n      }\n      while (  !myProcess-&gt;WaitForExit( 1000 ) );\n      Console::WriteLine();\n      Console::WriteLine( &quot;Process exit code: {0}&quot;, myProcess-&gt;ExitCode );\n      \n      // Display peak memory statistics for the process.\n      Console::WriteLine( &quot;Peak physical memory usage of the process: {0}&quot;, peakWorkingSet );\n      Console::WriteLine( &quot;Peak paged memory usage of the process: {0}&quot;, peakPagedMem );\n      Console::WriteLine( &quot;Peak virtual memory usage of the process: {0}&quot;, peakVirtualMem );\n   }\n   finally\n   {\n      if ( myProcess != nullptr )\n      {\n         myProcess-&gt;Close();\n      }\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Diag_Process_MemoryProperties64#1\">using System;\nusing System.Diagnostics;\n\nnamespace ProcessSample\n{\n    class ProcessMonitorSample\n    {\n        public static void Main()\n        {\n\n            // Define variables to track the peak\n            // memory usage of the process.\n            long peakPagedMem = 0,\n                peakWorkingSet = 0,\n                peakVirtualMem = 0;\n\n            Process myProcess = null;\n\n            try\n            {\n                // Start the process.\n                myProcess = Process.Start(&quot;NotePad.exe&quot;);\n\n                // Display the process statistics until\n                // the user closes the program.\n                do\n                {\n                    if (!myProcess.HasExited)\n                    {\n                        // Refresh the current process property values.\n                        myProcess.Refresh();\n\n                        Console.WriteLine();\n\n                        // Display current process statistics.\n\n                        Console.WriteLine(&quot;{0} -&quot;, myProcess.ToString());\n                        Console.WriteLine(&quot;-------------------------------------&quot;);\n\n                        Console.WriteLine(&quot;  physical memory usage: {0}&quot;,\n                            myProcess.WorkingSet64);\n                        Console.WriteLine(&quot;  base priority: {0}&quot;,\n                            myProcess.BasePriority);\n                        Console.WriteLine(&quot;  priority class: {0}&quot;,\n                            myProcess.PriorityClass);\n                        Console.WriteLine(&quot;  user processor time: {0}&quot;,\n                            myProcess.UserProcessorTime);\n                        Console.WriteLine(&quot;  privileged processor time: {0}&quot;,\n                            myProcess.PrivilegedProcessorTime);\n                        Console.WriteLine(&quot;  total processor time: {0}&quot;,\n                            myProcess.TotalProcessorTime);\n                        Console.WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;,\n                            myProcess.PagedSystemMemorySize64);\n                        Console.WriteLine(&quot;  PagedMemorySize64: {0}&quot;,\n                           myProcess.PagedMemorySize64);\n\n                        // Update the values for the overall peak memory statistics.\n                        peakPagedMem = myProcess.PeakPagedMemorySize64;\n                        peakVirtualMem = myProcess.PeakVirtualMemorySize64;\n                        peakWorkingSet = myProcess.PeakWorkingSet64;\n\n                        if (myProcess.Responding)\n                        {\n                            Console.WriteLine(&quot;Status = Running&quot;);\n                        }\n                        else\n                        {\n                            Console.WriteLine(&quot;Status = Not Responding&quot;);\n                        }\n                    }\n                }\n                while (!myProcess.WaitForExit(1000));\n\n\n                Console.WriteLine();\n                Console.WriteLine(&quot;Process exit code: {0}&quot;,\n                    myProcess.ExitCode);\n\n                // Display peak memory statistics for the process.\n                Console.WriteLine(&quot;Peak physical memory usage of the process: {0}&quot;,\n                    peakWorkingSet);\n                Console.WriteLine(&quot;Peak paged memory usage of the process: {0}&quot;,\n                    peakPagedMem);\n                Console.WriteLine(&quot;Peak virtual memory usage of the process: {0}&quot;,\n                    peakVirtualMem);\n\n            }\n            finally\n            {\n                if (myProcess != null)\n                {\n                    myProcess.Close();\n                }\n            }\n        }\n\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Diag_Process_MemoryProperties64#1\">Imports System\nImports System.Diagnostics\n\nNamespace ProcessSample\n    Class ProcessMonitorSample\n\n        Public Shared Sub Main()\n\n            &#39; Define variables to track the peak\n            &#39; memory usage of the process.\n            Dim peakPagedMem As Long = 0\n            Dim peakWorkingSet As Long = 0\n            Dim peakVirtualMem As Long = 0\n\n            Dim myProcess As Process = Nothing\n\n            Try\n\n                &#39; Start the process.\n                myProcess = Process.Start(&quot;NotePad.exe&quot;)\n\n                &#39; Display process statistics until\n                &#39; the user closes the program.\n                Do\n\n                    If Not myProcess.HasExited Then\n\n                        &#39; Refresh the current process property values.\n                        myProcess.Refresh()\n\n                        Console.WriteLine()\n\n                        &#39; Display current process statistics.\n\n                        Console.WriteLine(&quot;{0} -&quot;, myProcess.ToString())\n                        Console.WriteLine(&quot;-------------------------------------&quot;)\n\n                        Console.WriteLine(&quot;  physical memory usage: {0}&quot;, _\n                             myProcess.WorkingSet64)\n                        Console.WriteLine(&quot;  base priority: {0}&quot;, _\n                             myProcess.BasePriority)\n                        Console.WriteLine(&quot;  priority class: {0}&quot;, _\n                             myProcess.PriorityClass)\n                        Console.WriteLine(&quot;  user processor time: {0}&quot;, _\n                             myProcess.UserProcessorTime)\n                        Console.WriteLine(&quot;  privileged processor time: {0}&quot;, _\n                             myProcess.PrivilegedProcessorTime)\n                        Console.WriteLine(&quot;  total processor time: {0}&quot;, _\n                             myProcess.TotalProcessorTime)\n                        Console.WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;, _\n                            myProcess.PagedSystemMemorySize64)\n                        Console.WriteLine(&quot;  PagedMemorySize64: {0}&quot;, _\n                           myProcess.PagedMemorySize64)\n\n                        &#39; Update the values for the overall peak memory statistics.\n                        peakPagedMem = myProcess.PeakPagedMemorySize64\n                        peakVirtualMem = myProcess.PeakVirtualMemorySize64\n                        peakWorkingSet = myProcess.PeakWorkingSet64\n\n                        If myProcess.Responding Then\n                            Console.WriteLine(&quot;Status = Running&quot;)\n                        Else\n                            Console.WriteLine(&quot;Status = Not Responding&quot;)\n                        End If\n                    End If\n                Loop While Not myProcess.WaitForExit(1000)\n\n                Console.WriteLine()\n                Console.WriteLine(&quot;Process exit code: {0}&quot;, myProcess.ExitCode)\n\n                &#39; Display peak memory statistics for the process.\n                Console.WriteLine(&quot;Peak physical memory usage of the process: {0}&quot;, _\n                    peakWorkingSet)\n                Console.WriteLine(&quot;Peak paged memory usage of the process: {0}&quot;, _\n                    peakPagedMem)\n                Console.WriteLine(&quot;Peak virtual memory usage of the process: {0}&quot;, _\n                    peakVirtualMem)\n\n            Finally\n                If Not myProcess Is Nothing Then\n                    myProcess.Close()\n                End If\n            End Try\n        End Sub &#39;Main\n    End Class\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_PeakPagedMemorySize\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_PeakPagedMemorySize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PeakPagedMemorySize</div>        \r\n          </div>\r\n    \r\n            <p>Gets the maximum amount of memory in the virtual memory paging file, in bytes, used by the associated process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int PeakPagedMemorySize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The maximum amount of memory, in bytes, allocated by the associated process that could be written to the virtual memory paging file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_PeakPagedMemorySize64\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_PeakPagedMemorySize64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PeakPagedMemorySize64</div>        \r\n          </div>\r\n    \r\n            <p>Gets the maximum amount of memory in the virtual memory paging file, in bytes, used by the associated process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public long PeakPagedMemorySize64 { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The maximum amount of memory, in bytes, allocated in the virtual memory paging file for the associated process since it was started.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value returned by this property value represents the maximum size of memory in the virtual memory paging file used by the process since it started, in bytes. The operating system uses the virtual memory paging file in conjunction with physical memory to manage the virtual address space for each process. When pageable memory is not in use, it can be transferred to the virtual memory paging file on disk.  </p>\n<p> This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors. The property value is equivalent to the <strong>Page File Bytes Peak</strong> performance counter for the process.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example starts an instance of the Notepad application. The example then retrieves and displays various properties of the associated process. The example detects when the process exits, and displays its exit code and peak memory statistics.  </p>\n<pre><code class=\"lang-cpp\" name=\"Diag_Process_MemoryProperties64#1\">#using &lt;system.dll&gt;\n\nusing namespace System;\nusing namespace System::Diagnostics;\nint main()\n{\n   \n   // Define variables to track the peak\n   // memory usage of the process.\n   _int64 peakPagedMem = 0,peakWorkingSet = 0,peakVirtualMem = 0;\n   Process^ myProcess = nullptr;\n   try\n   {\n      \n      // Start the process.\n      myProcess = Process::Start( &quot;NotePad.exe&quot; );\n      \n      // Display the process statistics until\n      // the user closes the program.\n      do\n      {\n         if (  !myProcess-&gt;HasExited )\n         {\n            \n            // Refresh the current process property values.\n            myProcess-&gt;Refresh();\n            Console::WriteLine();\n            \n            // Display current process statistics.\n            Console::WriteLine( &quot;{0} -&quot;, myProcess );\n            Console::WriteLine( &quot;-------------------------------------&quot; );\n            Console::WriteLine( &quot;  physical memory usage: {0}&quot;, myProcess-&gt;WorkingSet64 );\n            Console::WriteLine( &quot;  base priority: {0}&quot;, myProcess-&gt;BasePriority );\n            Console::WriteLine( &quot;  priority class: {0}&quot;, myProcess-&gt;PriorityClass );\n            Console::WriteLine( &quot;  user processor time: {0}&quot;, myProcess-&gt;UserProcessorTime );\n            Console::WriteLine( &quot;  privileged processor time: {0}&quot;, myProcess-&gt;PrivilegedProcessorTime );\n            Console::WriteLine( &quot;  total processor time: {0}&quot;, myProcess-&gt;TotalProcessorTime );\n\t\t\tConsole::WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;, myProcess-&gt;PagedSystemMemorySize64);\n            Console::WriteLine(&quot;  PagedMemorySize64: {0}&quot;, myProcess-&gt;PagedMemorySize64);\n            \n            // Update the values for the overall peak memory statistics.\n            peakPagedMem = myProcess-&gt;PeakPagedMemorySize64;\n            peakVirtualMem = myProcess-&gt;PeakVirtualMemorySize64;\n            peakWorkingSet = myProcess-&gt;PeakWorkingSet64;\n            if ( myProcess-&gt;Responding )\n            {\n               Console::WriteLine( &quot;Status = Running&quot; );\n            }\n            else\n            {\n               Console::WriteLine( &quot;Status = Not Responding&quot; );\n            }\n         }\n      }\n      while (  !myProcess-&gt;WaitForExit( 1000 ) );\n      Console::WriteLine();\n      Console::WriteLine( &quot;Process exit code: {0}&quot;, myProcess-&gt;ExitCode );\n      \n      // Display peak memory statistics for the process.\n      Console::WriteLine( &quot;Peak physical memory usage of the process: {0}&quot;, peakWorkingSet );\n      Console::WriteLine( &quot;Peak paged memory usage of the process: {0}&quot;, peakPagedMem );\n      Console::WriteLine( &quot;Peak virtual memory usage of the process: {0}&quot;, peakVirtualMem );\n   }\n   finally\n   {\n      if ( myProcess != nullptr )\n      {\n         myProcess-&gt;Close();\n      }\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Diag_Process_MemoryProperties64#1\">using System;\nusing System.Diagnostics;\n\nnamespace ProcessSample\n{\n    class ProcessMonitorSample\n    {\n        public static void Main()\n        {\n\n            // Define variables to track the peak\n            // memory usage of the process.\n            long peakPagedMem = 0,\n                peakWorkingSet = 0,\n                peakVirtualMem = 0;\n\n            Process myProcess = null;\n\n            try\n            {\n                // Start the process.\n                myProcess = Process.Start(&quot;NotePad.exe&quot;);\n\n                // Display the process statistics until\n                // the user closes the program.\n                do\n                {\n                    if (!myProcess.HasExited)\n                    {\n                        // Refresh the current process property values.\n                        myProcess.Refresh();\n\n                        Console.WriteLine();\n\n                        // Display current process statistics.\n\n                        Console.WriteLine(&quot;{0} -&quot;, myProcess.ToString());\n                        Console.WriteLine(&quot;-------------------------------------&quot;);\n\n                        Console.WriteLine(&quot;  physical memory usage: {0}&quot;,\n                            myProcess.WorkingSet64);\n                        Console.WriteLine(&quot;  base priority: {0}&quot;,\n                            myProcess.BasePriority);\n                        Console.WriteLine(&quot;  priority class: {0}&quot;,\n                            myProcess.PriorityClass);\n                        Console.WriteLine(&quot;  user processor time: {0}&quot;,\n                            myProcess.UserProcessorTime);\n                        Console.WriteLine(&quot;  privileged processor time: {0}&quot;,\n                            myProcess.PrivilegedProcessorTime);\n                        Console.WriteLine(&quot;  total processor time: {0}&quot;,\n                            myProcess.TotalProcessorTime);\n                        Console.WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;,\n                            myProcess.PagedSystemMemorySize64);\n                        Console.WriteLine(&quot;  PagedMemorySize64: {0}&quot;,\n                           myProcess.PagedMemorySize64);\n\n                        // Update the values for the overall peak memory statistics.\n                        peakPagedMem = myProcess.PeakPagedMemorySize64;\n                        peakVirtualMem = myProcess.PeakVirtualMemorySize64;\n                        peakWorkingSet = myProcess.PeakWorkingSet64;\n\n                        if (myProcess.Responding)\n                        {\n                            Console.WriteLine(&quot;Status = Running&quot;);\n                        }\n                        else\n                        {\n                            Console.WriteLine(&quot;Status = Not Responding&quot;);\n                        }\n                    }\n                }\n                while (!myProcess.WaitForExit(1000));\n\n\n                Console.WriteLine();\n                Console.WriteLine(&quot;Process exit code: {0}&quot;,\n                    myProcess.ExitCode);\n\n                // Display peak memory statistics for the process.\n                Console.WriteLine(&quot;Peak physical memory usage of the process: {0}&quot;,\n                    peakWorkingSet);\n                Console.WriteLine(&quot;Peak paged memory usage of the process: {0}&quot;,\n                    peakPagedMem);\n                Console.WriteLine(&quot;Peak virtual memory usage of the process: {0}&quot;,\n                    peakVirtualMem);\n\n            }\n            finally\n            {\n                if (myProcess != null)\n                {\n                    myProcess.Close();\n                }\n            }\n        }\n\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Diag_Process_MemoryProperties64#1\">Imports System\nImports System.Diagnostics\n\nNamespace ProcessSample\n    Class ProcessMonitorSample\n\n        Public Shared Sub Main()\n\n            &#39; Define variables to track the peak\n            &#39; memory usage of the process.\n            Dim peakPagedMem As Long = 0\n            Dim peakWorkingSet As Long = 0\n            Dim peakVirtualMem As Long = 0\n\n            Dim myProcess As Process = Nothing\n\n            Try\n\n                &#39; Start the process.\n                myProcess = Process.Start(&quot;NotePad.exe&quot;)\n\n                &#39; Display process statistics until\n                &#39; the user closes the program.\n                Do\n\n                    If Not myProcess.HasExited Then\n\n                        &#39; Refresh the current process property values.\n                        myProcess.Refresh()\n\n                        Console.WriteLine()\n\n                        &#39; Display current process statistics.\n\n                        Console.WriteLine(&quot;{0} -&quot;, myProcess.ToString())\n                        Console.WriteLine(&quot;-------------------------------------&quot;)\n\n                        Console.WriteLine(&quot;  physical memory usage: {0}&quot;, _\n                             myProcess.WorkingSet64)\n                        Console.WriteLine(&quot;  base priority: {0}&quot;, _\n                             myProcess.BasePriority)\n                        Console.WriteLine(&quot;  priority class: {0}&quot;, _\n                             myProcess.PriorityClass)\n                        Console.WriteLine(&quot;  user processor time: {0}&quot;, _\n                             myProcess.UserProcessorTime)\n                        Console.WriteLine(&quot;  privileged processor time: {0}&quot;, _\n                             myProcess.PrivilegedProcessorTime)\n                        Console.WriteLine(&quot;  total processor time: {0}&quot;, _\n                             myProcess.TotalProcessorTime)\n                        Console.WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;, _\n                            myProcess.PagedSystemMemorySize64)\n                        Console.WriteLine(&quot;  PagedMemorySize64: {0}&quot;, _\n                           myProcess.PagedMemorySize64)\n\n                        &#39; Update the values for the overall peak memory statistics.\n                        peakPagedMem = myProcess.PeakPagedMemorySize64\n                        peakVirtualMem = myProcess.PeakVirtualMemorySize64\n                        peakWorkingSet = myProcess.PeakWorkingSet64\n\n                        If myProcess.Responding Then\n                            Console.WriteLine(&quot;Status = Running&quot;)\n                        Else\n                            Console.WriteLine(&quot;Status = Not Responding&quot;)\n                        End If\n                    End If\n                Loop While Not myProcess.WaitForExit(1000)\n\n                Console.WriteLine()\n                Console.WriteLine(&quot;Process exit code: {0}&quot;, myProcess.ExitCode)\n\n                &#39; Display peak memory statistics for the process.\n                Console.WriteLine(&quot;Peak physical memory usage of the process: {0}&quot;, _\n                    peakWorkingSet)\n                Console.WriteLine(&quot;Peak paged memory usage of the process: {0}&quot;, _\n                    peakPagedMem)\n                Console.WriteLine(&quot;Peak virtual memory usage of the process: {0}&quot;, _\n                    peakVirtualMem)\n\n            Finally\n                If Not myProcess Is Nothing Then\n                    myProcess.Close()\n                End If\n            End Try\n        End Sub &#39;Main\n    End Class\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_PeakVirtualMemorySize\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_PeakVirtualMemorySize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PeakVirtualMemorySize</div>        \r\n          </div>\r\n    \r\n            <p>Gets the maximum amount of virtual memory, in bytes, used by the associated process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int PeakVirtualMemorySize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The maximum amount of virtual memory, in bytes, that the associated process has requested.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_PeakVirtualMemorySize64\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_PeakVirtualMemorySize64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PeakVirtualMemorySize64</div>        \r\n          </div>\r\n    \r\n            <p>Gets the maximum amount of virtual memory, in bytes, used by the associated process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public long PeakVirtualMemorySize64 { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The maximum amount of virtual memory, in bytes, allocated for the associated process since it was started.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value returned by this property represents the maximum size of virtual memory used by the process since it started, in bytes. The operating system maps the virtual address space for each process either to pages loaded in physical memory, or to pages stored in the virtual memory paging file on disk.  </p>\n<p> This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors. The property value is equivalent to the <strong>Virtual Bytes Peak</strong> performance counter for the process.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example starts an instance of the Notepad application. The example then retrieves and displays various properties of the associated process. The example detects when the process exits, and displays its exit code and peak memory statistics.  </p>\n<pre><code class=\"lang-cpp\" name=\"Diag_Process_MemoryProperties64#1\">#using &lt;system.dll&gt;\n\nusing namespace System;\nusing namespace System::Diagnostics;\nint main()\n{\n   \n   // Define variables to track the peak\n   // memory usage of the process.\n   _int64 peakPagedMem = 0,peakWorkingSet = 0,peakVirtualMem = 0;\n   Process^ myProcess = nullptr;\n   try\n   {\n      \n      // Start the process.\n      myProcess = Process::Start( &quot;NotePad.exe&quot; );\n      \n      // Display the process statistics until\n      // the user closes the program.\n      do\n      {\n         if (  !myProcess-&gt;HasExited )\n         {\n            \n            // Refresh the current process property values.\n            myProcess-&gt;Refresh();\n            Console::WriteLine();\n            \n            // Display current process statistics.\n            Console::WriteLine( &quot;{0} -&quot;, myProcess );\n            Console::WriteLine( &quot;-------------------------------------&quot; );\n            Console::WriteLine( &quot;  physical memory usage: {0}&quot;, myProcess-&gt;WorkingSet64 );\n            Console::WriteLine( &quot;  base priority: {0}&quot;, myProcess-&gt;BasePriority );\n            Console::WriteLine( &quot;  priority class: {0}&quot;, myProcess-&gt;PriorityClass );\n            Console::WriteLine( &quot;  user processor time: {0}&quot;, myProcess-&gt;UserProcessorTime );\n            Console::WriteLine( &quot;  privileged processor time: {0}&quot;, myProcess-&gt;PrivilegedProcessorTime );\n            Console::WriteLine( &quot;  total processor time: {0}&quot;, myProcess-&gt;TotalProcessorTime );\n\t\t\tConsole::WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;, myProcess-&gt;PagedSystemMemorySize64);\n            Console::WriteLine(&quot;  PagedMemorySize64: {0}&quot;, myProcess-&gt;PagedMemorySize64);\n            \n            // Update the values for the overall peak memory statistics.\n            peakPagedMem = myProcess-&gt;PeakPagedMemorySize64;\n            peakVirtualMem = myProcess-&gt;PeakVirtualMemorySize64;\n            peakWorkingSet = myProcess-&gt;PeakWorkingSet64;\n            if ( myProcess-&gt;Responding )\n            {\n               Console::WriteLine( &quot;Status = Running&quot; );\n            }\n            else\n            {\n               Console::WriteLine( &quot;Status = Not Responding&quot; );\n            }\n         }\n      }\n      while (  !myProcess-&gt;WaitForExit( 1000 ) );\n      Console::WriteLine();\n      Console::WriteLine( &quot;Process exit code: {0}&quot;, myProcess-&gt;ExitCode );\n      \n      // Display peak memory statistics for the process.\n      Console::WriteLine( &quot;Peak physical memory usage of the process: {0}&quot;, peakWorkingSet );\n      Console::WriteLine( &quot;Peak paged memory usage of the process: {0}&quot;, peakPagedMem );\n      Console::WriteLine( &quot;Peak virtual memory usage of the process: {0}&quot;, peakVirtualMem );\n   }\n   finally\n   {\n      if ( myProcess != nullptr )\n      {\n         myProcess-&gt;Close();\n      }\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Diag_Process_MemoryProperties64#1\">using System;\nusing System.Diagnostics;\n\nnamespace ProcessSample\n{\n    class ProcessMonitorSample\n    {\n        public static void Main()\n        {\n\n            // Define variables to track the peak\n            // memory usage of the process.\n            long peakPagedMem = 0,\n                peakWorkingSet = 0,\n                peakVirtualMem = 0;\n\n            Process myProcess = null;\n\n            try\n            {\n                // Start the process.\n                myProcess = Process.Start(&quot;NotePad.exe&quot;);\n\n                // Display the process statistics until\n                // the user closes the program.\n                do\n                {\n                    if (!myProcess.HasExited)\n                    {\n                        // Refresh the current process property values.\n                        myProcess.Refresh();\n\n                        Console.WriteLine();\n\n                        // Display current process statistics.\n\n                        Console.WriteLine(&quot;{0} -&quot;, myProcess.ToString());\n                        Console.WriteLine(&quot;-------------------------------------&quot;);\n\n                        Console.WriteLine(&quot;  physical memory usage: {0}&quot;,\n                            myProcess.WorkingSet64);\n                        Console.WriteLine(&quot;  base priority: {0}&quot;,\n                            myProcess.BasePriority);\n                        Console.WriteLine(&quot;  priority class: {0}&quot;,\n                            myProcess.PriorityClass);\n                        Console.WriteLine(&quot;  user processor time: {0}&quot;,\n                            myProcess.UserProcessorTime);\n                        Console.WriteLine(&quot;  privileged processor time: {0}&quot;,\n                            myProcess.PrivilegedProcessorTime);\n                        Console.WriteLine(&quot;  total processor time: {0}&quot;,\n                            myProcess.TotalProcessorTime);\n                        Console.WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;,\n                            myProcess.PagedSystemMemorySize64);\n                        Console.WriteLine(&quot;  PagedMemorySize64: {0}&quot;,\n                           myProcess.PagedMemorySize64);\n\n                        // Update the values for the overall peak memory statistics.\n                        peakPagedMem = myProcess.PeakPagedMemorySize64;\n                        peakVirtualMem = myProcess.PeakVirtualMemorySize64;\n                        peakWorkingSet = myProcess.PeakWorkingSet64;\n\n                        if (myProcess.Responding)\n                        {\n                            Console.WriteLine(&quot;Status = Running&quot;);\n                        }\n                        else\n                        {\n                            Console.WriteLine(&quot;Status = Not Responding&quot;);\n                        }\n                    }\n                }\n                while (!myProcess.WaitForExit(1000));\n\n\n                Console.WriteLine();\n                Console.WriteLine(&quot;Process exit code: {0}&quot;,\n                    myProcess.ExitCode);\n\n                // Display peak memory statistics for the process.\n                Console.WriteLine(&quot;Peak physical memory usage of the process: {0}&quot;,\n                    peakWorkingSet);\n                Console.WriteLine(&quot;Peak paged memory usage of the process: {0}&quot;,\n                    peakPagedMem);\n                Console.WriteLine(&quot;Peak virtual memory usage of the process: {0}&quot;,\n                    peakVirtualMem);\n\n            }\n            finally\n            {\n                if (myProcess != null)\n                {\n                    myProcess.Close();\n                }\n            }\n        }\n\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Diag_Process_MemoryProperties64#1\">Imports System\nImports System.Diagnostics\n\nNamespace ProcessSample\n    Class ProcessMonitorSample\n\n        Public Shared Sub Main()\n\n            &#39; Define variables to track the peak\n            &#39; memory usage of the process.\n            Dim peakPagedMem As Long = 0\n            Dim peakWorkingSet As Long = 0\n            Dim peakVirtualMem As Long = 0\n\n            Dim myProcess As Process = Nothing\n\n            Try\n\n                &#39; Start the process.\n                myProcess = Process.Start(&quot;NotePad.exe&quot;)\n\n                &#39; Display process statistics until\n                &#39; the user closes the program.\n                Do\n\n                    If Not myProcess.HasExited Then\n\n                        &#39; Refresh the current process property values.\n                        myProcess.Refresh()\n\n                        Console.WriteLine()\n\n                        &#39; Display current process statistics.\n\n                        Console.WriteLine(&quot;{0} -&quot;, myProcess.ToString())\n                        Console.WriteLine(&quot;-------------------------------------&quot;)\n\n                        Console.WriteLine(&quot;  physical memory usage: {0}&quot;, _\n                             myProcess.WorkingSet64)\n                        Console.WriteLine(&quot;  base priority: {0}&quot;, _\n                             myProcess.BasePriority)\n                        Console.WriteLine(&quot;  priority class: {0}&quot;, _\n                             myProcess.PriorityClass)\n                        Console.WriteLine(&quot;  user processor time: {0}&quot;, _\n                             myProcess.UserProcessorTime)\n                        Console.WriteLine(&quot;  privileged processor time: {0}&quot;, _\n                             myProcess.PrivilegedProcessorTime)\n                        Console.WriteLine(&quot;  total processor time: {0}&quot;, _\n                             myProcess.TotalProcessorTime)\n                        Console.WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;, _\n                            myProcess.PagedSystemMemorySize64)\n                        Console.WriteLine(&quot;  PagedMemorySize64: {0}&quot;, _\n                           myProcess.PagedMemorySize64)\n\n                        &#39; Update the values for the overall peak memory statistics.\n                        peakPagedMem = myProcess.PeakPagedMemorySize64\n                        peakVirtualMem = myProcess.PeakVirtualMemorySize64\n                        peakWorkingSet = myProcess.PeakWorkingSet64\n\n                        If myProcess.Responding Then\n                            Console.WriteLine(&quot;Status = Running&quot;)\n                        Else\n                            Console.WriteLine(&quot;Status = Not Responding&quot;)\n                        End If\n                    End If\n                Loop While Not myProcess.WaitForExit(1000)\n\n                Console.WriteLine()\n                Console.WriteLine(&quot;Process exit code: {0}&quot;, myProcess.ExitCode)\n\n                &#39; Display peak memory statistics for the process.\n                Console.WriteLine(&quot;Peak physical memory usage of the process: {0}&quot;, _\n                    peakWorkingSet)\n                Console.WriteLine(&quot;Peak paged memory usage of the process: {0}&quot;, _\n                    peakPagedMem)\n                Console.WriteLine(&quot;Peak virtual memory usage of the process: {0}&quot;, _\n                    peakVirtualMem)\n\n            Finally\n                If Not myProcess Is Nothing Then\n                    myProcess.Close()\n                End If\n            End Try\n        End Sub &#39;Main\n    End Class\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_PeakWorkingSet\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_PeakWorkingSet_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PeakWorkingSet</div>        \r\n          </div>\r\n    \r\n            <p>Gets the peak working set size for the associated process, in bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int PeakWorkingSet { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The maximum amount of physical memory that the associated process has required all at once, in bytes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The working set of a process is the set of memory pages currently visible to the process in physical RAM memory. These pages are resident and available for an application to use without triggering a page fault.  </p>\n<p> The working set includes both shared and private data. The shared data includes the pages that contain all the instructions that the process executes, including process modules and the system libraries.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_PeakWorkingSet64\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_PeakWorkingSet64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PeakWorkingSet64</div>        \r\n          </div>\r\n    \r\n            <p>Gets the maximum amount of physical memory, in bytes, used by the associated process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public long PeakWorkingSet64 { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The maximum amount of physical memory, in bytes, allocated for the associated process since it was started.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value returned by this property represents the maximum size of working set memory used by the process since it started, in bytes. The working set of a process is the set of memory pages currently visible to the process in physical RAM memory. These pages are resident and available for an application to use without triggering a page fault.  </p>\n<p> The working set includes both shared and private data. The shared data includes the pages that contain all the instructions that the process executes, including instructions from the process modules and the system libraries.  </p>\n<p> This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors. The property value is equivalent to the <strong>Working Set Peak</strong> performance counter for the process.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example starts an instance of the Notepad application. The example then retrieves and displays various properties of the associated process. The example detects when the process exits, and displays its exit code and peak memory statistics.  </p>\n<pre><code class=\"lang-cpp\" name=\"Diag_Process_MemoryProperties64#1\">#using &lt;system.dll&gt;\n\nusing namespace System;\nusing namespace System::Diagnostics;\nint main()\n{\n   \n   // Define variables to track the peak\n   // memory usage of the process.\n   _int64 peakPagedMem = 0,peakWorkingSet = 0,peakVirtualMem = 0;\n   Process^ myProcess = nullptr;\n   try\n   {\n      \n      // Start the process.\n      myProcess = Process::Start( &quot;NotePad.exe&quot; );\n      \n      // Display the process statistics until\n      // the user closes the program.\n      do\n      {\n         if (  !myProcess-&gt;HasExited )\n         {\n            \n            // Refresh the current process property values.\n            myProcess-&gt;Refresh();\n            Console::WriteLine();\n            \n            // Display current process statistics.\n            Console::WriteLine( &quot;{0} -&quot;, myProcess );\n            Console::WriteLine( &quot;-------------------------------------&quot; );\n            Console::WriteLine( &quot;  physical memory usage: {0}&quot;, myProcess-&gt;WorkingSet64 );\n            Console::WriteLine( &quot;  base priority: {0}&quot;, myProcess-&gt;BasePriority );\n            Console::WriteLine( &quot;  priority class: {0}&quot;, myProcess-&gt;PriorityClass );\n            Console::WriteLine( &quot;  user processor time: {0}&quot;, myProcess-&gt;UserProcessorTime );\n            Console::WriteLine( &quot;  privileged processor time: {0}&quot;, myProcess-&gt;PrivilegedProcessorTime );\n            Console::WriteLine( &quot;  total processor time: {0}&quot;, myProcess-&gt;TotalProcessorTime );\n\t\t\tConsole::WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;, myProcess-&gt;PagedSystemMemorySize64);\n            Console::WriteLine(&quot;  PagedMemorySize64: {0}&quot;, myProcess-&gt;PagedMemorySize64);\n            \n            // Update the values for the overall peak memory statistics.\n            peakPagedMem = myProcess-&gt;PeakPagedMemorySize64;\n            peakVirtualMem = myProcess-&gt;PeakVirtualMemorySize64;\n            peakWorkingSet = myProcess-&gt;PeakWorkingSet64;\n            if ( myProcess-&gt;Responding )\n            {\n               Console::WriteLine( &quot;Status = Running&quot; );\n            }\n            else\n            {\n               Console::WriteLine( &quot;Status = Not Responding&quot; );\n            }\n         }\n      }\n      while (  !myProcess-&gt;WaitForExit( 1000 ) );\n      Console::WriteLine();\n      Console::WriteLine( &quot;Process exit code: {0}&quot;, myProcess-&gt;ExitCode );\n      \n      // Display peak memory statistics for the process.\n      Console::WriteLine( &quot;Peak physical memory usage of the process: {0}&quot;, peakWorkingSet );\n      Console::WriteLine( &quot;Peak paged memory usage of the process: {0}&quot;, peakPagedMem );\n      Console::WriteLine( &quot;Peak virtual memory usage of the process: {0}&quot;, peakVirtualMem );\n   }\n   finally\n   {\n      if ( myProcess != nullptr )\n      {\n         myProcess-&gt;Close();\n      }\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Diag_Process_MemoryProperties64#1\">using System;\nusing System.Diagnostics;\n\nnamespace ProcessSample\n{\n    class ProcessMonitorSample\n    {\n        public static void Main()\n        {\n\n            // Define variables to track the peak\n            // memory usage of the process.\n            long peakPagedMem = 0,\n                peakWorkingSet = 0,\n                peakVirtualMem = 0;\n\n            Process myProcess = null;\n\n            try\n            {\n                // Start the process.\n                myProcess = Process.Start(&quot;NotePad.exe&quot;);\n\n                // Display the process statistics until\n                // the user closes the program.\n                do\n                {\n                    if (!myProcess.HasExited)\n                    {\n                        // Refresh the current process property values.\n                        myProcess.Refresh();\n\n                        Console.WriteLine();\n\n                        // Display current process statistics.\n\n                        Console.WriteLine(&quot;{0} -&quot;, myProcess.ToString());\n                        Console.WriteLine(&quot;-------------------------------------&quot;);\n\n                        Console.WriteLine(&quot;  physical memory usage: {0}&quot;,\n                            myProcess.WorkingSet64);\n                        Console.WriteLine(&quot;  base priority: {0}&quot;,\n                            myProcess.BasePriority);\n                        Console.WriteLine(&quot;  priority class: {0}&quot;,\n                            myProcess.PriorityClass);\n                        Console.WriteLine(&quot;  user processor time: {0}&quot;,\n                            myProcess.UserProcessorTime);\n                        Console.WriteLine(&quot;  privileged processor time: {0}&quot;,\n                            myProcess.PrivilegedProcessorTime);\n                        Console.WriteLine(&quot;  total processor time: {0}&quot;,\n                            myProcess.TotalProcessorTime);\n                        Console.WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;,\n                            myProcess.PagedSystemMemorySize64);\n                        Console.WriteLine(&quot;  PagedMemorySize64: {0}&quot;,\n                           myProcess.PagedMemorySize64);\n\n                        // Update the values for the overall peak memory statistics.\n                        peakPagedMem = myProcess.PeakPagedMemorySize64;\n                        peakVirtualMem = myProcess.PeakVirtualMemorySize64;\n                        peakWorkingSet = myProcess.PeakWorkingSet64;\n\n                        if (myProcess.Responding)\n                        {\n                            Console.WriteLine(&quot;Status = Running&quot;);\n                        }\n                        else\n                        {\n                            Console.WriteLine(&quot;Status = Not Responding&quot;);\n                        }\n                    }\n                }\n                while (!myProcess.WaitForExit(1000));\n\n\n                Console.WriteLine();\n                Console.WriteLine(&quot;Process exit code: {0}&quot;,\n                    myProcess.ExitCode);\n\n                // Display peak memory statistics for the process.\n                Console.WriteLine(&quot;Peak physical memory usage of the process: {0}&quot;,\n                    peakWorkingSet);\n                Console.WriteLine(&quot;Peak paged memory usage of the process: {0}&quot;,\n                    peakPagedMem);\n                Console.WriteLine(&quot;Peak virtual memory usage of the process: {0}&quot;,\n                    peakVirtualMem);\n\n            }\n            finally\n            {\n                if (myProcess != null)\n                {\n                    myProcess.Close();\n                }\n            }\n        }\n\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Diag_Process_MemoryProperties64#1\">Imports System\nImports System.Diagnostics\n\nNamespace ProcessSample\n    Class ProcessMonitorSample\n\n        Public Shared Sub Main()\n\n            &#39; Define variables to track the peak\n            &#39; memory usage of the process.\n            Dim peakPagedMem As Long = 0\n            Dim peakWorkingSet As Long = 0\n            Dim peakVirtualMem As Long = 0\n\n            Dim myProcess As Process = Nothing\n\n            Try\n\n                &#39; Start the process.\n                myProcess = Process.Start(&quot;NotePad.exe&quot;)\n\n                &#39; Display process statistics until\n                &#39; the user closes the program.\n                Do\n\n                    If Not myProcess.HasExited Then\n\n                        &#39; Refresh the current process property values.\n                        myProcess.Refresh()\n\n                        Console.WriteLine()\n\n                        &#39; Display current process statistics.\n\n                        Console.WriteLine(&quot;{0} -&quot;, myProcess.ToString())\n                        Console.WriteLine(&quot;-------------------------------------&quot;)\n\n                        Console.WriteLine(&quot;  physical memory usage: {0}&quot;, _\n                             myProcess.WorkingSet64)\n                        Console.WriteLine(&quot;  base priority: {0}&quot;, _\n                             myProcess.BasePriority)\n                        Console.WriteLine(&quot;  priority class: {0}&quot;, _\n                             myProcess.PriorityClass)\n                        Console.WriteLine(&quot;  user processor time: {0}&quot;, _\n                             myProcess.UserProcessorTime)\n                        Console.WriteLine(&quot;  privileged processor time: {0}&quot;, _\n                             myProcess.PrivilegedProcessorTime)\n                        Console.WriteLine(&quot;  total processor time: {0}&quot;, _\n                             myProcess.TotalProcessorTime)\n                        Console.WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;, _\n                            myProcess.PagedSystemMemorySize64)\n                        Console.WriteLine(&quot;  PagedMemorySize64: {0}&quot;, _\n                           myProcess.PagedMemorySize64)\n\n                        &#39; Update the values for the overall peak memory statistics.\n                        peakPagedMem = myProcess.PeakPagedMemorySize64\n                        peakVirtualMem = myProcess.PeakVirtualMemorySize64\n                        peakWorkingSet = myProcess.PeakWorkingSet64\n\n                        If myProcess.Responding Then\n                            Console.WriteLine(&quot;Status = Running&quot;)\n                        Else\n                            Console.WriteLine(&quot;Status = Not Responding&quot;)\n                        End If\n                    End If\n                Loop While Not myProcess.WaitForExit(1000)\n\n                Console.WriteLine()\n                Console.WriteLine(&quot;Process exit code: {0}&quot;, myProcess.ExitCode)\n\n                &#39; Display peak memory statistics for the process.\n                Console.WriteLine(&quot;Peak physical memory usage of the process: {0}&quot;, _\n                    peakWorkingSet)\n                Console.WriteLine(&quot;Peak paged memory usage of the process: {0}&quot;, _\n                    peakPagedMem)\n                Console.WriteLine(&quot;Peak virtual memory usage of the process: {0}&quot;, _\n                    peakVirtualMem)\n\n            Finally\n                If Not myProcess Is Nothing Then\n                    myProcess.Close()\n                End If\n            End Try\n        End Sub &#39;Main\n    End Class\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_PriorityBoostEnabled\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_PriorityBoostEnabled_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PriorityBoostEnabled</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether the associated process priority should temporarily be boosted by the operating system when the main window has the focus.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool PriorityBoostEnabled { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if dynamic boosting of the process priority should take place for a process when it is taken out of the wait state; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.win32exception\" data-linktype=\"relative-path\">Win32Exception</a></div>\r\n                  </div>\r\n                  <p>Priority boost information could not be retrieved from the associated process resource.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.  </p>\n<p> -or-  </p>\n<p> The process identifier or process handle is zero. (The process has not been started.)</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>You are attempting to access the PriorityBoostEnabled property for a process that is running on a remote computer. This property is available only for processes that are running on the local computer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The process <span class=\"xref\">stem.Diagnostics.Process.Id*</span> is not available.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When a thread runs in a process for which the priority class has one of the dynamic priority enumeration values (<a class=\"xref\" href=\"system.diagnostics.processpriorityclass\" data-linktype=\"relative-path\">ProcessPriorityClass</a>, <a class=\"xref\" href=\"system.diagnostics.processpriorityclass\" data-linktype=\"relative-path\">ProcessPriorityClass</a>, or <a class=\"xref\" href=\"system.diagnostics.processpriorityclass\" data-linktype=\"relative-path\">ProcessPriorityClass</a>), the system temporarily boosts the thread&#39;s priority when it is taken out of a wait state. This action prevents other processes from interrupting the processing of the current thread. The PriorityBoostEnabled setting affects all the existing threads and any threads subsequently created by the process. To restore normal behavior, set the PriorityBoostEnabled property to <code>false</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Boosting the priority too high can drain resources from essential operating system and network functions, causing problems with other operating system tasks.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_PriorityClass\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_PriorityClass_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PriorityClass</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the overall priority category for the associated process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Diagnostics.ProcessPriorityClass PriorityClass { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.processpriorityclass\" data-linktype=\"relative-path\">ProcessPriorityClass</a></div>\r\n                  </div>\r\n                  <p>The priority category for the associated process, from which the <span class=\"xref\">stem.Diagnostics.Process.BasePriority*</span> of the process is calculated.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.win32exception\" data-linktype=\"relative-path\">Win32Exception</a></div>\r\n                  </div>\r\n                  <p>Process priority information could not be set or retrieved from the associated process resource.  </p>\n<p> -or-  </p>\n<p> The process identifier or process handle is zero. (The process has not been started.)</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>You are attempting to access the PriorityClass property for a process that is running on a remote computer. This property is available only for processes that are running on the local computer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The process <span class=\"xref\">stem.Diagnostics.Process.Id*</span> is not available.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>You have set the PriorityClass to <code>AboveNormal</code> or <code>BelowNormal</code> when using Windows 98 or Windows Millennium Edition (Windows Me). These platforms do not support those values for the priority class.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.invalidenumargumentexception\" data-linktype=\"relative-path\">InvalidEnumArgumentException</a></div>\r\n                  </div>\r\n                  <p>Priority class cannot be set because it does not use a valid value, as defined in the <a class=\"xref\" href=\"system.diagnostics.processpriorityclass\" data-linktype=\"relative-path\">ProcessPriorityClass</a> enumeration.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A process priority class encompasses a range of thread priority levels. Threads with different priorities that are running in the process run relative to the priority class of the process. Win32 uses four priority classes with seven base priority levels per class. These process priority classes are captured in the <a class=\"xref\" href=\"system.diagnostics.processpriorityclass\" data-linktype=\"relative-path\">ProcessPriorityClass</a> enumeration, which lets you set the process priority to <a class=\"xref\" href=\"system.diagnostics.processpriorityclass\" data-linktype=\"relative-path\">ProcessPriorityClass</a>, <a class=\"xref\" href=\"system.diagnostics.processpriorityclass\" data-linktype=\"relative-path\">ProcessPriorityClass</a>, <a class=\"xref\" href=\"system.diagnostics.processpriorityclass\" data-linktype=\"relative-path\">ProcessPriorityClass</a>, <a class=\"xref\" href=\"system.diagnostics.processpriorityclass\" data-linktype=\"relative-path\">ProcessPriorityClass</a>, <a class=\"xref\" href=\"system.diagnostics.processpriorityclass\" data-linktype=\"relative-path\">ProcessPriorityClass</a>, or <a class=\"xref\" href=\"system.diagnostics.processpriorityclass\" data-linktype=\"relative-path\">ProcessPriorityClass</a>. Based on the time elapsed or other boosts, the base priority level can be changed by the operating system when a process needs to be put ahead of others for access to the processor. In addition, you can set the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_PriorityBoostEnabled_\" data-linktype=\"relative-path\">PriorityBoostEnabled</a> to temporarily boost the priority level of threads that have been taken out of the wait state. The priority is reset when the process returns to the wait state.  </p>\n<p> The <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_BasePriority_\" data-linktype=\"relative-path\">BasePriority</a> property lets you view the starting priority that is assigned to a process. However, because it is read-only, you cannot use the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_BasePriority_\" data-linktype=\"relative-path\">BasePriority</a> property to set the priority of a process. To change the priority, use the PriorityClass property, which gets or sets the overall priority category for the process.  </p>\n<p> The priority class cannot be viewed using System Monitor. The following table shows the relationship between the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_BasePriority_\" data-linktype=\"relative-path\">BasePriority</a> and PriorityClass values.  </p>\n<table>\n<thead>\n<tr>\n<th>BasePriority</th>\n<th>PriorityClass</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>4</td>\n<td><a class=\"xref\" href=\"system.diagnostics.processpriorityclass\" data-linktype=\"relative-path\">ProcessPriorityClass</a></td>\n</tr>\n<tr>\n<td>8</td>\n<td><a class=\"xref\" href=\"system.diagnostics.processpriorityclass\" data-linktype=\"relative-path\">ProcessPriorityClass</a></td>\n</tr>\n<tr>\n<td>13</td>\n<td><a class=\"xref\" href=\"system.diagnostics.processpriorityclass\" data-linktype=\"relative-path\">ProcessPriorityClass</a></td>\n</tr>\n<tr>\n<td>24</td>\n<td><a class=\"xref\" href=\"system.diagnostics.processpriorityclass\" data-linktype=\"relative-path\">ProcessPriorityClass</a></td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example starts an instance of Notepad. The example then retrieves and displays various properties of the associated process. The example detects when the process exits, and displays the process&#39;s exit code.  </p>\n<pre><code class=\"lang-cpp\" name=\"Diag_Process_MemoryProperties64#1\">#using &lt;system.dll&gt;\n\nusing namespace System;\nusing namespace System::Diagnostics;\nint main()\n{\n   \n   // Define variables to track the peak\n   // memory usage of the process.\n   _int64 peakPagedMem = 0,peakWorkingSet = 0,peakVirtualMem = 0;\n   Process^ myProcess = nullptr;\n   try\n   {\n      \n      // Start the process.\n      myProcess = Process::Start( &quot;NotePad.exe&quot; );\n      \n      // Display the process statistics until\n      // the user closes the program.\n      do\n      {\n         if (  !myProcess-&gt;HasExited )\n         {\n            \n            // Refresh the current process property values.\n            myProcess-&gt;Refresh();\n            Console::WriteLine();\n            \n            // Display current process statistics.\n            Console::WriteLine( &quot;{0} -&quot;, myProcess );\n            Console::WriteLine( &quot;-------------------------------------&quot; );\n            Console::WriteLine( &quot;  physical memory usage: {0}&quot;, myProcess-&gt;WorkingSet64 );\n            Console::WriteLine( &quot;  base priority: {0}&quot;, myProcess-&gt;BasePriority );\n            Console::WriteLine( &quot;  priority class: {0}&quot;, myProcess-&gt;PriorityClass );\n            Console::WriteLine( &quot;  user processor time: {0}&quot;, myProcess-&gt;UserProcessorTime );\n            Console::WriteLine( &quot;  privileged processor time: {0}&quot;, myProcess-&gt;PrivilegedProcessorTime );\n            Console::WriteLine( &quot;  total processor time: {0}&quot;, myProcess-&gt;TotalProcessorTime );\n\t\t\tConsole::WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;, myProcess-&gt;PagedSystemMemorySize64);\n            Console::WriteLine(&quot;  PagedMemorySize64: {0}&quot;, myProcess-&gt;PagedMemorySize64);\n            \n            // Update the values for the overall peak memory statistics.\n            peakPagedMem = myProcess-&gt;PeakPagedMemorySize64;\n            peakVirtualMem = myProcess-&gt;PeakVirtualMemorySize64;\n            peakWorkingSet = myProcess-&gt;PeakWorkingSet64;\n            if ( myProcess-&gt;Responding )\n            {\n               Console::WriteLine( &quot;Status = Running&quot; );\n            }\n            else\n            {\n               Console::WriteLine( &quot;Status = Not Responding&quot; );\n            }\n         }\n      }\n      while (  !myProcess-&gt;WaitForExit( 1000 ) );\n      Console::WriteLine();\n      Console::WriteLine( &quot;Process exit code: {0}&quot;, myProcess-&gt;ExitCode );\n      \n      // Display peak memory statistics for the process.\n      Console::WriteLine( &quot;Peak physical memory usage of the process: {0}&quot;, peakWorkingSet );\n      Console::WriteLine( &quot;Peak paged memory usage of the process: {0}&quot;, peakPagedMem );\n      Console::WriteLine( &quot;Peak virtual memory usage of the process: {0}&quot;, peakVirtualMem );\n   }\n   finally\n   {\n      if ( myProcess != nullptr )\n      {\n         myProcess-&gt;Close();\n      }\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Diag_Process_MemoryProperties64#1\">using System;\nusing System.Diagnostics;\n\nnamespace ProcessSample\n{\n    class ProcessMonitorSample\n    {\n        public static void Main()\n        {\n\n            // Define variables to track the peak\n            // memory usage of the process.\n            long peakPagedMem = 0,\n                peakWorkingSet = 0,\n                peakVirtualMem = 0;\n\n            Process myProcess = null;\n\n            try\n            {\n                // Start the process.\n                myProcess = Process.Start(&quot;NotePad.exe&quot;);\n\n                // Display the process statistics until\n                // the user closes the program.\n                do\n                {\n                    if (!myProcess.HasExited)\n                    {\n                        // Refresh the current process property values.\n                        myProcess.Refresh();\n\n                        Console.WriteLine();\n\n                        // Display current process statistics.\n\n                        Console.WriteLine(&quot;{0} -&quot;, myProcess.ToString());\n                        Console.WriteLine(&quot;-------------------------------------&quot;);\n\n                        Console.WriteLine(&quot;  physical memory usage: {0}&quot;,\n                            myProcess.WorkingSet64);\n                        Console.WriteLine(&quot;  base priority: {0}&quot;,\n                            myProcess.BasePriority);\n                        Console.WriteLine(&quot;  priority class: {0}&quot;,\n                            myProcess.PriorityClass);\n                        Console.WriteLine(&quot;  user processor time: {0}&quot;,\n                            myProcess.UserProcessorTime);\n                        Console.WriteLine(&quot;  privileged processor time: {0}&quot;,\n                            myProcess.PrivilegedProcessorTime);\n                        Console.WriteLine(&quot;  total processor time: {0}&quot;,\n                            myProcess.TotalProcessorTime);\n                        Console.WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;,\n                            myProcess.PagedSystemMemorySize64);\n                        Console.WriteLine(&quot;  PagedMemorySize64: {0}&quot;,\n                           myProcess.PagedMemorySize64);\n\n                        // Update the values for the overall peak memory statistics.\n                        peakPagedMem = myProcess.PeakPagedMemorySize64;\n                        peakVirtualMem = myProcess.PeakVirtualMemorySize64;\n                        peakWorkingSet = myProcess.PeakWorkingSet64;\n\n                        if (myProcess.Responding)\n                        {\n                            Console.WriteLine(&quot;Status = Running&quot;);\n                        }\n                        else\n                        {\n                            Console.WriteLine(&quot;Status = Not Responding&quot;);\n                        }\n                    }\n                }\n                while (!myProcess.WaitForExit(1000));\n\n\n                Console.WriteLine();\n                Console.WriteLine(&quot;Process exit code: {0}&quot;,\n                    myProcess.ExitCode);\n\n                // Display peak memory statistics for the process.\n                Console.WriteLine(&quot;Peak physical memory usage of the process: {0}&quot;,\n                    peakWorkingSet);\n                Console.WriteLine(&quot;Peak paged memory usage of the process: {0}&quot;,\n                    peakPagedMem);\n                Console.WriteLine(&quot;Peak virtual memory usage of the process: {0}&quot;,\n                    peakVirtualMem);\n\n            }\n            finally\n            {\n                if (myProcess != null)\n                {\n                    myProcess.Close();\n                }\n            }\n        }\n\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Diag_Process_MemoryProperties64#1\">Imports System\nImports System.Diagnostics\n\nNamespace ProcessSample\n    Class ProcessMonitorSample\n\n        Public Shared Sub Main()\n\n            &#39; Define variables to track the peak\n            &#39; memory usage of the process.\n            Dim peakPagedMem As Long = 0\n            Dim peakWorkingSet As Long = 0\n            Dim peakVirtualMem As Long = 0\n\n            Dim myProcess As Process = Nothing\n\n            Try\n\n                &#39; Start the process.\n                myProcess = Process.Start(&quot;NotePad.exe&quot;)\n\n                &#39; Display process statistics until\n                &#39; the user closes the program.\n                Do\n\n                    If Not myProcess.HasExited Then\n\n                        &#39; Refresh the current process property values.\n                        myProcess.Refresh()\n\n                        Console.WriteLine()\n\n                        &#39; Display current process statistics.\n\n                        Console.WriteLine(&quot;{0} -&quot;, myProcess.ToString())\n                        Console.WriteLine(&quot;-------------------------------------&quot;)\n\n                        Console.WriteLine(&quot;  physical memory usage: {0}&quot;, _\n                             myProcess.WorkingSet64)\n                        Console.WriteLine(&quot;  base priority: {0}&quot;, _\n                             myProcess.BasePriority)\n                        Console.WriteLine(&quot;  priority class: {0}&quot;, _\n                             myProcess.PriorityClass)\n                        Console.WriteLine(&quot;  user processor time: {0}&quot;, _\n                             myProcess.UserProcessorTime)\n                        Console.WriteLine(&quot;  privileged processor time: {0}&quot;, _\n                             myProcess.PrivilegedProcessorTime)\n                        Console.WriteLine(&quot;  total processor time: {0}&quot;, _\n                             myProcess.TotalProcessorTime)\n                        Console.WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;, _\n                            myProcess.PagedSystemMemorySize64)\n                        Console.WriteLine(&quot;  PagedMemorySize64: {0}&quot;, _\n                           myProcess.PagedMemorySize64)\n\n                        &#39; Update the values for the overall peak memory statistics.\n                        peakPagedMem = myProcess.PeakPagedMemorySize64\n                        peakVirtualMem = myProcess.PeakVirtualMemorySize64\n                        peakWorkingSet = myProcess.PeakWorkingSet64\n\n                        If myProcess.Responding Then\n                            Console.WriteLine(&quot;Status = Running&quot;)\n                        Else\n                            Console.WriteLine(&quot;Status = Not Responding&quot;)\n                        End If\n                    End If\n                Loop While Not myProcess.WaitForExit(1000)\n\n                Console.WriteLine()\n                Console.WriteLine(&quot;Process exit code: {0}&quot;, myProcess.ExitCode)\n\n                &#39; Display peak memory statistics for the process.\n                Console.WriteLine(&quot;Peak physical memory usage of the process: {0}&quot;, _\n                    peakWorkingSet)\n                Console.WriteLine(&quot;Peak paged memory usage of the process: {0}&quot;, _\n                    peakPagedMem)\n                Console.WriteLine(&quot;Peak virtual memory usage of the process: {0}&quot;, _\n                    peakVirtualMem)\n\n            Finally\n                If Not myProcess Is Nothing Then\n                    myProcess.Close()\n                End If\n            End Try\n        End Sub &#39;Main\n    End Class\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_PrivateMemorySize\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_PrivateMemorySize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PrivateMemorySize</div>        \r\n          </div>\r\n    \r\n            <p>Gets the amount of private memory, in bytes, allocated for the associated process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int PrivateMemorySize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of bytes allocated by the associated process that cannot be shared with other processes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_PrivateMemorySize64\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_PrivateMemorySize64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PrivateMemorySize64</div>        \r\n          </div>\r\n    \r\n            <p>Gets the amount of private memory, in bytes, allocated for the associated process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public long PrivateMemorySize64 { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The amount of memory, in bytes, allocated for the associated process that cannot be shared with other processes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value returned by this property represents the current size of memory used by the process, in bytes, that cannot be shared with other processes.  </p>\n<p> This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors. The property value is equivalent to the <strong>Private Bytes</strong> performance counter for the process.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example starts an instance of the Notepad application. The example then retrieves and displays various properties of the associated process. The example detects when the process exits, and displays its exit code and peak memory statistics.  </p>\n<pre><code class=\"lang-cpp\" name=\"Diag_Process_MemoryProperties64#1\">#using &lt;system.dll&gt;\n\nusing namespace System;\nusing namespace System::Diagnostics;\nint main()\n{\n   \n   // Define variables to track the peak\n   // memory usage of the process.\n   _int64 peakPagedMem = 0,peakWorkingSet = 0,peakVirtualMem = 0;\n   Process^ myProcess = nullptr;\n   try\n   {\n      \n      // Start the process.\n      myProcess = Process::Start( &quot;NotePad.exe&quot; );\n      \n      // Display the process statistics until\n      // the user closes the program.\n      do\n      {\n         if (  !myProcess-&gt;HasExited )\n         {\n            \n            // Refresh the current process property values.\n            myProcess-&gt;Refresh();\n            Console::WriteLine();\n            \n            // Display current process statistics.\n            Console::WriteLine( &quot;{0} -&quot;, myProcess );\n            Console::WriteLine( &quot;-------------------------------------&quot; );\n            Console::WriteLine( &quot;  physical memory usage: {0}&quot;, myProcess-&gt;WorkingSet64 );\n            Console::WriteLine( &quot;  base priority: {0}&quot;, myProcess-&gt;BasePriority );\n            Console::WriteLine( &quot;  priority class: {0}&quot;, myProcess-&gt;PriorityClass );\n            Console::WriteLine( &quot;  user processor time: {0}&quot;, myProcess-&gt;UserProcessorTime );\n            Console::WriteLine( &quot;  privileged processor time: {0}&quot;, myProcess-&gt;PrivilegedProcessorTime );\n            Console::WriteLine( &quot;  total processor time: {0}&quot;, myProcess-&gt;TotalProcessorTime );\n\t\t\tConsole::WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;, myProcess-&gt;PagedSystemMemorySize64);\n            Console::WriteLine(&quot;  PagedMemorySize64: {0}&quot;, myProcess-&gt;PagedMemorySize64);\n            \n            // Update the values for the overall peak memory statistics.\n            peakPagedMem = myProcess-&gt;PeakPagedMemorySize64;\n            peakVirtualMem = myProcess-&gt;PeakVirtualMemorySize64;\n            peakWorkingSet = myProcess-&gt;PeakWorkingSet64;\n            if ( myProcess-&gt;Responding )\n            {\n               Console::WriteLine( &quot;Status = Running&quot; );\n            }\n            else\n            {\n               Console::WriteLine( &quot;Status = Not Responding&quot; );\n            }\n         }\n      }\n      while (  !myProcess-&gt;WaitForExit( 1000 ) );\n      Console::WriteLine();\n      Console::WriteLine( &quot;Process exit code: {0}&quot;, myProcess-&gt;ExitCode );\n      \n      // Display peak memory statistics for the process.\n      Console::WriteLine( &quot;Peak physical memory usage of the process: {0}&quot;, peakWorkingSet );\n      Console::WriteLine( &quot;Peak paged memory usage of the process: {0}&quot;, peakPagedMem );\n      Console::WriteLine( &quot;Peak virtual memory usage of the process: {0}&quot;, peakVirtualMem );\n   }\n   finally\n   {\n      if ( myProcess != nullptr )\n      {\n         myProcess-&gt;Close();\n      }\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Diag_Process_MemoryProperties64#1\">using System;\nusing System.Diagnostics;\n\nnamespace ProcessSample\n{\n    class ProcessMonitorSample\n    {\n        public static void Main()\n        {\n\n            // Define variables to track the peak\n            // memory usage of the process.\n            long peakPagedMem = 0,\n                peakWorkingSet = 0,\n                peakVirtualMem = 0;\n\n            Process myProcess = null;\n\n            try\n            {\n                // Start the process.\n                myProcess = Process.Start(&quot;NotePad.exe&quot;);\n\n                // Display the process statistics until\n                // the user closes the program.\n                do\n                {\n                    if (!myProcess.HasExited)\n                    {\n                        // Refresh the current process property values.\n                        myProcess.Refresh();\n\n                        Console.WriteLine();\n\n                        // Display current process statistics.\n\n                        Console.WriteLine(&quot;{0} -&quot;, myProcess.ToString());\n                        Console.WriteLine(&quot;-------------------------------------&quot;);\n\n                        Console.WriteLine(&quot;  physical memory usage: {0}&quot;,\n                            myProcess.WorkingSet64);\n                        Console.WriteLine(&quot;  base priority: {0}&quot;,\n                            myProcess.BasePriority);\n                        Console.WriteLine(&quot;  priority class: {0}&quot;,\n                            myProcess.PriorityClass);\n                        Console.WriteLine(&quot;  user processor time: {0}&quot;,\n                            myProcess.UserProcessorTime);\n                        Console.WriteLine(&quot;  privileged processor time: {0}&quot;,\n                            myProcess.PrivilegedProcessorTime);\n                        Console.WriteLine(&quot;  total processor time: {0}&quot;,\n                            myProcess.TotalProcessorTime);\n                        Console.WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;,\n                            myProcess.PagedSystemMemorySize64);\n                        Console.WriteLine(&quot;  PagedMemorySize64: {0}&quot;,\n                           myProcess.PagedMemorySize64);\n\n                        // Update the values for the overall peak memory statistics.\n                        peakPagedMem = myProcess.PeakPagedMemorySize64;\n                        peakVirtualMem = myProcess.PeakVirtualMemorySize64;\n                        peakWorkingSet = myProcess.PeakWorkingSet64;\n\n                        if (myProcess.Responding)\n                        {\n                            Console.WriteLine(&quot;Status = Running&quot;);\n                        }\n                        else\n                        {\n                            Console.WriteLine(&quot;Status = Not Responding&quot;);\n                        }\n                    }\n                }\n                while (!myProcess.WaitForExit(1000));\n\n\n                Console.WriteLine();\n                Console.WriteLine(&quot;Process exit code: {0}&quot;,\n                    myProcess.ExitCode);\n\n                // Display peak memory statistics for the process.\n                Console.WriteLine(&quot;Peak physical memory usage of the process: {0}&quot;,\n                    peakWorkingSet);\n                Console.WriteLine(&quot;Peak paged memory usage of the process: {0}&quot;,\n                    peakPagedMem);\n                Console.WriteLine(&quot;Peak virtual memory usage of the process: {0}&quot;,\n                    peakVirtualMem);\n\n            }\n            finally\n            {\n                if (myProcess != null)\n                {\n                    myProcess.Close();\n                }\n            }\n        }\n\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Diag_Process_MemoryProperties64#1\">Imports System\nImports System.Diagnostics\n\nNamespace ProcessSample\n    Class ProcessMonitorSample\n\n        Public Shared Sub Main()\n\n            &#39; Define variables to track the peak\n            &#39; memory usage of the process.\n            Dim peakPagedMem As Long = 0\n            Dim peakWorkingSet As Long = 0\n            Dim peakVirtualMem As Long = 0\n\n            Dim myProcess As Process = Nothing\n\n            Try\n\n                &#39; Start the process.\n                myProcess = Process.Start(&quot;NotePad.exe&quot;)\n\n                &#39; Display process statistics until\n                &#39; the user closes the program.\n                Do\n\n                    If Not myProcess.HasExited Then\n\n                        &#39; Refresh the current process property values.\n                        myProcess.Refresh()\n\n                        Console.WriteLine()\n\n                        &#39; Display current process statistics.\n\n                        Console.WriteLine(&quot;{0} -&quot;, myProcess.ToString())\n                        Console.WriteLine(&quot;-------------------------------------&quot;)\n\n                        Console.WriteLine(&quot;  physical memory usage: {0}&quot;, _\n                             myProcess.WorkingSet64)\n                        Console.WriteLine(&quot;  base priority: {0}&quot;, _\n                             myProcess.BasePriority)\n                        Console.WriteLine(&quot;  priority class: {0}&quot;, _\n                             myProcess.PriorityClass)\n                        Console.WriteLine(&quot;  user processor time: {0}&quot;, _\n                             myProcess.UserProcessorTime)\n                        Console.WriteLine(&quot;  privileged processor time: {0}&quot;, _\n                             myProcess.PrivilegedProcessorTime)\n                        Console.WriteLine(&quot;  total processor time: {0}&quot;, _\n                             myProcess.TotalProcessorTime)\n                        Console.WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;, _\n                            myProcess.PagedSystemMemorySize64)\n                        Console.WriteLine(&quot;  PagedMemorySize64: {0}&quot;, _\n                           myProcess.PagedMemorySize64)\n\n                        &#39; Update the values for the overall peak memory statistics.\n                        peakPagedMem = myProcess.PeakPagedMemorySize64\n                        peakVirtualMem = myProcess.PeakVirtualMemorySize64\n                        peakWorkingSet = myProcess.PeakWorkingSet64\n\n                        If myProcess.Responding Then\n                            Console.WriteLine(&quot;Status = Running&quot;)\n                        Else\n                            Console.WriteLine(&quot;Status = Not Responding&quot;)\n                        End If\n                    End If\n                Loop While Not myProcess.WaitForExit(1000)\n\n                Console.WriteLine()\n                Console.WriteLine(&quot;Process exit code: {0}&quot;, myProcess.ExitCode)\n\n                &#39; Display peak memory statistics for the process.\n                Console.WriteLine(&quot;Peak physical memory usage of the process: {0}&quot;, _\n                    peakWorkingSet)\n                Console.WriteLine(&quot;Peak paged memory usage of the process: {0}&quot;, _\n                    peakPagedMem)\n                Console.WriteLine(&quot;Peak virtual memory usage of the process: {0}&quot;, _\n                    peakVirtualMem)\n\n            Finally\n                If Not myProcess Is Nothing Then\n                    myProcess.Close()\n                End If\n            End Try\n        End Sub &#39;Main\n    End Class\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_PrivilegedProcessorTime\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_PrivilegedProcessorTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PrivilegedProcessorTime</div>        \r\n          </div>\r\n    \r\n            <p>Gets the privileged processor time for this process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TimeSpan PrivilegedProcessorTime { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that indicates the amount of time that the process has spent running code inside the operating system core.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>You are attempting to access the PrivilegedProcessorTime property for a process that is running on a remote computer. This property is available only for processes that are running on the local computer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example starts an instance of Notepad. The example then retrieves and displays various properties of the associated process. The example detects when the process exits, and displays the process&#39;s exit code.  </p>\n<pre><code class=\"lang-cpp\" name=\"Diag_Process_MemoryProperties64#1\">#using &lt;system.dll&gt;\n\nusing namespace System;\nusing namespace System::Diagnostics;\nint main()\n{\n   \n   // Define variables to track the peak\n   // memory usage of the process.\n   _int64 peakPagedMem = 0,peakWorkingSet = 0,peakVirtualMem = 0;\n   Process^ myProcess = nullptr;\n   try\n   {\n      \n      // Start the process.\n      myProcess = Process::Start( &quot;NotePad.exe&quot; );\n      \n      // Display the process statistics until\n      // the user closes the program.\n      do\n      {\n         if (  !myProcess-&gt;HasExited )\n         {\n            \n            // Refresh the current process property values.\n            myProcess-&gt;Refresh();\n            Console::WriteLine();\n            \n            // Display current process statistics.\n            Console::WriteLine( &quot;{0} -&quot;, myProcess );\n            Console::WriteLine( &quot;-------------------------------------&quot; );\n            Console::WriteLine( &quot;  physical memory usage: {0}&quot;, myProcess-&gt;WorkingSet64 );\n            Console::WriteLine( &quot;  base priority: {0}&quot;, myProcess-&gt;BasePriority );\n            Console::WriteLine( &quot;  priority class: {0}&quot;, myProcess-&gt;PriorityClass );\n            Console::WriteLine( &quot;  user processor time: {0}&quot;, myProcess-&gt;UserProcessorTime );\n            Console::WriteLine( &quot;  privileged processor time: {0}&quot;, myProcess-&gt;PrivilegedProcessorTime );\n            Console::WriteLine( &quot;  total processor time: {0}&quot;, myProcess-&gt;TotalProcessorTime );\n\t\t\tConsole::WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;, myProcess-&gt;PagedSystemMemorySize64);\n            Console::WriteLine(&quot;  PagedMemorySize64: {0}&quot;, myProcess-&gt;PagedMemorySize64);\n            \n            // Update the values for the overall peak memory statistics.\n            peakPagedMem = myProcess-&gt;PeakPagedMemorySize64;\n            peakVirtualMem = myProcess-&gt;PeakVirtualMemorySize64;\n            peakWorkingSet = myProcess-&gt;PeakWorkingSet64;\n            if ( myProcess-&gt;Responding )\n            {\n               Console::WriteLine( &quot;Status = Running&quot; );\n            }\n            else\n            {\n               Console::WriteLine( &quot;Status = Not Responding&quot; );\n            }\n         }\n      }\n      while (  !myProcess-&gt;WaitForExit( 1000 ) );\n      Console::WriteLine();\n      Console::WriteLine( &quot;Process exit code: {0}&quot;, myProcess-&gt;ExitCode );\n      \n      // Display peak memory statistics for the process.\n      Console::WriteLine( &quot;Peak physical memory usage of the process: {0}&quot;, peakWorkingSet );\n      Console::WriteLine( &quot;Peak paged memory usage of the process: {0}&quot;, peakPagedMem );\n      Console::WriteLine( &quot;Peak virtual memory usage of the process: {0}&quot;, peakVirtualMem );\n   }\n   finally\n   {\n      if ( myProcess != nullptr )\n      {\n         myProcess-&gt;Close();\n      }\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Diag_Process_MemoryProperties64#1\">using System;\nusing System.Diagnostics;\n\nnamespace ProcessSample\n{\n    class ProcessMonitorSample\n    {\n        public static void Main()\n        {\n\n            // Define variables to track the peak\n            // memory usage of the process.\n            long peakPagedMem = 0,\n                peakWorkingSet = 0,\n                peakVirtualMem = 0;\n\n            Process myProcess = null;\n\n            try\n            {\n                // Start the process.\n                myProcess = Process.Start(&quot;NotePad.exe&quot;);\n\n                // Display the process statistics until\n                // the user closes the program.\n                do\n                {\n                    if (!myProcess.HasExited)\n                    {\n                        // Refresh the current process property values.\n                        myProcess.Refresh();\n\n                        Console.WriteLine();\n\n                        // Display current process statistics.\n\n                        Console.WriteLine(&quot;{0} -&quot;, myProcess.ToString());\n                        Console.WriteLine(&quot;-------------------------------------&quot;);\n\n                        Console.WriteLine(&quot;  physical memory usage: {0}&quot;,\n                            myProcess.WorkingSet64);\n                        Console.WriteLine(&quot;  base priority: {0}&quot;,\n                            myProcess.BasePriority);\n                        Console.WriteLine(&quot;  priority class: {0}&quot;,\n                            myProcess.PriorityClass);\n                        Console.WriteLine(&quot;  user processor time: {0}&quot;,\n                            myProcess.UserProcessorTime);\n                        Console.WriteLine(&quot;  privileged processor time: {0}&quot;,\n                            myProcess.PrivilegedProcessorTime);\n                        Console.WriteLine(&quot;  total processor time: {0}&quot;,\n                            myProcess.TotalProcessorTime);\n                        Console.WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;,\n                            myProcess.PagedSystemMemorySize64);\n                        Console.WriteLine(&quot;  PagedMemorySize64: {0}&quot;,\n                           myProcess.PagedMemorySize64);\n\n                        // Update the values for the overall peak memory statistics.\n                        peakPagedMem = myProcess.PeakPagedMemorySize64;\n                        peakVirtualMem = myProcess.PeakVirtualMemorySize64;\n                        peakWorkingSet = myProcess.PeakWorkingSet64;\n\n                        if (myProcess.Responding)\n                        {\n                            Console.WriteLine(&quot;Status = Running&quot;);\n                        }\n                        else\n                        {\n                            Console.WriteLine(&quot;Status = Not Responding&quot;);\n                        }\n                    }\n                }\n                while (!myProcess.WaitForExit(1000));\n\n\n                Console.WriteLine();\n                Console.WriteLine(&quot;Process exit code: {0}&quot;,\n                    myProcess.ExitCode);\n\n                // Display peak memory statistics for the process.\n                Console.WriteLine(&quot;Peak physical memory usage of the process: {0}&quot;,\n                    peakWorkingSet);\n                Console.WriteLine(&quot;Peak paged memory usage of the process: {0}&quot;,\n                    peakPagedMem);\n                Console.WriteLine(&quot;Peak virtual memory usage of the process: {0}&quot;,\n                    peakVirtualMem);\n\n            }\n            finally\n            {\n                if (myProcess != null)\n                {\n                    myProcess.Close();\n                }\n            }\n        }\n\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Diag_Process_MemoryProperties64#1\">Imports System\nImports System.Diagnostics\n\nNamespace ProcessSample\n    Class ProcessMonitorSample\n\n        Public Shared Sub Main()\n\n            &#39; Define variables to track the peak\n            &#39; memory usage of the process.\n            Dim peakPagedMem As Long = 0\n            Dim peakWorkingSet As Long = 0\n            Dim peakVirtualMem As Long = 0\n\n            Dim myProcess As Process = Nothing\n\n            Try\n\n                &#39; Start the process.\n                myProcess = Process.Start(&quot;NotePad.exe&quot;)\n\n                &#39; Display process statistics until\n                &#39; the user closes the program.\n                Do\n\n                    If Not myProcess.HasExited Then\n\n                        &#39; Refresh the current process property values.\n                        myProcess.Refresh()\n\n                        Console.WriteLine()\n\n                        &#39; Display current process statistics.\n\n                        Console.WriteLine(&quot;{0} -&quot;, myProcess.ToString())\n                        Console.WriteLine(&quot;-------------------------------------&quot;)\n\n                        Console.WriteLine(&quot;  physical memory usage: {0}&quot;, _\n                             myProcess.WorkingSet64)\n                        Console.WriteLine(&quot;  base priority: {0}&quot;, _\n                             myProcess.BasePriority)\n                        Console.WriteLine(&quot;  priority class: {0}&quot;, _\n                             myProcess.PriorityClass)\n                        Console.WriteLine(&quot;  user processor time: {0}&quot;, _\n                             myProcess.UserProcessorTime)\n                        Console.WriteLine(&quot;  privileged processor time: {0}&quot;, _\n                             myProcess.PrivilegedProcessorTime)\n                        Console.WriteLine(&quot;  total processor time: {0}&quot;, _\n                             myProcess.TotalProcessorTime)\n                        Console.WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;, _\n                            myProcess.PagedSystemMemorySize64)\n                        Console.WriteLine(&quot;  PagedMemorySize64: {0}&quot;, _\n                           myProcess.PagedMemorySize64)\n\n                        &#39; Update the values for the overall peak memory statistics.\n                        peakPagedMem = myProcess.PeakPagedMemorySize64\n                        peakVirtualMem = myProcess.PeakVirtualMemorySize64\n                        peakWorkingSet = myProcess.PeakWorkingSet64\n\n                        If myProcess.Responding Then\n                            Console.WriteLine(&quot;Status = Running&quot;)\n                        Else\n                            Console.WriteLine(&quot;Status = Not Responding&quot;)\n                        End If\n                    End If\n                Loop While Not myProcess.WaitForExit(1000)\n\n                Console.WriteLine()\n                Console.WriteLine(&quot;Process exit code: {0}&quot;, myProcess.ExitCode)\n\n                &#39; Display peak memory statistics for the process.\n                Console.WriteLine(&quot;Peak physical memory usage of the process: {0}&quot;, _\n                    peakWorkingSet)\n                Console.WriteLine(&quot;Peak paged memory usage of the process: {0}&quot;, _\n                    peakPagedMem)\n                Console.WriteLine(&quot;Peak virtual memory usage of the process: {0}&quot;, _\n                    peakVirtualMem)\n\n            Finally\n                If Not myProcess Is Nothing Then\n                    myProcess.Close()\n                End If\n            End Try\n        End Sub &#39;Main\n    End Class\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_ProcessName\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_ProcessName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ProcessName</div>        \r\n          </div>\r\n    \r\n            <p>Gets the name of the process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ProcessName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name that the system uses to identify the process to the user.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The process does not have an identifier, or no process is associated with the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a>.  </p>\n<p> -or-  </p>\n<p> The associated process has exited.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The platform is Windows 98 or Windows Millennium Edition (Windows Me); set <span class=\"xref\">stem.Diagnostics.ProcessStartInfo.UseShellExecute*</span> to <code>false</code> to access this property on Windows 98 and Windows Me.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The process is not on this computer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ProcessName property holds an executable file name, such as Outlook, that does not include the .exe extension or the path. It is helpful for getting and manipulating all the processes that are associated with the same executable file.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> On <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/win2kfamily-md.md&quot; -->Windows 2000<!--END INCLUDE --> operating systems, the ProcessName property may be truncated to 15 characters if the process module information cannot be obtained.  </p>\n</div>\n<p> You can call <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_GetProcessesByName_\" data-linktype=\"relative-path\">GetProcessesByName</a>, passing it an executable file name, to retrieve an array that contains every running instance on the specified computer. You can use this array, for example, to shut down all the running instances of the executable file.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_ProcessorAffinity\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_ProcessorAffinity_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ProcessorAffinity</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the processors on which the threads in this process can be scheduled to run.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IntPtr ProcessorAffinity { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>A bitmask representing the processors that the threads in the associated process can run on. The default depends on the number of processors on the computer. The default value is 2 <sup>n</sup> -1, where n is the number of processors.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.win32exception\" data-linktype=\"relative-path\">Win32Exception</a></div>\r\n                  </div>\r\n                  <p>ProcessorAffinity information could not be set or retrieved from the associated process resource.  </p>\n<p> -or-  </p>\n<p> The process identifier or process handle is zero. (The process has not been started.)</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>You are attempting to access the ProcessorAffinity property for a process that is running on a remote computer. This property is available only for processes that are running on the local computer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The process <span class=\"xref\">stem.Diagnostics.Process.Id*</span> was not available.  </p>\n<p> -or-  </p>\n<p> The process has exited.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In Windows 2000 and later, a thread in a process can migrate from processor to processor, with each migration reloading the processor cache. Under heavy system loads, specifying which processor should run a specific thread can improve performance by reducing the number of times the processor cache is reloaded. The association between a processor and a thread is called the processor affinity.  </p>\n<p> Each processor is represented as a bit. Bit 0 is processor one, bit 1 is processor two, and so forth. If you set a bit to the value 1, the corresponding processor is selected for thread assignment. When you set the ProcessorAffinity value to zero, the operating system&#39;s scheduling algorithms set the thread&#39;s affinity. When the ProcessorAffinity value is set to any nonzero value, the value is interpreted as a bitmask that specifies those processors eligible for selection.  </p>\n<p> The following table shows a selection of ProcessorAffinity values for an eight-processor system.  </p>\n<table>\n<thead>\n<tr>\n<th>Bitmask</th>\n<th>Binary value</th>\n<th>Eligible processors</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0x0001</td>\n<td>00000000 00000001</td>\n<td>1</td>\n</tr>\n<tr>\n<td>0x0003</td>\n<td>00000000 00000011</td>\n<td>1 and 2</td>\n</tr>\n<tr>\n<td>0x0007</td>\n<td>00000000 00000111</td>\n<td>1, 2 and 3</td>\n</tr>\n<tr>\n<td>0x0009</td>\n<td>00000000 00001001</td>\n<td>1 and 4</td>\n</tr>\n<tr>\n<td>0x007F</td>\n<td>00000000 01111111</td>\n<td>1, 2, 3, 4, 5, 6 and 7</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_Responding\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_Responding_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Responding</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the user interface of the process is responding.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Responding { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the user interface of the associated process is responding to the system; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The platform is Windows 98 or Windows Millennium Edition (Windows Me); set <span class=\"xref\">stem.Diagnostics.ProcessStartInfo.UseShellExecute*</span> to <code>false</code> to access this property on Windows 98 and Windows Me.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>There is no process associated with this <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>You are attempting to access the Responding property for a process that is running on a remote computer. This property is available only for processes that are running on the local computer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If a process has a user interface, the Responding property contacts the user interface to determine whether the process is responding to user input. If the interface does not respond immediately, the Responding property returns <code>false</code>. Use this property to determine whether the interface of the associated process has stopped responding.  </p>\n<p> If the process does not have a <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_MainWindowHandle_\" data-linktype=\"relative-path\">MainWindowHandle</a>, this property returns <code>true</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example starts an instance of Notepad. The example then retrieves and displays various properties of the associated process. The example detects when the process exits, and displays the process&#39;s exit code.  </p>\n<pre><code class=\"lang-cpp\" name=\"Diag_Process_MemoryProperties64#1\">#using &lt;system.dll&gt;\n\nusing namespace System;\nusing namespace System::Diagnostics;\nint main()\n{\n   \n   // Define variables to track the peak\n   // memory usage of the process.\n   _int64 peakPagedMem = 0,peakWorkingSet = 0,peakVirtualMem = 0;\n   Process^ myProcess = nullptr;\n   try\n   {\n      \n      // Start the process.\n      myProcess = Process::Start( &quot;NotePad.exe&quot; );\n      \n      // Display the process statistics until\n      // the user closes the program.\n      do\n      {\n         if (  !myProcess-&gt;HasExited )\n         {\n            \n            // Refresh the current process property values.\n            myProcess-&gt;Refresh();\n            Console::WriteLine();\n            \n            // Display current process statistics.\n            Console::WriteLine( &quot;{0} -&quot;, myProcess );\n            Console::WriteLine( &quot;-------------------------------------&quot; );\n            Console::WriteLine( &quot;  physical memory usage: {0}&quot;, myProcess-&gt;WorkingSet64 );\n            Console::WriteLine( &quot;  base priority: {0}&quot;, myProcess-&gt;BasePriority );\n            Console::WriteLine( &quot;  priority class: {0}&quot;, myProcess-&gt;PriorityClass );\n            Console::WriteLine( &quot;  user processor time: {0}&quot;, myProcess-&gt;UserProcessorTime );\n            Console::WriteLine( &quot;  privileged processor time: {0}&quot;, myProcess-&gt;PrivilegedProcessorTime );\n            Console::WriteLine( &quot;  total processor time: {0}&quot;, myProcess-&gt;TotalProcessorTime );\n\t\t\tConsole::WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;, myProcess-&gt;PagedSystemMemorySize64);\n            Console::WriteLine(&quot;  PagedMemorySize64: {0}&quot;, myProcess-&gt;PagedMemorySize64);\n            \n            // Update the values for the overall peak memory statistics.\n            peakPagedMem = myProcess-&gt;PeakPagedMemorySize64;\n            peakVirtualMem = myProcess-&gt;PeakVirtualMemorySize64;\n            peakWorkingSet = myProcess-&gt;PeakWorkingSet64;\n            if ( myProcess-&gt;Responding )\n            {\n               Console::WriteLine( &quot;Status = Running&quot; );\n            }\n            else\n            {\n               Console::WriteLine( &quot;Status = Not Responding&quot; );\n            }\n         }\n      }\n      while (  !myProcess-&gt;WaitForExit( 1000 ) );\n      Console::WriteLine();\n      Console::WriteLine( &quot;Process exit code: {0}&quot;, myProcess-&gt;ExitCode );\n      \n      // Display peak memory statistics for the process.\n      Console::WriteLine( &quot;Peak physical memory usage of the process: {0}&quot;, peakWorkingSet );\n      Console::WriteLine( &quot;Peak paged memory usage of the process: {0}&quot;, peakPagedMem );\n      Console::WriteLine( &quot;Peak virtual memory usage of the process: {0}&quot;, peakVirtualMem );\n   }\n   finally\n   {\n      if ( myProcess != nullptr )\n      {\n         myProcess-&gt;Close();\n      }\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Diag_Process_MemoryProperties64#1\">using System;\nusing System.Diagnostics;\n\nnamespace ProcessSample\n{\n    class ProcessMonitorSample\n    {\n        public static void Main()\n        {\n\n            // Define variables to track the peak\n            // memory usage of the process.\n            long peakPagedMem = 0,\n                peakWorkingSet = 0,\n                peakVirtualMem = 0;\n\n            Process myProcess = null;\n\n            try\n            {\n                // Start the process.\n                myProcess = Process.Start(&quot;NotePad.exe&quot;);\n\n                // Display the process statistics until\n                // the user closes the program.\n                do\n                {\n                    if (!myProcess.HasExited)\n                    {\n                        // Refresh the current process property values.\n                        myProcess.Refresh();\n\n                        Console.WriteLine();\n\n                        // Display current process statistics.\n\n                        Console.WriteLine(&quot;{0} -&quot;, myProcess.ToString());\n                        Console.WriteLine(&quot;-------------------------------------&quot;);\n\n                        Console.WriteLine(&quot;  physical memory usage: {0}&quot;,\n                            myProcess.WorkingSet64);\n                        Console.WriteLine(&quot;  base priority: {0}&quot;,\n                            myProcess.BasePriority);\n                        Console.WriteLine(&quot;  priority class: {0}&quot;,\n                            myProcess.PriorityClass);\n                        Console.WriteLine(&quot;  user processor time: {0}&quot;,\n                            myProcess.UserProcessorTime);\n                        Console.WriteLine(&quot;  privileged processor time: {0}&quot;,\n                            myProcess.PrivilegedProcessorTime);\n                        Console.WriteLine(&quot;  total processor time: {0}&quot;,\n                            myProcess.TotalProcessorTime);\n                        Console.WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;,\n                            myProcess.PagedSystemMemorySize64);\n                        Console.WriteLine(&quot;  PagedMemorySize64: {0}&quot;,\n                           myProcess.PagedMemorySize64);\n\n                        // Update the values for the overall peak memory statistics.\n                        peakPagedMem = myProcess.PeakPagedMemorySize64;\n                        peakVirtualMem = myProcess.PeakVirtualMemorySize64;\n                        peakWorkingSet = myProcess.PeakWorkingSet64;\n\n                        if (myProcess.Responding)\n                        {\n                            Console.WriteLine(&quot;Status = Running&quot;);\n                        }\n                        else\n                        {\n                            Console.WriteLine(&quot;Status = Not Responding&quot;);\n                        }\n                    }\n                }\n                while (!myProcess.WaitForExit(1000));\n\n\n                Console.WriteLine();\n                Console.WriteLine(&quot;Process exit code: {0}&quot;,\n                    myProcess.ExitCode);\n\n                // Display peak memory statistics for the process.\n                Console.WriteLine(&quot;Peak physical memory usage of the process: {0}&quot;,\n                    peakWorkingSet);\n                Console.WriteLine(&quot;Peak paged memory usage of the process: {0}&quot;,\n                    peakPagedMem);\n                Console.WriteLine(&quot;Peak virtual memory usage of the process: {0}&quot;,\n                    peakVirtualMem);\n\n            }\n            finally\n            {\n                if (myProcess != null)\n                {\n                    myProcess.Close();\n                }\n            }\n        }\n\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Diag_Process_MemoryProperties64#1\">Imports System\nImports System.Diagnostics\n\nNamespace ProcessSample\n    Class ProcessMonitorSample\n\n        Public Shared Sub Main()\n\n            &#39; Define variables to track the peak\n            &#39; memory usage of the process.\n            Dim peakPagedMem As Long = 0\n            Dim peakWorkingSet As Long = 0\n            Dim peakVirtualMem As Long = 0\n\n            Dim myProcess As Process = Nothing\n\n            Try\n\n                &#39; Start the process.\n                myProcess = Process.Start(&quot;NotePad.exe&quot;)\n\n                &#39; Display process statistics until\n                &#39; the user closes the program.\n                Do\n\n                    If Not myProcess.HasExited Then\n\n                        &#39; Refresh the current process property values.\n                        myProcess.Refresh()\n\n                        Console.WriteLine()\n\n                        &#39; Display current process statistics.\n\n                        Console.WriteLine(&quot;{0} -&quot;, myProcess.ToString())\n                        Console.WriteLine(&quot;-------------------------------------&quot;)\n\n                        Console.WriteLine(&quot;  physical memory usage: {0}&quot;, _\n                             myProcess.WorkingSet64)\n                        Console.WriteLine(&quot;  base priority: {0}&quot;, _\n                             myProcess.BasePriority)\n                        Console.WriteLine(&quot;  priority class: {0}&quot;, _\n                             myProcess.PriorityClass)\n                        Console.WriteLine(&quot;  user processor time: {0}&quot;, _\n                             myProcess.UserProcessorTime)\n                        Console.WriteLine(&quot;  privileged processor time: {0}&quot;, _\n                             myProcess.PrivilegedProcessorTime)\n                        Console.WriteLine(&quot;  total processor time: {0}&quot;, _\n                             myProcess.TotalProcessorTime)\n                        Console.WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;, _\n                            myProcess.PagedSystemMemorySize64)\n                        Console.WriteLine(&quot;  PagedMemorySize64: {0}&quot;, _\n                           myProcess.PagedMemorySize64)\n\n                        &#39; Update the values for the overall peak memory statistics.\n                        peakPagedMem = myProcess.PeakPagedMemorySize64\n                        peakVirtualMem = myProcess.PeakVirtualMemorySize64\n                        peakWorkingSet = myProcess.PeakWorkingSet64\n\n                        If myProcess.Responding Then\n                            Console.WriteLine(&quot;Status = Running&quot;)\n                        Else\n                            Console.WriteLine(&quot;Status = Not Responding&quot;)\n                        End If\n                    End If\n                Loop While Not myProcess.WaitForExit(1000)\n\n                Console.WriteLine()\n                Console.WriteLine(&quot;Process exit code: {0}&quot;, myProcess.ExitCode)\n\n                &#39; Display peak memory statistics for the process.\n                Console.WriteLine(&quot;Peak physical memory usage of the process: {0}&quot;, _\n                    peakWorkingSet)\n                Console.WriteLine(&quot;Peak paged memory usage of the process: {0}&quot;, _\n                    peakPagedMem)\n                Console.WriteLine(&quot;Peak virtual memory usage of the process: {0}&quot;, _\n                    peakVirtualMem)\n\n            Finally\n                If Not myProcess Is Nothing Then\n                    myProcess.Close()\n                End If\n            End Try\n        End Sub &#39;Main\n    End Class\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_SafeHandle\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_SafeHandle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SafeHandle</div>        \r\n          </div>\r\n    \r\n            <p>Gets the native handle to this process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Microsoft.Win32.SafeHandles.SafeProcessHandle SafeHandle { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.win32.safehandles.safeprocesshandle\" data-linktype=\"relative-path\">SafeProcessHandle</a></div>\r\n                  </div>\r\n                  <p>The native handle to this process.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The handle is only available if the calling component started the process.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_SessionId\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_SessionId_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SessionId</div>        \r\n          </div>\r\n    \r\n            <p>Gets the Terminal Services session identifier for the associated process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int SessionId { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The Terminal Services session identifier for the associated process.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a></div>\r\n                  </div>\r\n                  <p>There is no session associated with this process.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>There is no process associated with this session identifier.  </p>\n<p> -or-  </p>\n<p> The associated process is not on this machine.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The SessionId property is not supported on Windows 98.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The SessionId property identifies the session in which the application is currently running.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_StandardError\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_StandardError_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StandardError</div>        \r\n          </div>\r\n    \r\n            <p>Gets a stream used to read the error output of the application.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.IO.StreamReader StandardError { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.streamreader\" data-linktype=\"relative-path\">StreamReader</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.io.streamreader\" data-linktype=\"relative-path\">StreamReader</a> that can be used to read the standard error stream of the application.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The StandardError stream has not been defined for redirection; ensure <span class=\"xref\">stem.Diagnostics.ProcessStartInfo.RedirectStandardError*</span> is set to <code>true</code> and <span class=\"xref\">stem.Diagnostics.ProcessStartInfo.UseShellExecute*</span> is set to <code>false</code>.  </p>\n<p> - or -  </p>\n<p> The StandardError stream has been opened for asynchronous read operations with <span class=\"xref\">stem.Diagnostics.Process.BeginErrorReadLine*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When a <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> writes text to its standard error stream, that text is normally displayed on the console. By redirecting the StandardError stream, you can manipulate or suppress the error output of a process. For example, you can filter the text, format it differently, or write the output to both the console and a designated log file.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To use StandardError, you must set <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_UseShellExecute_\" data-linktype=\"relative-path\">UseShellExecute</a> to <code>false</code>, and you must set <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_RedirectStandardError_\" data-linktype=\"relative-path\">RedirectStandardError</a> to <code>true</code>. Otherwise, reading from the StandardError stream throws an exception.  </p>\n</div>\n<p> The redirected StandardError stream can be read synchronously or asynchronously. Methods such as <a class=\"xref\" href=\"system.io.streamreader#System_IO_StreamReader_Read_\" data-linktype=\"relative-path\">Read</a>, <a class=\"xref\" href=\"system.io.streamreader#System_IO_StreamReader_ReadLine_\" data-linktype=\"relative-path\">ReadLine</a>, and <a class=\"xref\" href=\"system.io.streamreader#System_IO_StreamReader_ReadToEnd_\" data-linktype=\"relative-path\">ReadToEnd</a> perform synchronous read operations on the error output stream of the process. These synchronous read operations do not complete until the associated <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> writes to its StandardError stream, or closes the stream.  </p>\n<p> In contrast, <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_BeginErrorReadLine_\" data-linktype=\"relative-path\">BeginErrorReadLine</a> starts asynchronous read operations on the StandardError stream. This method enables a designated event handler for the stream output and immediately returns to the caller, which can perform other work while the stream output is directed to the event handler.  </p>\n<p> Synchronous read operations introduce a dependency between the caller reading from the StandardError stream and the child process writing to that stream. These dependencies can result in deadlock conditions. When the caller reads from the redirected stream of a child process, it is dependent on the child. The caller waits on the read operation until the child writes to the stream or closes the stream. When the child process writes enough data to fill its redirected stream, it is dependent on the parent. The child process waits on the next write operation until the parent reads from the full stream or closes the stream. The deadlock condition results when the caller and child process wait on each other to complete an operation, and neither can proceed. You can avoid deadlocks by evaluating dependencies between the caller and child process.  </p>\n<p> The following C# code, for example, shows how to read from a redirected stream and wait for the child process to exit.  </p>\n<pre><code>// Start the child process.  \n Process p = new Process();  \n // Redirect the error stream of the child process.  \n p.StartInfo.UseShellExecute = false;  \n p.StartInfo.RedirectStandardError = true;  \n p.StartInfo.FileName = &quot;Write500Lines.exe&quot;;  \n p.Start();  \n // Do not wait for the child process to exit before  \n // reading to the end of its redirected error stream.  \n // p.WaitForExit();  \n // Read the error stream first and then wait.  \n string error = p.StandardError.ReadToEnd();  \n p.WaitForExit();\n</code></pre><p> The code example avoids a deadlock condition by calling <code>p.StandardError.ReadToEnd</code> before <code>p.WaitForExit</code>. A deadlock condition can result if the parent process calls <code>p.WaitForExit</code> before <code>p.StandardError.ReadToEnd</code> and the child process writes enough text to fill the redirected stream. The parent process would wait indefinitely for the child process to exit. The child process would wait indefinitely for the parent to read from the full StandardError stream.  </p>\n<p> There is a similar issue when you read all text from both the standard output and standard error streams. The following C# code, for example, performs a read operation on both streams.  </p>\n<pre><code>// Do not perform a synchronous read to the end of both   \n// redirected streams.  \n// string output = p.StandardOutput.ReadToEnd();  \n// string error = p.StandardError.ReadToEnd();  \n// p.WaitForExit();  \n// Use asynchronous read operations on at least one of the streams.  \np.BeginOutputReadLine();  \nstring error = p.StandardError.ReadToEnd();  \np.WaitForExit();\n</code></pre><p> The code example avoids the deadlock condition by performing asynchronous read operations on the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardOutput_\" data-linktype=\"relative-path\">StandardOutput</a> stream. A deadlock condition results if the parent process calls <code>p.StandardOutput.ReadToEnd</code> followed by <code>p.StandardError.ReadToEnd</code> and the child process writes enough text to fill its error stream. The parent process would wait indefinitely for the child process to close its <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardOutput_\" data-linktype=\"relative-path\">StandardOutput</a> stream. The child process would wait indefinitely for the parent to read from the full StandardError stream.  </p>\n<p> You can use asynchronous read operations to avoid these dependencies and their deadlock potential. Alternately, you can avoid the deadlock condition by creating two threads and reading the output of each stream on a separate thread.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> You cannot mix asynchronous and synchronous read operations on a redirected stream. Once the redirected stream of a <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> is opened in either asynchronous or synchronous mode, all further read operations on that stream must be in the same mode. For example, do not follow <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_BeginErrorReadLine_\" data-linktype=\"relative-path\">BeginErrorReadLine</a> with a call to <a class=\"xref\" href=\"system.io.streamreader#System_IO_StreamReader_ReadLine_\" data-linktype=\"relative-path\">ReadLine</a> on the StandardError stream, or vice versa. However, you can read two different streams in different modes. For example, you can call <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_BeginOutputReadLine_\" data-linktype=\"relative-path\">BeginOutputReadLine</a> and then call <a class=\"xref\" href=\"system.io.streamreader#System_IO_StreamReader_ReadLine_\" data-linktype=\"relative-path\">ReadLine</a> for the StandardError stream.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <code>net use</code> command together with a user supplied argument to map a network resource. It then reads the standard error stream of the net command and writes it to console.  </p>\n<pre><code class=\"lang-cs\" name=\"Process_StandardError#1\">            Process myProcess = new Process();\n            ProcessStartInfo myProcessStartInfo = new ProcessStartInfo(&quot;net &quot;,&quot;use &quot;+ args[0]);\n\n            myProcessStartInfo.UseShellExecute = false;\n            myProcessStartInfo.RedirectStandardError = true;\n            myProcess.StartInfo = myProcessStartInfo;\n            myProcess.Start();\n\n            StreamReader myStreamReader = myProcess.StandardError;\n            // Read the standard error of net.exe and write it on to console.\n            Console.WriteLine( myStreamReader.ReadLine());\n            myProcess.Close();\n</code></pre><pre><code class=\"lang-cpp\" name=\"Process_StandardError#1\">      Process^ myProcess = gcnew Process;\n      ProcessStartInfo^ myProcessStartInfo = gcnew ProcessStartInfo( &quot;net &quot;,String::Concat( &quot;use &quot;, args[ 0 ] ) );\n\n      myProcessStartInfo-&gt;UseShellExecute = false;\n      myProcessStartInfo-&gt;RedirectStandardError = true;\n      myProcess-&gt;StartInfo = myProcessStartInfo;\n      myProcess-&gt;Start();\n\n      StreamReader^ myStreamReader = myProcess-&gt;StandardError;\n      // Read the standard error of net.exe and write it on to console.\n      Console::WriteLine( myStreamReader-&gt;ReadLine() );\n      myProcess-&gt;Close();\n</code></pre><pre><code class=\"lang-vb\" name=\"Process_StandardError#1\">            Dim myProcess As New Process()\n            Dim myProcessStartInfo As New ProcessStartInfo(&quot;net &quot;, &quot;use &quot; + args(1))\n\n            myProcessStartInfo.UseShellExecute = False\n            myProcessStartInfo.RedirectStandardError = True\n            myProcess.StartInfo = myProcessStartInfo\n            myProcess.Start()\n\n            Dim myStreamReader As StreamReader = myProcess.StandardError\n            &#39; Read the standard error of net.exe and write it on to console.\n            Console.WriteLine(myStreamReader.ReadLine())\n            myProcess.Close()\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_StandardInput\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_StandardInput_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StandardInput</div>        \r\n          </div>\r\n    \r\n            <p>Gets a stream used to write the input of the application.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.IO.StreamWriter StandardInput { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.streamwriter\" data-linktype=\"relative-path\">StreamWriter</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.io.streamwriter\" data-linktype=\"relative-path\">StreamWriter</a> that can be used to write the standard input stream of the application.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The StandardInput stream has not been defined because <span class=\"xref\">stem.Diagnostics.ProcessStartInfo.RedirectStandardInput*</span> is set to <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> can read input text from its standard input stream, typically the keyboard. By redirecting the StandardInput stream, you can programmatically specify the input. For example, instead of using keyboard input, you can provide text from the contents of a designated file or output from another application.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To use StandardInput, you must set <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_UseShellExecute_\" data-linktype=\"relative-path\">UseShellExecute</a> to <code>false</code>, and you must set <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_RedirectStandardInput_\" data-linktype=\"relative-path\">RedirectStandardInput</a> to <code>true</code>. Otherwise, writing to the StandardInput stream throws an exception.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates how to redirect the StandardInput stream of a process. The example starts the <code>sort</code> command with redirected input. It then prompts the user for text, and passes that to the <code>sort</code> process by means of the redirected StandardInput stream. The <code>sort</code> results are displayed to the user on the console.  </p>\n<pre><code class=\"lang-cs\" name=\"Process_StandardInput#1\">\nusing System;\nusing System.IO;\nusing System.Diagnostics;\nusing System.ComponentModel;\n\nnamespace Process_StandardInput_Sample\n{\n   class StandardInputTest\n   {\n      static void Main()\n      {\n         Console.WriteLine(&quot;Ready to sort one or more text lines...&quot;);\n\n         // Start the Sort.exe process with redirected input.\n         // Use the sort command to sort the input text.\n         Process myProcess = new Process();\n         \n         myProcess.StartInfo.FileName = &quot;Sort.exe&quot;;\n         myProcess.StartInfo.UseShellExecute = false;\n         myProcess.StartInfo.RedirectStandardInput = true;\n\n         myProcess.Start();\n\n         StreamWriter myStreamWriter = myProcess.StandardInput;\n\n         // Prompt the user for input text lines to sort. \n         // Write each line to the StandardInput stream of\n         // the sort command.\n         String inputText;\n         int numLines = 0;\n         do \n         {\n            Console.WriteLine(&quot;Enter a line of text (or press the Enter key to stop):&quot;);\n            \n            inputText = Console.ReadLine();\n            if (inputText.Length &gt; 0)\n            {\n               numLines ++;\n               myStreamWriter.WriteLine(inputText);\n            }\n         } while (inputText.Length != 0);\n\n\n         // Write a report header to the console.\n         if (numLines &gt; 0)\n         {\n            Console.WriteLine(&quot; {0} sorted text line(s) &quot;, numLines);\n            Console.WriteLine(&quot;------------------------&quot;);\n         }\n         else \n         {\n            Console.WriteLine(&quot; No input was sorted&quot;);\n         }\n\n         // End the input stream to the sort command.\n         // When the stream closes, the sort command\n         // writes the sorted text lines to the \n         // console.\n         myStreamWriter.Close();\n\n\n         // Wait for the sort process to write the sorted text lines.\n         myProcess.WaitForExit();\n         myProcess.Close();\n       \n      }\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Process_StandardInput#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Diagnostics;\nusing namespace System::ComponentModel;\nint main()\n{\n   Console::WriteLine(  &quot;Ready to sort one or more text lines...&quot; );\n   \n   // Start the Sort.exe process with redirected input.\n   // Use the sort command to sort the input text.\n   Process^ myProcess = gcnew Process;\n   if ( myProcess )\n   {\n      myProcess-&gt;StartInfo-&gt;FileName =  &quot;Sort.exe&quot;;\n      myProcess-&gt;StartInfo-&gt;UseShellExecute = false;\n      myProcess-&gt;StartInfo-&gt;RedirectStandardInput = true;\n      myProcess-&gt;Start();\n      StreamWriter^ myStreamWriter = myProcess-&gt;StandardInput;\n      if ( myStreamWriter )\n      {\n         \n         // Prompt the user for input text lines to sort. \n         // Write each line to the StandardInput stream of\n         // the sort command.\n         String^ inputText;\n         int numLines = 0;\n         do\n         {\n            Console::WriteLine(  &quot;Enter a line of text (or press the Enter key to stop):&quot; );\n            inputText = Console::ReadLine();\n            if ( inputText &amp;&amp; inputText-&gt;Length &gt; 0 )\n            {\n               numLines++;\n               myStreamWriter-&gt;WriteLine( inputText );\n            }\n         }\n         while ( inputText &amp;&amp; inputText-&gt;Length != 0 );\n         \n         // Write a report header to the console.\n         if ( numLines &gt; 0 )\n         {\n            Console::WriteLine(  &quot; {0} sorted text line(s) &quot;, numLines.ToString() );\n            Console::WriteLine(  &quot;------------------------&quot; );\n         }\n         else\n         {\n            Console::WriteLine(  &quot; No input was sorted&quot; );\n         }\n         \n         // End the input stream to the sort command.\n         // When the stream closes, the sort command\n         // writes the sorted text lines to the \n         // console.\n         myStreamWriter-&gt;Close();\n      }\n      \n      // Wait for the sort process to write the sorted text lines.\n      myProcess-&gt;WaitForExit();\n      myProcess-&gt;Close();\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Process_StandardInput#1\">\nImports System\nImports System.IO\nImports System.Diagnostics\nImports System.ComponentModel\nImports Microsoft.VisualBasic\n\nNamespace Process_StandardInput_Sample\n\n   Class StandardInputTest\n      \n      Shared Sub Main()\n          \n         Console.WriteLine(&quot;Ready to sort one or more text lines...&quot;)\n            \n         &#39; Start the Sort.exe process with redirected input.\n         &#39; Use the sort command to sort the input text.\n         Dim myProcess As New Process()\n            \n         myProcess.StartInfo.FileName = &quot;Sort.exe&quot;\n         myProcess.StartInfo.UseShellExecute = False\n         myProcess.StartInfo.RedirectStandardInput = True\n            \n         myProcess.Start()\n            \n         Dim myStreamWriter As StreamWriter = myProcess.StandardInput\n            \n         &#39; Prompt the user for input text lines to sort. \n         &#39; Write each line to the StandardInput stream of\n         &#39; the sort command.\n         Dim inputText As String\n         Dim numLines As Integer = 0\n         Do\n            Console.WriteLine(&quot;Enter a line of text (or press the Enter key to stop):&quot;)\n               \n            inputText = Console.ReadLine()\n            If inputText.Length &gt; 0 Then\n               numLines += 1\n               myStreamWriter.WriteLine(inputText)\n            End If\n         Loop While inputText.Length &lt;&gt; 0\n            \n            \n         &#39; Write a report header to the console.\n         If numLines &gt; 0 Then\n            Console.WriteLine(&quot; {0} sorted text line(s) &quot;, numLines)\n            Console.WriteLine(&quot;------------------------&quot;)\n         Else\n            Console.WriteLine(&quot; No input was sorted&quot;)\n         End If\n            \n         &#39; End the input stream to the sort command.\n         &#39; When the stream closes, the sort command\n         &#39; writes the sorted text lines to the \n         &#39; console.\n         myStreamWriter.Close()\n            \n            \n         &#39; Wait for the sort process to write the sorted text lines.\n         myProcess.WaitForExit()\n         myProcess.Close()\n         \n      End Sub &#39;Main\n   End Class  &#39;StandardInputTest\nEnd Namespace &#39;Process_StandardInput_Sample\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_StandardOutput\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_StandardOutput_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StandardOutput</div>        \r\n          </div>\r\n    \r\n            <p>Gets a stream used to read the textual output of the application.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.IO.StreamReader StandardOutput { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.streamreader\" data-linktype=\"relative-path\">StreamReader</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.io.streamreader\" data-linktype=\"relative-path\">StreamReader</a> that can be used to read the standard output stream of the application.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The StandardOutput stream has not been defined for redirection; ensure <span class=\"xref\">stem.Diagnostics.ProcessStartInfo.RedirectStandardOutput*</span> is set to <code>true</code> and <span class=\"xref\">stem.Diagnostics.ProcessStartInfo.UseShellExecute*</span> is set to <code>false</code>.  </p>\n<p> - or -  </p>\n<p> The StandardOutput stream has been opened for asynchronous read operations with <span class=\"xref\">stem.Diagnostics.Process.BeginOutputReadLine*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When a <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> writes text to its standard stream, that text is normally displayed on the console. By redirecting the StandardOutput stream, you can manipulate or suppress the output of a process. For example, you can filter the text, format it differently, or write the output to both the console and a designated log file.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To use StandardOutput, you must set <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_UseShellExecute_\" data-linktype=\"relative-path\">UseShellExecute</a> to <code>false</code>, and you must set <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_RedirectStandardOutput_\" data-linktype=\"relative-path\">RedirectStandardOutput</a> to <code>true</code>. Otherwise, reading from the StandardOutput stream throws an exception.  </p>\n</div>\n<p> The redirected StandardOutput stream can be read synchronously or asynchronously. Methods such as <a class=\"xref\" href=\"system.io.streamreader#System_IO_StreamReader_Read_\" data-linktype=\"relative-path\">Read</a>, <a class=\"xref\" href=\"system.io.streamreader#System_IO_StreamReader_ReadLine_\" data-linktype=\"relative-path\">ReadLine</a>, and <a class=\"xref\" href=\"system.io.streamreader#System_IO_StreamReader_ReadToEnd_\" data-linktype=\"relative-path\">ReadToEnd</a> perform synchronous read operations on the output stream of the process. These synchronous read operations do not complete until the associated <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> writes to its StandardOutput stream, or closes the stream.  </p>\n<p> In contrast, <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_BeginOutputReadLine_\" data-linktype=\"relative-path\">BeginOutputReadLine</a> starts asynchronous read operations on the StandardOutput stream. This method enables a designated event handler for the stream output and immediately returns to the caller, which can perform other work while the stream output is directed to the event handler.  </p>\n<p> Synchronous read operations introduce a dependency between the caller reading from the StandardOutput stream and the child process writing to that stream. These dependencies can result in deadlock conditions. When the caller reads from the redirected stream of a child process, it is dependent on the child. The caller waits on the read operation until the child writes to the stream or closes the stream. When the child process writes enough data to fill its redirected stream, it is dependent on the parent. The child process waits on the next write operation until the parent reads from the full stream or closes the stream. The deadlock condition results when the caller and child process wait on each other to complete an operation, and neither can proceed. You can avoid deadlocks by evaluating dependencies between the caller and child process.  </p>\n<p> The following C# code, for example, shows how to read from a redirected stream and wait for the child process to exit.  </p>\n<pre><code>Process p = new Process();  \np.StartInfo.UseShellExecute = false;  \np.StartInfo.RedirectStandardOutput = true;  \np.StartInfo.FileName = &quot;Write500Lines.exe&quot;;  \np.Start();  \n\n// To avoid deadlocks, always read the output stream first and then wait.  \nstring output = p.StandardOutput.ReadToEnd();  \np.WaitForExit();\n</code></pre><p> The code example avoids a deadlock condition by calling <code>p.StandardOutput.ReadToEnd</code> before <code>p.WaitForExit</code>. A deadlock condition can result if the parent process calls <code>p.WaitForExit</code> before <code>p.StandardOutput.ReadToEnd</code> and the child process writes enough text to fill the redirected stream. The parent process would wait indefinitely for the child process to exit. The child process would wait indefinitely for the parent to read from the full StandardOutput stream.  </p>\n<p> There is a similar issue when you read all text from both the standard output and standard error streams. The following C# code, for example, performs a read operation on both streams.  </p>\n<pre><code>// To avoid deadlocks, use asynchronous read operations on at least one of the streams.  \n// Do not perform a synchronous read to the end of both redirected streams.  \np.BeginOutputReadLine();  \nstring error = p.StandardError.ReadToEnd();  \np.WaitForExit();\n</code></pre><p> The code example avoids the deadlock condition by performing asynchronous read operations on the StandardOutput stream. A deadlock condition results if the parent process calls <code>p.StandardOutput.ReadToEnd</code> followed by <code>p.StandardError.ReadToEnd</code> and the child process writes enough text to fill its error stream. The parent process would wait indefinitely for the child process to close its StandardOutput stream. The child process would wait indefinitely for the parent to read from the full <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardError_\" data-linktype=\"relative-path\">StandardError</a> stream.  </p>\n<p> You can use asynchronous read operations to avoid these dependencies and their deadlock potential. Alternately, you can avoid the deadlock condition by creating two threads and reading the output of each stream on a separate thread.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> You cannot mix asynchronous and synchronous read operations on a redirected stream. Once the redirected stream of a <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> is opened in either asynchronous or synchronous mode, all further read operations on that stream must be in the same mode. For example, do not follow <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_BeginOutputReadLine_\" data-linktype=\"relative-path\">BeginOutputReadLine</a> with a call to <a class=\"xref\" href=\"system.io.streamreader#System_IO_StreamReader_ReadLine_\" data-linktype=\"relative-path\">ReadLine</a> on the StandardOutput stream, or vice versa. However, you can read two different streams in different modes. For example, you can call <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_BeginOutputReadLine_\" data-linktype=\"relative-path\">BeginOutputReadLine</a> and then call <a class=\"xref\" href=\"system.io.streamreader#System_IO_StreamReader_ReadLine_\" data-linktype=\"relative-path\">ReadLine</a> for the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardError_\" data-linktype=\"relative-path\">StandardError</a> stream.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example runs the ipconfig.exe command and redirects its standard output to the exampleâ€™s console window.  </p>\n<pre><code class=\"lang-vb\" name=\"Process_StandardOutput#2\">Imports System\nImports System.IO\nImports System.Diagnostics\n\nModule Module1\n    Sub Main()\n        Dim process As New Process()\n        process.StartInfo.FileName = &quot;ipconfig.exe&quot;\n        process.StartInfo.UseShellExecute = False\n        process.StartInfo.RedirectStandardOutput = True\n        process.Start()\n\n        &#39; Synchronously read the standard output of the spawned process. \n        Dim reader As StreamReader = process.StandardOutput\n        Dim output As String = reader.ReadToEnd()\n        Console.WriteLine(output)\n\n        process.WaitForExit()\n        process.Close()\n\n        Console.WriteLine(Environment.NewLine + Environment.NewLine + &quot;Press any key to exit.&quot;)\n        Console.ReadLine()\n    End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"Process_StandardOutput#2\">using System;\nusing System.IO;\nusing System.Diagnostics;\n\nclass StandardOutputExample\n{\n    public static void Main()\n    {        \n        Process process = new Process();\n        process.StartInfo.FileName = &quot;ipconfig.exe&quot;;        \n        process.StartInfo.UseShellExecute = false;\n        process.StartInfo.RedirectStandardOutput = true;        \n        process.Start();\n        \n        // Synchronously read the standard output of the spawned process. \n        StreamReader reader = process.StandardOutput;\n        string output = reader.ReadToEnd();\n\n        // Write the redirected output to this application&#39;s window.\n        Console.WriteLine(output);\n\n        process.WaitForExit();\n        process.Close();\n\n        Console.WriteLine(&quot;<br><br>Press any key to exit.&quot;);\n        Console.ReadLine();\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Process_StandardOutput#2\">using namespace System;\nusing namespace System::IO;\nusing namespace System::Diagnostics;\n\nint main()\n{\n    Process^ process = gcnew Process();\n    process-&gt;StartInfo-&gt;FileName = &quot;ipconfig.exe&quot;;\n    process-&gt;StartInfo-&gt;UseShellExecute = false;\n    process-&gt;StartInfo-&gt;RedirectStandardOutput = true;\n    process-&gt;Start();\n\n    // Synchronously read the standard output of the spawned process-&gt; \n    StreamReader^ reader = process-&gt;StandardOutput;\n    String^ output = reader-&gt;ReadToEnd();\n\n    // Write the redirected output to this application&#39;s window.\n    Console::WriteLine(output);\n\n    process-&gt;WaitForExit();\n    process-&gt;Close();\n\n    Console::WriteLine(&quot;<br><br>Press any key to exit&quot;);\n    Console::ReadLine();\n    return 0;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_StartInfo\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_StartInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StartInfo</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the properties to pass to the <span class=\"xref\">stem.Diagnostics.Process.Start*</span> method of the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Diagnostics.ProcessStartInfo StartInfo { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.processstartinfo\" data-linktype=\"relative-path\">ProcessStartInfo</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.diagnostics.processstartinfo\" data-linktype=\"relative-path\">ProcessStartInfo</a> that represents the data with which to start the process. These arguments include the name of the executable file or document used to start the process.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The value that specifies the StartInfo is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>StartInfo represents the set of parameters to use to start a process. When <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Start_\" data-linktype=\"relative-path\">Start</a> is called, the StartInfo is used to specify the process to start. The only necessary StartInfo member to set is the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_FileName_\" data-linktype=\"relative-path\">FileName</a> property. Starting a process by specifying the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_FileName_\" data-linktype=\"relative-path\">FileName</a> property is similar to typing the information in the <strong>Run</strong> dialog box of the Windows <strong>Start</strong> menu. Therefore, the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_FileName_\" data-linktype=\"relative-path\">FileName</a> property does not need to represent an executable file. It can be of any file type for which the extension has been associated with an application installed on the system. For example the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_FileName_\" data-linktype=\"relative-path\">FileName</a> can have a .txt extension if you have associated text files with an editor, such as Notepad, or it can have a .doc if you have associated.doc files with a word processing tool, such as Microsoft Word. Similarly, in the same way that the <strong>Run</strong> dialog box can accept an executable file name with or without the .exe extension, the .exe extension is optional in the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_FileName_\" data-linktype=\"relative-path\">FileName</a> member. For example, you can set the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_FileName_\" data-linktype=\"relative-path\">FileName</a> property to either &quot;Notepad.exe&quot; or &quot;Notepad&quot;.  </p>\n<p> You can start a ClickOnce application by setting the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_FileName_\" data-linktype=\"relative-path\">FileName</a> property to the location (for example, a Web address) from which you originally installed the application. Do not start a ClickOnce application by specifying its installed location on your hard drive.  </p>\n<p> If the file name involves a nonexecutable file, such as a .doc file, you can include a verb specifying what action to take on the file. For example, you could set the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_Verb_\" data-linktype=\"relative-path\">Verb</a> to &quot;Print&quot; for a file ending in the .doc extension. The file name specified in the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_FileName_\" data-linktype=\"relative-path\">FileName</a> property does not need to have an extension if you manually enter a value for the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_Verb_\" data-linktype=\"relative-path\">Verb</a> property. However, if you use the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_Verbs_\" data-linktype=\"relative-path\">Verbs</a> property to determine what verbs are available, you must include the extension.  </p>\n<p> You can change the parameters specified in the StartInfo property up to the time that you call the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Start_\" data-linktype=\"relative-path\">Start</a> method on the process. After you start the process, changing the StartInfo values does not affect or restart the associated process. If you call the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Start_System_Diagnostics_ProcessStartInfo_\" data-linktype=\"relative-path\">Start(ProcessStartInfo)</a> method with the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_UserName_\" data-linktype=\"relative-path\">UserName</a> and <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_Password_\" data-linktype=\"relative-path\">Password</a> properties set, the unmanaged <code>CreateProcessWithLogonW</code> function is called, which starts the process in a new window even if the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_CreateNoWindow_\" data-linktype=\"relative-path\">CreateNoWindow</a> property value is <code>true</code> or the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_WindowStyle_\" data-linktype=\"relative-path\">WindowStyle</a> property value is <a class=\"xref\" href=\"system.diagnostics.processwindowstyle\" data-linktype=\"relative-path\">ProcessWindowStyle</a>.  </p>\n<p> If you did not use the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Start_\" data-linktype=\"relative-path\">Start</a> method to start a process, the StartInfo property does not reflect the parameters used to start the process. For example, if you use <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_GetProcesses_\" data-linktype=\"relative-path\">GetProcesses</a> to get an array of processes running on the computer, the StartInfo property of each <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> does not contain the original file name or arguments used to start the process.  </p>\n<p> When the process is started, the file name is the file that populates the (read-only) <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_MainModule_\" data-linktype=\"relative-path\">MainModule</a> property. If you want to retrieve the executable file that is associated with the process after the process has started, use the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_MainModule_\" data-linktype=\"relative-path\">MainModule</a> property. If you want to set the executable file of a <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> instance for which an associated process has not been started, use the StartInfo property&#39;s <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_FileName_\" data-linktype=\"relative-path\">FileName</a> member. Because the members of the StartInfo property are arguments that are passed to the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Start_\" data-linktype=\"relative-path\">Start</a> method of a process, changing the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_FileName_\" data-linktype=\"relative-path\">FileName</a> property after the associated process has started will not reset the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_MainModule_\" data-linktype=\"relative-path\">MainModule</a> property. These properties are used only to initialize the associated process.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example populates a StartInfo with the file to execute, the action performed on it and whether it should displays a user interface. For additional examples, refer to the reference pages for properties of the <a class=\"xref\" href=\"system.diagnostics.processstartinfo\" data-linktype=\"relative-path\">ProcessStartInfo</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Process.Start_instance#1\">#using &lt;System.dll&gt;\nusing namespace System;\nusing namespace System::Diagnostics;\nusing namespace System::ComponentModel;\n\nint main()\n{\n    Process^ myProcess = gcnew Process;\n\n    try\n    {\n        myProcess-&gt;StartInfo-&gt;UseShellExecute = false;\n        // You can start any process, HelloWorld is a do-nothing example.\n        myProcess-&gt;StartInfo-&gt;FileName = &quot;C:\\\\HelloWorld.exe&quot;;\n        myProcess-&gt;StartInfo-&gt;CreateNoWindow = true;\n        myProcess-&gt;Start();\n        // This code assumes the process you are starting will terminate itself. \n        // Given that is is started without a window so you cannot terminate it \n        // on the desktop, it must terminate itself or you can do it programmatically\n        // from this application using the Kill method.\n    }\n    catch ( Exception^ e ) \n    {\n        Console::WriteLine( e-&gt;Message );\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Process.Start_instance#1\">Imports System\nImports System.Diagnostics\nImports System.ComponentModel\n\nNamespace MyProcessSample\n    Class MyProcess\n        Public Shared Sub Main()\n            Dim myProcess As New Process()\n\n            Try\n                myProcess.StartInfo.UseShellExecute = False\n                &#39; You can start any process, HelloWorld is a do-nothing example.\n                myProcess.StartInfo.FileName = &quot;C:\\\\HelloWorld.exe&quot;\n                myProcess.StartInfo.CreateNoWindow = True\n                myProcess.Start()\n                &#39; This code assumes the process you are starting will terminate itself. \n                &#39; Given that is is started without a window so you cannot terminate it \n                &#39; on the desktop, it must terminate itself or you can do it programmatically\n                &#39; from this application using the Kill method.\n            Catch e As Exception\n                Console.WriteLine((e.Message))\n            End Try\n        End Sub &#39;Main\n    End Class\nEnd Namespace\n</code></pre><pre><code class=\"lang-cs\" name=\"Process.Start_instance#1\">using System;\nusing System.Diagnostics;\nusing System.ComponentModel;\n\nnamespace MyProcessSample\n{\n    class MyProcess\n    {\n        public static void Main()\n        {\n            Process myProcess = new Process();\n\n            try\n            {\n                myProcess.StartInfo.UseShellExecute = false;\n                // You can start any process, HelloWorld is a do-nothing example.\n                myProcess.StartInfo.FileName = &quot;C:\\\\HelloWorld.exe&quot;;\n                myProcess.StartInfo.CreateNoWindow = true;\n                myProcess.Start();\n                // This code assumes the process you are starting will terminate itself. \n                // Given that is is started without a window so you cannot terminate it \n                // on the desktop, it must terminate itself or you can do it programmatically\n                // from this application using the Kill method.\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(e.Message);\n            }\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_StartTime\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_StartTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StartTime</div>        \r\n          </div>\r\n    \r\n            <p>Gets the time that the associated process was started.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public DateTime StartTime { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>An object  that indicates when the process started. An exception is thrown if the process is not running.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>You are attempting to access the StartTime property for a process that is running on a remote computer. This property is available only for processes that are running on the local computer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The process has exited.  </p>\n<p> -or-  </p>\n<p> The process has not been started.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.win32exception\" data-linktype=\"relative-path\">Win32Exception</a></div>\r\n                  </div>\r\n                  <p>An error occurred in the call to the Windows function.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_SynchronizingObject\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_SynchronizingObject_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SynchronizingObject</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the object used to marshal the event handler calls that are issued as a result of a process exit event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.isynchronizeinvoke\" data-linktype=\"relative-path\">ISynchronizeInvoke</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.componentmodel.isynchronizeinvoke\" data-linktype=\"relative-path\">ISynchronizeInvoke</a> used to marshal event handler calls that are issued as a result of an <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Exited\" data-linktype=\"relative-path\">Exited</a> event on the process.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When <a class=\"xref\" href=\"system.diagnostics.eventlog#System_Diagnostics_EventLog_SynchronizingObject_\" data-linktype=\"relative-path\">SynchronizingObject</a> is <code>null</code>, methods that handle the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Exited\" data-linktype=\"relative-path\">Exited</a> event are called on a thread from the system thread pool. For more information about system thread pools, see <a class=\"xref\" href=\"system.threading.threadpool\" data-linktype=\"relative-path\">ThreadPool</a>.  </p>\n<p> When the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Exited\" data-linktype=\"relative-path\">Exited</a> event is handled by a visual Windows Forms component, such as a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a>, accessing the component through the system thread pool might not work, or might result in an exception. Avoid this by setting SynchronizingObject to a Windows Forms component, which causes the methods handling the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Exited\" data-linktype=\"relative-path\">Exited</a> event to be called on the same thread on which the component was created.  </p>\n<p> If the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> is used inside <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/vsprvslong-md.md&quot; -->Visual Studio 2005<!--END INCLUDE --> in a Windows Forms designer, SynchronizingObject is automatically set to the control that contains the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a>. For example, if you place a <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> on a designer for <code>Form1</code> (which inherits from <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a>) the SynchronizingObject property of <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> is set to the instance of <code>Form1</code>:  </p>\n<pre><code class=\"lang-cpp\" name=\"Process_SynchronizingObject#2\">            this-&gt;process1-&gt;StartInfo-&gt;Domain = &quot;&quot;;\n            this-&gt;process1-&gt;StartInfo-&gt;LoadUserProfile = false;\n            this-&gt;process1-&gt;StartInfo-&gt;Password = nullptr;\n            this-&gt;process1-&gt;StartInfo-&gt;StandardErrorEncoding = nullptr;\n            this-&gt;process1-&gt;StartInfo-&gt;StandardOutputEncoding = nullptr;\n            this-&gt;process1-&gt;StartInfo-&gt;UserName = &quot;&quot;;\n            this-&gt;process1-&gt;SynchronizingObject = this;\n</code></pre><pre><code class=\"lang-cs\" name=\"Process_SynchronizingObject#2\">            this.process1.StartInfo.Domain = &quot;&quot;;\n            this.process1.StartInfo.LoadUserProfile = false;\n            this.process1.StartInfo.Password = null;\n            this.process1.StartInfo.StandardErrorEncoding = null;\n            this.process1.StartInfo.StandardOutputEncoding = null;\n            this.process1.StartInfo.UserName = &quot;&quot;;\n            this.process1.SynchronizingObject = this;\n</code></pre><pre><code class=\"lang-vb\" name=\"Process_SynchronizingObject#2\">            Me.process1.StartInfo.Domain = &quot;&quot;\n            Me.process1.StartInfo.LoadUserProfile = False\n            Me.process1.StartInfo.Password = Nothing\n            Me.process1.StartInfo.StandardErrorEncoding = Nothing\n            Me.process1.StartInfo.StandardOutputEncoding = Nothing\n            Me.process1.StartInfo.UserName = &quot;&quot;\n            Me.process1.SynchronizingObject = Me\n</code></pre><p> Typically, this property is set when the component is placed inside a control or form, because those components are bound to a specific thread.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-vb\" name=\"Process_SynchronizingObject#1\">      Private button1 As MyButton\n      Private Sub button1_Click(sender As Object, e As EventArgs)\n         Dim myProcess As New Process()\n         Dim myProcessStartInfo As New ProcessStartInfo(&quot;mspaint&quot;)\n         myProcess.StartInfo = myProcessStartInfo\n         myProcess.Start()\n         AddHandler myProcess.Exited, AddressOf MyProcessExited\n         &#39; Set &#39;EnableRaisingEvents&#39; to true, to raise &#39;Exited&#39; event when process is terminated.\n         myProcess.EnableRaisingEvents = True\n         &#39; Set method handling the exited event to be called  ;\n         &#39; on the same thread on which MyButton was created.\n         myProcess.SynchronizingObject = button1\n         MessageBox.Show(&quot;Waiting for the process &#39;mspaint&#39; to exit....&quot;)\n         myProcess.WaitForExit()\n         myProcess.Close()\n      End Sub &#39;button1_Click\n      Private Sub MyProcessExited(source As Object, e As EventArgs)\n         MessageBox.Show(&quot;The process has exited.&quot;)\n      End Sub &#39;MyProcessExited\n   End Class &#39;Form1\n\n   Public Class MyButton\n      Inherits Button\n\n   End Class &#39;MyButton\n</code></pre><pre><code class=\"lang-cpp\" name=\"Process_SynchronizingObject#1\">   ref class MyButton: public Button\n   {\n   public:\n      void MyProcessExited( Object^ source, EventArgs^ e )\n      {\n         MessageBox::Show( &quot;The process has exited.&quot; );\n      }\n   };\n\npublic:\n   MyButton^ button1;\nprivate:\n   void MyProcessExited( Object^ source, EventArgs^ e )\n   {\n       MessageBox::Show( &quot;The process has exited.&quot; );\n   }\n   void button1_Click( Object^ sender, EventArgs^ e )\n   {\n      Process^ myProcess = gcnew Process;\n      ProcessStartInfo^ myProcessStartInfo = gcnew ProcessStartInfo( &quot;mspaint&quot; );\n      myProcess-&gt;StartInfo = myProcessStartInfo;\n      myProcess-&gt;Start();\n      myProcess-&gt;Exited += gcnew System::EventHandler( this, &amp;Form1::MyProcessExited );\n\n      // Set &#39;EnableRaisingEvents&#39; to true, to raise &#39;Exited&#39; event when process is terminated.\n      myProcess-&gt;EnableRaisingEvents = true;\n\n      // Set method handling the exited event to be called  ;\n      // on the same thread on which MyButton was created.\n      myProcess-&gt;SynchronizingObject = button1;\n      MessageBox::Show( &quot;Waiting for the process &#39;mspaint&#39; to exit....&quot; );\n      myProcess-&gt;WaitForExit();\n      myProcess-&gt;Close();\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"Process_SynchronizingObject#1\">      private MyButton button1;\n      private void button1_Click(object sender, System.EventArgs e)\n      {\n         Process myProcess = new Process();\n         ProcessStartInfo myProcessStartInfo= new ProcessStartInfo(&quot;mspaint&quot;);\n         myProcess.StartInfo = myProcessStartInfo;\n         myProcess.Start();\n         myProcess.Exited += new EventHandler(MyProcessExited);\n         // Set &#39;EnableRaisingEvents&#39; to true, to raise &#39;Exited&#39; event when process is terminated.\n         myProcess.EnableRaisingEvents = true;\n         // Set method handling the exited event to be called  ;\n         // on the same thread on which MyButton was created.\n         myProcess.SynchronizingObject = button1;\n         MessageBox.Show(&quot;Waiting for the process &#39;mspaint&#39; to exit....&quot;);\n         myProcess.WaitForExit();\n         myProcess.Close();\n      }\n      private void MyProcessExited(Object source, EventArgs e)\n      {\n         MessageBox.Show(&quot;The process has exited.&quot;);\n      }\n   }\n\n   public class MyButton:Button\n   {\n\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_Threads\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_Threads_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Threads</div>        \r\n          </div>\r\n    \r\n            <p>Gets the set of threads that are running in the associated process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Diagnostics.ProcessThreadCollection Threads { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.processthreadcollection\" data-linktype=\"relative-path\">ProcessThreadCollection</a></div>\r\n                  </div>\r\n                  <p>An array of type <a class=\"xref\" href=\"system.diagnostics.processthread\" data-linktype=\"relative-path\">ProcessThread</a> representing the operating system threads currently running in the associated process.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.systemexception\" data-linktype=\"relative-path\">SystemException</a></div>\r\n                  </div>\r\n                  <p>The process does not have an <span class=\"xref\">stem.Diagnostics.Process.Id*</span>, or no process is associated with the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> instance.  </p>\n<p> -or-  </p>\n<p> The associated process has exited.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The platform is Windows 98 or Windows Millennium Edition (Windows Me); set <span class=\"xref\">stem.Diagnostics.ProcessStartInfo.UseShellExecute*</span> to <code>false</code> to access this property on Windows 98 and Windows Me.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A thread executes code in a process. Each process is started with a single thread, its primary thread. Any thread can create additional threads. Threads within a process share the address space of the process.  </p>\n<p> Use <a class=\"xref\" href=\"system.diagnostics.processthread\" data-linktype=\"relative-path\">ProcessThread</a> to get all the threads associated with the current process. The primary thread is not necessarily at index zero in the array.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_TotalProcessorTime\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_TotalProcessorTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TotalProcessorTime</div>        \r\n          </div>\r\n    \r\n            <p>Gets the total processor time for this process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TimeSpan TotalProcessorTime { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that indicates the amount of time that the associated process has spent utilizing the CPU. This value is the sum of the <span class=\"xref\">stem.Diagnostics.Process.UserProcessorTime*</span> and the <span class=\"xref\">stem.Diagnostics.Process.PrivilegedProcessorTime*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>You are attempting to access the TotalProcessorTime property for a process that is running on a remote computer. This property is available only for processes that are running on the local computer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example starts an instance of Notepad. The example then retrieves and displays various properties of the associated process. The example detects when the process exits, and displays the process&#39;s exit code.  </p>\n<pre><code class=\"lang-cpp\" name=\"Diag_Process_MemoryProperties64#1\">#using &lt;system.dll&gt;\n\nusing namespace System;\nusing namespace System::Diagnostics;\nint main()\n{\n   \n   // Define variables to track the peak\n   // memory usage of the process.\n   _int64 peakPagedMem = 0,peakWorkingSet = 0,peakVirtualMem = 0;\n   Process^ myProcess = nullptr;\n   try\n   {\n      \n      // Start the process.\n      myProcess = Process::Start( &quot;NotePad.exe&quot; );\n      \n      // Display the process statistics until\n      // the user closes the program.\n      do\n      {\n         if (  !myProcess-&gt;HasExited )\n         {\n            \n            // Refresh the current process property values.\n            myProcess-&gt;Refresh();\n            Console::WriteLine();\n            \n            // Display current process statistics.\n            Console::WriteLine( &quot;{0} -&quot;, myProcess );\n            Console::WriteLine( &quot;-------------------------------------&quot; );\n            Console::WriteLine( &quot;  physical memory usage: {0}&quot;, myProcess-&gt;WorkingSet64 );\n            Console::WriteLine( &quot;  base priority: {0}&quot;, myProcess-&gt;BasePriority );\n            Console::WriteLine( &quot;  priority class: {0}&quot;, myProcess-&gt;PriorityClass );\n            Console::WriteLine( &quot;  user processor time: {0}&quot;, myProcess-&gt;UserProcessorTime );\n            Console::WriteLine( &quot;  privileged processor time: {0}&quot;, myProcess-&gt;PrivilegedProcessorTime );\n            Console::WriteLine( &quot;  total processor time: {0}&quot;, myProcess-&gt;TotalProcessorTime );\n\t\t\tConsole::WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;, myProcess-&gt;PagedSystemMemorySize64);\n            Console::WriteLine(&quot;  PagedMemorySize64: {0}&quot;, myProcess-&gt;PagedMemorySize64);\n            \n            // Update the values for the overall peak memory statistics.\n            peakPagedMem = myProcess-&gt;PeakPagedMemorySize64;\n            peakVirtualMem = myProcess-&gt;PeakVirtualMemorySize64;\n            peakWorkingSet = myProcess-&gt;PeakWorkingSet64;\n            if ( myProcess-&gt;Responding )\n            {\n               Console::WriteLine( &quot;Status = Running&quot; );\n            }\n            else\n            {\n               Console::WriteLine( &quot;Status = Not Responding&quot; );\n            }\n         }\n      }\n      while (  !myProcess-&gt;WaitForExit( 1000 ) );\n      Console::WriteLine();\n      Console::WriteLine( &quot;Process exit code: {0}&quot;, myProcess-&gt;ExitCode );\n      \n      // Display peak memory statistics for the process.\n      Console::WriteLine( &quot;Peak physical memory usage of the process: {0}&quot;, peakWorkingSet );\n      Console::WriteLine( &quot;Peak paged memory usage of the process: {0}&quot;, peakPagedMem );\n      Console::WriteLine( &quot;Peak virtual memory usage of the process: {0}&quot;, peakVirtualMem );\n   }\n   finally\n   {\n      if ( myProcess != nullptr )\n      {\n         myProcess-&gt;Close();\n      }\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Diag_Process_MemoryProperties64#1\">using System;\nusing System.Diagnostics;\n\nnamespace ProcessSample\n{\n    class ProcessMonitorSample\n    {\n        public static void Main()\n        {\n\n            // Define variables to track the peak\n            // memory usage of the process.\n            long peakPagedMem = 0,\n                peakWorkingSet = 0,\n                peakVirtualMem = 0;\n\n            Process myProcess = null;\n\n            try\n            {\n                // Start the process.\n                myProcess = Process.Start(&quot;NotePad.exe&quot;);\n\n                // Display the process statistics until\n                // the user closes the program.\n                do\n                {\n                    if (!myProcess.HasExited)\n                    {\n                        // Refresh the current process property values.\n                        myProcess.Refresh();\n\n                        Console.WriteLine();\n\n                        // Display current process statistics.\n\n                        Console.WriteLine(&quot;{0} -&quot;, myProcess.ToString());\n                        Console.WriteLine(&quot;-------------------------------------&quot;);\n\n                        Console.WriteLine(&quot;  physical memory usage: {0}&quot;,\n                            myProcess.WorkingSet64);\n                        Console.WriteLine(&quot;  base priority: {0}&quot;,\n                            myProcess.BasePriority);\n                        Console.WriteLine(&quot;  priority class: {0}&quot;,\n                            myProcess.PriorityClass);\n                        Console.WriteLine(&quot;  user processor time: {0}&quot;,\n                            myProcess.UserProcessorTime);\n                        Console.WriteLine(&quot;  privileged processor time: {0}&quot;,\n                            myProcess.PrivilegedProcessorTime);\n                        Console.WriteLine(&quot;  total processor time: {0}&quot;,\n                            myProcess.TotalProcessorTime);\n                        Console.WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;,\n                            myProcess.PagedSystemMemorySize64);\n                        Console.WriteLine(&quot;  PagedMemorySize64: {0}&quot;,\n                           myProcess.PagedMemorySize64);\n\n                        // Update the values for the overall peak memory statistics.\n                        peakPagedMem = myProcess.PeakPagedMemorySize64;\n                        peakVirtualMem = myProcess.PeakVirtualMemorySize64;\n                        peakWorkingSet = myProcess.PeakWorkingSet64;\n\n                        if (myProcess.Responding)\n                        {\n                            Console.WriteLine(&quot;Status = Running&quot;);\n                        }\n                        else\n                        {\n                            Console.WriteLine(&quot;Status = Not Responding&quot;);\n                        }\n                    }\n                }\n                while (!myProcess.WaitForExit(1000));\n\n\n                Console.WriteLine();\n                Console.WriteLine(&quot;Process exit code: {0}&quot;,\n                    myProcess.ExitCode);\n\n                // Display peak memory statistics for the process.\n                Console.WriteLine(&quot;Peak physical memory usage of the process: {0}&quot;,\n                    peakWorkingSet);\n                Console.WriteLine(&quot;Peak paged memory usage of the process: {0}&quot;,\n                    peakPagedMem);\n                Console.WriteLine(&quot;Peak virtual memory usage of the process: {0}&quot;,\n                    peakVirtualMem);\n\n            }\n            finally\n            {\n                if (myProcess != null)\n                {\n                    myProcess.Close();\n                }\n            }\n        }\n\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Diag_Process_MemoryProperties64#1\">Imports System\nImports System.Diagnostics\n\nNamespace ProcessSample\n    Class ProcessMonitorSample\n\n        Public Shared Sub Main()\n\n            &#39; Define variables to track the peak\n            &#39; memory usage of the process.\n            Dim peakPagedMem As Long = 0\n            Dim peakWorkingSet As Long = 0\n            Dim peakVirtualMem As Long = 0\n\n            Dim myProcess As Process = Nothing\n\n            Try\n\n                &#39; Start the process.\n                myProcess = Process.Start(&quot;NotePad.exe&quot;)\n\n                &#39; Display process statistics until\n                &#39; the user closes the program.\n                Do\n\n                    If Not myProcess.HasExited Then\n\n                        &#39; Refresh the current process property values.\n                        myProcess.Refresh()\n\n                        Console.WriteLine()\n\n                        &#39; Display current process statistics.\n\n                        Console.WriteLine(&quot;{0} -&quot;, myProcess.ToString())\n                        Console.WriteLine(&quot;-------------------------------------&quot;)\n\n                        Console.WriteLine(&quot;  physical memory usage: {0}&quot;, _\n                             myProcess.WorkingSet64)\n                        Console.WriteLine(&quot;  base priority: {0}&quot;, _\n                             myProcess.BasePriority)\n                        Console.WriteLine(&quot;  priority class: {0}&quot;, _\n                             myProcess.PriorityClass)\n                        Console.WriteLine(&quot;  user processor time: {0}&quot;, _\n                             myProcess.UserProcessorTime)\n                        Console.WriteLine(&quot;  privileged processor time: {0}&quot;, _\n                             myProcess.PrivilegedProcessorTime)\n                        Console.WriteLine(&quot;  total processor time: {0}&quot;, _\n                             myProcess.TotalProcessorTime)\n                        Console.WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;, _\n                            myProcess.PagedSystemMemorySize64)\n                        Console.WriteLine(&quot;  PagedMemorySize64: {0}&quot;, _\n                           myProcess.PagedMemorySize64)\n\n                        &#39; Update the values for the overall peak memory statistics.\n                        peakPagedMem = myProcess.PeakPagedMemorySize64\n                        peakVirtualMem = myProcess.PeakVirtualMemorySize64\n                        peakWorkingSet = myProcess.PeakWorkingSet64\n\n                        If myProcess.Responding Then\n                            Console.WriteLine(&quot;Status = Running&quot;)\n                        Else\n                            Console.WriteLine(&quot;Status = Not Responding&quot;)\n                        End If\n                    End If\n                Loop While Not myProcess.WaitForExit(1000)\n\n                Console.WriteLine()\n                Console.WriteLine(&quot;Process exit code: {0}&quot;, myProcess.ExitCode)\n\n                &#39; Display peak memory statistics for the process.\n                Console.WriteLine(&quot;Peak physical memory usage of the process: {0}&quot;, _\n                    peakWorkingSet)\n                Console.WriteLine(&quot;Peak paged memory usage of the process: {0}&quot;, _\n                    peakPagedMem)\n                Console.WriteLine(&quot;Peak virtual memory usage of the process: {0}&quot;, _\n                    peakVirtualMem)\n\n            Finally\n                If Not myProcess Is Nothing Then\n                    myProcess.Close()\n                End If\n            End Try\n        End Sub &#39;Main\n    End Class\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_UserProcessorTime\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_UserProcessorTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UserProcessorTime</div>        \r\n          </div>\r\n    \r\n            <p>Gets the user processor time for this process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TimeSpan UserProcessorTime { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that indicates the amount of time that the associated process has spent running code inside the application portion of the process (not inside the operating system core).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>You are attempting to access the UserProcessorTime property for a process that is running on a remote computer. This property is available only for processes that are running on the local computer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example starts an instance of Notepad. The example then retrieves and displays various properties of the associated process. The example detects when the process exits, and displays the process&#39;s exit code.  </p>\n<pre><code class=\"lang-cpp\" name=\"Diag_Process_MemoryProperties64#1\">#using &lt;system.dll&gt;\n\nusing namespace System;\nusing namespace System::Diagnostics;\nint main()\n{\n   \n   // Define variables to track the peak\n   // memory usage of the process.\n   _int64 peakPagedMem = 0,peakWorkingSet = 0,peakVirtualMem = 0;\n   Process^ myProcess = nullptr;\n   try\n   {\n      \n      // Start the process.\n      myProcess = Process::Start( &quot;NotePad.exe&quot; );\n      \n      // Display the process statistics until\n      // the user closes the program.\n      do\n      {\n         if (  !myProcess-&gt;HasExited )\n         {\n            \n            // Refresh the current process property values.\n            myProcess-&gt;Refresh();\n            Console::WriteLine();\n            \n            // Display current process statistics.\n            Console::WriteLine( &quot;{0} -&quot;, myProcess );\n            Console::WriteLine( &quot;-------------------------------------&quot; );\n            Console::WriteLine( &quot;  physical memory usage: {0}&quot;, myProcess-&gt;WorkingSet64 );\n            Console::WriteLine( &quot;  base priority: {0}&quot;, myProcess-&gt;BasePriority );\n            Console::WriteLine( &quot;  priority class: {0}&quot;, myProcess-&gt;PriorityClass );\n            Console::WriteLine( &quot;  user processor time: {0}&quot;, myProcess-&gt;UserProcessorTime );\n            Console::WriteLine( &quot;  privileged processor time: {0}&quot;, myProcess-&gt;PrivilegedProcessorTime );\n            Console::WriteLine( &quot;  total processor time: {0}&quot;, myProcess-&gt;TotalProcessorTime );\n\t\t\tConsole::WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;, myProcess-&gt;PagedSystemMemorySize64);\n            Console::WriteLine(&quot;  PagedMemorySize64: {0}&quot;, myProcess-&gt;PagedMemorySize64);\n            \n            // Update the values for the overall peak memory statistics.\n            peakPagedMem = myProcess-&gt;PeakPagedMemorySize64;\n            peakVirtualMem = myProcess-&gt;PeakVirtualMemorySize64;\n            peakWorkingSet = myProcess-&gt;PeakWorkingSet64;\n            if ( myProcess-&gt;Responding )\n            {\n               Console::WriteLine( &quot;Status = Running&quot; );\n            }\n            else\n            {\n               Console::WriteLine( &quot;Status = Not Responding&quot; );\n            }\n         }\n      }\n      while (  !myProcess-&gt;WaitForExit( 1000 ) );\n      Console::WriteLine();\n      Console::WriteLine( &quot;Process exit code: {0}&quot;, myProcess-&gt;ExitCode );\n      \n      // Display peak memory statistics for the process.\n      Console::WriteLine( &quot;Peak physical memory usage of the process: {0}&quot;, peakWorkingSet );\n      Console::WriteLine( &quot;Peak paged memory usage of the process: {0}&quot;, peakPagedMem );\n      Console::WriteLine( &quot;Peak virtual memory usage of the process: {0}&quot;, peakVirtualMem );\n   }\n   finally\n   {\n      if ( myProcess != nullptr )\n      {\n         myProcess-&gt;Close();\n      }\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Diag_Process_MemoryProperties64#1\">using System;\nusing System.Diagnostics;\n\nnamespace ProcessSample\n{\n    class ProcessMonitorSample\n    {\n        public static void Main()\n        {\n\n            // Define variables to track the peak\n            // memory usage of the process.\n            long peakPagedMem = 0,\n                peakWorkingSet = 0,\n                peakVirtualMem = 0;\n\n            Process myProcess = null;\n\n            try\n            {\n                // Start the process.\n                myProcess = Process.Start(&quot;NotePad.exe&quot;);\n\n                // Display the process statistics until\n                // the user closes the program.\n                do\n                {\n                    if (!myProcess.HasExited)\n                    {\n                        // Refresh the current process property values.\n                        myProcess.Refresh();\n\n                        Console.WriteLine();\n\n                        // Display current process statistics.\n\n                        Console.WriteLine(&quot;{0} -&quot;, myProcess.ToString());\n                        Console.WriteLine(&quot;-------------------------------------&quot;);\n\n                        Console.WriteLine(&quot;  physical memory usage: {0}&quot;,\n                            myProcess.WorkingSet64);\n                        Console.WriteLine(&quot;  base priority: {0}&quot;,\n                            myProcess.BasePriority);\n                        Console.WriteLine(&quot;  priority class: {0}&quot;,\n                            myProcess.PriorityClass);\n                        Console.WriteLine(&quot;  user processor time: {0}&quot;,\n                            myProcess.UserProcessorTime);\n                        Console.WriteLine(&quot;  privileged processor time: {0}&quot;,\n                            myProcess.PrivilegedProcessorTime);\n                        Console.WriteLine(&quot;  total processor time: {0}&quot;,\n                            myProcess.TotalProcessorTime);\n                        Console.WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;,\n                            myProcess.PagedSystemMemorySize64);\n                        Console.WriteLine(&quot;  PagedMemorySize64: {0}&quot;,\n                           myProcess.PagedMemorySize64);\n\n                        // Update the values for the overall peak memory statistics.\n                        peakPagedMem = myProcess.PeakPagedMemorySize64;\n                        peakVirtualMem = myProcess.PeakVirtualMemorySize64;\n                        peakWorkingSet = myProcess.PeakWorkingSet64;\n\n                        if (myProcess.Responding)\n                        {\n                            Console.WriteLine(&quot;Status = Running&quot;);\n                        }\n                        else\n                        {\n                            Console.WriteLine(&quot;Status = Not Responding&quot;);\n                        }\n                    }\n                }\n                while (!myProcess.WaitForExit(1000));\n\n\n                Console.WriteLine();\n                Console.WriteLine(&quot;Process exit code: {0}&quot;,\n                    myProcess.ExitCode);\n\n                // Display peak memory statistics for the process.\n                Console.WriteLine(&quot;Peak physical memory usage of the process: {0}&quot;,\n                    peakWorkingSet);\n                Console.WriteLine(&quot;Peak paged memory usage of the process: {0}&quot;,\n                    peakPagedMem);\n                Console.WriteLine(&quot;Peak virtual memory usage of the process: {0}&quot;,\n                    peakVirtualMem);\n\n            }\n            finally\n            {\n                if (myProcess != null)\n                {\n                    myProcess.Close();\n                }\n            }\n        }\n\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Diag_Process_MemoryProperties64#1\">Imports System\nImports System.Diagnostics\n\nNamespace ProcessSample\n    Class ProcessMonitorSample\n\n        Public Shared Sub Main()\n\n            &#39; Define variables to track the peak\n            &#39; memory usage of the process.\n            Dim peakPagedMem As Long = 0\n            Dim peakWorkingSet As Long = 0\n            Dim peakVirtualMem As Long = 0\n\n            Dim myProcess As Process = Nothing\n\n            Try\n\n                &#39; Start the process.\n                myProcess = Process.Start(&quot;NotePad.exe&quot;)\n\n                &#39; Display process statistics until\n                &#39; the user closes the program.\n                Do\n\n                    If Not myProcess.HasExited Then\n\n                        &#39; Refresh the current process property values.\n                        myProcess.Refresh()\n\n                        Console.WriteLine()\n\n                        &#39; Display current process statistics.\n\n                        Console.WriteLine(&quot;{0} -&quot;, myProcess.ToString())\n                        Console.WriteLine(&quot;-------------------------------------&quot;)\n\n                        Console.WriteLine(&quot;  physical memory usage: {0}&quot;, _\n                             myProcess.WorkingSet64)\n                        Console.WriteLine(&quot;  base priority: {0}&quot;, _\n                             myProcess.BasePriority)\n                        Console.WriteLine(&quot;  priority class: {0}&quot;, _\n                             myProcess.PriorityClass)\n                        Console.WriteLine(&quot;  user processor time: {0}&quot;, _\n                             myProcess.UserProcessorTime)\n                        Console.WriteLine(&quot;  privileged processor time: {0}&quot;, _\n                             myProcess.PrivilegedProcessorTime)\n                        Console.WriteLine(&quot;  total processor time: {0}&quot;, _\n                             myProcess.TotalProcessorTime)\n                        Console.WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;, _\n                            myProcess.PagedSystemMemorySize64)\n                        Console.WriteLine(&quot;  PagedMemorySize64: {0}&quot;, _\n                           myProcess.PagedMemorySize64)\n\n                        &#39; Update the values for the overall peak memory statistics.\n                        peakPagedMem = myProcess.PeakPagedMemorySize64\n                        peakVirtualMem = myProcess.PeakVirtualMemorySize64\n                        peakWorkingSet = myProcess.PeakWorkingSet64\n\n                        If myProcess.Responding Then\n                            Console.WriteLine(&quot;Status = Running&quot;)\n                        Else\n                            Console.WriteLine(&quot;Status = Not Responding&quot;)\n                        End If\n                    End If\n                Loop While Not myProcess.WaitForExit(1000)\n\n                Console.WriteLine()\n                Console.WriteLine(&quot;Process exit code: {0}&quot;, myProcess.ExitCode)\n\n                &#39; Display peak memory statistics for the process.\n                Console.WriteLine(&quot;Peak physical memory usage of the process: {0}&quot;, _\n                    peakWorkingSet)\n                Console.WriteLine(&quot;Peak paged memory usage of the process: {0}&quot;, _\n                    peakPagedMem)\n                Console.WriteLine(&quot;Peak virtual memory usage of the process: {0}&quot;, _\n                    peakVirtualMem)\n\n            Finally\n                If Not myProcess Is Nothing Then\n                    myProcess.Close()\n                End If\n            End Try\n        End Sub &#39;Main\n    End Class\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_VirtualMemorySize\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_VirtualMemorySize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">VirtualMemorySize</div>        \r\n          </div>\r\n    \r\n            <p>Gets the size of the process&#39;s virtual memory, in bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int VirtualMemorySize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The amount of virtual memory, in bytes, that the associated process has requested.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_VirtualMemorySize64\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_VirtualMemorySize64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">VirtualMemorySize64</div>        \r\n          </div>\r\n    \r\n            <p>Gets the amount of the virtual memory, in bytes, allocated for the associated process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public long VirtualMemorySize64 { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The amount of virtual memory, in bytes, allocated for the associated process.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value returned by this property represents the current size of virtual memory used by the process, in bytes. The operating system maps the virtual address space for each process either to pages loaded in physical memory, or to pages stored in the virtual memory paging file on disk.  </p>\n<p> This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors. The property value is equivalent to the <strong>Virtual Bytes</strong> performance counter for the process.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example starts an instance of the Notepad application. The example then retrieves and displays various properties of the associated process. The example detects when the process exits, and displays its exit code and peak memory statistics.  </p>\n<pre><code class=\"lang-cpp\" name=\"Diag_Process_MemoryProperties64#1\">#using &lt;system.dll&gt;\n\nusing namespace System;\nusing namespace System::Diagnostics;\nint main()\n{\n   \n   // Define variables to track the peak\n   // memory usage of the process.\n   _int64 peakPagedMem = 0,peakWorkingSet = 0,peakVirtualMem = 0;\n   Process^ myProcess = nullptr;\n   try\n   {\n      \n      // Start the process.\n      myProcess = Process::Start( &quot;NotePad.exe&quot; );\n      \n      // Display the process statistics until\n      // the user closes the program.\n      do\n      {\n         if (  !myProcess-&gt;HasExited )\n         {\n            \n            // Refresh the current process property values.\n            myProcess-&gt;Refresh();\n            Console::WriteLine();\n            \n            // Display current process statistics.\n            Console::WriteLine( &quot;{0} -&quot;, myProcess );\n            Console::WriteLine( &quot;-------------------------------------&quot; );\n            Console::WriteLine( &quot;  physical memory usage: {0}&quot;, myProcess-&gt;WorkingSet64 );\n            Console::WriteLine( &quot;  base priority: {0}&quot;, myProcess-&gt;BasePriority );\n            Console::WriteLine( &quot;  priority class: {0}&quot;, myProcess-&gt;PriorityClass );\n            Console::WriteLine( &quot;  user processor time: {0}&quot;, myProcess-&gt;UserProcessorTime );\n            Console::WriteLine( &quot;  privileged processor time: {0}&quot;, myProcess-&gt;PrivilegedProcessorTime );\n            Console::WriteLine( &quot;  total processor time: {0}&quot;, myProcess-&gt;TotalProcessorTime );\n\t\t\tConsole::WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;, myProcess-&gt;PagedSystemMemorySize64);\n            Console::WriteLine(&quot;  PagedMemorySize64: {0}&quot;, myProcess-&gt;PagedMemorySize64);\n            \n            // Update the values for the overall peak memory statistics.\n            peakPagedMem = myProcess-&gt;PeakPagedMemorySize64;\n            peakVirtualMem = myProcess-&gt;PeakVirtualMemorySize64;\n            peakWorkingSet = myProcess-&gt;PeakWorkingSet64;\n            if ( myProcess-&gt;Responding )\n            {\n               Console::WriteLine( &quot;Status = Running&quot; );\n            }\n            else\n            {\n               Console::WriteLine( &quot;Status = Not Responding&quot; );\n            }\n         }\n      }\n      while (  !myProcess-&gt;WaitForExit( 1000 ) );\n      Console::WriteLine();\n      Console::WriteLine( &quot;Process exit code: {0}&quot;, myProcess-&gt;ExitCode );\n      \n      // Display peak memory statistics for the process.\n      Console::WriteLine( &quot;Peak physical memory usage of the process: {0}&quot;, peakWorkingSet );\n      Console::WriteLine( &quot;Peak paged memory usage of the process: {0}&quot;, peakPagedMem );\n      Console::WriteLine( &quot;Peak virtual memory usage of the process: {0}&quot;, peakVirtualMem );\n   }\n   finally\n   {\n      if ( myProcess != nullptr )\n      {\n         myProcess-&gt;Close();\n      }\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Diag_Process_MemoryProperties64#1\">using System;\nusing System.Diagnostics;\n\nnamespace ProcessSample\n{\n    class ProcessMonitorSample\n    {\n        public static void Main()\n        {\n\n            // Define variables to track the peak\n            // memory usage of the process.\n            long peakPagedMem = 0,\n                peakWorkingSet = 0,\n                peakVirtualMem = 0;\n\n            Process myProcess = null;\n\n            try\n            {\n                // Start the process.\n                myProcess = Process.Start(&quot;NotePad.exe&quot;);\n\n                // Display the process statistics until\n                // the user closes the program.\n                do\n                {\n                    if (!myProcess.HasExited)\n                    {\n                        // Refresh the current process property values.\n                        myProcess.Refresh();\n\n                        Console.WriteLine();\n\n                        // Display current process statistics.\n\n                        Console.WriteLine(&quot;{0} -&quot;, myProcess.ToString());\n                        Console.WriteLine(&quot;-------------------------------------&quot;);\n\n                        Console.WriteLine(&quot;  physical memory usage: {0}&quot;,\n                            myProcess.WorkingSet64);\n                        Console.WriteLine(&quot;  base priority: {0}&quot;,\n                            myProcess.BasePriority);\n                        Console.WriteLine(&quot;  priority class: {0}&quot;,\n                            myProcess.PriorityClass);\n                        Console.WriteLine(&quot;  user processor time: {0}&quot;,\n                            myProcess.UserProcessorTime);\n                        Console.WriteLine(&quot;  privileged processor time: {0}&quot;,\n                            myProcess.PrivilegedProcessorTime);\n                        Console.WriteLine(&quot;  total processor time: {0}&quot;,\n                            myProcess.TotalProcessorTime);\n                        Console.WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;,\n                            myProcess.PagedSystemMemorySize64);\n                        Console.WriteLine(&quot;  PagedMemorySize64: {0}&quot;,\n                           myProcess.PagedMemorySize64);\n\n                        // Update the values for the overall peak memory statistics.\n                        peakPagedMem = myProcess.PeakPagedMemorySize64;\n                        peakVirtualMem = myProcess.PeakVirtualMemorySize64;\n                        peakWorkingSet = myProcess.PeakWorkingSet64;\n\n                        if (myProcess.Responding)\n                        {\n                            Console.WriteLine(&quot;Status = Running&quot;);\n                        }\n                        else\n                        {\n                            Console.WriteLine(&quot;Status = Not Responding&quot;);\n                        }\n                    }\n                }\n                while (!myProcess.WaitForExit(1000));\n\n\n                Console.WriteLine();\n                Console.WriteLine(&quot;Process exit code: {0}&quot;,\n                    myProcess.ExitCode);\n\n                // Display peak memory statistics for the process.\n                Console.WriteLine(&quot;Peak physical memory usage of the process: {0}&quot;,\n                    peakWorkingSet);\n                Console.WriteLine(&quot;Peak paged memory usage of the process: {0}&quot;,\n                    peakPagedMem);\n                Console.WriteLine(&quot;Peak virtual memory usage of the process: {0}&quot;,\n                    peakVirtualMem);\n\n            }\n            finally\n            {\n                if (myProcess != null)\n                {\n                    myProcess.Close();\n                }\n            }\n        }\n\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Diag_Process_MemoryProperties64#1\">Imports System\nImports System.Diagnostics\n\nNamespace ProcessSample\n    Class ProcessMonitorSample\n\n        Public Shared Sub Main()\n\n            &#39; Define variables to track the peak\n            &#39; memory usage of the process.\n            Dim peakPagedMem As Long = 0\n            Dim peakWorkingSet As Long = 0\n            Dim peakVirtualMem As Long = 0\n\n            Dim myProcess As Process = Nothing\n\n            Try\n\n                &#39; Start the process.\n                myProcess = Process.Start(&quot;NotePad.exe&quot;)\n\n                &#39; Display process statistics until\n                &#39; the user closes the program.\n                Do\n\n                    If Not myProcess.HasExited Then\n\n                        &#39; Refresh the current process property values.\n                        myProcess.Refresh()\n\n                        Console.WriteLine()\n\n                        &#39; Display current process statistics.\n\n                        Console.WriteLine(&quot;{0} -&quot;, myProcess.ToString())\n                        Console.WriteLine(&quot;-------------------------------------&quot;)\n\n                        Console.WriteLine(&quot;  physical memory usage: {0}&quot;, _\n                             myProcess.WorkingSet64)\n                        Console.WriteLine(&quot;  base priority: {0}&quot;, _\n                             myProcess.BasePriority)\n                        Console.WriteLine(&quot;  priority class: {0}&quot;, _\n                             myProcess.PriorityClass)\n                        Console.WriteLine(&quot;  user processor time: {0}&quot;, _\n                             myProcess.UserProcessorTime)\n                        Console.WriteLine(&quot;  privileged processor time: {0}&quot;, _\n                             myProcess.PrivilegedProcessorTime)\n                        Console.WriteLine(&quot;  total processor time: {0}&quot;, _\n                             myProcess.TotalProcessorTime)\n                        Console.WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;, _\n                            myProcess.PagedSystemMemorySize64)\n                        Console.WriteLine(&quot;  PagedMemorySize64: {0}&quot;, _\n                           myProcess.PagedMemorySize64)\n\n                        &#39; Update the values for the overall peak memory statistics.\n                        peakPagedMem = myProcess.PeakPagedMemorySize64\n                        peakVirtualMem = myProcess.PeakVirtualMemorySize64\n                        peakWorkingSet = myProcess.PeakWorkingSet64\n\n                        If myProcess.Responding Then\n                            Console.WriteLine(&quot;Status = Running&quot;)\n                        Else\n                            Console.WriteLine(&quot;Status = Not Responding&quot;)\n                        End If\n                    End If\n                Loop While Not myProcess.WaitForExit(1000)\n\n                Console.WriteLine()\n                Console.WriteLine(&quot;Process exit code: {0}&quot;, myProcess.ExitCode)\n\n                &#39; Display peak memory statistics for the process.\n                Console.WriteLine(&quot;Peak physical memory usage of the process: {0}&quot;, _\n                    peakWorkingSet)\n                Console.WriteLine(&quot;Peak paged memory usage of the process: {0}&quot;, _\n                    peakPagedMem)\n                Console.WriteLine(&quot;Peak virtual memory usage of the process: {0}&quot;, _\n                    peakVirtualMem)\n\n            Finally\n                If Not myProcess Is Nothing Then\n                    myProcess.Close()\n                End If\n            End Try\n        End Sub &#39;Main\n    End Class\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_WorkingSet\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_WorkingSet_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WorkingSet</div>        \r\n          </div>\r\n    \r\n            <p>Gets the associated process&#39;s physical memory usage, in bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int WorkingSet { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The total amount of physical memory the associated process is using, in bytes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value returned by this property represents the current size of working set memory used by the process, in bytes. The working set of a process is the set of memory pages currently visible to the process in physical RAM memory. These pages are resident and available for an application to use without triggering a page fault.  </p>\n<p> The working set includes both shared and private data. The shared data includes the pages that contain all the instructions that the process executes, including the process modules and the system libraries.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example starts an instance of Notepad. The example then retrieves and displays various properties of the associated process. The example detects when the process exits, and displays the process&#39; exit code.  </p>\n<pre><code class=\"lang-vb\" name=\"process_sample#1\">Imports System\nImports System.Diagnostics\nImports System.Threading\n\nNamespace Process_Sample\n   Class MyProcessClass\n\n      Public Shared Sub Main()\n         Try\n\n            Dim myProcess As Process\n            myProcess = Process.Start(&quot;NotePad.exe&quot;)\n\n            While Not myProcess.HasExited\n\n               Console.WriteLine()\n               \n               &#39; Get physical memory usage of the associated process.\n               Console.WriteLine(&quot;Process&#39;s physical memory usage: &quot; + _\n                                      myProcess.WorkingSet.ToString)\n               &#39; Get base priority of the associated process.\n               Console.WriteLine(&quot;Base priority of the associated process: &quot; + _\n                                      myProcess.BasePriority.ToString)\n               &#39; Get priority class of the associated process.\n               Console.WriteLine(&quot;Priority class of the associated process: &quot; + _\n                                      myProcess.PriorityClass.ToString)\n               &#39; Get user processor time for this process.\n               Console.WriteLine(&quot;User Processor Time: &quot; + _\n                                      myProcess.UserProcessorTime.ToString)\n               &#39; Get privileged processor time for this process.\n               Console.WriteLine(&quot;Privileged Processor Time: &quot; + _\n                                   myProcess.PrivilegedProcessorTime.ToString)\n               &#39; Get total processor time for this process.\n               Console.WriteLine(&quot;Total Processor Time: &quot; + _\n                                     myProcess.TotalProcessorTime.ToString)\n               &#39; Invoke overloaded ToString function.\n               Console.WriteLine(&quot;Process&#39;s Name: &quot; + myProcess.ToString)\n               Console.WriteLine(&quot;-------------------------------------&quot;)\n\n               If myProcess.Responding Then\n                  Console.WriteLine(&quot;Status:  Responding to user interface&quot;)\n                  myProcess.Refresh()\n               Else\n                  Console.WriteLine(&quot;Status:  Not Responding&quot;)\n               End If\n               Thread.Sleep(1000)\n            End While\n\n            Console.WriteLine()\n            Console.WriteLine(&quot;Process exit code: {0}&quot;, myProcess.ExitCode)\n\n         Catch e As Exception\n            Console.WriteLine(&quot;The following exception was raised: &quot; + e.Message)\n         End Try\n      End Sub &#39;Main\n   End Class &#39;MyProcessClass\nEnd Namespace &#39;Process_Sample\n</code></pre><pre><code class=\"lang-cpp\" name=\"process_sample#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Diagnostics;\nusing namespace System::Threading;\nint main()\n{\n   try\n   {\n      Process^ myProcess;\n      myProcess = Process::Start( &quot;NotePad.exe&quot; );\n      while (  !myProcess-&gt;HasExited )\n      {\n         Console::WriteLine();\n         \n         // Get physical memory usage of the associated process.\n         Console::WriteLine( &quot;Process&#39;s physical memory usage: {0}&quot;, myProcess-&gt;WorkingSet.ToString() );\n         \n         // Get base priority of the associated process.\n         Console::WriteLine( &quot;Base priority of the associated process: {0}&quot;, myProcess-&gt;BasePriority.ToString() );\n         \n         // Get priority class of the associated process.\n         Console::WriteLine(  &quot;Priority class of the associated process: {0}&quot;, myProcess-&gt;PriorityClass );\n         \n         // Get user processor time for this process.\n         Console::WriteLine( &quot;User Processor Time: {0}&quot;, myProcess-&gt;UserProcessorTime.ToString() );\n         \n         // Get privileged processor time for this process.\n         Console::WriteLine( &quot;Privileged Processor Time: {0}&quot;, myProcess-&gt;PrivilegedProcessorTime.ToString() );\n         \n         // Get total processor time for this process.\n         Console::WriteLine( &quot;Total Processor Time: {0}&quot;, myProcess-&gt;TotalProcessorTime.ToString() );\n         \n         // Invoke overloaded ToString function.\n         Console::WriteLine( &quot;Process&#39;s Name: {0}&quot;, myProcess-&gt;ToString() );\n         Console::WriteLine( &quot;-------------------------------------&quot; );\n         if ( myProcess-&gt;Responding )\n         {\n            Console::WriteLine( &quot;Status:  Responding to user interface&quot; );\n            myProcess-&gt;Refresh();\n         }\n         else\n         {\n            Console::WriteLine( &quot;Status:  Not Responding&quot; );\n         }\n         Thread::Sleep( 1000 );\n      }\n      Console::WriteLine();\n      Console::WriteLine(  &quot;Process exit code: {0}&quot;, myProcess-&gt;ExitCode.ToString() );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;The following exception was raised:  {0}&quot;, e-&gt;Message );\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"process_sample#1\">using System;\nusing System.Diagnostics;\nusing System.Threading;\n\nnamespace Process_Sample\n{\n   class MyProcessClass\n   {\n      public static void Main()\n      {\n         try\n         {\n\n            Process myProcess;\n            myProcess = Process.Start(&quot;NotePad.exe&quot;);\n\n            while(!myProcess.HasExited)\n            {\n               Console.WriteLine();\n\n               // Get physical memory usage of the associated process.\n               Console.WriteLine(&quot;Process&#39;s physical memory usage: &quot; + myProcess.WorkingSet);\n               // Get base priority of the associated process.\n               Console.WriteLine(&quot;Base priority of the associated process: &quot; + myProcess.BasePriority);\n               // Get priority class of the associated process.\n               Console.WriteLine(&quot;Priority class of the associated process: &quot; + myProcess.PriorityClass);\n               // Get user processor time for this process.\n               Console.WriteLine(&quot;User Processor Time: &quot; + myProcess.UserProcessorTime);\n               // Get privileged processor time for this process.\n               Console.WriteLine(&quot;Privileged Processor Time: &quot; + myProcess.PrivilegedProcessorTime);\n               // Get total processor time for this process.\n               Console.WriteLine(&quot;Total Processor Time: &quot; + myProcess.TotalProcessorTime);\n               // Invoke overloaded ToString function.\n               Console.WriteLine(&quot;Process&#39;s Name: &quot; + myProcess.ToString());\n               Console.WriteLine(&quot;-------------------------------------&quot;);\n\n               if(myProcess.Responding)\n               {\n                  Console.WriteLine(&quot;Status:  Responding to user interface&quot;);\n                  myProcess.Refresh();\n               }\n               else\n               {\n                  Console.WriteLine(&quot;Status:  Not Responding&quot;);\n               }\n               Thread.Sleep(1000);\n\n            }\n\n            Console.WriteLine();\n            Console.WriteLine(&quot;Process exit code: {0}&quot;, myProcess.ExitCode);\n         }\n         catch(Exception e)\n         {\n            Console.WriteLine(&quot;The following exception was raised: &quot; + e.Message);\n         }\n      }\n\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_WorkingSet64\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_WorkingSet64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WorkingSet64</div>        \r\n          </div>\r\n    \r\n            <p>Gets the amount of physical memory, in bytes, allocated for the associated process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public long WorkingSet64 { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The amount of physical memory, in bytes, allocated for the associated process.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value returned by this property represents the current size of working set memory used by the process, in bytes. The working set of a process is the set of memory pages currently visible to the process in physical RAM memory. These pages are resident and available for an application to use without triggering a page fault.  </p>\n<p> The working set includes both shared and private data. The shared data includes the pages that contain all the instructions that the process executes, including instructions in the process modules and the system libraries.  </p>\n<p> This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors. The property value is equivalent to the <strong>Working Set</strong> performance counter for the process.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example starts an instance of the Notepad application. The example then retrieves and displays various properties of the associated process. The example detects when the process exits, and displays its exit code and peak memory statistics.  </p>\n<pre><code class=\"lang-cpp\" name=\"Diag_Process_MemoryProperties64#1\">#using &lt;system.dll&gt;\n\nusing namespace System;\nusing namespace System::Diagnostics;\nint main()\n{\n   \n   // Define variables to track the peak\n   // memory usage of the process.\n   _int64 peakPagedMem = 0,peakWorkingSet = 0,peakVirtualMem = 0;\n   Process^ myProcess = nullptr;\n   try\n   {\n      \n      // Start the process.\n      myProcess = Process::Start( &quot;NotePad.exe&quot; );\n      \n      // Display the process statistics until\n      // the user closes the program.\n      do\n      {\n         if (  !myProcess-&gt;HasExited )\n         {\n            \n            // Refresh the current process property values.\n            myProcess-&gt;Refresh();\n            Console::WriteLine();\n            \n            // Display current process statistics.\n            Console::WriteLine( &quot;{0} -&quot;, myProcess );\n            Console::WriteLine( &quot;-------------------------------------&quot; );\n            Console::WriteLine( &quot;  physical memory usage: {0}&quot;, myProcess-&gt;WorkingSet64 );\n            Console::WriteLine( &quot;  base priority: {0}&quot;, myProcess-&gt;BasePriority );\n            Console::WriteLine( &quot;  priority class: {0}&quot;, myProcess-&gt;PriorityClass );\n            Console::WriteLine( &quot;  user processor time: {0}&quot;, myProcess-&gt;UserProcessorTime );\n            Console::WriteLine( &quot;  privileged processor time: {0}&quot;, myProcess-&gt;PrivilegedProcessorTime );\n            Console::WriteLine( &quot;  total processor time: {0}&quot;, myProcess-&gt;TotalProcessorTime );\n\t\t\tConsole::WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;, myProcess-&gt;PagedSystemMemorySize64);\n            Console::WriteLine(&quot;  PagedMemorySize64: {0}&quot;, myProcess-&gt;PagedMemorySize64);\n            \n            // Update the values for the overall peak memory statistics.\n            peakPagedMem = myProcess-&gt;PeakPagedMemorySize64;\n            peakVirtualMem = myProcess-&gt;PeakVirtualMemorySize64;\n            peakWorkingSet = myProcess-&gt;PeakWorkingSet64;\n            if ( myProcess-&gt;Responding )\n            {\n               Console::WriteLine( &quot;Status = Running&quot; );\n            }\n            else\n            {\n               Console::WriteLine( &quot;Status = Not Responding&quot; );\n            }\n         }\n      }\n      while (  !myProcess-&gt;WaitForExit( 1000 ) );\n      Console::WriteLine();\n      Console::WriteLine( &quot;Process exit code: {0}&quot;, myProcess-&gt;ExitCode );\n      \n      // Display peak memory statistics for the process.\n      Console::WriteLine( &quot;Peak physical memory usage of the process: {0}&quot;, peakWorkingSet );\n      Console::WriteLine( &quot;Peak paged memory usage of the process: {0}&quot;, peakPagedMem );\n      Console::WriteLine( &quot;Peak virtual memory usage of the process: {0}&quot;, peakVirtualMem );\n   }\n   finally\n   {\n      if ( myProcess != nullptr )\n      {\n         myProcess-&gt;Close();\n      }\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Diag_Process_MemoryProperties64#1\">using System;\nusing System.Diagnostics;\n\nnamespace ProcessSample\n{\n    class ProcessMonitorSample\n    {\n        public static void Main()\n        {\n\n            // Define variables to track the peak\n            // memory usage of the process.\n            long peakPagedMem = 0,\n                peakWorkingSet = 0,\n                peakVirtualMem = 0;\n\n            Process myProcess = null;\n\n            try\n            {\n                // Start the process.\n                myProcess = Process.Start(&quot;NotePad.exe&quot;);\n\n                // Display the process statistics until\n                // the user closes the program.\n                do\n                {\n                    if (!myProcess.HasExited)\n                    {\n                        // Refresh the current process property values.\n                        myProcess.Refresh();\n\n                        Console.WriteLine();\n\n                        // Display current process statistics.\n\n                        Console.WriteLine(&quot;{0} -&quot;, myProcess.ToString());\n                        Console.WriteLine(&quot;-------------------------------------&quot;);\n\n                        Console.WriteLine(&quot;  physical memory usage: {0}&quot;,\n                            myProcess.WorkingSet64);\n                        Console.WriteLine(&quot;  base priority: {0}&quot;,\n                            myProcess.BasePriority);\n                        Console.WriteLine(&quot;  priority class: {0}&quot;,\n                            myProcess.PriorityClass);\n                        Console.WriteLine(&quot;  user processor time: {0}&quot;,\n                            myProcess.UserProcessorTime);\n                        Console.WriteLine(&quot;  privileged processor time: {0}&quot;,\n                            myProcess.PrivilegedProcessorTime);\n                        Console.WriteLine(&quot;  total processor time: {0}&quot;,\n                            myProcess.TotalProcessorTime);\n                        Console.WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;,\n                            myProcess.PagedSystemMemorySize64);\n                        Console.WriteLine(&quot;  PagedMemorySize64: {0}&quot;,\n                           myProcess.PagedMemorySize64);\n\n                        // Update the values for the overall peak memory statistics.\n                        peakPagedMem = myProcess.PeakPagedMemorySize64;\n                        peakVirtualMem = myProcess.PeakVirtualMemorySize64;\n                        peakWorkingSet = myProcess.PeakWorkingSet64;\n\n                        if (myProcess.Responding)\n                        {\n                            Console.WriteLine(&quot;Status = Running&quot;);\n                        }\n                        else\n                        {\n                            Console.WriteLine(&quot;Status = Not Responding&quot;);\n                        }\n                    }\n                }\n                while (!myProcess.WaitForExit(1000));\n\n\n                Console.WriteLine();\n                Console.WriteLine(&quot;Process exit code: {0}&quot;,\n                    myProcess.ExitCode);\n\n                // Display peak memory statistics for the process.\n                Console.WriteLine(&quot;Peak physical memory usage of the process: {0}&quot;,\n                    peakWorkingSet);\n                Console.WriteLine(&quot;Peak paged memory usage of the process: {0}&quot;,\n                    peakPagedMem);\n                Console.WriteLine(&quot;Peak virtual memory usage of the process: {0}&quot;,\n                    peakVirtualMem);\n\n            }\n            finally\n            {\n                if (myProcess != null)\n                {\n                    myProcess.Close();\n                }\n            }\n        }\n\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Diag_Process_MemoryProperties64#1\">Imports System\nImports System.Diagnostics\n\nNamespace ProcessSample\n    Class ProcessMonitorSample\n\n        Public Shared Sub Main()\n\n            &#39; Define variables to track the peak\n            &#39; memory usage of the process.\n            Dim peakPagedMem As Long = 0\n            Dim peakWorkingSet As Long = 0\n            Dim peakVirtualMem As Long = 0\n\n            Dim myProcess As Process = Nothing\n\n            Try\n\n                &#39; Start the process.\n                myProcess = Process.Start(&quot;NotePad.exe&quot;)\n\n                &#39; Display process statistics until\n                &#39; the user closes the program.\n                Do\n\n                    If Not myProcess.HasExited Then\n\n                        &#39; Refresh the current process property values.\n                        myProcess.Refresh()\n\n                        Console.WriteLine()\n\n                        &#39; Display current process statistics.\n\n                        Console.WriteLine(&quot;{0} -&quot;, myProcess.ToString())\n                        Console.WriteLine(&quot;-------------------------------------&quot;)\n\n                        Console.WriteLine(&quot;  physical memory usage: {0}&quot;, _\n                             myProcess.WorkingSet64)\n                        Console.WriteLine(&quot;  base priority: {0}&quot;, _\n                             myProcess.BasePriority)\n                        Console.WriteLine(&quot;  priority class: {0}&quot;, _\n                             myProcess.PriorityClass)\n                        Console.WriteLine(&quot;  user processor time: {0}&quot;, _\n                             myProcess.UserProcessorTime)\n                        Console.WriteLine(&quot;  privileged processor time: {0}&quot;, _\n                             myProcess.PrivilegedProcessorTime)\n                        Console.WriteLine(&quot;  total processor time: {0}&quot;, _\n                             myProcess.TotalProcessorTime)\n                        Console.WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;, _\n                            myProcess.PagedSystemMemorySize64)\n                        Console.WriteLine(&quot;  PagedMemorySize64: {0}&quot;, _\n                           myProcess.PagedMemorySize64)\n\n                        &#39; Update the values for the overall peak memory statistics.\n                        peakPagedMem = myProcess.PeakPagedMemorySize64\n                        peakVirtualMem = myProcess.PeakVirtualMemorySize64\n                        peakWorkingSet = myProcess.PeakWorkingSet64\n\n                        If myProcess.Responding Then\n                            Console.WriteLine(&quot;Status = Running&quot;)\n                        Else\n                            Console.WriteLine(&quot;Status = Not Responding&quot;)\n                        End If\n                    End If\n                Loop While Not myProcess.WaitForExit(1000)\n\n                Console.WriteLine()\n                Console.WriteLine(&quot;Process exit code: {0}&quot;, myProcess.ExitCode)\n\n                &#39; Display peak memory statistics for the process.\n                Console.WriteLine(&quot;Peak physical memory usage of the process: {0}&quot;, _\n                    peakWorkingSet)\n                Console.WriteLine(&quot;Peak paged memory usage of the process: {0}&quot;, _\n                    peakPagedMem)\n                Console.WriteLine(&quot;Peak virtual memory usage of the process: {0}&quot;, _\n                    peakVirtualMem)\n\n            Finally\n                If Not myProcess Is Nothing Then\n                    myProcess.Close()\n                End If\n            End Try\n        End Sub &#39;Main\n    End Class\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_BeginErrorReadLine\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_BeginErrorReadLine_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginErrorReadLine()</div>        \r\n          </div>\r\n    \r\n            <p>Begins asynchronous read operations on the redirected <span class=\"xref\">stem.Diagnostics.Process.StandardError*</span> stream of the application.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void BeginErrorReadLine ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Diagnostics.ProcessStartInfo.RedirectStandardError*</span> property is <code>false</code>.  </p>\n<p> - or -  </p>\n<p> An asynchronous read operation is already in progress on the <span class=\"xref\">stem.Diagnostics.Process.StandardError*</span> stream.  </p>\n<p> - or -  </p>\n<p> The <span class=\"xref\">stem.Diagnostics.Process.StandardError*</span> stream has been used by a synchronous read operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardError_\" data-linktype=\"relative-path\">StandardError</a> stream can be read synchronously or asynchronously. Methods such as <a class=\"xref\" href=\"system.io.streamreader#System_IO_StreamReader_Read_\" data-linktype=\"relative-path\">Read</a>, <a class=\"xref\" href=\"system.io.streamreader#System_IO_StreamReader_ReadLine_\" data-linktype=\"relative-path\">ReadLine</a>, and <a class=\"xref\" href=\"system.io.streamreader#System_IO_StreamReader_ReadToEnd_\" data-linktype=\"relative-path\">ReadToEnd</a> perform synchronous read operations on the error output stream of the process. These synchronous read operations do not complete until the associated <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> writes to its <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardError_\" data-linktype=\"relative-path\">StandardError</a> stream, or closes the stream.  </p>\n<p> In contrast, BeginErrorReadLine starts asynchronous read operations on the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardError_\" data-linktype=\"relative-path\">StandardError</a> stream. This method enables the designated event handler for the stream output and immediately returns to the caller, which can perform other work while the stream output is directed to the event handler.  </p>\n<p> Follow these steps to perform asynchronous read operations on <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardError_\" data-linktype=\"relative-path\">StandardError</a> for a <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> :  </p>\n<ol>\n<li><p>Set <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_UseShellExecute_\" data-linktype=\"relative-path\">UseShellExecute</a> to <code>false</code>.  </p>\n</li>\n<li><p>Set <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_RedirectStandardError_\" data-linktype=\"relative-path\">RedirectStandardError</a> to <code>true</code>.  </p>\n</li>\n<li><p>Add your event handler to the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_ErrorDataReceived\" data-linktype=\"relative-path\">ErrorDataReceived</a> event. The event handler must match the <a class=\"xref\" href=\"system.diagnostics.datareceivedeventhandler\" data-linktype=\"relative-path\">System.Diagnostics.DataReceivedEventHandler</a> delegate signature.  </p>\n</li>\n<li><p>Start the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a>.  </p>\n</li>\n<li><p>Call BeginErrorReadLine for the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a>. This call starts asynchronous read operations on <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardError_\" data-linktype=\"relative-path\">StandardError</a>.  </p>\n<p>When asynchronous read operations start, the event handler is called each time the associated <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> writes a line of text to its <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardError_\" data-linktype=\"relative-path\">StandardError</a> stream.  </p>\n<p>You can cancel an asynchronous read operation by calling <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_CancelErrorRead_\" data-linktype=\"relative-path\">CancelErrorRead</a>. The read operation can be canceled by the caller or by the event handler. After canceling, you can call BeginErrorReadLine again to resume asynchronous read operations.  </p>\n</li>\n</ol>\n<div class=\"NOTE\"><h5>Note</h5><p> You cannot mix asynchronous and synchronous read operations on a redirected stream. Once the redirected stream of a <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> is opened in either asynchronous or synchronous mode, all further read operations on that stream must be in the same mode. For example, do not follow BeginErrorReadLine with a call to <a class=\"xref\" href=\"system.io.streamreader#System_IO_StreamReader_ReadLine_\" data-linktype=\"relative-path\">ReadLine</a> on the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardError_\" data-linktype=\"relative-path\">StandardError</a> stream, or vice versa. However, you can read two different streams in different modes. For example, you can call BeginErrorReadLine and then call <a class=\"xref\" href=\"system.io.streamreader#System_IO_StreamReader_ReadLine_\" data-linktype=\"relative-path\">ReadLine</a> for the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardOutput_\" data-linktype=\"relative-path\">StandardOutput</a> stream.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <code>net view</code> command to list the available network resources on a remote computer. The user supplies the target computer name as a command-line argument. The user can also supply a file name for error output. The example collects the output of the net command, waits for the process to finish, and then writes the output results to the console. If the user supplies the optional error file, the example writes errors to the file.  </p>\n<pre><code class=\"lang-cpp\" name=\"Process_AsyncStreams#2\">// Define the namespaces used by this sample.\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Text;\nusing namespace System::Globalization;\nusing namespace System::IO;\nusing namespace System::Diagnostics;\nusing namespace System::Threading;\nusing namespace System::ComponentModel;\n\nref class ProcessNetStreamRedirection\n{\nprivate:\n   // Define static variables shared by class methods.\n   static StreamWriter^ streamError = nullptr;\n   static String^ netErrorFile = &quot;&quot;;\n   static StringBuilder^ netOutput = nullptr;\n   static bool errorRedirect = false;\n   static bool errorsWritten = false;\n\npublic:\n   static void RedirectNetCommandStreams()\n   {\n      String^ netArguments;\n      Process^ netProcess;\n      \n      // Get the input computer name.\n      Console::WriteLine( &quot;Enter the computer name for the net view command:&quot; );\n      netArguments = Console::ReadLine()-&gt;ToUpper( CultureInfo::InvariantCulture );\n      if ( String::IsNullOrEmpty( netArguments ) )\n      {\n         // Default to the help command if there is not an input argument.\n         netArguments = &quot;/?&quot;;\n      }\n      \n      // Check if errors should be redirected to a file.\n      errorsWritten = false;\n      Console::WriteLine( &quot;Enter a fully qualified path to an error log file&quot; );\n      Console::WriteLine( &quot;  or just press Enter to write errors to console:&quot; );\n      netErrorFile = Console::ReadLine()-&gt;ToUpper( CultureInfo::InvariantCulture );\n      if (  !String::IsNullOrEmpty( netErrorFile ) )\n      {\n         errorRedirect = true;\n      }\n      \n      // Note that at this point, netArguments and netErrorFile\n      // are set with user input.  If the user did not specify\n      // an error file, then errorRedirect is set to false.\n\n      // Initialize the process and its StartInfo properties.\n      netProcess = gcnew Process;\n      netProcess-&gt;StartInfo-&gt;FileName = &quot;Net.exe&quot;;\n      \n      // Build the net command argument list.\n      netProcess-&gt;StartInfo-&gt;Arguments = String::Format( &quot;view {0}&quot;, netArguments );\n      \n      // Set UseShellExecute to false for redirection.\n      netProcess-&gt;StartInfo-&gt;UseShellExecute = false;\n      \n      // Redirect the standard output of the net command.  \n      // This stream is read asynchronously using an event handler.\n      netProcess-&gt;StartInfo-&gt;RedirectStandardOutput = true;\n      netProcess-&gt;OutputDataReceived += gcnew DataReceivedEventHandler( NetOutputDataHandler );\n      netOutput = gcnew StringBuilder;\n      if ( errorRedirect )\n      {\n         \n         // Redirect the error output of the net command. \n         netProcess-&gt;StartInfo-&gt;RedirectStandardError = true;\n         netProcess-&gt;ErrorDataReceived += gcnew DataReceivedEventHandler( NetErrorDataHandler );\n      }\n      else\n      {\n         \n         // Do not redirect the error output.\n         netProcess-&gt;StartInfo-&gt;RedirectStandardError = false;\n      }\n\n      Console::WriteLine( &quot;<br>Starting process: net {0}&quot;,\n         netProcess-&gt;StartInfo-&gt;Arguments );\n      if ( errorRedirect )\n      {\n         Console::WriteLine( &quot;Errors will be written to the file {0}&quot;, netErrorFile );\n      }\n      \n      // Start the process.\n      netProcess-&gt;Start();\n      \n      // Start the asynchronous read of the standard output stream.\n      netProcess-&gt;BeginOutputReadLine();\n\n      if ( errorRedirect )\n      {\n         // Start the asynchronous read of the standard\n         // error stream.\n         netProcess-&gt;BeginErrorReadLine();\n      }\n      \n      // Let the net command run, collecting the output.\n      netProcess-&gt;WaitForExit();\n\n      if ( streamError != nullptr )\n      {\n         // Close the error file.\n         streamError-&gt;Close();\n      }\n      else\n      {\n         // Set errorsWritten to false if the stream is not\n         // open.   Either there are no errors, or the error\n         // file could not be opened.\n         errorsWritten = false;\n      }\n\n      if ( netOutput-&gt;Length &gt; 0 )\n      {\n         // If the process wrote more than just\n         // white space, write the output to the console.\n         Console::WriteLine( &quot;<br>Public network shares from net view:<br>{0}<br>&quot;,\n            netOutput-&gt;ToString() );\n      }\n\n      if ( errorsWritten )\n      {\n         // Signal that the error file had something \n         // written to it.\n         array&lt;String^&gt;^errorOutput = File::ReadAllLines( netErrorFile );\n         if ( errorOutput-&gt;Length &gt; 0 )\n         {\n            Console::WriteLine( &quot;<br>The following error output was appended to {0}.&quot;,\n               netErrorFile );\n            System::Collections::IEnumerator^ myEnum = errorOutput-&gt;GetEnumerator();\n            while ( myEnum-&gt;MoveNext() )\n            {\n               String^ errLine = safe_cast&lt;String^&gt;(myEnum-&gt;Current);\n               Console::WriteLine( &quot;  {0}&quot;, errLine );\n            }\n         }\n         Console::WriteLine();\n      }\n\n      netProcess-&gt;Close();\n\n   }\n\nprivate:\n   static void NetOutputDataHandler( Object^ /*sendingProcess*/,\n      DataReceivedEventArgs^ outLine )\n   {\n      // Collect the net view command output.\n      if (  !String::IsNullOrEmpty( outLine-&gt;Data ) )\n      {\n         // Add the text to the collected output.\n         netOutput-&gt;AppendFormat(  &quot;<br>  {0}&quot;, outLine-&gt;Data );\n      }\n   }\n\n   static void NetErrorDataHandler( Object^ /*sendingProcess*/,\n      DataReceivedEventArgs^ errLine )\n   {\n      // Write the error text to the file if there is something to \n      // write and an error file has been specified.\n\n      if (  !String::IsNullOrEmpty( errLine-&gt;Data ) )\n      {\n         if (  !errorsWritten )\n         {\n            if ( streamError == nullptr )\n            {\n               // Open the file.\n               try\n               {\n                  streamError = gcnew StreamWriter( netErrorFile,true );\n               }\n               catch ( Exception^ e ) \n               {\n                  Console::WriteLine(  &quot;Could not open error file!&quot; );\n                  Console::WriteLine( e-&gt;Message-&gt;ToString() );\n               }\n            }\n\n            if ( streamError != nullptr )\n            {\n               // Write a header to the file if this is the first\n               // call to the error output handler.\n               streamError-&gt;WriteLine();\n               streamError-&gt;WriteLine( DateTime::Now.ToString() );\n               streamError-&gt;WriteLine(  &quot;Net View error output:&quot; );\n            }\n            errorsWritten = true;\n         }\n\n         if ( streamError != nullptr )\n         {\n            // Write redirected errors to the file.\n            streamError-&gt;WriteLine( errLine-&gt;Data );\n            streamError-&gt;Flush();\n         }\n      }\n   }\n};\n</code></pre><pre><code class=\"lang-cs\" name=\"Process_AsyncStreams#2\">// Define the namespaces used by this sample.\nusing System;\nusing System.Text;\nusing System.Globalization;\nusing System.IO;\nusing System.Diagnostics;\nusing System.Threading;\nusing System.ComponentModel;\n\n\nnamespace ProcessAsyncStreamSamples\n{\n\n    class ProcessNetStreamRedirection\n    {\n        // Define static variables shared by class methods.\n        private static StreamWriter streamError =null;\n        private static String netErrorFile = &quot;&quot;;\n        private static StringBuilder netOutput = null;\n        private static bool errorRedirect = false;\n        private static bool errorsWritten = false;\n\n        public static void RedirectNetCommandStreams()\n        {\n            String netArguments;\n            Process netProcess;\n\n            // Get the input computer name.\n            Console.WriteLine(&quot;Enter the computer name for the net view command:&quot;);\n            netArguments = Console.ReadLine().ToUpper(CultureInfo.InvariantCulture);\n            if (String.IsNullOrEmpty(netArguments))\n            {\n                // Default to the help command if there is not an input argument.\n                netArguments = &quot;/?&quot;;\n            }\n               \n            // Check if errors should be redirected to a file.\n            errorsWritten = false;\n            Console.WriteLine(&quot;Enter a fully qualified path to an error log file&quot;);\n            Console.WriteLine(&quot;  or just press Enter to write errors to console:&quot;);\n            netErrorFile = Console.ReadLine().ToUpper(CultureInfo.InvariantCulture);\n            if (!String.IsNullOrEmpty(netErrorFile))\n            {\n                errorRedirect = true;\n            }\n\n            // Note that at this point, netArguments and netErrorFile\n            // are set with user input.  If the user did not specify\n            // an error file, then errorRedirect is set to false.\n      \n            // Initialize the process and its StartInfo properties.\n            netProcess = new Process();\n            netProcess.StartInfo.FileName = &quot;Net.exe&quot;;\n            \n            // Build the net command argument list.\n            netProcess.StartInfo.Arguments = String.Format(&quot;view {0}&quot;, \n                netArguments);\n\n            // Set UseShellExecute to false for redirection.\n            netProcess.StartInfo.UseShellExecute = false;\n\n            // Redirect the standard output of the net command.  \n            // This stream is read asynchronously using an event handler.\n            netProcess.StartInfo.RedirectStandardOutput = true;\n            netProcess.OutputDataReceived += new DataReceivedEventHandler(NetOutputDataHandler);\n            netOutput = new StringBuilder();\n   \n            if (errorRedirect)\n            {\n                // Redirect the error output of the net command. \n                netProcess.StartInfo.RedirectStandardError = true;\n                netProcess.ErrorDataReceived += new DataReceivedEventHandler(NetErrorDataHandler);\n            }\n            else \n            {\n                // Do not redirect the error output.\n                netProcess.StartInfo.RedirectStandardError = false;\n            }\n\n            Console.WriteLine(&quot;<br>Starting process: net {0}&quot;, \n                netProcess.StartInfo.Arguments);\n            if (errorRedirect)\n            {\n                Console.WriteLine(&quot;Errors will be written to the file {0}&quot;, \n                    netErrorFile);\n            }\n\n            // Start the process.\n            netProcess.Start();\n\n            // Start the asynchronous read of the standard output stream.\n            netProcess.BeginOutputReadLine();\n\n            if (errorRedirect)\n            {\n                // Start the asynchronous read of the standard\n                // error stream.\n                netProcess.BeginErrorReadLine();\n            }\n\n            // Let the net command run, collecting the output.\n            netProcess.WaitForExit();\n\n            if (streamError != null)\n            {\n                // Close the error file.\n                streamError.Close();\n            }\n            else \n            {\n                // Set errorsWritten to false if the stream is not\n                // open.   Either there are no errors, or the error\n                // file could not be opened.\n                errorsWritten = false;\n            }\n\n            if (netOutput.Length &gt; 0)\n            {\n                // If the process wrote more than just\n                // white space, write the output to the console.\n                Console.WriteLine(&quot;<br>Public network shares from net view:<br>{0}<br>&quot;, \n                    netOutput);\n            }\n\n            if (errorsWritten)\n            {\n                // Signal that the error file had something \n                // written to it.\n                String [] errorOutput = File.ReadAllLines(netErrorFile);\n                if (errorOutput.Length &gt; 0)\n                {\n                    Console.WriteLine(&quot;<br>The following error output was appended to {0}.&quot;,\n                        netErrorFile);\n                    foreach (String errLine in errorOutput)\n                    {\n                        Console.WriteLine(&quot;  {0}&quot;, errLine);\n                    }\n                }\n                Console.WriteLine();\n            }\n\n            netProcess.Close();\n\n        }\n\n        private static void NetOutputDataHandler(object sendingProcess, \n            DataReceivedEventArgs outLine)\n        {\n            // Collect the net view command output.\n            if (!String.IsNullOrEmpty(outLine.Data))\n            {\n                // Add the text to the collected output.\n                netOutput.Append(Environment.NewLine + &quot;  &quot; + outLine.Data);\n            }\n        }\n\n        private static void NetErrorDataHandler(object sendingProcess, \n            DataReceivedEventArgs errLine)\n        {\n            // Write the error text to the file if there is something\n            // to write and an error file has been specified.\n\n            if (!String.IsNullOrEmpty(errLine.Data))\n            {\n                if (!errorsWritten)\n                {\n                    if (streamError == null)\n                    {\n                        // Open the file.\n                        try \n                        {\n                            streamError = new StreamWriter(netErrorFile, true);\n                        }\n                        catch (Exception e)\n                        {\n                            Console.WriteLine(&quot;Could not open error file!&quot;);\n                            Console.WriteLine(e.Message.ToString());\n                        }\n                    }\n\n                    if (streamError != null)\n                    {\n                        // Write a header to the file if this is the first\n                        // call to the error output handler.\n                        streamError.WriteLine();\n                        streamError.WriteLine(DateTime.Now.ToString());\n                        streamError.WriteLine(&quot;Net View error output:&quot;);\n                    }\n                    errorsWritten = true;\n                }\n\n                if (streamError != null)\n                {\n                    // Write redirected errors to the file.\n                    streamError.WriteLine(errLine.Data);\n                    streamError.Flush();\n                }\n            }\n        }\n    }\n} \n</code></pre><pre><code class=\"lang-vb\" name=\"Process_AsyncStreams#2\">&#39; Define the namespaces used by this sample.\nImports System\nImports System.Text\nImports System.Globalization\nImports System.IO\nImports System.Diagnostics\nImports System.Threading\nImports System.ComponentModel\nImports Microsoft.VisualBasic\n\n\nNamespace ProcessAsyncStreamSamples\n   \n   Class ProcessAsyncErrorRedirection\n      &#39; Define static variables shared by class methods.\n      Private Shared streamError As StreamWriter = Nothing\n      Private Shared netErrorFile As String = &quot;&quot;\n      Private Shared netOutput As StringBuilder = Nothing\n      Private Shared errorRedirect As Boolean = False\n      Private Shared errorsWritten As Boolean = False\n      \n      Public Shared Sub RedirectNetCommandStreams()\n         Dim netArguments As String\n         Dim netProcess As Process\n         \n         &#39; Get the input computer name.\n         Console.WriteLine(&quot;Enter the computer name for the net view command:&quot;)\n         netArguments = Console.ReadLine().ToUpper(CultureInfo.InvariantCulture)\n         If String.IsNullOrEmpty(netArguments) Then\n            &#39; Default to the help command if there is \n            &#39; not an input argument.\n            netArguments = &quot;/?&quot;\n         End If\n         \n         &#39; Check if errors should be redirected to a file.\n         errorsWritten = False\n         Console.WriteLine(&quot;Enter a fully qualified path to an error log file&quot;)\n         Console.WriteLine(&quot;  or just press Enter to write errors to console:&quot;)\n         netErrorFile = Console.ReadLine().ToUpper(CultureInfo.InvariantCulture)\n         If Not String.IsNullOrEmpty(netErrorFile) Then\n            errorRedirect = True\n         End If\n         \n         &#39; Note that at this point, netArguments and netErrorFile\n         &#39; are set with user input.  If the user did not specify\n         &#39; an error file, then errorRedirect is set to false.\n\n         &#39; Initialize the process and its StartInfo properties.\n         netProcess = New Process()\n         netProcess.StartInfo.FileName = &quot;Net.exe&quot;\n         \n         &#39; Build the net command argument list.\n         netProcess.StartInfo.Arguments = String.Format(&quot;view {0}&quot;, _\n                                                        netArguments)\n         \n         &#39; Set UseShellExecute to false for redirection.\n         netProcess.StartInfo.UseShellExecute = False\n         \n         &#39; Redirect the standard output of the net command.  \n         &#39; Read the stream asynchronously using an event handler.\n         netProcess.StartInfo.RedirectStandardOutput = True\n         AddHandler netProcess.OutputDataReceived, _\n                            AddressOf NetOutputDataHandler\n         netOutput = new StringBuilder()\n         \n         If errorRedirect Then\n            &#39; Redirect the error output of the net command. \n            netProcess.StartInfo.RedirectStandardError = True\n            AddHandler netProcess.ErrorDataReceived, _\n                            AddressOf NetErrorDataHandler\n         Else\n            &#39; Do not redirect the error output.\n            netProcess.StartInfo.RedirectStandardError = False\n         End If\n         \n         Console.WriteLine(ControlChars.Lf + &quot;Starting process: NET {0}&quot;, _\n                           netProcess.StartInfo.Arguments)\n         If errorRedirect Then\n            Console.WriteLine(&quot;Errors will be written to the file {0}&quot;, _\n                           netErrorFile)\n         End If\n         \n         &#39; Start the process.\n         netProcess.Start()\n         \n         &#39; Start the asynchronous read of the standard output stream.\n         netProcess.BeginOutputReadLine()\n         \n         If errorRedirect Then\n            &#39; Start the asynchronous read of the standard\n            &#39; error stream.\n            netProcess.BeginErrorReadLine()\n         End If\n         \n         &#39; Let the net command run, collecting the output.\n         netProcess.WaitForExit()\n      \n         If Not streamError Is Nothing Then\n             &#39; Close the error file.\n             streamError.Close()\n         Else \n             &#39; Set errorsWritten to false if the stream is not\n             &#39; open.   Either there are no errors, or the error\n             &#39; file could not be opened.\n             errorsWritten = False\n         End If\n   \n         If netOutput.Length &gt; 0 Then\n            &#39; If the process wrote more than just\n            &#39; white space, write the output to the console.\n            Console.WriteLine()\n            Console.WriteLine(&quot;Public network shares from net view:&quot;)\n            Console.WriteLine()\n            Console.WriteLine(netOutput)\n            Console.WriteLine()\n         End If\n         \n         If errorsWritten Then\n            &#39; Signal that the error file had something \n            &#39; written to it.\n            Dim errorOutput As String()\n            errorOutput = File.ReadAllLines(netErrorFile)\n            If errorOutput.Length &gt; 0 Then\n\n                Console.WriteLine(ControlChars.Lf + _\n                    &quot;The following error output was appended to {0}.&quot;, _\n                    netErrorFile)\n                Dim errLine as String\n                For Each errLine in errorOutput\n                    Console.WriteLine(&quot;  {0}&quot;, errLine)\n                Next\n          \n                Console.WriteLine()\n            End If\n         End If\n         \n         netProcess.Close()\n      End Sub \n      \n      \n      Private Shared Sub NetOutputDataHandler(sendingProcess As Object, _\n          outLine As DataReceivedEventArgs)\n\n         &#39; Collect the net view command output.\n         If Not String.IsNullOrEmpty(outLine.Data) Then\n            &#39; Add the text to the collected output.\n            netOutput.Append(Environment.NewLine + &quot;  &quot; + outLine.Data)\n         End If\n      End Sub \n       \n      \n      Private Shared Sub NetErrorDataHandler(sendingProcess As Object, _\n          errLine As DataReceivedEventArgs)\n\n         &#39; Write the error text to the file if there is something to\n         &#39; write and an error file has been specified.\n\n         If Not String.IsNullOrEmpty(errLine.Data) Then\n\n            If Not errorsWritten Then\n                If streamError Is Nothing Then\n                    &#39; Open the file.\n                    Try \n                        streamError = New StreamWriter(netErrorFile, true)\n                    Catch e As Exception\n                        Console.WriteLine(&quot;Could not open error file!&quot;)\n                        Console.WriteLine(e.Message.ToString())\n                    End Try\n                End If\n\n                If Not streamError Is Nothing Then\n\n                    &#39; Write a header to the file if this is the first\n                    &#39; call to the error output handler.\n                    streamError.WriteLine()\n                    streamError.WriteLine(DateTime.Now.ToString())\n                    streamError.WriteLine(&quot;Net View error output:&quot;)\n\n                End If\n\n                errorsWritten = True\n            End If\n                     \n            If Not streamError Is Nothing Then\n                  \n                &#39; Write redirected errors to the file.\n                streamError.WriteLine(errLine.Data)\n                streamError.Flush()\n             End If\n          End If\n      End Sub \n   End Class  \nEnd Namespace \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_BeginOutputReadLine\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_BeginOutputReadLine_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginOutputReadLine()</div>        \r\n          </div>\r\n    \r\n            <p>Begins asynchronous read operations on the redirected <span class=\"xref\">stem.Diagnostics.Process.StandardOutput*</span> stream of the application.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void BeginOutputReadLine ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Diagnostics.ProcessStartInfo.RedirectStandardOutput*</span> property is <code>false</code>.  </p>\n<p> - or -  </p>\n<p> An asynchronous read operation is already in progress on the <span class=\"xref\">stem.Diagnostics.Process.StandardOutput*</span> stream.  </p>\n<p> - or -  </p>\n<p> The <span class=\"xref\">stem.Diagnostics.Process.StandardOutput*</span> stream has been used by a synchronous read operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardOutput_\" data-linktype=\"relative-path\">StandardOutput</a> stream can be read synchronously or asynchronously. Methods such as <a class=\"xref\" href=\"system.io.streamreader#System_IO_StreamReader_Read_\" data-linktype=\"relative-path\">Read</a>, <a class=\"xref\" href=\"system.io.streamreader#System_IO_StreamReader_ReadLine_\" data-linktype=\"relative-path\">ReadLine</a>, and <a class=\"xref\" href=\"system.io.streamreader#System_IO_StreamReader_ReadToEnd_\" data-linktype=\"relative-path\">ReadToEnd</a> perform synchronous read operations on the output stream of the process. These synchronous read operations do not complete until the associated <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> writes to its <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardOutput_\" data-linktype=\"relative-path\">StandardOutput</a> stream, or closes the stream.  </p>\n<p> In contrast, BeginOutputReadLine starts asynchronous read operations on the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardOutput_\" data-linktype=\"relative-path\">StandardOutput</a> stream. This method enables a designated event handler for the stream output and immediately returns to the caller, which can perform other work while the stream output is directed to the event handler.  </p>\n<p> Follow these steps to perform asynchronous read operations on <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardOutput_\" data-linktype=\"relative-path\">StandardOutput</a> for a <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> :  </p>\n<ol>\n<li><p>Set <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_UseShellExecute_\" data-linktype=\"relative-path\">UseShellExecute</a> to <code>false</code>.  </p>\n</li>\n<li><p>Set <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_RedirectStandardOutput_\" data-linktype=\"relative-path\">RedirectStandardOutput</a> to <code>true</code>.  </p>\n</li>\n<li><p>Add your event handler to the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_OutputDataReceived\" data-linktype=\"relative-path\">OutputDataReceived</a> event. The event handler must match the <a class=\"xref\" href=\"system.diagnostics.datareceivedeventhandler\" data-linktype=\"relative-path\">System.Diagnostics.DataReceivedEventHandler</a> delegate signature.  </p>\n</li>\n<li><p>Start the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a>.  </p>\n</li>\n<li><p>Call BeginOutputReadLine for the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a>. This call starts asynchronous read operations on <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardOutput_\" data-linktype=\"relative-path\">StandardOutput</a>.  </p>\n<p>When asynchronous read operations start, the event handler is called each time the associated <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> writes a line of text to its <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardOutput_\" data-linktype=\"relative-path\">StandardOutput</a> stream.  </p>\n<p>You can cancel an asynchronous read operation by calling <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_CancelOutputRead_\" data-linktype=\"relative-path\">CancelOutputRead</a>. The read operation can be canceled by the caller or by the event handler. After canceling, you can call BeginOutputReadLine again to resume asynchronous read operations.  </p>\n</li>\n</ol>\n<div class=\"NOTE\"><h5>Note</h5><p> You cannot mix asynchronous and synchronous read operations on a redirected stream. Once the redirected stream of a <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> is opened in either asynchronous or synchronous mode, all further read operations on that stream must be in the same mode. For example, do not follow BeginOutputReadLine with a call to <a class=\"xref\" href=\"system.io.streamreader#System_IO_StreamReader_ReadLine_\" data-linktype=\"relative-path\">ReadLine</a> on the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardOutput_\" data-linktype=\"relative-path\">StandardOutput</a> stream, or vice versa. However, you can read two different streams in different modes. For example, you can call BeginOutputReadLine and then call <a class=\"xref\" href=\"system.io.streamreader#System_IO_StreamReader_ReadLine_\" data-linktype=\"relative-path\">ReadLine</a> for the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardError_\" data-linktype=\"relative-path\">StandardError</a> stream.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates how to perform asynchronous read operations on the redirected <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardOutput_\" data-linktype=\"relative-path\">StandardOutput</a> stream of the <code>sort</code> command. The <code>sort</code> command is a console application that reads and sorts text input.  </p>\n<p> The example creates an event delegate for the <code>SortOutputHandler</code> event handler and associates it with the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_OutputDataReceived\" data-linktype=\"relative-path\">OutputDataReceived</a> event. The event handler receives text lines from the redirected <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardOutput_\" data-linktype=\"relative-path\">StandardOutput</a> stream, formats the text, and writes the text to the screen.  </p>\n<pre><code class=\"lang-cpp\" name=\"Process_AsyncStreams#1\">// Define the namespaces used by this sample.\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Text;\nusing namespace System::IO;\nusing namespace System::Diagnostics;\nusing namespace System::Threading;\nusing namespace System::ComponentModel;\n\nref class SortOutputRedirection\n{\nprivate:\n   // Define static variables shared by class methods.\n   static StringBuilder^ sortOutput = nullptr;\n   static int numOutputLines = 0;\n\npublic:\n   static void SortInputListText()\n   {\n      // Initialize the process and its StartInfo properties.\n      // The sort command is a console application that\n      // reads and sorts text input.\n\n      Process^ sortProcess;\n      sortProcess = gcnew Process;\n      sortProcess-&gt;StartInfo-&gt;FileName = &quot;Sort.exe&quot;;\n      \n      // Set UseShellExecute to false for redirection.\n      sortProcess-&gt;StartInfo-&gt;UseShellExecute = false;\n      \n      // Redirect the standard output of the sort command.  \n      // This stream is read asynchronously using an event handler.\n      sortProcess-&gt;StartInfo-&gt;RedirectStandardOutput = true;\n      sortOutput = gcnew StringBuilder;\n      \n      // Set our event handler to asynchronously read the sort output.\n      sortProcess-&gt;OutputDataReceived += gcnew DataReceivedEventHandler( SortOutputHandler );\n      \n      // Redirect standard input as well.  This stream\n      // is used synchronously.\n      sortProcess-&gt;StartInfo-&gt;RedirectStandardInput = true;\n      \n      // Start the process.\n      sortProcess-&gt;Start();\n      \n      // Use a stream writer to synchronously write the sort input.\n      StreamWriter^ sortStreamWriter = sortProcess-&gt;StandardInput;\n      \n      // Start the asynchronous read of the sort output stream.\n      sortProcess-&gt;BeginOutputReadLine();\n      \n      // Prompt the user for input text lines.  Write each \n      // line to the redirected input stream of the sort command.\n      Console::WriteLine( &quot;Ready to sort up to 50 lines of text&quot; );\n\n      String^ inputText;\n      int numInputLines = 0;\n      do\n      {\n         Console::WriteLine( &quot;Enter a text line (or press the Enter key to stop):&quot; );\n\n         inputText = Console::ReadLine();\n         if (  !String::IsNullOrEmpty( inputText ) )\n         {\n            numInputLines++;\n            sortStreamWriter-&gt;WriteLine( inputText );\n         }\n      }\n      while (  !String::IsNullOrEmpty( inputText ) &amp;&amp; (numInputLines &lt; 50) );\n\n      Console::WriteLine( &quot;&lt;end of input stream&gt;&quot; );\n      Console::WriteLine();\n      \n      // End the input stream to the sort command.\n      sortStreamWriter-&gt;Close();\n      \n      // Wait for the sort process to write the sorted text lines.\n      sortProcess-&gt;WaitForExit();\n\n      if ( numOutputLines &gt; 0 )\n      {\n         \n         // Write the formatted and sorted output to the console.\n         Console::WriteLine( &quot; Sort results = {0} sorted text line(s) &quot;,\n            numOutputLines.ToString() );\n         Console::WriteLine( &quot;----------&quot; );\n         Console::WriteLine( sortOutput-&gt;ToString() );\n      }\n      else\n      {\n         Console::WriteLine( &quot; No input lines were sorted.&quot; );\n      }\n\n      sortProcess-&gt;Close();\n   }\n\nprivate:\n   static void SortOutputHandler( Object^ /*sendingProcess*/,\n      DataReceivedEventArgs^ outLine )\n   {\n      // Collect the sort command output.\n      if (  !String::IsNullOrEmpty( outLine-&gt;Data ) )\n      {\n         numOutputLines++;\n         \n         // Add the text to the collected output.\n         sortOutput-&gt;AppendFormat( &quot;<br>[{0}] {1}&quot;,\n            numOutputLines.ToString(), outLine-&gt;Data );\n      }\n   }\n};\n\n/// The main entry point for the application.\nvoid main()\n{\n   try\n   {\n      SortOutputRedirection::SortInputListText();\n   }\n   catch ( InvalidOperationException^ e ) \n   {\n      Console::WriteLine( &quot;Exception:&quot; );\n      Console::WriteLine( e );\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Process_AsyncStreams#1\">&#39; Define the namespaces used by this sample.\nImports System\nImports System.Text\nImports System.IO\nImports System.Diagnostics\nImports System.Threading\nImports System.ComponentModel\nImports Microsoft.VisualBasic\n\nNamespace ProcessAsyncStreamSamples\n   \n   Class ProcessAsyncOutputRedirection\n      &#39; Define static variables shared by class methods.\n      Private Shared sortOutput As StringBuilder = Nothing\n      Private Shared numOutputLines As Integer = 0\n      \n      Public Shared Sub SortInputListText()\n         \n         &#39; Initialize the process and its StartInfo properties.\n         &#39; The sort command is a console application that\n         &#39; reads and sorts text input.\n         Dim sortProcess As New Process()\n         sortProcess.StartInfo.FileName = &quot;Sort.exe&quot;\n         \n         &#39; Set UseShellExecute to false for redirection.\n         sortProcess.StartInfo.UseShellExecute = False\n         \n         &#39; Redirect the standard output of the sort command.  \n         &#39; Read the stream asynchronously using an event handler.\n         sortProcess.StartInfo.RedirectStandardOutput = True\n         sortOutput = new StringBuilder()\n\n         &#39; Set our event handler to asynchronously read the sort output.\n         AddHandler sortProcess.OutputDataReceived, _\n                    AddressOf SortOutputHandler\n         \n         &#39; Redirect standard input as well.  This stream\n         &#39; is used synchronously.\n         sortProcess.StartInfo.RedirectStandardInput = True\n         \n         &#39; Start the process.\n         sortProcess.Start()\n         \n         &#39; Use a stream writer to synchronously write the sort input.\n         Dim sortStreamWriter As StreamWriter = sortProcess.StandardInput\n     \n         &#39; Start the asynchronous read of the sort output stream.\n         sortProcess.BeginOutputReadLine()\n         \n         &#39; Prompt the user for input text lines.  Write each \n         &#39; line to the redirected input stream of the sort command.\n         Console.WriteLine(&quot;Ready to sort up to 50 lines of text&quot;)\n         \n         Dim inputText As String\n         Dim numInputLines As Integer = 0\n         Do\n            Console.WriteLine(&quot;Enter a text line (or press the Enter key to stop):&quot;)\n            \n            inputText = Console.ReadLine()\n            If Not String.IsNullOrEmpty(inputText) Then\n               numInputLines += 1\n               sortStreamWriter.WriteLine(inputText)\n            End If\n         Loop While Not String.IsNullOrEmpty(inputText) AndAlso numInputLines &lt; 50\n         Console.WriteLine(&quot;&lt;end of input stream&gt;&quot;)\n         Console.WriteLine()\n         \n         &#39; End the input stream to the sort command.\n         sortStreamWriter.Close()\n         \n         &#39; Wait for the sort process to write the sorted text lines.\n         sortProcess.WaitForExit()\n         \n         If Not String.IsNullOrEmpty(numOutputLines) Then\n            &#39; Write the formatted and sorted output to the console.\n            Console.WriteLine(&quot; Sort results = {0} sorted text line(s) &quot;, _\n                              numOutputLines)\n            Console.WriteLine(&quot;----------&quot;)\n            Console.WriteLine(sortOutput)\n         Else\n            Console.WriteLine(&quot; No input lines were sorted.&quot;)\n         End If\n         \n         sortProcess.Close()\n      End Sub \n      \n      Private Shared Sub SortOutputHandler(sendingProcess As Object, _\n         outLine As DataReceivedEventArgs)\n\n         &#39; Collect the sort command output.\n         If Not String.IsNullOrEmpty(outLine.Data) Then\n            numOutputLines += 1\n            \n            &#39; Add the text to the collected output.\n            sortOutput.Append(Environment.NewLine + &quot;[&quot; _\n                         + numOutputLines.ToString() + &quot;] - &quot; _\n                         + outLine.Data)\n         End If\n      End Sub \n   End Class  \nEnd Namespace \n\nNamespace ProcessAsyncStreamSamples\n  \n   Class ProcessSampleMain\n\n      &#39; The main entry point for the application.\n      Shared Sub Main()\n         Try\n            ProcessAsyncOutputRedirection.SortInputListText()\n         \n         Catch e As InvalidOperationException\n            Console.WriteLine(&quot;Exception:&quot;)\n            Console.WriteLine(e.ToString())\n         End Try\n      End Sub &#39;Main\n   End Class  &#39;ProcessSampleMain\nEnd Namespace &#39;Process_AsyncStream_Sample\n</code></pre><pre><code class=\"lang-cs\" name=\"Process_AsyncStreams#1\">// Define the namespaces used by this sample.\nusing System;\nusing System.Text;\nusing System.IO;\nusing System.Diagnostics;\nusing System.Threading;\nusing System.ComponentModel;\n\nnamespace ProcessAsyncStreamSamples\n{\n    class SortOutputRedirection\n    {\n        // Define static variables shared by class methods.\n        private static StringBuilder sortOutput = null;\n        private static int numOutputLines = 0;\n      \n        public static void SortInputListText()\n        {\n            // Initialize the process and its StartInfo properties.\n            // The sort command is a console application that\n            // reads and sorts text input.\n\n            Process sortProcess;\n            sortProcess = new Process();\n            sortProcess.StartInfo.FileName = &quot;Sort.exe&quot;;\n            \n            // Set UseShellExecute to false for redirection.\n            sortProcess.StartInfo.UseShellExecute = false;\n\n            // Redirect the standard output of the sort command.  \n            // This stream is read asynchronously using an event handler.\n            sortProcess.StartInfo.RedirectStandardOutput = true;\n            sortOutput = new StringBuilder(&quot;&quot;);\n\n            // Set our event handler to asynchronously read the sort output.\n            sortProcess.OutputDataReceived += new DataReceivedEventHandler(SortOutputHandler);\n\n            // Redirect standard input as well.  This stream\n            // is used synchronously.\n            sortProcess.StartInfo.RedirectStandardInput = true;\n  \n            // Start the process.\n            sortProcess.Start();\n\n            // Use a stream writer to synchronously write the sort input.\n            StreamWriter sortStreamWriter = sortProcess.StandardInput;\n\n            // Start the asynchronous read of the sort output stream.\n            sortProcess.BeginOutputReadLine();\n\n            // Prompt the user for input text lines.  Write each \n            // line to the redirected input stream of the sort command.\n            Console.WriteLine(&quot;Ready to sort up to 50 lines of text&quot;);\n\n            String inputText;\n            int numInputLines = 0;\n            do \n            {\n                Console.WriteLine(&quot;Enter a text line (or press the Enter key to stop):&quot;);\n            \n                inputText = Console.ReadLine();\n                if (!String.IsNullOrEmpty(inputText))\n                {\n                    numInputLines ++;\n                    sortStreamWriter.WriteLine(inputText);\n                }\n            }\n            while (!String.IsNullOrEmpty(inputText) &amp;&amp; (numInputLines &lt; 50));\n            Console.WriteLine(&quot;&lt;end of input stream&gt;&quot;);\n            Console.WriteLine();\n\n            // End the input stream to the sort command.\n            sortStreamWriter.Close();\n\n            // Wait for the sort process to write the sorted text lines.\n            sortProcess.WaitForExit();\n\n            if (numOutputLines &gt; 0)\n            {\n                // Write the formatted and sorted output to the console.\n                Console.WriteLine(&quot; Sort results = {0} sorted text line(s) &quot;, \n                    numOutputLines);\n                Console.WriteLine(&quot;----------&quot;);\n                Console.WriteLine(sortOutput);\n            }\n            else \n            {\n                Console.WriteLine(&quot; No input lines were sorted.&quot;);\n            }\n\n            sortProcess.Close();\n        }\n\n        private static void SortOutputHandler(object sendingProcess, \n            DataReceivedEventArgs outLine)\n        {\n            // Collect the sort command output.\n            if (!String.IsNullOrEmpty(outLine.Data))\n            {\n                numOutputLines++;\n    \n                // Add the text to the collected output.\n                sortOutput.Append(Environment.NewLine + \n                    &quot;[&quot; + numOutputLines.ToString() + &quot;] - &quot; + outLine.Data);\n            }\n        }\n    }\n}\n\nnamespace ProcessAsyncStreamSamples\n{\n\n    class ProcessSampleMain\n    {\n        /// The main entry point for the application.\n        static void Main()\n        {\n            try \n            {\n                SortOutputRedirection.SortInputListText();\n            }\n            catch (InvalidOperationException e)\n            {\n                Console.WriteLine(&quot;Exception:&quot;);\n                Console.WriteLine(e.ToString());\n            }\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_CancelErrorRead\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_CancelErrorRead_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CancelErrorRead()</div>        \r\n          </div>\r\n    \r\n            <p>Cancels the asynchronous read operation on the redirected <span class=\"xref\">stem.Diagnostics.Process.StandardError*</span> stream of an application.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void CancelErrorRead ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Diagnostics.Process.StandardError*</span> stream is not enabled for asynchronous read operations.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_BeginErrorReadLine_\" data-linktype=\"relative-path\">BeginErrorReadLine</a> starts an asynchronous read operation on the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardError_\" data-linktype=\"relative-path\">StandardError</a> stream. CancelErrorRead ends the asynchronous read operation.  </p>\n<p> After canceling, you can resume the asynchronous read operation by calling <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_BeginErrorReadLine_\" data-linktype=\"relative-path\">BeginErrorReadLine</a> again.  </p>\n<p> When you call CancelErrorRead, all in-progress read operations for <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardError_\" data-linktype=\"relative-path\">StandardError</a> are completed and then the event handler is disabled. All further redirected output to <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardError_\" data-linktype=\"relative-path\">StandardError</a> is saved in a buffer. If you re-enable the event handler with a call to <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_BeginErrorReadLine_\" data-linktype=\"relative-path\">BeginErrorReadLine</a>, the saved output is sent to the event handler and asynchronous read operations resume. If you want to change the event handler before resuming asynchronous read operations, you must remove the existing event handler before adding the new event handler:  </p>\n<pre><code>// At this point the DataReceivedEventHandler(ErrorHandler1)   \n// has executed a CancelErrorRead.  \n\n// Remove the prior event handler.  \nprocess.ErrorDataReceived -=   \n    new DataReceivedEventHandler(ErrorHandler1);  \n\n// Register a new event handler.  \nprocess.ErrorDataReceived +=   \n    new DataReceivedEventHandler(ErrorHandler2);  \n\n// Call the corresponding BeginErrorReadLine.  \nprocess.BeginErrorReadLine();\n</code></pre><div class=\"NOTE\"><h5>Note</h5><p> You cannot mix asynchronous and synchronous read operations on the redirected <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardError_\" data-linktype=\"relative-path\">StandardError</a> stream. Once the redirected stream of a <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> is opened in either asynchronous or synchronous mode, all further read operations on that stream must be in the same mode. If you cancel an asynchronous read operation on <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardError_\" data-linktype=\"relative-path\">StandardError</a> and then need to read from the stream again, you must use <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_BeginErrorReadLine_\" data-linktype=\"relative-path\">BeginErrorReadLine</a> to resume asynchronous read operations. Do not follow CancelErrorRead with a call to the synchronous read methods of <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardError_\" data-linktype=\"relative-path\">StandardError</a> such as <a class=\"xref\" href=\"system.io.streamreader#System_IO_StreamReader_Read_\" data-linktype=\"relative-path\">Read</a>, <a class=\"xref\" href=\"system.io.streamreader#System_IO_StreamReader_ReadLine_\" data-linktype=\"relative-path\">ReadLine</a>, or <a class=\"xref\" href=\"system.io.streamreader#System_IO_StreamReader_ReadToEnd_\" data-linktype=\"relative-path\">ReadToEnd</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example starts the <code>nmake</code> command with user supplied arguments. The error and output streams are read asynchronously; the collected text lines are displayed to the console as well as written to a log file. If the command output exceeds a specified number of lines, the asynchronous read operations are canceled.  </p>\n<pre><code class=\"lang-cpp\" name=\"Process_AsyncStreams#3\">ref class ProcessNMakeStreamRedirection\n{\nprivate:\n   // Define static variables shared by class methods.\n   static StreamWriter^ buildLogStream = nullptr;\n   static Mutex^ logMutex = gcnew Mutex;\n   static int maxLogLines = 25;\n   static int currentLogLines = 0;\n\npublic:\n   static void RedirectNMakeCommandStreams()\n   {\n      String^ nmakeArguments = nullptr;\n      Process^ nmakeProcess;\n      \n      // Get the input nmake command-line arguments.\n      Console::WriteLine( &quot;Enter the NMake command line arguments (@commandfile or /f makefile, etc):&quot; );\n      String^ inputText = Console::ReadLine();\n      if (  !String::IsNullOrEmpty( inputText ) )\n      {\n         nmakeArguments = inputText;\n      }\n\n      Console::WriteLine( &quot;Enter max line limit for log file (default is 25):&quot; );\n      inputText = Console::ReadLine();\n      if (  !String::IsNullOrEmpty( inputText ) )\n      {\n         if (  !Int32::TryParse( inputText, maxLogLines ) )\n         {\n            maxLogLines = 25;\n         }\n      }\n      Console::WriteLine( &quot;Output beyond {0} lines will be ignored.&quot;,\n         maxLogLines.ToString() );\n      \n      // Initialize the process and its StartInfo properties.\n      nmakeProcess = gcnew Process;\n      nmakeProcess-&gt;StartInfo-&gt;FileName = &quot;NMake.exe&quot;;\n      \n      // Build the nmake command argument list.\n      if (  !String::IsNullOrEmpty( nmakeArguments ) )\n      {\n         nmakeProcess-&gt;StartInfo-&gt;Arguments = nmakeArguments;\n      }\n      \n      // Set UseShellExecute to false for redirection.\n      nmakeProcess-&gt;StartInfo-&gt;UseShellExecute = false;\n      \n      // Redirect the standard output of the nmake command.  \n      // Read the stream asynchronously using an event handler.\n      nmakeProcess-&gt;StartInfo-&gt;RedirectStandardOutput = true;\n      nmakeProcess-&gt;OutputDataReceived += gcnew DataReceivedEventHandler( NMakeOutputDataHandler );\n      \n      // Redirect the error output of the nmake command. \n      nmakeProcess-&gt;StartInfo-&gt;RedirectStandardError = true;\n      nmakeProcess-&gt;ErrorDataReceived += gcnew DataReceivedEventHandler( NMakeErrorDataHandler );\n\n      logMutex-&gt;WaitOne();\n\n      currentLogLines = 0;\n      \n      // Write a header to the log file.\n      String^ buildLogFile = &quot;NmakeCmd.Txt&quot;;\n      try\n      {\n         buildLogStream = gcnew StreamWriter( buildLogFile,true );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Could not open output file {0}&quot;, buildLogFile );\n         Console::WriteLine( &quot;Exception = {0}&quot;, e-&gt;ToString() );\n         Console::WriteLine( e-&gt;Message-&gt;ToString() );\n\n         buildLogStream = nullptr;\n      }\n\n      if ( buildLogStream != nullptr )\n      {\n         Console::WriteLine( &quot;Nmake output logged to {0}&quot;, buildLogFile );\n\n         buildLogStream-&gt;WriteLine();\n         buildLogStream-&gt;WriteLine( DateTime::Now.ToString() );\n         if (  !String::IsNullOrEmpty( nmakeArguments ) )\n         {\n            buildLogStream-&gt;Write( &quot;Command line = NMake {0}&quot;, nmakeArguments );\n         }\n         else\n         {\n            buildLogStream-&gt;Write( &quot;Command line = Nmake&quot; );\n         }\n         buildLogStream-&gt;WriteLine();\n         buildLogStream-&gt;Flush();\n\n         logMutex-&gt;ReleaseMutex();\n         \n         // Start the process.\n         Console::WriteLine();\n         Console::WriteLine( &quot;<br>Starting Nmake command&quot; );\n         Console::WriteLine();\n         nmakeProcess-&gt;Start();\n         \n         // Start the asynchronous read of the output stream.\n         nmakeProcess-&gt;BeginOutputReadLine();\n         \n         // Start the asynchronous read of the error stream.\n         nmakeProcess-&gt;BeginErrorReadLine();\n         \n         // Let the nmake command run, collecting the output.\n         nmakeProcess-&gt;WaitForExit();\n\n         nmakeProcess-&gt;Close();\n         buildLogStream-&gt;Close();\n         logMutex-&gt;Dispose();\n      }\n   }\n\nprivate:\n   static void NMakeOutputDataHandler( Object^ sendingProcess,\n      DataReceivedEventArgs^ outLine )\n   {\n      // Collect the output, displaying it to the screen and \n      // logging it to the output file.  Cancel the read\n      // operation when the maximum line limit is reached.\n\n      if (  !String::IsNullOrEmpty( outLine-&gt;Data ) )\n      {\n         logMutex-&gt;WaitOne();\n\n         currentLogLines++;\n         if ( currentLogLines &gt; maxLogLines )\n         {\n            // Display the line to the console.\n            // Skip writing the line to the log file.\n            Console::WriteLine( &quot;StdOut: {0}&quot;, outLine-&gt;Data-&gt;ToString() );\n         }\n         else\n         if ( currentLogLines == maxLogLines )\n         {\n            LogToFile( &quot;StdOut&quot;, &quot;&lt;Max build log limit reached!&gt;&quot;, true );\n            \n            // Stop reading the output streams.\n            Process^ p = dynamic_cast&lt;Process^&gt;(sendingProcess);\n            if ( p != nullptr )\n            {\n               p-&gt;CancelOutputRead();\n               p-&gt;CancelErrorRead();\n            }\n         }\n         else\n         {\n            // Write the line to the log file.\n            LogToFile( &quot;StdOut&quot;, outLine-&gt;Data, true );\n         }\n         logMutex-&gt;ReleaseMutex();\n      }\n   }\n\n   static void NMakeErrorDataHandler( Object^ sendingProcess,\n      DataReceivedEventArgs^ errLine )\n   {\n      \n      // Collect the error output, displaying it to the screen and \n      // logging it to the output file.  Cancel the error output\n      // read operation when the maximum line limit is reached.\n\n      if (  !String::IsNullOrEmpty( errLine-&gt;Data ) )\n      {\n         logMutex-&gt;WaitOne();\n\n         currentLogLines++;\n         if ( currentLogLines &gt; maxLogLines )\n         {\n            \n            // Display the line to the console.\n            // Skip writing the line to the log file.\n            Console::WriteLine( &quot;StdErr: {0}&quot;, errLine-&gt;Data-&gt;ToString() );\n         }\n         else\n         if ( currentLogLines == maxLogLines )\n         {\n            LogToFile( &quot;StdOut&quot;, &quot;&lt;Max build log limit reached!&gt;&quot;, true );\n            \n            // Stop reading the output streams.\n            Process^ p = dynamic_cast&lt;Process^&gt;(sendingProcess);\n            if ( p != nullptr )\n            {\n               p-&gt;CancelOutputRead();\n               p-&gt;CancelErrorRead();\n            }\n         }\n         else\n         {\n            // Write the line to the log file.\n            LogToFile( &quot;StdErr&quot;, errLine-&gt;Data, true );\n         }\n         logMutex-&gt;ReleaseMutex();\n      }\n   }\n\n   static void LogToFile( String^ logPrefix, String^ logText,\n      bool echoToConsole )\n   {\n      // Write the specified line to the log file stream.\n      StringBuilder^ logString = gcnew StringBuilder;\n\n      if (  !String::IsNullOrEmpty( logPrefix ) )\n      {\n         logString-&gt;AppendFormat( &quot;{0}&gt; &quot;, logPrefix );\n      }\n\n      if (  !String::IsNullOrEmpty( logText ) )\n      {\n         logString-&gt;Append( logText );\n      }\n\n      if ( buildLogStream != nullptr )\n      {\n         buildLogStream-&gt;WriteLine(  &quot;[{0}] {1}&quot;,\n            DateTime::Now.ToString(), logString-&gt;ToString() );\n         buildLogStream-&gt;Flush();\n      }\n\n      if ( echoToConsole )\n      {\n         Console::WriteLine( logString-&gt;ToString() );\n      }\n   }\n};\n</code></pre><pre><code class=\"lang-cs\" name=\"Process_AsyncStreams#3\">namespace ProcessAsyncStreamSamples\n{\n    class ProcessNMakeStreamRedirection\n    {\n        // Define static variables shared by class methods.\n        private static StreamWriter buildLogStream =null;\n        private static Mutex logMutex = new Mutex();\n        private static int maxLogLines = 25;\n        private static int currentLogLines = 0;\n\n        public static void RedirectNMakeCommandStreams()\n        {\n            String nmakeArguments = null;\n            Process nmakeProcess;\n\n            // Get the input nmake command-line arguments.\n            Console.WriteLine(&quot;Enter the NMake command line arguments &quot; +\n                &quot;(@commandfile or /f makefile, etc):&quot;);\n            String inputText = Console.ReadLine();\n            if (!String.IsNullOrEmpty(inputText))\n            {\n                nmakeArguments = inputText;\n            }\n               \n            Console.WriteLine(&quot;Enter max line limit for log file (default is 25):&quot;);\n            inputText = Console.ReadLine();\n            if (!String.IsNullOrEmpty(inputText))\n            {\n                if (!Int32.TryParse(inputText, out maxLogLines))\n                {\n                    maxLogLines = 25;\n                }\n            }\n            Console.WriteLine(&quot;Output beyond {0} lines will be ignored.&quot;,\n                maxLogLines);\n\n            // Initialize the process and its StartInfo properties.\n            nmakeProcess = new Process();\n            nmakeProcess.StartInfo.FileName = &quot;NMake.exe&quot;;\n            \n            // Build the nmake command argument list.\n            if (!String.IsNullOrEmpty(nmakeArguments))\n            {\n                nmakeProcess.StartInfo.Arguments = nmakeArguments;\n            }\n\n            // Set UseShellExecute to false for redirection.\n            nmakeProcess.StartInfo.UseShellExecute = false;\n\n            // Redirect the standard output of the nmake command.  \n            // Read the stream asynchronously using an event handler.\n            nmakeProcess.StartInfo.RedirectStandardOutput = true;\n            nmakeProcess.OutputDataReceived += new DataReceivedEventHandler(NMakeOutputDataHandler);\n   \n            // Redirect the error output of the nmake command. \n            nmakeProcess.StartInfo.RedirectStandardError = true;\n            nmakeProcess.ErrorDataReceived += new DataReceivedEventHandler(NMakeErrorDataHandler);\n\n            logMutex.WaitOne();\n\n            currentLogLines = 0;\n\n            // Write a header to the log file.\n            const String buildLogFile = &quot;NmakeCmd.Txt&quot;;\n            try \n            {\n                buildLogStream = new StreamWriter(buildLogFile, true);\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(&quot;Could not open output file {0}&quot;, buildLogFile);\n                Console.WriteLine(&quot;Exception = {0}&quot;, e.ToString());\n                Console.WriteLine(e.Message);\n\n                buildLogStream = null;\n            }\n\n            if (buildLogStream != null)\n            {   \n                Console.WriteLine(&quot;Nmake output logged to {0}&quot;, \n                    buildLogFile);\n    \n                buildLogStream.WriteLine();\n                buildLogStream.WriteLine(DateTime.Now.ToString());\n                if (!String.IsNullOrEmpty(nmakeArguments))\n                {\n                    buildLogStream.Write(&quot;Command line = NMake {0}&quot;,\n                        nmakeArguments);\n                }\n                else \n                {\n                    buildLogStream.Write(&quot;Command line = Nmake&quot;);\n                }\n                buildLogStream.WriteLine();\n                buildLogStream.Flush();\n            \n                logMutex.ReleaseMutex();\n\n                // Start the process.\n                Console.WriteLine();\n                Console.WriteLine(&quot;<br>Starting Nmake command...&quot;);\n                Console.WriteLine();\n                nmakeProcess.Start();\n\n                // Start the asynchronous read of the error stream.\n                nmakeProcess.BeginErrorReadLine();\n\n                // Start the asynchronous read of the output stream.\n                nmakeProcess.BeginOutputReadLine();\n    \n                // Let the nmake command run, collecting the output.\n                nmakeProcess.WaitForExit();\n\n                nmakeProcess.Close();\n                buildLogStream.Close();\n                logMutex.Dispose();\n            }\n        }\n\n        private static void NMakeOutputDataHandler(object sendingProcess, \n            DataReceivedEventArgs outLine)\n        {\n            // Collect the output, displaying it to the screen and \n            // logging it to the output file.  Cancel the read\n            // operation when the maximum line limit is reached.\n\n            if (!String.IsNullOrEmpty(outLine.Data))\n            {\n                logMutex.WaitOne();\n\n                currentLogLines++;\n                if (currentLogLines &gt; maxLogLines)\n                {\n                    // Display the line to the console.\n                    // Skip writing the line to the log file.\n                    Console.WriteLine(&quot;StdOut: {0}&quot;, outLine.Data);\n                }\n                else if (currentLogLines == maxLogLines)\n                {\n                    LogToFile(&quot;StdOut&quot;, &quot;&lt;Max build log limit reached!&gt;&quot;, \n                        true);\n    \n                    // Stop reading the output streams.\n                    Process p = sendingProcess as Process;\n                    if (p != null)\n                    {\n                        p.CancelOutputRead();\n                        p.CancelErrorRead();\n                    }\n                }\n                else \n                {\n                    // Write the line to the log file.\n                    LogToFile(&quot;StdOut&quot;, outLine.Data, true);\n                }\n                logMutex.ReleaseMutex();\n            }\n        }\n\n        private static void NMakeErrorDataHandler(object sendingProcess, \n            DataReceivedEventArgs errLine)\n        {\n            // Collect error output, displaying it to the screen and \n            // logging it to the output file.  Cancel the error output\n            // read operation when the maximum line limit is reached.\n\n            if (!String.IsNullOrEmpty(errLine.Data))\n            {\n                logMutex.WaitOne();\n\n                currentLogLines++;\n                if (currentLogLines &gt; maxLogLines)\n                {\n                    // Display the error line to the console.\n                    // Skip writing the line to the log file.\n                    Console.WriteLine(&quot;StdErr: {0}&quot;, errLine.Data);\n                }\n                else if (currentLogLines == maxLogLines)\n                {\n                    LogToFile(&quot;StdErr&quot;, &quot;&lt;Max build log limit reached!&gt;&quot;, \n                        true);\n    \n                    // Stop reading the output streams\n                    Process p = sendingProcess as Process;\n                    if (p != null)\n                    {\n                        p.CancelErrorRead();\n                        p.CancelOutputRead();\n\n                    }\n                }\n                else \n                {\n                    // Write the line to the log file.\n                    LogToFile(&quot;StdErr&quot;, errLine.Data, true);\n                }\n\n                logMutex.ReleaseMutex();\n            }\n        }\n\n        private static void LogToFile(String logPrefix, \n            String logText, bool echoToConsole)\n        {\n            // Write the specified line to the log file stream.\n            StringBuilder logString = new StringBuilder();\n\n            if (!String.IsNullOrEmpty(logPrefix))\n            {\n                logString.AppendFormat(&quot;{0}&gt; &quot;, logPrefix);\n            }\n\n            if (!String.IsNullOrEmpty(logText))\n            {\n                logString.Append(logText); \n            }\n\n            if (buildLogStream != null)\n            {\n                buildLogStream.WriteLine(&quot;[{0}] {1}&quot;,\n                    DateTime.Now.ToString(), logString.ToString());\n                buildLogStream.Flush();\n            }\n            \n            if (echoToConsole)\n            {\n                Console.WriteLine(logString.ToString());\n            }\n        }\n    }\n} \n</code></pre><pre><code class=\"lang-vb\" name=\"Process_AsyncStreams#3\">&#39; Define the namespaces used by this sample.\nImports System\nImports System.Text\nImports System.IO\nImports System.Diagnostics\nImports System.Threading\nImports System.ComponentModel\nImports Microsoft.VisualBasic\n\n\nClass ProcessNMakeStreamRedirection\n\n   &#39; Define static variables shared by class methods.\n   Private Shared buildLogStream As StreamWriter = Nothing\n   Private Shared logMutex As Mutex = New Mutex()\n   Private Shared maxLogLines As Integer = 25\n   Private Shared currentLogLines As Integer = 0\n   \n   \n   Public Shared Sub RedirectNMakeCommandStreams()\n      Dim nmakeArguments As String = Nothing\n      Dim nmakeProcess As Process\n      \n      &#39; Get the input nmake command-line arguments.\n      Console.WriteLine(&quot;Enter the NMake command line arguments&quot; + _\n          &quot; (@commandfile or /f makefile, etc):&quot;)\n      Dim inputText As String = Console.ReadLine()\n      If Not String.IsNullOrEmpty(inputText) Then\n         nmakeArguments = inputText\n      End If\n      \n      Console.WriteLine(&quot;Enter max line limit for log file (default is 25):&quot;)\n      inputText = Console.ReadLine()\n      If Not String.IsNullOrEmpty(inputText) Then\n         If Not Int32.TryParse(inputText, maxLogLines) Then\n            maxLogLines = 25\n         End If\n      End If\n      Console.WriteLine(&quot;Output beyond {0} lines will be ignored.&quot;, _\n          maxLogLines)\n      \n      &#39; Initialize the process and its StartInfo properties.\n      nmakeProcess = New Process()\n      nmakeProcess.StartInfo.FileName = &quot;NMake.exe&quot;\n      \n      &#39; Build the nmake command argument list.\n      If Not String.IsNullOrEmpty(nmakeArguments) Then\n         nmakeProcess.StartInfo.Arguments = nmakeArguments\n      End If\n      \n      &#39; Set UseShellExecute to false for redirection.\n      nmakeProcess.StartInfo.UseShellExecute = False\n      \n      &#39; Redirect the standard output of the nmake command.  \n      &#39; Read the stream asynchronously using an event handler.\n      nmakeProcess.StartInfo.RedirectStandardOutput = True\n      AddHandler nmakeProcess.OutputDataReceived, _\n                AddressOf NMakeOutputDataHandler\n      \n      &#39; Redirect the error output of the nmake command. \n      nmakeProcess.StartInfo.RedirectStandardError = True\n      AddHandler nmakeProcess.ErrorDataReceived, _\n                AddressOf NMakeErrorDataHandler\n\n      logMutex.WaitOne()\n\n      currentLogLines = 0\n    \n      &#39; Write a header to the log file.\n      Const buildLogFile As String = &quot;NmakeCmd.Txt&quot;\n      Try \n          buildLogStream = new StreamWriter(buildLogFile, true)\n      Catch e As Exception\n          Console.WriteLine(&quot;Could not open output file {0}&quot;, buildLogFile)\n          Console.WriteLine(&quot;Exception = {0}&quot;, e.ToString())\n          Console.WriteLine(e.Message)\n\n          buildLogStream = Nothing\n      End Try\n\n      If Not buildLogStream Is Nothing Then\n               \n          Console.WriteLine(&quot;Nmake output logged to {0}&quot;, _\n              buildLogFile)\n    \n          buildLogStream.WriteLine()\n          buildLogStream.WriteLine(DateTime.Now.ToString())\n          \n          If Not String.IsNullOrEmpty(nmakeArguments) Then\n              buildLogStream.Write(&quot;Command line = NMake {0}&quot;, _\n                        nmakeArguments)\n          Else \n              buildLogStream.Write(&quot;Command line = Nmake&quot;)\n          End If\n          \n          buildLogStream.WriteLine()\n          buildLogStream.Flush()\n            \n          logMutex.ReleaseMutex()\n      \n           &#39; Start the process.\n           Console.WriteLine()\n           Console.WriteLine(&quot;<br>Starting Nmake command...&quot;)\n           Console.WriteLine()\n           nmakeProcess.Start()\n\n           &#39; Start the asynchronous read of the error stream.\n           nmakeProcess.BeginErrorReadLine()\n\n           &#39; Start the asynchronous read of the output stream.\n           nmakeProcess.BeginOutputReadLine()\n    \n           &#39; Let the nmake command run, collecting the output.\n           nmakeProcess.WaitForExit()\n\n           nmakeProcess.Close()\n           buildLogStream.Close()\n           logMutex.Dispose()\n       End If\n   End Sub \n   \n    Private Shared Sub NMakeOutputDataHandler(sendingProcess As Object, _\n       outLine As DataReceivedEventArgs)\n\n        &#39; Collect the output, displaying it to the screen and \n        &#39; logging it to the output file.  Cancel the read\n        &#39; operation when the maximum line limit is reached.\n\n        If Not String.IsNullOrEmpty(outLine.Data) Then\n            logMutex.WaitOne()\n\n            currentLogLines = currentLogLines + 1\n            If currentLogLines &gt; maxLogLines Then\n                \n                &#39; Display the line to the console.\n                &#39; Skip writing the line to the log file.\n                Console.WriteLine(&quot;StdOut: {0}&quot;, outLine.Data)\n            Else If currentLogLines = maxLogLines Then\n                \n                LogToFile(&quot;StdOut&quot;, &quot;&lt;Max build log limit reached!&gt;&quot;, _\n                    true)\n    \n                &#39; Stop reading the output streams.\n                Dim p As Process = sendingProcess \n                If Not (p Is Nothing) Then\n                    p.CancelOutputRead()\n                    p.CancelErrorRead()\n                End If\n            Else \n                &#39; Write the line to the log file.\n                LogToFile(&quot;StdOut&quot;, outLine.Data, true)\n            End If\n\n            logMutex.ReleaseMutex()\n        End If\n \n    End Sub \n   \n   Private Shared Sub NMakeErrorDataHandler(sendingProcess As Object, _\n        errLine As DataReceivedEventArgs)\n\n      &#39; Collect the error output, displaying it to the screen and \n      &#39; logging it to the output file.  Cancel the error output\n      &#39; read operation when the maximum line limit is reached.\n\n        If Not String.IsNullOrEmpty(errLine.Data) Then\n            logMutex.WaitOne()\n\n            currentLogLines = currentLogLines + 1\n            If currentLogLines &gt; maxLogLines Then\n                \n                &#39; Display the line to the console.\n                &#39; Skip writing the line to the log file.\n                Console.WriteLine(&quot;StdErr: {0}&quot;, errLine.Data)\n            Else If currentLogLines = maxLogLines Then\n                \n                LogToFile(&quot;StdErr&quot;, &quot;&lt;Max build log limit reached!&gt;&quot;, _\n                    true)\n    \n                &#39; Stop reading the output streams.\n                Dim p As Process = sendingProcess \n                If Not (p Is Nothing) Then\n                    p.CancelOutputRead()\n                    p.CancelErrorRead()\n                End If\n            Else \n                &#39; Write the line to the log file.\n                LogToFile(&quot;StdErr&quot;, errLine.Data, true)\n            End If\n\n            logMutex.ReleaseMutex()\n        End If\n \n    End Sub\n   \n    Private Shared Sub LogToFile(logPrefix As String, _\n                                logText As String, _\n                                echoToConsole As String)\n\n        &#39; Write the specified line to the log file stream.\n        Dim logString As StringBuilder = New StringBuilder()\n\n        If Not String.IsNullOrEmpty(logPrefix) Then\n                logString.AppendFormat(&quot;{0}&gt; &quot;, logPrefix)\n        End If\n\n        If Not String.IsNullOrEmpty(logText) Then\n            logString.Append(logText)\n        End If\n\n        If Not buildLogStream Is Nothing Then\n        \n            buildLogStream.WriteLine(&quot;[{0}] {1}&quot;, _\n                DateTime.Now.ToString(), logString.ToString())\n            buildLogStream.Flush()\n         End If\n            \n         If echoToConsole Then\n            Console.WriteLine(logString.ToString())\n         End If\n  \n    End Sub \nEnd Class \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_CancelOutputRead\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_CancelOutputRead_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CancelOutputRead()</div>        \r\n          </div>\r\n    \r\n            <p>Cancels the asynchronous read operation on the redirected <span class=\"xref\">stem.Diagnostics.Process.StandardOutput*</span> stream of an application.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void CancelOutputRead ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Diagnostics.Process.StandardOutput*</span> stream is not enabled for asynchronous read operations.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_BeginOutputReadLine_\" data-linktype=\"relative-path\">BeginOutputReadLine</a> starts an asynchronous read operation on the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardOutput_\" data-linktype=\"relative-path\">StandardOutput</a> stream. CancelOutputRead ends the asynchronous read operation.  </p>\n<p> After canceling, you can resume asynchronous read operations by calling <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_BeginOutputReadLine_\" data-linktype=\"relative-path\">BeginOutputReadLine</a> again.  </p>\n<p> When you call CancelOutputRead, all in-progress read operations for <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardOutput_\" data-linktype=\"relative-path\">StandardOutput</a> are completed and then the event handler is disabled. All further redirected output to <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardOutput_\" data-linktype=\"relative-path\">StandardOutput</a> is saved in a buffer. If you re-enable the event handler with a call to <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_BeginOutputReadLine_\" data-linktype=\"relative-path\">BeginOutputReadLine</a>, the saved output is sent to the event handler and asynchronous read operations resume. If you want to change the event handler before resuming asynchronous read operations, you must remove the existing event handler before adding the new event handler:  </p>\n<pre><code>// At this point the DataReceivedEventHandler(OutputHandler1)   \n// has executed a CancelOutputRead.  \n\n// Remove the prior event handler.  \nprocess.OutputDataReceived -=   \n    new DataReceivedEventHandler(OutputHandler1);  \n\n// Register a new event handler.  \nprocess.OutputDataReceived +=   \n    new DataReceivedEventHandler(OutputHandler2);  \n\n// Call the corresponding BeginOutputReadLine.  \nprocess.BeginOutputReadLine();\n</code></pre><div class=\"NOTE\"><h5>Note</h5><p> You cannot mix asynchronous and synchronous read operations on the redirected <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardOutput_\" data-linktype=\"relative-path\">StandardOutput</a> stream. Once the redirected stream of a <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> is opened in either asynchronous or synchronous mode, all further read operations on that stream must be in the same mode. If you cancel an asynchronous read operation on <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardOutput_\" data-linktype=\"relative-path\">StandardOutput</a> and then need to read from the stream again, you must use <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_BeginOutputReadLine_\" data-linktype=\"relative-path\">BeginOutputReadLine</a> to resume asynchronous read operations. Do not follow CancelOutputRead with a call to the synchronous read methods of <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardOutput_\" data-linktype=\"relative-path\">StandardOutput</a> such as <a class=\"xref\" href=\"system.io.streamreader#System_IO_StreamReader_Read_\" data-linktype=\"relative-path\">Read</a>, <a class=\"xref\" href=\"system.io.streamreader#System_IO_StreamReader_ReadLine_\" data-linktype=\"relative-path\">ReadLine</a>, or <a class=\"xref\" href=\"system.io.streamreader#System_IO_StreamReader_ReadToEnd_\" data-linktype=\"relative-path\">ReadToEnd</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example starts the <code>nmake</code> command with user supplied arguments. The error and output streams are read asynchronously; the collected text lines are displayed to the console as well as written to a log file. If the command output exceeds a specified number of lines, the asynchronous read operations are canceled.  </p>\n<pre><code class=\"lang-cpp\" name=\"Process_AsyncStreams#3\">ref class ProcessNMakeStreamRedirection\n{\nprivate:\n   // Define static variables shared by class methods.\n   static StreamWriter^ buildLogStream = nullptr;\n   static Mutex^ logMutex = gcnew Mutex;\n   static int maxLogLines = 25;\n   static int currentLogLines = 0;\n\npublic:\n   static void RedirectNMakeCommandStreams()\n   {\n      String^ nmakeArguments = nullptr;\n      Process^ nmakeProcess;\n      \n      // Get the input nmake command-line arguments.\n      Console::WriteLine( &quot;Enter the NMake command line arguments (@commandfile or /f makefile, etc):&quot; );\n      String^ inputText = Console::ReadLine();\n      if (  !String::IsNullOrEmpty( inputText ) )\n      {\n         nmakeArguments = inputText;\n      }\n\n      Console::WriteLine( &quot;Enter max line limit for log file (default is 25):&quot; );\n      inputText = Console::ReadLine();\n      if (  !String::IsNullOrEmpty( inputText ) )\n      {\n         if (  !Int32::TryParse( inputText, maxLogLines ) )\n         {\n            maxLogLines = 25;\n         }\n      }\n      Console::WriteLine( &quot;Output beyond {0} lines will be ignored.&quot;,\n         maxLogLines.ToString() );\n      \n      // Initialize the process and its StartInfo properties.\n      nmakeProcess = gcnew Process;\n      nmakeProcess-&gt;StartInfo-&gt;FileName = &quot;NMake.exe&quot;;\n      \n      // Build the nmake command argument list.\n      if (  !String::IsNullOrEmpty( nmakeArguments ) )\n      {\n         nmakeProcess-&gt;StartInfo-&gt;Arguments = nmakeArguments;\n      }\n      \n      // Set UseShellExecute to false for redirection.\n      nmakeProcess-&gt;StartInfo-&gt;UseShellExecute = false;\n      \n      // Redirect the standard output of the nmake command.  \n      // Read the stream asynchronously using an event handler.\n      nmakeProcess-&gt;StartInfo-&gt;RedirectStandardOutput = true;\n      nmakeProcess-&gt;OutputDataReceived += gcnew DataReceivedEventHandler( NMakeOutputDataHandler );\n      \n      // Redirect the error output of the nmake command. \n      nmakeProcess-&gt;StartInfo-&gt;RedirectStandardError = true;\n      nmakeProcess-&gt;ErrorDataReceived += gcnew DataReceivedEventHandler( NMakeErrorDataHandler );\n\n      logMutex-&gt;WaitOne();\n\n      currentLogLines = 0;\n      \n      // Write a header to the log file.\n      String^ buildLogFile = &quot;NmakeCmd.Txt&quot;;\n      try\n      {\n         buildLogStream = gcnew StreamWriter( buildLogFile,true );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Could not open output file {0}&quot;, buildLogFile );\n         Console::WriteLine( &quot;Exception = {0}&quot;, e-&gt;ToString() );\n         Console::WriteLine( e-&gt;Message-&gt;ToString() );\n\n         buildLogStream = nullptr;\n      }\n\n      if ( buildLogStream != nullptr )\n      {\n         Console::WriteLine( &quot;Nmake output logged to {0}&quot;, buildLogFile );\n\n         buildLogStream-&gt;WriteLine();\n         buildLogStream-&gt;WriteLine( DateTime::Now.ToString() );\n         if (  !String::IsNullOrEmpty( nmakeArguments ) )\n         {\n            buildLogStream-&gt;Write( &quot;Command line = NMake {0}&quot;, nmakeArguments );\n         }\n         else\n         {\n            buildLogStream-&gt;Write( &quot;Command line = Nmake&quot; );\n         }\n         buildLogStream-&gt;WriteLine();\n         buildLogStream-&gt;Flush();\n\n         logMutex-&gt;ReleaseMutex();\n         \n         // Start the process.\n         Console::WriteLine();\n         Console::WriteLine( &quot;<br>Starting Nmake command&quot; );\n         Console::WriteLine();\n         nmakeProcess-&gt;Start();\n         \n         // Start the asynchronous read of the output stream.\n         nmakeProcess-&gt;BeginOutputReadLine();\n         \n         // Start the asynchronous read of the error stream.\n         nmakeProcess-&gt;BeginErrorReadLine();\n         \n         // Let the nmake command run, collecting the output.\n         nmakeProcess-&gt;WaitForExit();\n\n         nmakeProcess-&gt;Close();\n         buildLogStream-&gt;Close();\n         logMutex-&gt;Dispose();\n      }\n   }\n\nprivate:\n   static void NMakeOutputDataHandler( Object^ sendingProcess,\n      DataReceivedEventArgs^ outLine )\n   {\n      // Collect the output, displaying it to the screen and \n      // logging it to the output file.  Cancel the read\n      // operation when the maximum line limit is reached.\n\n      if (  !String::IsNullOrEmpty( outLine-&gt;Data ) )\n      {\n         logMutex-&gt;WaitOne();\n\n         currentLogLines++;\n         if ( currentLogLines &gt; maxLogLines )\n         {\n            // Display the line to the console.\n            // Skip writing the line to the log file.\n            Console::WriteLine( &quot;StdOut: {0}&quot;, outLine-&gt;Data-&gt;ToString() );\n         }\n         else\n         if ( currentLogLines == maxLogLines )\n         {\n            LogToFile( &quot;StdOut&quot;, &quot;&lt;Max build log limit reached!&gt;&quot;, true );\n            \n            // Stop reading the output streams.\n            Process^ p = dynamic_cast&lt;Process^&gt;(sendingProcess);\n            if ( p != nullptr )\n            {\n               p-&gt;CancelOutputRead();\n               p-&gt;CancelErrorRead();\n            }\n         }\n         else\n         {\n            // Write the line to the log file.\n            LogToFile( &quot;StdOut&quot;, outLine-&gt;Data, true );\n         }\n         logMutex-&gt;ReleaseMutex();\n      }\n   }\n\n   static void NMakeErrorDataHandler( Object^ sendingProcess,\n      DataReceivedEventArgs^ errLine )\n   {\n      \n      // Collect the error output, displaying it to the screen and \n      // logging it to the output file.  Cancel the error output\n      // read operation when the maximum line limit is reached.\n\n      if (  !String::IsNullOrEmpty( errLine-&gt;Data ) )\n      {\n         logMutex-&gt;WaitOne();\n\n         currentLogLines++;\n         if ( currentLogLines &gt; maxLogLines )\n         {\n            \n            // Display the line to the console.\n            // Skip writing the line to the log file.\n            Console::WriteLine( &quot;StdErr: {0}&quot;, errLine-&gt;Data-&gt;ToString() );\n         }\n         else\n         if ( currentLogLines == maxLogLines )\n         {\n            LogToFile( &quot;StdOut&quot;, &quot;&lt;Max build log limit reached!&gt;&quot;, true );\n            \n            // Stop reading the output streams.\n            Process^ p = dynamic_cast&lt;Process^&gt;(sendingProcess);\n            if ( p != nullptr )\n            {\n               p-&gt;CancelOutputRead();\n               p-&gt;CancelErrorRead();\n            }\n         }\n         else\n         {\n            // Write the line to the log file.\n            LogToFile( &quot;StdErr&quot;, errLine-&gt;Data, true );\n         }\n         logMutex-&gt;ReleaseMutex();\n      }\n   }\n\n   static void LogToFile( String^ logPrefix, String^ logText,\n      bool echoToConsole )\n   {\n      // Write the specified line to the log file stream.\n      StringBuilder^ logString = gcnew StringBuilder;\n\n      if (  !String::IsNullOrEmpty( logPrefix ) )\n      {\n         logString-&gt;AppendFormat( &quot;{0}&gt; &quot;, logPrefix );\n      }\n\n      if (  !String::IsNullOrEmpty( logText ) )\n      {\n         logString-&gt;Append( logText );\n      }\n\n      if ( buildLogStream != nullptr )\n      {\n         buildLogStream-&gt;WriteLine(  &quot;[{0}] {1}&quot;,\n            DateTime::Now.ToString(), logString-&gt;ToString() );\n         buildLogStream-&gt;Flush();\n      }\n\n      if ( echoToConsole )\n      {\n         Console::WriteLine( logString-&gt;ToString() );\n      }\n   }\n};\n</code></pre><pre><code class=\"lang-cs\" name=\"Process_AsyncStreams#3\">namespace ProcessAsyncStreamSamples\n{\n    class ProcessNMakeStreamRedirection\n    {\n        // Define static variables shared by class methods.\n        private static StreamWriter buildLogStream =null;\n        private static Mutex logMutex = new Mutex();\n        private static int maxLogLines = 25;\n        private static int currentLogLines = 0;\n\n        public static void RedirectNMakeCommandStreams()\n        {\n            String nmakeArguments = null;\n            Process nmakeProcess;\n\n            // Get the input nmake command-line arguments.\n            Console.WriteLine(&quot;Enter the NMake command line arguments &quot; +\n                &quot;(@commandfile or /f makefile, etc):&quot;);\n            String inputText = Console.ReadLine();\n            if (!String.IsNullOrEmpty(inputText))\n            {\n                nmakeArguments = inputText;\n            }\n               \n            Console.WriteLine(&quot;Enter max line limit for log file (default is 25):&quot;);\n            inputText = Console.ReadLine();\n            if (!String.IsNullOrEmpty(inputText))\n            {\n                if (!Int32.TryParse(inputText, out maxLogLines))\n                {\n                    maxLogLines = 25;\n                }\n            }\n            Console.WriteLine(&quot;Output beyond {0} lines will be ignored.&quot;,\n                maxLogLines);\n\n            // Initialize the process and its StartInfo properties.\n            nmakeProcess = new Process();\n            nmakeProcess.StartInfo.FileName = &quot;NMake.exe&quot;;\n            \n            // Build the nmake command argument list.\n            if (!String.IsNullOrEmpty(nmakeArguments))\n            {\n                nmakeProcess.StartInfo.Arguments = nmakeArguments;\n            }\n\n            // Set UseShellExecute to false for redirection.\n            nmakeProcess.StartInfo.UseShellExecute = false;\n\n            // Redirect the standard output of the nmake command.  \n            // Read the stream asynchronously using an event handler.\n            nmakeProcess.StartInfo.RedirectStandardOutput = true;\n            nmakeProcess.OutputDataReceived += new DataReceivedEventHandler(NMakeOutputDataHandler);\n   \n            // Redirect the error output of the nmake command. \n            nmakeProcess.StartInfo.RedirectStandardError = true;\n            nmakeProcess.ErrorDataReceived += new DataReceivedEventHandler(NMakeErrorDataHandler);\n\n            logMutex.WaitOne();\n\n            currentLogLines = 0;\n\n            // Write a header to the log file.\n            const String buildLogFile = &quot;NmakeCmd.Txt&quot;;\n            try \n            {\n                buildLogStream = new StreamWriter(buildLogFile, true);\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(&quot;Could not open output file {0}&quot;, buildLogFile);\n                Console.WriteLine(&quot;Exception = {0}&quot;, e.ToString());\n                Console.WriteLine(e.Message);\n\n                buildLogStream = null;\n            }\n\n            if (buildLogStream != null)\n            {   \n                Console.WriteLine(&quot;Nmake output logged to {0}&quot;, \n                    buildLogFile);\n    \n                buildLogStream.WriteLine();\n                buildLogStream.WriteLine(DateTime.Now.ToString());\n                if (!String.IsNullOrEmpty(nmakeArguments))\n                {\n                    buildLogStream.Write(&quot;Command line = NMake {0}&quot;,\n                        nmakeArguments);\n                }\n                else \n                {\n                    buildLogStream.Write(&quot;Command line = Nmake&quot;);\n                }\n                buildLogStream.WriteLine();\n                buildLogStream.Flush();\n            \n                logMutex.ReleaseMutex();\n\n                // Start the process.\n                Console.WriteLine();\n                Console.WriteLine(&quot;<br>Starting Nmake command...&quot;);\n                Console.WriteLine();\n                nmakeProcess.Start();\n\n                // Start the asynchronous read of the error stream.\n                nmakeProcess.BeginErrorReadLine();\n\n                // Start the asynchronous read of the output stream.\n                nmakeProcess.BeginOutputReadLine();\n    \n                // Let the nmake command run, collecting the output.\n                nmakeProcess.WaitForExit();\n\n                nmakeProcess.Close();\n                buildLogStream.Close();\n                logMutex.Dispose();\n            }\n        }\n\n        private static void NMakeOutputDataHandler(object sendingProcess, \n            DataReceivedEventArgs outLine)\n        {\n            // Collect the output, displaying it to the screen and \n            // logging it to the output file.  Cancel the read\n            // operation when the maximum line limit is reached.\n\n            if (!String.IsNullOrEmpty(outLine.Data))\n            {\n                logMutex.WaitOne();\n\n                currentLogLines++;\n                if (currentLogLines &gt; maxLogLines)\n                {\n                    // Display the line to the console.\n                    // Skip writing the line to the log file.\n                    Console.WriteLine(&quot;StdOut: {0}&quot;, outLine.Data);\n                }\n                else if (currentLogLines == maxLogLines)\n                {\n                    LogToFile(&quot;StdOut&quot;, &quot;&lt;Max build log limit reached!&gt;&quot;, \n                        true);\n    \n                    // Stop reading the output streams.\n                    Process p = sendingProcess as Process;\n                    if (p != null)\n                    {\n                        p.CancelOutputRead();\n                        p.CancelErrorRead();\n                    }\n                }\n                else \n                {\n                    // Write the line to the log file.\n                    LogToFile(&quot;StdOut&quot;, outLine.Data, true);\n                }\n                logMutex.ReleaseMutex();\n            }\n        }\n\n        private static void NMakeErrorDataHandler(object sendingProcess, \n            DataReceivedEventArgs errLine)\n        {\n            // Collect error output, displaying it to the screen and \n            // logging it to the output file.  Cancel the error output\n            // read operation when the maximum line limit is reached.\n\n            if (!String.IsNullOrEmpty(errLine.Data))\n            {\n                logMutex.WaitOne();\n\n                currentLogLines++;\n                if (currentLogLines &gt; maxLogLines)\n                {\n                    // Display the error line to the console.\n                    // Skip writing the line to the log file.\n                    Console.WriteLine(&quot;StdErr: {0}&quot;, errLine.Data);\n                }\n                else if (currentLogLines == maxLogLines)\n                {\n                    LogToFile(&quot;StdErr&quot;, &quot;&lt;Max build log limit reached!&gt;&quot;, \n                        true);\n    \n                    // Stop reading the output streams\n                    Process p = sendingProcess as Process;\n                    if (p != null)\n                    {\n                        p.CancelErrorRead();\n                        p.CancelOutputRead();\n\n                    }\n                }\n                else \n                {\n                    // Write the line to the log file.\n                    LogToFile(&quot;StdErr&quot;, errLine.Data, true);\n                }\n\n                logMutex.ReleaseMutex();\n            }\n        }\n\n        private static void LogToFile(String logPrefix, \n            String logText, bool echoToConsole)\n        {\n            // Write the specified line to the log file stream.\n            StringBuilder logString = new StringBuilder();\n\n            if (!String.IsNullOrEmpty(logPrefix))\n            {\n                logString.AppendFormat(&quot;{0}&gt; &quot;, logPrefix);\n            }\n\n            if (!String.IsNullOrEmpty(logText))\n            {\n                logString.Append(logText); \n            }\n\n            if (buildLogStream != null)\n            {\n                buildLogStream.WriteLine(&quot;[{0}] {1}&quot;,\n                    DateTime.Now.ToString(), logString.ToString());\n                buildLogStream.Flush();\n            }\n            \n            if (echoToConsole)\n            {\n                Console.WriteLine(logString.ToString());\n            }\n        }\n    }\n} \n</code></pre><pre><code class=\"lang-vb\" name=\"Process_AsyncStreams#3\">&#39; Define the namespaces used by this sample.\nImports System\nImports System.Text\nImports System.IO\nImports System.Diagnostics\nImports System.Threading\nImports System.ComponentModel\nImports Microsoft.VisualBasic\n\n\nClass ProcessNMakeStreamRedirection\n\n   &#39; Define static variables shared by class methods.\n   Private Shared buildLogStream As StreamWriter = Nothing\n   Private Shared logMutex As Mutex = New Mutex()\n   Private Shared maxLogLines As Integer = 25\n   Private Shared currentLogLines As Integer = 0\n   \n   \n   Public Shared Sub RedirectNMakeCommandStreams()\n      Dim nmakeArguments As String = Nothing\n      Dim nmakeProcess As Process\n      \n      &#39; Get the input nmake command-line arguments.\n      Console.WriteLine(&quot;Enter the NMake command line arguments&quot; + _\n          &quot; (@commandfile or /f makefile, etc):&quot;)\n      Dim inputText As String = Console.ReadLine()\n      If Not String.IsNullOrEmpty(inputText) Then\n         nmakeArguments = inputText\n      End If\n      \n      Console.WriteLine(&quot;Enter max line limit for log file (default is 25):&quot;)\n      inputText = Console.ReadLine()\n      If Not String.IsNullOrEmpty(inputText) Then\n         If Not Int32.TryParse(inputText, maxLogLines) Then\n            maxLogLines = 25\n         End If\n      End If\n      Console.WriteLine(&quot;Output beyond {0} lines will be ignored.&quot;, _\n          maxLogLines)\n      \n      &#39; Initialize the process and its StartInfo properties.\n      nmakeProcess = New Process()\n      nmakeProcess.StartInfo.FileName = &quot;NMake.exe&quot;\n      \n      &#39; Build the nmake command argument list.\n      If Not String.IsNullOrEmpty(nmakeArguments) Then\n         nmakeProcess.StartInfo.Arguments = nmakeArguments\n      End If\n      \n      &#39; Set UseShellExecute to false for redirection.\n      nmakeProcess.StartInfo.UseShellExecute = False\n      \n      &#39; Redirect the standard output of the nmake command.  \n      &#39; Read the stream asynchronously using an event handler.\n      nmakeProcess.StartInfo.RedirectStandardOutput = True\n      AddHandler nmakeProcess.OutputDataReceived, _\n                AddressOf NMakeOutputDataHandler\n      \n      &#39; Redirect the error output of the nmake command. \n      nmakeProcess.StartInfo.RedirectStandardError = True\n      AddHandler nmakeProcess.ErrorDataReceived, _\n                AddressOf NMakeErrorDataHandler\n\n      logMutex.WaitOne()\n\n      currentLogLines = 0\n    \n      &#39; Write a header to the log file.\n      Const buildLogFile As String = &quot;NmakeCmd.Txt&quot;\n      Try \n          buildLogStream = new StreamWriter(buildLogFile, true)\n      Catch e As Exception\n          Console.WriteLine(&quot;Could not open output file {0}&quot;, buildLogFile)\n          Console.WriteLine(&quot;Exception = {0}&quot;, e.ToString())\n          Console.WriteLine(e.Message)\n\n          buildLogStream = Nothing\n      End Try\n\n      If Not buildLogStream Is Nothing Then\n               \n          Console.WriteLine(&quot;Nmake output logged to {0}&quot;, _\n              buildLogFile)\n    \n          buildLogStream.WriteLine()\n          buildLogStream.WriteLine(DateTime.Now.ToString())\n          \n          If Not String.IsNullOrEmpty(nmakeArguments) Then\n              buildLogStream.Write(&quot;Command line = NMake {0}&quot;, _\n                        nmakeArguments)\n          Else \n              buildLogStream.Write(&quot;Command line = Nmake&quot;)\n          End If\n          \n          buildLogStream.WriteLine()\n          buildLogStream.Flush()\n            \n          logMutex.ReleaseMutex()\n      \n           &#39; Start the process.\n           Console.WriteLine()\n           Console.WriteLine(&quot;<br>Starting Nmake command...&quot;)\n           Console.WriteLine()\n           nmakeProcess.Start()\n\n           &#39; Start the asynchronous read of the error stream.\n           nmakeProcess.BeginErrorReadLine()\n\n           &#39; Start the asynchronous read of the output stream.\n           nmakeProcess.BeginOutputReadLine()\n    \n           &#39; Let the nmake command run, collecting the output.\n           nmakeProcess.WaitForExit()\n\n           nmakeProcess.Close()\n           buildLogStream.Close()\n           logMutex.Dispose()\n       End If\n   End Sub \n   \n    Private Shared Sub NMakeOutputDataHandler(sendingProcess As Object, _\n       outLine As DataReceivedEventArgs)\n\n        &#39; Collect the output, displaying it to the screen and \n        &#39; logging it to the output file.  Cancel the read\n        &#39; operation when the maximum line limit is reached.\n\n        If Not String.IsNullOrEmpty(outLine.Data) Then\n            logMutex.WaitOne()\n\n            currentLogLines = currentLogLines + 1\n            If currentLogLines &gt; maxLogLines Then\n                \n                &#39; Display the line to the console.\n                &#39; Skip writing the line to the log file.\n                Console.WriteLine(&quot;StdOut: {0}&quot;, outLine.Data)\n            Else If currentLogLines = maxLogLines Then\n                \n                LogToFile(&quot;StdOut&quot;, &quot;&lt;Max build log limit reached!&gt;&quot;, _\n                    true)\n    \n                &#39; Stop reading the output streams.\n                Dim p As Process = sendingProcess \n                If Not (p Is Nothing) Then\n                    p.CancelOutputRead()\n                    p.CancelErrorRead()\n                End If\n            Else \n                &#39; Write the line to the log file.\n                LogToFile(&quot;StdOut&quot;, outLine.Data, true)\n            End If\n\n            logMutex.ReleaseMutex()\n        End If\n \n    End Sub \n   \n   Private Shared Sub NMakeErrorDataHandler(sendingProcess As Object, _\n        errLine As DataReceivedEventArgs)\n\n      &#39; Collect the error output, displaying it to the screen and \n      &#39; logging it to the output file.  Cancel the error output\n      &#39; read operation when the maximum line limit is reached.\n\n        If Not String.IsNullOrEmpty(errLine.Data) Then\n            logMutex.WaitOne()\n\n            currentLogLines = currentLogLines + 1\n            If currentLogLines &gt; maxLogLines Then\n                \n                &#39; Display the line to the console.\n                &#39; Skip writing the line to the log file.\n                Console.WriteLine(&quot;StdErr: {0}&quot;, errLine.Data)\n            Else If currentLogLines = maxLogLines Then\n                \n                LogToFile(&quot;StdErr&quot;, &quot;&lt;Max build log limit reached!&gt;&quot;, _\n                    true)\n    \n                &#39; Stop reading the output streams.\n                Dim p As Process = sendingProcess \n                If Not (p Is Nothing) Then\n                    p.CancelOutputRead()\n                    p.CancelErrorRead()\n                End If\n            Else \n                &#39; Write the line to the log file.\n                LogToFile(&quot;StdErr&quot;, errLine.Data, true)\n            End If\n\n            logMutex.ReleaseMutex()\n        End If\n \n    End Sub\n   \n    Private Shared Sub LogToFile(logPrefix As String, _\n                                logText As String, _\n                                echoToConsole As String)\n\n        &#39; Write the specified line to the log file stream.\n        Dim logString As StringBuilder = New StringBuilder()\n\n        If Not String.IsNullOrEmpty(logPrefix) Then\n                logString.AppendFormat(&quot;{0}&gt; &quot;, logPrefix)\n        End If\n\n        If Not String.IsNullOrEmpty(logText) Then\n            logString.Append(logText)\n        End If\n\n        If Not buildLogStream Is Nothing Then\n        \n            buildLogStream.WriteLine(&quot;[{0}] {1}&quot;, _\n                DateTime.Now.ToString(), logString.ToString())\n            buildLogStream.Flush()\n         End If\n            \n         If echoToConsole Then\n            Console.WriteLine(logString.ToString())\n         End If\n  \n    End Sub \nEnd Class \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_Close\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_Close_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Close()</div>        \r\n          </div>\r\n    \r\n            <p>Frees all the resources that are associated with this component.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Close ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Close method causes the process to stop waiting for exit if it was waiting, closes the process handle, and clears process-specific properties. Close does not close the standard output, input, and error readers and writers in case they are being referenced externally.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method calls Close. Placing the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> object in a <code>using</code> block disposes of resources without the need to call Close.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example starts an instance of Notepad. It then retrieves the physical memory usage of the associated process at 2-second intervals for a maximum of 10 seconds. The example detects whether the process exits before 10 seconds have elapsed. The example closes the process if it is still running after 10 seconds.  </p>\n<pre><code class=\"lang-cpp\" name=\"process_refresh#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Diagnostics;\nusing namespace System::Threading;\nint main()\n{\n   try\n   {\n      Process^ myProcess;\n      myProcess = Process::Start(  &quot;Notepad.exe&quot; );\n      \n      // Display physical memory usage 5 times at intervals of 2 seconds.\n      for ( int i = 0; i &lt; 5; i++ )\n      {\n         if (  !myProcess-&gt;HasExited )\n         {\n            \n            // Discard cached information about the process.\n            myProcess-&gt;Refresh();\n            \n            // Print working set to console.\n            Console::WriteLine( &quot;Physical Memory Usage : {0}&quot;, myProcess-&gt;WorkingSet.ToString() );\n            \n            // Wait 2 seconds.\n            Thread::Sleep( 2000 );\n         }\n         else\n         {\n            break;\n         }\n\n      }\n      myProcess-&gt;CloseMainWindow();\n      \n      // Free resources associated with process.\n      myProcess-&gt;Close();\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;The following exception was raised: &quot; );\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"process_refresh#1\">\nusing System;\nusing System.Diagnostics;\nusing System.Threading;\n\nnamespace Process_Sample\n{\n   class MyProcessClass\n   {\n      public static void Main()\n      {\n         try\n         {\n            Process myProcess;\n            myProcess = Process.Start(&quot;Notepad.exe&quot;);\n            // Display physical memory usage 5 times at intervals of 2 seconds.\n            for (int i = 0;i &lt; 5; i++)\n            {\n               if (!myProcess.HasExited)\n               {\n                   // Discard cached information about the process.\n                   myProcess.Refresh();\n                   // Print working set to console.\n                   Console.WriteLine(&quot;Physical Memory Usage: &quot; \n                                        + myProcess.WorkingSet.ToString());\n                   // Wait 2 seconds.\n                   Thread.Sleep(2000);\n               }\n               else {\n                   break;\n               } \n            }\n\n            // Close process by sending a close message to its main window.\n            myProcess.CloseMainWindow();\n            // Free resources associated with process.\n            myProcess.Close();\n\n         }\n         catch(Exception e)\n         {\n            Console.WriteLine(&quot;The following exception was raised: &quot;);\n            Console.WriteLine(e.Message);\n         }\n      }\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"process_refresh#1\">Imports System\nImports System.Diagnostics\nImports System.Threading\n\nNamespace Process_Sample\n   Class MyProcessClass\n\n      Public Shared Sub Main()\n         Try\n\n            Dim myProcess As Process\n            myProcess = Process.Start(&quot;Notepad.exe&quot;)\n            &#39; Display physical memory usage 5 times at intervals of 2 seconds.\n            Dim i As Integer\n            For i = 0 To 4\n               If not myProcess.HasExited Then\n               \n                  &#39; Discard cached information about the process.\n                  myProcess.Refresh()\n                  &#39; Print working set to console.\n                  Console.WriteLine(&quot;Physical Memory Usage: &quot; + _\n                                              myProcess.WorkingSet.ToString())\n                  &#39; Wait 2 seconds.\n                  Thread.Sleep(2000)\n               Else \n                  Exit For\n               End If\n              \n            Next i\n\n           &#39; Close process by sending a close message to its main window.\n           myProcess.CloseMainWindow()\n           &#39; Free resources associated with process.\n           myProcess.Close()\n\n         Catch e As Exception\n            Console.WriteLine(&quot;The following exception was raised: &quot;)\n            Console.WriteLine(e.Message)\n         End Try\n      End Sub &#39;Main\n   End Class &#39;MyProcessClass\nEnd Namespace &#39;Process_Sample\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_CloseMainWindow\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_CloseMainWindow_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CloseMainWindow()</div>        \r\n          </div>\r\n    \r\n            <p>Closes a process that has a user interface by sending a close message to its main window.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool CloseMainWindow ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the close message was successfully sent; <code>false</code> if the associated process does not have a main window or if the main window is disabled (for example if a modal dialog is being shown).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The platform is Windows 98 or Windows Millennium Edition (Windows Me); set the <span class=\"xref\">stem.Diagnostics.ProcessStartInfo.UseShellExecute*</span> property to <code>false</code> to access this property on Windows 98 and Windows Me.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The process has already exited.  </p>\n<p> -or-  </p>\n<p> No process is associated with this <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When a process is executing, its message loop is in a wait state. The message loop executes every time a Windows message is sent to the process by the operating system. Calling CloseMainWindow sends a request to close to the main window, which, in a well-formed application, closes child windows and revokes all running message loops for the application. The request to exit the process by calling CloseMainWindow does not force the application to quit. The application can ask for user verification before quitting, or it can refuse to quit. To force the application to quit, use the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Kill_\" data-linktype=\"relative-path\">Kill</a> method. The behavior of CloseMainWindow is identical to that of a user closing an application&#39;s main window using the system menu. Therefore, the request to exit the process by closing the main window does not force the application to quit immediately.  </p>\n<p> Data edited by the process or resources allocated to the process can be lost if you call <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Kill_\" data-linktype=\"relative-path\">Kill</a>. <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Kill_\" data-linktype=\"relative-path\">Kill</a> causes an abnormal process termination, and should be used only when necessary. CloseMainWindow enables an orderly termination of the process and closes all windows, so it is preferable for applications with an interface. If CloseMainWindow fails, you can use <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Kill_\" data-linktype=\"relative-path\">Kill</a> to terminate the process. <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Kill_\" data-linktype=\"relative-path\">Kill</a> is the only way to terminate processes that do not have graphical interfaces.  </p>\n<p> You can call <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Kill_\" data-linktype=\"relative-path\">Kill</a> and CloseMainWindow only for processes that are running on the local computer. You cannot cause processes on remote computers to exit. You can only view information for processes running on remote computers.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example starts an instance of Notepad. It then retrieves the physical memory usage of the associated process at 2 second intervals for a maximum of 10 seconds. The example detects whether the process exits before 10 seconds have elapsed. The example closes the process if it is still running after 10 seconds.  </p>\n<pre><code class=\"lang-cpp\" name=\"process_refresh#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Diagnostics;\nusing namespace System::Threading;\nint main()\n{\n   try\n   {\n      Process^ myProcess;\n      myProcess = Process::Start(  &quot;Notepad.exe&quot; );\n      \n      // Display physical memory usage 5 times at intervals of 2 seconds.\n      for ( int i = 0; i &lt; 5; i++ )\n      {\n         if (  !myProcess-&gt;HasExited )\n         {\n            \n            // Discard cached information about the process.\n            myProcess-&gt;Refresh();\n            \n            // Print working set to console.\n            Console::WriteLine( &quot;Physical Memory Usage : {0}&quot;, myProcess-&gt;WorkingSet.ToString() );\n            \n            // Wait 2 seconds.\n            Thread::Sleep( 2000 );\n         }\n         else\n         {\n            break;\n         }\n\n      }\n      myProcess-&gt;CloseMainWindow();\n      \n      // Free resources associated with process.\n      myProcess-&gt;Close();\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;The following exception was raised: &quot; );\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"process_refresh#1\">\nusing System;\nusing System.Diagnostics;\nusing System.Threading;\n\nnamespace Process_Sample\n{\n   class MyProcessClass\n   {\n      public static void Main()\n      {\n         try\n         {\n            Process myProcess;\n            myProcess = Process.Start(&quot;Notepad.exe&quot;);\n            // Display physical memory usage 5 times at intervals of 2 seconds.\n            for (int i = 0;i &lt; 5; i++)\n            {\n               if (!myProcess.HasExited)\n               {\n                   // Discard cached information about the process.\n                   myProcess.Refresh();\n                   // Print working set to console.\n                   Console.WriteLine(&quot;Physical Memory Usage: &quot; \n                                        + myProcess.WorkingSet.ToString());\n                   // Wait 2 seconds.\n                   Thread.Sleep(2000);\n               }\n               else {\n                   break;\n               } \n            }\n\n            // Close process by sending a close message to its main window.\n            myProcess.CloseMainWindow();\n            // Free resources associated with process.\n            myProcess.Close();\n\n         }\n         catch(Exception e)\n         {\n            Console.WriteLine(&quot;The following exception was raised: &quot;);\n            Console.WriteLine(e.Message);\n         }\n      }\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"process_refresh#1\">Imports System\nImports System.Diagnostics\nImports System.Threading\n\nNamespace Process_Sample\n   Class MyProcessClass\n\n      Public Shared Sub Main()\n         Try\n\n            Dim myProcess As Process\n            myProcess = Process.Start(&quot;Notepad.exe&quot;)\n            &#39; Display physical memory usage 5 times at intervals of 2 seconds.\n            Dim i As Integer\n            For i = 0 To 4\n               If not myProcess.HasExited Then\n               \n                  &#39; Discard cached information about the process.\n                  myProcess.Refresh()\n                  &#39; Print working set to console.\n                  Console.WriteLine(&quot;Physical Memory Usage: &quot; + _\n                                              myProcess.WorkingSet.ToString())\n                  &#39; Wait 2 seconds.\n                  Thread.Sleep(2000)\n               Else \n                  Exit For\n               End If\n              \n            Next i\n\n           &#39; Close process by sending a close message to its main window.\n           myProcess.CloseMainWindow()\n           &#39; Free resources associated with process.\n           myProcess.Close()\n\n         Catch e As Exception\n            Console.WriteLine(&quot;The following exception was raised: &quot;)\n            Console.WriteLine(e.Message)\n         End Try\n      End Sub &#39;Main\n   End Class &#39;MyProcessClass\nEnd Namespace &#39;Process_Sample\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_Dispose_System_Boolean_\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Release all resources used by this process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override void Dispose (bool disposing);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>disposing</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to release both managed and unmanaged resources; <code>false</code> to release only unmanaged resources.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_EnterDebugMode\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_EnterDebugMode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EnterDebugMode()</div>        \r\n          </div>\r\n    \r\n            <p>Puts a <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component in state to interact with operating system processes that run in a special mode by enabling the native property <code>SeDebugPrivilege</code> on the current thread.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void EnterDebugMode ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Some operating system processes run in a special mode. Attempting to read properties of or attach to these processes is not possible unless you have called EnterDebugMode on the component. Call <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_LeaveDebugMode_\" data-linktype=\"relative-path\">LeaveDebugMode</a> when you no longer need access to these processes that run in special mode.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_GetCurrentProcess\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_GetCurrentProcess_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCurrentProcess()</div>        \r\n          </div>\r\n    \r\n            <p>Gets a new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component and associates it with the currently active process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Diagnostics.Process GetCurrentProcess ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a></div>\r\n                  </div>\r\n                  <p>A new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component associated with the process resource that is running the calling application.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to create a new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> instance and associate it with the process resource on the local computer.  </p>\n<p> Like the similar <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_GetProcessById_\" data-linktype=\"relative-path\">GetProcessById</a>, <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_GetProcessesByName_\" data-linktype=\"relative-path\">GetProcessesByName</a>, and <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_GetProcesses_\" data-linktype=\"relative-path\">GetProcesses</a> methods, GetCurrentProcess associates an existing resource with a new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example retrieves information of the current process, processes running on the local computer, all instances of Notepad running on the local computer, and a specific process on the local computer. It then retrieves information for the same processes on a remote computer.  </p>\n<pre><code class=\"lang-cpp\" name=\"Process.GetProcesses_noexception#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Diagnostics;\nusing namespace System::ComponentModel;\nint main()\n{   \n   // Get the current process.    \n   Process^ currentProcess = Process::GetCurrentProcess();\n\n   // Get all processes running on the local computer.\n   array&lt;Process^&gt;^localAll = Process::GetProcesses();\n\n   // Get all instances of Notepad running on the local computer.\n   // This will return an empty array if notepad isn&#39;t running.\n   array&lt;Process^&gt;^localByName = Process::GetProcessesByName(&quot;notepad&quot;);\n\n   // Get a process on the local computer, using the process id.\n   // This will throw an exception if there is no such process.\n   Process^ localById = Process::GetProcessById(1234);\n\n\n   // Get processes running on a remote computer. Note that this\n   // and all the following calls will timeout and throw an exception\n   // if &quot;myComputer&quot; and 169.0.0.0 do not exist on your local network.\n\n   // Get all processes on a remote computer.\n   array&lt;Process^&gt;^remoteAll = Process::GetProcesses(&quot;myComputer&quot;);\n\n   // Get all instances of Notepad running on the specific computer, using machine name.\n   array&lt;Process^&gt;^remoteByName = Process::GetProcessesByName( &quot;notepad&quot;, &quot;myComputer&quot; );\n   \n   // Get all instances of Notepad running on the specific computer, using IP address.\n   array&lt;Process^&gt;^ipByName = Process::GetProcessesByName( &quot;notepad&quot;, &quot;169.0.0.0&quot; );\n   \n   // Get a process on a remote computer, using the process id and machine name.\n   Process^ remoteById = Process::GetProcessById( 2345, &quot;myComputer&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Process.GetProcesses_noexception#1\">Imports System\nImports System.Diagnostics\nImports System.ComponentModel\n\nNamespace MyProcessSample\n    Class MyProcess\n        Sub BindToRunningProcesses()\n            &#39; Get the current process. You can use currentProcess from this point\n            &#39; to access various properties and call methods to control the process.\n            Dim currentProcess As Process = Process.GetCurrentProcess()\n\n            &#39; Get all processes running on the local computer.\n            Dim localAll As Process() = Process.GetProcesses()\n\n            &#39; Get all instances of Notepad running on the local computer.\n            &#39; This will return an empty array if notepad isn&#39;t running.\n            Dim localByName As Process() = Process.GetProcessesByName(&quot;notepad&quot;)\n\n            &#39; Get a process on the local computer, using the process id.\n            &#39; This will throw an exception if there is no such process.\n            Dim localById As Process = Process.GetProcessById(1234)\n\n\n            &#39; Get processes running on a remote computer. Note that this\n            &#39; and all the following calls will timeout and throw an exception\n            &#39; if &quot;myComputer&quot; and 169.0.0.0 do not exist on your local network.\n\n            &#39; Get all processes on a remote computer.\n            Dim remoteAll As Process() = Process.GetProcesses(&quot;myComputer&quot;)\n\n            &#39; Get all instances of Notepad running on the specific computer, using machine name.\n            Dim remoteByName As Process() = Process.GetProcessesByName(&quot;notepad&quot;, &quot;myComputer&quot;)\n\n            &#39; Get all instances of Notepad running on the specific computer, using IP address.\n            Dim ipByName As Process() = Process.GetProcessesByName(&quot;notepad&quot;, &quot;169.0.0.0&quot;)\n\n            &#39; Get a process on a remote computer, using the process id and machine name.\n            Dim remoteById As Process = Process.GetProcessById(2345, &quot;myComputer&quot;)\n        End Sub &#39;BindToRunningProcesses\n\n        Shared Sub Main()\n            Dim myProcess As New MyProcess()\n            myProcess.BindToRunningProcesses()\n        End Sub &#39;Main \n\n    End Class &#39;MyProcess\n\nEnd Namespace &#39;MyProcessSample\n</code></pre><pre><code class=\"lang-cs\" name=\"Process.GetProcesses_noexception#1\">using System;\nusing System.Diagnostics;\nusing System.ComponentModel;\n\nnamespace MyProcessSample\n{\n    class MyProcess\n    {\n        void BindToRunningProcesses()\n        {\n            // Get the current process.\n            Process currentProcess = Process.GetCurrentProcess();\n\n            // Get all processes running on the local computer.\n            Process[] localAll = Process.GetProcesses();\n\n            // Get all instances of Notepad running on the local computer.\n            // This will return an empty array if notepad isn&#39;t running.\n            Process[] localByName = Process.GetProcessesByName(&quot;notepad&quot;);\n\n            // Get a process on the local computer, using the process id.\n            // This will throw an exception if there is no such process.\n            Process localById = Process.GetProcessById(1234);\n\n\n            // Get processes running on a remote computer. Note that this\n            // and all the following calls will timeout and throw an exception\n            // if &quot;myComputer&quot; and 169.0.0.0 do not exist on your local network.\n\n            // Get all processes on a remote computer.\n            Process[] remoteAll = Process.GetProcesses(&quot;myComputer&quot;);\n\n            // Get all instances of Notepad running on the specific computer, using machine name.\n            Process[] remoteByName = Process.GetProcessesByName(&quot;notepad&quot;, &quot;myComputer&quot;);\n\n            // Get all instances of Notepad running on the specific computer, using IP address.\n            Process[] ipByName = Process.GetProcessesByName(&quot;notepad&quot;, &quot;169.0.0.0&quot;);\n\n            // Get a process on a remote computer, using the process id and machine name.\n            Process remoteById = Process.GetProcessById(2345, &quot;myComputer&quot;);\n        }\n\n        static void Main()\n        {\n            MyProcess myProcess = new MyProcess();\n            myProcess.BindToRunningProcesses();\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_GetProcessById_System_Int32_\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_GetProcessById_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetProcessById(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component, given the identifier of a process on the local computer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Diagnostics.Process GetProcessById (int processId);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>processId</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The system-unique identifier of a process resource.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component that is associated with the local process resource identified by the <code>processId</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The process specified by the <code>processId</code> parameter is not running. The identifier might be expired.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The process was not started by this object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to create a new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component and associate it with a process resource on the local computer. The process resource must already exist on the computer, because GetProcessById does not create a system resource, but rather associates a resource with an application-generated <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component. A process <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Id_\" data-linktype=\"relative-path\">Id</a> can be retrieved only for a process that is currently running on the computer. After the process terminates, GetProcessById throws an exception if you pass it an expired identifier.  </p>\n<p> On any particular computer, the identifier of a process is unique. GetProcessById returns one process at most. If you want to get all the processes running a particular application, use <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_GetProcessesByName_System_String_\" data-linktype=\"relative-path\">GetProcessesByName(String)</a>. If multiple processes exist on the computer running the specified application, <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_GetProcessesByName_System_String_\" data-linktype=\"relative-path\">GetProcessesByName(String)</a> returns an array containing all the associated processes. You can query each of these processes in turn for its identifier. The process identifier can be viewed in the <code>Processes</code> panel of the Windows Task Manager. The <code>PID</code> column displays the process identifier that is assigned to a process.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example retrieves information of the current process, processes running on the local computer, all instances of Notepad running on the local computer, and a specific process on the local computer. It then retrieves information for the same processes on a remote computer.  </p>\n<pre><code class=\"lang-cpp\" name=\"Process.GetProcesses_noexception#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Diagnostics;\nusing namespace System::ComponentModel;\nint main()\n{   \n   // Get the current process.    \n   Process^ currentProcess = Process::GetCurrentProcess();\n\n   // Get all processes running on the local computer.\n   array&lt;Process^&gt;^localAll = Process::GetProcesses();\n\n   // Get all instances of Notepad running on the local computer.\n   // This will return an empty array if notepad isn&#39;t running.\n   array&lt;Process^&gt;^localByName = Process::GetProcessesByName(&quot;notepad&quot;);\n\n   // Get a process on the local computer, using the process id.\n   // This will throw an exception if there is no such process.\n   Process^ localById = Process::GetProcessById(1234);\n\n\n   // Get processes running on a remote computer. Note that this\n   // and all the following calls will timeout and throw an exception\n   // if &quot;myComputer&quot; and 169.0.0.0 do not exist on your local network.\n\n   // Get all processes on a remote computer.\n   array&lt;Process^&gt;^remoteAll = Process::GetProcesses(&quot;myComputer&quot;);\n\n   // Get all instances of Notepad running on the specific computer, using machine name.\n   array&lt;Process^&gt;^remoteByName = Process::GetProcessesByName( &quot;notepad&quot;, &quot;myComputer&quot; );\n   \n   // Get all instances of Notepad running on the specific computer, using IP address.\n   array&lt;Process^&gt;^ipByName = Process::GetProcessesByName( &quot;notepad&quot;, &quot;169.0.0.0&quot; );\n   \n   // Get a process on a remote computer, using the process id and machine name.\n   Process^ remoteById = Process::GetProcessById( 2345, &quot;myComputer&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Process.GetProcesses_noexception#1\">Imports System\nImports System.Diagnostics\nImports System.ComponentModel\n\nNamespace MyProcessSample\n    Class MyProcess\n        Sub BindToRunningProcesses()\n            &#39; Get the current process. You can use currentProcess from this point\n            &#39; to access various properties and call methods to control the process.\n            Dim currentProcess As Process = Process.GetCurrentProcess()\n\n            &#39; Get all processes running on the local computer.\n            Dim localAll As Process() = Process.GetProcesses()\n\n            &#39; Get all instances of Notepad running on the local computer.\n            &#39; This will return an empty array if notepad isn&#39;t running.\n            Dim localByName As Process() = Process.GetProcessesByName(&quot;notepad&quot;)\n\n            &#39; Get a process on the local computer, using the process id.\n            &#39; This will throw an exception if there is no such process.\n            Dim localById As Process = Process.GetProcessById(1234)\n\n\n            &#39; Get processes running on a remote computer. Note that this\n            &#39; and all the following calls will timeout and throw an exception\n            &#39; if &quot;myComputer&quot; and 169.0.0.0 do not exist on your local network.\n\n            &#39; Get all processes on a remote computer.\n            Dim remoteAll As Process() = Process.GetProcesses(&quot;myComputer&quot;)\n\n            &#39; Get all instances of Notepad running on the specific computer, using machine name.\n            Dim remoteByName As Process() = Process.GetProcessesByName(&quot;notepad&quot;, &quot;myComputer&quot;)\n\n            &#39; Get all instances of Notepad running on the specific computer, using IP address.\n            Dim ipByName As Process() = Process.GetProcessesByName(&quot;notepad&quot;, &quot;169.0.0.0&quot;)\n\n            &#39; Get a process on a remote computer, using the process id and machine name.\n            Dim remoteById As Process = Process.GetProcessById(2345, &quot;myComputer&quot;)\n        End Sub &#39;BindToRunningProcesses\n\n        Shared Sub Main()\n            Dim myProcess As New MyProcess()\n            myProcess.BindToRunningProcesses()\n        End Sub &#39;Main \n\n    End Class &#39;MyProcess\n\nEnd Namespace &#39;MyProcessSample\n</code></pre><pre><code class=\"lang-cs\" name=\"Process.GetProcesses_noexception#1\">using System;\nusing System.Diagnostics;\nusing System.ComponentModel;\n\nnamespace MyProcessSample\n{\n    class MyProcess\n    {\n        void BindToRunningProcesses()\n        {\n            // Get the current process.\n            Process currentProcess = Process.GetCurrentProcess();\n\n            // Get all processes running on the local computer.\n            Process[] localAll = Process.GetProcesses();\n\n            // Get all instances of Notepad running on the local computer.\n            // This will return an empty array if notepad isn&#39;t running.\n            Process[] localByName = Process.GetProcessesByName(&quot;notepad&quot;);\n\n            // Get a process on the local computer, using the process id.\n            // This will throw an exception if there is no such process.\n            Process localById = Process.GetProcessById(1234);\n\n\n            // Get processes running on a remote computer. Note that this\n            // and all the following calls will timeout and throw an exception\n            // if &quot;myComputer&quot; and 169.0.0.0 do not exist on your local network.\n\n            // Get all processes on a remote computer.\n            Process[] remoteAll = Process.GetProcesses(&quot;myComputer&quot;);\n\n            // Get all instances of Notepad running on the specific computer, using machine name.\n            Process[] remoteByName = Process.GetProcessesByName(&quot;notepad&quot;, &quot;myComputer&quot;);\n\n            // Get all instances of Notepad running on the specific computer, using IP address.\n            Process[] ipByName = Process.GetProcessesByName(&quot;notepad&quot;, &quot;169.0.0.0&quot;);\n\n            // Get a process on a remote computer, using the process id and machine name.\n            Process remoteById = Process.GetProcessById(2345, &quot;myComputer&quot;);\n        }\n\n        static void Main()\n        {\n            MyProcess myProcess = new MyProcess();\n            myProcess.BindToRunningProcesses();\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_GetProcessById_System_Int32_System_String_\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_GetProcessById_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetProcessById(Int32,String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component, given a process identifier and the name of a computer on the network.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Diagnostics.Process GetProcessById (int processId, string machineName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>processId</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The system-unique identifier of a process resource.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>machineName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of a computer on the network.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component that is associated with a remote process resource identified by the <code>processId</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The process specified by the <code>processId</code> parameter is not running. The identifier might be expired.  </p>\n<p> -or-  </p>\n<p> The <code>machineName</code> parameter syntax is invalid. The name might have length zero (0).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>machineName</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The process was not started by this object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to create a new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component and associate it with a process resource on a remote computer on the network. The process resource must already exist on the specified computer, because GetProcessById does not create a system resource, but rather associates a resource with an application-generated <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component. A process <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Id_\" data-linktype=\"relative-path\">Id</a> can be retrieved only for a process that is currently running on the computer. After the process terminates, GetProcessById throws an exception if you pass it an expired identifier.  </p>\n<p> On any particular computer, the identifier of a process is unique. GetProcessById returns one process at most. If you want to get all the processes running a particular application, use <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_GetProcessesByName_System_String_\" data-linktype=\"relative-path\">GetProcessesByName(String)</a>. If multiple processes exist on the computer running the specified application, <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_GetProcessesByName_System_String_\" data-linktype=\"relative-path\">GetProcessesByName(String)</a> returns an array containing all the associated processes. You can query each of these processes in turn for its identifier. The process identifier can be viewed in the <code>Processes</code> panel of the Windows Task Manager. The <code>PID</code> column displays the process identifier that is assigned to a process.  </p>\n<p> If you do not specify a <code>machineName</code>, the local computer is used. Alternatively, you can specify the local computer by setting <code>machineName</code> to the value &quot;.&quot; or to an empty string (&quot;&quot;).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example retrieves information of the current process, processes running on the local computer, all instances of Notepad running on the local computer, and a specific process on the local computer. It then retrieves information for the same processes on a remote computer.  </p>\n<pre><code class=\"lang-cpp\" name=\"Process.GetProcesses_noexception#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Diagnostics;\nusing namespace System::ComponentModel;\nint main()\n{   \n   // Get the current process.    \n   Process^ currentProcess = Process::GetCurrentProcess();\n\n   // Get all processes running on the local computer.\n   array&lt;Process^&gt;^localAll = Process::GetProcesses();\n\n   // Get all instances of Notepad running on the local computer.\n   // This will return an empty array if notepad isn&#39;t running.\n   array&lt;Process^&gt;^localByName = Process::GetProcessesByName(&quot;notepad&quot;);\n\n   // Get a process on the local computer, using the process id.\n   // This will throw an exception if there is no such process.\n   Process^ localById = Process::GetProcessById(1234);\n\n\n   // Get processes running on a remote computer. Note that this\n   // and all the following calls will timeout and throw an exception\n   // if &quot;myComputer&quot; and 169.0.0.0 do not exist on your local network.\n\n   // Get all processes on a remote computer.\n   array&lt;Process^&gt;^remoteAll = Process::GetProcesses(&quot;myComputer&quot;);\n\n   // Get all instances of Notepad running on the specific computer, using machine name.\n   array&lt;Process^&gt;^remoteByName = Process::GetProcessesByName( &quot;notepad&quot;, &quot;myComputer&quot; );\n   \n   // Get all instances of Notepad running on the specific computer, using IP address.\n   array&lt;Process^&gt;^ipByName = Process::GetProcessesByName( &quot;notepad&quot;, &quot;169.0.0.0&quot; );\n   \n   // Get a process on a remote computer, using the process id and machine name.\n   Process^ remoteById = Process::GetProcessById( 2345, &quot;myComputer&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Process.GetProcesses_noexception#1\">Imports System\nImports System.Diagnostics\nImports System.ComponentModel\n\nNamespace MyProcessSample\n    Class MyProcess\n        Sub BindToRunningProcesses()\n            &#39; Get the current process. You can use currentProcess from this point\n            &#39; to access various properties and call methods to control the process.\n            Dim currentProcess As Process = Process.GetCurrentProcess()\n\n            &#39; Get all processes running on the local computer.\n            Dim localAll As Process() = Process.GetProcesses()\n\n            &#39; Get all instances of Notepad running on the local computer.\n            &#39; This will return an empty array if notepad isn&#39;t running.\n            Dim localByName As Process() = Process.GetProcessesByName(&quot;notepad&quot;)\n\n            &#39; Get a process on the local computer, using the process id.\n            &#39; This will throw an exception if there is no such process.\n            Dim localById As Process = Process.GetProcessById(1234)\n\n\n            &#39; Get processes running on a remote computer. Note that this\n            &#39; and all the following calls will timeout and throw an exception\n            &#39; if &quot;myComputer&quot; and 169.0.0.0 do not exist on your local network.\n\n            &#39; Get all processes on a remote computer.\n            Dim remoteAll As Process() = Process.GetProcesses(&quot;myComputer&quot;)\n\n            &#39; Get all instances of Notepad running on the specific computer, using machine name.\n            Dim remoteByName As Process() = Process.GetProcessesByName(&quot;notepad&quot;, &quot;myComputer&quot;)\n\n            &#39; Get all instances of Notepad running on the specific computer, using IP address.\n            Dim ipByName As Process() = Process.GetProcessesByName(&quot;notepad&quot;, &quot;169.0.0.0&quot;)\n\n            &#39; Get a process on a remote computer, using the process id and machine name.\n            Dim remoteById As Process = Process.GetProcessById(2345, &quot;myComputer&quot;)\n        End Sub &#39;BindToRunningProcesses\n\n        Shared Sub Main()\n            Dim myProcess As New MyProcess()\n            myProcess.BindToRunningProcesses()\n        End Sub &#39;Main \n\n    End Class &#39;MyProcess\n\nEnd Namespace &#39;MyProcessSample\n</code></pre><pre><code class=\"lang-cs\" name=\"Process.GetProcesses_noexception#1\">using System;\nusing System.Diagnostics;\nusing System.ComponentModel;\n\nnamespace MyProcessSample\n{\n    class MyProcess\n    {\n        void BindToRunningProcesses()\n        {\n            // Get the current process.\n            Process currentProcess = Process.GetCurrentProcess();\n\n            // Get all processes running on the local computer.\n            Process[] localAll = Process.GetProcesses();\n\n            // Get all instances of Notepad running on the local computer.\n            // This will return an empty array if notepad isn&#39;t running.\n            Process[] localByName = Process.GetProcessesByName(&quot;notepad&quot;);\n\n            // Get a process on the local computer, using the process id.\n            // This will throw an exception if there is no such process.\n            Process localById = Process.GetProcessById(1234);\n\n\n            // Get processes running on a remote computer. Note that this\n            // and all the following calls will timeout and throw an exception\n            // if &quot;myComputer&quot; and 169.0.0.0 do not exist on your local network.\n\n            // Get all processes on a remote computer.\n            Process[] remoteAll = Process.GetProcesses(&quot;myComputer&quot;);\n\n            // Get all instances of Notepad running on the specific computer, using machine name.\n            Process[] remoteByName = Process.GetProcessesByName(&quot;notepad&quot;, &quot;myComputer&quot;);\n\n            // Get all instances of Notepad running on the specific computer, using IP address.\n            Process[] ipByName = Process.GetProcessesByName(&quot;notepad&quot;, &quot;169.0.0.0&quot;);\n\n            // Get a process on a remote computer, using the process id and machine name.\n            Process remoteById = Process.GetProcessById(2345, &quot;myComputer&quot;);\n        }\n\n        static void Main()\n        {\n            MyProcess myProcess = new MyProcess();\n            myProcess.BindToRunningProcesses();\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_GetProcesses\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_GetProcesses_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetProcesses()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component for each process resource on the local computer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Diagnostics.Process[] GetProcesses ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a>[]</div>\r\n                  </div>\r\n                  <p>An array of type <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> that represents all the process resources running on the local computer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to create an array of new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> components and associate them with all the process resources on the local computer. The process resources must already exist on the local computer, because GetProcesses does not create system resources but rather associates resources with application-generated <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> components. Because the operating system itself is running background processes, this array is never empty.  </p>\n<p> If you do not want to retrieve all the processes running on the computer, you can restrict their number by using the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_GetProcessById_\" data-linktype=\"relative-path\">GetProcessById</a> or <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_GetProcessesByName_\" data-linktype=\"relative-path\">GetProcessesByName</a> method. <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_GetProcessById_\" data-linktype=\"relative-path\">GetProcessById</a> creates a <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component that is associated with the process identified on the system by the process identifier that you pass to the method. <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_GetProcessesByName_\" data-linktype=\"relative-path\">GetProcessesByName</a> creates an array of <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> components whose associated process resources share the executable file you pass to the method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Multiple Windows services can be loaded within the same instance of the Service Host process (svchost.exe). GetProcesses does not identify those individual services; for that, see <a class=\"xref\" href=\"system.serviceprocess.servicecontroller#System_ServiceProcess_ServiceController_GetServices_\" data-linktype=\"relative-path\">GetServices</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example retrieves information of the current process, processes running on the local computer, all instances of Notepad running on the local computer, and a specific process on the local computer. It then retrieves information for the same processes on a remote computer.  </p>\n<pre><code class=\"lang-cpp\" name=\"Process.GetProcesses_noexception#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Diagnostics;\nusing namespace System::ComponentModel;\nint main()\n{   \n   // Get the current process.    \n   Process^ currentProcess = Process::GetCurrentProcess();\n\n   // Get all processes running on the local computer.\n   array&lt;Process^&gt;^localAll = Process::GetProcesses();\n\n   // Get all instances of Notepad running on the local computer.\n   // This will return an empty array if notepad isn&#39;t running.\n   array&lt;Process^&gt;^localByName = Process::GetProcessesByName(&quot;notepad&quot;);\n\n   // Get a process on the local computer, using the process id.\n   // This will throw an exception if there is no such process.\n   Process^ localById = Process::GetProcessById(1234);\n\n\n   // Get processes running on a remote computer. Note that this\n   // and all the following calls will timeout and throw an exception\n   // if &quot;myComputer&quot; and 169.0.0.0 do not exist on your local network.\n\n   // Get all processes on a remote computer.\n   array&lt;Process^&gt;^remoteAll = Process::GetProcesses(&quot;myComputer&quot;);\n\n   // Get all instances of Notepad running on the specific computer, using machine name.\n   array&lt;Process^&gt;^remoteByName = Process::GetProcessesByName( &quot;notepad&quot;, &quot;myComputer&quot; );\n   \n   // Get all instances of Notepad running on the specific computer, using IP address.\n   array&lt;Process^&gt;^ipByName = Process::GetProcessesByName( &quot;notepad&quot;, &quot;169.0.0.0&quot; );\n   \n   // Get a process on a remote computer, using the process id and machine name.\n   Process^ remoteById = Process::GetProcessById( 2345, &quot;myComputer&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Process.GetProcesses_noexception#1\">Imports System\nImports System.Diagnostics\nImports System.ComponentModel\n\nNamespace MyProcessSample\n    Class MyProcess\n        Sub BindToRunningProcesses()\n            &#39; Get the current process. You can use currentProcess from this point\n            &#39; to access various properties and call methods to control the process.\n            Dim currentProcess As Process = Process.GetCurrentProcess()\n\n            &#39; Get all processes running on the local computer.\n            Dim localAll As Process() = Process.GetProcesses()\n\n            &#39; Get all instances of Notepad running on the local computer.\n            &#39; This will return an empty array if notepad isn&#39;t running.\n            Dim localByName As Process() = Process.GetProcessesByName(&quot;notepad&quot;)\n\n            &#39; Get a process on the local computer, using the process id.\n            &#39; This will throw an exception if there is no such process.\n            Dim localById As Process = Process.GetProcessById(1234)\n\n\n            &#39; Get processes running on a remote computer. Note that this\n            &#39; and all the following calls will timeout and throw an exception\n            &#39; if &quot;myComputer&quot; and 169.0.0.0 do not exist on your local network.\n\n            &#39; Get all processes on a remote computer.\n            Dim remoteAll As Process() = Process.GetProcesses(&quot;myComputer&quot;)\n\n            &#39; Get all instances of Notepad running on the specific computer, using machine name.\n            Dim remoteByName As Process() = Process.GetProcessesByName(&quot;notepad&quot;, &quot;myComputer&quot;)\n\n            &#39; Get all instances of Notepad running on the specific computer, using IP address.\n            Dim ipByName As Process() = Process.GetProcessesByName(&quot;notepad&quot;, &quot;169.0.0.0&quot;)\n\n            &#39; Get a process on a remote computer, using the process id and machine name.\n            Dim remoteById As Process = Process.GetProcessById(2345, &quot;myComputer&quot;)\n        End Sub &#39;BindToRunningProcesses\n\n        Shared Sub Main()\n            Dim myProcess As New MyProcess()\n            myProcess.BindToRunningProcesses()\n        End Sub &#39;Main \n\n    End Class &#39;MyProcess\n\nEnd Namespace &#39;MyProcessSample\n</code></pre><pre><code class=\"lang-cs\" name=\"Process.GetProcesses_noexception#1\">using System;\nusing System.Diagnostics;\nusing System.ComponentModel;\n\nnamespace MyProcessSample\n{\n    class MyProcess\n    {\n        void BindToRunningProcesses()\n        {\n            // Get the current process.\n            Process currentProcess = Process.GetCurrentProcess();\n\n            // Get all processes running on the local computer.\n            Process[] localAll = Process.GetProcesses();\n\n            // Get all instances of Notepad running on the local computer.\n            // This will return an empty array if notepad isn&#39;t running.\n            Process[] localByName = Process.GetProcessesByName(&quot;notepad&quot;);\n\n            // Get a process on the local computer, using the process id.\n            // This will throw an exception if there is no such process.\n            Process localById = Process.GetProcessById(1234);\n\n\n            // Get processes running on a remote computer. Note that this\n            // and all the following calls will timeout and throw an exception\n            // if &quot;myComputer&quot; and 169.0.0.0 do not exist on your local network.\n\n            // Get all processes on a remote computer.\n            Process[] remoteAll = Process.GetProcesses(&quot;myComputer&quot;);\n\n            // Get all instances of Notepad running on the specific computer, using machine name.\n            Process[] remoteByName = Process.GetProcessesByName(&quot;notepad&quot;, &quot;myComputer&quot;);\n\n            // Get all instances of Notepad running on the specific computer, using IP address.\n            Process[] ipByName = Process.GetProcessesByName(&quot;notepad&quot;, &quot;169.0.0.0&quot;);\n\n            // Get a process on a remote computer, using the process id and machine name.\n            Process remoteById = Process.GetProcessById(2345, &quot;myComputer&quot;);\n        }\n\n        static void Main()\n        {\n            MyProcess myProcess = new MyProcess();\n            myProcess.BindToRunningProcesses();\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_GetProcesses_System_String_\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_GetProcesses_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetProcesses(String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component for each process resource on the specified computer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Diagnostics.Process[] GetProcesses (string machineName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>machineName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The computer from which to read the list of processes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a>[]</div>\r\n                  </div>\r\n                  <p>An array of type <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> that represents all the process resources running on the specified computer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>machineName</code> parameter syntax is invalid. It might have length zero (0).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>machineName</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The operating system platform does not support this operation on remote computers.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>There are problems accessing the performance counter API&#39;s used to get process information. This exception is specific to Windows NT, Windows 2000, and Windows XP.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.win32exception\" data-linktype=\"relative-path\">Win32Exception</a></div>\r\n                  </div>\r\n                  <p>A problem occurred accessing an underlying system API.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to create an array of new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> components and associate them with all the process resources on the specified (usually remote) computer. The process resources must already exist on the local computer, because <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_GetProcesses_\" data-linktype=\"relative-path\">GetProcesses</a> does not create system resources but rather associates resources with application-generated <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> components. Because the operating system itself is running background processes, this array is never empty.  </p>\n<p> If you do not want to retrieve all the processes running on the computer, you can restrict their number by using the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_GetProcessById_\" data-linktype=\"relative-path\">GetProcessById</a> or <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_GetProcessesByName_\" data-linktype=\"relative-path\">GetProcessesByName</a> method. <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_GetProcessById_\" data-linktype=\"relative-path\">GetProcessById</a> creates a <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component that is associated with the process identified on the system by the process identifier that you pass to the method. <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_GetProcessesByName_\" data-linktype=\"relative-path\">GetProcessesByName</a> creates an array of <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> components whose associated process resources share the executable file you pass to the method.  </p>\n<p> This overload of the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_GetProcesses_\" data-linktype=\"relative-path\">GetProcesses</a> method is generally used to retrieve the list of process resources running on a remote computer on the network, but you can specify the local computer by passing &quot;.&quot;.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Multiple Windows services can be loaded within the same instance of the Service Host process (svchost.exe). GetProcesses does not identify those individual services; for that, see <a class=\"xref\" href=\"system.serviceprocess.servicecontroller#System_ServiceProcess_ServiceController_GetServices_\" data-linktype=\"relative-path\">GetServices</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example retrieves information of the current process, processes running on the local computer, all instances of Notepad running on the local computer, and a specific process on the local computer. It then retrieves information for the same processes on a remote computer.  </p>\n<pre><code class=\"lang-cpp\" name=\"Process.GetProcesses_noexception#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Diagnostics;\nusing namespace System::ComponentModel;\nint main()\n{   \n   // Get the current process.    \n   Process^ currentProcess = Process::GetCurrentProcess();\n\n   // Get all processes running on the local computer.\n   array&lt;Process^&gt;^localAll = Process::GetProcesses();\n\n   // Get all instances of Notepad running on the local computer.\n   // This will return an empty array if notepad isn&#39;t running.\n   array&lt;Process^&gt;^localByName = Process::GetProcessesByName(&quot;notepad&quot;);\n\n   // Get a process on the local computer, using the process id.\n   // This will throw an exception if there is no such process.\n   Process^ localById = Process::GetProcessById(1234);\n\n\n   // Get processes running on a remote computer. Note that this\n   // and all the following calls will timeout and throw an exception\n   // if &quot;myComputer&quot; and 169.0.0.0 do not exist on your local network.\n\n   // Get all processes on a remote computer.\n   array&lt;Process^&gt;^remoteAll = Process::GetProcesses(&quot;myComputer&quot;);\n\n   // Get all instances of Notepad running on the specific computer, using machine name.\n   array&lt;Process^&gt;^remoteByName = Process::GetProcessesByName( &quot;notepad&quot;, &quot;myComputer&quot; );\n   \n   // Get all instances of Notepad running on the specific computer, using IP address.\n   array&lt;Process^&gt;^ipByName = Process::GetProcessesByName( &quot;notepad&quot;, &quot;169.0.0.0&quot; );\n   \n   // Get a process on a remote computer, using the process id and machine name.\n   Process^ remoteById = Process::GetProcessById( 2345, &quot;myComputer&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Process.GetProcesses_noexception#1\">Imports System\nImports System.Diagnostics\nImports System.ComponentModel\n\nNamespace MyProcessSample\n    Class MyProcess\n        Sub BindToRunningProcesses()\n            &#39; Get the current process. You can use currentProcess from this point\n            &#39; to access various properties and call methods to control the process.\n            Dim currentProcess As Process = Process.GetCurrentProcess()\n\n            &#39; Get all processes running on the local computer.\n            Dim localAll As Process() = Process.GetProcesses()\n\n            &#39; Get all instances of Notepad running on the local computer.\n            &#39; This will return an empty array if notepad isn&#39;t running.\n            Dim localByName As Process() = Process.GetProcessesByName(&quot;notepad&quot;)\n\n            &#39; Get a process on the local computer, using the process id.\n            &#39; This will throw an exception if there is no such process.\n            Dim localById As Process = Process.GetProcessById(1234)\n\n\n            &#39; Get processes running on a remote computer. Note that this\n            &#39; and all the following calls will timeout and throw an exception\n            &#39; if &quot;myComputer&quot; and 169.0.0.0 do not exist on your local network.\n\n            &#39; Get all processes on a remote computer.\n            Dim remoteAll As Process() = Process.GetProcesses(&quot;myComputer&quot;)\n\n            &#39; Get all instances of Notepad running on the specific computer, using machine name.\n            Dim remoteByName As Process() = Process.GetProcessesByName(&quot;notepad&quot;, &quot;myComputer&quot;)\n\n            &#39; Get all instances of Notepad running on the specific computer, using IP address.\n            Dim ipByName As Process() = Process.GetProcessesByName(&quot;notepad&quot;, &quot;169.0.0.0&quot;)\n\n            &#39; Get a process on a remote computer, using the process id and machine name.\n            Dim remoteById As Process = Process.GetProcessById(2345, &quot;myComputer&quot;)\n        End Sub &#39;BindToRunningProcesses\n\n        Shared Sub Main()\n            Dim myProcess As New MyProcess()\n            myProcess.BindToRunningProcesses()\n        End Sub &#39;Main \n\n    End Class &#39;MyProcess\n\nEnd Namespace &#39;MyProcessSample\n</code></pre><pre><code class=\"lang-cs\" name=\"Process.GetProcesses_noexception#1\">using System;\nusing System.Diagnostics;\nusing System.ComponentModel;\n\nnamespace MyProcessSample\n{\n    class MyProcess\n    {\n        void BindToRunningProcesses()\n        {\n            // Get the current process.\n            Process currentProcess = Process.GetCurrentProcess();\n\n            // Get all processes running on the local computer.\n            Process[] localAll = Process.GetProcesses();\n\n            // Get all instances of Notepad running on the local computer.\n            // This will return an empty array if notepad isn&#39;t running.\n            Process[] localByName = Process.GetProcessesByName(&quot;notepad&quot;);\n\n            // Get a process on the local computer, using the process id.\n            // This will throw an exception if there is no such process.\n            Process localById = Process.GetProcessById(1234);\n\n\n            // Get processes running on a remote computer. Note that this\n            // and all the following calls will timeout and throw an exception\n            // if &quot;myComputer&quot; and 169.0.0.0 do not exist on your local network.\n\n            // Get all processes on a remote computer.\n            Process[] remoteAll = Process.GetProcesses(&quot;myComputer&quot;);\n\n            // Get all instances of Notepad running on the specific computer, using machine name.\n            Process[] remoteByName = Process.GetProcessesByName(&quot;notepad&quot;, &quot;myComputer&quot;);\n\n            // Get all instances of Notepad running on the specific computer, using IP address.\n            Process[] ipByName = Process.GetProcessesByName(&quot;notepad&quot;, &quot;169.0.0.0&quot;);\n\n            // Get a process on a remote computer, using the process id and machine name.\n            Process remoteById = Process.GetProcessById(2345, &quot;myComputer&quot;);\n        }\n\n        static void Main()\n        {\n            MyProcess myProcess = new MyProcess();\n            myProcess.BindToRunningProcesses();\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_GetProcessesByName_System_String_\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_GetProcessesByName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetProcessesByName(String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates an array of new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> components and associates them with all the process resources on the local computer that share the specified process name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Diagnostics.Process[] GetProcessesByName (string processName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>processName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The friendly name of the process.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a>[]</div>\r\n                  </div>\r\n                  <p>An array of type <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> that represents the process resources running the specified application or file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>There are problems accessing the performance counter API&#39;s used to get process information. This exception is specific to Windows NT, Windows 2000, and Windows XP.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to create an array of new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> components and associate them with all the process resources that are running the same executable file on the local computer. The process resources must already exist on the computer, because GetProcessesByName does not create system resources but rather associates them with application-generated <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> components. A <code>processName</code> can be specified for an executable file that is not currently running on the local computer, so the array the method returns can be empty.  </p>\n<p> The process name is a friendly name for the process, such as Outlook, that does not include the .exe extension or the path. GetProcessesByName is helpful for getting and manipulating all the processes that are associated with the same executable file. For example, you can pass an executable file name as the <code>processName</code> parameter, in order to shut down all the running instances of that executable file.  </p>\n<p> Although a process <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Id_\" data-linktype=\"relative-path\">Id</a> is unique to a single process resource on the system, multiple processes on the local computer can be running the application specified by the <code>processName</code> parameter. Therefore, <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_GetProcessById_\" data-linktype=\"relative-path\">GetProcessById</a> returns one process at most, but GetProcessesByName returns an array containing all the associated processes. If you need to manipulate the process using standard API calls, you can query each of these processes in turn for its identifier. You cannot access process resources through the process name alone but, once you have retrieved an array of <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> components that have been associated with the process resources, you can start, terminate, and otherwise manipulate the system resources.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example retrieves information of the current process, processes running on the local computer, all instances of Notepad running on the local computer, and a specific process on the local computer. It then retrieves information for the same processes on a remote computer.  </p>\n<pre><code class=\"lang-cpp\" name=\"Process.GetProcesses_noexception#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Diagnostics;\nusing namespace System::ComponentModel;\nint main()\n{   \n   // Get the current process.    \n   Process^ currentProcess = Process::GetCurrentProcess();\n\n   // Get all processes running on the local computer.\n   array&lt;Process^&gt;^localAll = Process::GetProcesses();\n\n   // Get all instances of Notepad running on the local computer.\n   // This will return an empty array if notepad isn&#39;t running.\n   array&lt;Process^&gt;^localByName = Process::GetProcessesByName(&quot;notepad&quot;);\n\n   // Get a process on the local computer, using the process id.\n   // This will throw an exception if there is no such process.\n   Process^ localById = Process::GetProcessById(1234);\n\n\n   // Get processes running on a remote computer. Note that this\n   // and all the following calls will timeout and throw an exception\n   // if &quot;myComputer&quot; and 169.0.0.0 do not exist on your local network.\n\n   // Get all processes on a remote computer.\n   array&lt;Process^&gt;^remoteAll = Process::GetProcesses(&quot;myComputer&quot;);\n\n   // Get all instances of Notepad running on the specific computer, using machine name.\n   array&lt;Process^&gt;^remoteByName = Process::GetProcessesByName( &quot;notepad&quot;, &quot;myComputer&quot; );\n   \n   // Get all instances of Notepad running on the specific computer, using IP address.\n   array&lt;Process^&gt;^ipByName = Process::GetProcessesByName( &quot;notepad&quot;, &quot;169.0.0.0&quot; );\n   \n   // Get a process on a remote computer, using the process id and machine name.\n   Process^ remoteById = Process::GetProcessById( 2345, &quot;myComputer&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Process.GetProcesses_noexception#1\">Imports System\nImports System.Diagnostics\nImports System.ComponentModel\n\nNamespace MyProcessSample\n    Class MyProcess\n        Sub BindToRunningProcesses()\n            &#39; Get the current process. You can use currentProcess from this point\n            &#39; to access various properties and call methods to control the process.\n            Dim currentProcess As Process = Process.GetCurrentProcess()\n\n            &#39; Get all processes running on the local computer.\n            Dim localAll As Process() = Process.GetProcesses()\n\n            &#39; Get all instances of Notepad running on the local computer.\n            &#39; This will return an empty array if notepad isn&#39;t running.\n            Dim localByName As Process() = Process.GetProcessesByName(&quot;notepad&quot;)\n\n            &#39; Get a process on the local computer, using the process id.\n            &#39; This will throw an exception if there is no such process.\n            Dim localById As Process = Process.GetProcessById(1234)\n\n\n            &#39; Get processes running on a remote computer. Note that this\n            &#39; and all the following calls will timeout and throw an exception\n            &#39; if &quot;myComputer&quot; and 169.0.0.0 do not exist on your local network.\n\n            &#39; Get all processes on a remote computer.\n            Dim remoteAll As Process() = Process.GetProcesses(&quot;myComputer&quot;)\n\n            &#39; Get all instances of Notepad running on the specific computer, using machine name.\n            Dim remoteByName As Process() = Process.GetProcessesByName(&quot;notepad&quot;, &quot;myComputer&quot;)\n\n            &#39; Get all instances of Notepad running on the specific computer, using IP address.\n            Dim ipByName As Process() = Process.GetProcessesByName(&quot;notepad&quot;, &quot;169.0.0.0&quot;)\n\n            &#39; Get a process on a remote computer, using the process id and machine name.\n            Dim remoteById As Process = Process.GetProcessById(2345, &quot;myComputer&quot;)\n        End Sub &#39;BindToRunningProcesses\n\n        Shared Sub Main()\n            Dim myProcess As New MyProcess()\n            myProcess.BindToRunningProcesses()\n        End Sub &#39;Main \n\n    End Class &#39;MyProcess\n\nEnd Namespace &#39;MyProcessSample\n</code></pre><pre><code class=\"lang-cs\" name=\"Process.GetProcesses_noexception#1\">using System;\nusing System.Diagnostics;\nusing System.ComponentModel;\n\nnamespace MyProcessSample\n{\n    class MyProcess\n    {\n        void BindToRunningProcesses()\n        {\n            // Get the current process.\n            Process currentProcess = Process.GetCurrentProcess();\n\n            // Get all processes running on the local computer.\n            Process[] localAll = Process.GetProcesses();\n\n            // Get all instances of Notepad running on the local computer.\n            // This will return an empty array if notepad isn&#39;t running.\n            Process[] localByName = Process.GetProcessesByName(&quot;notepad&quot;);\n\n            // Get a process on the local computer, using the process id.\n            // This will throw an exception if there is no such process.\n            Process localById = Process.GetProcessById(1234);\n\n\n            // Get processes running on a remote computer. Note that this\n            // and all the following calls will timeout and throw an exception\n            // if &quot;myComputer&quot; and 169.0.0.0 do not exist on your local network.\n\n            // Get all processes on a remote computer.\n            Process[] remoteAll = Process.GetProcesses(&quot;myComputer&quot;);\n\n            // Get all instances of Notepad running on the specific computer, using machine name.\n            Process[] remoteByName = Process.GetProcessesByName(&quot;notepad&quot;, &quot;myComputer&quot;);\n\n            // Get all instances of Notepad running on the specific computer, using IP address.\n            Process[] ipByName = Process.GetProcessesByName(&quot;notepad&quot;, &quot;169.0.0.0&quot;);\n\n            // Get a process on a remote computer, using the process id and machine name.\n            Process remoteById = Process.GetProcessById(2345, &quot;myComputer&quot;);\n        }\n\n        static void Main()\n        {\n            MyProcess myProcess = new MyProcess();\n            myProcess.BindToRunningProcesses();\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_GetProcessesByName_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_GetProcessesByName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetProcessesByName(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates an array of new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> components and associates them with all the process resources on a remote computer that share the specified process name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Diagnostics.Process[] GetProcessesByName (string processName, string machineName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>processName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The friendly name of the process.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>machineName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of a computer on the network.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a>[]</div>\r\n                  </div>\r\n                  <p>An array of type <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> that represents the process resources running the specified application or file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>machineName</code> parameter syntax is invalid. It might have length zero (0).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>machineName</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The operating system platform does not support this operation on remote computers.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>There are problems accessing the performance counter API&#39;s used to get process information. This exception is specific to Windows NT, Windows 2000, and Windows XP.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.win32exception\" data-linktype=\"relative-path\">Win32Exception</a></div>\r\n                  </div>\r\n                  <p>A problem occurred accessing an underlying system API.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to create an array of new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> components and associate them with all the process resources that are running the same executable file on the specified computer. The process resources must already exist on the computer, because <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_GetProcessesByName_\" data-linktype=\"relative-path\">GetProcessesByName</a> does not create system resources but rather associates them with application-generated <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> components. A <code>processName</code> can be specified for an executable file that is not currently running on the local computer, so the array the method returns can be empty.  </p>\n<p> The process name is a friendly name for the process, such as Outlook, that does not include the .exe extension or the path. <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_GetProcessesByName_\" data-linktype=\"relative-path\">GetProcessesByName</a> is helpful for getting and manipulating all the processes that are associated with the same executable file. For example, you can pass an executable file name as the <code>processName</code> parameter, in order to shut down all the running instances of that executable file.  </p>\n<p> Although a process <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Id_\" data-linktype=\"relative-path\">Id</a> is unique to a single process resource on the system, multiple processes on the local computer can be running the application specified by the <code>processName</code> parameter. Therefore, <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_GetProcessById_\" data-linktype=\"relative-path\">GetProcessById</a> returns one process at most, but <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_GetProcessesByName_\" data-linktype=\"relative-path\">GetProcessesByName</a> returns an array containing all the associated processes. If you need to manipulate the process using standard API calls, you can query each of these processes in turn for its identifier. You cannot access process resources through the process name alone but, once you have retrieved an array of <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> components that have been associated with the process resources, you can start, terminate, and otherwise manipulate the system resources.  </p>\n<p> You can use this overload to get processes on the local computer as well as on a remote computer. Use &quot;.&quot; to specify the local computer. Another overload exists that uses the local computer by default.  </p>\n<p> You can access processes on remote computers only to view information, such as statistics, about the processes. You cannot close, terminate (using <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Kill_\" data-linktype=\"relative-path\">Kill</a>), or start processes on remote computers.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example retrieves information of the current process, processes running on the local computer, all instances of Notepad running on the local computer, and a specific process on the local computer. It then retrieves information for the same processes on a remote computer.  </p>\n<pre><code class=\"lang-cpp\" name=\"Process.GetProcesses_noexception#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Diagnostics;\nusing namespace System::ComponentModel;\nint main()\n{   \n   // Get the current process.    \n   Process^ currentProcess = Process::GetCurrentProcess();\n\n   // Get all processes running on the local computer.\n   array&lt;Process^&gt;^localAll = Process::GetProcesses();\n\n   // Get all instances of Notepad running on the local computer.\n   // This will return an empty array if notepad isn&#39;t running.\n   array&lt;Process^&gt;^localByName = Process::GetProcessesByName(&quot;notepad&quot;);\n\n   // Get a process on the local computer, using the process id.\n   // This will throw an exception if there is no such process.\n   Process^ localById = Process::GetProcessById(1234);\n\n\n   // Get processes running on a remote computer. Note that this\n   // and all the following calls will timeout and throw an exception\n   // if &quot;myComputer&quot; and 169.0.0.0 do not exist on your local network.\n\n   // Get all processes on a remote computer.\n   array&lt;Process^&gt;^remoteAll = Process::GetProcesses(&quot;myComputer&quot;);\n\n   // Get all instances of Notepad running on the specific computer, using machine name.\n   array&lt;Process^&gt;^remoteByName = Process::GetProcessesByName( &quot;notepad&quot;, &quot;myComputer&quot; );\n   \n   // Get all instances of Notepad running on the specific computer, using IP address.\n   array&lt;Process^&gt;^ipByName = Process::GetProcessesByName( &quot;notepad&quot;, &quot;169.0.0.0&quot; );\n   \n   // Get a process on a remote computer, using the process id and machine name.\n   Process^ remoteById = Process::GetProcessById( 2345, &quot;myComputer&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Process.GetProcesses_noexception#1\">Imports System\nImports System.Diagnostics\nImports System.ComponentModel\n\nNamespace MyProcessSample\n    Class MyProcess\n        Sub BindToRunningProcesses()\n            &#39; Get the current process. You can use currentProcess from this point\n            &#39; to access various properties and call methods to control the process.\n            Dim currentProcess As Process = Process.GetCurrentProcess()\n\n            &#39; Get all processes running on the local computer.\n            Dim localAll As Process() = Process.GetProcesses()\n\n            &#39; Get all instances of Notepad running on the local computer.\n            &#39; This will return an empty array if notepad isn&#39;t running.\n            Dim localByName As Process() = Process.GetProcessesByName(&quot;notepad&quot;)\n\n            &#39; Get a process on the local computer, using the process id.\n            &#39; This will throw an exception if there is no such process.\n            Dim localById As Process = Process.GetProcessById(1234)\n\n\n            &#39; Get processes running on a remote computer. Note that this\n            &#39; and all the following calls will timeout and throw an exception\n            &#39; if &quot;myComputer&quot; and 169.0.0.0 do not exist on your local network.\n\n            &#39; Get all processes on a remote computer.\n            Dim remoteAll As Process() = Process.GetProcesses(&quot;myComputer&quot;)\n\n            &#39; Get all instances of Notepad running on the specific computer, using machine name.\n            Dim remoteByName As Process() = Process.GetProcessesByName(&quot;notepad&quot;, &quot;myComputer&quot;)\n\n            &#39; Get all instances of Notepad running on the specific computer, using IP address.\n            Dim ipByName As Process() = Process.GetProcessesByName(&quot;notepad&quot;, &quot;169.0.0.0&quot;)\n\n            &#39; Get a process on a remote computer, using the process id and machine name.\n            Dim remoteById As Process = Process.GetProcessById(2345, &quot;myComputer&quot;)\n        End Sub &#39;BindToRunningProcesses\n\n        Shared Sub Main()\n            Dim myProcess As New MyProcess()\n            myProcess.BindToRunningProcesses()\n        End Sub &#39;Main \n\n    End Class &#39;MyProcess\n\nEnd Namespace &#39;MyProcessSample\n</code></pre><pre><code class=\"lang-cs\" name=\"Process.GetProcesses_noexception#1\">using System;\nusing System.Diagnostics;\nusing System.ComponentModel;\n\nnamespace MyProcessSample\n{\n    class MyProcess\n    {\n        void BindToRunningProcesses()\n        {\n            // Get the current process.\n            Process currentProcess = Process.GetCurrentProcess();\n\n            // Get all processes running on the local computer.\n            Process[] localAll = Process.GetProcesses();\n\n            // Get all instances of Notepad running on the local computer.\n            // This will return an empty array if notepad isn&#39;t running.\n            Process[] localByName = Process.GetProcessesByName(&quot;notepad&quot;);\n\n            // Get a process on the local computer, using the process id.\n            // This will throw an exception if there is no such process.\n            Process localById = Process.GetProcessById(1234);\n\n\n            // Get processes running on a remote computer. Note that this\n            // and all the following calls will timeout and throw an exception\n            // if &quot;myComputer&quot; and 169.0.0.0 do not exist on your local network.\n\n            // Get all processes on a remote computer.\n            Process[] remoteAll = Process.GetProcesses(&quot;myComputer&quot;);\n\n            // Get all instances of Notepad running on the specific computer, using machine name.\n            Process[] remoteByName = Process.GetProcessesByName(&quot;notepad&quot;, &quot;myComputer&quot;);\n\n            // Get all instances of Notepad running on the specific computer, using IP address.\n            Process[] ipByName = Process.GetProcessesByName(&quot;notepad&quot;, &quot;169.0.0.0&quot;);\n\n            // Get a process on a remote computer, using the process id and machine name.\n            Process remoteById = Process.GetProcessById(2345, &quot;myComputer&quot;);\n        }\n\n        static void Main()\n        {\n            MyProcess myProcess = new MyProcess();\n            myProcess.BindToRunningProcesses();\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_Kill\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_Kill_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Kill()</div>        \r\n          </div>\r\n    \r\n            <p>Immediately stops the associated process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Kill ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.win32exception\" data-linktype=\"relative-path\">Win32Exception</a></div>\r\n                  </div>\r\n                  <p>The associated process could not be terminated.  </p>\n<p> -or-  </p>\n<p> The process is terminating.  </p>\n<p> -or-  </p>\n<p> The associated process is a Win16 executable.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>You are attempting to call Kill for a process that is running on a remote computer. The method is available only for processes running on the local computer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The process has already exited.  </p>\n<p> -or-  </p>\n<p> There is no process associated with this <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Kill forces a termination of the process, while <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_CloseMainWindow_\" data-linktype=\"relative-path\">CloseMainWindow</a> only requests a termination. When a process with a graphical interface is executing, its message loop is in a wait state. The message loop executes every time a Windows message is sent to the process by the operating system. Calling <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_CloseMainWindow_\" data-linktype=\"relative-path\">CloseMainWindow</a> sends a request to close to the main window, which, in a well-formed application, closes child windows and revokes all running message loops for the application. The request to exit the process by calling <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_CloseMainWindow_\" data-linktype=\"relative-path\">CloseMainWindow</a> does not force the application to quit. The application can ask for user verification before quitting, or it can refuse to quit. To force the application to quit, use the Kill method. The behavior of <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_CloseMainWindow_\" data-linktype=\"relative-path\">CloseMainWindow</a> is identical to that of a user closing an application&#39;s main window using the system menu. Therefore, the request to exit the process by closing the main window does not force the application to quit immediately.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The Kill method executes asynchronously. After calling the Kill method, call the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_WaitForExit_\" data-linktype=\"relative-path\">WaitForExit</a> method to wait for the process to exit, or check the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_HasExited_\" data-linktype=\"relative-path\">HasExited</a> property to determine if the process has exited.  </p>\n</div>\n<p> Data edited by the process or resources allocated to the process can be lost if you call Kill. Kill causes an abnormal process termination and should be used only when necessary. <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_CloseMainWindow_\" data-linktype=\"relative-path\">CloseMainWindow</a> enables an orderly termination of the process and closes all windows, so it is preferable for applications with an interface. If <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_CloseMainWindow_\" data-linktype=\"relative-path\">CloseMainWindow</a> fails, you can use Kill to terminate the process. Kill is the only way to terminate processes that do not have graphical interfaces.  </p>\n<p> You can call Kill and <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_CloseMainWindow_\" data-linktype=\"relative-path\">CloseMainWindow</a> only for processes that are running on the local computer. You cannot cause processes on remote computers to exit. You can only view information for processes running on remote computers.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If the call to the Kill method is made while the process is currently terminating, a <a class=\"xref\" href=\"system.componentmodel.win32exception\" data-linktype=\"relative-path\">Win32Exception</a> is thrown for Access Denied.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_LeaveDebugMode\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_LeaveDebugMode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LeaveDebugMode()</div>        \r\n          </div>\r\n    \r\n            <p>Takes a <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component out of the state that lets it interact with operating system processes that run in a special mode.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void LeaveDebugMode ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Some operating system processes run in a special mode. Attempting to read properties of or attach to these processes is not possible unless you have called <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_EnterDebugMode_\" data-linktype=\"relative-path\">EnterDebugMode</a> on the component. Call LeaveDebugMode when you no longer need access to these processes that run in special mode.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_OnExited\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_OnExited_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnExited()</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Exited\" data-linktype=\"relative-path\">Exited</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected void OnExited ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>OnExited is the API method that raises the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Exited\" data-linktype=\"relative-path\">Exited</a> event. Calling OnExited causes the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Exited\" data-linktype=\"relative-path\">Exited</a> event to occur and is the only way to raise the event using the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component. OnExited is primarily used when deriving classes from the component.  </p>\n<p> As an alternative to OnExited, you can write your own event handler. You create your own event handler delegate and your own event-handling method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If you are using the Visual Studio environment, an event handler delegate (AddOnExited) and an event-handling method (Process1_Exited) are created for you when you drag a <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component onto a form and double-click the icon. The code you create to run when the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Exited\" data-linktype=\"relative-path\">Exited</a> event occurs is entered into the Process1_Exited procedure. You do not need to create the OnExited member, because it is implemented for you.  </p>\n</div>\n<p> Raising an event invokes the event handler through a delegate. For an overview, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the OnExited method in a derived class.  </p>\n<pre><code class=\"lang-cs\" name=\"OnExitSample#1\">using System;\nusing System.Diagnostics;\n\nclass MyProcess : Process\n{\n    public void Stop()\n    {\n        this.CloseMainWindow();\n        this.Close();\n        OnExited();\n    } \n}\nclass StartNotePad\n{\n\n    public static void Main(string[] args)\n    {\n        MyProcess p = new MyProcess();\n        p.StartInfo.FileName = &quot;notepad.exe&quot;;\n        p.EnableRaisingEvents = true;\n        p.Exited += new EventHandler(myProcess_HasExited);\n        p.Start();\n        p.WaitForInputIdle();\n        p.Stop();\n    }\n    private static void myProcess_HasExited(object sender, System.EventArgs e)\n    {\n        Console.WriteLine(&quot;Process has exited.&quot;);\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"OnExitSample#1\">Imports System\nImports System.Diagnostics\n\n\nClass MyProcess\n    Inherits Process\n    \n    Public Sub [Stop]() \n        Me.CloseMainWindow()\n        Me.Close()\n        OnExited()\n    \n    End Sub &#39;Stop\nEnd Class\n\nClass StartNotePad\n    \n    \n    Public Shared Sub Main(ByVal args() As String) \n        Dim p As New MyProcess()\n        p.StartInfo.FileName = &quot;notepad.exe&quot;\n        p.EnableRaisingEvents = True\n        AddHandler p.Exited, AddressOf myProcess_HasExited\n        p.Start()\n        p.WaitForInputIdle()\n        p.Stop()\n    \n    End Sub\n    \n    Private Shared Sub myProcess_HasExited(ByVal sender As Object, ByVal e As System.EventArgs) \n        Console.WriteLine(&quot;Process has exited.&quot;)\n    \n    End Sub &#39;myProcess_HasExited\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_Refresh\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_Refresh_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Refresh()</div>        \r\n          </div>\r\n    \r\n            <p>Discards any information about the associated process that has been cached inside the process component.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Refresh ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>After Refresh is called, the first request for information about each property causes the process component to obtain a new value from the associated process.  </p>\n<p> When a <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component is associated with a process resource, the property values of the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> are immediately populated according to the status of the associated process. If the information about the associated process subsequently changes, those changes are not reflected in the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component&#39;s cached values. The <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component is a snapshot of the process resource at the time they are associated. To view the current values for the associated process, call the Refresh method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example starts an instance of Notepad. It then retrieves the physical memory usage of the associated process at 2 second intervals for a maximum of 10 seconds. The example detects whether the process exits before 10 seconds have elapsed. The example closes the process if it is still running after 10 seconds.  </p>\n<pre><code class=\"lang-cpp\" name=\"process_refresh#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Diagnostics;\nusing namespace System::Threading;\nint main()\n{\n   try\n   {\n      Process^ myProcess;\n      myProcess = Process::Start(  &quot;Notepad.exe&quot; );\n      \n      // Display physical memory usage 5 times at intervals of 2 seconds.\n      for ( int i = 0; i &lt; 5; i++ )\n      {\n         if (  !myProcess-&gt;HasExited )\n         {\n            \n            // Discard cached information about the process.\n            myProcess-&gt;Refresh();\n            \n            // Print working set to console.\n            Console::WriteLine( &quot;Physical Memory Usage : {0}&quot;, myProcess-&gt;WorkingSet.ToString() );\n            \n            // Wait 2 seconds.\n            Thread::Sleep( 2000 );\n         }\n         else\n         {\n            break;\n         }\n\n      }\n      myProcess-&gt;CloseMainWindow();\n      \n      // Free resources associated with process.\n      myProcess-&gt;Close();\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;The following exception was raised: &quot; );\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"process_refresh#1\">\nusing System;\nusing System.Diagnostics;\nusing System.Threading;\n\nnamespace Process_Sample\n{\n   class MyProcessClass\n   {\n      public static void Main()\n      {\n         try\n         {\n            Process myProcess;\n            myProcess = Process.Start(&quot;Notepad.exe&quot;);\n            // Display physical memory usage 5 times at intervals of 2 seconds.\n            for (int i = 0;i &lt; 5; i++)\n            {\n               if (!myProcess.HasExited)\n               {\n                   // Discard cached information about the process.\n                   myProcess.Refresh();\n                   // Print working set to console.\n                   Console.WriteLine(&quot;Physical Memory Usage: &quot; \n                                        + myProcess.WorkingSet.ToString());\n                   // Wait 2 seconds.\n                   Thread.Sleep(2000);\n               }\n               else {\n                   break;\n               } \n            }\n\n            // Close process by sending a close message to its main window.\n            myProcess.CloseMainWindow();\n            // Free resources associated with process.\n            myProcess.Close();\n\n         }\n         catch(Exception e)\n         {\n            Console.WriteLine(&quot;The following exception was raised: &quot;);\n            Console.WriteLine(e.Message);\n         }\n      }\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"process_refresh#1\">Imports System\nImports System.Diagnostics\nImports System.Threading\n\nNamespace Process_Sample\n   Class MyProcessClass\n\n      Public Shared Sub Main()\n         Try\n\n            Dim myProcess As Process\n            myProcess = Process.Start(&quot;Notepad.exe&quot;)\n            &#39; Display physical memory usage 5 times at intervals of 2 seconds.\n            Dim i As Integer\n            For i = 0 To 4\n               If not myProcess.HasExited Then\n               \n                  &#39; Discard cached information about the process.\n                  myProcess.Refresh()\n                  &#39; Print working set to console.\n                  Console.WriteLine(&quot;Physical Memory Usage: &quot; + _\n                                              myProcess.WorkingSet.ToString())\n                  &#39; Wait 2 seconds.\n                  Thread.Sleep(2000)\n               Else \n                  Exit For\n               End If\n              \n            Next i\n\n           &#39; Close process by sending a close message to its main window.\n           myProcess.CloseMainWindow()\n           &#39; Free resources associated with process.\n           myProcess.Close()\n\n         Catch e As Exception\n            Console.WriteLine(&quot;The following exception was raised: &quot;)\n            Console.WriteLine(e.Message)\n         End Try\n      End Sub &#39;Main\n   End Class &#39;MyProcessClass\nEnd Namespace &#39;Process_Sample\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_Start\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_Start_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Start()</div>        \r\n          </div>\r\n    \r\n            <p>Starts (or reuses) the process resource that is specified by the <span class=\"xref\">stem.Diagnostics.Process.StartInfo*</span> property of this <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component and associates it with the component.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Start ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if a process resource is started; <code>false</code> if no new process resource is started (for example, if an existing process is reused).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>No file name was specified in the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component&#39;s <span class=\"xref\">stem.Diagnostics.Process.StartInfo*</span>.  </p>\n<p> -or-  </p>\n<p> The <span class=\"xref\">stem.Diagnostics.ProcessStartInfo.UseShellExecute*</span> member of the <span class=\"xref\">stem.Diagnostics.Process.StartInfo*</span> property is <code>true</code> while <span class=\"xref\">stem.Diagnostics.ProcessStartInfo.RedirectStandardInput*</span>, <span class=\"xref\">stem.Diagnostics.ProcessStartInfo.RedirectStandardOutput*</span>, or <span class=\"xref\">stem.Diagnostics.ProcessStartInfo.RedirectStandardError*</span> is <code>true</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.win32exception\" data-linktype=\"relative-path\">Win32Exception</a></div>\r\n                  </div>\r\n                  <p>There was an error in opening the associated file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The process object has already been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this overload to start a process resource and associate it with the current <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component. The return value <code>true</code> indicates that a new process resource was started. If the process resource specified by the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_FileName_\" data-linktype=\"relative-path\">FileName</a> member of the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StartInfo_\" data-linktype=\"relative-path\">StartInfo</a> property is already running on the computer, no additional process resource is started. Instead, the running process resource is reused and <code>false</code> is returned.  </p>\n<p> You can start a ClickOnce application by specifying the location (for example, a Web address) from which you originally installed the application. Do not start a ClickOnce application by specifying its installed location on your hard drive.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If you are using Visual Studio, this overload of the Start method is the one that you insert into your code after you drag a <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component onto the designer. Use the <code>Properties</code> window to expand the <code>StartInfo</code> category and write the appropriate value into the <code>FileName</code> property. Your changes will appear in the form&#39;s <code>InitializeComponent</code> procedure.  </p>\n</div>\n<p> This overload of Start is not a <code>static</code> method. You must call it from an instance of the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> class. Before calling Start, you must first specify <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StartInfo_\" data-linktype=\"relative-path\">StartInfo</a> property information for this <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> instance, because that information is used to determine the process resource to start.  </p>\n<p> The other overloads of the Start method are <code>static</code> members. You do not need to create an instance of the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component before you call those overloads of the method. Instead, you can call Start for the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> class itself, and a new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component is created if the process was started. Or, <code>null</code> is returned if a process was reused. The process resource is automatically associated with the new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component that is returned by the Start method.  </p>\n<p> The <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StartInfo_\" data-linktype=\"relative-path\">StartInfo</a> members can be used to duplicate the functionality of the <code>Run</code> dialog box of the Windows <code>Start</code> menu. Anything that can be typed into a command line can be started by setting the appropriate values in the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StartInfo_\" data-linktype=\"relative-path\">StartInfo</a> property. The only <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StartInfo_\" data-linktype=\"relative-path\">StartInfo</a> property that must be set is the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_FileName_\" data-linktype=\"relative-path\">FileName</a> property. The <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_FileName_\" data-linktype=\"relative-path\">FileName</a> property does not have to be an executable file. It can be of any file type for which the extension has been associated with an application that is installed on the system. For example, the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_FileName_\" data-linktype=\"relative-path\">FileName</a> property can have a .txt extension if you have associated text files with an editor, such as Notepad, or it can have a .doc extension if you have associated.doc files with a word processing tool, such as Microsoft Word.  </p>\n<p> In the command line, you can specify actions to take for certain types of files. For example, you can print documents or edit text files. Specify these actions using the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_Verb_\" data-linktype=\"relative-path\">Verb</a> member of the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StartInfo_\" data-linktype=\"relative-path\">StartInfo</a> property. For other types of files, you can specify command-line arguments when you start the file from the <code>Run</code> dialog box. For example, you can pass a URL as an argument if you specify your browser as the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_FileName_\" data-linktype=\"relative-path\">FileName</a>. These arguments can be specified in the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StartInfo_\" data-linktype=\"relative-path\">StartInfo</a> property&#39;s <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_Arguments_\" data-linktype=\"relative-path\">Arguments</a> member.  </p>\n<p> If you have a path variable declared in your system using quotes, you must fully qualify that path when starting any process found in that location. Otherwise, the system will not find the path. For example, if <code>c:\\mypath</code> is not in your path, and you add it using quotation marks: <code>path = %path%;&quot;c:\\mypath&quot;</code>, you must fully qualify any process in <code>c:\\mypath</code> when starting it.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> ASP.NET Web page and server control code executes in the context of the ASP.NET worker process on the Web server.  If you use the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Start_\" data-linktype=\"relative-path\">Start</a> method in an ASP.NET Web page or server control, the new process executes on the Web server with restricted permissions. The process does not start in the same context as the client browser, and does not have access to the user desktop.  </p>\n</div>\n<p> Whenever you use Start to start a process, you might need to close it or you risk losing system resources. Close processes using <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_CloseMainWindow_\" data-linktype=\"relative-path\">CloseMainWindow</a> or <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Kill_\" data-linktype=\"relative-path\">Kill</a>. You can check whether a process has already been closed by using its <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_HasExited_\" data-linktype=\"relative-path\">HasExited</a> property.  </p>\n<p> A note about apartment states in managed threads is necessary here. When <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_UseShellExecute_\" data-linktype=\"relative-path\">UseShellExecute</a> is <code>true</code> on the process component&#39;s <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StartInfo_\" data-linktype=\"relative-path\">StartInfo</a> property, make sure you have set a threading model on your application by setting the attribute <code>[STAThread]</code> on the <code>main()</code> method. Otherwise, a managed thread can be in an <code>unknown</code> state or put in the <code>MTA</code> state, the latter of which conflicts with <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_UseShellExecute_\" data-linktype=\"relative-path\">UseShellExecute</a> being <code>true</code>. Some methods require that the apartment state not be <code>unknown</code>. If the state is not explicitly set, when the application encounters such a method, it defaults to <code>MTA</code>, and once set, the apartment state cannot be changed. However, <code>MTA</code> causes an exception to be thrown when the operating system shell is managing the thread.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses an instance of the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> class to start a process.  </p>\n<pre><code class=\"lang-cpp\" name=\"Process.Start_instance#1\">#using &lt;System.dll&gt;\nusing namespace System;\nusing namespace System::Diagnostics;\nusing namespace System::ComponentModel;\n\nint main()\n{\n    Process^ myProcess = gcnew Process;\n\n    try\n    {\n        myProcess-&gt;StartInfo-&gt;UseShellExecute = false;\n        // You can start any process, HelloWorld is a do-nothing example.\n        myProcess-&gt;StartInfo-&gt;FileName = &quot;C:\\\\HelloWorld.exe&quot;;\n        myProcess-&gt;StartInfo-&gt;CreateNoWindow = true;\n        myProcess-&gt;Start();\n        // This code assumes the process you are starting will terminate itself. \n        // Given that is is started without a window so you cannot terminate it \n        // on the desktop, it must terminate itself or you can do it programmatically\n        // from this application using the Kill method.\n    }\n    catch ( Exception^ e ) \n    {\n        Console::WriteLine( e-&gt;Message );\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Process.Start_instance#1\">Imports System\nImports System.Diagnostics\nImports System.ComponentModel\n\nNamespace MyProcessSample\n    Class MyProcess\n        Public Shared Sub Main()\n            Dim myProcess As New Process()\n\n            Try\n                myProcess.StartInfo.UseShellExecute = False\n                &#39; You can start any process, HelloWorld is a do-nothing example.\n                myProcess.StartInfo.FileName = &quot;C:\\\\HelloWorld.exe&quot;\n                myProcess.StartInfo.CreateNoWindow = True\n                myProcess.Start()\n                &#39; This code assumes the process you are starting will terminate itself. \n                &#39; Given that is is started without a window so you cannot terminate it \n                &#39; on the desktop, it must terminate itself or you can do it programmatically\n                &#39; from this application using the Kill method.\n            Catch e As Exception\n                Console.WriteLine((e.Message))\n            End Try\n        End Sub &#39;Main\n    End Class\nEnd Namespace\n</code></pre><pre><code class=\"lang-cs\" name=\"Process.Start_instance#1\">using System;\nusing System.Diagnostics;\nusing System.ComponentModel;\n\nnamespace MyProcessSample\n{\n    class MyProcess\n    {\n        public static void Main()\n        {\n            Process myProcess = new Process();\n\n            try\n            {\n                myProcess.StartInfo.UseShellExecute = false;\n                // You can start any process, HelloWorld is a do-nothing example.\n                myProcess.StartInfo.FileName = &quot;C:\\\\HelloWorld.exe&quot;;\n                myProcess.StartInfo.CreateNoWindow = true;\n                myProcess.Start();\n                // This code assumes the process you are starting will terminate itself. \n                // Given that is is started without a window so you cannot terminate it \n                // on the desktop, it must terminate itself or you can do it programmatically\n                // from this application using the Kill method.\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(e.Message);\n            }\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_Start_System_Diagnostics_ProcessStartInfo_\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_Start_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Start(ProcessStartInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Starts the process resource that is specified by the parameter containing process start information (for example, the file name of the process to start) and associates the resource with a new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Diagnostics.Process Start (System.Diagnostics.ProcessStartInfo startInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>startInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.processstartinfo\" data-linktype=\"relative-path\">ProcessStartInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.diagnostics.processstartinfo\" data-linktype=\"relative-path\">ProcessStartInfo</a> that contains the information that is used to start the process, including the file name and any command-line arguments.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a></div>\r\n                  </div>\r\n                  <p>A new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> that is associated with the process resource, or <code>null</code> if no process resource is started. Note that a new process thatâ€™s started alongside already running instances of the same process will be independent from the others. In addition, Start may return a non-null Process with its <span class=\"xref\">stem.Diagnostics.Process.HasExited*</span> property already set to <code>true</code>. In this case, the started process may have activated an existing instance of itself and then exited.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>No file name was specified in the <code>startInfo</code> parameter&#39;s <span class=\"xref\">stem.Diagnostics.ProcessStartInfo.FileName*</span> property.  </p>\n<p> -or-  </p>\n<p> The <span class=\"xref\">stem.Diagnostics.ProcessStartInfo.UseShellExecute*</span> property of the <code>startInfo</code> parameter is <code>true</code> and the <span class=\"xref\">stem.Diagnostics.ProcessStartInfo.RedirectStandardInput*</span>, <span class=\"xref\">stem.Diagnostics.ProcessStartInfo.RedirectStandardOutput*</span>, or <span class=\"xref\">stem.Diagnostics.ProcessStartInfo.RedirectStandardError*</span> property is also <code>true</code>.  </p>\n<p> -or-  </p>\n<p> The <span class=\"xref\">stem.Diagnostics.ProcessStartInfo.UseShellExecute*</span> property of the <code>startInfo</code> parameter is <code>true</code> and the <span class=\"xref\">stem.Diagnostics.ProcessStartInfo.UserName*</span> property is not <code>null</code> or empty or the <span class=\"xref\">stem.Diagnostics.ProcessStartInfo.Password*</span> property is not <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>startInfo</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The process object has already been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The file specified in the <code>startInfo</code> parameter&#39;s <span class=\"xref\">stem.Diagnostics.ProcessStartInfo.FileName*</span> property could not be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.win32exception\" data-linktype=\"relative-path\">Win32Exception</a></div>\r\n                  </div>\r\n                  <p>An error occurred when opening the associated file.  </p>\n<p> -or-  </p>\n<p> The sum of the length of the arguments and the length of the full path to the process exceeds 2080. The error message associated with this exception can be one of the following: &quot;The data area passed to a system call is too small.&quot; or &quot;Access is denied.&quot;</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this overload to start a process resource by specifying a <a class=\"xref\" href=\"system.diagnostics.processstartinfo\" data-linktype=\"relative-path\">ProcessStartInfo</a> instance. The overload associates the resource with a new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> object.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If the address of the executable file to start is a URL, the process is not started and <code>null</code> is returned.  </p>\n</div>\n<p> This overload lets you start a process without first creating a new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> instance. Using this overload with a <a class=\"xref\" href=\"system.diagnostics.processstartinfo\" data-linktype=\"relative-path\">ProcessStartInfo</a> parameter is an alternative to the explicit steps of creating a new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> instance, setting its <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StartInfo_\" data-linktype=\"relative-path\">StartInfo</a> properties, and calling <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Start_\" data-linktype=\"relative-path\">Start</a> for the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> instance.  </p>\n<p> Using a <a class=\"xref\" href=\"system.diagnostics.processstartinfo\" data-linktype=\"relative-path\">ProcessStartInfo</a> instance as the parameter lets you call <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Start_\" data-linktype=\"relative-path\">Start</a> with the most control over what is passed into the call to start the process. If you need to pass only a file name or a file name and arguments, it is not necessary to create a new <a class=\"xref\" href=\"system.diagnostics.processstartinfo\" data-linktype=\"relative-path\">ProcessStartInfo</a> instance, although that is an option. The only <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StartInfo_\" data-linktype=\"relative-path\">StartInfo</a> property that must be set is the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_FileName_\" data-linktype=\"relative-path\">FileName</a> property. The <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_FileName_\" data-linktype=\"relative-path\">FileName</a> property does not need to represent an executable file. It can be of any file type for which the extension has been associated with an application that is installed on the system. For example, the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_FileName_\" data-linktype=\"relative-path\">FileName</a> property can have a .txt extension if you have associated text files with an editor, such as Notepad, or it can have a .doc extension if you have associated.doc files with a word processing tool, such as Microsoft Word.  </p>\n<p> You can start a ClickOnce application by specifying the location (for example, a Web address) from which you originally installed the application. Do not start a ClickOnce application by specifying its installed location on your hard drive.  </p>\n<p> If the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_UserName_\" data-linktype=\"relative-path\">UserName</a> and <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_Password_\" data-linktype=\"relative-path\">Password</a> properties of the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StartInfo_\" data-linktype=\"relative-path\">StartInfo</a> instance are set, the unmanaged <code>CreateProcessWithLogonW</code> function is called, which starts the process in a new window even if the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_CreateNoWindow_\" data-linktype=\"relative-path\">CreateNoWindow</a> property value is <code>true</code> or the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_WindowStyle_\" data-linktype=\"relative-path\">WindowStyle</a> property value is <a class=\"xref\" href=\"system.diagnostics.processwindowstyle\" data-linktype=\"relative-path\">ProcessWindowStyle</a>.  </p>\n<p> Unlike the other overloads, the overload of <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Start_\" data-linktype=\"relative-path\">Start</a> that has no parameters is not a <code>static</code> member. Use that overload when you have already created a <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> instance, specified start information (including the file name), and want to start a process resource and associate it with the existing <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> instance. Use one of the <code>static</code> overloads when you want to create a new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component rather than start a process for an existing component. Both this overload and the overload that has no parameters allow you to specify the start information for the process resource by using a <a class=\"xref\" href=\"system.diagnostics.processstartinfo\" data-linktype=\"relative-path\">ProcessStartInfo</a> instance.  </p>\n<p> If you have a path variable declared in your system using quotes, you must fully qualify that path when starting any process found in that location. Otherwise, the system will not find the path. For example, if <code>c:\\mypath</code> is not in your path, and you add it using quotation marks: <code>path = %path%;&quot;c:\\mypath&quot;</code>, you must fully qualify any process in <code>c:\\mypath</code> when starting it.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> ASP.NET Web page and server control code executes in the context of the ASP.NET worker process on the Web server.  If you use the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Start_\" data-linktype=\"relative-path\">Start</a> method in an ASP.NET Web page or server control, the new process executes on the Web server with restricted permissions. The process does not start in the same context as the client browser, and does not have access to the user desktop.  </p>\n</div>\n<p> Whenever you use <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Start_\" data-linktype=\"relative-path\">Start</a> to start a process, you might need to close it or you risk losing system resources. Close processes using <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_CloseMainWindow_\" data-linktype=\"relative-path\">CloseMainWindow</a> or <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Kill_\" data-linktype=\"relative-path\">Kill</a>. You can check whether a process has already been closed by using its <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_HasExited_\" data-linktype=\"relative-path\">HasExited</a> property.  </p>\n<p> A note about apartment states in managed threads is necessary here. When <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_UseShellExecute_\" data-linktype=\"relative-path\">UseShellExecute</a> is <code>true</code> on the <code>startInfo</code> parameter, make sure you have set a threading model on your application by setting the attribute <code>[STAThread]</code> on the <code>main()</code> method. Otherwise, a managed thread can be in an <code>unknown</code> state or put in the <code>MTA</code> state, the latter of which conflicts with <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_UseShellExecute_\" data-linktype=\"relative-path\">UseShellExecute</a> being <code>true</code>. Some methods require that the apartment state not be <code>unknown</code>. If the state is not explicitly set, when the application encounters such a method, it defaults to <code>MTA</code>, and once set, the apartment state cannot be changed. However, <code>MTA</code> causes an exception to be thrown when the operating system shell is managing the thread.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example first spawns an instance of Internet Explorer and displays the contents of the Favorites folder in the browser. It then starts some other instances of Internet Explorer and displays some specific pages or sites. Finally it starts Internet Explorer with the window being minimized while navigating to a specific site.  </p>\n<p> For additional examples of other uses of this method, refer to the individual properties of the <a class=\"xref\" href=\"system.diagnostics.processstartinfo\" data-linktype=\"relative-path\">ProcessStartInfo</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"Process.Start_static#1\">Imports System.Diagnostics\nImports System.ComponentModel\n\nNamespace MyProcessSample\n    Class MyProcess\n        &#39; Opens the Internet Explorer application.\n        Public Sub OpenApplication(myFavoritesPath As String)\n            &#39; Start Internet Explorer. Defaults to the home page.\n            Process.Start(&quot;IExplore.exe&quot;)\n\n            &#39; Display the contents of the favorites folder in the browser.\n            Process.Start(myFavoritesPath)\n        End Sub &#39;OpenApplication\n\n        &#39; Opens urls and .html documents using Internet Explorer.\n        Sub OpenWithArguments()\n            &#39; url&#39;s are not considered documents. They can only be opened\n            &#39; by passing them as arguments.\n            Process.Start(&quot;IExplore.exe&quot;, &quot;www.northwindtraders.com&quot;)\n\n            &#39; Start a Web page using a browser associated with .html and .asp files.\n            Process.Start(&quot;IExplore.exe&quot;, &quot;C:\\myPath\\myFile.htm&quot;)\n            Process.Start(&quot;IExplore.exe&quot;, &quot;C:\\myPath\\myFile.asp&quot;)\n        End Sub &#39;OpenWithArguments\n\n        &#39; Uses the ProcessStartInfo class to start new processes,\n        &#39; both in a minimized mode.\n        Sub OpenWithStartInfo()\n            Dim startInfo As New ProcessStartInfo(&quot;IExplore.exe&quot;)\n            startInfo.WindowStyle = ProcessWindowStyle.Minimized\n\n            Process.Start(startInfo)\n\n            startInfo.Arguments = &quot;www.northwindtraders.com&quot;\n\n            Process.Start(startInfo)\n        End Sub &#39;OpenWithStartInfo\n\n        Shared Sub Main()\n            &#39; Get the path that stores favorite links.\n            Dim myFavoritesPath As String = Environment.GetFolderPath(Environment.SpecialFolder.Favorites)\n\n            Dim myProcess As New MyProcess()\n\n            myProcess.OpenApplication(myFavoritesPath)\n            myProcess.OpenWithArguments()\n            myProcess.OpenWithStartInfo()\n        End Sub &#39;Main\n    End Class &#39;MyProcess\nEnd Namespace &#39;MyProcessSample\n</code></pre><pre><code class=\"lang-cs\" name=\"Process.Start_static#1\">using System;\nusing System.Diagnostics;\nusing System.ComponentModel;\n\nnamespace MyProcessSample\n{\n    class MyProcess\n    {\n        // Opens the Internet Explorer application.\n        void OpenApplication(string myFavoritesPath)\n        {\n            // Start Internet Explorer. Defaults to the home page.\n            Process.Start(&quot;IExplore.exe&quot;);\n\n            // Display the contents of the favorites folder in the browser.\n            Process.Start(myFavoritesPath);\n        }\n        \n        // Opens urls and .html documents using Internet Explorer.\n        void OpenWithArguments()\n        {\n            // url&#39;s are not considered documents. They can only be opened\n            // by passing them as arguments.\n            Process.Start(&quot;IExplore.exe&quot;, &quot;www.northwindtraders.com&quot;);\n\n            // Start a Web page using a browser associated with .html and .asp files.\n            Process.Start(&quot;IExplore.exe&quot;, &quot;C:\\\\myPath\\\\myFile.htm&quot;);\n            Process.Start(&quot;IExplore.exe&quot;, &quot;C:\\\\myPath\\\\myFile.asp&quot;);\n        }\n\n        // Uses the ProcessStartInfo class to start new processes,\n        // both in a minimized mode.\n        void OpenWithStartInfo()\n        {\n            ProcessStartInfo startInfo = new ProcessStartInfo(&quot;IExplore.exe&quot;);\n            startInfo.WindowStyle = ProcessWindowStyle.Minimized;\n\n            Process.Start(startInfo);\n\n            startInfo.Arguments = &quot;www.northwindtraders.com&quot;;\n\n            Process.Start(startInfo);\n        }\n\n        static void Main()\n        {\n            // Get the path that stores favorite links.\n            string myFavoritesPath =\n                Environment.GetFolderPath(Environment.SpecialFolder.Favorites);\n\n            MyProcess myProcess = new MyProcess();\n\n            myProcess.OpenApplication(myFavoritesPath);\n            myProcess.OpenWithArguments();\n            myProcess.OpenWithStartInfo();\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Process.Start_static#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Diagnostics;\nusing namespace System::ComponentModel;\n\n// Opens the Internet Explorer application.\nvoid OpenApplication(String^ myFavoritesPath)\n{\n    // Start Internet Explorer. Defaults to the home page.\n    Process::Start(&quot;IExplore.exe&quot;);\n\n    // Display the contents of the favorites folder in the browser.\n    Process::Start(myFavoritesPath);\n}\n\n// Opens urls and .html documents using Internet Explorer.\nvoid OpenWithArguments()\n{\n    // url&#39;s are not considered documents. They can only be opened\n    // by passing them as arguments.\n    Process::Start(&quot;IExplore.exe&quot;, &quot;www.northwindtraders.com&quot;);\n\n    // Start a Web page using a browser associated with .html and .asp files.\n    Process::Start(&quot;IExplore.exe&quot;, &quot;C:\\\\myPath\\\\myFile.htm&quot;);\n    Process::Start(&quot;IExplore.exe&quot;, &quot;C:\\\\myPath\\\\myFile.asp&quot;);\n}\n\n// Uses the ProcessStartInfo class to start new processes,\n// both in a minimized mode.\nvoid OpenWithStartInfo()\n{\n    ProcessStartInfo^ startInfo = gcnew ProcessStartInfo(&quot;IExplore.exe&quot;);\n    startInfo-&gt;WindowStyle = ProcessWindowStyle::Minimized;\n    Process::Start(startInfo);\n    startInfo-&gt;Arguments = &quot;www.northwindtraders.com&quot;;\n    Process::Start(startInfo);\n}\n\nint main()\n{\n    // Get the path that stores favorite links.\n    String^ myFavoritesPath = Environment::GetFolderPath(Environment::SpecialFolder::Favorites);\n    OpenApplication(myFavoritesPath);\n    OpenWithArguments();\n    OpenWithStartInfo();\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_Start_System_String_\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_Start_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Start(String)</div>        \r\n          </div>\r\n    \r\n            <p>Starts a process resource by specifying the name of a document or application file and associates the resource with a new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Diagnostics.Process Start (string fileName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of a document or application file to run in the process.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a></div>\r\n                  </div>\r\n                  <p>A new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> that is associated with the process resource, or <code>null</code> if no process resource is started. Note that a new process thatâ€™s started alongside already running instances of the same process will be independent from the others. In addition, Start may return a non-null Process with its <span class=\"xref\">stem.Diagnostics.Process.HasExited*</span> property already set to <code>true</code>. In this case, the started process may have activated an existing instance of itself and then exited.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.win32exception\" data-linktype=\"relative-path\">Win32Exception</a></div>\r\n                  </div>\r\n                  <p>An error occurred when opening the associated file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The process object has already been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The PATH environment variable has a string containing quotes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this overload to start a process resource by specifying its file name. The overload associates the resource with a new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> object.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If the address of the executable file to start is a URL, the process is not started and <code>null</code> is returned.  </p>\n</div>\n<p> This overload lets you start a process without first creating a new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> instance. The overload is an alternative to the explicit steps of creating a new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> instance, setting the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_FileName_\" data-linktype=\"relative-path\">FileName</a> member of the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StartInfo_\" data-linktype=\"relative-path\">StartInfo</a> property, and calling <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Start_\" data-linktype=\"relative-path\">Start</a> for the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> instance.  </p>\n<p> You can start a ClickOnce application by setting the <code>fileName</code> parameter to the location (for example, a Web address) from which you originally installed the application. Do not start a ClickOnce application by specifying its installed location on your hard drive.  </p>\n<p> Starting a process by specifying its file name is similar to typing the information in the <code>Run</code> dialog box of the Windows <code>Start</code> menu. Therefore, the file name does not need to represent an executable file. It can be of any file type for which the extension has been associated with an application installed on the system. For example the file name can have a .txt extension if you have associated text files with an editor, such as Notepad, or it can have a .doc if you have associated.doc files with a word processing tool, such as Microsoft Word. Similarly, in the same way that the <code>Run</code> dialog box can accept an executable file name with or without the .exe extension, the .exe extension is optional in the <code>fileName</code> parameter. For example, you can set the <code>fileName</code> parameter to either &quot;Notepad.exe&quot; or &quot;Notepad&quot;.  </p>\n<p> This overload does not allow command-line arguments for the process. If you need to specify one or more command-line arguments for the process, use the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Start_System_Diagnostics_ProcessStartInfo_\" data-linktype=\"relative-path\">System.Diagnostics.Process.Start(ProcessStartInfo)</a> or <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Start_System_String_System_String_\" data-linktype=\"relative-path\">System.Diagnostics.Process.Start(String,String)</a> overloads.  </p>\n<p> Unlike the other overloads, the overload of <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Start_\" data-linktype=\"relative-path\">Start</a> that has no parameters is not a <code>static</code> member. Use that overload when you have already created a <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> instance, specified start information (including the file name), and want to start a process resource and associate it with the existing <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> instance. Use one of the <code>static</code> overloads when you want to create a new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component rather than start a process for an existing component. Both this overload and the overload that has no parameters allow you to specify the file name of the process resource to start.  </p>\n<p> If you have a path variable declared in your system using quotes, you must fully qualify that path when starting any process found in that location. Otherwise, the system will not find the path. For example, if <code>c:\\mypath</code> is not in your path, and you add it using quotation marks: <code>path = %path%;&quot;c:\\mypath&quot;</code>, you must fully qualify any process in <code>c:\\mypath</code> when starting it.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> ASP.NET Web page and server control code executes in the context of the ASP.NET worker process on the Web server.  If you use the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Start_\" data-linktype=\"relative-path\">Start</a> method in an ASP.NET Web page or server control, the new process executes on the Web server with restricted permissions. The process does not start in the same context as the client browser, and does not have access to the user desktop.  </p>\n</div>\n<p> Whenever you use <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Start_\" data-linktype=\"relative-path\">Start</a> to start a process, you might need to close it or you risk losing system resources. Close processes using <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_CloseMainWindow_\" data-linktype=\"relative-path\">CloseMainWindow</a> or <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Kill_\" data-linktype=\"relative-path\">Kill</a>. You can check whether a process has already been closed by using its <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_HasExited_\" data-linktype=\"relative-path\">HasExited</a> property.  </p>\n<p> A note about apartment states in managed threads is necessary here. When <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_UseShellExecute_\" data-linktype=\"relative-path\">UseShellExecute</a> is <code>true</code> on the process component&#39;s <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StartInfo_\" data-linktype=\"relative-path\">StartInfo</a> property, make sure you have set a threading model on your application by setting the attribute <code>[STAThread]</code> on the <code>main()</code> method. Otherwise, a managed thread can be in an <code>unknown</code> state or put in the <code>MTA</code> state, the latter of which conflicts with <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_UseShellExecute_\" data-linktype=\"relative-path\">UseShellExecute</a> being <code>true</code>. Some methods require that the apartment state not be <code>unknown</code>. If the state is not explicitly set, when the application encounters such a method, it defaults to <code>MTA</code>, and once set, the apartment state cannot be changed. However, <code>MTA</code> causes an exception to be thrown when the operating system shell is managing the thread.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example first spawns an instance of Internet Explorer and displays the contents of the Favorites folder in the browser. It then starts some other instances of Internet Explorer and displays some specific pages or sites. Finally it starts Internet Explorer with the window being minimized while navigating to a specific site.  </p>\n<pre><code class=\"lang-vb\" name=\"Process.Start_static#1\">Imports System.Diagnostics\nImports System.ComponentModel\n\nNamespace MyProcessSample\n    Class MyProcess\n        &#39; Opens the Internet Explorer application.\n        Public Sub OpenApplication(myFavoritesPath As String)\n            &#39; Start Internet Explorer. Defaults to the home page.\n            Process.Start(&quot;IExplore.exe&quot;)\n\n            &#39; Display the contents of the favorites folder in the browser.\n            Process.Start(myFavoritesPath)\n        End Sub &#39;OpenApplication\n\n        &#39; Opens urls and .html documents using Internet Explorer.\n        Sub OpenWithArguments()\n            &#39; url&#39;s are not considered documents. They can only be opened\n            &#39; by passing them as arguments.\n            Process.Start(&quot;IExplore.exe&quot;, &quot;www.northwindtraders.com&quot;)\n\n            &#39; Start a Web page using a browser associated with .html and .asp files.\n            Process.Start(&quot;IExplore.exe&quot;, &quot;C:\\myPath\\myFile.htm&quot;)\n            Process.Start(&quot;IExplore.exe&quot;, &quot;C:\\myPath\\myFile.asp&quot;)\n        End Sub &#39;OpenWithArguments\n\n        &#39; Uses the ProcessStartInfo class to start new processes,\n        &#39; both in a minimized mode.\n        Sub OpenWithStartInfo()\n            Dim startInfo As New ProcessStartInfo(&quot;IExplore.exe&quot;)\n            startInfo.WindowStyle = ProcessWindowStyle.Minimized\n\n            Process.Start(startInfo)\n\n            startInfo.Arguments = &quot;www.northwindtraders.com&quot;\n\n            Process.Start(startInfo)\n        End Sub &#39;OpenWithStartInfo\n\n        Shared Sub Main()\n            &#39; Get the path that stores favorite links.\n            Dim myFavoritesPath As String = Environment.GetFolderPath(Environment.SpecialFolder.Favorites)\n\n            Dim myProcess As New MyProcess()\n\n            myProcess.OpenApplication(myFavoritesPath)\n            myProcess.OpenWithArguments()\n            myProcess.OpenWithStartInfo()\n        End Sub &#39;Main\n    End Class &#39;MyProcess\nEnd Namespace &#39;MyProcessSample\n</code></pre><pre><code class=\"lang-cs\" name=\"Process.Start_static#1\">using System;\nusing System.Diagnostics;\nusing System.ComponentModel;\n\nnamespace MyProcessSample\n{\n    class MyProcess\n    {\n        // Opens the Internet Explorer application.\n        void OpenApplication(string myFavoritesPath)\n        {\n            // Start Internet Explorer. Defaults to the home page.\n            Process.Start(&quot;IExplore.exe&quot;);\n\n            // Display the contents of the favorites folder in the browser.\n            Process.Start(myFavoritesPath);\n        }\n        \n        // Opens urls and .html documents using Internet Explorer.\n        void OpenWithArguments()\n        {\n            // url&#39;s are not considered documents. They can only be opened\n            // by passing them as arguments.\n            Process.Start(&quot;IExplore.exe&quot;, &quot;www.northwindtraders.com&quot;);\n\n            // Start a Web page using a browser associated with .html and .asp files.\n            Process.Start(&quot;IExplore.exe&quot;, &quot;C:\\\\myPath\\\\myFile.htm&quot;);\n            Process.Start(&quot;IExplore.exe&quot;, &quot;C:\\\\myPath\\\\myFile.asp&quot;);\n        }\n\n        // Uses the ProcessStartInfo class to start new processes,\n        // both in a minimized mode.\n        void OpenWithStartInfo()\n        {\n            ProcessStartInfo startInfo = new ProcessStartInfo(&quot;IExplore.exe&quot;);\n            startInfo.WindowStyle = ProcessWindowStyle.Minimized;\n\n            Process.Start(startInfo);\n\n            startInfo.Arguments = &quot;www.northwindtraders.com&quot;;\n\n            Process.Start(startInfo);\n        }\n\n        static void Main()\n        {\n            // Get the path that stores favorite links.\n            string myFavoritesPath =\n                Environment.GetFolderPath(Environment.SpecialFolder.Favorites);\n\n            MyProcess myProcess = new MyProcess();\n\n            myProcess.OpenApplication(myFavoritesPath);\n            myProcess.OpenWithArguments();\n            myProcess.OpenWithStartInfo();\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Process.Start_static#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Diagnostics;\nusing namespace System::ComponentModel;\n\n// Opens the Internet Explorer application.\nvoid OpenApplication(String^ myFavoritesPath)\n{\n    // Start Internet Explorer. Defaults to the home page.\n    Process::Start(&quot;IExplore.exe&quot;);\n\n    // Display the contents of the favorites folder in the browser.\n    Process::Start(myFavoritesPath);\n}\n\n// Opens urls and .html documents using Internet Explorer.\nvoid OpenWithArguments()\n{\n    // url&#39;s are not considered documents. They can only be opened\n    // by passing them as arguments.\n    Process::Start(&quot;IExplore.exe&quot;, &quot;www.northwindtraders.com&quot;);\n\n    // Start a Web page using a browser associated with .html and .asp files.\n    Process::Start(&quot;IExplore.exe&quot;, &quot;C:\\\\myPath\\\\myFile.htm&quot;);\n    Process::Start(&quot;IExplore.exe&quot;, &quot;C:\\\\myPath\\\\myFile.asp&quot;);\n}\n\n// Uses the ProcessStartInfo class to start new processes,\n// both in a minimized mode.\nvoid OpenWithStartInfo()\n{\n    ProcessStartInfo^ startInfo = gcnew ProcessStartInfo(&quot;IExplore.exe&quot;);\n    startInfo-&gt;WindowStyle = ProcessWindowStyle::Minimized;\n    Process::Start(startInfo);\n    startInfo-&gt;Arguments = &quot;www.northwindtraders.com&quot;;\n    Process::Start(startInfo);\n}\n\nint main()\n{\n    // Get the path that stores favorite links.\n    String^ myFavoritesPath = Environment::GetFolderPath(Environment::SpecialFolder::Favorites);\n    OpenApplication(myFavoritesPath);\n    OpenWithArguments();\n    OpenWithStartInfo();\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_Start_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_Start_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Start(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Starts a process resource by specifying the name of an application and a set of command-line arguments, and associates the resource with a new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Diagnostics.Process Start (string fileName, string arguments);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of an application file to run in the process.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arguments</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Command-line arguments to pass when starting the process.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a></div>\r\n                  </div>\r\n                  <p>A new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> that is associated with the process resource, or <code>null</code> if no process resource is started. Note that a new process thatâ€™s started alongside already running instances of the same process will be independent from the others. In addition, Start may return a non-null Process with its <span class=\"xref\">stem.Diagnostics.Process.HasExited*</span> property already set to <code>true</code>. In this case, the started process may have activated an existing instance of itself and then exited.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <code>fileName</code> or <code>arguments</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.win32exception\" data-linktype=\"relative-path\">Win32Exception</a></div>\r\n                  </div>\r\n                  <p>An error occurred when opening the associated file.  </p>\n<p> -or-  </p>\n<p> The sum of the length of the arguments and the length of the full path to the process exceeds 2080. The error message associated with this exception can be one of the following: &quot;The data area passed to a system call is too small.&quot; or &quot;Access is denied.&quot;</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The process object has already been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The PATH environment variable has a string containing quotes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this overload to start a process resource by specifying its file name and command-line arguments. The overload associates the resource with a new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> object.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If the address of the executable file to start is a URL, the process is not started and <code>null</code> is returned.  </p>\n</div>\n<p> This overload lets you start a process without first creating a new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> instance. The overload is an alternative to the explicit steps of creating a new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> instance, setting the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_FileName_\" data-linktype=\"relative-path\">FileName</a> and <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_Arguments_\" data-linktype=\"relative-path\">Arguments</a> members of the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StartInfo_\" data-linktype=\"relative-path\">StartInfo</a> property, and calling <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Start_\" data-linktype=\"relative-path\">Start</a> for the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> instance.  </p>\n<p> Starting a process by specifying its file name and arguments is similar to typing the file name and command-line arguments in the <code>Run</code> dialog box of the Windows <code>Start</code> menu. Therefore, the file name does not need to represent an executable file. It can be of any file type for which the extension has been associated with an application installed on the system. For example the file name can have a .txt extension if you have associated text files with an editor, such as Notepad, or it can have a .doc if you have associated.doc files with a word processing tool, such as Microsoft Word. Similarly, in the same way that the <code>Run</code> dialog box can accept an executable file name with or without the .exe extension, the .exe extension is optional in the <code>fileName</code> parameter. For example, you can set the <code>fileName</code> parameter to either &quot;Notepad.exe&quot; or &quot;Notepad&quot;. If the <code>fileName</code> parameter represents an executable file, the <code>arguments</code> parameter might represent a file to act upon, such as the text file in <code>Notepad.exe myfile.txt</code>. If the <code>fileName</code> parameter represents a command (.cmd) file, the <code>arguments</code> parameter must include either a &quot;<code>/c</code>&quot; or &quot;<code>/k</code>&quot; argument to specify whether the command window exits or remains after completion.  </p>\n<p> Unlike the other overloads, the overload of <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Start_\" data-linktype=\"relative-path\">Start</a> that has no parameters is not a <code>static</code> member. Use that overload when you have already created a <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> instance, specified start information (including the file name), and want to start a process resource and associate it with the existing <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> instance. Use one of the <code>static</code> overloads when you want to create a new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component rather than start a process for an existing component. Both this overload and the overload that has no parameters allow you to specify the file name of the process resource to start and command-line arguments to pass.  </p>\n<p> If you have a path variable declared in your system using quotes, you must fully qualify that path when starting any process found in that location. Otherwise, the system will not find the path. For example, if <code>c:\\mypath</code> is not in your path, and you add it using quotation marks: <code>path = %path%;&quot;c:\\mypath&quot;</code>, you must fully qualify any process in <code>c:\\mypath</code> when starting it.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> ASP.NET Web page and server control code executes in the context of the ASP.NET worker process on the Web server.  If you use the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Start_\" data-linktype=\"relative-path\">Start</a> method in an ASP.NET Web page or server control, the new process executes on the Web server with restricted permissions. The process does not start in the same context as the client browser, and does not have access to the user desktop.  </p>\n</div>\n<p> Whenever you use <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Start_\" data-linktype=\"relative-path\">Start</a> to start a process, you might need to close it or you risk losing system resources. Close processes using <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_CloseMainWindow_\" data-linktype=\"relative-path\">CloseMainWindow</a> or <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Kill_\" data-linktype=\"relative-path\">Kill</a>. You can check whether a process has already been closed by using its <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_HasExited_\" data-linktype=\"relative-path\">HasExited</a> property..  </p>\n<p> A note about apartment states in managed threads is necessary here. When <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_UseShellExecute_\" data-linktype=\"relative-path\">UseShellExecute</a> is <code>true</code> on the process component&#39;s <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StartInfo_\" data-linktype=\"relative-path\">StartInfo</a> property, make sure you have set a threading model on your application by setting the attribute <code>[STAThread]</code> on the <code>main()</code> method. Otherwise, a managed thread can be in an <code>unknown</code> state or put in the <code>MTA</code> state, the latter of which conflicts with <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_UseShellExecute_\" data-linktype=\"relative-path\">UseShellExecute</a> being <code>true</code>. Some methods require that the apartment state not be <code>unknown</code>. If the state is not explicitly set, when the application encounters such a method, it defaults to <code>MTA</code>, and once set, the apartment state cannot be changed. However, <code>MTA</code> causes an exception to be thrown when the operating system shell is managing the thread.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example first spawns an instance of Internet Explorer and displays the contents of the Favorites folder in the browser. It then starts some other instances of Internet Explorer and displays some specific pages or sites. Finally it starts Internet Explorer with the window being minimized while navigating to a specific site.  </p>\n<pre><code class=\"lang-vb\" name=\"Process.Start_static#1\">Imports System.Diagnostics\nImports System.ComponentModel\n\nNamespace MyProcessSample\n    Class MyProcess\n        &#39; Opens the Internet Explorer application.\n        Public Sub OpenApplication(myFavoritesPath As String)\n            &#39; Start Internet Explorer. Defaults to the home page.\n            Process.Start(&quot;IExplore.exe&quot;)\n\n            &#39; Display the contents of the favorites folder in the browser.\n            Process.Start(myFavoritesPath)\n        End Sub &#39;OpenApplication\n\n        &#39; Opens urls and .html documents using Internet Explorer.\n        Sub OpenWithArguments()\n            &#39; url&#39;s are not considered documents. They can only be opened\n            &#39; by passing them as arguments.\n            Process.Start(&quot;IExplore.exe&quot;, &quot;www.northwindtraders.com&quot;)\n\n            &#39; Start a Web page using a browser associated with .html and .asp files.\n            Process.Start(&quot;IExplore.exe&quot;, &quot;C:\\myPath\\myFile.htm&quot;)\n            Process.Start(&quot;IExplore.exe&quot;, &quot;C:\\myPath\\myFile.asp&quot;)\n        End Sub &#39;OpenWithArguments\n\n        &#39; Uses the ProcessStartInfo class to start new processes,\n        &#39; both in a minimized mode.\n        Sub OpenWithStartInfo()\n            Dim startInfo As New ProcessStartInfo(&quot;IExplore.exe&quot;)\n            startInfo.WindowStyle = ProcessWindowStyle.Minimized\n\n            Process.Start(startInfo)\n\n            startInfo.Arguments = &quot;www.northwindtraders.com&quot;\n\n            Process.Start(startInfo)\n        End Sub &#39;OpenWithStartInfo\n\n        Shared Sub Main()\n            &#39; Get the path that stores favorite links.\n            Dim myFavoritesPath As String = Environment.GetFolderPath(Environment.SpecialFolder.Favorites)\n\n            Dim myProcess As New MyProcess()\n\n            myProcess.OpenApplication(myFavoritesPath)\n            myProcess.OpenWithArguments()\n            myProcess.OpenWithStartInfo()\n        End Sub &#39;Main\n    End Class &#39;MyProcess\nEnd Namespace &#39;MyProcessSample\n</code></pre><pre><code class=\"lang-cs\" name=\"Process.Start_static#1\">using System;\nusing System.Diagnostics;\nusing System.ComponentModel;\n\nnamespace MyProcessSample\n{\n    class MyProcess\n    {\n        // Opens the Internet Explorer application.\n        void OpenApplication(string myFavoritesPath)\n        {\n            // Start Internet Explorer. Defaults to the home page.\n            Process.Start(&quot;IExplore.exe&quot;);\n\n            // Display the contents of the favorites folder in the browser.\n            Process.Start(myFavoritesPath);\n        }\n        \n        // Opens urls and .html documents using Internet Explorer.\n        void OpenWithArguments()\n        {\n            // url&#39;s are not considered documents. They can only be opened\n            // by passing them as arguments.\n            Process.Start(&quot;IExplore.exe&quot;, &quot;www.northwindtraders.com&quot;);\n\n            // Start a Web page using a browser associated with .html and .asp files.\n            Process.Start(&quot;IExplore.exe&quot;, &quot;C:\\\\myPath\\\\myFile.htm&quot;);\n            Process.Start(&quot;IExplore.exe&quot;, &quot;C:\\\\myPath\\\\myFile.asp&quot;);\n        }\n\n        // Uses the ProcessStartInfo class to start new processes,\n        // both in a minimized mode.\n        void OpenWithStartInfo()\n        {\n            ProcessStartInfo startInfo = new ProcessStartInfo(&quot;IExplore.exe&quot;);\n            startInfo.WindowStyle = ProcessWindowStyle.Minimized;\n\n            Process.Start(startInfo);\n\n            startInfo.Arguments = &quot;www.northwindtraders.com&quot;;\n\n            Process.Start(startInfo);\n        }\n\n        static void Main()\n        {\n            // Get the path that stores favorite links.\n            string myFavoritesPath =\n                Environment.GetFolderPath(Environment.SpecialFolder.Favorites);\n\n            MyProcess myProcess = new MyProcess();\n\n            myProcess.OpenApplication(myFavoritesPath);\n            myProcess.OpenWithArguments();\n            myProcess.OpenWithStartInfo();\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Process.Start_static#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Diagnostics;\nusing namespace System::ComponentModel;\n\n// Opens the Internet Explorer application.\nvoid OpenApplication(String^ myFavoritesPath)\n{\n    // Start Internet Explorer. Defaults to the home page.\n    Process::Start(&quot;IExplore.exe&quot;);\n\n    // Display the contents of the favorites folder in the browser.\n    Process::Start(myFavoritesPath);\n}\n\n// Opens urls and .html documents using Internet Explorer.\nvoid OpenWithArguments()\n{\n    // url&#39;s are not considered documents. They can only be opened\n    // by passing them as arguments.\n    Process::Start(&quot;IExplore.exe&quot;, &quot;www.northwindtraders.com&quot;);\n\n    // Start a Web page using a browser associated with .html and .asp files.\n    Process::Start(&quot;IExplore.exe&quot;, &quot;C:\\\\myPath\\\\myFile.htm&quot;);\n    Process::Start(&quot;IExplore.exe&quot;, &quot;C:\\\\myPath\\\\myFile.asp&quot;);\n}\n\n// Uses the ProcessStartInfo class to start new processes,\n// both in a minimized mode.\nvoid OpenWithStartInfo()\n{\n    ProcessStartInfo^ startInfo = gcnew ProcessStartInfo(&quot;IExplore.exe&quot;);\n    startInfo-&gt;WindowStyle = ProcessWindowStyle::Minimized;\n    Process::Start(startInfo);\n    startInfo-&gt;Arguments = &quot;www.northwindtraders.com&quot;;\n    Process::Start(startInfo);\n}\n\nint main()\n{\n    // Get the path that stores favorite links.\n    String^ myFavoritesPath = Environment::GetFolderPath(Environment::SpecialFolder::Favorites);\n    OpenApplication(myFavoritesPath);\n    OpenWithArguments();\n    OpenWithStartInfo();\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_Start_System_String_System_String_System_Security_SecureString_System_String_\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_Start_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Start(String,String,SecureString,String)</div>        \r\n          </div>\r\n    \r\n            <p>Starts a process resource by specifying the name of an application, a user name, a password, and a domain and associates the resource with a new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Diagnostics.Process Start (string fileName, string userName, System.Security.SecureString password, string domain);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of an application file to run in the process.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>userName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The user name to use when starting the process.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>password</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a> that contains the password to use when starting the process.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>domain</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The domain to use when starting the process.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a></div>\r\n                  </div>\r\n                  <p>A new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> that is associated with the process resource, or <code>null</code> if no process resource is started. Note that a new process thatâ€™s started alongside already running instances of the same process will be independent from the others. In addition, Start may return a non-null Process with its <span class=\"xref\">stem.Diagnostics.Process.HasExited*</span> property already set to <code>true</code>. In this case, the started process may have activated an existing instance of itself and then exited.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>No file name was specified.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.win32exception\" data-linktype=\"relative-path\">Win32Exception</a></div>\r\n                  </div>\r\n                  <p>There was an error in opening the associated file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The process object has already been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this overload to create a new process and its primary thread by specifying its file name, user name, password, and domain. The new process then runs the specified executable file in the security context of the specified credentials (user, domain, and password).  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When the executable file is located on a remote drive, you must identify the network share by using a uniform resource identifier (URI), not a linked drive letter.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> If the address of the executable file to start is a URL, the process is not started and <code>null</code> is returned.  </p>\n</div>\n<p> This overload lets you start a process without first creating a new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> instance. The overload is an alternative to the explicit steps of creating a new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> instance, setting the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_FileName_\" data-linktype=\"relative-path\">FileName</a>, <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_UserName_\" data-linktype=\"relative-path\">UserName</a>, <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_Password_\" data-linktype=\"relative-path\">Password</a>, and <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_Domain_\" data-linktype=\"relative-path\">Domain</a> properties of the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StartInfo_\" data-linktype=\"relative-path\">StartInfo</a> property, and calling <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Start_\" data-linktype=\"relative-path\">Start</a> for the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> instance.  </p>\n<p> Similarly, in the same way that the <strong>Run</strong> dialog box can accept an executable file name with or without the .exe extension, the .exe extension is optional in the <code>fileName</code> parameter. For example, you can set the <code>fileName</code> parameter to either &quot;Notepad.exe&quot; or &quot;Notepad&quot;. If the <code>fileName</code> parameter represents an executable file, the <code>arguments</code> parameter might represent a file to act upon, such as the text file in <code>Notepad.exe myfile.txt</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The file name must represent an executable file in the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Start_\" data-linktype=\"relative-path\">Start</a> overloads that have <code>userName</code>, <code>password</code>, and <code>domain</code> parameters.  </p>\n</div>\n<p> Whenever you use <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Start_\" data-linktype=\"relative-path\">Start</a> to start a process, you might need to close it or you risk losing system resources. Close processes using <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_CloseMainWindow_\" data-linktype=\"relative-path\">CloseMainWindow</a> or <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Kill_\" data-linktype=\"relative-path\">Kill</a>. You can check whether a process has already been closed by using its <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_HasExited_\" data-linktype=\"relative-path\">HasExited</a> property..</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows the use of this overload to start an executable file and also demonstrates the throwing of a <a class=\"xref\" href=\"system.componentmodel.win32exception\" data-linktype=\"relative-path\">Win32Exception</a> when an attempt is made to start an application associated with a nonexecutable file.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Diagnostics.Process.Start#1\">// NOTE: This example requires a text.txt file file in your Documents folder\nusing System;\nusing System.Diagnostics;\nusing System.Security;\nusing System.ComponentModel;\n\nclass Example\n{\n    static void Main()\n    {\n        Console.Write(&quot;Enter your domain: &quot;);\n        string domain = Console.ReadLine();\n        Console.Write(&quot;Enter you user name: &quot;);\n        string uname = Console.ReadLine();\n        Console.Write(&quot;Enter your password: &quot;);\n        SecureString password = new SecureString();\n        ConsoleKeyInfo key;\n        do {\n           key = Console.ReadKey(true);\n\n           // Ignore any key out of range.\n           if (((int) key.Key) &gt;= 33 &amp;&amp; ((int) key.Key &lt;= 90) &amp;&amp; key.Key != ConsoleKey.Enter) {\n              // Append the character to the password.\n              password.AppendChar(key.KeyChar);\n              Console.Write(&quot;*&quot;);\n           }\n        // Exit if Enter key is pressed.\n        } while (key.Key != ConsoleKey.Enter);\n        Console.WriteLine();\n        \n        try {\n            Console.WriteLine(&quot;<br>Trying to launch NotePad using your login information...&quot;);\n            Process.Start(&quot;notepad.exe&quot;, uname, password, domain);\n        }\n        catch (Win32Exception ex) {\n            Console.WriteLine(ex.Message);\n        }\n\n        string path = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + &quot;\\\\&quot;;\n\n        try {\n             // The following call to Start succeeds if test.txt exists.\n             Console.WriteLine(&quot;<br>Trying to launch &#39;text.txt&#39;...&quot;);\n             Process.Start(path + &quot;text.txt&quot;);\n        }\n        catch (Win32Exception ex) {\n            Console.WriteLine(ex.Message);\n        }\n\n        try {\n             // Attempting to start in a shell using this Start overload fails. This causes\n             // the following exception, which is picked up in the catch block below:\n             // The specified executable is not a valid application for this OS platform.\n             Console.WriteLine(&quot;<br>Trying to launch &#39;text.txt&#39; with your login information...&quot;);\n             Process.Start(path + &quot;text.txt&quot;, uname, password, domain);\n         }\n         catch (Win32Exception ex)\n         {\n             Console.WriteLine(ex.Message);\n         }\n         finally {\n            password.Dispose();\n         }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Diagnostics.Process.Start#1\">&#39; This sample requires a text.txt file file in your documents folder.\n&#39; You&#39;ll also need to set the startup object in the project to Sub Main.\nImports System.Diagnostics\nImports System.Security\nImports System.ComponentModel\n\nModule Program\n    Sub Main()\n        Console.Write(&quot;Enter your domain: &quot;)\n        Dim domain As String = Console.ReadLine()\n        Console.Write(&quot;Enter you user name: &quot;)\n        Dim uname As String = Console.ReadLine()\n        Console.Write(&quot;Enter your password: &quot;)\n        Dim password As New SecureString()\n        Dim key As ConsoleKeyInfo\n        Do\n           key = Console.ReadKey(True)\n\n           &#39; Ignore any key out of range.\n           If key.Key &gt;= 33 AndAlso key.Key &lt;= 90 AndAlso key.Key &lt;&gt; ConsoleKey.Enter Then\n              &#39; Append the character to the password.\n              password.AppendChar(key.KeyChar)\n              Console.Write(&quot;*&quot;)\n           End If\n        &#39; Exit if Enter key is pressed.\n        Loop While key.Key &lt;&gt; ConsoleKey.Enter\n        Console.WriteLine()\n\n        Try\n            Console.WriteLine(vbCrLf + &quot;Trying to launch NotePad using your login information...&quot;)\n            Process.Start(&quot;notepad.exe&quot;, uname, password, domain)\n        Catch ex As Win32Exception\n            Console.WriteLine(ex.Message)\n        End Try\n\n        Dim path As String = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + &quot;\\&quot;\n\n        Try\n            &#39; The following call to Start succeeds if test.txt exists.\n            Console.WriteLine(vbCrLf + &quot;Trying to launch &#39;text.txt&#39;...&quot;)\n            Process.Start(path + &quot;Text.txt&quot;)\n        Catch ex As Win32Exception\n            Console.WriteLine(ex.Message)\n        End Try\n\n        Try\n            &#39; Attempting to start in a shell using this Start overload fails. This causes\n            &#39; the following exception, which is picked up in the catch block below:\n            &#39; The specified executable is not a valid application for this OS platform.\n            Console.WriteLine(vbCrLf + &quot;Trying to launch &#39;text.txt&#39; with your login information...&quot;)\n            Process.Start(path + &quot;Text.txt&quot;, uname, password, domain)\n        Catch ex As Win32Exception\n            Console.WriteLine(ex.Message)\n        Finally\n            password.Dispose()\n        End Try\n    End Sub\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_Start_System_String_System_String_System_String_System_Security_SecureString_System_String_\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_Start_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Start(String,String,String,SecureString,String)</div>        \r\n          </div>\r\n    \r\n            <p>Starts a process resource by specifying the name of an application, a set of command-line arguments, a user name, a password, and a domain and associates the resource with a new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Diagnostics.Process Start (string fileName, string arguments, string userName, System.Security.SecureString password, string domain);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of an application file to run in the process.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arguments</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Command-line arguments to pass when starting the process.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>userName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The user name to use when starting the process.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>password</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a> that contains the password to use when starting the process.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>domain</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The domain to use when starting the process.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a></div>\r\n                  </div>\r\n                  <p>A new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> that is associated with the process resource, or <code>null</code> if no process resource is started. Note that a new process thatâ€™s started alongside already running instances of the same process will be independent from the others. In addition, Start may return a non-null Process with its <span class=\"xref\">stem.Diagnostics.Process.HasExited*</span> property already set to <code>true</code>. In this case, the started process may have activated an existing instance of itself and then exited.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>No file name was specified.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.win32exception\" data-linktype=\"relative-path\">Win32Exception</a></div>\r\n                  </div>\r\n                  <p>An error occurred when opening the associated file.  </p>\n<p> -or-  </p>\n<p> The sum of the length of the arguments and the length of the full path to the associated file exceeds 2080. The error message associated with this exception can be one of the following: &quot;The data area passed to a system call is too small.&quot; or &quot;Access is denied.&quot;</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The process object has already been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this overload to create a new process and its primary thread by specifying its file name, command-line arguments, user name, password, and domain. The new process then runs the specified executable file in the security context of the specified credentials (user, domain, and password).  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When the executable file is located on a remote drive, you must identify the network share by using a uniform resource identifier (URI), not a linked drive letter.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> If the address of the executable file to start is a URL, the process is not started and <code>null</code> is returned.  </p>\n</div>\n<p> This overload lets you start a process without first creating a new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> instance. The overload is an alternative to the explicit steps of creating a new <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> instance, setting the <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_FileName_\" data-linktype=\"relative-path\">FileName</a>, <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_Arguments_\" data-linktype=\"relative-path\">Arguments</a>, <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_UserName_\" data-linktype=\"relative-path\">UserName</a>, <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_Password_\" data-linktype=\"relative-path\">Password</a>, and <a class=\"xref\" href=\"system.diagnostics.processstartinfo#System_Diagnostics_ProcessStartInfo_Domain_\" data-linktype=\"relative-path\">Domain</a> properties of the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StartInfo_\" data-linktype=\"relative-path\">StartInfo</a> property, and calling <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Start_\" data-linktype=\"relative-path\">Start</a> for the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> instance.  </p>\n<p> Similarly, in the same way that the <strong>Run</strong> dialog box can accept an executable file name with or without the .exe extension, the .exe extension is optional in the <code>fileName</code> parameter. For example, you can set the <code>fileName</code> parameter to either &quot;Notepad.exe&quot; or &quot;Notepad&quot;. If the <code>fileName</code> parameter represents an executable file, the <code>arguments</code> parameter might represent a file to act upon, such as the text file in <code>Notepad.exe myfile.txt</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The file name must represent an executable file in the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Start_\" data-linktype=\"relative-path\">Start</a> overloads that have <code>userName</code>, <code>password</code>, and <code>domain</code> parameters.  </p>\n</div>\n<p> Whenever you use <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Start_\" data-linktype=\"relative-path\">Start</a> to start a process, you might need to close it or you risk losing system resources. Close processes using <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_CloseMainWindow_\" data-linktype=\"relative-path\">CloseMainWindow</a> or <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Kill_\" data-linktype=\"relative-path\">Kill</a>. You can check whether a process has already been closed by using its <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_HasExited_\" data-linktype=\"relative-path\">HasExited</a> property..</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_ToString\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Formats the process&#39;s name as a string, combined with the parent component type, if applicable.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Diagnostics.Process.ProcessName*</span>, combined with the base component&#39;s <span class=\"xref\">stem.Object.ToString*</span> return value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>ToString is not supported on Windows 98.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example starts an instance of Notepad. The example then retrieves and displays various properties of the associated process. The example detects when the process exits, and displays the process&#39;s exit code.  </p>\n<pre><code class=\"lang-cpp\" name=\"Diag_Process_MemoryProperties64#1\">#using &lt;system.dll&gt;\n\nusing namespace System;\nusing namespace System::Diagnostics;\nint main()\n{\n   \n   // Define variables to track the peak\n   // memory usage of the process.\n   _int64 peakPagedMem = 0,peakWorkingSet = 0,peakVirtualMem = 0;\n   Process^ myProcess = nullptr;\n   try\n   {\n      \n      // Start the process.\n      myProcess = Process::Start( &quot;NotePad.exe&quot; );\n      \n      // Display the process statistics until\n      // the user closes the program.\n      do\n      {\n         if (  !myProcess-&gt;HasExited )\n         {\n            \n            // Refresh the current process property values.\n            myProcess-&gt;Refresh();\n            Console::WriteLine();\n            \n            // Display current process statistics.\n            Console::WriteLine( &quot;{0} -&quot;, myProcess );\n            Console::WriteLine( &quot;-------------------------------------&quot; );\n            Console::WriteLine( &quot;  physical memory usage: {0}&quot;, myProcess-&gt;WorkingSet64 );\n            Console::WriteLine( &quot;  base priority: {0}&quot;, myProcess-&gt;BasePriority );\n            Console::WriteLine( &quot;  priority class: {0}&quot;, myProcess-&gt;PriorityClass );\n            Console::WriteLine( &quot;  user processor time: {0}&quot;, myProcess-&gt;UserProcessorTime );\n            Console::WriteLine( &quot;  privileged processor time: {0}&quot;, myProcess-&gt;PrivilegedProcessorTime );\n            Console::WriteLine( &quot;  total processor time: {0}&quot;, myProcess-&gt;TotalProcessorTime );\n\t\t\tConsole::WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;, myProcess-&gt;PagedSystemMemorySize64);\n            Console::WriteLine(&quot;  PagedMemorySize64: {0}&quot;, myProcess-&gt;PagedMemorySize64);\n            \n            // Update the values for the overall peak memory statistics.\n            peakPagedMem = myProcess-&gt;PeakPagedMemorySize64;\n            peakVirtualMem = myProcess-&gt;PeakVirtualMemorySize64;\n            peakWorkingSet = myProcess-&gt;PeakWorkingSet64;\n            if ( myProcess-&gt;Responding )\n            {\n               Console::WriteLine( &quot;Status = Running&quot; );\n            }\n            else\n            {\n               Console::WriteLine( &quot;Status = Not Responding&quot; );\n            }\n         }\n      }\n      while (  !myProcess-&gt;WaitForExit( 1000 ) );\n      Console::WriteLine();\n      Console::WriteLine( &quot;Process exit code: {0}&quot;, myProcess-&gt;ExitCode );\n      \n      // Display peak memory statistics for the process.\n      Console::WriteLine( &quot;Peak physical memory usage of the process: {0}&quot;, peakWorkingSet );\n      Console::WriteLine( &quot;Peak paged memory usage of the process: {0}&quot;, peakPagedMem );\n      Console::WriteLine( &quot;Peak virtual memory usage of the process: {0}&quot;, peakVirtualMem );\n   }\n   finally\n   {\n      if ( myProcess != nullptr )\n      {\n         myProcess-&gt;Close();\n      }\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Diag_Process_MemoryProperties64#1\">using System;\nusing System.Diagnostics;\n\nnamespace ProcessSample\n{\n    class ProcessMonitorSample\n    {\n        public static void Main()\n        {\n\n            // Define variables to track the peak\n            // memory usage of the process.\n            long peakPagedMem = 0,\n                peakWorkingSet = 0,\n                peakVirtualMem = 0;\n\n            Process myProcess = null;\n\n            try\n            {\n                // Start the process.\n                myProcess = Process.Start(&quot;NotePad.exe&quot;);\n\n                // Display the process statistics until\n                // the user closes the program.\n                do\n                {\n                    if (!myProcess.HasExited)\n                    {\n                        // Refresh the current process property values.\n                        myProcess.Refresh();\n\n                        Console.WriteLine();\n\n                        // Display current process statistics.\n\n                        Console.WriteLine(&quot;{0} -&quot;, myProcess.ToString());\n                        Console.WriteLine(&quot;-------------------------------------&quot;);\n\n                        Console.WriteLine(&quot;  physical memory usage: {0}&quot;,\n                            myProcess.WorkingSet64);\n                        Console.WriteLine(&quot;  base priority: {0}&quot;,\n                            myProcess.BasePriority);\n                        Console.WriteLine(&quot;  priority class: {0}&quot;,\n                            myProcess.PriorityClass);\n                        Console.WriteLine(&quot;  user processor time: {0}&quot;,\n                            myProcess.UserProcessorTime);\n                        Console.WriteLine(&quot;  privileged processor time: {0}&quot;,\n                            myProcess.PrivilegedProcessorTime);\n                        Console.WriteLine(&quot;  total processor time: {0}&quot;,\n                            myProcess.TotalProcessorTime);\n                        Console.WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;,\n                            myProcess.PagedSystemMemorySize64);\n                        Console.WriteLine(&quot;  PagedMemorySize64: {0}&quot;,\n                           myProcess.PagedMemorySize64);\n\n                        // Update the values for the overall peak memory statistics.\n                        peakPagedMem = myProcess.PeakPagedMemorySize64;\n                        peakVirtualMem = myProcess.PeakVirtualMemorySize64;\n                        peakWorkingSet = myProcess.PeakWorkingSet64;\n\n                        if (myProcess.Responding)\n                        {\n                            Console.WriteLine(&quot;Status = Running&quot;);\n                        }\n                        else\n                        {\n                            Console.WriteLine(&quot;Status = Not Responding&quot;);\n                        }\n                    }\n                }\n                while (!myProcess.WaitForExit(1000));\n\n\n                Console.WriteLine();\n                Console.WriteLine(&quot;Process exit code: {0}&quot;,\n                    myProcess.ExitCode);\n\n                // Display peak memory statistics for the process.\n                Console.WriteLine(&quot;Peak physical memory usage of the process: {0}&quot;,\n                    peakWorkingSet);\n                Console.WriteLine(&quot;Peak paged memory usage of the process: {0}&quot;,\n                    peakPagedMem);\n                Console.WriteLine(&quot;Peak virtual memory usage of the process: {0}&quot;,\n                    peakVirtualMem);\n\n            }\n            finally\n            {\n                if (myProcess != null)\n                {\n                    myProcess.Close();\n                }\n            }\n        }\n\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Diag_Process_MemoryProperties64#1\">Imports System\nImports System.Diagnostics\n\nNamespace ProcessSample\n    Class ProcessMonitorSample\n\n        Public Shared Sub Main()\n\n            &#39; Define variables to track the peak\n            &#39; memory usage of the process.\n            Dim peakPagedMem As Long = 0\n            Dim peakWorkingSet As Long = 0\n            Dim peakVirtualMem As Long = 0\n\n            Dim myProcess As Process = Nothing\n\n            Try\n\n                &#39; Start the process.\n                myProcess = Process.Start(&quot;NotePad.exe&quot;)\n\n                &#39; Display process statistics until\n                &#39; the user closes the program.\n                Do\n\n                    If Not myProcess.HasExited Then\n\n                        &#39; Refresh the current process property values.\n                        myProcess.Refresh()\n\n                        Console.WriteLine()\n\n                        &#39; Display current process statistics.\n\n                        Console.WriteLine(&quot;{0} -&quot;, myProcess.ToString())\n                        Console.WriteLine(&quot;-------------------------------------&quot;)\n\n                        Console.WriteLine(&quot;  physical memory usage: {0}&quot;, _\n                             myProcess.WorkingSet64)\n                        Console.WriteLine(&quot;  base priority: {0}&quot;, _\n                             myProcess.BasePriority)\n                        Console.WriteLine(&quot;  priority class: {0}&quot;, _\n                             myProcess.PriorityClass)\n                        Console.WriteLine(&quot;  user processor time: {0}&quot;, _\n                             myProcess.UserProcessorTime)\n                        Console.WriteLine(&quot;  privileged processor time: {0}&quot;, _\n                             myProcess.PrivilegedProcessorTime)\n                        Console.WriteLine(&quot;  total processor time: {0}&quot;, _\n                             myProcess.TotalProcessorTime)\n                        Console.WriteLine(&quot;  PagedSystemMemorySize64: {0}&quot;, _\n                            myProcess.PagedSystemMemorySize64)\n                        Console.WriteLine(&quot;  PagedMemorySize64: {0}&quot;, _\n                           myProcess.PagedMemorySize64)\n\n                        &#39; Update the values for the overall peak memory statistics.\n                        peakPagedMem = myProcess.PeakPagedMemorySize64\n                        peakVirtualMem = myProcess.PeakVirtualMemorySize64\n                        peakWorkingSet = myProcess.PeakWorkingSet64\n\n                        If myProcess.Responding Then\n                            Console.WriteLine(&quot;Status = Running&quot;)\n                        Else\n                            Console.WriteLine(&quot;Status = Not Responding&quot;)\n                        End If\n                    End If\n                Loop While Not myProcess.WaitForExit(1000)\n\n                Console.WriteLine()\n                Console.WriteLine(&quot;Process exit code: {0}&quot;, myProcess.ExitCode)\n\n                &#39; Display peak memory statistics for the process.\n                Console.WriteLine(&quot;Peak physical memory usage of the process: {0}&quot;, _\n                    peakWorkingSet)\n                Console.WriteLine(&quot;Peak paged memory usage of the process: {0}&quot;, _\n                    peakPagedMem)\n                Console.WriteLine(&quot;Peak virtual memory usage of the process: {0}&quot;, _\n                    peakVirtualMem)\n\n            Finally\n                If Not myProcess Is Nothing Then\n                    myProcess.Close()\n                End If\n            End Try\n        End Sub &#39;Main\n    End Class\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_WaitForExit\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_WaitForExit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WaitForExit()</div>        \r\n          </div>\r\n    \r\n            <p>Instructs the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component to wait indefinitely for the associated process to exit.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void WaitForExit ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.win32exception\" data-linktype=\"relative-path\">Win32Exception</a></div>\r\n                  </div>\r\n                  <p>The wait setting could not be accessed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.systemexception\" data-linktype=\"relative-path\">SystemException</a></div>\r\n                  </div>\r\n                  <p>No process <span class=\"xref\">stem.Diagnostics.Process.Id*</span> has been set, and a <span class=\"xref\">stem.Diagnostics.Process.Handle*</span> from which the <span class=\"xref\">stem.Diagnostics.Process.Id*</span> property can be determined does not exist.  </p>\n<p> -or-  </p>\n<p> There is no process associated with this <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> object.  </p>\n<p> -or-  </p>\n<p> You are attempting to call WaitForExit for a process that is running on a remote computer. This method is available only for processes that are running on the local computer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>WaitForExit makes the current thread wait until the associated process terminates.  It should be called after all other methods are called on the process. To avoid blocking the current thread, use the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Exited\" data-linktype=\"relative-path\">Exited</a> event.  </p>\n<p> This method instructs the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component to wait an infinite amount of time for the process and event handlers to exit. This can cause an application to stop responding. For example, if you call <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_CloseMainWindow_\" data-linktype=\"relative-path\">CloseMainWindow</a> for a process that has a user interface, the request to the operating system to terminate the associated process might not be handled if the process is written to never enter its message loop.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v35-long-md.md&quot; --> .NET Framework 3.5 <!--END INCLUDE --> and earlier versions, the WaitForExit overload waited for <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a> milliseconds (approximately 24 days), not indefinitely. Also, previous versions did not wait for the event handlers to exit if the full <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a> time was reached.  </p>\n</div>\n<p> This overload ensures that all processing has been completed, including the handling of asynchronous events for redirected standard output. You should use this overload after a call to the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_WaitForExit_System_Int32_\" data-linktype=\"relative-path\">WaitForExit(Int32)</a> overload when standard output has been redirected to asynchronous event handlers.  </p>\n<p> When an associated process exits (that is, when it is shut down by the operation system through a normal or abnormal termination), the system stores administrative information about the process and returns to the component that had called WaitForExit. The <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component can then access the information, which includes the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_ExitTime_\" data-linktype=\"relative-path\">ExitTime</a>, by using the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Handle_\" data-linktype=\"relative-path\">Handle</a> to the exited process.  </p>\n<p> Because the associated process has exited, the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Handle_\" data-linktype=\"relative-path\">Handle</a> property of the component no longer points to an existing process resource. Instead, the handle can be used only to access the operating system&#39;s information about the process resource. The system is aware of handles to exited processes that have not been released by <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> components, so it keeps the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_ExitTime_\" data-linktype=\"relative-path\">ExitTime</a> and <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Handle_\" data-linktype=\"relative-path\">Handle</a> information in memory until the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component specifically frees the resources. For this reason, any time you call <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Start_\" data-linktype=\"relative-path\">Start</a> for a <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> instance, call <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Close_\" data-linktype=\"relative-path\">Close</a> when the associated process has terminated and you no longer need any administrative information about it. <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Close_\" data-linktype=\"relative-path\">Close</a> frees the memory allocated to the exited process.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>See the Remarks section of the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardError_\" data-linktype=\"relative-path\">StandardError</a> property reference page.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_WaitForExit_System_Int32_\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_WaitForExit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WaitForExit(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Instructs the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component to wait the specified number of milliseconds for the associated process to exit.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool WaitForExit (int milliseconds);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>milliseconds</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The amount of time, in milliseconds, to wait for the associated process to exit. The maximum is the largest possible value of a 32-bit integer, which represents infinity to the operating system.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the associated process has exited; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.win32exception\" data-linktype=\"relative-path\">Win32Exception</a></div>\r\n                  </div>\r\n                  <p>The wait setting could not be accessed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.systemexception\" data-linktype=\"relative-path\">SystemException</a></div>\r\n                  </div>\r\n                  <p>No process <span class=\"xref\">stem.Diagnostics.Process.Id*</span> has been set, and a <span class=\"xref\">stem.Diagnostics.Process.Handle*</span> from which the <span class=\"xref\">stem.Diagnostics.Process.Id*</span> property can be determined does not exist.  </p>\n<p> -or-  </p>\n<p> There is no process associated with this <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> object.  </p>\n<p> -or-  </p>\n<p> You are attempting to call WaitForExit for a process that is running on a remote computer. This method is available only for processes that are running on the local computer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>WaitForExit makes the current thread wait until the associated process terminates. It should be called after all other methods are called on the process. To avoid blocking the current thread, use the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Exited\" data-linktype=\"relative-path\">Exited</a> event.  </p>\n<p> This method instructs the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component to wait a finite amount of time for the process to exit. If the associated process does not exit by the end of the interval because the request to terminate is denied, <code>false</code> is returned to the calling procedure. You can specify a negative number (<a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a>) for <code>milliseconds</code>, and WaitForExit will behave the same as the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_WaitForExit\" data-linktype=\"relative-path\">WaitForExit()</a> overload. If you pass 0 (zero) to the method, it returns <code>true</code> only if the process has already exited; otherwise, it immediately returns <code>false</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v35-long-md.md&quot; --> .NET Framework 3.5 <!--END INCLUDE --> and earlier versions, if <code>milliseconds</code> was -1, the WaitForExit overload waited for <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a> milliseconds (approximately 24 days), not indefinitely.  </p>\n</div>\n<p> When standard output has been redirected to asynchronous event handlers, it is possible that output processing will not have completed when this method returns. To ensure that asynchronous event handling has been completed, call the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_WaitForExit\" data-linktype=\"relative-path\">WaitForExit()</a> overload that takes no parameter after receiving a <code>true</code> from this overload. To help ensure that the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Exited\" data-linktype=\"relative-path\">Exited</a> event is handled correctly in Windows Forms applications, set the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_SynchronizingObject_\" data-linktype=\"relative-path\">SynchronizingObject</a> property.  </p>\n<p> When an associated process exits (is shut down by the operating system through a normal or abnormal termination), the system stores administrative information about the process and returns to the component that had called WaitForExit. The <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component can then access the information, which includes the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_ExitTime_\" data-linktype=\"relative-path\">ExitTime</a>, by using the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Handle_\" data-linktype=\"relative-path\">Handle</a> to the exited process.  </p>\n<p> Because the associated process has exited, the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Handle_\" data-linktype=\"relative-path\">Handle</a> property of the component no longer points to an existing process resource. Instead, the handle can be used only to access the operating system&#39;s information about the process resource. The system is aware of handles to exited processes that have not been released by <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> components, so it keeps the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_ExitTime_\" data-linktype=\"relative-path\">ExitTime</a> and <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Handle_\" data-linktype=\"relative-path\">Handle</a> information in memory until the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component specifically frees the resources. For this reason, any time you call <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Start_\" data-linktype=\"relative-path\">Start</a> for a <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> instance, call <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Close_\" data-linktype=\"relative-path\">Close</a> when the associated process has terminated and you no longer need any administrative information about it. <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Close_\" data-linktype=\"relative-path\">Close</a> frees the memory allocated to the exited process.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>See the code example for the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_ExitCode_\" data-linktype=\"relative-path\">ExitCode</a> property.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_WaitForInputIdle\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_WaitForInputIdle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WaitForInputIdle()</div>        \r\n          </div>\r\n    \r\n            <p>Causes the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component to wait indefinitely for the associated process to enter an idle state. This overload applies only to processes with a user interface and, therefore, a message loop.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool WaitForInputIdle ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the associated process has reached an idle state.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The process does not have a graphical interface.  </p>\n<p> -or-  </p>\n<p> An unknown error occurred. The process failed to enter an idle state.  </p>\n<p> -or-  </p>\n<p> The process has already exited.  </p>\n<p> -or-  </p>\n<p> No process is associated with this <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use WaitForInputIdle to force the processing of your application to wait until the message loop has returned to the idle state. When a process with a user interface is executing, its message loop executes every time a Windows message is sent to the process by the operating system. The process then returns to the message loop. A process is said to be in an idle state when it is waiting for messages inside of a message loop. This state is useful, for example, when your application needs to wait for a starting process to finish creating its main window before the application communicates with that window.  </p>\n<p> If a process does not have a message loop, WaitForInputIdle throws an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a>.  </p>\n<p> The WaitForInputIdle overload instructs the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component to wait indefinitely for the process to become idle in the message loop. This instruction can cause an application to stop responding. For example, if the process is written to always exit its message loop immediately, as in the code fragment <code>while(true)</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_WaitForInputIdle_System_Int32_\">\r\n    \r\n            <a id=\"System_Diagnostics_Process_WaitForInputIdle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WaitForInputIdle(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Causes the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component to wait the specified number of milliseconds for the associated process to enter an idle state. This overload applies only to processes with a user interface and, therefore, a message loop.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool WaitForInputIdle (int milliseconds);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>milliseconds</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value of 1 to <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> that specifies the amount of time, in milliseconds, to wait for the associated process to become idle. A value of 0 specifies an immediate return, and a value of -1 specifies an infinite wait.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the associated process has reached an idle state; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The process does not have a graphical interface.  </p>\n<p> -or-  </p>\n<p> An unknown error occurred. The process failed to enter an idle state.  </p>\n<p> -or-  </p>\n<p> The process has already exited.  </p>\n<p> -or-  </p>\n<p> No process is associated with this <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use WaitForInputIdle to force the processing of your application to wait until the message loop has returned to the idle state. When a process with a user interface is executing, its message loop executes every time a Windows message is sent to the process by the operating system. The process then returns to the message loop. A process is said to be in an idle state when it is waiting for messages inside of a message loop. This state is useful, for example, when your application needs to wait for a starting process to finish creating its main window before the application communicates with that window.  </p>\n<p> If a process does not have a message loop, WaitForInputIdle throws an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a>.  </p>\n<p> The WaitForInputIdle overload instructs the <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> component to wait a finite amount of time for the process to become idle in the message loop. If the associated process has not become idle by the end of the interval because the loop is still processing messages, <code>false</code> is returned to the calling procedure.  </p>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Events</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"events\">\r\n        <h2>Events\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_ErrorDataReceived\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ErrorDataReceived</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when an application writes to its redirected <span class=\"xref\">stem.Diagnostics.Process.StandardError*</span> stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Diagnostics.DataReceivedEventHandler ErrorDataReceived;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ErrorDataReceived event indicates that the associated process has written to its redirected <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardError_\" data-linktype=\"relative-path\">StandardError</a> stream.  </p>\n<p> The event only occurs during asynchronous read operations on <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardError_\" data-linktype=\"relative-path\">StandardError</a>. To start asynchronous read operations, you must redirect the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardError_\" data-linktype=\"relative-path\">StandardError</a> stream of a <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a>, add your event handler to the ErrorDataReceived event, and call <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_BeginErrorReadLine_\" data-linktype=\"relative-path\">BeginErrorReadLine</a>. Thereafter, the ErrorDataReceived event signals each time the process writes a line to the redirected <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardError_\" data-linktype=\"relative-path\">StandardError</a> stream, until the process exits or calls <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_CancelErrorRead_\" data-linktype=\"relative-path\">CancelErrorRead</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The application that is processing the asynchronous output should call the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_WaitForExit_\" data-linktype=\"relative-path\">WaitForExit</a> method to ensure that the output buffer has been flushed.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <code>net view</code> command to list the available network resources on a remote computer. The user supplies the target computer name as a command-line argument. The user can also supply a file name for error output. The example collects the output of the net command, waits for the process to finish, and then writes the output results to the console. If the user supplies the optional error file, the example writes errors to the file.  </p>\n<pre><code class=\"lang-cpp\" name=\"Process_AsyncStreams#2\">// Define the namespaces used by this sample.\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Text;\nusing namespace System::Globalization;\nusing namespace System::IO;\nusing namespace System::Diagnostics;\nusing namespace System::Threading;\nusing namespace System::ComponentModel;\n\nref class ProcessNetStreamRedirection\n{\nprivate:\n   // Define static variables shared by class methods.\n   static StreamWriter^ streamError = nullptr;\n   static String^ netErrorFile = &quot;&quot;;\n   static StringBuilder^ netOutput = nullptr;\n   static bool errorRedirect = false;\n   static bool errorsWritten = false;\n\npublic:\n   static void RedirectNetCommandStreams()\n   {\n      String^ netArguments;\n      Process^ netProcess;\n      \n      // Get the input computer name.\n      Console::WriteLine( &quot;Enter the computer name for the net view command:&quot; );\n      netArguments = Console::ReadLine()-&gt;ToUpper( CultureInfo::InvariantCulture );\n      if ( String::IsNullOrEmpty( netArguments ) )\n      {\n         // Default to the help command if there is not an input argument.\n         netArguments = &quot;/?&quot;;\n      }\n      \n      // Check if errors should be redirected to a file.\n      errorsWritten = false;\n      Console::WriteLine( &quot;Enter a fully qualified path to an error log file&quot; );\n      Console::WriteLine( &quot;  or just press Enter to write errors to console:&quot; );\n      netErrorFile = Console::ReadLine()-&gt;ToUpper( CultureInfo::InvariantCulture );\n      if (  !String::IsNullOrEmpty( netErrorFile ) )\n      {\n         errorRedirect = true;\n      }\n      \n      // Note that at this point, netArguments and netErrorFile\n      // are set with user input.  If the user did not specify\n      // an error file, then errorRedirect is set to false.\n\n      // Initialize the process and its StartInfo properties.\n      netProcess = gcnew Process;\n      netProcess-&gt;StartInfo-&gt;FileName = &quot;Net.exe&quot;;\n      \n      // Build the net command argument list.\n      netProcess-&gt;StartInfo-&gt;Arguments = String::Format( &quot;view {0}&quot;, netArguments );\n      \n      // Set UseShellExecute to false for redirection.\n      netProcess-&gt;StartInfo-&gt;UseShellExecute = false;\n      \n      // Redirect the standard output of the net command.  \n      // This stream is read asynchronously using an event handler.\n      netProcess-&gt;StartInfo-&gt;RedirectStandardOutput = true;\n      netProcess-&gt;OutputDataReceived += gcnew DataReceivedEventHandler( NetOutputDataHandler );\n      netOutput = gcnew StringBuilder;\n      if ( errorRedirect )\n      {\n         \n         // Redirect the error output of the net command. \n         netProcess-&gt;StartInfo-&gt;RedirectStandardError = true;\n         netProcess-&gt;ErrorDataReceived += gcnew DataReceivedEventHandler( NetErrorDataHandler );\n      }\n      else\n      {\n         \n         // Do not redirect the error output.\n         netProcess-&gt;StartInfo-&gt;RedirectStandardError = false;\n      }\n\n      Console::WriteLine( &quot;<br>Starting process: net {0}&quot;,\n         netProcess-&gt;StartInfo-&gt;Arguments );\n      if ( errorRedirect )\n      {\n         Console::WriteLine( &quot;Errors will be written to the file {0}&quot;, netErrorFile );\n      }\n      \n      // Start the process.\n      netProcess-&gt;Start();\n      \n      // Start the asynchronous read of the standard output stream.\n      netProcess-&gt;BeginOutputReadLine();\n\n      if ( errorRedirect )\n      {\n         // Start the asynchronous read of the standard\n         // error stream.\n         netProcess-&gt;BeginErrorReadLine();\n      }\n      \n      // Let the net command run, collecting the output.\n      netProcess-&gt;WaitForExit();\n\n      if ( streamError != nullptr )\n      {\n         // Close the error file.\n         streamError-&gt;Close();\n      }\n      else\n      {\n         // Set errorsWritten to false if the stream is not\n         // open.   Either there are no errors, or the error\n         // file could not be opened.\n         errorsWritten = false;\n      }\n\n      if ( netOutput-&gt;Length &gt; 0 )\n      {\n         // If the process wrote more than just\n         // white space, write the output to the console.\n         Console::WriteLine( &quot;<br>Public network shares from net view:<br>{0}<br>&quot;,\n            netOutput-&gt;ToString() );\n      }\n\n      if ( errorsWritten )\n      {\n         // Signal that the error file had something \n         // written to it.\n         array&lt;String^&gt;^errorOutput = File::ReadAllLines( netErrorFile );\n         if ( errorOutput-&gt;Length &gt; 0 )\n         {\n            Console::WriteLine( &quot;<br>The following error output was appended to {0}.&quot;,\n               netErrorFile );\n            System::Collections::IEnumerator^ myEnum = errorOutput-&gt;GetEnumerator();\n            while ( myEnum-&gt;MoveNext() )\n            {\n               String^ errLine = safe_cast&lt;String^&gt;(myEnum-&gt;Current);\n               Console::WriteLine( &quot;  {0}&quot;, errLine );\n            }\n         }\n         Console::WriteLine();\n      }\n\n      netProcess-&gt;Close();\n\n   }\n\nprivate:\n   static void NetOutputDataHandler( Object^ /*sendingProcess*/,\n      DataReceivedEventArgs^ outLine )\n   {\n      // Collect the net view command output.\n      if (  !String::IsNullOrEmpty( outLine-&gt;Data ) )\n      {\n         // Add the text to the collected output.\n         netOutput-&gt;AppendFormat(  &quot;<br>  {0}&quot;, outLine-&gt;Data );\n      }\n   }\n\n   static void NetErrorDataHandler( Object^ /*sendingProcess*/,\n      DataReceivedEventArgs^ errLine )\n   {\n      // Write the error text to the file if there is something to \n      // write and an error file has been specified.\n\n      if (  !String::IsNullOrEmpty( errLine-&gt;Data ) )\n      {\n         if (  !errorsWritten )\n         {\n            if ( streamError == nullptr )\n            {\n               // Open the file.\n               try\n               {\n                  streamError = gcnew StreamWriter( netErrorFile,true );\n               }\n               catch ( Exception^ e ) \n               {\n                  Console::WriteLine(  &quot;Could not open error file!&quot; );\n                  Console::WriteLine( e-&gt;Message-&gt;ToString() );\n               }\n            }\n\n            if ( streamError != nullptr )\n            {\n               // Write a header to the file if this is the first\n               // call to the error output handler.\n               streamError-&gt;WriteLine();\n               streamError-&gt;WriteLine( DateTime::Now.ToString() );\n               streamError-&gt;WriteLine(  &quot;Net View error output:&quot; );\n            }\n            errorsWritten = true;\n         }\n\n         if ( streamError != nullptr )\n         {\n            // Write redirected errors to the file.\n            streamError-&gt;WriteLine( errLine-&gt;Data );\n            streamError-&gt;Flush();\n         }\n      }\n   }\n};\n</code></pre><pre><code class=\"lang-cs\" name=\"Process_AsyncStreams#2\">// Define the namespaces used by this sample.\nusing System;\nusing System.Text;\nusing System.Globalization;\nusing System.IO;\nusing System.Diagnostics;\nusing System.Threading;\nusing System.ComponentModel;\n\n\nnamespace ProcessAsyncStreamSamples\n{\n\n    class ProcessNetStreamRedirection\n    {\n        // Define static variables shared by class methods.\n        private static StreamWriter streamError =null;\n        private static String netErrorFile = &quot;&quot;;\n        private static StringBuilder netOutput = null;\n        private static bool errorRedirect = false;\n        private static bool errorsWritten = false;\n\n        public static void RedirectNetCommandStreams()\n        {\n            String netArguments;\n            Process netProcess;\n\n            // Get the input computer name.\n            Console.WriteLine(&quot;Enter the computer name for the net view command:&quot;);\n            netArguments = Console.ReadLine().ToUpper(CultureInfo.InvariantCulture);\n            if (String.IsNullOrEmpty(netArguments))\n            {\n                // Default to the help command if there is not an input argument.\n                netArguments = &quot;/?&quot;;\n            }\n               \n            // Check if errors should be redirected to a file.\n            errorsWritten = false;\n            Console.WriteLine(&quot;Enter a fully qualified path to an error log file&quot;);\n            Console.WriteLine(&quot;  or just press Enter to write errors to console:&quot;);\n            netErrorFile = Console.ReadLine().ToUpper(CultureInfo.InvariantCulture);\n            if (!String.IsNullOrEmpty(netErrorFile))\n            {\n                errorRedirect = true;\n            }\n\n            // Note that at this point, netArguments and netErrorFile\n            // are set with user input.  If the user did not specify\n            // an error file, then errorRedirect is set to false.\n      \n            // Initialize the process and its StartInfo properties.\n            netProcess = new Process();\n            netProcess.StartInfo.FileName = &quot;Net.exe&quot;;\n            \n            // Build the net command argument list.\n            netProcess.StartInfo.Arguments = String.Format(&quot;view {0}&quot;, \n                netArguments);\n\n            // Set UseShellExecute to false for redirection.\n            netProcess.StartInfo.UseShellExecute = false;\n\n            // Redirect the standard output of the net command.  \n            // This stream is read asynchronously using an event handler.\n            netProcess.StartInfo.RedirectStandardOutput = true;\n            netProcess.OutputDataReceived += new DataReceivedEventHandler(NetOutputDataHandler);\n            netOutput = new StringBuilder();\n   \n            if (errorRedirect)\n            {\n                // Redirect the error output of the net command. \n                netProcess.StartInfo.RedirectStandardError = true;\n                netProcess.ErrorDataReceived += new DataReceivedEventHandler(NetErrorDataHandler);\n            }\n            else \n            {\n                // Do not redirect the error output.\n                netProcess.StartInfo.RedirectStandardError = false;\n            }\n\n            Console.WriteLine(&quot;<br>Starting process: net {0}&quot;, \n                netProcess.StartInfo.Arguments);\n            if (errorRedirect)\n            {\n                Console.WriteLine(&quot;Errors will be written to the file {0}&quot;, \n                    netErrorFile);\n            }\n\n            // Start the process.\n            netProcess.Start();\n\n            // Start the asynchronous read of the standard output stream.\n            netProcess.BeginOutputReadLine();\n\n            if (errorRedirect)\n            {\n                // Start the asynchronous read of the standard\n                // error stream.\n                netProcess.BeginErrorReadLine();\n            }\n\n            // Let the net command run, collecting the output.\n            netProcess.WaitForExit();\n\n            if (streamError != null)\n            {\n                // Close the error file.\n                streamError.Close();\n            }\n            else \n            {\n                // Set errorsWritten to false if the stream is not\n                // open.   Either there are no errors, or the error\n                // file could not be opened.\n                errorsWritten = false;\n            }\n\n            if (netOutput.Length &gt; 0)\n            {\n                // If the process wrote more than just\n                // white space, write the output to the console.\n                Console.WriteLine(&quot;<br>Public network shares from net view:<br>{0}<br>&quot;, \n                    netOutput);\n            }\n\n            if (errorsWritten)\n            {\n                // Signal that the error file had something \n                // written to it.\n                String [] errorOutput = File.ReadAllLines(netErrorFile);\n                if (errorOutput.Length &gt; 0)\n                {\n                    Console.WriteLine(&quot;<br>The following error output was appended to {0}.&quot;,\n                        netErrorFile);\n                    foreach (String errLine in errorOutput)\n                    {\n                        Console.WriteLine(&quot;  {0}&quot;, errLine);\n                    }\n                }\n                Console.WriteLine();\n            }\n\n            netProcess.Close();\n\n        }\n\n        private static void NetOutputDataHandler(object sendingProcess, \n            DataReceivedEventArgs outLine)\n        {\n            // Collect the net view command output.\n            if (!String.IsNullOrEmpty(outLine.Data))\n            {\n                // Add the text to the collected output.\n                netOutput.Append(Environment.NewLine + &quot;  &quot; + outLine.Data);\n            }\n        }\n\n        private static void NetErrorDataHandler(object sendingProcess, \n            DataReceivedEventArgs errLine)\n        {\n            // Write the error text to the file if there is something\n            // to write and an error file has been specified.\n\n            if (!String.IsNullOrEmpty(errLine.Data))\n            {\n                if (!errorsWritten)\n                {\n                    if (streamError == null)\n                    {\n                        // Open the file.\n                        try \n                        {\n                            streamError = new StreamWriter(netErrorFile, true);\n                        }\n                        catch (Exception e)\n                        {\n                            Console.WriteLine(&quot;Could not open error file!&quot;);\n                            Console.WriteLine(e.Message.ToString());\n                        }\n                    }\n\n                    if (streamError != null)\n                    {\n                        // Write a header to the file if this is the first\n                        // call to the error output handler.\n                        streamError.WriteLine();\n                        streamError.WriteLine(DateTime.Now.ToString());\n                        streamError.WriteLine(&quot;Net View error output:&quot;);\n                    }\n                    errorsWritten = true;\n                }\n\n                if (streamError != null)\n                {\n                    // Write redirected errors to the file.\n                    streamError.WriteLine(errLine.Data);\n                    streamError.Flush();\n                }\n            }\n        }\n    }\n} \n</code></pre><pre><code class=\"lang-vb\" name=\"Process_AsyncStreams#2\">&#39; Define the namespaces used by this sample.\nImports System\nImports System.Text\nImports System.Globalization\nImports System.IO\nImports System.Diagnostics\nImports System.Threading\nImports System.ComponentModel\nImports Microsoft.VisualBasic\n\n\nNamespace ProcessAsyncStreamSamples\n   \n   Class ProcessAsyncErrorRedirection\n      &#39; Define static variables shared by class methods.\n      Private Shared streamError As StreamWriter = Nothing\n      Private Shared netErrorFile As String = &quot;&quot;\n      Private Shared netOutput As StringBuilder = Nothing\n      Private Shared errorRedirect As Boolean = False\n      Private Shared errorsWritten As Boolean = False\n      \n      Public Shared Sub RedirectNetCommandStreams()\n         Dim netArguments As String\n         Dim netProcess As Process\n         \n         &#39; Get the input computer name.\n         Console.WriteLine(&quot;Enter the computer name for the net view command:&quot;)\n         netArguments = Console.ReadLine().ToUpper(CultureInfo.InvariantCulture)\n         If String.IsNullOrEmpty(netArguments) Then\n            &#39; Default to the help command if there is \n            &#39; not an input argument.\n            netArguments = &quot;/?&quot;\n         End If\n         \n         &#39; Check if errors should be redirected to a file.\n         errorsWritten = False\n         Console.WriteLine(&quot;Enter a fully qualified path to an error log file&quot;)\n         Console.WriteLine(&quot;  or just press Enter to write errors to console:&quot;)\n         netErrorFile = Console.ReadLine().ToUpper(CultureInfo.InvariantCulture)\n         If Not String.IsNullOrEmpty(netErrorFile) Then\n            errorRedirect = True\n         End If\n         \n         &#39; Note that at this point, netArguments and netErrorFile\n         &#39; are set with user input.  If the user did not specify\n         &#39; an error file, then errorRedirect is set to false.\n\n         &#39; Initialize the process and its StartInfo properties.\n         netProcess = New Process()\n         netProcess.StartInfo.FileName = &quot;Net.exe&quot;\n         \n         &#39; Build the net command argument list.\n         netProcess.StartInfo.Arguments = String.Format(&quot;view {0}&quot;, _\n                                                        netArguments)\n         \n         &#39; Set UseShellExecute to false for redirection.\n         netProcess.StartInfo.UseShellExecute = False\n         \n         &#39; Redirect the standard output of the net command.  \n         &#39; Read the stream asynchronously using an event handler.\n         netProcess.StartInfo.RedirectStandardOutput = True\n         AddHandler netProcess.OutputDataReceived, _\n                            AddressOf NetOutputDataHandler\n         netOutput = new StringBuilder()\n         \n         If errorRedirect Then\n            &#39; Redirect the error output of the net command. \n            netProcess.StartInfo.RedirectStandardError = True\n            AddHandler netProcess.ErrorDataReceived, _\n                            AddressOf NetErrorDataHandler\n         Else\n            &#39; Do not redirect the error output.\n            netProcess.StartInfo.RedirectStandardError = False\n         End If\n         \n         Console.WriteLine(ControlChars.Lf + &quot;Starting process: NET {0}&quot;, _\n                           netProcess.StartInfo.Arguments)\n         If errorRedirect Then\n            Console.WriteLine(&quot;Errors will be written to the file {0}&quot;, _\n                           netErrorFile)\n         End If\n         \n         &#39; Start the process.\n         netProcess.Start()\n         \n         &#39; Start the asynchronous read of the standard output stream.\n         netProcess.BeginOutputReadLine()\n         \n         If errorRedirect Then\n            &#39; Start the asynchronous read of the standard\n            &#39; error stream.\n            netProcess.BeginErrorReadLine()\n         End If\n         \n         &#39; Let the net command run, collecting the output.\n         netProcess.WaitForExit()\n      \n         If Not streamError Is Nothing Then\n             &#39; Close the error file.\n             streamError.Close()\n         Else \n             &#39; Set errorsWritten to false if the stream is not\n             &#39; open.   Either there are no errors, or the error\n             &#39; file could not be opened.\n             errorsWritten = False\n         End If\n   \n         If netOutput.Length &gt; 0 Then\n            &#39; If the process wrote more than just\n            &#39; white space, write the output to the console.\n            Console.WriteLine()\n            Console.WriteLine(&quot;Public network shares from net view:&quot;)\n            Console.WriteLine()\n            Console.WriteLine(netOutput)\n            Console.WriteLine()\n         End If\n         \n         If errorsWritten Then\n            &#39; Signal that the error file had something \n            &#39; written to it.\n            Dim errorOutput As String()\n            errorOutput = File.ReadAllLines(netErrorFile)\n            If errorOutput.Length &gt; 0 Then\n\n                Console.WriteLine(ControlChars.Lf + _\n                    &quot;The following error output was appended to {0}.&quot;, _\n                    netErrorFile)\n                Dim errLine as String\n                For Each errLine in errorOutput\n                    Console.WriteLine(&quot;  {0}&quot;, errLine)\n                Next\n          \n                Console.WriteLine()\n            End If\n         End If\n         \n         netProcess.Close()\n      End Sub \n      \n      \n      Private Shared Sub NetOutputDataHandler(sendingProcess As Object, _\n          outLine As DataReceivedEventArgs)\n\n         &#39; Collect the net view command output.\n         If Not String.IsNullOrEmpty(outLine.Data) Then\n            &#39; Add the text to the collected output.\n            netOutput.Append(Environment.NewLine + &quot;  &quot; + outLine.Data)\n         End If\n      End Sub \n       \n      \n      Private Shared Sub NetErrorDataHandler(sendingProcess As Object, _\n          errLine As DataReceivedEventArgs)\n\n         &#39; Write the error text to the file if there is something to\n         &#39; write and an error file has been specified.\n\n         If Not String.IsNullOrEmpty(errLine.Data) Then\n\n            If Not errorsWritten Then\n                If streamError Is Nothing Then\n                    &#39; Open the file.\n                    Try \n                        streamError = New StreamWriter(netErrorFile, true)\n                    Catch e As Exception\n                        Console.WriteLine(&quot;Could not open error file!&quot;)\n                        Console.WriteLine(e.Message.ToString())\n                    End Try\n                End If\n\n                If Not streamError Is Nothing Then\n\n                    &#39; Write a header to the file if this is the first\n                    &#39; call to the error output handler.\n                    streamError.WriteLine()\n                    streamError.WriteLine(DateTime.Now.ToString())\n                    streamError.WriteLine(&quot;Net View error output:&quot;)\n\n                End If\n\n                errorsWritten = True\n            End If\n                     \n            If Not streamError Is Nothing Then\n                  \n                &#39; Write redirected errors to the file.\n                streamError.WriteLine(errLine.Data)\n                streamError.Flush()\n             End If\n          End If\n      End Sub \n   End Class  \nEnd Namespace \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_Exited\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Exited</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when a process exits.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler Exited;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Exited event indicates that the associated process exited. This occurrence means either that the process terminated (aborted) or successfully closed. This event can occur only if the value of the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_EnableRaisingEvents_\" data-linktype=\"relative-path\">EnableRaisingEvents</a> property is <code>true</code>.  </p>\n<p> There are two ways of being notified when the associated process exits: synchronously and asynchronously. Synchronous notification means calling the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_WaitForExit_\" data-linktype=\"relative-path\">WaitForExit</a> method to block the current thread until the process exits. Asynchronous notification uses the Exited event, which allows the calling thread to continue execution in the meantime. In the latter case, <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_EnableRaisingEvents_\" data-linktype=\"relative-path\">EnableRaisingEvents</a> must be set to <code>true</code> for the calling application to receive the Exited event.  </p>\n<p> When the operating system shuts down a process, it notifies all other processes that have registered handlers for the Exited event. At this time, the handle of the process that just exited can be used to access some properties such as  <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_ExitTime_\" data-linktype=\"relative-path\">ExitTime</a> and <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_HasExited_\" data-linktype=\"relative-path\">HasExited</a> that the operating system maintains until it releases that handle completely.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Even if you have a handle to an exited process, you cannot call <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Start_\" data-linktype=\"relative-path\">Start</a> again to reconnect to the same process. Calling <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Start_\" data-linktype=\"relative-path\">Start</a> automatically releases the associated process and connects to a process with the same file but an entirely new <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Handle_\" data-linktype=\"relative-path\">Handle</a>.  </p>\n</div>\n<p> For more information about the use of the Exited event in Windows Forms applications, see the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_SynchronizingObject_\" data-linktype=\"relative-path\">SynchronizingObject</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a process that prints a file. It raises the Exited event when the process exits because the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_EnableRaisingEvents_\" data-linktype=\"relative-path\">EnableRaisingEvents</a> property was set when the process was created. The Exited event handler displays process information.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Diagnostics.Process.EnableExited#1\">Imports System\nImports System.Diagnostics\nImports System.Threading\n\nClass PrintProcessClass\n\n    Private WithEvents myProcess As New Process\n    Private elapsedTime As Integer\n    Private eventHandled As Boolean\n\n    Public Event Exited As EventHandler\n\n    &#39; Print a file with any known extension.\n    Sub PrintDoc(ByVal fileName As String)\n\n        elapsedTime = 0\n        eventHandled = False\n\n        Try\n            &#39; Start a process to print a file and raise an event when done.\n            myProcess.StartInfo.FileName = fileName\n            myProcess.StartInfo.Verb = &quot;Print&quot;\n            myProcess.StartInfo.CreateNoWindow = True\n            myProcess.EnableRaisingEvents = True\n            myProcess.Start()\n\n        Catch ex As Exception\n            Console.WriteLine(&quot;An error occurred trying to print &quot;&quot;{0}&quot;&quot;:&quot; &amp; _\n                vbCrLf &amp; ex.Message, fileName)\n            Return\n        End Try\n\n        &#39; Wait for Exited event, but not more than 30 seconds.\n        Const SLEEP_AMOUNT As Integer = 100\n        Do While Not eventHandled\n            elapsedTime += SLEEP_AMOUNT\n            If elapsedTime &gt; 30000 Then\n                Exit Do\n            End If\n            Thread.Sleep(SLEEP_AMOUNT)\n        Loop\n    End Sub\n\n    &#39; Handle Exited event and display process information.\n    Private Sub myProcess_Exited(ByVal sender As Object, _\n            ByVal e As System.EventArgs) Handles myProcess.Exited\n\n        eventHandled = True\n        Console.WriteLine(&quot;Exit time:    {0}&quot; &amp; vbCrLf &amp; _\n            &quot;Exit code:    {1}&quot; &amp; vbCrLf &amp; &quot;Elapsed time: {2}&quot;, _\n            myProcess.ExitTime, myProcess.ExitCode, elapsedTime)\n    End Sub\n\n    Shared Sub Main(ByVal args() As String)\n\n        &#39; Verify that an argument has been entered.\n        If args.Length &lt;= 0 Then\n            Console.WriteLine(&quot;Enter a file name.&quot;)\n            Return\n        End If\n\n        &#39; Create the process and print the document.\n        Dim myPrintProcess As New PrintProcessClass\n        myPrintProcess.PrintDoc(args(0))\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Diagnostics.Process.EnableExited#1\">using System;\nusing System.Diagnostics;\nusing System.Threading;\n\nclass PrintProcessClass\n{\n\n    private Process myProcess = new Process();\n    private int elapsedTime;\n    private bool eventHandled;\n\n    // Print a file with any known extension.\n    public void PrintDoc(string fileName)\n    {\n\n        elapsedTime = 0;\n        eventHandled = false;\n\n        try\n        {\n            // Start a process to print a file and raise an event when done.\n            myProcess.StartInfo.FileName = fileName;\n            myProcess.StartInfo.Verb = &quot;Print&quot;;\n            myProcess.StartInfo.CreateNoWindow = true;\n            myProcess.EnableRaisingEvents = true;\n            myProcess.Exited += new EventHandler(myProcess_Exited);\n            myProcess.Start();\n\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(&quot;An error occurred trying to print \\&quot;{0}\\&quot;:&quot; + &quot;<br>&quot; + ex.Message, fileName);\n            return;\n        }\n\n        // Wait for Exited event, but not more than 30 seconds.\n        const int SLEEP_AMOUNT = 100;\n        while (!eventHandled)\n        {\n            elapsedTime += SLEEP_AMOUNT;\n            if (elapsedTime &gt; 30000)\n            {\n                break;\n            }\n            Thread.Sleep(SLEEP_AMOUNT);\n        }\n    }\n\n    // Handle Exited event and display process information.\n    private void myProcess_Exited(object sender, System.EventArgs e)\n    {\n\n        eventHandled = true;\n        Console.WriteLine(&quot;Exit time:    {0}\\r<br>&quot; +\n            &quot;Exit code:    {1}\\r<br>Elapsed time: {2}&quot;, myProcess.ExitTime, myProcess.ExitCode, elapsedTime);\n    }\n\n    public static void Main(string[] args)\n    {\n\n        // Verify that an argument has been entered.\n        if (args.Length &lt;= 0)\n        {\n            Console.WriteLine(&quot;Enter a file name.&quot;);\n            return;\n        }\n\n        // Create the process and print the document.\n        PrintProcessClass myPrintProcess = new PrintProcessClass();\n        myPrintProcess.PrintDoc(args[0]);\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Process_OutputDataReceived\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OutputDataReceived</div>        \r\n          </div>\r\n    \r\n            <p>Occurs each time an application writes a line to its redirected <span class=\"xref\">stem.Diagnostics.Process.StandardOutput*</span> stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Diagnostics.DataReceivedEventHandler OutputDataReceived;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The OutputDataReceived event indicates that the associated <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a> has written a line, terminating with a newline character, to its redirected <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardOutput_\" data-linktype=\"relative-path\">StandardOutput</a> stream.  </p>\n<p> The event is enabled during asynchronous read operations on <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardOutput_\" data-linktype=\"relative-path\">StandardOutput</a>. To start asynchronous read operations, you must redirect the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardOutput_\" data-linktype=\"relative-path\">StandardOutput</a> stream of a <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a>, add your event handler to the OutputDataReceived event, and call <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_BeginOutputReadLine_\" data-linktype=\"relative-path\">BeginOutputReadLine</a>. Thereafter, the OutputDataReceived event signals each time the process writes a line to the redirected <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardOutput_\" data-linktype=\"relative-path\">StandardOutput</a> stream, until the process exits or calls <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_CancelOutputRead_\" data-linktype=\"relative-path\">CancelOutputRead</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The application that is processing the asynchronous output should call the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_WaitForExit_\" data-linktype=\"relative-path\">WaitForExit</a> method to ensure that the output buffer has been flushed.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates how to perform asynchronous read operations on the redirected <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardOutput_\" data-linktype=\"relative-path\">StandardOutput</a> stream of the <code>ipconfig</code> command.  </p>\n<p> The example creates an event delegate for the <code>OutputHandler</code> event handler and associates it with the OutputDataReceived event. The event handler receives text lines from the redirected <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardOutput_\" data-linktype=\"relative-path\">StandardOutput</a> stream, formats the text, and saves it in an output string thatâ€™s later shown in the exampleâ€™s console window.  </p>\n<pre><code class=\"lang-cpp\" name=\"Process_AsyncStreams#4\">using namespace System;\nusing namespace System::IO;\nusing namespace System::Diagnostics;\nusing namespace System::Text;\n\nref class StandardAsyncOutputExample\n{\nprivate:\n    static int lineCount = 0;\n    static StringBuilder^ output = nullptr;\n\npublic:\n    static void Run()\n    {\n        Process^ process = gcnew Process();\n        process-&gt;StartInfo-&gt;FileName = &quot;ipconfig.exe&quot;;\n        process-&gt;StartInfo-&gt;UseShellExecute = false;\n        process-&gt;StartInfo-&gt;RedirectStandardOutput = true;\n        output = gcnew StringBuilder();\n        process-&gt;OutputDataReceived += gcnew DataReceivedEventHandler(OutputHandler);\n        process-&gt;Start();\n\n        // Asynchronously read the standard output of the spawned process. \n        // This raises OutputDataReceived events for each line of output.\n        process-&gt;BeginOutputReadLine();\n        process-&gt;WaitForExit();\n\n        // Write the redirected output to this application&#39;s window.\n        Console::WriteLine(output);\n\n        process-&gt;WaitForExit();\n        process-&gt;Close();\n\n        Console::WriteLine(&quot;<br><br>Press any key to exit&quot;);\n        Console::ReadLine();\n    }\n\nprivate:\n    static void OutputHandler(Object^ sender, DataReceivedEventArgs^ e)\n    {\n        // Prepend line numbers to each line of the output.\n        if (!String::IsNullOrEmpty(e-&gt;Data))\n        {\n            lineCount++;\n            output-&gt;Append(&quot;<br>[&quot; + lineCount + &quot;]: &quot; + e-&gt;Data);\n        }\n    }\n};\n\nint main()\n{\n    StandardAsyncOutputExample::Run();\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Process_AsyncStreams#4\">using System;\nusing System.IO;\nusing System.Diagnostics;\nusing System.Text;\n\nclass StandardAsyncOutputExample\n{\n    private static int lineCount = 0;\n    private static StringBuilder output = new StringBuilder();\n\n    public static void Main()\n    {\n        Process process = new Process();\n        process.StartInfo.FileName = &quot;ipconfig.exe&quot;;\n        process.StartInfo.UseShellExecute = false;\n        process.StartInfo.RedirectStandardOutput = true;\n        process.OutputDataReceived += new DataReceivedEventHandler((sender, e) =&gt;\n        {\n            // Prepend line numbers to each line of the output.\n            if (!String.IsNullOrEmpty(e.Data))\n            {\n                lineCount++;\n                output.Append(&quot;<br>[&quot; + lineCount + &quot;]: &quot; + e.Data);\n            }\n        });\n\n        process.Start();\n\n        // Asynchronously read the standard output of the spawned process. \n        // This raises OutputDataReceived events for each line of output.\n        process.BeginOutputReadLine();\n        process.WaitForExit();\n\n        // Write the redirected output to this application&#39;s window.\n        Console.WriteLine(output);\n\n        process.WaitForExit();\n        process.Close();\n\n        Console.WriteLine(&quot;<br><br>Press any key to exit.&quot;);\n        Console.ReadLine();\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Process_AsyncStreams#4\">Imports System\nImports System.IO\nImports System.Diagnostics\nImports System.Text\n\nModule Module1\n    Dim lineCount As Integer = 0\n    Dim output As StringBuilder = New StringBuilder()\n\n    Sub Main()\n        Dim process As New Process()\n        process.StartInfo.FileName = &quot;ipconfig.exe&quot;\n        process.StartInfo.UseShellExecute = False\n        process.StartInfo.RedirectStandardOutput = True\n        AddHandler process.OutputDataReceived, AddressOf OutputHandler\n        process.Start()\n\n        &#39; Asynchronously read the standard output of the spawned process. \n        &#39; This raises OutputDataReceived events for each line of output.\n        process.BeginOutputReadLine()\n        process.WaitForExit()\n\n        Console.WriteLine(output)\n\n        process.WaitForExit()\n        process.Close()\n\n        Console.WriteLine(Environment.NewLine + Environment.NewLine + &quot;Press any key to exit.&quot;)\n        Console.ReadLine()\n    End Sub\n\n    Sub OutputHandler(sender As Object, e As DataReceivedEventArgs)\n        If Not String.IsNullOrEmpty(e.Data) Then\n            lineCount += 1\n\n            &#39; Add the text to the collected output.\n            output.Append(Environment.NewLine + &quot;[&quot; + lineCount.ToString() + &quot;]: &quot; + e.Data)\n        End If\n    End Sub\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Diagnostics.Process.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Diagnostics.Process.yml\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process..ctor\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.BasePriority\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.BeginErrorReadLine\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.BeginOutputReadLine\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.CancelErrorRead\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.CancelOutputRead\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.Close\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.CloseMainWindow\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.Dispose\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.EnableRaisingEvents\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.EnterDebugMode\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.ErrorDataReceived\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.add_ErrorDataReceived\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.remove_ErrorDataReceived\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.ExitCode\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.Exited\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.add_Exited\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.remove_Exited\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.ExitTime\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.GetCurrentProcess\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.GetProcessById\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.GetProcesses\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.GetProcessesByName\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.Handle\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.HandleCount\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.HasExited\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.Id\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.Kill\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.LeaveDebugMode\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.MachineName\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.MainModule\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.MainWindowHandle\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.MainWindowTitle\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.MaxWorkingSet\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.MinWorkingSet\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.Modules\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.NonpagedSystemMemorySize\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.NonpagedSystemMemorySize64\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.OnExited\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.OutputDataReceived\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.add_OutputDataReceived\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.remove_OutputDataReceived\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.PagedMemorySize\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.PagedMemorySize64\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.PagedSystemMemorySize\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.PagedSystemMemorySize64\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.PeakPagedMemorySize\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.PeakPagedMemorySize64\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.PeakVirtualMemorySize\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.PeakVirtualMemorySize64\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.PeakWorkingSet\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.PeakWorkingSet64\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.PriorityBoostEnabled\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.PriorityClass\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.PrivateMemorySize\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.PrivateMemorySize64\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.PrivilegedProcessorTime\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.ProcessName\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.ProcessorAffinity\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.Refresh\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.Responding\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.SafeHandle\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.SessionId\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.StandardError\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.StandardInput\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.StandardOutput\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.Start\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.StartInfo\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.StartTime\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.SynchronizingObject\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.Threads\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.ToString\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.TotalProcessorTime\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.UserProcessorTime\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.VirtualMemorySize\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.VirtualMemorySize64\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.WaitForExit\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.WaitForInputIdle\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.WorkingSet\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Process.WorkingSet64\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"9073303f-4c9d-7447-2ae0-20c3d483dc40\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Diagnostics\\Process.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides access to local and remote processes and enables you to start and stop local system processes.  \n To browse the .NET Framework source code for this type, see the Reference Source.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Diagnostics/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Diagnostics.Process\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Diagnostics.Process.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Diagnostics.Process.yml","open_to_public_contributors":true,"api_name":["System.Diagnostics.Process","System.Diagnostics.Process..ctor","System.Diagnostics.Process.BasePriority","System.Diagnostics.Process.BeginErrorReadLine","System.Diagnostics.Process.BeginOutputReadLine","System.Diagnostics.Process.CancelErrorRead","System.Diagnostics.Process.CancelOutputRead","System.Diagnostics.Process.Close","System.Diagnostics.Process.CloseMainWindow","System.Diagnostics.Process.Dispose","System.Diagnostics.Process.EnableRaisingEvents","System.Diagnostics.Process.EnterDebugMode","System.Diagnostics.Process.ErrorDataReceived","System.Diagnostics.Process.add_ErrorDataReceived","System.Diagnostics.Process.remove_ErrorDataReceived","System.Diagnostics.Process.ExitCode","System.Diagnostics.Process.Exited","System.Diagnostics.Process.add_Exited","System.Diagnostics.Process.remove_Exited","System.Diagnostics.Process.ExitTime","System.Diagnostics.Process.GetCurrentProcess","System.Diagnostics.Process.GetProcessById","System.Diagnostics.Process.GetProcesses","System.Diagnostics.Process.GetProcessesByName","System.Diagnostics.Process.Handle","System.Diagnostics.Process.HandleCount","System.Diagnostics.Process.HasExited","System.Diagnostics.Process.Id","System.Diagnostics.Process.Kill","System.Diagnostics.Process.LeaveDebugMode","System.Diagnostics.Process.MachineName","System.Diagnostics.Process.MainModule","System.Diagnostics.Process.MainWindowHandle","System.Diagnostics.Process.MainWindowTitle","System.Diagnostics.Process.MaxWorkingSet","System.Diagnostics.Process.MinWorkingSet","System.Diagnostics.Process.Modules","System.Diagnostics.Process.NonpagedSystemMemorySize","System.Diagnostics.Process.NonpagedSystemMemorySize64","System.Diagnostics.Process.OnExited","System.Diagnostics.Process.OutputDataReceived","System.Diagnostics.Process.add_OutputDataReceived","System.Diagnostics.Process.remove_OutputDataReceived","System.Diagnostics.Process.PagedMemorySize","System.Diagnostics.Process.PagedMemorySize64","System.Diagnostics.Process.PagedSystemMemorySize","System.Diagnostics.Process.PagedSystemMemorySize64","System.Diagnostics.Process.PeakPagedMemorySize","System.Diagnostics.Process.PeakPagedMemorySize64","System.Diagnostics.Process.PeakVirtualMemorySize","System.Diagnostics.Process.PeakVirtualMemorySize64","System.Diagnostics.Process.PeakWorkingSet","System.Diagnostics.Process.PeakWorkingSet64","System.Diagnostics.Process.PriorityBoostEnabled","System.Diagnostics.Process.PriorityClass","System.Diagnostics.Process.PrivateMemorySize","System.Diagnostics.Process.PrivateMemorySize64","System.Diagnostics.Process.PrivilegedProcessorTime","System.Diagnostics.Process.ProcessName","System.Diagnostics.Process.ProcessorAffinity","System.Diagnostics.Process.Refresh","System.Diagnostics.Process.Responding","System.Diagnostics.Process.SafeHandle","System.Diagnostics.Process.SessionId","System.Diagnostics.Process.StandardError","System.Diagnostics.Process.StandardInput","System.Diagnostics.Process.StandardOutput","System.Diagnostics.Process.Start","System.Diagnostics.Process.StartInfo","System.Diagnostics.Process.StartTime","System.Diagnostics.Process.SynchronizingObject","System.Diagnostics.Process.Threads","System.Diagnostics.Process.ToString","System.Diagnostics.Process.TotalProcessorTime","System.Diagnostics.Process.UserProcessorTime","System.Diagnostics.Process.VirtualMemorySize","System.Diagnostics.Process.VirtualMemorySize64","System.Diagnostics.Process.WaitForExit","System.Diagnostics.Process.WaitForInputIdle","System.Diagnostics.Process.WorkingSet","System.Diagnostics.Process.WorkingSet64"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Diagnostics.Process","System::Diagnostics::Process","System.Diagnostics.Process.#ctor","System::Diagnostics::Process::#ctor","System.Diagnostics.Process.BasePriority","System::Diagnostics::Process::BasePriority","System.Diagnostics.Process.BeginErrorReadLine","System::Diagnostics::Process::BeginErrorReadLine","System.Diagnostics.Process.BeginOutputReadLine","System::Diagnostics::Process::BeginOutputReadLine","System.Diagnostics.Process.CancelErrorRead","System::Diagnostics::Process::CancelErrorRead","System.Diagnostics.Process.CancelOutputRead","System::Diagnostics::Process::CancelOutputRead","System.Diagnostics.Process.Close","System::Diagnostics::Process::Close","System.Diagnostics.Process.CloseMainWindow","System::Diagnostics::Process::CloseMainWindow","System.Diagnostics.Process.Dispose","System::Diagnostics::Process::Dispose","System.Diagnostics.Process.EnableRaisingEvents","System::Diagnostics::Process::EnableRaisingEvents","System.Diagnostics.Process.EnterDebugMode","System::Diagnostics::Process::EnterDebugMode","System.Diagnostics.Process.ErrorDataReceived","System::Diagnostics::Process::ErrorDataReceived","System.Diagnostics.Process.ExitCode","System::Diagnostics::Process::ExitCode","System.Diagnostics.Process.Exited","System::Diagnostics::Process::Exited","System.Diagnostics.Process.ExitTime","System::Diagnostics::Process::ExitTime","System.Diagnostics.Process.GetCurrentProcess","System::Diagnostics::Process::GetCurrentProcess","System.Diagnostics.Process.GetProcessById","System::Diagnostics::Process::GetProcessById","System.Diagnostics.Process.GetProcesses","System::Diagnostics::Process::GetProcesses","System.Diagnostics.Process.GetProcessesByName","System::Diagnostics::Process::GetProcessesByName","System.Diagnostics.Process.Handle","System::Diagnostics::Process::Handle","System.Diagnostics.Process.HandleCount","System::Diagnostics::Process::HandleCount","System.Diagnostics.Process.HasExited","System::Diagnostics::Process::HasExited","System.Diagnostics.Process.Id","System::Diagnostics::Process::Id","System.Diagnostics.Process.Kill","System::Diagnostics::Process::Kill","System.Diagnostics.Process.LeaveDebugMode","System::Diagnostics::Process::LeaveDebugMode","System.Diagnostics.Process.MachineName","System::Diagnostics::Process::MachineName","System.Diagnostics.Process.MainModule","System::Diagnostics::Process::MainModule","System.Diagnostics.Process.MainWindowHandle","System::Diagnostics::Process::MainWindowHandle","System.Diagnostics.Process.MainWindowTitle","System::Diagnostics::Process::MainWindowTitle","System.Diagnostics.Process.MaxWorkingSet","System::Diagnostics::Process::MaxWorkingSet","System.Diagnostics.Process.MinWorkingSet","System::Diagnostics::Process::MinWorkingSet","System.Diagnostics.Process.Modules","System::Diagnostics::Process::Modules","System.Diagnostics.Process.NonpagedSystemMemorySize","System::Diagnostics::Process::NonpagedSystemMemorySize","System.Diagnostics.Process.NonpagedSystemMemorySize64","System::Diagnostics::Process::NonpagedSystemMemorySize64","System.Diagnostics.Process.OnExited","System::Diagnostics::Process::OnExited","System.Diagnostics.Process.OutputDataReceived","System::Diagnostics::Process::OutputDataReceived","System.Diagnostics.Process.PagedMemorySize","System::Diagnostics::Process::PagedMemorySize","System.Diagnostics.Process.PagedMemorySize64","System::Diagnostics::Process::PagedMemorySize64","System.Diagnostics.Process.PagedSystemMemorySize","System::Diagnostics::Process::PagedSystemMemorySize","System.Diagnostics.Process.PagedSystemMemorySize64","System::Diagnostics::Process::PagedSystemMemorySize64","System.Diagnostics.Process.PeakPagedMemorySize","System::Diagnostics::Process::PeakPagedMemorySize","System.Diagnostics.Process.PeakPagedMemorySize64","System::Diagnostics::Process::PeakPagedMemorySize64","System.Diagnostics.Process.PeakVirtualMemorySize","System::Diagnostics::Process::PeakVirtualMemorySize","System.Diagnostics.Process.PeakVirtualMemorySize64","System::Diagnostics::Process::PeakVirtualMemorySize64","System.Diagnostics.Process.PeakWorkingSet","System::Diagnostics::Process::PeakWorkingSet","System.Diagnostics.Process.PeakWorkingSet64","System::Diagnostics::Process::PeakWorkingSet64","System.Diagnostics.Process.PriorityBoostEnabled","System::Diagnostics::Process::PriorityBoostEnabled","System.Diagnostics.Process.PriorityClass","System::Diagnostics::Process::PriorityClass","System.Diagnostics.Process.PrivateMemorySize","System::Diagnostics::Process::PrivateMemorySize","System.Diagnostics.Process.PrivateMemorySize64","System::Diagnostics::Process::PrivateMemorySize64","System.Diagnostics.Process.PrivilegedProcessorTime","System::Diagnostics::Process::PrivilegedProcessorTime","System.Diagnostics.Process.ProcessName","System::Diagnostics::Process::ProcessName","System.Diagnostics.Process.ProcessorAffinity","System::Diagnostics::Process::ProcessorAffinity","System.Diagnostics.Process.Refresh","System::Diagnostics::Process::Refresh","System.Diagnostics.Process.Responding","System::Diagnostics::Process::Responding","System.Diagnostics.Process.SafeHandle","System::Diagnostics::Process::SafeHandle","System.Diagnostics.Process.SessionId","System::Diagnostics::Process::SessionId","System.Diagnostics.Process.StandardError","System::Diagnostics::Process::StandardError","System.Diagnostics.Process.StandardInput","System::Diagnostics::Process::StandardInput","System.Diagnostics.Process.StandardOutput","System::Diagnostics::Process::StandardOutput","System.Diagnostics.Process.Start","System::Diagnostics::Process::Start","System.Diagnostics.Process.StartInfo","System::Diagnostics::Process::StartInfo","System.Diagnostics.Process.StartTime","System::Diagnostics::Process::StartTime","System.Diagnostics.Process.SynchronizingObject","System::Diagnostics::Process::SynchronizingObject","System.Diagnostics.Process.Threads","System::Diagnostics::Process::Threads","System.Diagnostics.Process.ToString","System::Diagnostics::Process::ToString","System.Diagnostics.Process.TotalProcessorTime","System::Diagnostics::Process::TotalProcessorTime","System.Diagnostics.Process.UserProcessorTime","System::Diagnostics::Process::UserProcessorTime","System.Diagnostics.Process.VirtualMemorySize","System::Diagnostics::Process::VirtualMemorySize","System.Diagnostics.Process.VirtualMemorySize64","System::Diagnostics::Process::VirtualMemorySize64","System.Diagnostics.Process.WaitForExit","System::Diagnostics::Process::WaitForExit","System.Diagnostics.Process.WaitForInputIdle","System::Diagnostics::Process::WaitForInputIdle","System.Diagnostics.Process.WorkingSet","System::Diagnostics::Process::WorkingSet","System.Diagnostics.Process.WorkingSet64","System::Diagnostics::Process::WorkingSet64"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"9073303f-4c9d-7447-2ae0-20c3d483dc40","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Diagnostics\\Process.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Diagnostics/Process.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Process class | Microsoft Docs","_op_ogTitle":"Process class","description":"Provides access to local and remote processes and enables you to start and stop local system processes.  \n To browse the .NET Framework source code for this type, see the Reference Source.\n","toc_asset_id":"_splitted/System.Diagnostics/toc.json","toc_rel":"_splitted/System.Diagnostics/toc.json","source_url":"","ms.assetid":"System.Diagnostics.Process","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.diagnostics.process","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.diagnostics.process","fileRelativePath":"System.Diagnostics.Process.html"},"themesRelativePathToOutputRoot":"_themes/"}