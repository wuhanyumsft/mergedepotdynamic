{"content":"    \r\n    <h1 id=\"System_UnhandledExceptionEventArgs\">\r\n      <span class=\"lang-csharp\">UnhandledExceptionEventArgs</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides data for the event that is raised when there is an exception that is not handled in any application domain.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic class UnhandledExceptionEventArgs : EventArgs</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">System.EventArgs</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">UnhandledExceptionEventArgs</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.eventargs#System_EventArgs_Empty\" data-linktype=\"relative-path\">Empty</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>UnhandledExceptionEventArgs provides access to the exception object and a flag indicating whether the common language runtime is terminating. The UnhandledExceptionEventArgs is one of the parameters passed into <a class=\"xref\" href=\"system.unhandledexceptioneventhandler\" data-linktype=\"relative-path\">UnhandledExceptionEventHandler</a> for the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_UnhandledException\" data-linktype=\"relative-path\">System.AppDomain.UnhandledException</a> event.  </p>\n<p> For more information about event handler delegates, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Events</a>.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_UnhandledExceptionEventArgs__ctor_System_Object_System_Boolean_\" data-linktype=\"self-bookmark\">UnhandledExceptionEventArgs(Object,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.unhandledexceptioneventargs\" data-linktype=\"relative-path\">UnhandledExceptionEventArgs</a> class with the exception object and a common language runtime termination flag.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_UnhandledExceptionEventArgs_ExceptionObject\" data-linktype=\"self-bookmark\">ExceptionObject</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the unhandled exception object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_UnhandledExceptionEventArgs_IsTerminating\" data-linktype=\"self-bookmark\">IsTerminating</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether the common language runtime is terminating.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_UnhandledExceptionEventArgs__ctor_System_Object_System_Boolean_\">\r\n    \r\n            <a id=\"System_UnhandledExceptionEventArgs__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UnhandledExceptionEventArgs(Object,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.unhandledexceptioneventargs\" data-linktype=\"relative-path\">UnhandledExceptionEventArgs</a> class with the exception object and a common language runtime termination flag.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public UnhandledExceptionEventArgs (object exception, bool isTerminating);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>exception</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The exception that is not handled.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>isTerminating</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> if the runtime is terminating; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_UnhandledExceptionEventArgs_ExceptionObject\">\r\n    \r\n            <a id=\"System_UnhandledExceptionEventArgs_ExceptionObject_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExceptionObject</div>        \r\n          </div>\r\n    \r\n            <p>Gets the unhandled exception object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object ExceptionObject { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>The unhandled exception object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property returns an object of type <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> rather than one derived from <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a>. Although the Common Language Specification requires that all exception types derive from <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a>, it is possible for methods to throw exceptions with objects not derived from <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a>. You can do the following to work with this exception:  </p>\n<ul>\n<li><p>Apply the  <a class=\"xref\" href=\"system.runtime.compilerservices.runtimecompatibilityattribute\" data-linktype=\"relative-path\">RuntimeCompatibilityAttribute</a> attribute with a <a class=\"xref\" href=\"system.runtime.compilerservices.runtimecompatibilityattribute#System_Runtime_CompilerServices_RuntimeCompatibilityAttribute_WrapNonExceptionThrows_\" data-linktype=\"relative-path\">WrapNonExceptionThrows</a> value of <code>true</code> to the assembly that contains the event handler. This wraps all exceptions not derived from the <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> class in a <a class=\"xref\" href=\"system.runtime.compilerservices.runtimewrappedexception\" data-linktype=\"relative-path\">RuntimeWrappedException</a> object. You can then safely cast (in C#) or convert (in Visual Basic) the object returned by this property to an <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> object, and retrieve the original exception object from the <a class=\"xref\" href=\"system.runtime.compilerservices.runtimewrappedexception#System_Runtime_CompilerServices_RuntimeWrappedException_WrappedException_\" data-linktype=\"relative-path\">WrappedException</a> property. Note that some compilers, such as the C# and Visual Basic compilers, automatically apply this attribute.  </p>\n</li>\n<li><p>Cast the object returned by this property to an <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> object.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_UnhandledException\" data-linktype=\"relative-path\">UnhandledException</a> event. It defines an event handler, <code>MyHandler</code>, that is invoked whenever an unhandled exception is thrown in the default application domain. It then throws two exceptions. The first is handled by a <strong>try/catch</strong> block. The second is unhandled and invokes the <code>MyHandle</code> routine before the application terminates.  </p>\n<pre><code class=\"lang-cs\" name=\"AppDomain_UnhandledException#1\">using System;\nusing System.Security.Permissions;\n\npublic class Example \n{\n   [SecurityPermission(SecurityAction.Demand, Flags=SecurityPermissionFlag.ControlAppDomain)]\n   public static void Main()\n   {\n      AppDomain currentDomain = AppDomain.CurrentDomain;\n      currentDomain.UnhandledException += new UnhandledExceptionEventHandler(MyHandler);\n      \n      try {\n         throw new Exception(&quot;1&quot;);\n      } catch (Exception e) {\n         Console.WriteLine(&quot;Catch clause caught : {0} <br>&quot;, e.Message);\n      }\n\n      throw new Exception(&quot;2&quot;);\n   }\n   \n   static void MyHandler(object sender, UnhandledExceptionEventArgs args) \n   {\n      Exception e = (Exception) args.ExceptionObject;\n      Console.WriteLine(&quot;MyHandler caught : &quot; + e.Message);\n      Console.WriteLine(&quot;Runtime terminating: {0}&quot;, args.IsTerminating);\n   }\n}\n// The example displays the following output:\n//       Catch clause caught : 1\n//       \n//       MyHandler caught : 2\n//       Runtime terminating: True\n//       \n//       Unhandled Exception: System.Exception: 2\n//          at Example.Main()  \n</code></pre><pre><code class=\"lang-vb\" name=\"AppDomain_UnhandledException#1\">Module Example\n   Sub Main()\n      Dim currentDomain As AppDomain = AppDomain.CurrentDomain\n      AddHandler currentDomain.UnhandledException, AddressOf MyHandler\n      \n      Try\n         Throw New Exception(&quot;1&quot;)\n      Catch e As Exception\n         Console.WriteLine(&quot;Catch clause caught : &quot; + e.Message)\n         Console.WriteLine()\n      End Try\n      \n      Throw New Exception(&quot;2&quot;)\n   End Sub\n   \n   Sub MyHandler(sender As Object, args As UnhandledExceptionEventArgs)\n      Dim e As Exception = DirectCast(args.ExceptionObject, Exception)\n      Console.WriteLine(&quot;MyHandler caught : &quot; + e.Message)\n      Console.WriteLine(&quot;Runtime terminating: {0}&quot;, args.IsTerminating)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Catch clause caught : 1\n&#39;       \n&#39;       MyHandler caught : 2\n&#39;       Runtime terminating: True\n&#39;       \n&#39;       Unhandled Exception: System.Exception: 2\n&#39;          at Example.Main()\n</code></pre><pre><code class=\"lang-cpp\" name=\"AppDomain_UnhandledException#1\">// The example should be compiled with the /clr:pure compiler option.\nusing namespace System;\nusing namespace System::Security::Permissions;\n\npublic ref class Example\n{\n\n\nprivate:\n   static void MyHandler(Object^ sender, UnhandledExceptionEventArgs^ args)\n   {\n      Exception^ e = dynamic_cast&lt;Exception^&gt;(args-&gt;ExceptionObject);\n      Console::WriteLine( &quot;MyHandler caught : {0}&quot;, e-&gt;Message );\n      Console::WriteLine(&quot;Runtime terminating: {0}&quot;, args-&gt;IsTerminating);\n   }\n   \npublic: \n   [SecurityPermissionAttribute( SecurityAction::Demand, ControlAppDomain = true )]\n   static void Main()\n   {\n      AppDomain^ currentDomain = AppDomain::CurrentDomain;\n      currentDomain-&gt;UnhandledException += gcnew UnhandledExceptionEventHandler(Example::MyHandler);\n      try\n      {\n         throw gcnew Exception(&quot;1&quot;);\n      }\n      catch (Exception^ e) \n      {\n         Console::WriteLine( &quot;Catch clause caught : {0}<br>&quot;, e-&gt;Message );\n      }\n\n      throw gcnew Exception(&quot;2&quot;);\n   }\n};\n\nvoid main()\n{\n   Example::Main();\n}   \n// The example displays the following output:\n//       Catch clause caught : 1\n//       \n//       MyHandler caught : 2\n//       Runtime terminating: True\n//       \n//       Unhandled Exception: System.Exception: 2\n//          at Example.Main()\n//          at mainCRTStartup(String[] arguments)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_UnhandledExceptionEventArgs_IsTerminating\">\r\n    \r\n            <a id=\"System_UnhandledExceptionEventArgs_IsTerminating_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsTerminating</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether the common language runtime is terminating.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsTerminating { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the runtime is terminating; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Beginning with the .NET Framework version 2.0, this property returns <code>true</code> for most unhandled exceptions, unless an application compatibility flag is used to revert to the behavior of versions 1.0 and 1.1. The reason is that most unhandled exceptions in threads, including thread pool threads, are allowed to proceed naturally, which normally results in termination of the application. For more information, including a list of cases in which the runtime does not terminate, see <a href=\"../Topic/Exceptions%20in%20Managed%20Threads.md\" data-linktype=\"relative-path\">Exceptions in Managed Threads</a>.  </p>\n<h2 id=\"version-information\">Version Information</h2>\n<p> The following applies to the .NET Framework versions 1.0 and 1.1: This property returns <code>true</code> when an exception is received in, but not handled by, an application&#39;s main thread. This property also returns <code>true</code> if an unmanaged thread is executing managed code and receives an unhandled exception. Finally, this property returns <code>false</code> for thread pool threads and managed threads created by an application, because versions 1.0 and 1.1 catch unhandled exceptions in such threads and ignore them.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.UnhandledExceptionEventArgs.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.UnhandledExceptionEventArgs.yml\">\r\n<meta name=\"APIName\" content=\"System.UnhandledExceptionEventArgs\">\r\n<meta name=\"APIName\" content=\"System.UnhandledExceptionEventArgs..ctor\">\r\n<meta name=\"APIName\" content=\"System.UnhandledExceptionEventArgs.ExceptionObject\">\r\n<meta name=\"APIName\" content=\"System.UnhandledExceptionEventArgs.IsTerminating\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"0087d640-e0fe-e30a-418b-083a89ffa5e4\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides data for the event that is raised when there is an exception that is not handled in any application domain.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.UnhandledExceptionEventArgs\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.UnhandledExceptionEventArgs.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.UnhandledExceptionEventArgs.yml","open_to_public_contributors":true,"api_name":["System.UnhandledExceptionEventArgs","System.UnhandledExceptionEventArgs..ctor","System.UnhandledExceptionEventArgs.ExceptionObject","System.UnhandledExceptionEventArgs.IsTerminating"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.UnhandledExceptionEventArgs","System::UnhandledExceptionEventArgs","System.UnhandledExceptionEventArgs.#ctor","System::UnhandledExceptionEventArgs::#ctor","System.UnhandledExceptionEventArgs.ExceptionObject","System::UnhandledExceptionEventArgs::ExceptionObject","System.UnhandledExceptionEventArgs.IsTerminating","System::UnhandledExceptionEventArgs::IsTerminating"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"0087d640-e0fe-e30a-418b-083a89ffa5e4","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/UnhandledExceptionEventArgs.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"UnhandledExceptionEventArgs class | Microsoft Docs","_op_ogTitle":"UnhandledExceptionEventArgs class","description":"Provides data for the event that is raised when there is an exception that is not handled in any application domain.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.UnhandledExceptionEventArgs","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.unhandledexceptioneventargs","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.unhandledexceptioneventargs","fileRelativePath":"System.UnhandledExceptionEventArgs.html"},"themesRelativePathToOutputRoot":"_themes/"}