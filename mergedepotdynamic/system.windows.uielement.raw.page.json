{"content":"    \r\n    <h1 id=\"System_Windows_UIElement\">\r\n      <span class=\"lang-csharp\">UIElement</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>UIElement is a base class for WPF core level implementations building on Windows Presentation Foundation (WPF) elements and basic presentation characteristics.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Windows.Markup.UidProperty(&quot;Uid&quot;)]\npublic class UIElement : System.Windows.Media.Visual, System.Windows.IInputElement, System.Windows.Media.Animation.IAnimatable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.threading.dispatcherobject\" data-linktype=\"relative-path\">DispatcherObject</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.dependencyobject\" data-linktype=\"relative-path\">DependencyObject</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l3\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.visual\" data-linktype=\"relative-path\">System.Windows.Media.Visual</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l4\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">UIElement</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_ClearValue_System_Windows_DependencyProperty_\" data-linktype=\"relative-path\">ClearValue(DependencyProperty)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_ClearValue_System_Windows_DependencyPropertyKey_\" data-linktype=\"relative-path\">ClearValue(DependencyPropertyKey)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_CoerceValue_System_Windows_DependencyProperty_\" data-linktype=\"relative-path\">CoerceValue(DependencyProperty)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_DependencyObjectType\" data-linktype=\"relative-path\">DependencyObjectType</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_GetLocalValueEnumerator\" data-linktype=\"relative-path\">GetLocalValueEnumerator()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_GetValue_System_Windows_DependencyProperty_\" data-linktype=\"relative-path\">GetValue(DependencyProperty)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_InvalidateProperty_System_Windows_DependencyProperty_\" data-linktype=\"relative-path\">InvalidateProperty(DependencyProperty)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_IsSealed\" data-linktype=\"relative-path\">IsSealed</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_OnPropertyChanged_System_Windows_DependencyPropertyChangedEventArgs_\" data-linktype=\"relative-path\">OnPropertyChanged(DependencyPropertyChangedEventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_ReadLocalValue_System_Windows_DependencyProperty_\" data-linktype=\"relative-path\">ReadLocalValue(DependencyProperty)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_SetCurrentValue_System_Windows_DependencyProperty_System_Object_\" data-linktype=\"relative-path\">SetCurrentValue(DependencyProperty,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_SetValue_System_Windows_DependencyProperty_System_Object_\" data-linktype=\"relative-path\">SetValue(DependencyProperty,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_SetValue_System_Windows_DependencyPropertyKey_System_Object_\" data-linktype=\"relative-path\">SetValue(DependencyPropertyKey,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_ShouldSerializeProperty_System_Windows_DependencyProperty_\" data-linktype=\"relative-path\">ShouldSerializeProperty(DependencyProperty)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.visual#System_Windows_Media_Visual_AddVisualChild_System_Windows_Media_Visual_\" data-linktype=\"relative-path\">AddVisualChild(Visual)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.visual#System_Windows_Media_Visual_FindCommonVisualAncestor_System_Windows_DependencyObject_\" data-linktype=\"relative-path\">FindCommonVisualAncestor(DependencyObject)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.visual#System_Windows_Media_Visual_GetVisualChild_System_Int32_\" data-linktype=\"relative-path\">GetVisualChild(Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.visual#System_Windows_Media_Visual_IsAncestorOf_System_Windows_DependencyObject_\" data-linktype=\"relative-path\">IsAncestorOf(DependencyObject)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.visual#System_Windows_Media_Visual_IsDescendantOf_System_Windows_DependencyObject_\" data-linktype=\"relative-path\">IsDescendantOf(DependencyObject)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.visual#System_Windows_Media_Visual_OnDpiChanged_System_Windows_DpiScale_System_Windows_DpiScale_\" data-linktype=\"relative-path\">OnDpiChanged(DpiScale,DpiScale)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.visual#System_Windows_Media_Visual_OnVisualChildrenChanged_System_Windows_DependencyObject_System_Windows_DependencyObject_\" data-linktype=\"relative-path\">OnVisualChildrenChanged(DependencyObject,DependencyObject)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.visual#System_Windows_Media_Visual_PointFromScreen_System_Windows_Point_\" data-linktype=\"relative-path\">PointFromScreen(Point)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.visual#System_Windows_Media_Visual_PointToScreen_System_Windows_Point_\" data-linktype=\"relative-path\">PointToScreen(Point)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.visual#System_Windows_Media_Visual_RemoveVisualChild_System_Windows_Media_Visual_\" data-linktype=\"relative-path\">RemoveVisualChild(Visual)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.visual#System_Windows_Media_Visual_TransformToAncestor_System_Windows_Media_Media3D_Visual3D_\" data-linktype=\"relative-path\">TransformToAncestor(Visual3D)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.visual#System_Windows_Media_Visual_TransformToAncestor_System_Windows_Media_Visual_\" data-linktype=\"relative-path\">TransformToAncestor(Visual)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.visual#System_Windows_Media_Visual_TransformToDescendant_System_Windows_Media_Visual_\" data-linktype=\"relative-path\">TransformToDescendant(Visual)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.visual#System_Windows_Media_Visual_TransformToVisual_System_Windows_Media_Visual_\" data-linktype=\"relative-path\">TransformToVisual(Visual)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.visual#System_Windows_Media_Visual_VisualBitmapEffect\" data-linktype=\"relative-path\">VisualBitmapEffect</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.visual#System_Windows_Media_Visual_VisualBitmapEffectInput\" data-linktype=\"relative-path\">VisualBitmapEffectInput</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.visual#System_Windows_Media_Visual_VisualBitmapScalingMode\" data-linktype=\"relative-path\">VisualBitmapScalingMode</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.visual#System_Windows_Media_Visual_VisualCacheMode\" data-linktype=\"relative-path\">VisualCacheMode</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.visual#System_Windows_Media_Visual_VisualChildrenCount\" data-linktype=\"relative-path\">VisualChildrenCount</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.visual#System_Windows_Media_Visual_VisualClearTypeHint\" data-linktype=\"relative-path\">VisualClearTypeHint</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.visual#System_Windows_Media_Visual_VisualClip\" data-linktype=\"relative-path\">VisualClip</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.visual#System_Windows_Media_Visual_VisualEdgeMode\" data-linktype=\"relative-path\">VisualEdgeMode</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.visual#System_Windows_Media_Visual_VisualEffect\" data-linktype=\"relative-path\">VisualEffect</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.visual#System_Windows_Media_Visual_VisualOffset\" data-linktype=\"relative-path\">VisualOffset</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.visual#System_Windows_Media_Visual_VisualOpacity\" data-linktype=\"relative-path\">VisualOpacity</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.visual#System_Windows_Media_Visual_VisualOpacityMask\" data-linktype=\"relative-path\">VisualOpacityMask</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.visual#System_Windows_Media_Visual_VisualParent\" data-linktype=\"relative-path\">VisualParent</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.visual#System_Windows_Media_Visual_VisualScrollableAreaClip\" data-linktype=\"relative-path\">VisualScrollableAreaClip</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.visual#System_Windows_Media_Visual_VisualTextHintingMode\" data-linktype=\"relative-path\">VisualTextHintingMode</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.visual#System_Windows_Media_Visual_VisualTextRenderingMode\" data-linktype=\"relative-path\">VisualTextRenderingMode</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.visual#System_Windows_Media_Visual_VisualTransform\" data-linktype=\"relative-path\">VisualTransform</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.visual#System_Windows_Media_Visual_VisualXSnappingGuidelines\" data-linktype=\"relative-path\">VisualXSnappingGuidelines</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.visual#System_Windows_Media_Visual_VisualYSnappingGuidelines\" data-linktype=\"relative-path\">VisualYSnappingGuidelines</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.threading.dispatcherobject#System_Windows_Threading_DispatcherObject_CheckAccess\" data-linktype=\"relative-path\">CheckAccess()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.threading.dispatcherobject#System_Windows_Threading_DispatcherObject_Dispatcher\" data-linktype=\"relative-path\">Dispatcher</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.threading.dispatcherobject#System_Windows_Threading_DispatcherObject_VerifyAccess\" data-linktype=\"relative-path\">VerifyAccess()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>UIElement provides a starting point for element layout characteristics, and also exposes virtual methods that derived classes can override, which can influence the layout rendering behavior of the element and its child elements.  </p>\n<p> Much of the input and focusing behavior for elements in general is also defined in the UIElement class. This includes the events for keyboard, mouse and stylus input, and related status properties. Many of these events are routed events, and many of the input-related events have both a bubbling routing version as well as a tunneling version of the event. These paired events are typically the events of greatest interest to control authors.  </p>\n<p> UIElement also includes APIs that relate to the WPF event model, including methods that can raise specified routed events that are sourced from an element instance.  </p>\n<p> In terms of architecture, UIElement can be considered roughly equivalent to a window handle in Win32 programming, or an Element in Dynamic HTML (DHTML) programming. UIElement is a base element at the WPF core level.  </p>\n<p> A UIElement has the following capabilities that are specifically defined by the UIElement class:  </p>\n<ul>\n<li><p>Can render as a child element (UIElement derives from <a class=\"xref\" href=\"system.windows.media.visual\" data-linktype=\"relative-path\">Visual</a>, a high level graphics class)  </p>\n</li>\n<li><p>Contains logic that is used to size and position possible child elements of a UIElement (when interpreted by a layout system)  </p>\n</li>\n<li><p>Can respond to user input (including control of where input is getting sent to via their handling of event routing, or routing of commands)  </p>\n</li>\n<li><p>Can raise routed events that travel a route through the logical element tree  </p>\n</li>\n<li><p>Supports some aspects of the animation system  </p>\n<p><a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a> is the WPF framework-level implementation class that builds on UIElement, and adds specific interactions with the WPF framework level. <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a> adds and defines the following capabilities:  </p>\n</li>\n<li><p>Additional framework-specific layout characteristics  </p>\n</li>\n<li><p>Support for richer metadata reporting on properties  </p>\n</li>\n<li><p>Class-specific implementation of certain input base classes and their attached properties or attached events  </p>\n</li>\n<li><p>Style support  </p>\n</li>\n<li><p>Further animation support  </p>\n<p>Another related class is <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a>. The <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> class implements many of the same members as does UIElement; the difference between these two classes has to do with their intended place in the overall content model. A UIElement derived class typically defines a relatively rigid content model, meaning that there are restrictions on what elements may be child elements in markup. There might be capacity for taking less restrictive child content in a UIElement, but that capacity is typically centralized in designated content properties. A <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> derived class is typically not as restrictive about content, to support scenarios such as flow-format documents.  </p>\n</li>\n</ul>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_Visibility_\" data-linktype=\"relative-path\">Visibility</a> state affects all input handling by that element. Elements that are not visible do not participate in hit testing and do not receive input events, even if the mouse is over the bounds where the element would be if were visible.</p>\n</div>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement__ctor\" data-linktype=\"self-bookmark\">UIElement()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Fields\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_AllowDropProperty\" data-linktype=\"self-bookmark\">AllowDropProperty</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.AllowDrop*</span> dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_AreAnyTouchesCapturedProperty\" data-linktype=\"self-bookmark\">AreAnyTouchesCapturedProperty</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.AreAnyTouchesCaptured*</span> dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_AreAnyTouchesCapturedWithinProperty\" data-linktype=\"self-bookmark\">AreAnyTouchesCapturedWithinProperty</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.AreAnyTouchesCapturedWithin*</span> dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_AreAnyTouchesDirectlyOverProperty\" data-linktype=\"self-bookmark\">AreAnyTouchesDirectlyOverProperty</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.AreAnyTouchesDirectlyOver*</span> dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_AreAnyTouchesOverProperty\" data-linktype=\"self-bookmark\">AreAnyTouchesOverProperty</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.AreAnyTouchesOver*</span> dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_BitmapEffectInputProperty\" data-linktype=\"self-bookmark\">BitmapEffectInputProperty</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.BitmapEffectInput*</span> dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_BitmapEffectProperty\" data-linktype=\"self-bookmark\">BitmapEffectProperty</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.BitmapEffect*</span> dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_CacheModeProperty\" data-linktype=\"self-bookmark\">CacheModeProperty</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.CacheMode*</span> dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_ClipProperty\" data-linktype=\"self-bookmark\">ClipProperty</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.Clip*</span> dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_ClipToBoundsProperty\" data-linktype=\"self-bookmark\">ClipToBoundsProperty</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.ClipToBounds*</span> dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_DragEnterEvent\" data-linktype=\"self-bookmark\">DragEnterEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_DragEnter\" data-linktype=\"relative-path\">DragEnter</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_DragLeaveEvent\" data-linktype=\"self-bookmark\">DragLeaveEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_DragLeave\" data-linktype=\"relative-path\">DragLeave</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_DragOverEvent\" data-linktype=\"self-bookmark\">DragOverEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_DragOver\" data-linktype=\"relative-path\">DragOver</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_DropEvent\" data-linktype=\"self-bookmark\">DropEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_Drop\" data-linktype=\"relative-path\">Drop</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_EffectProperty\" data-linktype=\"self-bookmark\">EffectProperty</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.Effect*</span> dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_FocusableProperty\" data-linktype=\"self-bookmark\">FocusableProperty</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.Focusable*</span> dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_GiveFeedbackEvent\" data-linktype=\"self-bookmark\">GiveFeedbackEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_GiveFeedback\" data-linktype=\"relative-path\">GiveFeedback</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_GotFocusEvent\" data-linktype=\"self-bookmark\">GotFocusEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_GotFocus\" data-linktype=\"relative-path\">GotFocus</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_GotKeyboardFocusEvent\" data-linktype=\"self-bookmark\">GotKeyboardFocusEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_GotKeyboardFocus\" data-linktype=\"relative-path\">GotKeyboardFocus</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_GotMouseCaptureEvent\" data-linktype=\"self-bookmark\">GotMouseCaptureEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_GotMouseCapture\" data-linktype=\"relative-path\">GotMouseCapture</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_GotStylusCaptureEvent\" data-linktype=\"self-bookmark\">GotStylusCaptureEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_GotStylusCapture\" data-linktype=\"relative-path\">GotStylusCapture</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_GotTouchCaptureEvent\" data-linktype=\"self-bookmark\">GotTouchCaptureEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_GotTouchCapture\" data-linktype=\"relative-path\">GotTouchCapture</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_IsEnabledProperty\" data-linktype=\"self-bookmark\">IsEnabledProperty</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.IsEnabled*</span> dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_IsFocusedProperty\" data-linktype=\"self-bookmark\">IsFocusedProperty</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.IsFocused*</span> dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_IsHitTestVisibleProperty\" data-linktype=\"self-bookmark\">IsHitTestVisibleProperty</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.IsHitTestVisible*</span> dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_IsKeyboardFocusedProperty\" data-linktype=\"self-bookmark\">IsKeyboardFocusedProperty</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.IsKeyboardFocused*</span> dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_IsKeyboardFocusWithinProperty\" data-linktype=\"self-bookmark\">IsKeyboardFocusWithinProperty</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.IsKeyboardFocusWithin*</span> dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_IsManipulationEnabledProperty\" data-linktype=\"self-bookmark\">IsManipulationEnabledProperty</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.IsManipulationEnabled*</span> dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_IsMouseCapturedProperty\" data-linktype=\"self-bookmark\">IsMouseCapturedProperty</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.IsMouseCaptured*</span> dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_IsMouseCaptureWithinProperty\" data-linktype=\"self-bookmark\">IsMouseCaptureWithinProperty</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.IsMouseCaptureWithin*</span> dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_IsMouseDirectlyOverProperty\" data-linktype=\"self-bookmark\">IsMouseDirectlyOverProperty</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.IsMouseDirectlyOver*</span> dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_IsMouseOverProperty\" data-linktype=\"self-bookmark\">IsMouseOverProperty</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.IsMouseOver*</span> dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_IsStylusCapturedProperty\" data-linktype=\"self-bookmark\">IsStylusCapturedProperty</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.IsStylusCaptured*</span> dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_IsStylusCaptureWithinProperty\" data-linktype=\"self-bookmark\">IsStylusCaptureWithinProperty</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.IsStylusCaptureWithin*</span> dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_IsStylusDirectlyOverProperty\" data-linktype=\"self-bookmark\">IsStylusDirectlyOverProperty</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.IsStylusDirectlyOver*</span> dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_IsStylusOverProperty\" data-linktype=\"self-bookmark\">IsStylusOverProperty</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.IsStylusOver*</span> dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_IsVisibleProperty\" data-linktype=\"self-bookmark\">IsVisibleProperty</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.IsVisible*</span> dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_KeyDownEvent\" data-linktype=\"self-bookmark\">KeyDownEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_KeyDown\" data-linktype=\"relative-path\">KeyDown</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_KeyUpEvent\" data-linktype=\"self-bookmark\">KeyUpEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_KeyUp\" data-linktype=\"relative-path\">KeyUp</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_LostFocusEvent\" data-linktype=\"self-bookmark\">LostFocusEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_LostFocus\" data-linktype=\"relative-path\">LostFocus</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_LostKeyboardFocusEvent\" data-linktype=\"self-bookmark\">LostKeyboardFocusEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_LostKeyboardFocus\" data-linktype=\"relative-path\">LostKeyboardFocus</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_LostMouseCaptureEvent\" data-linktype=\"self-bookmark\">LostMouseCaptureEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_LostMouseCapture\" data-linktype=\"relative-path\">LostMouseCapture</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_LostStylusCaptureEvent\" data-linktype=\"self-bookmark\">LostStylusCaptureEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_LostStylusCapture\" data-linktype=\"relative-path\">LostStylusCapture</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_LostTouchCaptureEvent\" data-linktype=\"self-bookmark\">LostTouchCaptureEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_LostTouchCapture\" data-linktype=\"relative-path\">LostTouchCapture</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_ManipulationBoundaryFeedbackEvent\" data-linktype=\"self-bookmark\">ManipulationBoundaryFeedbackEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationBoundaryFeedback\" data-linktype=\"relative-path\">ManipulationBoundaryFeedback</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_ManipulationCompletedEvent\" data-linktype=\"self-bookmark\">ManipulationCompletedEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationCompleted\" data-linktype=\"relative-path\">ManipulationCompleted</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_ManipulationDeltaEvent\" data-linktype=\"self-bookmark\">ManipulationDeltaEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationDelta\" data-linktype=\"relative-path\">ManipulationDelta</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_ManipulationInertiaStartingEvent\" data-linktype=\"self-bookmark\">ManipulationInertiaStartingEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationInertiaStarting\" data-linktype=\"relative-path\">ManipulationInertiaStarting</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_ManipulationStartedEvent\" data-linktype=\"self-bookmark\">ManipulationStartedEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationStarted\" data-linktype=\"relative-path\">ManipulationStarted</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_ManipulationStartingEvent\" data-linktype=\"self-bookmark\">ManipulationStartingEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationStarting\" data-linktype=\"relative-path\">ManipulationStarting</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_MouseDownEvent\" data-linktype=\"self-bookmark\">MouseDownEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseDown\" data-linktype=\"relative-path\">MouseDown</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_MouseEnterEvent\" data-linktype=\"self-bookmark\">MouseEnterEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseEnter\" data-linktype=\"relative-path\">MouseEnter</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_MouseLeaveEvent\" data-linktype=\"self-bookmark\">MouseLeaveEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseLeave\" data-linktype=\"relative-path\">MouseLeave</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_MouseLeftButtonDownEvent\" data-linktype=\"self-bookmark\">MouseLeftButtonDownEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseLeftButtonDown\" data-linktype=\"relative-path\">MouseLeftButtonDown</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_MouseLeftButtonUpEvent\" data-linktype=\"self-bookmark\">MouseLeftButtonUpEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseLeftButtonUp\" data-linktype=\"relative-path\">MouseLeftButtonUp</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_MouseMoveEvent\" data-linktype=\"self-bookmark\">MouseMoveEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseMove\" data-linktype=\"relative-path\">MouseMove</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_MouseRightButtonDownEvent\" data-linktype=\"self-bookmark\">MouseRightButtonDownEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseRightButtonDown\" data-linktype=\"relative-path\">MouseRightButtonDown</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_MouseRightButtonUpEvent\" data-linktype=\"self-bookmark\">MouseRightButtonUpEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseRightButtonUp\" data-linktype=\"relative-path\">MouseRightButtonUp</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_MouseUpEvent\" data-linktype=\"self-bookmark\">MouseUpEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseUp\" data-linktype=\"relative-path\">MouseUp</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_MouseWheelEvent\" data-linktype=\"self-bookmark\">MouseWheelEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseWheel\" data-linktype=\"relative-path\">MouseWheel</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OpacityMaskProperty\" data-linktype=\"self-bookmark\">OpacityMaskProperty</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.OpacityMask*</span> dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OpacityProperty\" data-linktype=\"self-bookmark\">OpacityProperty</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.Opacity*</span> dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewDragEnterEvent\" data-linktype=\"self-bookmark\">PreviewDragEnterEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewDragEnter\" data-linktype=\"relative-path\">PreviewDragEnter</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewDragLeaveEvent\" data-linktype=\"self-bookmark\">PreviewDragLeaveEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewDragLeave\" data-linktype=\"relative-path\">PreviewDragLeave</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewDragOverEvent\" data-linktype=\"self-bookmark\">PreviewDragOverEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewDragOver\" data-linktype=\"relative-path\">PreviewDragOver</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewDropEvent\" data-linktype=\"self-bookmark\">PreviewDropEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewDrop\" data-linktype=\"relative-path\">PreviewDrop</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewGiveFeedbackEvent\" data-linktype=\"self-bookmark\">PreviewGiveFeedbackEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewGiveFeedback\" data-linktype=\"relative-path\">PreviewGiveFeedback</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewGotKeyboardFocusEvent\" data-linktype=\"self-bookmark\">PreviewGotKeyboardFocusEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewGotKeyboardFocus\" data-linktype=\"relative-path\">PreviewGotKeyboardFocus</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewKeyDownEvent\" data-linktype=\"self-bookmark\">PreviewKeyDownEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewKeyDown\" data-linktype=\"relative-path\">PreviewKeyDown</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewKeyUpEvent\" data-linktype=\"self-bookmark\">PreviewKeyUpEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewKeyUp\" data-linktype=\"relative-path\">PreviewKeyUp</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewLostKeyboardFocusEvent\" data-linktype=\"self-bookmark\">PreviewLostKeyboardFocusEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewLostKeyboardFocus\" data-linktype=\"relative-path\">PreviewLostKeyboardFocus</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewMouseDownEvent\" data-linktype=\"self-bookmark\">PreviewMouseDownEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseDown\" data-linktype=\"relative-path\">PreviewMouseDown</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewMouseLeftButtonDownEvent\" data-linktype=\"self-bookmark\">PreviewMouseLeftButtonDownEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseLeftButtonDown\" data-linktype=\"relative-path\">PreviewMouseLeftButtonDown</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewMouseLeftButtonUpEvent\" data-linktype=\"self-bookmark\">PreviewMouseLeftButtonUpEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseLeftButtonUp\" data-linktype=\"relative-path\">PreviewMouseLeftButtonUp</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewMouseMoveEvent\" data-linktype=\"self-bookmark\">PreviewMouseMoveEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseMove\" data-linktype=\"relative-path\">PreviewMouseMove</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewMouseRightButtonDownEvent\" data-linktype=\"self-bookmark\">PreviewMouseRightButtonDownEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseRightButtonDown\" data-linktype=\"relative-path\">PreviewMouseRightButtonDown</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewMouseRightButtonUpEvent\" data-linktype=\"self-bookmark\">PreviewMouseRightButtonUpEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseRightButtonUp\" data-linktype=\"relative-path\">PreviewMouseRightButtonUp</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewMouseUpEvent\" data-linktype=\"self-bookmark\">PreviewMouseUpEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseUp\" data-linktype=\"relative-path\">PreviewMouseUp</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewMouseWheelEvent\" data-linktype=\"self-bookmark\">PreviewMouseWheelEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseWheel\" data-linktype=\"relative-path\">PreviewMouseWheel</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewQueryContinueDragEvent\" data-linktype=\"self-bookmark\">PreviewQueryContinueDragEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewQueryContinueDrag\" data-linktype=\"relative-path\">PreviewQueryContinueDrag</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewStylusButtonDownEvent\" data-linktype=\"self-bookmark\">PreviewStylusButtonDownEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewStylusButtonDown\" data-linktype=\"relative-path\">PreviewStylusButtonDown</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewStylusButtonUpEvent\" data-linktype=\"self-bookmark\">PreviewStylusButtonUpEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewStylusButtonUp\" data-linktype=\"relative-path\">PreviewStylusButtonUp</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewStylusDownEvent\" data-linktype=\"self-bookmark\">PreviewStylusDownEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewStylusDown\" data-linktype=\"relative-path\">PreviewStylusDown</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewStylusInAirMoveEvent\" data-linktype=\"self-bookmark\">PreviewStylusInAirMoveEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewStylusInAirMove\" data-linktype=\"relative-path\">PreviewStylusInAirMove</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewStylusInRangeEvent\" data-linktype=\"self-bookmark\">PreviewStylusInRangeEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewStylusInRange\" data-linktype=\"relative-path\">PreviewStylusInRange</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewStylusMoveEvent\" data-linktype=\"self-bookmark\">PreviewStylusMoveEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewStylusMove\" data-linktype=\"relative-path\">PreviewStylusMove</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewStylusOutOfRangeEvent\" data-linktype=\"self-bookmark\">PreviewStylusOutOfRangeEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewStylusOutOfRange\" data-linktype=\"relative-path\">PreviewStylusOutOfRange</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewStylusSystemGestureEvent\" data-linktype=\"self-bookmark\">PreviewStylusSystemGestureEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewStylusSystemGesture\" data-linktype=\"relative-path\">PreviewStylusSystemGesture</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewStylusUpEvent\" data-linktype=\"self-bookmark\">PreviewStylusUpEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewStylusUp\" data-linktype=\"relative-path\">PreviewStylusUp</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewTextInputEvent\" data-linktype=\"self-bookmark\">PreviewTextInputEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewTextInput\" data-linktype=\"relative-path\">PreviewTextInput</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewTouchDownEvent\" data-linktype=\"self-bookmark\">PreviewTouchDownEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewTouchDown\" data-linktype=\"relative-path\">PreviewTouchDown</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewTouchMoveEvent\" data-linktype=\"self-bookmark\">PreviewTouchMoveEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewTouchMove\" data-linktype=\"relative-path\">PreviewTouchMove</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewTouchUpEvent\" data-linktype=\"self-bookmark\">PreviewTouchUpEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewTouchUp\" data-linktype=\"relative-path\">PreviewTouchUp</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_QueryContinueDragEvent\" data-linktype=\"self-bookmark\">QueryContinueDragEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_QueryContinueDrag\" data-linktype=\"relative-path\">QueryContinueDrag</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_QueryCursorEvent\" data-linktype=\"self-bookmark\">QueryCursorEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_QueryCursor\" data-linktype=\"relative-path\">QueryCursor</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_RenderTransformOriginProperty\" data-linktype=\"self-bookmark\">RenderTransformOriginProperty</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.RenderTransformOrigin*</span> dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_RenderTransformProperty\" data-linktype=\"self-bookmark\">RenderTransformProperty</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.RenderTransform*</span> dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_SnapsToDevicePixelsProperty\" data-linktype=\"self-bookmark\">SnapsToDevicePixelsProperty</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.SnapsToDevicePixels*</span> dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_StylusButtonDownEvent\" data-linktype=\"self-bookmark\">StylusButtonDownEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_StylusButtonDown\" data-linktype=\"relative-path\">StylusButtonDown</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_StylusButtonUpEvent\" data-linktype=\"self-bookmark\">StylusButtonUpEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_StylusButtonUp\" data-linktype=\"relative-path\">StylusButtonUp</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_StylusDownEvent\" data-linktype=\"self-bookmark\">StylusDownEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_StylusDown\" data-linktype=\"relative-path\">StylusDown</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_StylusEnterEvent\" data-linktype=\"self-bookmark\">StylusEnterEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_StylusEnter\" data-linktype=\"relative-path\">StylusEnter</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_StylusInAirMoveEvent\" data-linktype=\"self-bookmark\">StylusInAirMoveEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_StylusInAirMove\" data-linktype=\"relative-path\">StylusInAirMove</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_StylusInRangeEvent\" data-linktype=\"self-bookmark\">StylusInRangeEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_StylusInRange\" data-linktype=\"relative-path\">StylusInRange</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_StylusLeaveEvent\" data-linktype=\"self-bookmark\">StylusLeaveEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_StylusLeave\" data-linktype=\"relative-path\">StylusLeave</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_StylusMoveEvent\" data-linktype=\"self-bookmark\">StylusMoveEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_StylusMove\" data-linktype=\"relative-path\">StylusMove</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_StylusOutOfRangeEvent\" data-linktype=\"self-bookmark\">StylusOutOfRangeEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_StylusOutOfRange\" data-linktype=\"relative-path\">StylusOutOfRange</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_StylusSystemGestureEvent\" data-linktype=\"self-bookmark\">StylusSystemGestureEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_StylusSystemGesture\" data-linktype=\"relative-path\">StylusSystemGesture</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_StylusUpEvent\" data-linktype=\"self-bookmark\">StylusUpEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_StylusUp\" data-linktype=\"relative-path\">StylusUp</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_TextInputEvent\" data-linktype=\"self-bookmark\">TextInputEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_TextInput\" data-linktype=\"relative-path\">TextInput</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_TouchDownEvent\" data-linktype=\"self-bookmark\">TouchDownEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_TouchDown\" data-linktype=\"relative-path\">TouchDown</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_TouchEnterEvent\" data-linktype=\"self-bookmark\">TouchEnterEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_TouchEnter\" data-linktype=\"relative-path\">TouchEnter</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_TouchLeaveEvent\" data-linktype=\"self-bookmark\">TouchLeaveEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_TouchLeave\" data-linktype=\"relative-path\">TouchLeave</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_TouchMoveEvent\" data-linktype=\"self-bookmark\">TouchMoveEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_TouchMove\" data-linktype=\"relative-path\">TouchMove</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_TouchUpEvent\" data-linktype=\"self-bookmark\">TouchUpEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_TouchUp\" data-linktype=\"relative-path\">TouchUp</a> routed event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_UidProperty\" data-linktype=\"self-bookmark\">UidProperty</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.Uid*</span> dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_VisibilityProperty\" data-linktype=\"self-bookmark\">VisibilityProperty</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.Visibility*</span> dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_AllowDrop\" data-linktype=\"self-bookmark\">AllowDrop</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether this element can be used as the target of a drag-and-drop operation.  This is a dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_AreAnyTouchesCaptured\" data-linktype=\"self-bookmark\">AreAnyTouchesCaptured</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether at least one touch is captured to this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_AreAnyTouchesCapturedWithin\" data-linktype=\"self-bookmark\">AreAnyTouchesCapturedWithin</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether at least one touch is captured to this element or to any child elements in its visual tree.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_AreAnyTouchesDirectlyOver\" data-linktype=\"self-bookmark\">AreAnyTouchesDirectlyOver</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether at least one touch is pressed over this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_AreAnyTouchesOver\" data-linktype=\"self-bookmark\">AreAnyTouchesOver</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether at least one touch is pressed over this element or any child elements in its visual tree.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_BitmapEffect\" data-linktype=\"self-bookmark\">BitmapEffect</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a bitmap effect that applies directly to the rendered content for this element.  This is a dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_BitmapEffectInput\" data-linktype=\"self-bookmark\">BitmapEffectInput</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets an input source for the bitmap effect that applies directly to the rendered content for this element.  This is a dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_CacheMode\" data-linktype=\"self-bookmark\">CacheMode</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a cached representation of the <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_Clip\" data-linktype=\"self-bookmark\">Clip</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the geometry used to define the outline of the contents of an element.  This is a dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_ClipToBounds\" data-linktype=\"self-bookmark\">ClipToBounds</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether to clip the content of this element (or content coming from the child elements of this element) to fit into the size of the containing element.   This is a dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_CommandBindings\" data-linktype=\"self-bookmark\">CommandBindings</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a collection of <a class=\"xref\" href=\"system.windows.input.commandbinding\" data-linktype=\"relative-path\">CommandBinding</a> objects associated with this element. A <a class=\"xref\" href=\"system.windows.input.commandbinding\" data-linktype=\"relative-path\">CommandBinding</a> enables command handling for this element, and declares the linkage between a command, its events, and the handlers attached by this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_DesiredSize\" data-linktype=\"self-bookmark\">DesiredSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the size that this element computed during the measure pass of the layout process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_Effect\" data-linktype=\"self-bookmark\">Effect</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the bitmap effect to apply to the <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a>. This is a dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_Focusable\" data-linktype=\"self-bookmark\">Focusable</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether the element can receive focus.  This is a dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_HasAnimatedProperties\" data-linktype=\"self-bookmark\">HasAnimatedProperties</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether this element has any animated properties.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_HasEffectiveKeyboardFocus\" data-linktype=\"self-bookmark\">HasEffectiveKeyboardFocus</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether the <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> has focus.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_InputBindings\" data-linktype=\"self-bookmark\">InputBindings</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the collection of input bindings associated with this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_IsArrangeValid\" data-linktype=\"self-bookmark\">IsArrangeValid</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the computed size and position of child elements in this element&#39;s layout are valid.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_IsEnabled\" data-linktype=\"self-bookmark\">IsEnabled</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether this element is enabled in the user interface (UI).  This is a dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_IsEnabledCore\" data-linktype=\"self-bookmark\">IsEnabledCore</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that becomes the return value of <span class=\"xref\">stem.Windows.UIElement.IsEnabled*</span> in derived classes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_IsFocused\" data-linktype=\"self-bookmark\">IsFocused</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that determines whether this element has logical focus.  This is a dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_IsHitTestVisible\" data-linktype=\"self-bookmark\">IsHitTestVisible</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that declares whether this element can possibly be returned as a hit test result from some portion of its rendered content. This is a dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_IsInputMethodEnabled\" data-linktype=\"self-bookmark\">IsInputMethodEnabled</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether an input method system, such as an Input Method Editor (IME),  is enabled for processing the input to this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_IsKeyboardFocused\" data-linktype=\"self-bookmark\">IsKeyboardFocused</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether this element has keyboard focus.  This is a dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_IsKeyboardFocusWithin\" data-linktype=\"self-bookmark\">IsKeyboardFocusWithin</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether keyboard focus is anywhere within the element or its visual tree child elements.  This is a dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_IsManipulationEnabled\" data-linktype=\"self-bookmark\">IsManipulationEnabled</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether manipulation events are enabled on this <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_IsMeasureValid\" data-linktype=\"self-bookmark\">IsMeasureValid</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the current size returned by layout measure is valid.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_IsMouseCaptured\" data-linktype=\"self-bookmark\">IsMouseCaptured</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the mouse is captured to this element.  This is a dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_IsMouseCaptureWithin\" data-linktype=\"self-bookmark\">IsMouseCaptureWithin</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that determines whether mouse capture is held by this element or by child elements in its visual tree. This is a dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_IsMouseDirectlyOver\" data-linktype=\"self-bookmark\">IsMouseDirectlyOver</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether the position of the mouse pointer corresponds to hit test results, which take element compositing into account.  This is a dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_IsMouseOver\" data-linktype=\"self-bookmark\">IsMouseOver</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the mouse pointer is located over this element (including child elements in the visual tree).  This is a dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_IsStylusCaptured\" data-linktype=\"self-bookmark\">IsStylusCaptured</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the stylus is captured by this element.  This is a dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_IsStylusCaptureWithin\" data-linktype=\"self-bookmark\">IsStylusCaptureWithin</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that determines whether stylus capture is held by this element, or an element within the element bounds and its visual tree. This is a dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_IsStylusDirectlyOver\" data-linktype=\"self-bookmark\">IsStylusDirectlyOver</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether the stylus position corresponds to hit test results, which take element compositing into account.  This is a dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_IsStylusOver\" data-linktype=\"self-bookmark\">IsStylusOver</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the stylus cursor is located over this element (including visual child elements).  This is a dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_IsVisible\" data-linktype=\"self-bookmark\">IsVisible</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether this element is visible in the user interface (UI).  This is a dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_Opacity\" data-linktype=\"self-bookmark\">Opacity</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the opacity factor applied to the entire <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> when it is rendered in the user interface (UI).  This is a dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OpacityMask\" data-linktype=\"self-bookmark\">OpacityMask</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets an opacity mask, as a <a class=\"xref\" href=\"system.windows.media.brush\" data-linktype=\"relative-path\">Brush</a> implementation that is applied to any alpha-channel masking for the rendered content of this element.  This is a dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PersistId\" data-linktype=\"self-bookmark\">PersistId</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that uniquely identifies this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_RenderSize\" data-linktype=\"self-bookmark\">RenderSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets (or sets, but see Remarks) the final render size of this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_RenderTransform\" data-linktype=\"self-bookmark\">RenderTransform</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets transform information that affects the rendering position of this element.  This is a dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_RenderTransformOrigin\" data-linktype=\"self-bookmark\">RenderTransformOrigin</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the center point of any possible render transform declared by <span class=\"xref\">stem.Windows.UIElement.RenderTransform*</span>, relative to the bounds of the element.  This is a dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_SnapsToDevicePixels\" data-linktype=\"self-bookmark\">SnapsToDevicePixels</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that determines whether rendering for this element should use device-specific pixel settings during rendering.  This is a dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_StylusPlugIns\" data-linktype=\"self-bookmark\">StylusPlugIns</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a collection of all stylus plug-in (customization) objects associated with this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_TouchesCaptured\" data-linktype=\"self-bookmark\">TouchesCaptured</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets all touch devices that are captured to this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_TouchesCapturedWithin\" data-linktype=\"self-bookmark\">TouchesCapturedWithin</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets all touch devices that are captured to this element or any child elements in its visual tree.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_TouchesDirectlyOver\" data-linktype=\"self-bookmark\">TouchesDirectlyOver</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets all touch devices that are over this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_TouchesOver\" data-linktype=\"self-bookmark\">TouchesOver</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets all touch devices that are over this element or any child elements in its visual tree.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_Uid\" data-linktype=\"self-bookmark\">Uid</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the unique identifier (for localization) for this element. This is a dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_Visibility\" data-linktype=\"self-bookmark\">Visibility</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the user interface (UI) visibility of this element.  This is a dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_AddHandler_System_Windows_RoutedEvent_System_Delegate_\" data-linktype=\"self-bookmark\">AddHandler(RoutedEvent,Delegate)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_AddHandler_System_Windows_RoutedEvent_System_Delegate_System_Boolean_\" data-linktype=\"self-bookmark\">AddHandler(RoutedEvent,Delegate,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element. Specify <code>handledEventsToo</code> as <code>true</code> to have the provided handler be invoked for routed event that had already been marked as handled by another element along the event route.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_AddToEventRoute_System_Windows_EventRoute_System_Windows_RoutedEventArgs_\" data-linktype=\"self-bookmark\">AddToEventRoute(EventRoute,RoutedEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds handlers to the specified <a class=\"xref\" href=\"system.windows.eventroute\" data-linktype=\"relative-path\">EventRoute</a> for the current <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> event handler collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_ApplyAnimationClock_System_Windows_DependencyProperty_System_Windows_Media_Animation_AnimationClock_\" data-linktype=\"self-bookmark\">ApplyAnimationClock(DependencyProperty,AnimationClock)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Applies an animation to a specified dependency property on this element. Any existing animations are stopped and replaced with the new animation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_ApplyAnimationClock_System_Windows_DependencyProperty_System_Windows_Media_Animation_AnimationClock_System_Windows_Media_Animation_HandoffBehavior_\" data-linktype=\"self-bookmark\">ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Applies an animation to a specified dependency property on this element, with the ability to specify what happens if the property already has a running animation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_Arrange_System_Windows_Rect_\" data-linktype=\"self-bookmark\">Arrange(Rect)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Positions child elements and determines a size for a <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a>. Parent elements call this method from their <span class=\"xref\">stem.Windows.UIElement.ArrangeCore*</span> implementation (or a WPF framework-level equivalent) to form a recursive layout update. This method constitutes the second pass of a layout update.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_ArrangeCore_System_Windows_Rect_\" data-linktype=\"self-bookmark\">ArrangeCore(Rect)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines the template for WPF core-level arrange layout definition.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_BeginAnimation_System_Windows_DependencyProperty_System_Windows_Media_Animation_AnimationTimeline_\" data-linktype=\"self-bookmark\">BeginAnimation(DependencyProperty,AnimationTimeline)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Starts an animation for a specified animated property on this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_BeginAnimation_System_Windows_DependencyProperty_System_Windows_Media_Animation_AnimationTimeline_System_Windows_Media_Animation_HandoffBehavior_\" data-linktype=\"self-bookmark\">BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Starts a specific animation for a specified animated property on this element, with the option of specifying what happens if the property already has a running animation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_CaptureMouse\" data-linktype=\"self-bookmark\">CaptureMouse()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Attempts to force capture of the mouse to this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_CaptureStylus\" data-linktype=\"self-bookmark\">CaptureStylus()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Attempts to force capture of the stylus to this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_CaptureTouch_System_Windows_Input_TouchDevice_\" data-linktype=\"self-bookmark\">CaptureTouch(TouchDevice)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Attempts to force capture of a touch to this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_Focus\" data-linktype=\"self-bookmark\">Focus()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Attempts to set focus to this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_GetAnimationBaseValue_System_Windows_DependencyProperty_\" data-linktype=\"self-bookmark\">GetAnimationBaseValue(DependencyProperty)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the base property value for the specified property on this element, disregarding any possible animated value from a running or stopped animation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_GetLayoutClip_System_Windows_Size_\" data-linktype=\"self-bookmark\">GetLayoutClip(Size)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an alternative clipping geometry that represents the region that would be clipped if <span class=\"xref\">stem.Windows.UIElement.ClipToBounds*</span> were set to <code>true</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_GetUIParentCore\" data-linktype=\"self-bookmark\">GetUIParentCore()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, returns an alternative user interface (UI) parent for this element if no visual parent exists.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_HitTestCore_System_Windows_Media_GeometryHitTestParameters_\" data-linktype=\"self-bookmark\">HitTestCore(GeometryHitTestParameters)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Implements <span class=\"xref\">stem.Windows.Media.Visual.HitTestCore*</span> to supply base element hit testing behavior (returning <a class=\"xref\" href=\"system.windows.media.geometryhittestresult\" data-linktype=\"relative-path\">GeometryHitTestResult</a>).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_HitTestCore_System_Windows_Media_PointHitTestParameters_\" data-linktype=\"self-bookmark\">HitTestCore(PointHitTestParameters)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Implements <span class=\"xref\">stem.Windows.Media.Visual.HitTestCore*</span> to supply base element hit testing behavior (returning <a class=\"xref\" href=\"system.windows.media.hittestresult\" data-linktype=\"relative-path\">HitTestResult</a>).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_InputHitTest_System_Windows_Point_\" data-linktype=\"self-bookmark\">InputHitTest(Point)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the input element within the current element that is at the specified coordinates, relative to the current element&#39;s origin.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_InvalidateArrange\" data-linktype=\"self-bookmark\">InvalidateArrange()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invalidates the arrange state (layout) for the element. After the invalidation, the element will have its layout updated, which will occur asynchronously unless subsequently forced by <span class=\"xref\">stem.Windows.UIElement.UpdateLayout*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_InvalidateMeasure\" data-linktype=\"self-bookmark\">InvalidateMeasure()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invalidates the measurement state (layout) for the element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_InvalidateVisual\" data-linktype=\"self-bookmark\">InvalidateVisual()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invalidates the rendering of the element, and forces a complete new layout pass. <span class=\"xref\">stem.Windows.UIElement.OnRender*</span> is called after the layout cycle is completed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_Measure_System_Windows_Size_\" data-linktype=\"self-bookmark\">Measure(Size)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Updates the <span class=\"xref\">stem.Windows.UIElement.DesiredSize*</span> of a <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a>. Parent elements call this method from their own <span class=\"xref\">stem.Windows.UIElement.MeasureCore*</span> implementations to form a recursive layout update. Calling this method constitutes the first pass (the &quot;Measure&quot; pass) of a layout update.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_MeasureCore_System_Windows_Size_\" data-linktype=\"self-bookmark\">MeasureCore(Size)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, provides measurement logic for sizing this element properly, with consideration of the size of any child element content.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_MoveFocus_System_Windows_Input_TraversalRequest_\" data-linktype=\"self-bookmark\">MoveFocus(TraversalRequest)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Attempts to move focus from this element to another element. The direction to move focus is specified by a guidance direction, which is interpreted within the organization of the visual parent for this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnAccessKey_System_Windows_Input_AccessKeyEventArgs_\" data-linktype=\"self-bookmark\">OnAccessKey(AccessKeyEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides class handling for when an access key that is meaningful for this element is invoked.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnChildDesiredSizeChanged_System_Windows_UIElement_\" data-linktype=\"self-bookmark\">OnChildDesiredSizeChanged(UIElement)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Supports layout behavior when a child element is resized.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnCreateAutomationPeer\" data-linktype=\"self-bookmark\">OnCreateAutomationPeer()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns class-specific <a class=\"xref\" href=\"system.windows.automation.peers.automationpeer\" data-linktype=\"relative-path\">AutomationPeer</a> implementations for the Windows Presentation Foundation (WPF) infrastructure.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnDragEnter_System_Windows_DragEventArgs_\" data-linktype=\"self-bookmark\">OnDragEnter(DragEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.DragDrop.DragEnter</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnDragLeave_System_Windows_DragEventArgs_\" data-linktype=\"self-bookmark\">OnDragLeave(DragEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.DragDrop.DragLeave</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnDragOver_System_Windows_DragEventArgs_\" data-linktype=\"self-bookmark\">OnDragOver(DragEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.DragDrop.DragOver</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnDrop_System_Windows_DragEventArgs_\" data-linktype=\"self-bookmark\">OnDrop(DragEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.DragDrop.DragEnter</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnGiveFeedback_System_Windows_GiveFeedbackEventArgs_\" data-linktype=\"self-bookmark\">OnGiveFeedback(GiveFeedbackEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.DragDrop.GiveFeedback</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnGotFocus_System_Windows_RoutedEventArgs_\" data-linktype=\"self-bookmark\">OnGotFocus(RoutedEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_GotFocus\" data-linktype=\"relative-path\">GotFocus</a> routed event by using the event data provided.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnGotKeyboardFocus_System_Windows_Input_KeyboardFocusChangedEventArgs_\" data-linktype=\"self-bookmark\">OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Keyboard.GotKeyboardFocus</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnGotMouseCapture_System_Windows_Input_MouseEventArgs_\" data-linktype=\"self-bookmark\">OnGotMouseCapture(MouseEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Mouse.GotMouseCapture</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnGotStylusCapture_System_Windows_Input_StylusEventArgs_\" data-linktype=\"self-bookmark\">OnGotStylusCapture(StylusEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.GotStylusCapture</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnGotTouchCapture_System_Windows_Input_TouchEventArgs_\" data-linktype=\"self-bookmark\">OnGotTouchCapture(TouchEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides class handling for the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_GotTouchCapture\" data-linktype=\"relative-path\">GotTouchCapture</a> routed event that occurs when a touch is captured to this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnIsKeyboardFocusedChanged_System_Windows_DependencyPropertyChangedEventArgs_\" data-linktype=\"self-bookmark\">OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsKeyboardFocusedChanged\" data-linktype=\"relative-path\">IsKeyboardFocusedChanged</a> event is raised on this element. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnIsKeyboardFocusWithinChanged_System_Windows_DependencyPropertyChangedEventArgs_\" data-linktype=\"self-bookmark\">OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked just before the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsKeyboardFocusWithinChanged\" data-linktype=\"relative-path\">IsKeyboardFocusWithinChanged</a> event is raised by this element. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnIsMouseCapturedChanged_System_Windows_DependencyPropertyChangedEventArgs_\" data-linktype=\"self-bookmark\">OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsMouseCapturedChanged\" data-linktype=\"relative-path\">IsMouseCapturedChanged</a> event is raised on this element. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnIsMouseCaptureWithinChanged_System_Windows_DependencyPropertyChangedEventArgs_\" data-linktype=\"self-bookmark\">OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsMouseCaptureWithinChanged\" data-linktype=\"relative-path\">IsMouseCaptureWithinChanged</a> event is raised on this element. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnIsMouseDirectlyOverChanged_System_Windows_DependencyPropertyChangedEventArgs_\" data-linktype=\"self-bookmark\">OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsMouseDirectlyOverChanged\" data-linktype=\"relative-path\">IsMouseDirectlyOverChanged</a> event is raised on this element. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnIsStylusCapturedChanged_System_Windows_DependencyPropertyChangedEventArgs_\" data-linktype=\"self-bookmark\">OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsStylusCapturedChanged\" data-linktype=\"relative-path\">IsStylusCapturedChanged</a> event is raised on this element. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnIsStylusCaptureWithinChanged_System_Windows_DependencyPropertyChangedEventArgs_\" data-linktype=\"self-bookmark\">OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsStylusCaptureWithinChanged\" data-linktype=\"relative-path\">IsStylusCaptureWithinChanged</a> event is raised on this element. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnIsStylusDirectlyOverChanged_System_Windows_DependencyPropertyChangedEventArgs_\" data-linktype=\"self-bookmark\">OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsStylusDirectlyOverChanged\" data-linktype=\"relative-path\">IsStylusDirectlyOverChanged</a> event is raised on this element. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnKeyDown_System_Windows_Input_KeyEventArgs_\" data-linktype=\"self-bookmark\">OnKeyDown(KeyEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Keyboard.KeyDown</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnKeyUp_System_Windows_Input_KeyEventArgs_\" data-linktype=\"self-bookmark\">OnKeyUp(KeyEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Keyboard.KeyUp</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnLostFocus_System_Windows_RoutedEventArgs_\" data-linktype=\"self-bookmark\">OnLostFocus(RoutedEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_LostFocus\" data-linktype=\"relative-path\">LostFocus</a> routed event by using the event data that is provided.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnLostKeyboardFocus_System_Windows_Input_KeyboardFocusChangedEventArgs_\" data-linktype=\"self-bookmark\">OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Keyboard.LostKeyboardFocus</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnLostMouseCapture_System_Windows_Input_MouseEventArgs_\" data-linktype=\"self-bookmark\">OnLostMouseCapture(MouseEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Mouse.LostMouseCapture</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnLostStylusCapture_System_Windows_Input_StylusEventArgs_\" data-linktype=\"self-bookmark\">OnLostStylusCapture(StylusEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.LostStylusCapture</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnLostTouchCapture_System_Windows_Input_TouchEventArgs_\" data-linktype=\"self-bookmark\">OnLostTouchCapture(TouchEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides class handling for the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_LostTouchCapture\" data-linktype=\"relative-path\">LostTouchCapture</a> routed event that occurs when this element loses a touch capture.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnManipulationBoundaryFeedback_System_Windows_Input_ManipulationBoundaryFeedbackEventArgs_\" data-linktype=\"self-bookmark\">OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Called when the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationBoundaryFeedback\" data-linktype=\"relative-path\">ManipulationBoundaryFeedback</a> event occurs.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnManipulationCompleted_System_Windows_Input_ManipulationCompletedEventArgs_\" data-linktype=\"self-bookmark\">OnManipulationCompleted(ManipulationCompletedEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Called when the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationCompleted\" data-linktype=\"relative-path\">ManipulationCompleted</a> event occurs.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnManipulationDelta_System_Windows_Input_ManipulationDeltaEventArgs_\" data-linktype=\"self-bookmark\">OnManipulationDelta(ManipulationDeltaEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Called when the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationDelta\" data-linktype=\"relative-path\">ManipulationDelta</a> event occurs.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnManipulationInertiaStarting_System_Windows_Input_ManipulationInertiaStartingEventArgs_\" data-linktype=\"self-bookmark\">OnManipulationInertiaStarting(ManipulationInertiaStartingEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Called when the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationInertiaStarting\" data-linktype=\"relative-path\">ManipulationInertiaStarting</a> event occurs.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnManipulationStarted_System_Windows_Input_ManipulationStartedEventArgs_\" data-linktype=\"self-bookmark\">OnManipulationStarted(ManipulationStartedEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Called when the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationStarted\" data-linktype=\"relative-path\">ManipulationStarted</a> event occurs.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnManipulationStarting_System_Windows_Input_ManipulationStartingEventArgs_\" data-linktype=\"self-bookmark\">OnManipulationStarting(ManipulationStartingEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides class handling for the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationStarting\" data-linktype=\"relative-path\">ManipulationStarting</a> routed event that occurs when the manipulation processor is first created.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnMouseDown_System_Windows_Input_MouseButtonEventArgs_\" data-linktype=\"self-bookmark\">OnMouseDown(MouseButtonEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Mouse.MouseDown</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnMouseEnter_System_Windows_Input_MouseEventArgs_\" data-linktype=\"self-bookmark\">OnMouseEnter(MouseEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Mouse.MouseEnter</span> attached event is raised on this element. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnMouseLeave_System_Windows_Input_MouseEventArgs_\" data-linktype=\"self-bookmark\">OnMouseLeave(MouseEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Mouse.MouseLeave</span> attached event is raised on this element. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnMouseLeftButtonDown_System_Windows_Input_MouseButtonEventArgs_\" data-linktype=\"self-bookmark\">OnMouseLeftButtonDown(MouseButtonEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseLeftButtonDown\" data-linktype=\"relative-path\">MouseLeftButtonDown</a> routed event is raised on this element. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnMouseLeftButtonUp_System_Windows_Input_MouseButtonEventArgs_\" data-linktype=\"self-bookmark\">OnMouseLeftButtonUp(MouseButtonEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseLeftButtonUp\" data-linktype=\"relative-path\">MouseLeftButtonUp</a> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnMouseMove_System_Windows_Input_MouseEventArgs_\" data-linktype=\"self-bookmark\">OnMouseMove(MouseEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Mouse.MouseMove</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnMouseRightButtonDown_System_Windows_Input_MouseButtonEventArgs_\" data-linktype=\"self-bookmark\">OnMouseRightButtonDown(MouseButtonEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseRightButtonDown\" data-linktype=\"relative-path\">MouseRightButtonDown</a> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnMouseRightButtonUp_System_Windows_Input_MouseButtonEventArgs_\" data-linktype=\"self-bookmark\">OnMouseRightButtonUp(MouseButtonEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseRightButtonUp\" data-linktype=\"relative-path\">MouseRightButtonUp</a> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnMouseUp_System_Windows_Input_MouseButtonEventArgs_\" data-linktype=\"self-bookmark\">OnMouseUp(MouseButtonEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Mouse.MouseUp</span> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnMouseWheel_System_Windows_Input_MouseWheelEventArgs_\" data-linktype=\"self-bookmark\">OnMouseWheel(MouseWheelEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Mouse.MouseWheel</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnPreviewDragEnter_System_Windows_DragEventArgs_\" data-linktype=\"self-bookmark\">OnPreviewDragEnter(DragEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.DragDrop.PreviewDragEnter</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnPreviewDragLeave_System_Windows_DragEventArgs_\" data-linktype=\"self-bookmark\">OnPreviewDragLeave(DragEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.DragDrop.PreviewDragLeave</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnPreviewDragOver_System_Windows_DragEventArgs_\" data-linktype=\"self-bookmark\">OnPreviewDragOver(DragEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.DragDrop.PreviewDragOver</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnPreviewDrop_System_Windows_DragEventArgs_\" data-linktype=\"self-bookmark\">OnPreviewDrop(DragEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.DragDrop.PreviewDrop</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnPreviewGiveFeedback_System_Windows_GiveFeedbackEventArgs_\" data-linktype=\"self-bookmark\">OnPreviewGiveFeedback(GiveFeedbackEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.DragDrop.PreviewGiveFeedback</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnPreviewGotKeyboardFocus_System_Windows_Input_KeyboardFocusChangedEventArgs_\" data-linktype=\"self-bookmark\">OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Keyboard.PreviewGotKeyboardFocus</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnPreviewKeyDown_System_Windows_Input_KeyEventArgs_\" data-linktype=\"self-bookmark\">OnPreviewKeyDown(KeyEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Keyboard.PreviewKeyDown</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnPreviewKeyUp_System_Windows_Input_KeyEventArgs_\" data-linktype=\"self-bookmark\">OnPreviewKeyUp(KeyEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Keyboard.PreviewKeyUp</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnPreviewLostKeyboardFocus_System_Windows_Input_KeyboardFocusChangedEventArgs_\" data-linktype=\"self-bookmark\">OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Keyboard.PreviewKeyDown</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnPreviewMouseDown_System_Windows_Input_MouseButtonEventArgs_\" data-linktype=\"self-bookmark\">OnPreviewMouseDown(MouseButtonEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Mouse.PreviewMouseDown</span> attached routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnPreviewMouseLeftButtonDown_System_Windows_Input_MouseButtonEventArgs_\" data-linktype=\"self-bookmark\">OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseLeftButtonDown\" data-linktype=\"relative-path\">PreviewMouseLeftButtonDown</a> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnPreviewMouseLeftButtonUp_System_Windows_Input_MouseButtonEventArgs_\" data-linktype=\"self-bookmark\">OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseLeftButtonUp\" data-linktype=\"relative-path\">PreviewMouseLeftButtonUp</a> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnPreviewMouseMove_System_Windows_Input_MouseEventArgs_\" data-linktype=\"self-bookmark\">OnPreviewMouseMove(MouseEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Mouse.PreviewMouseMove</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnPreviewMouseRightButtonDown_System_Windows_Input_MouseButtonEventArgs_\" data-linktype=\"self-bookmark\">OnPreviewMouseRightButtonDown(MouseButtonEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseRightButtonDown\" data-linktype=\"relative-path\">PreviewMouseRightButtonDown</a> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnPreviewMouseRightButtonUp_System_Windows_Input_MouseButtonEventArgs_\" data-linktype=\"self-bookmark\">OnPreviewMouseRightButtonUp(MouseButtonEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseRightButtonUp\" data-linktype=\"relative-path\">PreviewMouseRightButtonUp</a> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnPreviewMouseUp_System_Windows_Input_MouseButtonEventArgs_\" data-linktype=\"self-bookmark\">OnPreviewMouseUp(MouseButtonEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Mouse.PreviewMouseUp</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnPreviewMouseWheel_System_Windows_Input_MouseWheelEventArgs_\" data-linktype=\"self-bookmark\">OnPreviewMouseWheel(MouseWheelEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Mouse.PreviewMouseWheel</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnPreviewQueryContinueDrag_System_Windows_QueryContinueDragEventArgs_\" data-linktype=\"self-bookmark\">OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.DragDrop.PreviewQueryContinueDrag</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnPreviewStylusButtonDown_System_Windows_Input_StylusButtonEventArgs_\" data-linktype=\"self-bookmark\">OnPreviewStylusButtonDown(StylusButtonEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.PreviewStylusButtonDown</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnPreviewStylusButtonUp_System_Windows_Input_StylusButtonEventArgs_\" data-linktype=\"self-bookmark\">OnPreviewStylusButtonUp(StylusButtonEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.PreviewStylusButtonUp</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnPreviewStylusDown_System_Windows_Input_StylusDownEventArgs_\" data-linktype=\"self-bookmark\">OnPreviewStylusDown(StylusDownEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.PreviewStylusDown</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnPreviewStylusInAirMove_System_Windows_Input_StylusEventArgs_\" data-linktype=\"self-bookmark\">OnPreviewStylusInAirMove(StylusEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.PreviewStylusInAirMove</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnPreviewStylusInRange_System_Windows_Input_StylusEventArgs_\" data-linktype=\"self-bookmark\">OnPreviewStylusInRange(StylusEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.PreviewStylusInRange</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnPreviewStylusMove_System_Windows_Input_StylusEventArgs_\" data-linktype=\"self-bookmark\">OnPreviewStylusMove(StylusEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.PreviewStylusMove</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnPreviewStylusOutOfRange_System_Windows_Input_StylusEventArgs_\" data-linktype=\"self-bookmark\">OnPreviewStylusOutOfRange(StylusEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.PreviewStylusOutOfRange</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnPreviewStylusSystemGesture_System_Windows_Input_StylusSystemGestureEventArgs_\" data-linktype=\"self-bookmark\">OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.PreviewStylusSystemGesture</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnPreviewStylusUp_System_Windows_Input_StylusEventArgs_\" data-linktype=\"self-bookmark\">OnPreviewStylusUp(StylusEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.PreviewStylusUp</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnPreviewTextInput_System_Windows_Input_TextCompositionEventArgs_\" data-linktype=\"self-bookmark\">OnPreviewTextInput(TextCompositionEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.TextCompositionManager.PreviewTextInput</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnPreviewTouchDown_System_Windows_Input_TouchEventArgs_\" data-linktype=\"self-bookmark\">OnPreviewTouchDown(TouchEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides class handling for the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewTouchDown\" data-linktype=\"relative-path\">PreviewTouchDown</a> routed event that occurs when a touch presses this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnPreviewTouchMove_System_Windows_Input_TouchEventArgs_\" data-linktype=\"self-bookmark\">OnPreviewTouchMove(TouchEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides class handling for the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewTouchMove\" data-linktype=\"relative-path\">PreviewTouchMove</a> routed event that occurs when a touch moves while inside this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnPreviewTouchUp_System_Windows_Input_TouchEventArgs_\" data-linktype=\"self-bookmark\">OnPreviewTouchUp(TouchEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides class handling for the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewTouchUp\" data-linktype=\"relative-path\">PreviewTouchUp</a> routed event that occurs when a touch is released inside this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnQueryContinueDrag_System_Windows_QueryContinueDragEventArgs_\" data-linktype=\"self-bookmark\">OnQueryContinueDrag(QueryContinueDragEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.DragDrop.QueryContinueDrag</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnQueryCursor_System_Windows_Input_QueryCursorEventArgs_\" data-linktype=\"self-bookmark\">OnQueryCursor(QueryCursorEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Mouse.QueryCursor</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnRender_System_Windows_Media_DrawingContext_\" data-linktype=\"self-bookmark\">OnRender(DrawingContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, participates in rendering operations that are directed by the layout system. The rendering instructions for this element are not used directly when this method is invoked, and are instead preserved for later asynchronous use by layout and drawing.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnRenderSizeChanged_System_Windows_SizeChangedInfo_\" data-linktype=\"self-bookmark\">OnRenderSizeChanged(SizeChangedInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, participates in rendering operations that are directed by the layout system. This method is invoked after layout update, and before rendering, if the element&#39;s <span class=\"xref\">stem.Windows.UIElement.RenderSize*</span> has changed as a result of layout update.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnStylusButtonDown_System_Windows_Input_StylusButtonEventArgs_\" data-linktype=\"self-bookmark\">OnStylusButtonDown(StylusButtonEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.StylusButtonDown</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnStylusButtonUp_System_Windows_Input_StylusButtonEventArgs_\" data-linktype=\"self-bookmark\">OnStylusButtonUp(StylusButtonEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.StylusButtonUp</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnStylusDown_System_Windows_Input_StylusDownEventArgs_\" data-linktype=\"self-bookmark\">OnStylusDown(StylusDownEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.StylusDown</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnStylusEnter_System_Windows_Input_StylusEventArgs_\" data-linktype=\"self-bookmark\">OnStylusEnter(StylusEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.StylusEnter</span> attached event is raised by this element. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnStylusInAirMove_System_Windows_Input_StylusEventArgs_\" data-linktype=\"self-bookmark\">OnStylusInAirMove(StylusEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.StylusInAirMove</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnStylusInRange_System_Windows_Input_StylusEventArgs_\" data-linktype=\"self-bookmark\">OnStylusInRange(StylusEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.StylusInRange</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnStylusLeave_System_Windows_Input_StylusEventArgs_\" data-linktype=\"self-bookmark\">OnStylusLeave(StylusEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.StylusLeave</span> attached event is raised by this element. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnStylusMove_System_Windows_Input_StylusEventArgs_\" data-linktype=\"self-bookmark\">OnStylusMove(StylusEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.StylusMove</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnStylusOutOfRange_System_Windows_Input_StylusEventArgs_\" data-linktype=\"self-bookmark\">OnStylusOutOfRange(StylusEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.StylusOutOfRange</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnStylusSystemGesture_System_Windows_Input_StylusSystemGestureEventArgs_\" data-linktype=\"self-bookmark\">OnStylusSystemGesture(StylusSystemGestureEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.StylusSystemGesture</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnStylusUp_System_Windows_Input_StylusEventArgs_\" data-linktype=\"self-bookmark\">OnStylusUp(StylusEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.StylusUp</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnTextInput_System_Windows_Input_TextCompositionEventArgs_\" data-linktype=\"self-bookmark\">OnTextInput(TextCompositionEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.TextCompositionManager.TextInput</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnTouchDown_System_Windows_Input_TouchEventArgs_\" data-linktype=\"self-bookmark\">OnTouchDown(TouchEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides class handling for the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_TouchDown\" data-linktype=\"relative-path\">TouchDown</a> routed event that occurs when a touch presses inside this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnTouchEnter_System_Windows_Input_TouchEventArgs_\" data-linktype=\"self-bookmark\">OnTouchEnter(TouchEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides class handling for the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_TouchEnter\" data-linktype=\"relative-path\">TouchEnter</a> routed event that occurs when a touch moves from outside to inside the bounds of this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnTouchLeave_System_Windows_Input_TouchEventArgs_\" data-linktype=\"self-bookmark\">OnTouchLeave(TouchEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides class handling for the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_TouchLeave\" data-linktype=\"relative-path\">TouchLeave</a> routed event that occurs when a touch moves from inside to outside the bounds of this <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnTouchMove_System_Windows_Input_TouchEventArgs_\" data-linktype=\"self-bookmark\">OnTouchMove(TouchEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides class handling for the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_TouchMove\" data-linktype=\"relative-path\">TouchMove</a> routed event that occurs when a touch moves while inside this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnTouchUp_System_Windows_Input_TouchEventArgs_\" data-linktype=\"self-bookmark\">OnTouchUp(TouchEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides class handling for the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_TouchUp\" data-linktype=\"relative-path\">TouchUp</a> routed event that occurs when a touch is released inside this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_OnVisualParentChanged_System_Windows_DependencyObject_\" data-linktype=\"self-bookmark\">OnVisualParentChanged(DependencyObject)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invoked when the parent element of this <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> reports a change to its underlying visual parent.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PredictFocus_System_Windows_Input_FocusNavigationDirection_\" data-linktype=\"self-bookmark\">PredictFocus(FocusNavigationDirection)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, returns the element that would receive focus for a specified focus traversal direction, without actually moving focus to that element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_RaiseEvent_System_Windows_RoutedEventArgs_\" data-linktype=\"self-bookmark\">RaiseEvent(RoutedEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises a specific routed event. The <a class=\"xref\" href=\"system.windows.routedevent\" data-linktype=\"relative-path\">RoutedEvent</a> to be raised is identified within the <a class=\"xref\" href=\"system.windows.routedeventargs\" data-linktype=\"relative-path\">RoutedEventArgs</a> instance that is provided (as the <span class=\"xref\">stem.Windows.RoutedEventArgs.RoutedEvent*</span> property of that event data).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_ReleaseAllTouchCaptures\" data-linktype=\"self-bookmark\">ReleaseAllTouchCaptures()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases all captured touch devices from this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_ReleaseMouseCapture\" data-linktype=\"self-bookmark\">ReleaseMouseCapture()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases the mouse capture, if this element held the capture.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_ReleaseStylusCapture\" data-linktype=\"self-bookmark\">ReleaseStylusCapture()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases the stylus device capture, if this element held the capture.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_ReleaseTouchCapture_System_Windows_Input_TouchDevice_\" data-linktype=\"self-bookmark\">ReleaseTouchCapture(TouchDevice)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Attempts to release the specified touch device from this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_RemoveHandler_System_Windows_RoutedEvent_System_Delegate_\" data-linktype=\"self-bookmark\">RemoveHandler(RoutedEvent,Delegate)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the specified routed event handler from this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_ShouldSerializeCommandBindings\" data-linktype=\"self-bookmark\">ShouldSerializeCommandBindings()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns whether serialization processes should serialize the contents of the <span class=\"xref\">stem.Windows.UIElement.CommandBindings*</span> property on instances of this class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_ShouldSerializeInputBindings\" data-linktype=\"self-bookmark\">ShouldSerializeInputBindings()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns whether serialization processes should serialize the contents of the <span class=\"xref\">stem.Windows.UIElement.InputBindings*</span> property on instances of this class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_TranslatePoint_System_Windows_Point_System_Windows_UIElement_\" data-linktype=\"self-bookmark\">TranslatePoint(Point,UIElement)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Translates a point relative to this element to coordinates that are relative to the specified element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_UpdateLayout\" data-linktype=\"self-bookmark\">UpdateLayout()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Ensures that all visual child elements of this element are properly updated for layout.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Events\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_DragEnter\" data-linktype=\"self-bookmark\">DragEnter</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the input system reports an underlying drag event with this element as the drag target.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_DragLeave\" data-linktype=\"self-bookmark\">DragLeave</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the input system reports an underlying drag event with this element as the drag origin.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_DragOver\" data-linktype=\"self-bookmark\">DragOver</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the input system reports an underlying drag event with this element as the potential drop target.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_Drop\" data-linktype=\"self-bookmark\">Drop</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the input system reports an underlying drop event with this element as the drop target.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_FocusableChanged\" data-linktype=\"self-bookmark\">FocusableChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the value of the <span class=\"xref\">stem.Windows.UIElement.Focusable*</span> property changes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_GiveFeedback\" data-linktype=\"self-bookmark\">GiveFeedback</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the input system reports an underlying drag-and-drop event that involves this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_GotFocus\" data-linktype=\"self-bookmark\">GotFocus</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when this element gets logical focus.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_GotKeyboardFocus\" data-linktype=\"self-bookmark\">GotKeyboardFocus</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the keyboard is focused on this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_GotMouseCapture\" data-linktype=\"self-bookmark\">GotMouseCapture</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when this element captures the mouse.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_GotStylusCapture\" data-linktype=\"self-bookmark\">GotStylusCapture</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when this element captures the stylus.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_GotTouchCapture\" data-linktype=\"self-bookmark\">GotTouchCapture</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when a touch is captured to this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_IsEnabledChanged\" data-linktype=\"self-bookmark\">IsEnabledChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the value of the <span class=\"xref\">stem.Windows.UIElement.IsEnabled*</span> property on this element changes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_IsHitTestVisibleChanged\" data-linktype=\"self-bookmark\">IsHitTestVisibleChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the value of the <span class=\"xref\">stem.Windows.UIElement.IsHitTestVisible*</span> dependency property changes on this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_IsKeyboardFocusedChanged\" data-linktype=\"self-bookmark\">IsKeyboardFocusedChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the value of the <span class=\"xref\">stem.Windows.UIElement.IsKeyboardFocused*</span> property changes on this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_IsKeyboardFocusWithinChanged\" data-linktype=\"self-bookmark\">IsKeyboardFocusWithinChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the value of the IsKeyboardFocusWithinChanged property changes on this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_IsMouseCapturedChanged\" data-linktype=\"self-bookmark\">IsMouseCapturedChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the value of the <span class=\"xref\">stem.Windows.UIElement.IsMouseCaptured*</span> property changes on this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_IsMouseCaptureWithinChanged\" data-linktype=\"self-bookmark\">IsMouseCaptureWithinChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the value of the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsMouseCaptureWithinProperty\" data-linktype=\"relative-path\">IsMouseCaptureWithinProperty</a> changes on this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_IsMouseDirectlyOverChanged\" data-linktype=\"self-bookmark\">IsMouseDirectlyOverChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the value of the <span class=\"xref\">stem.Windows.UIElement.IsMouseDirectlyOver*</span> property changes on this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_IsStylusCapturedChanged\" data-linktype=\"self-bookmark\">IsStylusCapturedChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the value of the <span class=\"xref\">stem.Windows.UIElement.IsStylusCaptured*</span> property changes on this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_IsStylusCaptureWithinChanged\" data-linktype=\"self-bookmark\">IsStylusCaptureWithinChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the value of the <span class=\"xref\">stem.Windows.UIElement.IsStylusCaptureWithin*</span> property changes on this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_IsStylusDirectlyOverChanged\" data-linktype=\"self-bookmark\">IsStylusDirectlyOverChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the value of the <span class=\"xref\">stem.Windows.UIElement.IsStylusDirectlyOver*</span> property changes on this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_IsVisibleChanged\" data-linktype=\"self-bookmark\">IsVisibleChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the value of the <span class=\"xref\">stem.Windows.UIElement.IsVisible*</span> property changes on this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_KeyDown\" data-linktype=\"self-bookmark\">KeyDown</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when a key is pressed while focus is on this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_KeyUp\" data-linktype=\"self-bookmark\">KeyUp</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when a key is released while focus is on this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_LayoutUpdated\" data-linktype=\"self-bookmark\">LayoutUpdated</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the layout of the various visual elements associated with the current <a class=\"xref\" href=\"system.windows.threading.dispatcher\" data-linktype=\"relative-path\">Dispatcher</a> changes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_LostFocus\" data-linktype=\"self-bookmark\">LostFocus</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when this element loses logical focus.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_LostKeyboardFocus\" data-linktype=\"self-bookmark\">LostKeyboardFocus</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the keyboard is no longer focused on this element,.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_LostMouseCapture\" data-linktype=\"self-bookmark\">LostMouseCapture</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when this element loses mouse capture.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_LostStylusCapture\" data-linktype=\"self-bookmark\">LostStylusCapture</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when this element loses stylus capture.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_LostTouchCapture\" data-linktype=\"self-bookmark\">LostTouchCapture</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when this element loses a touch capture.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_ManipulationBoundaryFeedback\" data-linktype=\"self-bookmark\">ManipulationBoundaryFeedback</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the manipulation encounters a boundary.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_ManipulationCompleted\" data-linktype=\"self-bookmark\">ManipulationCompleted</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when a manipulation and inertia on the <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> object is complete.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_ManipulationDelta\" data-linktype=\"self-bookmark\">ManipulationDelta</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the input device changes position during a manipulation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_ManipulationInertiaStarting\" data-linktype=\"self-bookmark\">ManipulationInertiaStarting</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the input device loses contact with the <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> object during a manipulation and inertia begins.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_ManipulationStarted\" data-linktype=\"self-bookmark\">ManipulationStarted</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when an input device begins a manipulation on the <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_ManipulationStarting\" data-linktype=\"self-bookmark\">ManipulationStarting</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the manipulation processor is first created.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_MouseDown\" data-linktype=\"self-bookmark\">MouseDown</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when any mouse button is pressed while the pointer is over this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_MouseEnter\" data-linktype=\"self-bookmark\">MouseEnter</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the mouse pointer enters the bounds of this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_MouseLeave\" data-linktype=\"self-bookmark\">MouseLeave</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the mouse pointer leaves the bounds of this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_MouseLeftButtonDown\" data-linktype=\"self-bookmark\">MouseLeftButtonDown</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the left mouse button is pressed while the mouse pointer is over this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_MouseLeftButtonUp\" data-linktype=\"self-bookmark\">MouseLeftButtonUp</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the left mouse button is released while the mouse pointer is over this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_MouseMove\" data-linktype=\"self-bookmark\">MouseMove</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the mouse pointer moves while over this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_MouseRightButtonDown\" data-linktype=\"self-bookmark\">MouseRightButtonDown</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the right mouse button is pressed while the mouse pointer is over this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_MouseRightButtonUp\" data-linktype=\"self-bookmark\">MouseRightButtonUp</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the right mouse button is released while the mouse pointer is over this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_MouseUp\" data-linktype=\"self-bookmark\">MouseUp</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when any mouse button is released over this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_MouseWheel\" data-linktype=\"self-bookmark\">MouseWheel</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewDragEnter\" data-linktype=\"self-bookmark\">PreviewDragEnter</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the input system reports an underlying drag event with this element as the drag target.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewDragLeave\" data-linktype=\"self-bookmark\">PreviewDragLeave</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the input system reports an underlying drag event with this element as the drag origin.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewDragOver\" data-linktype=\"self-bookmark\">PreviewDragOver</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the input system reports an underlying drag event with this element as the potential drop target.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewDrop\" data-linktype=\"self-bookmark\">PreviewDrop</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the input system reports an underlying drop event with this element as the drop target.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewGiveFeedback\" data-linktype=\"self-bookmark\">PreviewGiveFeedback</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when a drag-and-drop operation is started.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewGotKeyboardFocus\" data-linktype=\"self-bookmark\">PreviewGotKeyboardFocus</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the keyboard is focused on this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewKeyDown\" data-linktype=\"self-bookmark\">PreviewKeyDown</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when a key is pressed while focus is on this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewKeyUp\" data-linktype=\"self-bookmark\">PreviewKeyUp</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when a key is released while focus is on this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewLostKeyboardFocus\" data-linktype=\"self-bookmark\">PreviewLostKeyboardFocus</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the keyboard is no longer focused on this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewMouseDown\" data-linktype=\"self-bookmark\">PreviewMouseDown</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when any mouse button is pressed while the pointer is over this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewMouseLeftButtonDown\" data-linktype=\"self-bookmark\">PreviewMouseLeftButtonDown</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the left mouse button is pressed while the mouse pointer is over this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewMouseLeftButtonUp\" data-linktype=\"self-bookmark\">PreviewMouseLeftButtonUp</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the left mouse button is released while the mouse pointer is over this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewMouseMove\" data-linktype=\"self-bookmark\">PreviewMouseMove</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the mouse pointer moves while the mouse pointer is over this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewMouseRightButtonDown\" data-linktype=\"self-bookmark\">PreviewMouseRightButtonDown</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the right mouse button is pressed while the mouse pointer is over this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewMouseRightButtonUp\" data-linktype=\"self-bookmark\">PreviewMouseRightButtonUp</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the right mouse button is released while the mouse pointer is over this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewMouseUp\" data-linktype=\"self-bookmark\">PreviewMouseUp</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when any mouse button is released while the mouse pointer is over this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewMouseWheel\" data-linktype=\"self-bookmark\">PreviewMouseWheel</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewQueryContinueDrag\" data-linktype=\"self-bookmark\">PreviewQueryContinueDrag</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewStylusButtonDown\" data-linktype=\"self-bookmark\">PreviewStylusButtonDown</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the stylus button is pressed while the pointer is over this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewStylusButtonUp\" data-linktype=\"self-bookmark\">PreviewStylusButtonUp</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the stylus button is released while the pointer is over this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewStylusDown\" data-linktype=\"self-bookmark\">PreviewStylusDown</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the stylus touches the digitizer while it is over this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewStylusInAirMove\" data-linktype=\"self-bookmark\">PreviewStylusInAirMove</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the stylus moves over an element without actually touching the digitizer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewStylusInRange\" data-linktype=\"self-bookmark\">PreviewStylusInRange</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the stylus is close enough to the digitizer to be detected, while over this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewStylusMove\" data-linktype=\"self-bookmark\">PreviewStylusMove</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the stylus moves while over the element. The stylus must move while being detected by the digitizer to raise this event, otherwise, <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewStylusInAirMove\" data-linktype=\"relative-path\">PreviewStylusInAirMove</a> is raised instead.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewStylusOutOfRange\" data-linktype=\"self-bookmark\">PreviewStylusOutOfRange</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the stylus is too far from the digitizer to be detected.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewStylusSystemGesture\" data-linktype=\"self-bookmark\">PreviewStylusSystemGesture</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when a user performs one of several stylus gestures.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewStylusUp\" data-linktype=\"self-bookmark\">PreviewStylusUp</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the user raises the stylus off the digitizer while the stylus is over this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewTextInput\" data-linktype=\"self-bookmark\">PreviewTextInput</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when this element gets text in a device-independent manner.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewTouchDown\" data-linktype=\"self-bookmark\">PreviewTouchDown</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when a finger touches the screen while the finger is over this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewTouchMove\" data-linktype=\"self-bookmark\">PreviewTouchMove</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when a finger moves on the screen while the finger is over this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_PreviewTouchUp\" data-linktype=\"self-bookmark\">PreviewTouchUp</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when a finger is raised off of the screen while the finger is over this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_QueryContinueDrag\" data-linktype=\"self-bookmark\">QueryContinueDrag</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_QueryCursor\" data-linktype=\"self-bookmark\">QueryCursor</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the cursor is requested to display. This event is raised on an element each time that the mouse pointer moves to a new location, which means the cursor object might need to be changed based on its new position.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_StylusButtonDown\" data-linktype=\"self-bookmark\">StylusButtonDown</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the stylus button is pressed while the pointer is over this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_StylusButtonUp\" data-linktype=\"self-bookmark\">StylusButtonUp</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the stylus button is released while the pointer is over this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_StylusDown\" data-linktype=\"self-bookmark\">StylusDown</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the stylus touches the digitizer while the stylus is over this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_StylusEnter\" data-linktype=\"self-bookmark\">StylusEnter</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the stylus enters the bounds of this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_StylusInAirMove\" data-linktype=\"self-bookmark\">StylusInAirMove</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the stylus moves over an element without actually touching the digitizer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_StylusInRange\" data-linktype=\"self-bookmark\">StylusInRange</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the stylus is close enough to the digitizer to be detected, while over this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_StylusLeave\" data-linktype=\"self-bookmark\">StylusLeave</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the stylus leaves the bounds of the element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_StylusMove\" data-linktype=\"self-bookmark\">StylusMove</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the stylus moves over this element. The stylus must move while on the digitizer to raise this event. Otherwise, <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_StylusInAirMove\" data-linktype=\"relative-path\">StylusInAirMove</a> is raised instead.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_StylusOutOfRange\" data-linktype=\"self-bookmark\">StylusOutOfRange</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the stylus is too far from the digitizer to be detected, while over this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_StylusSystemGesture\" data-linktype=\"self-bookmark\">StylusSystemGesture</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when a user performs one of several stylus gestures.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_StylusUp\" data-linktype=\"self-bookmark\">StylusUp</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the user raises the stylus off the digitizer while it is over this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_TextInput\" data-linktype=\"self-bookmark\">TextInput</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when this element gets text in a device-independent manner.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_TouchDown\" data-linktype=\"self-bookmark\">TouchDown</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when a finger touches the screen while the finger is over this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_TouchEnter\" data-linktype=\"self-bookmark\">TouchEnter</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when a touch moves from outside to inside the bounds of this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_TouchLeave\" data-linktype=\"self-bookmark\">TouchLeave</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when a touch moves from inside to outside the bounds of this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_TouchMove\" data-linktype=\"self-bookmark\">TouchMove</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when a finger moves on the screen while the finger is over this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_UIElement_TouchUp\" data-linktype=\"self-bookmark\">TouchUp</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when a finger is raised off of the screen while the finger is over this element.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement__ctor\">\r\n    \r\n            <a id=\"System_Windows_UIElement__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UIElement()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public UIElement ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Creating a new instance that is actually of type <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is uncommon in application code, because <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is a base element. See <a href=\"../Topic/Base%20Elements%20Overview.md\" data-linktype=\"relative-path\">Base Elements Overview</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"fields\">\r\n        <h2>Fields\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_AllowDropProperty\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AllowDropProperty</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.AllowDrop*</span> dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.DependencyProperty AllowDropProperty;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_AreAnyTouchesCapturedProperty\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AreAnyTouchesCapturedProperty</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.AreAnyTouchesCaptured*</span> dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedProperty;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_AreAnyTouchesCapturedWithinProperty\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AreAnyTouchesCapturedWithinProperty</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.AreAnyTouchesCapturedWithin*</span> dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_AreAnyTouchesDirectlyOverProperty\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AreAnyTouchesDirectlyOverProperty</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.AreAnyTouchesDirectlyOver*</span> dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_AreAnyTouchesOverProperty\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AreAnyTouchesOverProperty</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.AreAnyTouchesOver*</span> dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.DependencyProperty AreAnyTouchesOverProperty;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_BitmapEffectInputProperty\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BitmapEffectInputProperty</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.BitmapEffectInput*</span> dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.DependencyProperty BitmapEffectInputProperty;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_BitmapEffectProperty\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BitmapEffectProperty</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.BitmapEffect*</span> dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.DependencyProperty BitmapEffectProperty;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_CacheModeProperty\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CacheModeProperty</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.CacheMode*</span> dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.DependencyProperty CacheModeProperty;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_ClipProperty\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ClipProperty</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.Clip*</span> dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.DependencyProperty ClipProperty;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_ClipToBoundsProperty\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ClipToBoundsProperty</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.ClipToBounds*</span> dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.DependencyProperty ClipToBoundsProperty;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_DragEnterEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DragEnterEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_DragEnter\" data-linktype=\"relative-path\">DragEnter</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent DragEnterEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_DragLeaveEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DragLeaveEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_DragLeave\" data-linktype=\"relative-path\">DragLeave</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent DragLeaveEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_DragOverEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DragOverEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_DragOver\" data-linktype=\"relative-path\">DragOver</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent DragOverEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_DropEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DropEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_Drop\" data-linktype=\"relative-path\">Drop</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent DropEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_EffectProperty\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EffectProperty</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.Effect*</span> dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.DependencyProperty EffectProperty;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_FocusableProperty\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FocusableProperty</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.Focusable*</span> dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.DependencyProperty FocusableProperty;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_GiveFeedbackEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GiveFeedbackEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_GiveFeedback\" data-linktype=\"relative-path\">GiveFeedback</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent GiveFeedbackEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_GotFocusEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GotFocusEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_GotFocus\" data-linktype=\"relative-path\">GotFocus</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent GotFocusEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_GotKeyboardFocusEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GotKeyboardFocusEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_GotKeyboardFocus\" data-linktype=\"relative-path\">GotKeyboardFocus</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent GotKeyboardFocusEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_GotMouseCaptureEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GotMouseCaptureEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_GotMouseCapture\" data-linktype=\"relative-path\">GotMouseCapture</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent GotMouseCaptureEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_GotStylusCaptureEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GotStylusCaptureEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_GotStylusCapture\" data-linktype=\"relative-path\">GotStylusCapture</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent GotStylusCaptureEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_GotTouchCaptureEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GotTouchCaptureEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_GotTouchCapture\" data-linktype=\"relative-path\">GotTouchCapture</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent GotTouchCaptureEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_IsEnabledProperty\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsEnabledProperty</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.IsEnabled*</span> dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.DependencyProperty IsEnabledProperty;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_IsFocusedProperty\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsFocusedProperty</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.IsFocused*</span> dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.DependencyProperty IsFocusedProperty;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_IsHitTestVisibleProperty\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsHitTestVisibleProperty</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.IsHitTestVisible*</span> dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.DependencyProperty IsHitTestVisibleProperty;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_IsKeyboardFocusedProperty\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsKeyboardFocusedProperty</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.IsKeyboardFocused*</span> dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.DependencyProperty IsKeyboardFocusedProperty;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_IsKeyboardFocusWithinProperty\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsKeyboardFocusWithinProperty</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.IsKeyboardFocusWithin*</span> dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.DependencyProperty IsKeyboardFocusWithinProperty;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_IsManipulationEnabledProperty\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsManipulationEnabledProperty</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.IsManipulationEnabled*</span> dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.DependencyProperty IsManipulationEnabledProperty;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_IsMouseCapturedProperty\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsMouseCapturedProperty</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.IsMouseCaptured*</span> dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.DependencyProperty IsMouseCapturedProperty;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_IsMouseCaptureWithinProperty\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsMouseCaptureWithinProperty</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.IsMouseCaptureWithin*</span> dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.DependencyProperty IsMouseCaptureWithinProperty;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_IsMouseDirectlyOverProperty\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsMouseDirectlyOverProperty</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.IsMouseDirectlyOver*</span> dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.DependencyProperty IsMouseDirectlyOverProperty;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_IsMouseOverProperty\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsMouseOverProperty</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.IsMouseOver*</span> dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.DependencyProperty IsMouseOverProperty;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_IsStylusCapturedProperty\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsStylusCapturedProperty</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.IsStylusCaptured*</span> dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.DependencyProperty IsStylusCapturedProperty;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_IsStylusCaptureWithinProperty\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsStylusCaptureWithinProperty</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.IsStylusCaptureWithin*</span> dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.DependencyProperty IsStylusCaptureWithinProperty;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_IsStylusDirectlyOverProperty\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsStylusDirectlyOverProperty</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.IsStylusDirectlyOver*</span> dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.DependencyProperty IsStylusDirectlyOverProperty;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_IsStylusOverProperty\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsStylusOverProperty</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.IsStylusOver*</span> dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.DependencyProperty IsStylusOverProperty;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_IsVisibleProperty\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsVisibleProperty</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.IsVisible*</span> dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.DependencyProperty IsVisibleProperty;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_KeyDownEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">KeyDownEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_KeyDown\" data-linktype=\"relative-path\">KeyDown</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent KeyDownEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_KeyUpEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">KeyUpEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_KeyUp\" data-linktype=\"relative-path\">KeyUp</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent KeyUpEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_LostFocusEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LostFocusEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_LostFocus\" data-linktype=\"relative-path\">LostFocus</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent LostFocusEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_LostKeyboardFocusEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LostKeyboardFocusEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_LostKeyboardFocus\" data-linktype=\"relative-path\">LostKeyboardFocus</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent LostKeyboardFocusEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_LostMouseCaptureEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LostMouseCaptureEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_LostMouseCapture\" data-linktype=\"relative-path\">LostMouseCapture</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent LostMouseCaptureEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_LostStylusCaptureEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LostStylusCaptureEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_LostStylusCapture\" data-linktype=\"relative-path\">LostStylusCapture</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent LostStylusCaptureEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_LostTouchCaptureEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LostTouchCaptureEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_LostTouchCapture\" data-linktype=\"relative-path\">LostTouchCapture</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent LostTouchCaptureEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_ManipulationBoundaryFeedbackEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ManipulationBoundaryFeedbackEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationBoundaryFeedback\" data-linktype=\"relative-path\">ManipulationBoundaryFeedback</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent ManipulationBoundaryFeedbackEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_ManipulationCompletedEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ManipulationCompletedEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationCompleted\" data-linktype=\"relative-path\">ManipulationCompleted</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent ManipulationCompletedEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_ManipulationDeltaEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ManipulationDeltaEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationDelta\" data-linktype=\"relative-path\">ManipulationDelta</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent ManipulationDeltaEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_ManipulationInertiaStartingEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ManipulationInertiaStartingEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationInertiaStarting\" data-linktype=\"relative-path\">ManipulationInertiaStarting</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent ManipulationInertiaStartingEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_ManipulationStartedEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ManipulationStartedEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationStarted\" data-linktype=\"relative-path\">ManipulationStarted</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent ManipulationStartedEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_ManipulationStartingEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ManipulationStartingEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationStarting\" data-linktype=\"relative-path\">ManipulationStarting</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent ManipulationStartingEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_MouseDownEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MouseDownEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseDown\" data-linktype=\"relative-path\">MouseDown</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent MouseDownEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_MouseEnterEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MouseEnterEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseEnter\" data-linktype=\"relative-path\">MouseEnter</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent MouseEnterEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_MouseLeaveEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MouseLeaveEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseLeave\" data-linktype=\"relative-path\">MouseLeave</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent MouseLeaveEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_MouseLeftButtonDownEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MouseLeftButtonDownEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseLeftButtonDown\" data-linktype=\"relative-path\">MouseLeftButtonDown</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent MouseLeftButtonDownEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_MouseLeftButtonUpEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MouseLeftButtonUpEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseLeftButtonUp\" data-linktype=\"relative-path\">MouseLeftButtonUp</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent MouseLeftButtonUpEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_MouseMoveEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MouseMoveEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseMove\" data-linktype=\"relative-path\">MouseMove</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent MouseMoveEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_MouseRightButtonDownEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MouseRightButtonDownEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseRightButtonDown\" data-linktype=\"relative-path\">MouseRightButtonDown</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent MouseRightButtonDownEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_MouseRightButtonUpEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MouseRightButtonUpEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseRightButtonUp\" data-linktype=\"relative-path\">MouseRightButtonUp</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent MouseRightButtonUpEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_MouseUpEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MouseUpEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseUp\" data-linktype=\"relative-path\">MouseUp</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent MouseUpEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_MouseWheelEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MouseWheelEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseWheel\" data-linktype=\"relative-path\">MouseWheel</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent MouseWheelEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OpacityMaskProperty\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OpacityMaskProperty</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.OpacityMask*</span> dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.DependencyProperty OpacityMaskProperty;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OpacityProperty\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OpacityProperty</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.Opacity*</span> dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.DependencyProperty OpacityProperty;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewDragEnterEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewDragEnterEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewDragEnter\" data-linktype=\"relative-path\">PreviewDragEnter</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent PreviewDragEnterEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewDragLeaveEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewDragLeaveEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewDragLeave\" data-linktype=\"relative-path\">PreviewDragLeave</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent PreviewDragLeaveEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewDragOverEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewDragOverEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewDragOver\" data-linktype=\"relative-path\">PreviewDragOver</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent PreviewDragOverEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewDropEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewDropEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewDrop\" data-linktype=\"relative-path\">PreviewDrop</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent PreviewDropEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewGiveFeedbackEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewGiveFeedbackEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewGiveFeedback\" data-linktype=\"relative-path\">PreviewGiveFeedback</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent PreviewGiveFeedbackEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewGotKeyboardFocusEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewGotKeyboardFocusEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewGotKeyboardFocus\" data-linktype=\"relative-path\">PreviewGotKeyboardFocus</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewKeyDownEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewKeyDownEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewKeyDown\" data-linktype=\"relative-path\">PreviewKeyDown</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent PreviewKeyDownEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewKeyUpEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewKeyUpEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewKeyUp\" data-linktype=\"relative-path\">PreviewKeyUp</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent PreviewKeyUpEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewLostKeyboardFocusEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewLostKeyboardFocusEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewLostKeyboardFocus\" data-linktype=\"relative-path\">PreviewLostKeyboardFocus</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewMouseDownEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewMouseDownEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseDown\" data-linktype=\"relative-path\">PreviewMouseDown</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent PreviewMouseDownEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewMouseLeftButtonDownEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewMouseLeftButtonDownEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseLeftButtonDown\" data-linktype=\"relative-path\">PreviewMouseLeftButtonDown</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewMouseLeftButtonUpEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewMouseLeftButtonUpEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseLeftButtonUp\" data-linktype=\"relative-path\">PreviewMouseLeftButtonUp</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewMouseMoveEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewMouseMoveEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseMove\" data-linktype=\"relative-path\">PreviewMouseMove</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent PreviewMouseMoveEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewMouseRightButtonDownEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewMouseRightButtonDownEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseRightButtonDown\" data-linktype=\"relative-path\">PreviewMouseRightButtonDown</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewMouseRightButtonUpEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewMouseRightButtonUpEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseRightButtonUp\" data-linktype=\"relative-path\">PreviewMouseRightButtonUp</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewMouseUpEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewMouseUpEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseUp\" data-linktype=\"relative-path\">PreviewMouseUp</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent PreviewMouseUpEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewMouseWheelEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewMouseWheelEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseWheel\" data-linktype=\"relative-path\">PreviewMouseWheel</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent PreviewMouseWheelEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewQueryContinueDragEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewQueryContinueDragEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewQueryContinueDrag\" data-linktype=\"relative-path\">PreviewQueryContinueDrag</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent PreviewQueryContinueDragEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewStylusButtonDownEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewStylusButtonDownEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewStylusButtonDown\" data-linktype=\"relative-path\">PreviewStylusButtonDown</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent PreviewStylusButtonDownEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewStylusButtonUpEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewStylusButtonUpEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewStylusButtonUp\" data-linktype=\"relative-path\">PreviewStylusButtonUp</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent PreviewStylusButtonUpEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewStylusDownEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewStylusDownEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewStylusDown\" data-linktype=\"relative-path\">PreviewStylusDown</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent PreviewStylusDownEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewStylusInAirMoveEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewStylusInAirMoveEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewStylusInAirMove\" data-linktype=\"relative-path\">PreviewStylusInAirMove</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent PreviewStylusInAirMoveEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewStylusInRangeEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewStylusInRangeEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewStylusInRange\" data-linktype=\"relative-path\">PreviewStylusInRange</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent PreviewStylusInRangeEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewStylusMoveEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewStylusMoveEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewStylusMove\" data-linktype=\"relative-path\">PreviewStylusMove</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent PreviewStylusMoveEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewStylusOutOfRangeEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewStylusOutOfRangeEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewStylusOutOfRange\" data-linktype=\"relative-path\">PreviewStylusOutOfRange</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewStylusSystemGestureEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewStylusSystemGestureEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewStylusSystemGesture\" data-linktype=\"relative-path\">PreviewStylusSystemGesture</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent PreviewStylusSystemGestureEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewStylusUpEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewStylusUpEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewStylusUp\" data-linktype=\"relative-path\">PreviewStylusUp</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent PreviewStylusUpEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewTextInputEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewTextInputEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewTextInput\" data-linktype=\"relative-path\">PreviewTextInput</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent PreviewTextInputEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewTouchDownEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewTouchDownEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewTouchDown\" data-linktype=\"relative-path\">PreviewTouchDown</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent PreviewTouchDownEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewTouchMoveEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewTouchMoveEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewTouchMove\" data-linktype=\"relative-path\">PreviewTouchMove</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent PreviewTouchMoveEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewTouchUpEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewTouchUpEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewTouchUp\" data-linktype=\"relative-path\">PreviewTouchUp</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent PreviewTouchUpEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_QueryContinueDragEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">QueryContinueDragEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_QueryContinueDrag\" data-linktype=\"relative-path\">QueryContinueDrag</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent QueryContinueDragEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_QueryCursorEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">QueryCursorEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_QueryCursor\" data-linktype=\"relative-path\">QueryCursor</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent QueryCursorEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_RenderTransformOriginProperty\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RenderTransformOriginProperty</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.RenderTransformOrigin*</span> dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.DependencyProperty RenderTransformOriginProperty;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_RenderTransformProperty\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RenderTransformProperty</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.RenderTransform*</span> dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.DependencyProperty RenderTransformProperty;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_SnapsToDevicePixelsProperty\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SnapsToDevicePixelsProperty</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.SnapsToDevicePixels*</span> dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.DependencyProperty SnapsToDevicePixelsProperty;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_StylusButtonDownEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StylusButtonDownEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_StylusButtonDown\" data-linktype=\"relative-path\">StylusButtonDown</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent StylusButtonDownEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_StylusButtonUpEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StylusButtonUpEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_StylusButtonUp\" data-linktype=\"relative-path\">StylusButtonUp</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent StylusButtonUpEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_StylusDownEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StylusDownEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_StylusDown\" data-linktype=\"relative-path\">StylusDown</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent StylusDownEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_StylusEnterEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StylusEnterEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_StylusEnter\" data-linktype=\"relative-path\">StylusEnter</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent StylusEnterEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_StylusInAirMoveEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StylusInAirMoveEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_StylusInAirMove\" data-linktype=\"relative-path\">StylusInAirMove</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent StylusInAirMoveEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_StylusInRangeEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StylusInRangeEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_StylusInRange\" data-linktype=\"relative-path\">StylusInRange</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent StylusInRangeEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_StylusLeaveEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StylusLeaveEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_StylusLeave\" data-linktype=\"relative-path\">StylusLeave</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent StylusLeaveEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_StylusMoveEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StylusMoveEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_StylusMove\" data-linktype=\"relative-path\">StylusMove</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent StylusMoveEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_StylusOutOfRangeEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StylusOutOfRangeEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_StylusOutOfRange\" data-linktype=\"relative-path\">StylusOutOfRange</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent StylusOutOfRangeEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_StylusSystemGestureEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StylusSystemGestureEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_StylusSystemGesture\" data-linktype=\"relative-path\">StylusSystemGesture</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent StylusSystemGestureEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_StylusUpEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StylusUpEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_StylusUp\" data-linktype=\"relative-path\">StylusUp</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent StylusUpEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_TextInputEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TextInputEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_TextInput\" data-linktype=\"relative-path\">TextInput</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent TextInputEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  </p>\n<p> For more information about registering routed events, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterRoutedEvent_\" data-linktype=\"relative-path\">RegisterRoutedEvent</a>. For more information about using routed event identifiers to add class handlers, see <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_TouchDownEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TouchDownEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_TouchDown\" data-linktype=\"relative-path\">TouchDown</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent TouchDownEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_TouchEnterEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TouchEnterEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_TouchEnter\" data-linktype=\"relative-path\">TouchEnter</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent TouchEnterEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_TouchLeaveEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TouchLeaveEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_TouchLeave\" data-linktype=\"relative-path\">TouchLeave</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent TouchLeaveEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_TouchMoveEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TouchMoveEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_TouchMove\" data-linktype=\"relative-path\">TouchMove</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent TouchMoveEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_TouchUpEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TouchUpEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_TouchUp\" data-linktype=\"relative-path\">TouchUp</a> routed event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.RoutedEvent TouchUpEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_UidProperty\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UidProperty</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.Uid*</span> dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.DependencyProperty UidProperty;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_VisibilityProperty\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">VisibilityProperty</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <span class=\"xref\">stem.Windows.UIElement.Visibility*</span> dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.DependencyProperty VisibilityProperty;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_AllowDrop\">\r\n    \r\n            <a id=\"System_Windows_UIElement_AllowDrop_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AllowDrop</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether this element can be used as the target of a drag-and-drop operation.  This is a dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool AllowDrop { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if this element can be used as the target of a drag-and-drop operation; otherwise, <code>false</code>. The default value is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Drag-and-drop operations are not enabled by default, and must be enabled deliberately by setting AllowDrop to <code>true</code>. Beyond this basic setting, drag-and-drop behavior is entirely implementation specific and is not defined by <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> or any other base element class. Certain controls, for example, <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a>, do have a default behavior. For more information on drag and drop, see <a href=\"../Topic/Drag%20and%20Drop%20Overview.md\" data-linktype=\"relative-path\">Drag and Drop Overview</a>.  </p>\n<p> <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a> overrides the metadata for this dependency property in its implementation. Specifically, <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a> designates this property to allow property value inheritance (<a class=\"xref\" href=\"system.windows.frameworkpropertymetadata#System_Windows_FrameworkPropertyMetadata_Inherits_\" data-linktype=\"relative-path\">Inherits</a> is <code>true</code> in metadata). Property value inheritance in this context means that if there are child elements with no other value for AllowDrop assigned through local values or styles, the value of the nearest parent element with this value assigned (again, either in styles, by default values, or a local value), then the value from the parent element will be assigned to all previously unassigned child elements by the property system. In practice this means that you can specify whether to allow drop operations at the root element, and that value will propagate to all child elements that have not specifically assigned it as <code>false</code>.  </p>\n<p><a name=\"dependencyPropertyInfo_AllowDrop\"></a>   </p>\n<h2 id=\"dependency-property-information\">Dependency Property Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_AllowDropProperty\" data-linktype=\"relative-path\">AllowDropProperty</a></td>\n</tr>\n<tr>\n<td>Metadata properties set to <code>true</code></td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following markup example sets the AllowDrop property <code>true</code> using an attribute on a <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a>, as well as setting some other related properties that in aggregate enable that <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a> to be the target of a multiline text data object when it is dragged in. For the complete sample, see <a href=\"http://msdn.microsoft.com/en-us/be90d645-dd61-4f53-93bb-87902d086ef7\" data-linktype=\"external\">Load a Dropped File Sample</a>.  </p>\n<pre><code class=\"lang-xml\" name=\"DragDrop_DropOpenTextFile#UIElementAllowDrop\">&lt;TextBox\n  Name=&quot;tbDisplayFileContents&quot; \n  Grid.Row=&quot;1&quot; \n  AcceptsReturn=&quot;True&quot; AcceptsTab=&quot;True&quot; \n  AllowDrop=&quot;True&quot; \n  BorderThickness=&quot;1&quot; BorderBrush=&quot;Black&quot; \n  HorizontalScrollBarVisibility=&quot;Auto&quot; VerticalScrollBarVisibility=&quot;Auto&quot;\n  \n  PreviewDragOver=&quot;ehDragOver&quot; PreviewDrop=&quot;ehDrop&quot;\n/&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_AreAnyTouchesCaptured\">\r\n    \r\n            <a id=\"System_Windows_UIElement_AreAnyTouchesCaptured_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AreAnyTouchesCaptured</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether at least one touch is captured to this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool AreAnyTouchesCaptured { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if at least one touch is captured to this element; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_AreAnyTouchesCapturedWithin\">\r\n    \r\n            <a id=\"System_Windows_UIElement_AreAnyTouchesCapturedWithin_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AreAnyTouchesCapturedWithin</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether at least one touch is captured to this element or to any child elements in its visual tree.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool AreAnyTouchesCapturedWithin { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if at least one touch is captured to this element or any child elements in its visual tree; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_AreAnyTouchesDirectlyOver\">\r\n    \r\n            <a id=\"System_Windows_UIElement_AreAnyTouchesDirectlyOver_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AreAnyTouchesDirectlyOver</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether at least one touch is pressed over this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool AreAnyTouchesDirectlyOver { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if at least one touch is pressed over this element; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_AreAnyTouchesOver\">\r\n    \r\n            <a id=\"System_Windows_UIElement_AreAnyTouchesOver_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AreAnyTouchesOver</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether at least one touch is pressed over this element or any child elements in its visual tree.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool AreAnyTouchesOver { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if at least one touch is pressed over this element or any child elements in its visual tree; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_BitmapEffect\">\r\n    \r\n            <a id=\"System_Windows_UIElement_BitmapEffect_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BitmapEffect</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a bitmap effect that applies directly to the rendered content for this element.  This is a dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Media.Effects.BitmapEffect BitmapEffect { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.effects.bitmapeffect\" data-linktype=\"relative-path\">BitmapEffect</a></div>\r\n                  </div>\r\n                  <p>The bitmap effect to apply.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.windows.media.effects.bitmapeffect\" data-linktype=\"relative-path\">BitmapEffect</a> is an abstract type, therefore the XAML usage requires an implemented derived class of <a class=\"xref\" href=\"system.windows.media.effects.bitmapeffect\" data-linktype=\"relative-path\">BitmapEffect</a>, such as <a class=\"xref\" href=\"system.windows.media.effects.outerglowbitmapeffect\" data-linktype=\"relative-path\">OuterGlowBitmapEffect</a>. Note that one implemented derived class is a collection type that allows you to specify more than one sequential <a class=\"xref\" href=\"system.windows.media.effects.bitmapeffect\" data-linktype=\"relative-path\">BitmapEffect</a>, using a nested tag syntax.  </p>\n<p> No existing derived class of <a class=\"xref\" href=\"system.windows.media.effects.bitmapeffect\" data-linktype=\"relative-path\">BitmapEffect</a> supports a type converter, so the XAML syntax that you use for this property is generally property element syntax.  </p>\n<p><a name=\"dependencyPropertyInfo_BitmapEffect\"></a>   </p>\n<h2 id=\"dependency-property-information\">Dependency Property Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_BitmapEffectProperty\" data-linktype=\"relative-path\">BitmapEffectProperty</a></td>\n</tr>\n<tr>\n<td>Metadata properties set to <code>true</code></td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example sets a bitmap effect, using <a class=\"xref\" href=\"system.windows.media.effects.blurbitmapeffect\" data-linktype=\"relative-path\">BlurBitmapEffect</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"EffectsGallery_snip#CodeBehindBlurCodeBehindExampleInline\">// Get a reference to the Button.\nButton myButton = (Button)sender;\n\n// Initialize a new BlurBitmapEffect that will be applied\n// to the Button.\nBlurBitmapEffect myBlurEffect = new BlurBitmapEffect();\n\n// Set the Radius property of the blur. This determines how \n// blurry the effect will be. The larger the radius, the more\n// blurring. \nmyBlurEffect.Radius = 10;\n\n// Set the KernelType property of the blur. A KernalType of &quot;Box&quot;\n// creates less blur than the Gaussian kernal type.\nmyBlurEffect.KernelType = KernelType.Box;\n\n// Apply the bitmap effect to the Button.\nmyButton.BitmapEffect = myBlurEffect;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_BitmapEffectInput\">\r\n    \r\n            <a id=\"System_Windows_UIElement_BitmapEffectInput_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BitmapEffectInput</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets an input source for the bitmap effect that applies directly to the rendered content for this element.  This is a dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Media.Effects.BitmapEffectInput BitmapEffectInput { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.effects.bitmapeffectinput\" data-linktype=\"relative-path\">BitmapEffectInput</a></div>\r\n                  </div>\r\n                  <p>The source for bitmap effects.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a name=\"dependencyPropertyInfo_BitmapEffectInput\"></a>   </p>\n<h2 id=\"dependency-property-information\">Dependency Property Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_BitmapEffectInputProperty\" data-linktype=\"relative-path\">BitmapEffectInputProperty</a></td>\n</tr>\n<tr>\n<td>Metadata properties set to <code>true</code></td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_CacheMode\">\r\n    \r\n            <a id=\"System_Windows_UIElement_CacheMode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CacheMode</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a cached representation of the <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Media.CacheMode CacheMode { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.cachemode\" data-linktype=\"relative-path\">CacheMode</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.media.cachemode\" data-linktype=\"relative-path\">CacheMode</a> that holds a cached representation of the <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Set the CacheMode property when you need to increase performance for content that is time consuming to render. For more information, see <a class=\"xref\" href=\"system.windows.media.bitmapcache\" data-linktype=\"relative-path\">BitmapCache</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_Clip\">\r\n    \r\n            <a id=\"System_Windows_UIElement_Clip_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clip</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the geometry used to define the outline of the contents of an element.  This is a dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Media.Geometry Clip { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.geometry\" data-linktype=\"relative-path\">Geometry</a></div>\r\n                  </div>\r\n                  <p>The geometry to be used for clipping area sizing. The default is a null <a class=\"xref\" href=\"system.windows.media.geometry\" data-linktype=\"relative-path\">Geometry</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Elements outside the geometry will be visually clipped in the rendered layout. The geometry does not have to be rectangular.  </p>\n<p><a name=\"dependencyPropertyInfo_Clip\"></a>   </p>\n<h2 id=\"dependency-property-information\">Dependency Property Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ClipProperty\" data-linktype=\"relative-path\">ClipProperty</a></td>\n</tr>\n<tr>\n<td>Metadata properties set to <code>true</code></td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example shows how to define a framework element&#39;sClipregion. To define a clip, use a <a class=\"xref\" href=\"system.windows.media.geometry\" data-linktype=\"relative-path\">Geometry</a> (for example, an <a class=\"xref\" href=\"system.windows.media.ellipsegeometry\" data-linktype=\"relative-path\">EllipseGeometry</a>to set the element&#39;s Clipproperty. Only the area that is within the region of the geometry will be visible.  </p>\n<p> The following example shows an <a class=\"xref\" href=\"system.windows.controls.image\" data-linktype=\"relative-path\">Image</a>element without a defined clip region. Because no clip region is defined, the entire image is displayed.  </p>\n<pre><code class=\"lang-xml\" name=\"ClipPathExample#2\">&lt;Image Source=&quot;sampleImages\\Waterlilies.jpg&quot; \n  Width=&quot;200&quot; Height=&quot;150&quot; HorizontalAlignment=&quot;Left&quot; /&gt;\n</code></pre><p> <img src=\"add/media/mil-task-clip-region-noclip.png\" alt=\"An object before applying a clip region\" title=\"An object before applying a clip region\" data-linktype=\"relative-path\"><br>Image with No Clip Region  </p>\n<p> In the next example, an identical Image is created, except that it has a defined clip region. Only the part of the image that is within the area the <a class=\"xref\" href=\"system.windows.media.ellipsegeometry\" data-linktype=\"relative-path\">EllipseGeometry</a>will be displayed.  </p>\n<pre><code class=\"lang-xml\" name=\"ClipPathExample#4\">&lt;Image \n  Source=&quot;sampleImages\\Waterlilies.jpg&quot; \n  Width=&quot;200&quot; Height=&quot;150&quot; HorizontalAlignment=&quot;Left&quot;&gt;\n  &lt;Image.Clip&gt;\n    &lt;EllipseGeometry\n      RadiusX=&quot;100&quot;\n      RadiusY=&quot;75&quot;\n      Center=&quot;100,75&quot;/&gt;\n  &lt;/Image.Clip&gt;\n&lt;/Image&gt;\n</code></pre><p> <img src=\"add/media/mil-task-clip-region-ellispe.png\" alt=\"A clipped object\" title=\"A clipped object\" data-linktype=\"relative-path\"><br>Image with an Elliptical Clip Region  </p>\n<p> The following example shows how animate a framework element&#39;s Clip region. In this example, an <a class=\"xref\" href=\"system.windows.media.ellipsegeometry\" data-linktype=\"relative-path\">EllipseGeometry</a> is used to define an elliptical clip region for an <a class=\"xref\" href=\"system.windows.controls.image\" data-linktype=\"relative-path\">Image</a> element. A <a class=\"xref\" href=\"system.windows.media.animation.pointanimation\" data-linktype=\"relative-path\">PointAnimation</a> animates the ellipse geometry&#39;s <a class=\"xref\" href=\"system.windows.media.ellipsegeometry#System_Windows_Media_EllipseGeometry_Center_\" data-linktype=\"relative-path\">Center</a> property from (0, 0) to (200, 150). The animation starts playing after the image is loaded and repeats indefinitely.  </p>\n<pre><code class=\"lang-xml\" name=\"ClipPathExample#5\">&lt;Image\n  Source=&quot;sampleImages\\Waterlilies.jpg&quot; \n  Width=&quot;200&quot; Height=&quot;150&quot; HorizontalAlignment=&quot;Left&quot;&gt;\n  &lt;Image.Clip&gt;\n    &lt;EllipseGeometry x:Name=&quot;MyEllipseGeometry1&quot;\n      RadiusX=&quot;100&quot;\n      RadiusY=&quot;75&quot;\n      Center=&quot;100,75&quot;/&gt;\n  &lt;/Image.Clip&gt;\n  &lt;Image.Triggers&gt;\n    &lt;EventTrigger RoutedEvent=&quot;Image.Loaded&quot;&gt;\n      &lt;BeginStoryboard&gt;\n        &lt;Storyboard&gt;\n          &lt;PointAnimation \n            Storyboard.TargetName=&quot;MyEllipseGeometry1&quot; \n            Storyboard.TargetProperty=&quot;(EllipseGeometry.Center)&quot;\n            From=&quot;0,0&quot; To=&quot;200,150&quot; Duration=&quot;0:0:3&quot; RepeatBehavior=&quot;Forever&quot; \n            AutoReverse=&quot;True&quot; /&gt;\n          &lt;/Storyboard&gt;\n      &lt;/BeginStoryboard&gt;\n    &lt;/EventTrigger&gt;\n  &lt;/Image.Triggers&gt;\n&lt;/Image&gt; \n</code></pre><p> For the full sample, see the <a href=\"http://msdn.microsoft.com/en-us/83043a0b-f824-445f-9675-103280c5ca67\" data-linktype=\"external\">Clip Region Sample</a>.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_ClipToBounds\">\r\n    \r\n            <a id=\"System_Windows_UIElement_ClipToBounds_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ClipToBounds</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether to clip the content of this element (or content coming from the child elements of this element) to fit into the size of the containing element.   This is a dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool ClipToBounds { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the content should be clipped; otherwise, <code>false</code>. The default value is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For child elements, ClipToBounds has different effects on layout behaviors depending on whether the height and width of the parent element are being determined by <a class=\"xref\" href=\"system.windows.frameworkelement#System_Windows_FrameworkElement_Height_\" data-linktype=\"relative-path\">Height</a> / <a class=\"xref\" href=\"system.windows.frameworkelement#System_Windows_FrameworkElement_Width_\" data-linktype=\"relative-path\">Width</a> or <a class=\"xref\" href=\"system.windows.frameworkelement#System_Windows_FrameworkElement_MaxHeight_\" data-linktype=\"relative-path\">MaxHeight</a> / <a class=\"xref\" href=\"system.windows.frameworkelement#System_Windows_FrameworkElement_MaxWidth_\" data-linktype=\"relative-path\">MaxWidth</a>. <a class=\"xref\" href=\"system.windows.frameworkelement#System_Windows_FrameworkElement_MaxHeight_\" data-linktype=\"relative-path\">MaxHeight</a> / <a class=\"xref\" href=\"system.windows.frameworkelement#System_Windows_FrameworkElement_MaxWidth_\" data-linktype=\"relative-path\">MaxWidth</a> of the parent element are always respected regardless of the value of ClipToBounds and the effective clipping will always clip the content based on these maximums. The parent&#39;s <a class=\"xref\" href=\"system.windows.frameworkelement#System_Windows_FrameworkElement_Height_\" data-linktype=\"relative-path\">Height</a> / <a class=\"xref\" href=\"system.windows.frameworkelement#System_Windows_FrameworkElement_Width_\" data-linktype=\"relative-path\">Width</a> settings will not clip the content when ClipToBounds is <code>false</code>, but will clip the content if ClipToBounds is <code>true</code>.  </p>\n<p> Note that defaulting to <code>false</code> is the general behavior as implemented in the <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> class. It is possible for any given element that derives from <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> to override the dependency property metadata for this property in that instance to default to <code>true</code> instead. Several existing derived classes override this metadata and/or adjust the dependency property default value.  </p>\n<p> <a class=\"xref\" href=\"system.windows.controls.inkcanvas\" data-linktype=\"relative-path\">InkCanvas</a>, <a class=\"xref\" href=\"system.windows.controls.inkpresenter\" data-linktype=\"relative-path\">InkPresenter</a>, and <a class=\"xref\" href=\"system.windows.controls.primitives.popup\" data-linktype=\"relative-path\">Popup</a> each override the default value to be <code>true</code>.  </p>\n<p> <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a> overrides the metadata for this dependency property. Specifically, <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a> designates this property to allow property value inheritance (<a class=\"xref\" href=\"system.windows.frameworkpropertymetadata#System_Windows_FrameworkPropertyMetadata_Inherits_\" data-linktype=\"relative-path\">Inherits</a> is <code>true</code> in metadata). Property value inheritance in this context means that if there are child elements with no other value for ClipToBounds assigned through local values or styles, the value of the nearest parent element with this value assigned (again, either in styles, by default values, or a locally value), then the value from the parent element will be assigned to all unassigned child elements by the property system. In practice this means that you can specify whether to allow clip to bounds at the root element, and that value will propagate to all child elements that have not specifically assigned it as <code>false</code>.  </p>\n<p><a name=\"dependencyPropertyInfo_ClipToBounds\"></a>   </p>\n<h2 id=\"dependency-property-information\">Dependency Property Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ClipToBoundsProperty\" data-linktype=\"relative-path\">ClipToBoundsProperty</a></td>\n</tr>\n<tr>\n<td>Metadata properties set to <code>true</code></td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_CommandBindings\">\r\n    \r\n            <a id=\"System_Windows_UIElement_CommandBindings_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CommandBindings</div>        \r\n          </div>\r\n    \r\n            <p>Gets a collection of <a class=\"xref\" href=\"system.windows.input.commandbinding\" data-linktype=\"relative-path\">CommandBinding</a> objects associated with this element. A <a class=\"xref\" href=\"system.windows.input.commandbinding\" data-linktype=\"relative-path\">CommandBinding</a> enables command handling for this element, and declares the linkage between a command, its events, and the handlers attached by this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Input.CommandBindingCollection CommandBindings { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.commandbindingcollection\" data-linktype=\"relative-path\">CommandBindingCollection</a></div>\r\n                  </div>\r\n                  <p>The collection of all <a class=\"xref\" href=\"system.windows.input.commandbinding\" data-linktype=\"relative-path\">CommandBinding</a> objects.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Another typical way to populate the CommandBindings collection is to use <a class=\"xref\" href=\"system.windows.input.commandmanager\" data-linktype=\"relative-path\">CommandManager</a> methods programmatically.  </p>\n<p><a name=\"xamlPropertyElementUsage_CommandBindings\"></a>   </p>\n<h2 id=\"xaml-property-element-usage\">XAML Property Element Usage</h2>\n<pre><code>&lt;object&gt;  \n  &lt;object.CommandBindings&gt;  \n    oneOrMoreCommandBindings  \n  &lt;/object.CommandBindings&gt;  \n&lt;/object&gt;  \n</code></pre><p><a name=\"xamlValues_CommandBindings\"></a>   </p>\n<h2 id=\"xaml-values\">XAML Values</h2>\n<p> <em>oneOrMoreCommandBindings</em><br> One or more <a class=\"xref\" href=\"system.windows.input.commandbinding\" data-linktype=\"relative-path\">CommandBinding</a> elements. Each of these should have a <a class=\"xref\" href=\"system.windows.input.commandbinding#System_Windows_Input_CommandBinding_Command_\" data-linktype=\"relative-path\">Command</a> attribute set to a known command, and attributes set for the <a class=\"xref\" href=\"system.windows.input.commandbinding#System_Windows_Input_CommandBinding_CanExecute\" data-linktype=\"relative-path\">CanExecute</a> and <a class=\"xref\" href=\"system.windows.input.commandbinding#System_Windows_Input_CommandBinding_Executed\" data-linktype=\"relative-path\">Executed</a> handler implementations. For more information see <a class=\"xref\" href=\"system.windows.input.commandbinding\" data-linktype=\"relative-path\">CommandBinding</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example adds a <a class=\"xref\" href=\"system.windows.input.commandbinding\" data-linktype=\"relative-path\">CommandBinding</a> to a window using markup. Note that in XAML, the <a class=\"xref\" href=\"system.windows.input.commandbindingcollection\" data-linktype=\"relative-path\">CommandBindingCollection</a> is not declared in the markup as an element; the collection object is inferred by the type that the property takes, and you populate the property element with one or more <a class=\"xref\" href=\"system.windows.input.commandbinding\" data-linktype=\"relative-path\">CommandBinding</a> elements:  </p>\n<pre><code class=\"lang-xml\" name=\"commandWithHandler#CommandHandlerCommandBinding\">&lt;Window.CommandBindings&gt;\n  &lt;CommandBinding Command=&quot;ApplicationCommands.Open&quot;\n                  Executed=&quot;OpenCmdExecuted&quot;\n                  CanExecute=&quot;OpenCmdCanExecute&quot;/&gt;\n&lt;/Window.CommandBindings&gt;\n</code></pre><p> For more information about the XAML syntax for collections, see <a href=\"../Topic/XAML%20Syntax%20In%20Detail.md\" data-linktype=\"relative-path\">XAML Syntax In Detail</a>.  </p>\n<p> The following example does essentially the same thing in code:  </p>\n<pre><code class=\"lang-cs\" name=\"CommandHandlerProcedural#CommandHandlerBindingInit\">// Creating CommandBinding and attaching an Executed and CanExecute handler\nCommandBinding OpenCmdBinding = new CommandBinding(\n    ApplicationCommands.Open,\n    OpenCmdExecuted,\n    OpenCmdCanExecute);\n\nthis.CommandBindings.Add(OpenCmdBinding);\n</code></pre><pre><code class=\"lang-vb\" name=\"CommandHandlerProcedural#CommandHandlerBindingInit\">&#39; Creating CommandBinding and attaching an Executed and CanExecute handler\nDim OpenCmdBinding As New CommandBinding(ApplicationCommands.Open, AddressOf OpenCmdExecuted, AddressOf OpenCmdCanExecute)\n\nMe.CommandBindings.Add(OpenCmdBinding)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_DesiredSize\">\r\n    \r\n            <a id=\"System_Windows_UIElement_DesiredSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DesiredSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets the size that this element computed during the measure pass of the layout process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Size DesiredSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.size\" data-linktype=\"relative-path\">Size</a></div>\r\n                  </div>\r\n                  <p>The computed size, which becomes the desired size for the arrange pass.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value returned by this property will only be a valid measurement if the value of the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsMeasureValid_\" data-linktype=\"relative-path\">IsMeasureValid</a> property is <code>true</code>.  </p>\n<p> DesiredSize is typically checked as one of the measurement factors when you implement layout behavior overrides such as <a class=\"xref\" href=\"system.windows.frameworkelement#System_Windows_FrameworkElement_ArrangeOverride_\" data-linktype=\"relative-path\">ArrangeOverride</a>, <a class=\"xref\" href=\"system.windows.frameworkelement#System_Windows_FrameworkElement_MeasureOverride_\" data-linktype=\"relative-path\">MeasureOverride</a>, or <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnRender_\" data-linktype=\"relative-path\">OnRender</a> (in the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnRender_\" data-linktype=\"relative-path\">OnRender</a> case, you might check <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_RenderSize_\" data-linktype=\"relative-path\">RenderSize</a> instead, but this depends on your implementation). Depending on the scenario, DesiredSize might be fully respected by your implementation logic, constraints on DesiredSize might be applied, and such constraints might also change other characteristics of either the parent element or child element. For example, a control that supports scrollable regions (but chooses not to derive from the WPF framework-level controls that already enable scrollable regions) could compare available size to DesiredSize. The control could then set an internal state that enabled scrollbars in the UI for that control. Or, DesiredSize could potentially also be ignored in certain scenarios.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows DesiredSize as part of a <a class=\"xref\" href=\"system.windows.frameworkelement#System_Windows_FrameworkElement_MeasureOverride_\" data-linktype=\"relative-path\">MeasureOverride</a> implementation. Notice how <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_Measure_\" data-linktype=\"relative-path\">Measure</a> is called immediately prior to obtaining DesiredSize. This assures that DesiredSize holds a legitimate value.  </p>\n<pre><code class=\"lang-cs\" name=\"PlotPanel#2\">protected override Size MeasureOverride(Size availableSize)\n{\n    Size panelDesiredSize = new Size();\n\n    // In our example, we just have one child. \n    // Report that our panel requires just the size of its only child.\n    foreach (UIElement child in InternalChildren)\n    {\n        child.Measure(availableSize);\n        panelDesiredSize = child.DesiredSize;\n    }\n\n    return panelDesiredSize ;\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"PlotPanel#2\">    virtual Size MeasureOverride(Size availableSize) override\n    {\n        Size^ panelDesiredSize = gcnew Size();\n\n        // In our example, we just have one child. \n        // Report that our panel requires just the size of its only child.\n        for each (UIElement^ child in InternalChildren)\n        {\n            child-&gt;Measure(availableSize);\npanelDesiredSize = child-&gt;DesiredSize;\n        }\n        return *panelDesiredSize ;\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"PlotPanel#2\">Protected Overrides Function MeasureOverride(ByVal availableSize As System.Windows.Size) As System.Windows.Size\n    Dim panelDesiredSize As Size = New Size()\n    &#39; In our example, we just have one child. \n    &#39; Report that our panel requires just the size of its only child.\n    For Each child As UIElement In InternalChildren\n        child.Measure(availableSize)\n        panelDesiredSize = child.DesiredSize\n    Next\n    Return panelDesiredSize\nEnd Function\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_Effect\">\r\n    \r\n            <a id=\"System_Windows_UIElement_Effect_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Effect</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the bitmap effect to apply to the <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a>. This is a dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Media.Effects.Effect Effect { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.effects.effect\" data-linktype=\"relative-path\">Effect</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.windows.media.effects.effect\" data-linktype=\"relative-path\">Effect</a> that represents the bitmap effect.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the Effect property to apply a bitmap effect to a <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a>.  </p>\n<p><a name=\"dependencyPropertyInfo_Effect\"></a>   </p>\n<h2 id=\"dependency-property-information\">Dependency Property Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_EffectProperty\" data-linktype=\"relative-path\">EffectProperty</a></td>\n</tr>\n<tr>\n<td>Metadata properties set to <code>true</code></td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following XAML shows how to assign a custom <a class=\"xref\" href=\"system.windows.media.effects.shadereffect\" data-linktype=\"relative-path\">ShaderEffect</a> to the Effect property.  </p>\n<pre><code class=\"lang-xml\" name=\"System.Windows.Media.Effects.ShaderEffect#1000\">&lt;Window x:Class=&quot;ShaderEffectDemo.Window1&quot;\n    xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;\n    xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;\n    xmlns:local=&quot;clr-namespace:ShaderEffectDemo&quot;\n    Title=&quot;Window1&quot; Height=&quot;300&quot; Width=&quot;300&quot;&gt;\n    &lt;Window.Resources&gt;\n        &lt;local:ThresholdEffect x:Key=&quot;thresholdEffect&quot; Threshold=&quot;0.25&quot; BlankColor=&quot;Orange&quot; /&gt;\n    &lt;/Window.Resources&gt;\n    \n    &lt;Grid Effect=&quot;{StaticResource thresholdEffect}&quot;&gt;\n\n    &lt;/Grid&gt;\n&lt;/Window&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_Focusable\">\r\n    \r\n            <a id=\"System_Windows_UIElement_Focusable_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Focusable</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether the element can receive focus.  This is a dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Focusable { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the element is focusable; otherwise <code>false</code>. The default is <code>false</code>, but see Remarks.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Only the focused element receives keyboard input.  </p>\n<p> Focusable is the Microsoft .NET property accessor for what is in reality a dependency property. This particular dependency property quite frequently has its apparent &quot;default&quot; value set differently in derived element classes, particularly in controls. This commonly occurs in one of two ways:  </p>\n<ul>\n<li><p>The dependency property is inherited by a particular derived class, but that derived class overrides the metadata of the dependency property and changes the property default value.  </p>\n</li>\n<li><p>A style or template is applied to an element, which sets that dependency property value differently.  </p>\n<p>For example, the apparent &quot;default&quot; of Focusable for a <a class=\"xref\" href=\"system.windows.controls.button\" data-linktype=\"relative-path\">Button</a> control will be <code>true</code>, even though <a class=\"xref\" href=\"system.windows.controls.button\" data-linktype=\"relative-path\">Button</a> inherits Focusable as a common language runtime (CLR) property directly from <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a>. This is because the applied metadata value for the Focusable dependency property was overridden within the static constructor of the <a class=\"xref\" href=\"system.windows.controls.control\" data-linktype=\"relative-path\">Control</a> base class, which is situated between <a class=\"xref\" href=\"system.windows.controls.button\" data-linktype=\"relative-path\">Button</a> and <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> in the class hierarchy.  </p>\n<p>When inherited by <a class=\"xref\" href=\"system.windows.controls.control\" data-linktype=\"relative-path\">Control</a> or its derived classes, <a class=\"xref\" href=\"system.windows.controls.control\" data-linktype=\"relative-path\">Control</a> redefines the default value of this property to be <code>true</code>.  </p>\n<p>When inherited by <a class=\"xref\" href=\"system.windows.controls.label\" data-linktype=\"relative-path\">Label</a> (which is a <a class=\"xref\" href=\"system.windows.controls.control\" data-linktype=\"relative-path\">Control</a> derived class), the default value is again redefined to be <code>false</code>.  </p>\n</li>\n</ul>\n<p><a name=\"dependencyPropertyInfo_Focusable\"></a>   </p>\n<h2 id=\"dependency-property-information\">Dependency Property Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_FocusableProperty\" data-linktype=\"relative-path\">FocusableProperty</a></td>\n</tr>\n<tr>\n<td>Metadata properties set to <code>true</code></td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example code illustrates a control template for a particular custom control, which sets Focusable <code>false</code> on one of the elements within the template.  </p>\n<pre><code class=\"lang-xml\" name=\"RichTextBox_NoScrollViewer#_ControlTemplate\">&lt;Window.Resources&gt;\n  &lt;Style x:Key=&quot;TextBoxNoScrollViewer&quot; TargetType=&quot;{x:Type TextBoxBase}&quot;&gt;\n    &lt;Setter Property=&quot;Template&quot;&gt;\n      &lt;Setter.Value&gt;\n        &lt;ControlTemplate TargetType=&quot;{x:Type TextBoxBase}&quot;&gt;\n          &lt;Border \n            CornerRadius=&quot;2&quot; \n            Background=&quot;{TemplateBinding Background}&quot; \n            BorderThickness=&quot;{TemplateBinding BorderThickness}&quot; \n            BorderBrush=&quot;{TemplateBinding BorderBrush}&quot;  \n          &gt;\n            &lt;!-- \n            The control template for a TextBox or RichTextBox must\n            include an element tagged as the content host.  An element is \n            tagged as the content host element when it has the special name\n            PART_ContentHost.  The content host element must be a ScrollViewer,\n            or an element that derives from Decorator.  \n            --&gt;\n            &lt;AdornerDecorator \n              x:Name=&quot;PART_ContentHost&quot;\n              Focusable=&quot;False&quot; \n            /&gt;\n          &lt;/Border&gt;\n        &lt;/ControlTemplate&gt;\n      &lt;/Setter.Value&gt;\n    &lt;/Setter&gt;\n  &lt;/Style&gt;\n&lt;/Window.Resources&gt;\n</code></pre><pre><code class=\"lang-xml\" name=\"RichTextBox_NoScrollViewer#_ControlTemplate\">This snippet ID _controltemplate is used in multiple files: /CS/window1.xaml, /xaml/window1.xaml. Rename the duplicate ID to make it unique, and update the reference to the snippet ID in the topic(s).\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_HasAnimatedProperties\">\r\n    \r\n            <a id=\"System_Windows_UIElement_HasAnimatedProperties_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HasAnimatedProperties</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether this element has any animated properties.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool HasAnimatedProperties { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if this element has animations attached to any of its properties; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property returns <code>true</code> either for persistent (unclocked, always-running) animations, or for animations that have a specific timeline.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_HasEffectiveKeyboardFocus\">\r\n    \r\n            <a id=\"System_Windows_UIElement_HasEffectiveKeyboardFocus_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HasEffectiveKeyboardFocus</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether the <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> has focus.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual bool HasEffectiveKeyboardFocus { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> has focus; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Subclasses can override this property to specify when the element has keyboard focus.  This is useful when your <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> contains elements that can have keyboard focus and you want your element to report that it has focus.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_InputBindings\">\r\n    \r\n            <a id=\"System_Windows_UIElement_InputBindings_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InputBindings</div>        \r\n          </div>\r\n    \r\n            <p>Gets the collection of input bindings associated with this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Input.InputBindingCollection InputBindings { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.inputbindingcollection\" data-linktype=\"relative-path\">InputBindingCollection</a></div>\r\n                  </div>\r\n                  <p>The collection of input bindings.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Input bindings support the binding of commands to input devices. For example, <a class=\"xref\" href=\"system.windows.input.mousebinding\" data-linktype=\"relative-path\">MouseBinding</a> implements input bindings that include properties that are particular to mouse devices.  </p>\n<p> The collection of input bindings will include both input bindings that pertain to the type as well as input bindings that are declared on the instance.  </p>\n<p> A related property, <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_CommandBindings_\" data-linktype=\"relative-path\">CommandBindings</a>, maintains a collection of command bindings. These differ from input bindings in that they represent the next level down of command processing - actions that are tied to known commands.  </p>\n<p><a name=\"xamlPropertyElementUsage_InputBindings\"></a>   </p>\n<h2 id=\"xaml-property-element-usage\">XAML Property Element Usage</h2>\n<pre><code>&lt;object&gt;  \n  &lt;object.InputBindings&gt;  \n    oneOrMoreInputBindings  \n  &lt;/object.InputBindings&gt;  \n&lt;/object&gt;  \n</code></pre><p><a name=\"xamlValues_InputBindings\"></a>   </p>\n<h2 id=\"xaml-values\">XAML Values</h2>\n<p> <em>oneOrMoreInputBindings</em><br> One or more <a class=\"xref\" href=\"system.windows.input.inputbinding\" data-linktype=\"relative-path\">InputBinding</a> elements (typically the <a class=\"xref\" href=\"system.windows.input.keybinding\" data-linktype=\"relative-path\">KeyBinding</a> or <a class=\"xref\" href=\"system.windows.input.mousebinding\" data-linktype=\"relative-path\">MouseBinding</a> derived classes). Each of these is expected to have a <a class=\"xref\" href=\"system.windows.input.inputbinding#System_Windows_Input_InputBinding_Command_\" data-linktype=\"relative-path\">Command</a> and <a class=\"xref\" href=\"system.windows.input.inputbinding#System_Windows_Input_InputBinding_Gesture_\" data-linktype=\"relative-path\">Gesture</a> attribute set.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example populates this property on a <a class=\"xref\" href=\"system.windows.window\" data-linktype=\"relative-path\">Window</a>, with a single <a class=\"xref\" href=\"system.windows.input.keybinding\" data-linktype=\"relative-path\">KeyBinding</a>.  </p>\n<pre><code class=\"lang-xml\" name=\"CommandingOverviewSnippets#CommandingOverviewXAMLKeyBinding\">&lt;Window.InputBindings&gt;\n  &lt;KeyBinding Key=&quot;B&quot;\n              Modifiers=&quot;Control&quot; \n              Command=&quot;ApplicationCommands.Open&quot; /&gt;\n&lt;/Window.InputBindings&gt;\n</code></pre><p> For more information about the XAML syntax for collections, see <a href=\"../Topic/XAML%20Syntax%20In%20Detail.md\" data-linktype=\"relative-path\">XAML Syntax In Detail</a>.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_IsArrangeValid\">\r\n    \r\n            <a id=\"System_Windows_UIElement_IsArrangeValid_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsArrangeValid</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the computed size and position of child elements in this element&#39;s layout are valid.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsArrangeValid { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the size and position of layout are valid; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can force arrangement to be invalidated by calling <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_InvalidateArrange_\" data-linktype=\"relative-path\">InvalidateArrange</a> on this element (or its parents). This flags the layout for recomposition at such time as the layout system determines. Alternatively, an immediate call to <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_UpdateLayout_\" data-linktype=\"relative-path\">UpdateLayout</a> could be made, but this should only be done if it is certain that no further invalidations are pending (a large number of unnecessarily forced updates has performance consequences).  </p>\n<p> IsArrangeValid cannot be <code>true</code> unless <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsMeasureValid_\" data-linktype=\"relative-path\">IsMeasureValid</a> is also <code>true</code> (in the layout process, arrangement cannot be valid without measurement first being valid).</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_IsEnabled\">\r\n    \r\n            <a id=\"System_Windows_UIElement_IsEnabled_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsEnabled</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether this element is enabled in the user interface (UI).  This is a dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsEnabled { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the element is enabled; otherwise, <code>false</code>. The default value is <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Note that this property is influenced by class-specific implementations of <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsEnabledCore_\" data-linktype=\"relative-path\">IsEnabledCore</a> on particular elements, often at runtime. Therefore, the default value listed here is sometimes not effective. For instance, a <a class=\"xref\" href=\"system.windows.controls.primitives.scrollbar\" data-linktype=\"relative-path\">ScrollBar</a> will be IsEnabled <code>false</code> whenever it is determined that there is no need to support a scrollbar. Attempting to set this value will also potentially be overridden by the value returned by <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsEnabledCore_\" data-linktype=\"relative-path\">IsEnabledCore</a>.  </p>\n<p> Elements that are not enabled do not participate in hit testing or focus and therefore will not be sources of input events.  </p>\n<p><a name=\"dependencyPropertyInfo_IsEnabled\"></a>   </p>\n<h2 id=\"dependency-property-information\">Dependency Property Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsEnabledProperty\" data-linktype=\"relative-path\">IsEnabledProperty</a></td>\n</tr>\n<tr>\n<td>Metadata properties set to <code>true</code></td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows a handler on one button that when executed will set IsEnabled <code>false</code> on another named button <code>b1</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"RoutedEventAddRemoveHandler#Handler\">public partial class RoutedEventAddRemoveHandler {\n    void MakeButton(object sender, RoutedEventArgs e)\n    {\n        Button b2 = new Button();\n        b2.Content = &quot;New Button&quot;;\n        // Associate event handler to the button. You can remove the event \n        // handler using &quot;-=&quot; syntax rather than &quot;+=&quot;.\n        b2.Click  += new RoutedEventHandler(Onb2Click);\n        root.Children.Insert(root.Children.Count, b2);\n        DockPanel.SetDock(b2, Dock.Top);\n        text1.Text = &quot;Now click the second button...&quot;;\n        b1.IsEnabled = false;\n    }\n    void Onb2Click(object sender, RoutedEventArgs e)\n    {\n        text1.Text = &quot;New Button (b2) Was Clicked!!&quot;;\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"RoutedEventAddRemoveHandler#Handler\">Public Partial Class RoutedEventAddRemoveHandler\n    Private Sub MakeButton(ByVal sender As Object, ByVal e As RoutedEventArgs)\n        Dim b2 As Button = New Button()\n        b2.Content = &quot;New Button&quot;\n        AddHandler b2.Click, AddressOf Onb2Click\n        root.Children.Insert(root.Children.Count, b2)\n        DockPanel.SetDock(b2, Dock.Top)\n        text1.Text = &quot;Now click the second button...&quot;\n        b1.IsEnabled = False\n    End Sub\n    Private Sub Onb2Click(ByVal sender As Object, ByVal e As RoutedEventArgs)\n        text1.Text = &quot;New Button (b2) Was Clicked!!&quot;\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_IsEnabledCore\">\r\n    \r\n            <a id=\"System_Windows_UIElement_IsEnabledCore_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsEnabledCore</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that becomes the return value of <span class=\"xref\">stem.Windows.UIElement.IsEnabled*</span> in derived classes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual bool IsEnabledCore { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the element is enabled; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_IsFocused\">\r\n    \r\n            <a id=\"System_Windows_UIElement_IsFocused_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsFocused</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that determines whether this element has logical focus.  This is a dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsFocused { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if this element has logical focus; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Logical focus might differ from keyboard focus if an application has multiple focus divisions, such as between menu contents and the remainder of the application. In this scenario, keyboard focus can only be on one element of the application  UI, however, certain elements in other focus divisions might still retain logical focus. For more information on logical focus, see <a href=\"../Topic/Focus%20Overview.md\" data-linktype=\"relative-path\">Focus Overview</a>.  </p>\n<p> You do not set focus by setting this property (it is read-only). The typical use for this property is to use it as a dependency property for a <a class=\"xref\" href=\"system.windows.setter\" data-linktype=\"relative-path\">Setter</a> or <a class=\"xref\" href=\"system.windows.eventtrigger\" data-linktype=\"relative-path\">EventTrigger</a>. To set focus programmatically, call <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_Focus_\" data-linktype=\"relative-path\">Focus</a>. Focus can also be set by user action or by control implementations, which possibly include mouse capture behavior.  </p>\n<p><a name=\"dependencyPropertyInfo_IsFocused\"></a>   </p>\n<h2 id=\"dependency-property-information\">Dependency Property Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsFocusedProperty\" data-linktype=\"relative-path\">IsFocusedProperty</a></td>\n</tr>\n<tr>\n<td>Metadata properties set to <code>true</code></td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example is a code handler that changes the background of a control when it is focused.  </p>\n<pre><code class=\"lang-cs\" name=\"PopupSimple#IsFocused\">private void setColors(object sender, RoutedEventArgs e)\n{\n    if (myTextBox.IsFocused) myTextBox.Foreground = Brushes.Brown;\n}\n</code></pre><p> Another common way to achieve this same effect is to place a <a class=\"xref\" href=\"system.windows.trigger\" data-linktype=\"relative-path\">Trigger</a> in the <a class=\"xref\" href=\"system.windows.style\" data-linktype=\"relative-path\">Style</a> of a control; this approach does not require handling specific events with code-behind and allows designers greater access to the interactive and graphical nature of the UI. For an example, see <a href=\"http://msdn.microsoft.com/en-us/a2ccf19a-d0dc-4e3c-88e3-95d7f7d765b1\" data-linktype=\"external\">How to: Create an Outer Glow Effect</a>.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_IsHitTestVisible\">\r\n    \r\n            <a id=\"System_Windows_UIElement_IsHitTestVisible_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsHitTestVisible</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that declares whether this element can possibly be returned as a hit test result from some portion of its rendered content. This is a dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsHitTestVisible { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if this element could be returned as a hit test result from at least one point; otherwise, <code>false</code>. The default value is <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The effective value of this property is influenced by the relative positions of hit testable elements in the logical tree. For instance, if an element is a child element of an element that is not hit test visible, the effective value of the property on the child will remain <code>false</code>, even if attempting to set that value locally. For this reason, it is important that you do not set IsHitTestVisible to <code>false</code> on a composited control unless you do not want any input or hit testing on that control. For more information on hit testing, see <a href=\"../Topic/Hit%20Testing%20in%20the%20Visual%20Layer.md\" data-linktype=\"relative-path\">Hit Testing in the Visual Layer</a>.  </p>\n<p><a name=\"dependencyPropertyInfo_IsHitTestVisible\"></a>   </p>\n<h2 id=\"dependency-property-information\">Dependency Property Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsHitTestVisibleProperty\" data-linktype=\"relative-path\">IsHitTestVisibleProperty</a></td>\n</tr>\n<tr>\n<td>Metadata properties set to <code>true</code></td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_IsInputMethodEnabled\">\r\n    \r\n            <a id=\"System_Windows_UIElement_IsInputMethodEnabled_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsInputMethodEnabled</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether an input method system, such as an Input Method Editor (IME),  is enabled for processing the input to this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsInputMethodEnabled { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if an input method is active; otherwise, <code>false</code>. The default value of the underlying attached property is <code>true;</code> however, this will be influenced by the actual state of input methods at runtime.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property returns the value that is returned by the attached property &lt;xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=fullName&gt; for the currently enabled input methods (keyboard, speech, and other input devices).</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_IsKeyboardFocused\">\r\n    \r\n            <a id=\"System_Windows_UIElement_IsKeyboardFocused_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsKeyboardFocused</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether this element has keyboard focus.  This is a dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsKeyboardFocused { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if this element has keyboard focus; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Changes to the determined value of this property may be accompanied by focus-related events.  </p>\n<p> IsKeyboardFocused and <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsKeyboardFocusWithin_\" data-linktype=\"relative-path\">IsKeyboardFocusWithin</a> are commonly used within class event handlers for other input-related events, for instance to determine whether the element already has keyboard focus, or to make determinations when mouse events and keyboard events occur in conjunction.  </p>\n<p><a name=\"dependencyPropertyInfo_IsKeyboardFocused\"></a>   </p>\n<h2 id=\"dependency-property-information\">Dependency Property Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsKeyboardFocusedProperty\" data-linktype=\"relative-path\">IsKeyboardFocusedProperty</a></td>\n</tr>\n<tr>\n<td>Metadata properties set to <code>true</code></td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_IsKeyboardFocusWithin\">\r\n    \r\n            <a id=\"System_Windows_UIElement_IsKeyboardFocusWithin_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsKeyboardFocusWithin</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether keyboard focus is anywhere within the element or its visual tree child elements.  This is a dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsKeyboardFocusWithin { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if keyboard focus is on the element or its child elements; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Changes to the value of this property typically raise the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsKeyboardFocusWithinChanged\" data-linktype=\"relative-path\">IsKeyboardFocusWithinChanged</a> event, unless a derived class has overridden <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnIsKeyboardFocusWithinChanged_\" data-linktype=\"relative-path\">OnIsKeyboardFocusWithinChanged</a> to suppress the event.  </p>\n<p> You do not set this property directly, but you can set the focus to an element by calling <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_Focus_\" data-linktype=\"relative-path\">Focus</a>, or by making a <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MoveFocus_\" data-linktype=\"relative-path\">MoveFocus</a> request. Either of these method calls might change this property value.  </p>\n<p> <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsKeyboardFocused_\" data-linktype=\"relative-path\">IsKeyboardFocused</a> and IsKeyboardFocusWithin are typically used within class event handlers for other input-related events, for instance to determine whether the element already has keyboard focus, or to make determinations when mouse events and keyboard events occur in conjunction.  </p>\n<p><a name=\"dependencyPropertyInfo_IsKeyboardFocusWithin\"></a>   </p>\n<h2 id=\"dependency-property-information\">Dependency Property Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsKeyboardFocusWithinProperty\" data-linktype=\"relative-path\">IsKeyboardFocusWithinProperty</a></td>\n</tr>\n<tr>\n<td>Metadata properties set to <code>true</code></td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_IsManipulationEnabled\">\r\n    \r\n            <a id=\"System_Windows_UIElement_IsManipulationEnabled_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsManipulationEnabled</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether manipulation events are enabled on this <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsManipulationEnabled { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if manipulation events are enabled on this <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a>; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Set this property to true if you want the <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> to receive the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationStarting\" data-linktype=\"relative-path\">ManipulationStarting</a>, <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationStarted\" data-linktype=\"relative-path\">ManipulationStarted</a>, <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationDelta\" data-linktype=\"relative-path\">ManipulationDelta</a>, <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationInertiaStarting\" data-linktype=\"relative-path\">ManipulationInertiaStarting</a>, <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationBoundaryFeedback\" data-linktype=\"relative-path\">ManipulationBoundaryFeedback</a>, and <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationCompleted\" data-linktype=\"relative-path\">ManipulationCompleted</a> events. For more information about manipulations, see the <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  For an example of an application that responds to manipulations, see <a href=\"../Topic/Walkthrough:%20Creating%20Your%20First%20Touch%20Application.md\" data-linktype=\"relative-path\">Walkthrough: Creating Your First Touch Application</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an application that has a red Rectangle.  The IsManipulationEnabled property of the Rectangle is set to true and the application&#39;s window subscribes to the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationStarting\" data-linktype=\"relative-path\">ManipulationStarting</a>, <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationDelta\" data-linktype=\"relative-path\">ManipulationDelta</a>, and <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationInertiaStarting\" data-linktype=\"relative-path\">ManipulationInertiaStarting</a> events. This example is part of a larger example in <a href=\"../Topic/Walkthrough:%20Creating%20Your%20First%20Touch%20Application.md\" data-linktype=\"relative-path\">Walkthrough: Creating Your First Touch Application</a>.  </p>\n<pre><code class=\"lang-xml\" name=\"BasicManipulation#UI\">&lt;Window x:Class=&quot;BasicManipulation.MainWindow&quot;\n        xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;\n        xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;\n        Title=&quot;Move, Size, and Rotate the Square&quot;\n        WindowState=&quot;Maximized&quot;\n        ManipulationStarting=&quot;Window_ManipulationStarting&quot;\n        ManipulationDelta=&quot;Window_ManipulationDelta&quot;\n        ManipulationInertiaStarting=&quot;Window_InertiaStarting&quot;&gt;\n  &lt;Window.Resources&gt;\n\n    &lt;!--The movement, rotation, and size of the Rectangle is \n        specified by its RenderTransform.--&gt;\n    &lt;MatrixTransform x:Key=&quot;InitialMatrixTransform&quot;&gt;\n      &lt;MatrixTransform.Matrix&gt;\n        &lt;Matrix OffsetX=&quot;200&quot; OffsetY=&quot;200&quot;/&gt;\n      &lt;/MatrixTransform.Matrix&gt;\n    &lt;/MatrixTransform&gt;\n\n  &lt;/Window.Resources&gt;\n\n  &lt;Canvas&gt;\n    &lt;Rectangle Fill=&quot;Red&quot; Name=&quot;manRect&quot;\n                 Width=&quot;200&quot; Height=&quot;200&quot; \n                 RenderTransform=&quot;{StaticResource InitialMatrixTransform}&quot;\n                 IsManipulationEnabled=&quot;true&quot; /&gt;\n  &lt;/Canvas&gt;\n&lt;/Window&gt;\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_IsMeasureValid\">\r\n    \r\n            <a id=\"System_Windows_UIElement_IsMeasureValid_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsMeasureValid</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the current size returned by layout measure is valid.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsMeasureValid { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the measure pass of layout returned a valid and current value; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can force measurement and arrangement to be invalidated by calling <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_InvalidateMeasure_\" data-linktype=\"relative-path\">InvalidateMeasure</a> on this element (or any parent element up the visual tree). This designates the layout for recomposition asynchronously, occurring at a time determined by the layout system. Alternatively, you could make an immediate call to <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_UpdateLayout_\" data-linktype=\"relative-path\">UpdateLayout</a>. However, you should only call <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_UpdateLayout_\" data-linktype=\"relative-path\">UpdateLayout</a> if it is likely that no further invalidations are pending (a large number of unnecessarily forced updates will have performance consequences).  </p>\n<p> If IsMeasureValid is <code>false</code>, <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsArrangeValid_\" data-linktype=\"relative-path\">IsArrangeValid</a> must also be <code>false</code> (by the enforced logic of the layout process, arrangement cannot be valid without measurement first being valid).</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_IsMouseCaptured\">\r\n    \r\n            <a id=\"System_Windows_UIElement_IsMouseCaptured_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsMouseCaptured</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the mouse is captured to this element.  This is a dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsMouseCaptured { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the element has mouse capture; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Mouse capture state is related to in-process drag-and-drop operations.  </p>\n<p><a name=\"dependencyPropertyInfo_IsMouseCaptured\"></a>   </p>\n<h2 id=\"dependency-property-information\">Dependency Property Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsMouseCapturedProperty\" data-linktype=\"relative-path\">IsMouseCapturedProperty</a></td>\n</tr>\n<tr>\n<td>Metadata properties set to <code>true</code></td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example turns the mouse capture state on or off based on whether the mouse is already captured for the element.  </p>\n<p> If mouse capture is elsewhere, the mouse capture is set to that element. If the element had mouse capture, it is cleared by calling <a class=\"xref\" href=\"system.windows.input.mouse#System_Windows_Input_Mouse_Capture_\" data-linktype=\"relative-path\">Capture</a> with a null input.  </p>\n<pre><code class=\"lang-vb\" name=\"MouseSnippetSample#IsMouseCaptured\">Private Sub CaptureMouseCommandExecuted(ByVal sender As Object, ByVal e As ExecutedRoutedEventArgs)\n    MessageBox.Show(&quot;Mouse Command&quot;)\n    Dim target As IInputElement = Mouse.DirectlyOver\n\n    target = TryCast(target, Control)\n    If target IsNot Nothing Then\n        If Not target.IsMouseCaptured Then\n            Mouse.Capture(target)\n        Else\n            Mouse.Capture(Nothing)\n        End If\n    End If\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"MouseSnippetSample#IsMouseCaptured\">private void CaptureMouseCommandExecuted(object sender, ExecutedRoutedEventArgs e)\n{\n    MessageBox.Show(&quot;Mouse Command&quot;);\n    IInputElement target = Mouse.DirectlyOver;\n\n    target = target as Control;\n    if (target != null)\n    {\n        if (!target.IsMouseCaptured)\n        {\n            Mouse.Capture(target);\n        }\n        else\n        {\n            Mouse.Capture(null);\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_IsMouseCaptureWithin\">\r\n    \r\n            <a id=\"System_Windows_UIElement_IsMouseCaptureWithin_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsMouseCaptureWithin</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that determines whether mouse capture is held by this element or by child elements in its visual tree. This is a dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsMouseCaptureWithin { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if this element or a contained element has mouse capture; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a name=\"dependencyPropertyInfo_IsMouseCaptureWithin\"></a>   </p>\n<h2 id=\"dependency-property-information\">Dependency Property Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsMouseCaptureWithinProperty\" data-linktype=\"relative-path\">IsMouseCaptureWithinProperty</a></td>\n</tr>\n<tr>\n<td>Metadata properties set to <code>true</code></td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_IsMouseDirectlyOver\">\r\n    \r\n            <a id=\"System_Windows_UIElement_IsMouseDirectlyOver_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsMouseDirectlyOver</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether the position of the mouse pointer corresponds to hit test results, which take element compositing into account.  This is a dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsMouseDirectlyOver { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the mouse pointer is over the same element result as a hit test; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Unlike <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsMouseOver_\" data-linktype=\"relative-path\">IsMouseOver</a>, this property is only <code>true</code> if the mouse pointer is over the literal element—as it is for a hit test. If the mouse pointer is instead over a child element, in particular over elements that are part of an element&#39;s deeper template and compositing, this property will be <code>false</code>. Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results. For most scenarios where you are not authoring controls, use <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsMouseOver_\" data-linktype=\"relative-path\">IsMouseOver</a> instead.  </p>\n<p> If the mouse is captured by this element, and this property is <code>true</code> at time of capture, this property will continue to return <code>true</code> until mouse capture is lost and the pointer is not over its bounds.  </p>\n<p><a name=\"dependencyPropertyInfo_IsMouseDirectlyOver\"></a>   </p>\n<h2 id=\"dependency-property-information\">Dependency Property Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsMouseDirectlyOverProperty\" data-linktype=\"relative-path\">IsMouseDirectlyOverProperty</a></td>\n</tr>\n<tr>\n<td>Metadata properties set to <code>true</code></td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_IsMouseOver\">\r\n    \r\n            <a id=\"System_Windows_UIElement_IsMouseOver_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsMouseOver</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the mouse pointer is located over this element (including child elements in the visual tree).  This is a dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsMouseOver { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if mouse pointer is over the element or its child elements; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Typically, controls are composited such that the various elements inside the control (the visual tree) will all report the mouse state for the containing control. For example, a <a class=\"xref\" href=\"system.windows.controls.listbox\" data-linktype=\"relative-path\">ListBox</a> style control will report IsMouseOver as <code>true</code> if the mouse is anywhere over its geometry, including any <a class=\"xref\" href=\"system.windows.controls.listboxitem\" data-linktype=\"relative-path\">ListBoxItem</a>.  </p>\n<p> Although an analogous &quot;IsMouseOverChanged&quot; event does not exist, several similar events do. For example, you can handle <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseEnter\" data-linktype=\"relative-path\">MouseEnter</a>, <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseMove\" data-linktype=\"relative-path\">MouseMove</a>, and <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsMouseDirectlyOverChanged\" data-linktype=\"relative-path\">IsMouseDirectlyOverChanged</a>.  </p>\n<p> If this element captures the mouse, this property remains <code>true</code> until mouse capture is lost and the mouse pointer leaves the element bounds.  </p>\n<p> Some controls deliberately capture the mouse on certain actions that do not appear to directly involve the mouse. This can lead to IsMouseOver being <code>true</code> even though the mouse has not apparently moved.  </p>\n<p><a name=\"dependencyPropertyInfo_IsMouseOver\"></a>   </p>\n<h2 id=\"dependency-property-information\">Dependency Property Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsMouseOverProperty\" data-linktype=\"relative-path\">IsMouseOverProperty</a></td>\n</tr>\n<tr>\n<td>Metadata properties set to <code>true</code></td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example references this property as the property type of a <a class=\"xref\" href=\"system.windows.trigger\" data-linktype=\"relative-path\">Trigger</a>, part of a &lt;Style.Triggers&gt; block. If the mouse is over the control, the control text turns blue and the cursor becomes a hand.  </p>\n<pre><code class=\"lang-xml\" name=\"ListViewCheckBox#Trigger\">This snippet ID trigger is used in multiple files: /CS/window1.xaml, /xaml/window1.xaml. Rename the duplicate ID to make it unique, and update the reference to the snippet ID in the topic(s).\n</code></pre><pre><code class=\"lang-xml\" name=\"ListViewCheckBox#Trigger\">This snippet ID trigger is used in multiple files: /CS/window1.xaml, /xaml/window1.xaml. Rename the duplicate ID to make it unique, and update the reference to the snippet ID in the topic(s).\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_IsStylusCaptured\">\r\n    \r\n            <a id=\"System_Windows_UIElement_IsStylusCaptured_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsStylusCaptured</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the stylus is captured by this element.  This is a dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsStylusCaptured { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the element has stylus capture; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Touch, mouse, and stylus input exist in a particular relationship. For more information, see <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p><a name=\"dependencyPropertyInfo_IsStylusCaptured\"></a>   </p>\n<h2 id=\"dependency-property-information\">Dependency Property Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsStylusCapturedProperty\" data-linktype=\"relative-path\">IsStylusCapturedProperty</a></td>\n</tr>\n<tr>\n<td>Metadata properties set to <code>true</code></td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_IsStylusCaptureWithin\">\r\n    \r\n            <a id=\"System_Windows_UIElement_IsStylusCaptureWithin_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsStylusCaptureWithin</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that determines whether stylus capture is held by this element, or an element within the element bounds and its visual tree. This is a dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsStylusCaptureWithin { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if this element or a contained element has stylus capture; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Touch, mouse, and stylus input exist in a particular relationship. For more information, see <a href=\"http://msdn.microsoft.com/en-us/63f1d71f-03d8-4d83-a174-e3dc7c57bad0\" data-linktype=\"external\">Touch Input Support in Windows Vista</a> and <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p><a name=\"dependencyPropertyInfo_IsStylusCaptureWithin\"></a>   </p>\n<h2 id=\"dependency-property-information\">Dependency Property Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsStylusCaptureWithinProperty\" data-linktype=\"relative-path\">IsStylusCaptureWithinProperty</a></td>\n</tr>\n<tr>\n<td>Metadata properties set to <code>true</code></td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_IsStylusDirectlyOver\">\r\n    \r\n            <a id=\"System_Windows_UIElement_IsStylusDirectlyOver_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsStylusDirectlyOver</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether the stylus position corresponds to hit test results, which take element compositing into account.  This is a dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsStylusDirectlyOver { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the stylus pointer is over the same element result as a hit test; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Unlike <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsStylusOver_\" data-linktype=\"relative-path\">IsStylusOver</a>, this property is only <code>true</code> if the stylus is over the element. If the stylus is instead over a child element or over elements that are part of an element&#39;s deeper compositing (the visual tree), this property will be <code>false</code>.  </p>\n<p> Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results. For most scenarios where you are not authoring controls, use <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsStylusOver_\" data-linktype=\"relative-path\">IsStylusOver</a> instead.  </p>\n<p> If this element has stylus capture and this property is <code>true</code> at the time of capture, this property remains <code>true</code> until stylus capture is lost and the stylus is not over its bounds.  </p>\n<p> Touch, mouse, and stylus input exist in a particular relationship. For more information, see <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p><a name=\"dependencyPropertyInfo_IsStylusDirectlyOver\"></a>   </p>\n<h2 id=\"dependency-property-information\">Dependency Property Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsStylusDirectlyOverProperty\" data-linktype=\"relative-path\">IsStylusDirectlyOverProperty</a></td>\n</tr>\n<tr>\n<td>Metadata properties set to <code>true</code></td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_IsStylusOver\">\r\n    \r\n            <a id=\"System_Windows_UIElement_IsStylusOver_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsStylusOver</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the stylus cursor is located over this element (including visual child elements).  This is a dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsStylusOver { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if stylus cursor is over the element or its child elements; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If this element has stylus capture, this property will continue to return <code>true</code> until stylus capture is lost and the pointer is out of its bounds.  </p>\n<p> Touch, mouse, and stylus input exist in a particular relationship. For more information, see <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p><a name=\"dependencyPropertyInfo_IsStylusOver\"></a>   </p>\n<h2 id=\"dependency-property-information\">Dependency Property Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsStylusOverProperty\" data-linktype=\"relative-path\">IsStylusOverProperty</a></td>\n</tr>\n<tr>\n<td>Metadata properties set to <code>true</code></td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_IsVisible\">\r\n    \r\n            <a id=\"System_Windows_UIElement_IsVisible_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsVisible</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether this element is visible in the user interface (UI).  This is a dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsVisible { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the element is visible; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Determination of the IsVisible value takes all factors of layout into account. In contrast, <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_Visibility_\" data-linktype=\"relative-path\">Visibility</a>, which is a settable property, only indicates the intention to programmatically make an element visible or invisible.  </p>\n<p> Elements where IsVisible is <code>false</code> do not participate in input events (or commands), do not influence either the measure or arrange passes of layout, are not focusable, are not in a tab sequence, and will not be reported in hit testing. In contrast, elements where <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsEnabled_\" data-linktype=\"relative-path\">IsEnabled</a> is <code>false</code> will still participate in events and commands, and hit testing, but are also not focusable.  </p>\n<p><a name=\"dependencyPropertyInfo_IsVisible\"></a>   </p>\n<h2 id=\"dependency-property-information\">Dependency Property Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsVisibleProperty\" data-linktype=\"relative-path\">IsVisibleProperty</a></td>\n</tr>\n<tr>\n<td>Metadata properties set to <code>true</code></td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_Opacity\">\r\n    \r\n            <a id=\"System_Windows_UIElement_Opacity_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Opacity</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the opacity factor applied to the entire <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> when it is rendered in the user interface (UI).  This is a dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public double Opacity { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The opacity factor. Default opacity is 1.0. Expected values are between 0.0 and 1.0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The 1.0 default value is the default provided by the initial metadata of this dependency property on the <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> class. Other derived classes may potentially change this default value by overriding the metadata from within their class constructor.  </p>\n<p> The value of Opacity won&#39;t be applied to actual layout unless the element is also visible (<a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsVisible_\" data-linktype=\"relative-path\">IsVisible</a> is <code>true</code>).  </p>\n<p> Opacity is applied from parent elements on down the element tree to child elements, but the visible effects of the nested opacity settings aren&#39;t indicated in the property value of individual child elements. For instance, if a list has a 50% (0.5) opacity and one of its list items has its own opacity set to 20% (0.2), the net visible opacity for that list item will be rendered as if it were 10% (0.1), but the property value of the list item Opacity property would still be 0.2 when queried.  </p>\n<p> Even if the declared or evaluated opacity is 0, an element still participates in input events and commands, and is potentially focusable. This aspect can be useful, for instance you can use an opacity-zero object (such as a shape) for masking underlying objects with transparent elements. The opacity-zero object can then handle all the input event processing for an underlying area. However, the <code>Background</code> or <code>Fill</code> of the object or shape should be set to a value, even if it is <a class=\"xref\" href=\"system.windows.media.brushes#System_Windows_Media_Brushes_Transparent_\" data-linktype=\"relative-path\">Transparent</a>, otherwise hit testing is not enabled, and no events are received.  </p>\n<p><a name=\"dependencyPropertyInfo_Opacity\"></a>   </p>\n<h2 id=\"dependency-property-information\">Dependency Property Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OpacityProperty\" data-linktype=\"relative-path\">OpacityProperty</a></td>\n</tr>\n<tr>\n<td>Metadata properties set to <code>true</code></td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OpacityMask\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OpacityMask_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OpacityMask</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets an opacity mask, as a <a class=\"xref\" href=\"system.windows.media.brush\" data-linktype=\"relative-path\">Brush</a> implementation that is applied to any alpha-channel masking for the rendered content of this element.  This is a dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Media.Brush OpacityMask { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.brush\" data-linktype=\"relative-path\">Brush</a></div>\r\n                  </div>\r\n                  <p>The brush to use for opacity masking.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property only uses whatever the alpha channel value is for the supplied <a class=\"xref\" href=\"system.windows.media.brush\" data-linktype=\"relative-path\">Brush</a>. The other channels of the <a class=\"xref\" href=\"system.windows.media.brush\" data-linktype=\"relative-path\">Brush</a>&#39;s rendered content (Red, Green, or Blue) are ignored.  </p>\n<p> The most typical <a class=\"xref\" href=\"system.windows.media.brush\" data-linktype=\"relative-path\">Brush</a> for this purpose is an <a class=\"xref\" href=\"system.windows.media.imagebrush\" data-linktype=\"relative-path\">ImageBrush</a>, which can be used for a variety of photo masking techniques such as a vignette. But any defined <a class=\"xref\" href=\"system.windows.media.brush\" data-linktype=\"relative-path\">Brush</a> (such as <a class=\"xref\" href=\"system.windows.media.lineargradientbrush\" data-linktype=\"relative-path\">LinearGradientBrush</a>) can be used.  </p>\n<p> In Extensible Application Markup Language (XAML), this property value can use an inline syntax that is specific to each implementation of the <a class=\"xref\" href=\"system.windows.media.brush\" data-linktype=\"relative-path\">Brush</a> abstract class. For more information, see <a href=\"../Topic/Painting%20with%20Solid%20Colors%20and%20Gradients%20Overview.md\" data-linktype=\"relative-path\">Painting with Solid Colors and Gradients Overview</a>.  </p>\n<p><a name=\"dependencyPropertyInfo_OpacityMask\"></a>   </p>\n<h2 id=\"dependency-property-information\">Dependency Property Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OpacityMaskProperty\" data-linktype=\"relative-path\">OpacityMaskProperty</a></td>\n</tr>\n<tr>\n<td>Metadata properties set to <code>true</code></td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following markup example shows an <a class=\"xref\" href=\"system.windows.media.imagebrush\" data-linktype=\"relative-path\">ImageBrush</a> opacity mask applied to another <a class=\"xref\" href=\"system.windows.controls.image\" data-linktype=\"relative-path\">Image</a>.  </p>\n<pre><code class=\"lang-xml\" name=\"OpacityMasksExample#UIElementOpacityMask\">This snippet ID uielementopacitymask is used in multiple files: /CS/ImageBrushExample.xaml, /XAML/ImageBrushExample.xaml. Rename the duplicate ID to make it unique, and update the reference to the snippet ID in the topic(s).\n</code></pre><pre><code class=\"lang-xml\" name=\"OpacityMasksExample#UIElementOpacityMask\">This snippet ID uielementopacitymask is used in multiple files: /CS/ImageBrushExample.xaml, /XAML/ImageBrushExample.xaml. Rename the duplicate ID to make it unique, and update the reference to the snippet ID in the topic(s).\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PersistId\">\r\n    \r\n            <a id=\"System_Windows_UIElement_PersistId_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PersistId</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that uniquely identifies this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int PersistId { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The unique identifier for this element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>PersistId uniquely identifies each element. An element keeps the same PersistId every time the same Extensible Application Markup Language (XAML) is loaded (including binary representations). This identifier is used for internal loading, parsing and serialization requirements. It is not intended to be used by your application code.  </p>\n<p> This property has no relationship to the <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a> result for any given instance.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_RenderSize\">\r\n    \r\n            <a id=\"System_Windows_UIElement_RenderSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RenderSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets (or sets, but see Remarks) the final render size of this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Size RenderSize { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.size\" data-linktype=\"relative-path\">Size</a></div>\r\n                  </div>\r\n                  <p>The rendered size for this element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"IMPORTANT\"><h5>Important</h5><p> Do not attempt to set this property, either in XAML or in code, if using the WPF framework-level layout system. Nearly all typical application scenarios will use this layout system. The layout system will not respect sizes set in the RenderSize property directly. The RenderSize property is declared writable only to enable certain WPF core-level bridging cases that deliberately circumvent the typical layout protocols, such as support for the <a class=\"xref\" href=\"system.windows.documents.adorner\" data-linktype=\"relative-path\">Adorner</a> class.  </p>\n</div>\n<p> This property can be used for checking the applicable render size within layout system overrides such as <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnRender_\" data-linktype=\"relative-path\">OnRender</a> or <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_GetLayoutClip_\" data-linktype=\"relative-path\">GetLayoutClip</a>.  </p>\n<p> A more common scenario is handling the <a class=\"xref\" href=\"system.windows.frameworkelement#System_Windows_FrameworkElement_SizeChanged\" data-linktype=\"relative-path\">SizeChanged</a> event with the class handler override or the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnRenderSizeChanged_\" data-linktype=\"relative-path\">OnRenderSizeChanged</a> event.  </p>\n<p><a name=\"xamlTextUsage_RenderSize\"></a>   </p>\n<h2 id=\"xaml-text-usage\">XAML Text Usage</h2>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how a custom adorner uses the RenderSize value in order to create and size the rectangle graphic that defines the adorner, as part of its <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnRender_\" data-linktype=\"relative-path\">OnRender</a>implementation.  </p>\n<pre><code class=\"lang-vb\" name=\"AdornersMiscCode#UIElementDesiredSize\"> Protected Overrides Sub OnRender(ByVal drawingContext As DrawingContext)\n&#39; Get a rectangle that represents the desired size of the rendered element\n&#39; after the rendering pass.  This will be used to draw at the corners of the \n&#39; adorned element.\nDim adornedElementRect As New Rect(Me.AdornedElement.RenderSize)\n\n&#39; Some arbitrary drawing implements.\nDim renderBrush As New SolidColorBrush(Colors.Green)\nrenderBrush.Opacity = 0.2\nDim renderPen As New Pen(New SolidColorBrush(Colors.Navy), 1.5)\nDim renderRadius As Double = 5.0\n\n&#39; Just draw a circle at each corner.\ndrawingContext.DrawEllipse(renderBrush, renderPen, adornedElementRect.TopLeft, renderRadius, renderRadius)\ndrawingContext.DrawEllipse(renderBrush, renderPen, adornedElementRect.TopRight, renderRadius, renderRadius)\ndrawingContext.DrawEllipse(renderBrush, renderPen, adornedElementRect.BottomLeft, renderRadius, renderRadius)\ndrawingContext.DrawEllipse(renderBrush, renderPen, adornedElementRect.BottomRight, renderRadius, renderRadius)\n End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"AdornersMiscCode#UIElementDesiredSize\">protected override void OnRender(DrawingContext drawingContext)\n{\n  // Get a rectangle that represents the desired size of the rendered element\n  // after the rendering pass.  This will be used to draw at the corners of the \n  // adorned element.\n  Rect adornedElementRect = new Rect(this.AdornedElement.RenderSize);\n\n  // Some arbitrary drawing implements.\n  SolidColorBrush renderBrush = new SolidColorBrush(Colors.Green);\n  renderBrush.Opacity = 0.2;\n  Pen renderPen = new Pen(new SolidColorBrush(Colors.Navy), 1.5);\n  double renderRadius = 5.0;\n\n  // Just draw a circle at each corner.\n  drawingContext.DrawEllipse(renderBrush, renderPen, adornedElementRect.TopLeft, renderRadius, renderRadius);\n  drawingContext.DrawEllipse(renderBrush, renderPen, adornedElementRect.TopRight, renderRadius, renderRadius);\n  drawingContext.DrawEllipse(renderBrush, renderPen, adornedElementRect.BottomLeft, renderRadius, renderRadius);\n  drawingContext.DrawEllipse(renderBrush, renderPen, adornedElementRect.BottomRight, renderRadius, renderRadius);\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_RenderTransform\">\r\n    \r\n            <a id=\"System_Windows_UIElement_RenderTransform_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RenderTransform</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets transform information that affects the rendering position of this element.  This is a dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Media.Transform RenderTransform { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.transform\" data-linktype=\"relative-path\">Transform</a></div>\r\n                  </div>\r\n                  <p>Describes the specifics of the desired render transform. The default is <span class=\"xref\">stem.Windows.Media.Transform.Identity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A render transform does not regenerate layout size or render size information. Render transforms are typically intended for animating or applying a temporary effect to an element. For example, the element might zoom when focused or moused over, or might jitter on load to draw the eye to that part of the user interface (UI).  </p>\n<p><a name=\"dependencyPropertyInfo_RenderTransform\"></a>   </p>\n<h2 id=\"dependency-property-information\">Dependency Property Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_RenderTransformProperty\" data-linktype=\"relative-path\">RenderTransformProperty</a></td>\n</tr>\n<tr>\n<td>Metadata properties set to <code>true</code></td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_RenderTransformOrigin\">\r\n    \r\n            <a id=\"System_Windows_UIElement_RenderTransformOrigin_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RenderTransformOrigin</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the center point of any possible render transform declared by <span class=\"xref\">stem.Windows.UIElement.RenderTransform*</span>, relative to the bounds of the element.  This is a dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Point RenderTransformOrigin { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.point\" data-linktype=\"relative-path\">Point</a></div>\r\n                  </div>\r\n                  <p>The value that declares the render transform. The default value is a <a class=\"xref\" href=\"system.windows.point\" data-linktype=\"relative-path\">Point</a> with coordinates (0,0).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>RenderTransformOrigin has a somewhat nonstandard use of the <a class=\"xref\" href=\"system.windows.point\" data-linktype=\"relative-path\">Point</a> structure value, in that the <a class=\"xref\" href=\"system.windows.point\" data-linktype=\"relative-path\">Point</a> does not represent an absolute location in a coordinate system. Instead, values between 0 and 1 are interpreted as a factor for the range of the current element in each x,y axis. For example, (0.5,0.5) will cause the render transform to be centered on the element, or (1,1) would place the render transform at the bottom right corner of the element. <a class=\"xref\" href=\"system.double#System_Double_NaN\" data-linktype=\"relative-path\">NaN</a> is not an accepted value.  </p>\n<p> Values beyond 0 and 1 are also accepted, and will result in more unconventional transform effects. For instance, if you set RenderTransformOrigin to be (5,5), and then apply a <a class=\"xref\" href=\"system.windows.media.rotatetransform\" data-linktype=\"relative-path\">RotateTransform</a>, the rotation point will be well outside the bounds of the element itself. The transform will spin your element around in a big circle that originates beyond bottom right. The origin might be somewhere inside its parent element and could possibly be possibly out of frame or view. Negative point values are similar, these will go beyond the top left bounds.  </p>\n<p> Render transforms do not affect layout, and are typically used to animate or apply a temporary effect to an element.  </p>\n<p><a name=\"xamlAttributeUsage_RenderTransformOrigin\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object RenderTransformOrigin=&quot;xOrigin, yOrigin&quot;/&gt;  \n</code></pre><p><a name=\"xamlPropertyElementUsage_RenderTransformOrigin\"></a>   </p>\n<h2 id=\"xaml-property-element-usage\">XAML Property Element Usage</h2>\n<pre><code>&lt;object&gt;  \n  &lt;object.RenderTransformOrigin&gt;  \n    &lt;Point X=&quot; xOrigin &quot; Y=&quot; yOrigin &quot;/&gt;  \n  &lt;/object.RenderTransformOrigin&gt;  \n&lt;/object&gt;  \n</code></pre><p><a name=\"xamlValues_RenderTransformOrigin\"></a>   </p>\n<h2 id=\"xaml-values\">XAML Values</h2>\n<p> <em>xOrigin</em><br> The horizontal origin factor. This is typically given as a value between 0 and 1. See Remarks.  </p>\n<p> <em>yOrigin</em><br> The vertical origin factor. This is typically given as a value between 0 and 1. See Remarks.  </p>\n<p><a name=\"dependencyPropertyInfo_RenderTransformOrigin\"></a>   </p>\n<h2 id=\"dependency-property-information\">Dependency Property Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_RenderTransformOriginProperty\" data-linktype=\"relative-path\">RenderTransformOriginProperty</a></td>\n</tr>\n<tr>\n<td>Metadata properties set to <code>true</code></td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example builds up elements in code, applies a RenderTransformOrigin, and then applies a  <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_RenderTransform_\" data-linktype=\"relative-path\">RenderTransform</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"transformanimations_snip#UIElementRenderTransformOrigin\">public RotateAboutCenterExample()\n{\n    this.WindowTitle = &quot;Rotate About Center Example&quot;;\n    NameScope.SetNameScope(this, new NameScope());\n    StackPanel myStackPanel = new StackPanel();\n    myStackPanel.Margin = new Thickness(50);\n\n    Button myButton = new Button();\n    myButton.Name = &quot;myRenderTransformButton&quot;;\n    this.RegisterName(myButton.Name,myButton);\n    myButton.RenderTransformOrigin = new Point(0.5,0.5);\n    myButton.HorizontalAlignment = HorizontalAlignment.Left;\n    myButton.Content = &quot;Hello World&quot;;\n\n\n    RotateTransform myRotateTransform = new RotateTransform(0);\n    myButton.RenderTransform = myRotateTransform;\n    this.RegisterName(&quot;MyAnimatedTransform&quot;,myRotateTransform);\n\n    myStackPanel.Children.Add(myButton);\n\n    //\n    // Creates an animation that accelerates through 40% of its duration and\n    //      decelerates through the 60% of its duration.\n    //\n    DoubleAnimation myRotateAboutCenterAnimation = new DoubleAnimation();\n    Storyboard.SetTargetName(myRotateAboutCenterAnimation,&quot;MyAnimatedTransform&quot;);\n    Storyboard.SetTargetProperty(myRotateAboutCenterAnimation,new PropertyPath(RotateTransform.AngleProperty));\n    myRotateAboutCenterAnimation.From = 0.0;\n    myRotateAboutCenterAnimation.To = 360;\n    myRotateAboutCenterAnimation.Duration = new Duration(TimeSpan.FromMilliseconds(1000));\n\n    // Create a Storyboard to contain the animations and\n    // add the animations to the Storyboard.\n    Storyboard myStoryboard = new Storyboard();\n    myStoryboard.Children.Add(myRotateAboutCenterAnimation);\n\n    // Create an EventTrigger and a BeginStoryboard action to\n    // start the storyboard.\n    EventTrigger myEventTrigger = new EventTrigger();\n    myEventTrigger.RoutedEvent = Button.ClickEvent;\n    myEventTrigger.SourceName = myButton.Name;\n    BeginStoryboard myBeginStoryboard = new BeginStoryboard();\n    myBeginStoryboard.Storyboard = myStoryboard;\n    myEventTrigger.Actions.Add(myBeginStoryboard);\n    myStackPanel.Triggers.Add(myEventTrigger);\n\n    this.Content = myStackPanel;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"transformanimations_snip#UIElementRenderTransformOrigin\">Public Sub New()\n\tMe.WindowTitle = &quot;Rotate About Center Example&quot;\n\tNameScope.SetNameScope(Me, New NameScope())\n\tDim myStackPanel As New StackPanel()\n\tmyStackPanel.Margin = New Thickness(50)\n\n\tDim myButton As New Button()\n\tmyButton.Name = &quot;myRenderTransformButton&quot;\n\tMe.RegisterName(myButton.Name,myButton)\n\tmyButton.RenderTransformOrigin = New Point(0.5,0.5)\n\tmyButton.HorizontalAlignment = HorizontalAlignment.Left\n\tmyButton.Content = &quot;Hello World&quot;\n\n\n\tDim myRotateTransform As New RotateTransform(0)\n\tmyButton.RenderTransform = myRotateTransform\n\tMe.RegisterName(&quot;MyAnimatedTransform&quot;,myRotateTransform)\n\n\tmyStackPanel.Children.Add(myButton)\n\n\t&#39;\n\t&#39; Creates an animation that accelerates through 40% of its duration and\n\t&#39;      decelerates through the 60% of its duration.\n\t&#39;\n\tDim myRotateAboutCenterAnimation As New DoubleAnimation()\n\tStoryboard.SetTargetName(myRotateAboutCenterAnimation,&quot;MyAnimatedTransform&quot;)\n\tStoryboard.SetTargetProperty(myRotateAboutCenterAnimation,New PropertyPath(RotateTransform.AngleProperty))\n\tmyRotateAboutCenterAnimation.From = 0.0\n\tmyRotateAboutCenterAnimation.To = 360\n\tmyRotateAboutCenterAnimation.Duration = New Duration(TimeSpan.FromMilliseconds(1000))\n\n\t&#39; Create a Storyboard to contain the animations and\n\t&#39; add the animations to the Storyboard.\n\tDim myStoryboard As New Storyboard()\n\tmyStoryboard.Children.Add(myRotateAboutCenterAnimation)\n\n\t&#39; Create an EventTrigger and a BeginStoryboard action to\n\t&#39; start the storyboard.\n\tDim myEventTrigger As New EventTrigger()\n\tmyEventTrigger.RoutedEvent = Button.ClickEvent\n\tmyEventTrigger.SourceName = myButton.Name\n\tDim myBeginStoryboard As New BeginStoryboard()\n\tmyBeginStoryboard.Storyboard = myStoryboard\n\tmyEventTrigger.Actions.Add(myBeginStoryboard)\n\tmyStackPanel.Triggers.Add(myEventTrigger)\n\n\tMe.Content = myStackPanel\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_SnapsToDevicePixels\">\r\n    \r\n            <a id=\"System_Windows_UIElement_SnapsToDevicePixels_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SnapsToDevicePixels</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that determines whether rendering for this element should use device-specific pixel settings during rendering.  This is a dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool SnapsToDevicePixels { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the element should render in accordance to device pixels; otherwise, <code>false</code>. The default as declared on <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can set this property to <code>true</code> on your root element to enable pixel snap rendering throughout the UI. For devices operating at greater than 96 dots per inch (dpi), pixel snap rendering can minimize anti-aliasing visual artifacts in the vicinity of single-unit solid lines.  </p>\n<p> When inherited by <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a> or any possible derived classes, <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a> overrides the metadata for this dependency property to set the <a class=\"xref\" href=\"system.windows.frameworkpropertymetadata#System_Windows_FrameworkPropertyMetadata_Inherits_\" data-linktype=\"relative-path\">Inherits</a> metadata property to <code>true</code>. What this achieves is that only the outermost element in a subtree needs to specify SnapsToDevicePixels as <code>true</code>, and all child elements of that subtree will then report SnapsToDevicePixels as <code>true</code> and will have the SnapsToDevicePixels visual effect.  </p>\n<p><a name=\"dependencyPropertyInfo_SnapsToDevicePixels\"></a>   </p>\n<h2 id=\"dependency-property-information\">Dependency Property Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_SnapsToDevicePixelsProperty\" data-linktype=\"relative-path\">SnapsToDevicePixelsProperty</a></td>\n</tr>\n<tr>\n<td>Metadata properties set to <code>true</code></td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_StylusPlugIns\">\r\n    \r\n            <a id=\"System_Windows_UIElement_StylusPlugIns_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StylusPlugIns</div>        \r\n          </div>\r\n    \r\n            <p>Gets a collection of all stylus plug-in (customization) objects associated with this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected System.Windows.Input.StylusPlugIns.StylusPlugInCollection StylusPlugIns { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.stylusplugins.stylusplugincollection\" data-linktype=\"relative-path\">StylusPlugInCollection</a></div>\r\n                  </div>\r\n                  <p>The collection of stylus plug-ins, as a specialized collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An example of a control that populates this collection is <a class=\"xref\" href=\"system.windows.controls.inkcanvas\" data-linktype=\"relative-path\">InkCanvas</a>. <a class=\"xref\" href=\"system.windows.controls.inkcanvas\" data-linktype=\"relative-path\">InkCanvas</a> adds the <a class=\"xref\" href=\"system.windows.input.stylusplugins.dynamicrenderer\" data-linktype=\"relative-path\">DynamicRenderer</a> as a collection item, which enables the <a class=\"xref\" href=\"system.windows.input.stylusplugins.dynamicrenderer\" data-linktype=\"relative-path\">DynamicRenderer</a> to interact with stylus input and produce the unique rendering in response to stylus driven events.  </p>\n<p> For information on creating custom plug-ins that can receive and interpret stylus input, see <a href=\"../Topic/Intercepting%20Input%20from%20the%20Stylus.md\" data-linktype=\"relative-path\">Intercepting Input from the Stylus</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.windows.input.stylusplugins.dynamicrenderer\" data-linktype=\"relative-path\">DynamicRenderer</a> instance and adds it to the StylusPlugIns collection for a custom ink handling control.  </p>\n<pre><code class=\"lang-vb\" name=\"StylusPluginSamples#3\">&#39; Create a DrawingAttributes to use for the \n&#39; DynamicRenderer.\nDim inkDA As New DrawingAttributes()\ninkDA.Width = 5\ninkDA.Height = 5\ninkDA.Color = Colors.Purple\n\n&#39; Add a dynamic renderer plugin that \n&#39; draws ink as it &quot;flows&quot; from the stylus\nDim dynamicRenderer1 As New DynamicRenderer()\ndynamicRenderer1.DrawingAttributes = inkDA\n\nMe.StylusPlugIns.Add(dynamicRenderer1)\ninkPresenter1.AttachVisuals(dynamicRenderer1.RootVisual, dynamicRenderer1.DrawingAttributes)\n</code></pre><pre><code class=\"lang-cs\" name=\"StylusPluginSamples#3\">// Create a DrawingAttributes to use for the \n// DynamicRenderer.\nDrawingAttributes inkDA = new DrawingAttributes();\ninkDA.Width = 5;\ninkDA.Height = 5;\ninkDA.Color = Colors.Purple;\n\n// Add a dynamic renderer plugin that \n// draws ink as it &quot;flows&quot; from the stylus\nDynamicRenderer dynamicRenderer1 = new DynamicRenderer();\ndynamicRenderer1.DrawingAttributes = inkDA;\n\nthis.StylusPlugIns.Add(dynamicRenderer1);\ninkPresenter1.AttachVisuals(dynamicRenderer1.RootVisual,\n    dynamicRenderer1.DrawingAttributes);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_TouchesCaptured\">\r\n    \r\n            <a id=\"System_Windows_UIElement_TouchesCaptured_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TouchesCaptured</div>        \r\n          </div>\r\n    \r\n            <p>Gets all touch devices that are captured to this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCaptured { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.windows.input.touchdevice\" data-linktype=\"relative-path\">TouchDevice</a>&gt;</div>\r\n                  </div>\r\n                  <p>An enumeration of <a class=\"xref\" href=\"system.windows.input.touchdevice\" data-linktype=\"relative-path\">TouchDevice</a> objects that are captured to this element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_TouchesCapturedWithin\">\r\n    \r\n            <a id=\"System_Windows_UIElement_TouchesCapturedWithin_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TouchesCapturedWithin</div>        \r\n          </div>\r\n    \r\n            <p>Gets all touch devices that are captured to this element or any child elements in its visual tree.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.windows.input.touchdevice\" data-linktype=\"relative-path\">TouchDevice</a>&gt;</div>\r\n                  </div>\r\n                  <p>An enumeration of <a class=\"xref\" href=\"system.windows.input.touchdevice\" data-linktype=\"relative-path\">TouchDevice</a> objects that are captured to this element or any child elements in its visual tree.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_TouchesDirectlyOver\">\r\n    \r\n            <a id=\"System_Windows_UIElement_TouchesDirectlyOver_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TouchesDirectlyOver</div>        \r\n          </div>\r\n    \r\n            <p>Gets all touch devices that are over this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.windows.input.touchdevice\" data-linktype=\"relative-path\">TouchDevice</a>&gt;</div>\r\n                  </div>\r\n                  <p>An enumeration of <a class=\"xref\" href=\"system.windows.input.touchdevice\" data-linktype=\"relative-path\">TouchDevice</a> objects that are over this element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_TouchesOver\">\r\n    \r\n            <a id=\"System_Windows_UIElement_TouchesOver_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TouchesOver</div>        \r\n          </div>\r\n    \r\n            <p>Gets all touch devices that are over this element or any child elements in its visual tree.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesOver { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.windows.input.touchdevice\" data-linktype=\"relative-path\">TouchDevice</a>&gt;</div>\r\n                  </div>\r\n                  <p>An enumeration of <a class=\"xref\" href=\"system.windows.input.touchdevice\" data-linktype=\"relative-path\">TouchDevice</a> objects that are over this element or any child elements in its visual tree.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_Uid\">\r\n    \r\n            <a id=\"System_Windows_UIElement_Uid_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Uid</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the unique identifier (for localization) for this element. This is a dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Uid { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that is the unique identifier for this element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Used by designers to get the <code>x:Uid</code> value (see <a href=\"../Topic/WPF%20Globalization%20and%20Localization%20Overview.md\" data-linktype=\"relative-path\">WPF Globalization and Localization Overview</a> for more information).  </p>\n<p><a name=\"dependencyPropertyInfo_WindowWindowStyle\"></a>   </p>\n<h2 id=\"dependency-property-information\">Dependency Property Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_UidProperty\" data-linktype=\"relative-path\">UidProperty</a></td>\n</tr>\n<tr>\n<td>Metadata properties set to <code>true</code></td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_Visibility\">\r\n    \r\n            <a id=\"System_Windows_UIElement_Visibility_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Visibility</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the user interface (UI) visibility of this element.  This is a dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Visibility Visibility { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.visibility\" data-linktype=\"relative-path\">Visibility</a></div>\r\n                  </div>\r\n                  <p>A value of the enumeration. The default value is <a class=\"xref\" href=\"system.windows.visibility\" data-linktype=\"relative-path\">Visibility</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Setting this property affects the value of <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsVisible_\" data-linktype=\"relative-path\">IsVisible</a>, which in turn may raise the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsVisibleChanged\" data-linktype=\"relative-path\">IsVisibleChanged</a> event. However, <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsVisible_\" data-linktype=\"relative-path\">IsVisible</a> has other factors that influence it, for instance the visibility settings of parents that contain it.  </p>\n<p> Elements where Visibility is not <a class=\"xref\" href=\"system.windows.visibility\" data-linktype=\"relative-path\">Visibility</a> do not participate in input events (or commands), do not influence either the Measure or Arrange passes of layout, are not in a tab sequence, and will not be reported in hit testing.  </p>\n<p> When inherited by <a class=\"xref\" href=\"system.windows.window\" data-linktype=\"relative-path\">Window</a> or its derived classes, <a class=\"xref\" href=\"system.windows.window\" data-linktype=\"relative-path\">Window</a> redefines the default value of this property to be <a class=\"xref\" href=\"system.windows.visibility\" data-linktype=\"relative-path\">Visibility</a>. This has the effect of not running the Measure pass of layout on an initially created <a class=\"xref\" href=\"system.windows.window\" data-linktype=\"relative-path\">Window</a>, and <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_RenderSize_\" data-linktype=\"relative-path\">RenderSize</a> returns (0,0). For details, see <a class=\"xref\" href=\"system.windows.window\" data-linktype=\"relative-path\">Window</a>. <a class=\"xref\" href=\"system.windows.controls.primitives.popup\" data-linktype=\"relative-path\">Popup</a> also redefines the default value to be <a class=\"xref\" href=\"system.windows.visibility\" data-linktype=\"relative-path\">Visibility</a>, with similar resulting behavior for <a class=\"xref\" href=\"system.windows.controls.primitives.popup\" data-linktype=\"relative-path\">Popup</a> and its derived classes.  </p>\n<p><a name=\"dependencyPropertyInfo_Visibility\"></a>   </p>\n<h2 id=\"dependency-property-information\">Dependency Property Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_VisibilityProperty\" data-linktype=\"relative-path\">VisibilityProperty</a></td>\n</tr>\n<tr>\n<td>Metadata properties set to <code>true</code></td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example implements a handler that references two different named buttons that are intended to be a mutually exclusive pair in the user interface. Prior to running the actual program logic associated with the button, the button itself is set to be <a class=\"xref\" href=\"system.windows.visibility\" data-linktype=\"relative-path\">System.Windows.Visibility</a>, and the other button in the pair is set to <a class=\"xref\" href=\"system.windows.visibility\" data-linktype=\"relative-path\">System.Windows.Visibility</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"MediaElement_snip#UIElementVisibility\">        private void PlayMedia(object sender, MouseButtonEventArgs args)\n        {\n            pauseBTN.Visibility = Visibility.Visible;\n            playBTN.Visibility = Visibility.Collapsed;\n\n            media.SpeedRatio = 1.0;\n            media.Play();\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"MediaElement_snip#UIElementVisibility\">        Private Sub PlayMedia(ByVal sender As Object, ByVal args As MouseButtonEventArgs)\n            pauseBTN.Visibility = System.Windows.Visibility.Visible\n            playBTN.Visibility = System.Windows.Visibility.Collapsed\n\n            media.SpeedRatio = 1.0\n            media.Play()\n\n        End Sub &#39;PlayMedia\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_AddHandler_System_Windows_RoutedEvent_System_Delegate_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_AddHandler_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddHandler(RoutedEvent,Delegate)</div>        \r\n          </div>\r\n    \r\n            <p>Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>routedEvent</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.routedevent\" data-linktype=\"relative-path\">RoutedEvent</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An identifier for the routed event to be handled.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>handler</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A reference to the handler implementation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can add the same handler for the same event multiple times without raising an exception. However, the handler is actually invoked multiple times when the event is handled. Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.  </p>\n<p> You typically use this method to provide the implementation of the &quot;add&quot; accessor for the Microsoft .NET event access pattern of a custom routed event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_AddHandler_System_Windows_RoutedEvent_System_Delegate_System_Boolean_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_AddHandler_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddHandler(RoutedEvent,Delegate,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element. Specify <code>handledEventsToo</code> as <code>true</code> to have the provided handler be invoked for routed event that had already been marked as handled by another element along the event route.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>routedEvent</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.routedevent\" data-linktype=\"relative-path\">RoutedEvent</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An identifier for the routed event to be handled.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>handler</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A reference to the handler implementation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>handledEventsToo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to register the handler such that it is invoked even when  the routed event is marked handled in its event data; <code>false</code> to register the handler with the default condition that it will not be invoked if the routed event is already marked handled.  </p>\n<p> The default is <code>false</code>.  </p>\n<p> Do not routinely ask to rehandle a routed event. For more information, see Remarks.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Processing low-level input events in a practical way is a complex task. Many controls implement behavior where a certain event is marked as handled, and is replaced by another more intuitive event. Generally, a control will only mark a platform input event as handled if there is some design intention for doing so. In certain scenarios, those design intentions might not be what your particular handling of the input event requires. It is for these scenarios that registering handlers with <code>handledEventsToo</code> as <code>true</code> is appropriate. But you should not do this routinely. Invoking handlers in response to all events even if handled will complicate your own application event processing logic. You may see a decrease in performance if the handler logic is substantial. You should reserve the use of attaching handlers for already-handled events for situations where you have already discovered during the development process that certain controls are handling events that you still want to handle with application logic.  </p>\n<p> Another technique for avoiding the class handling behavior of certain event-control combinations is to use that event&#39;s preview alternative. For example, if <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseLeftButtonDown\" data-linktype=\"relative-path\">MouseLeftButtonDown</a> is marked handled by class handling, you might be able to add handlers for <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseLeftButtonDown\" data-linktype=\"relative-path\">PreviewMouseLeftButtonDown</a> instead.  </p>\n<p> You can add the same handler for the same event multiple times without raising an exception. However, the handler is actually invoked multiple times when the event is handled. Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.  </p>\n<p> You typically use this method to provide the implementation of the &quot;add&quot; accessor for the Microsoft .NET event access pattern of a custom routed event.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example implements a handler invoked on the <a class=\"xref\" href=\"system.windows.frameworkelement#System_Windows_FrameworkElement_Initialized\" data-linktype=\"relative-path\">Initialized</a> event on a page that attaches a defined handler to one of the named elements on the page using <code>handledEventsToo</code> <code>true</code>. This handler would be invoked even if another element along the route marked the shared event data as handled before reaching the handling element in the route.  </p>\n<pre><code class=\"lang-cs\" name=\"EventOvwSupport#AddHandlerHandledToo\">void PrimeHandledToo(object sender, EventArgs e)\n{\n    dpanel2.AddHandler(Button.ClickEvent, new RoutedEventHandler(GetHandledToo), true);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"EventOvwSupport#AddHandlerHandledToo\">Private Sub PrimeHandledToo(ByVal sender As Object, ByVal e As EventArgs)\n dpanel2.AddHandler(Button.ClickEvent, New RoutedEventHandler(AddressOf GetHandledToo), True)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_AddToEventRoute_System_Windows_EventRoute_System_Windows_RoutedEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_AddToEventRoute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddToEventRoute(EventRoute,RoutedEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Adds handlers to the specified <a class=\"xref\" href=\"system.windows.eventroute\" data-linktype=\"relative-path\">EventRoute</a> for the current <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> event handler collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AddToEventRoute (System.Windows.EventRoute route, System.Windows.RoutedEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>route</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.eventroute\" data-linktype=\"relative-path\">EventRoute</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The event route that handlers are added to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.routedeventargs\" data-linktype=\"relative-path\">RoutedEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The event data that is used to add the handlers. This method uses the <span class=\"xref\">stem.Windows.RoutedEventArgs.RoutedEvent*</span> property of the event data to create the handlers.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method can be used by content host elements (either those that implement <a class=\"xref\" href=\"system.windows.icontenthost\" data-linktype=\"relative-path\">IContentHost</a> or those that don&#39;t) to add handlers for child elements to the <a class=\"xref\" href=\"system.windows.eventroute\" data-linktype=\"relative-path\">EventRoute</a>. Ordinarily, this is not required for <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a>, because handlers are automatically added for all elements found in a completed logical tree. However, in some cases where <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> and <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> are mixed in templated trees, intervening elements that came from the template need to be added to a route. Both <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a> and <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> support a version of this method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_ApplyAnimationClock_System_Windows_DependencyProperty_System_Windows_Media_Animation_AnimationClock_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_ApplyAnimationClock_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ApplyAnimationClock(DependencyProperty,AnimationClock)</div>        \r\n          </div>\r\n    \r\n            <p>Applies an animation to a specified dependency property on this element. Any existing animations are stopped and replaced with the new animation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dp</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The identifier for the property to animate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>clock</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.animation.animationclock\" data-linktype=\"relative-path\">AnimationClock</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The animation clock that controls and declares the animation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To remove an animation from a property, specify the identifier for that property as <code>dp</code> and specify <code>clock</code> as <code>null</code>. This removes the animation and the animated property is set to its base value. However, the originally associated animation clock is not stopped. Any other animations assigned to that clock will continue to run.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>In the following example, a <a class=\"xref\" href=\"system.windows.shapes.rectangle\" data-linktype=\"relative-path\">Rectangle</a> <code>myAnimatedRectangle</code> has a particular timing animation applied to it by calling ApplyAnimationClock .  </p>\n<pre><code class=\"lang-cs\" name=\"timingbehaviors_procedural_snip#UIElementApplyAnimationClock\">// Create a DoubleAnimation to\n// animate its width.\nDoubleAnimation widthAnimation = \n    new DoubleAnimation(\n        100,\n        500, \n        new Duration(TimeSpan.FromSeconds(5)));\n//widthAnimation.RepeatBehavior = RepeatBehavior.Forever;\nwidthAnimation.AutoReverse = true;\nwidthAnimation.SpeedRatio = 0.5;\n        \n// Create a clock from the animation.\nmyControllableClock = widthAnimation.CreateClock();\n\n// Apply the clock to the rectangle&#39;s Width property.\nanimatedRectangle.ApplyAnimationClock(\n    Rectangle.WidthProperty, myControllableClock);    \n\n</code></pre><pre><code class=\"lang-vb\" name=\"timingbehaviors_procedural_snip#UIElementApplyAnimationClock\">&#39; Create a DoubleAnimation to\n&#39; animate its width.\nDim widthAnimation As New DoubleAnimation(100, 500, New Duration(TimeSpan.FromSeconds(5)))\n&#39;widthAnimation.RepeatBehavior = RepeatBehavior.Forever\nwidthAnimation.AutoReverse = True\nwidthAnimation.SpeedRatio = 0.5\n\n&#39; Create a clock from the animation.\nmyControllableClock = widthAnimation.CreateClock()\n\n&#39; Apply the clock to the rectangle&#39;s Width property.\nanimatedRectangle.ApplyAnimationClock(Rectangle.WidthProperty, myControllableClock)\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_ApplyAnimationClock_System_Windows_DependencyProperty_System_Windows_Media_Animation_AnimationClock_System_Windows_Media_Animation_HandoffBehavior_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_ApplyAnimationClock_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)</div>        \r\n          </div>\r\n    \r\n            <p>Applies an animation to a specified dependency property on this element, with the ability to specify what happens if the property already has a running animation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dp</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The property to animate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>clock</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.animation.animationclock\" data-linktype=\"relative-path\">AnimationClock</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The animation clock that controls and declares the animation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>handoffBehavior</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value of the enumeration. The default is <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a>, which will stop any existing animation and replace with the new one.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To remove an animation from a property, specify the identifier for that property as <code>dp</code> and specify <code>clock</code> as <code>null</code>. This removes the animation and the animated property is set to its base value. However, the originally associated animation clock is not stopped. Any other animations assigned to that clock will continue to run.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_Arrange_System_Windows_Rect_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_Arrange_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Arrange(Rect)</div>        \r\n          </div>\r\n    \r\n            <p>Positions child elements and determines a size for a <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a>. Parent elements call this method from their <span class=\"xref\">stem.Windows.UIElement.ArrangeCore*</span> implementation (or a WPF framework-level equivalent) to form a recursive layout update. This method constitutes the second pass of a layout update.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Arrange (System.Windows.Rect finalRect);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>finalRect</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The final size that the parent computes for the child element, provided as a <a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a> instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For WPF framework-level element deriving scenarios, behavior for Arrange should not (and cannot, unless you shadow) be changed. Instead, you should override the <a class=\"xref\" href=\"system.windows.frameworkelement#System_Windows_FrameworkElement_ArrangeOverride_\" data-linktype=\"relative-path\">ArrangeOverride</a> implementation in your class. Your <a class=\"xref\" href=\"system.windows.frameworkelement#System_Windows_FrameworkElement_ArrangeOverride_\" data-linktype=\"relative-path\">ArrangeOverride</a> implementation is called internally by Arrange as part of default WPF framework-level layout operations. Your <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ArrangeCore_\" data-linktype=\"relative-path\">ArrangeCore</a> implementation should also call <a class=\"xref\" href=\"system.windows.frameworkelement#System_Windows_FrameworkElement_ArrangeOverride_\" data-linktype=\"relative-path\">ArrangeOverride</a> on each child element, if it has child elements.  </p>\n<p> For WPF core-level element deriving scenarios, the behavior for Arrange should not (and cannot, unless you shadow) be changed. Instead, you should override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ArrangeCore_\" data-linktype=\"relative-path\">ArrangeCore</a> in your class. Your <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ArrangeCore_\" data-linktype=\"relative-path\">ArrangeCore</a> implementation is called internally by Arrange as part of default WPF framework-level layout operations. However, this assumes you are using WPF framework-level layout and its layout system, which is often not the case if you are specifically deriving elements at the WPF core-level from the <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> base element class. Your <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ArrangeCore_\" data-linktype=\"relative-path\">ArrangeCore</a> implementation should also call Arrange on each child element, if it has child elements. Note that the WPF core-level scenario implies that you are not using a <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a> derived class, because <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a> seals <a class=\"xref\" href=\"system.windows.frameworkelement#System_Windows_FrameworkElement_ArrangeCore_\" data-linktype=\"relative-path\">ArrangeCore</a>.  </p>\n<p> Computation of WPF framework-level layout positioning in Windows Presentation Foundation (WPF) consists of a <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_Measure_\" data-linktype=\"relative-path\">Measure</a> call and an Arrange call. During the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_Measure_\" data-linktype=\"relative-path\">Measure</a> call, the layout system determines an element&#39;s size requirements using a provided <a class=\"xref\" href=\"system.windows.size\" data-linktype=\"relative-path\">Size</a> (<code>availableSize</code>) argument. During the Arrange call, the layout system finalizes the size and position of an element&#39;s bounding box.  For more information, see <a href=\"../Topic/Layout.md\" data-linktype=\"relative-path\">Layout</a>.  </p>\n<p> <code>availableSize</code> can be any number from zero to infinity. Elements to be laid out return the minimum <a class=\"xref\" href=\"system.windows.size\" data-linktype=\"relative-path\">Size</a> they require through the <code>availableSize</code> parameter.  </p>\n<p> When a layout is first instantiated, it always receives a <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_Measure_\" data-linktype=\"relative-path\">Measure</a> call before Arrange. However, after the first layout pass, it may receive an Arrange call without a <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_Measure_\" data-linktype=\"relative-path\">Measure</a>; this can happen when a property that affects only Arrange is changed (such as alignment), or when the parent receives an Arrange without a <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_Measure_\" data-linktype=\"relative-path\">Measure</a>. A <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_Measure_\" data-linktype=\"relative-path\">Measure</a> call will automatically invalidate an Arrange call.  </p>\n<p> Layout updates generally occur asynchronously (at a time determined by the layout system). An element might not immediately reflect changes to properties that affect element sizing (such as <a class=\"xref\" href=\"system.windows.frameworkelement#System_Windows_FrameworkElement_Width_\" data-linktype=\"relative-path\">Width</a>).  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Layout updates can be forced by using the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_UpdateLayout_\" data-linktype=\"relative-path\">UpdateLayout</a> method; however, calling this function is not recommended, as it is usually unnecessary and can cause poor performance. In many situations where calling <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_UpdateLayout_\" data-linktype=\"relative-path\">UpdateLayout</a> might be appropriate, the layout system will probably already be processing updates. The layout system can process layout changes in a manner that can optimize all necessary updates as part of a package.  </p>\n</div>\n<p> The layout system keeps two separate queues of invalid layouts, one for <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_Measure_\" data-linktype=\"relative-path\">Measure</a> and one for Arrange. The layout queue is sorted based upon the order of elements in the visual tree. Elements higher in the tree are at the top of the queue, in order to avoid redundant layouts caused by repeated changes in parents. Duplicate entries are automatically removed from the queue, and elements are automatically removed from the queue if they are already valid.  </p>\n<p> When updating layout, the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_Measure_\" data-linktype=\"relative-path\">Measure</a> queue is emptied first, followed by the Arrange queue. An element in the Arrange queue will never be arranged if there is an element in the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_Measure_\" data-linktype=\"relative-path\">Measure</a> queue.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_ArrangeCore_System_Windows_Rect_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_ArrangeCore_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ArrangeCore(Rect)</div>        \r\n          </div>\r\n    \r\n            <p>Defines the template for WPF core-level arrange layout definition.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void ArrangeCore (System.Windows.Rect finalRect);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>finalRect</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The final area within the parent that element should use to arrange itself and its child elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Overriding this method is only appropriate if you are deriving at the WPF core-level, and you are not using the WPF framework-level layout system and <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a> derived class, because <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a> seals <a class=\"xref\" href=\"system.windows.frameworkelement#System_Windows_FrameworkElement_ArrangeCore_\" data-linktype=\"relative-path\">ArrangeCore</a>. If you are using the WPF framework-level layout system, the appropriate method to override for class-specific layout arrange behavior is <a class=\"xref\" href=\"system.windows.frameworkelement#System_Windows_FrameworkElement_ArrangeOverride_\" data-linktype=\"relative-path\">ArrangeOverride</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>ArrangeCore implementations should call the base implementation to return a size, then call the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_Arrange_\" data-linktype=\"relative-path\">Arrange</a> method of each visible child element, and reconcile the sizes returned by these <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_Arrange_\" data-linktype=\"relative-path\">Arrange</a> calls with the size of the base implementation. The logic for the reconciliation aspect of a ArrangeCore implementation might vary, depending on the layout characteristics of your element. In the following example template, <code>VisualChildren</code> is a hypothetical property that your element might define to help enumerate its content; <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> does not define content collections at this level, the WPF framework-level architecture defers content behavior to derived elements such as specific controls or control base classes.  </p>\n<pre><code class=\"lang-cs\" name=\"CorePseudocode#UIElementArrangeOverride\">protected override void ArrangeCore(Rect finalRect)\n{\n     //Call base, it will set offset and RenderBounds to the finalRect:\n     base.ArrangeCore(finalRect);\n     foreach (UIElement child in VisualChildren)\n     {\n         child.Arrange(new Rect(childX, childY, childWidth, childHeight));\n     }\n }\n</code></pre><pre><code class=\"lang-vb\" name=\"CorePseudocode#UIElementArrangeOverride\">Protected Overrides Sub ArrangeCore(ByVal finalRect As Rect)\n\t &#39;Call base, it will set offset and RenderBounds to the finalRect:\n\t MyBase.ArrangeCore(finalRect)\n\t For Each child As UIElement In VisualChildren\n\t\t child.Arrange(New Rect(childX, childY, childWidth, childHeight))\n\t Next child\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_BeginAnimation_System_Windows_DependencyProperty_System_Windows_Media_Animation_AnimationTimeline_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_BeginAnimation_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginAnimation(DependencyProperty,AnimationTimeline)</div>        \r\n          </div>\r\n    \r\n            <p>Starts an animation for a specified animated property on this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dp</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The property to animate, which is specified as a dependency property identifier.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>animation</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.animation.animationtimeline\" data-linktype=\"relative-path\">AnimationTimeline</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The timeline of the animation to start.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.  </p>\n<p> If the <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_BeginTime_\" data-linktype=\"relative-path\">BeginTime</a> for <code>animation</code> is <code>null</code>, then any current animations are removed and the current value of the property is held.  </p>\n<p> If the entire <code>animation</code> value is <code>null</code>, all animations are removed from the property and the property value reverts to its base value. However, the originally associated animation timeline is not stopped. Any other animations assigned to that timeline will continue to run.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an animation, assigns it, and then calls BeginAnimation to start it.  </p>\n<pre><code class=\"lang-cs\" name=\"timingbehaviors_procedural_snip#BeginAnimation\">// Animate the button&#39;s width.\nDoubleAnimation widthAnimation = \n    new DoubleAnimation(120, 300, TimeSpan.FromSeconds(5));\nwidthAnimation.RepeatBehavior = RepeatBehavior.Forever;\nwidthAnimation.AutoReverse = true;\nanimatedButton.BeginAnimation(Button.WidthProperty, widthAnimation);\n</code></pre><pre><code class=\"lang-vb\" name=\"timingbehaviors_procedural_snip#BeginAnimation\">&#39; Animate the button&#39;s width.\nDim widthAnimation As New DoubleAnimation(120, 300, TimeSpan.FromSeconds(5))\nwidthAnimation.RepeatBehavior = RepeatBehavior.Forever\nwidthAnimation.AutoReverse = True\nanimatedButton.BeginAnimation(Button.WidthProperty, widthAnimation)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_BeginAnimation_System_Windows_DependencyProperty_System_Windows_Media_Animation_AnimationTimeline_System_Windows_Media_Animation_HandoffBehavior_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_BeginAnimation_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)</div>        \r\n          </div>\r\n    \r\n            <p>Starts a specific animation for a specified animated property on this element, with the option of specifying what happens if the property already has a running animation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dp</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The property to animate, which is specified as the dependency property identifier.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>animation</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.animation.animationtimeline\" data-linktype=\"relative-path\">AnimationTimeline</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The timeline of the animation to be applied.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>handoffBehavior</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value of the enumeration that specifies how the new animation interacts with any current (running) animations that are already affecting the property value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.  </p>\n<p> If the <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_BeginTime_\" data-linktype=\"relative-path\">BeginTime</a> for <code>animation</code> is <code>null</code>, then any current animations are removed and the current value of the property is held.  </p>\n<p> If the entire <code>animation</code> value is <code>null</code>, all animations are removed from the property and the property value reverts to its base value. However, the originally associated animation timeline is not stopped. Any other animations assigned to that timeline will continue to run.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example implements a handler that obtains an existing animation from a resource and then calls BeginAnimation with a specified handoff behavior.  </p>\n<pre><code class=\"lang-cs\" name=\"BrushesIntroduction#BeginAnimationHandoff\">private void myFrameNavigated(object sender, NavigationEventArgs args)\n{\n    DoubleAnimation myFadeInAnimation = (DoubleAnimation)this.Resources[&quot;MyFadeInAnimationResource&quot;];\n    myFrame.BeginAnimation(Frame.OpacityProperty, myFadeInAnimation, HandoffBehavior.SnapshotAndReplace);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"BrushesIntroduction#BeginAnimationHandoff\">Private Sub myFrameNavigated(ByVal sender As Object, ByVal args As NavigationEventArgs)\n\tDim myFadeInAnimation As DoubleAnimation = CType(Me.Resources(&quot;MyFadeInAnimationResource&quot;), DoubleAnimation)\n\tmyFrame.BeginAnimation(Frame.OpacityProperty, myFadeInAnimation, HandoffBehavior.SnapshotAndReplace)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_CaptureMouse\">\r\n    \r\n            <a id=\"System_Windows_UIElement_CaptureMouse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CaptureMouse()</div>        \r\n          </div>\r\n    \r\n            <p>Attempts to force capture of the mouse to this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool CaptureMouse ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the mouse is successfully captured; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To be captured, an element must be enabled. Check whether <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsEnabled_\" data-linktype=\"relative-path\">IsEnabled</a> is <code>true</code> before you call CaptureMouse.  </p>\n<p> If calling CaptureMouse returns <code>true</code>, then <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsMouseCaptured_\" data-linktype=\"relative-path\">IsMouseCaptured</a> is also <code>true</code>.  </p>\n<p> If calling CaptureMouse returns <code>true</code>, then the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_GotMouseCapture\" data-linktype=\"relative-path\">GotMouseCapture</a> and <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsMouseCapturedChanged\" data-linktype=\"relative-path\">IsMouseCapturedChanged</a> events are raised, with <a class=\"xref\" href=\"system.windows.routedeventargs#System_Windows_RoutedEventArgs_Source_\" data-linktype=\"relative-path\">Source</a> in the event data reported as the element where the CaptureMouse method is called. If you force capture, you might interfere with existing captures—especially with captures that relate to drag-and-drop with the mouse.  </p>\n<p> To clear mouse capture from all elements, call <a class=\"xref\" href=\"system.windows.input.mouse#System_Windows_Input_Mouse_Capture_\" data-linktype=\"relative-path\">Capture</a> with the <code>element</code> parameter provided as <code>null</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example implements a pair of handlers for mouse and key input combination that capture (and uncapture) the mouse and enable a special mouse mode for viewing a 3D model.  </p>\n<pre><code class=\"lang-cs\" name=\"CubeAnimation#UIElementMouseCapture\">private void MouseDownHandler(object sender, MouseButtonEventArgs e)\n{\n    if (!Enabled) return;\n    e.Handled = true;\n\n\n    if (Keyboard.IsKeyDown(Key.F1) == true)\n    {\n        Reset();\n        return;\n    }\n\n    UIElement el = (UIElement)sender;\n    _point = e.MouseDevice.GetPosition(el);\n    // Initialize the center of rotation to the lookatpoint\n    if (!_centered)\n    {\n        ProjectionCamera camera = (ProjectionCamera)_slaves[0].Camera;\n        _center = camera.LookDirection;\n        _centered = true;\n    }\n\n    _scaling = (e.MiddleButton == MouseButtonState.Pressed);\n\n    if (Keyboard.IsKeyDown(Key.Space) == false)\n        _rotating = true;\n    else\n        _rotating = false;\n\n    el.CaptureMouse();\n}\n\nprivate void MouseUpHandler(object sender, MouseButtonEventArgs e)\n{\n    if (!_enabled) return;\n    e.Handled = true;\n\n    // Stuff the current initial + delta into initial so when we next move we\n    // start at the right place.\n    if (_rotating == true)\n        _rotation = _rotationDelta * _rotation;\n    else\n    {\n        _translate += _translateDelta;\n        _translateDelta.X = 0;\n        _translateDelta.Y = 0;\n    }\n\n    //_scale = _scaleDelta*_scale;\n    UIElement el = (UIElement)sender;\n    el.ReleaseMouseCapture();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"CubeAnimation#UIElementMouseCapture\">Private Sub MouseDownHandler(ByVal sender As Object, ByVal e As MouseButtonEventArgs)\n\tIf Not Enabled Then\n\t\tReturn\n\tEnd If\n\te.Handled = True\n\n\n\tIf Keyboard.IsKeyDown(Key.F1) = True Then\n\t\tReset()\n\t\tReturn\n\tEnd If\n\n\tDim el As UIElement = CType(sender, UIElement)\n\t_point = e.MouseDevice.GetPosition(el)\n\t&#39; Initialize the center of rotation to the lookatpoint\n\tIf Not _centered Then\n\t\tDim camera As ProjectionCamera = CType(_slaves(0).Camera, ProjectionCamera)\n\t\t_center = camera.LookDirection\n\t\t_centered = True\n\tEnd If\n\n\t_scaling = (e.MiddleButton = MouseButtonState.Pressed)\n\n\tIf Keyboard.IsKeyDown(Key.Space) = False Then\n\t\t_rotating = True\n\tElse\n\t\t_rotating = False\n\tEnd If\n\n\tel.CaptureMouse()\nEnd Sub\n\nPrivate Sub MouseUpHandler(ByVal sender As Object, ByVal e As MouseButtonEventArgs)\n\tIf Not _enabled Then\n\t\tReturn\n\tEnd If\n\te.Handled = True\n\n\t&#39; Stuff the current initial + delta into initial so when we next move we\n\t&#39; start at the right place.\n\tIf _rotating = True Then\n\t\t_rotation = _rotationDelta * _rotation\n\tElse\n\t\t_translate += _translateDelta\n\t\t_translateDelta.X = 0\n\t\t_translateDelta.Y = 0\n\tEnd If\n\n\t&#39;_scale = _scaleDelta * _scale\n\tDim el As UIElement = CType(sender, UIElement)\n\tel.ReleaseMouseCapture()\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_CaptureStylus\">\r\n    \r\n            <a id=\"System_Windows_UIElement_CaptureStylus_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CaptureStylus()</div>        \r\n          </div>\r\n    \r\n            <p>Attempts to force capture of the stylus to this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool CaptureStylus ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the stylus was successfully captured; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default implementation based on the underlying default stylus device always returns <code>true</code>. However, if you are extending the input devices that provide the device implementation for the input system, it is possible to create a system with an alternative stylus device implementation that might return different results.  </p>\n<p> When an element captures the stylus, it receives stylus input even if the stylus is outside its bounds. The stylus is typically captured only during drag-and-drop operations.  </p>\n<p> Calling this method calls an underlying static <a class=\"xref\" href=\"system.windows.input.stylus\" data-linktype=\"relative-path\">Stylus</a> method <a class=\"xref\" href=\"system.windows.input.stylus#System_Windows_Input_Stylus_Capture_\" data-linktype=\"relative-path\">Capture</a>. The actual capture behavior is implemented by the active stylus device implementation.  </p>\n<p> To be captured, an element must be enabled. Check whether <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsEnabled_\" data-linktype=\"relative-path\">IsEnabled</a> is <code>true</code> return before you call CaptureStylus.  </p>\n<p> If calling CaptureStylus returns <code>true</code>, <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsStylusCaptured_\" data-linktype=\"relative-path\">IsStylusCaptured</a> is also <code>true</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_CaptureTouch_System_Windows_Input_TouchDevice_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_CaptureTouch_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CaptureTouch(TouchDevice)</div>        \r\n          </div>\r\n    \r\n            <p>Attempts to force capture of a touch to this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool CaptureTouch (System.Windows.Input.TouchDevice touchDevice);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>touchDevice</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.touchdevice\" data-linktype=\"relative-path\">TouchDevice</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The device to capture.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the specified touch is captured to this element; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>touchDevice</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>CaptureTouch will return <code>false</code> if the <a class=\"xref\" href=\"system.windows.input.touchdevice\" data-linktype=\"relative-path\">TouchDevice</a> is currently captured to another element.  </p>\n<p> If CaptureTouch returns <code>true</code>, then the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_GotTouchCapture\" data-linktype=\"relative-path\">GotTouchCapture</a> event is raised.  </p>\n<p> To release capture of a single touch from this element, use the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ReleaseTouchCapture_\" data-linktype=\"relative-path\">ReleaseTouchCapture</a> method and specify the touch device to release. To release all touches from this element, use the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ReleaseAllTouchCaptures_\" data-linktype=\"relative-path\">ReleaseAllTouchCaptures</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_Focus\">\r\n    \r\n            <a id=\"System_Windows_UIElement_Focus_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Focus()</div>        \r\n          </div>\r\n    \r\n            <p>Attempts to set focus to this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Focus ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if keyboard focus and logical focus were set to this element; <code>false</code> if only logical focus was set to this element, or if the call to this method did not force the focus to change.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To be focusable, <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_Focusable_\" data-linktype=\"relative-path\">Focusable</a> and <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsEnabled_\" data-linktype=\"relative-path\">IsEnabled</a> must both be <code>true</code>.  </p>\n<p> Even if an element is focusable and enabled, event handling within a specific tree, (such as for a composite control) might respond to the preview focus events by not allowing focus there, thus this method would return <code>false</code>.  </p>\n<p> Focus in general is governed by two separate concepts: keyboard focus and logical focus, which are not always identical.  For more information, see <a href=\"../Topic/Focus%20Overview.md\" data-linktype=\"relative-path\">Focus Overview</a> or <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p> If calling Focus returns <code>true</code>, <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsKeyboardFocused_\" data-linktype=\"relative-path\">IsKeyboardFocused</a> and <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsKeyboardFocusWithin_\" data-linktype=\"relative-path\">IsKeyboardFocusWithin</a> are also <code>true</code>.  </p>\n<p> If the related properties are not already <code>true</code>, when you call  Focus, one or more of the following events are raised in the following order: <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewLostKeyboardFocus\" data-linktype=\"relative-path\">PreviewLostKeyboardFocus</a>, <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewGotKeyboardFocus\" data-linktype=\"relative-path\">PreviewGotKeyboardFocus</a> (source is the new focus target), <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsKeyboardFocusedChanged\" data-linktype=\"relative-path\">IsKeyboardFocusedChanged</a>, <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsKeyboardFocusWithinChanged\" data-linktype=\"relative-path\">IsKeyboardFocusWithinChanged</a>, <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_LostKeyboardFocus\" data-linktype=\"relative-path\">LostKeyboardFocus</a>, <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_GotKeyboardFocus\" data-linktype=\"relative-path\">GotKeyboardFocus</a> (source is the new focus target).  </p>\n<p> In order for this call to be successful, some other element in the application needed to have focus previously.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example sets focus to a <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a> referenced by <a class=\"xref\" href=\"system.windows.frameworkelement#System_Windows_FrameworkElement_Name_\" data-linktype=\"relative-path\">Name</a>, and then adjusts the position of the cursor within the <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"TextBox_CursorToEnd#UIElementFocus\">void OnClickMoveToStart(object sender, RoutedEventArgs e)\n{\n    tbPositionCursor.Focus();\n    tbPositionCursor.Select(0, 0);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"TextBox_CursorToEnd#UIElementFocus\">Private Sub OnClickMoveToStart(ByVal sender As Object, ByVal e As RoutedEventArgs)\n\n    tbPositionCursor.Focus()\n    tbPositionCursor.Select(0, 0)\n\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_GetAnimationBaseValue_System_Windows_DependencyProperty_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_GetAnimationBaseValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAnimationBaseValue(DependencyProperty)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the base property value for the specified property on this element, disregarding any possible animated value from a running or stopped animation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object GetAnimationBaseValue (System.Windows.DependencyProperty dp);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dp</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The dependency property to check.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>The property value as if no animations are attached to the specified dependency property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If no animations are attached to the property, then the GetAnimationBaseValue return value is always identical to the <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_GetValue_\" data-linktype=\"relative-path\">GetValue</a> return value. If there are animations attached, then all possible animation derived values including the start and stop values are ignored, and the property value is determined based on all other possible inputs. For more information, see <a href=\"../Topic/Dependency%20Property%20Value%20Precedence.md\" data-linktype=\"relative-path\">Dependency Property Value Precedence</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example implements a handler that reports the base value of an animated <a class=\"xref\" href=\"system.windows.frameworkelement#System_Windows_FrameworkElement_Width_\" data-linktype=\"relative-path\">Width</a> property on a <a class=\"xref\" href=\"system.windows.controls.button\" data-linktype=\"relative-path\">Button</a>, as well as the base value of a transform.  </p>\n<pre><code class=\"lang-cs\" name=\"timingbehaviors_procedural_snip#GetAnimationBaseValue\">// Display the base value for Button.Width and RotateTransform.Angle.\nprivate void animatedButton_Clicked(object sender, RoutedEventArgs e)\n{\n    Button animatedButton = (Button)sender;\n    MessageBox.Show(&quot;Button width base value: &quot; + \n        animatedButton.GetAnimationBaseValue(Button.WidthProperty)\n        + &quot;<br>RotateTransform base value: &quot; +\n        animatedRotateTransform.GetAnimationBaseValue(RotateTransform.AngleProperty));\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"timingbehaviors_procedural_snip#GetAnimationBaseValue\">&#39; Display the base value for Button.Width and RotateTransform.Angle.\nPrivate Sub animatedButton_Clicked(ByVal sender As Object, ByVal e As RoutedEventArgs)\n\tDim animatedButton As Button = CType(sender, Button)\n          MessageBox.Show(&quot;Button width base value: &quot; &amp; animatedButton.GetAnimationBaseValue(Button.WidthProperty).ToString &amp; vbLf &amp; &quot;RotateTransform base value: &quot; &amp; animatedRotateTransform.GetAnimationBaseValue(RotateTransform.AngleProperty).ToString)\n      End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_GetLayoutClip_System_Windows_Size_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_GetLayoutClip_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetLayoutClip(Size)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an alternative clipping geometry that represents the region that would be clipped if <span class=\"xref\">stem.Windows.UIElement.ClipToBounds*</span> were set to <code>true</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual System.Windows.Media.Geometry GetLayoutClip (System.Windows.Size layoutSlotSize);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>layoutSlotSize</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.size\" data-linktype=\"relative-path\">Size</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The available size provided by the element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.geometry\" data-linktype=\"relative-path\">Geometry</a></div>\r\n                  </div>\r\n                  <p>The potential clipping geometry.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default implementation will return a legitimate value, but does not use the <code>layoutSlotSize</code> parameter in its calculations. Instead it uses the value of <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_RenderSize_\" data-linktype=\"relative-path\">RenderSize</a>.  </p>\n<p> This method is substantially overridden by the immediately derived <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a> class, and the <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a> override produces a more sophisticated behavior for general WPF framework-level elements. For details, see <a class=\"xref\" href=\"system.windows.frameworkelement#System_Windows_FrameworkElement_GetLayoutClip_\" data-linktype=\"relative-path\">GetLayoutClip</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_GetUIParentCore\">\r\n    \r\n            <a id=\"System_Windows_UIElement_GetUIParentCore_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetUIParentCore()</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, returns an alternative user interface (UI) parent for this element if no visual parent exists.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual System.Windows.DependencyObject GetUIParentCore ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyobject\" data-linktype=\"relative-path\">DependencyObject</a></div>\r\n                  </div>\r\n                  <p>An object, if implementation of a derived class has an alternate parent connection to report.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default virtual implementation of this method returns <code>null</code>. <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a> provides a practical implementation.  </p>\n<p> Alternative parents are used for event routing, in cases where an element creates an alternative parent structure so that its events are routed in a way that diverges from the standard pattern of routing up the visual tree to the standard parent, or downward in the preview routing strategy.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_HitTestCore_System_Windows_Media_GeometryHitTestParameters_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_HitTestCore_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HitTestCore(GeometryHitTestParameters)</div>        \r\n          </div>\r\n    \r\n            <p>Implements <span class=\"xref\">stem.Windows.Media.Visual.HitTestCore*</span> to supply base element hit testing behavior (returning <a class=\"xref\" href=\"system.windows.media.geometryhittestresult\" data-linktype=\"relative-path\">GeometryHitTestResult</a>).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override System.Windows.Media.GeometryHitTestResult HitTestCore (System.Windows.Media.GeometryHitTestParameters hitTestParameters);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>hitTestParameters</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.geometryhittestparameters\" data-linktype=\"relative-path\">GeometryHitTestParameters</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Describes the hit test to perform, including the initial hit point.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.geometryhittestresult\" data-linktype=\"relative-path\">GeometryHitTestResult</a></div>\r\n                  </div>\r\n                  <p>Results of the test, including the evaluated geometry.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>See the original virtual method <a class=\"xref\" href=\"system.windows.media.visual#System_Windows_Media_Visual_HitTestCore_\" data-linktype=\"relative-path\">HitTestCore</a> for information on overriding this method in further derived classes. Note that several specific controls (<a class=\"xref\" href=\"system.windows.controls.textblock\" data-linktype=\"relative-path\">TextBlock</a>, for example) do have distinct implementations, which override this one.  </p>\n<p> This method is not intended to be called from your application code. This method supports internal hit testing behaviors that are exposed by various aspects of the input system (whether the mouse pointer is over an element, for example).</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_HitTestCore_System_Windows_Media_PointHitTestParameters_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_HitTestCore_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HitTestCore(PointHitTestParameters)</div>        \r\n          </div>\r\n    \r\n            <p>Implements <span class=\"xref\">stem.Windows.Media.Visual.HitTestCore*</span> to supply base element hit testing behavior (returning <a class=\"xref\" href=\"system.windows.media.hittestresult\" data-linktype=\"relative-path\">HitTestResult</a>).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override System.Windows.Media.HitTestResult HitTestCore (System.Windows.Media.PointHitTestParameters hitTestParameters);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>hitTestParameters</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.pointhittestparameters\" data-linktype=\"relative-path\">PointHitTestParameters</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Describes the hit test to perform, including the initial hit point.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.hittestresult\" data-linktype=\"relative-path\">HitTestResult</a></div>\r\n                  </div>\r\n                  <p>Results of the test, including the evaluated point.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>See the original virtual method <a class=\"xref\" href=\"system.windows.media.visual#System_Windows_Media_Visual_HitTestCore_\" data-linktype=\"relative-path\">HitTestCore</a> for information on overriding this method in further derived classes. Note that several specific controls (<a class=\"xref\" href=\"system.windows.controls.textblock\" data-linktype=\"relative-path\">TextBlock</a>, for example) do have distinct implementations, which override HitTestCore as defined by <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a>.  </p>\n<p> This method is not intended to be called from your application code. This method supports internal hit testing behaviors that are exposed by various aspects of the input system (whether the mouse pointer is over an element, for example).</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_InputHitTest_System_Windows_Point_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_InputHitTest_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InputHitTest(Point)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the input element within the current element that is at the specified coordinates, relative to the current element&#39;s origin.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.IInputElement InputHitTest (System.Windows.Point point);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>point</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.point\" data-linktype=\"relative-path\">Point</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The offset coordinates within this element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a></div>\r\n                  </div>\r\n                  <p>The element child that is located at the given position.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> is returned as the return type, because that type is a common interface for both <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> and <a class=\"xref\" href=\"system.windows.contentelement\" data-linktype=\"relative-path\">ContentElement</a>. You can then cast the return type appropriately, or use the interface instance for certain members that are defined by the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface.  </p>\n<p> This method typically is not called from your application code. Calling this method is only appropriate if you intend to re-implement a substantial amount of the low level input features that are already present, such as recreating mouse device logic.  </p>\n<p> <a class=\"xref\" href=\"system.windows.icontenthost\" data-linktype=\"relative-path\">IContentHost</a> contracts an <a class=\"xref\" href=\"system.windows.icontenthost#System_Windows_IContentHost_InputHitTest_\" data-linktype=\"relative-path\">InputHitTest</a> method with the same signature, which some elements choose to implement explicitly.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_InvalidateArrange\">\r\n    \r\n            <a id=\"System_Windows_UIElement_InvalidateArrange_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InvalidateArrange()</div>        \r\n          </div>\r\n    \r\n            <p>Invalidates the arrange state (layout) for the element. After the invalidation, the element will have its layout updated, which will occur asynchronously unless subsequently forced by <span class=\"xref\">stem.Windows.UIElement.UpdateLayout*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void InvalidateArrange ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Frequent calls to InvalidateArrange or in particular to <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_UpdateLayout_\" data-linktype=\"relative-path\">UpdateLayout</a> have significant performance consequences. Therefore, avoid calling this method unless you absolutely require precise layout state for subsequent calls to other APIs in your code. An advanced scenario where you might call InvalidateArrange is if you are creating a <a class=\"xref\" href=\"system.windows.propertychangedcallback\" data-linktype=\"relative-path\">PropertyChangedCallback</a> for a dependency property that is not on a <a class=\"xref\" href=\"system.windows.freezable\" data-linktype=\"relative-path\">Freezable</a> or <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a> derived class that still influences the arrange pass of layout when it changes.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_InvalidateMeasure\">\r\n    \r\n            <a id=\"System_Windows_UIElement_InvalidateMeasure_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InvalidateMeasure()</div>        \r\n          </div>\r\n    \r\n            <p>Invalidates the measurement state (layout) for the element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void InvalidateMeasure ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Calling this method also calls <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_InvalidateArrange_\" data-linktype=\"relative-path\">InvalidateArrange</a> internally, there is no need to call InvalidateMeasure and <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_InvalidateArrange_\" data-linktype=\"relative-path\">InvalidateArrange</a> in succession. After the invalidation, the element will have its layout updated, which will occur asynchronously, unless <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_UpdateLayout_\" data-linktype=\"relative-path\">UpdateLayout</a> is called to force a synchronous layout change.  </p>\n<p> The WPF framework-level layout system does its own handling of changes in the visual tree of an element, and in most common layout invalidation cases the layout system is calling the equivalent of this method when necessary. You should only call this method if you are producing a complete layout implementation, which does direct manipulation of the element tree, or similar advanced scenarios. One such advanced scenario is if you are creating a <a class=\"xref\" href=\"system.windows.propertychangedcallback\" data-linktype=\"relative-path\">PropertyChangedCallback</a> for a dependency property that is not on a <a class=\"xref\" href=\"system.windows.freezable\" data-linktype=\"relative-path\">Freezable</a> or <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a> derived class that still influences the measure pass of layout when it changes.  </p>\n<p> Frequent calls to InvalidateMeasure or in particular to <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_UpdateLayout_\" data-linktype=\"relative-path\">UpdateLayout</a> have significant performance consequences. Therefore, avoid calling this method unless you absolutely require precise layout state for subsequent calls to other APIs in your code.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_InvalidateVisual\">\r\n    \r\n            <a id=\"System_Windows_UIElement_InvalidateVisual_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InvalidateVisual()</div>        \r\n          </div>\r\n    \r\n            <p>Invalidates the rendering of the element, and forces a complete new layout pass. <span class=\"xref\">stem.Windows.UIElement.OnRender*</span> is called after the layout cycle is completed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void InvalidateVisual ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method calls <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_InvalidateArrange_\" data-linktype=\"relative-path\">InvalidateArrange</a> internally.  </p>\n<p> This method is not generally called from your application code. The WPF framework-level layout system does its own handling of changes in the visual tree of an element, and would be calling the equivalent of this method when necessary already. Calling this method is necessary only for advanced scenarios. One such advanced scenario is if you are creating a <a class=\"xref\" href=\"system.windows.propertychangedcallback\" data-linktype=\"relative-path\">PropertyChangedCallback</a> for a dependency property that is not on a <a class=\"xref\" href=\"system.windows.freezable\" data-linktype=\"relative-path\">Freezable</a> or <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a> derived class that still influences the layout when it changes.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_Measure_System_Windows_Size_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_Measure_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Measure(Size)</div>        \r\n          </div>\r\n    \r\n            <p>Updates the <span class=\"xref\">stem.Windows.UIElement.DesiredSize*</span> of a <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a>. Parent elements call this method from their own <span class=\"xref\">stem.Windows.UIElement.MeasureCore*</span> implementations to form a recursive layout update. Calling this method constitutes the first pass (the &quot;Measure&quot; pass) of a layout update.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Measure (System.Windows.Size availableSize);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>availableSize</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.size\" data-linktype=\"relative-path\">Size</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The available space that a parent element can allocate a child element. A child element can request a larger space than what is available; the provided size might be accommodated if scrolling is possible in the content model for the current element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Computation of layout positioning in Windows Presentation Foundation (WPF) is comprised of a Measure call and an <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_Arrange_\" data-linktype=\"relative-path\">Arrange</a> call. During the Measure call, an element determines its size requirements by using an <code>availableSize</code> input. During the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_Arrange_\" data-linktype=\"relative-path\">Arrange</a> call, the element size is finalized.  </p>\n<p> <code>availableSize</code> can be any number from zero to infinite. Elements participating in layout should return the minimum <a class=\"xref\" href=\"system.windows.size\" data-linktype=\"relative-path\">Size</a> they require for a given <code>availableSize</code>.  </p>\n<p> When a layout is first instantiated, it always receives a Measure call before <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_Arrange_\" data-linktype=\"relative-path\">Arrange</a>. However, after the first layout pass, it may receive an <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_Arrange_\" data-linktype=\"relative-path\">Arrange</a> call without a Measure; this can happen when a property that affects only <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_Arrange_\" data-linktype=\"relative-path\">Arrange</a> is changed (such as alignment), or when the parent receives an <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_Arrange_\" data-linktype=\"relative-path\">Arrange</a> without a Measure. A Measure call will automatically invalidate an <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_Arrange_\" data-linktype=\"relative-path\">Arrange</a> call.  </p>\n<p> Layout updates happen asynchronously, such that the main thread is not waiting for every possible layout change. Querying an element via code-behind checking of property values may not immediately reflect changes to properties that interact with the sizing or layout characteristics (the <a class=\"xref\" href=\"system.windows.frameworkelement#System_Windows_FrameworkElement_Width_\" data-linktype=\"relative-path\">Width</a> property, for example).  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Layout updates can be forced by using the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_UpdateLayout_\" data-linktype=\"relative-path\">UpdateLayout</a> method. However, calling this method is usually unnecessary and can cause poor performance.  </p>\n</div>\n<p> The layout system keeps two separate queues of invalid layouts, one for Measure and one for <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_Arrange_\" data-linktype=\"relative-path\">Arrange</a>. The layout queue is sorted based upon the order of elements in the visual tree of the element performing layout; elements higher in the tree are at the top of the queue, to avoid redundant layouts caused by repeated changes in parents. Duplicate entries are automatically removed from the queue, and elements are automatically removed from the queue if they are already layout-validated.  </p>\n<p> When updating layout, the Measure queue is emptied first, followed by the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_Arrange_\" data-linktype=\"relative-path\">Arrange</a> queue. An element in the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_Arrange_\" data-linktype=\"relative-path\">Arrange</a> queue will never be arranged if there is an element in the Measure queue.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_MeasureCore_System_Windows_Size_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_MeasureCore_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MeasureCore(Size)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, provides measurement logic for sizing this element properly, with consideration of the size of any child element content.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual System.Windows.Size MeasureCore (System.Windows.Size availableSize);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>availableSize</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.size\" data-linktype=\"relative-path\">Size</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The available size that the parent element can allocate for the child.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.size\" data-linktype=\"relative-path\">Size</a></div>\r\n                  </div>\r\n                  <p>The desired size of this element in layout.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>It is more common to derive an element from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a> rather than <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a>. If you are deriving from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>, note that an override of MeasureCore on <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a> seals the MeasureCore method. Therefore, you only override MeasureCore as a means to alter layout measure characteristics if you derive from <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> through an inheritance that does not include <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>. This might be the case if you are attempting to build your own implementation on the WPF core-level. Otherwise, if you are deriving from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>, then the implementation template for Measure behavior is the <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a> implementation of .<a class=\"xref\" href=\"system.windows.frameworkelement#System_Windows_FrameworkElement_MeasureOverride_\" data-linktype=\"relative-path\">MeasureOverride</a>.  </p>\n<p> A parent element with child elements must call <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_Measure_\" data-linktype=\"relative-path\">Measure</a> on each child, otherwise these child elements are not sized or arranged and will effectively disappear from layout.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>A typical override of MeasureCore follows this approximate pattern (there is not a built-in collection called <code>VisualChildren</code>; <code>VisualChildren</code> is a  placeholder that represents whatever child collection your element maintains).  </p>\n<pre><code class=\"lang-cs\" name=\"CorePseudocode#UIElementMeasureOverride\">protected override Size MeasureCore(Size availableSize)\n{\n    foreach (UIElement child in VisualChildren)\n    {\n        child.Measure(availableSize);\n        // call some method on child that adjusts child size if needed\n        _cache.StoreInfoAboutChild(child);\n    }\n    Size desired = CalculateBasedOnCache(_cache);\n    return desired;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"CorePseudocode#UIElementMeasureOverride\">Protected Overrides Function MeasureCore(ByVal availableSize As Size) As Size\n\tFor Each child As UIElement In VisualChildren\n\t\tchild.Measure(availableSize)\n\t\t&#39; call some method on child that adjusts child size if needed\n\t\t_cache.StoreInfoAboutChild(child)\n\tNext child\n\tDim desired As Size = CalculateBasedOnCache(_cache)\n\tReturn desired\nEnd Function\n</code></pre><ul>\n<li><p>You must call <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_Measure_\" data-linktype=\"relative-path\">Measure</a> on each child element.  </p>\n</li>\n<li><p>Generally, your implementation should cache measurement information between the MeasureCore and <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ArrangeCore_\" data-linktype=\"relative-path\">ArrangeCore</a> method calls in the same element.  </p>\n</li>\n<li><p>Calling base implementations of MeasureCore is not required, but might be appropriate if the base implementation provides a desired layout capability.  </p>\n</li>\n<li><p>Calls to <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_Measure_\" data-linktype=\"relative-path\">Measure</a> on child elements should pass either the same <code>availableSize</code> as the parent, or a subset of the area, depending on the type of layout the parent element supports. For example, it would be valid to remove the area for an element-specific border or padding, a scrollbar, or a custom control.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_MoveFocus_System_Windows_Input_TraversalRequest_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_MoveFocus_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MoveFocus(TraversalRequest)</div>        \r\n          </div>\r\n    \r\n            <p>Attempts to move focus from this element to another element. The direction to move focus is specified by a guidance direction, which is interpreted within the organization of the visual parent for this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool MoveFocus (System.Windows.Input.TraversalRequest request);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>request</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.traversalrequest\" data-linktype=\"relative-path\">TraversalRequest</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A traversal request, which contains a property that indicates either a mode to traverse in existing tab order, or a direction to move visually.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the requested traversal was performed; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Make sure you check the return value of this method. A return value of <code>false</code> might be returned if the traversal runs into a tab stop that is defined by a control&#39;s composition, and the traversal request did not request to wrap.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnAccessKey_System_Windows_Input_AccessKeyEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnAccessKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnAccessKey(AccessKeyEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Provides class handling for when an access key that is meaningful for this element is invoked.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnAccessKey (System.Windows.Input.AccessKeyEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.accesskeyeventargs\" data-linktype=\"relative-path\">AccessKeyEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The event data to the access key event. The event data reports which key was invoked, and indicate whether the <a class=\"xref\" href=\"system.windows.input.accesskeymanager\" data-linktype=\"relative-path\">AccessKeyManager</a> object that controls the sending of these events also sent this access key invocation to other elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>There is no actual AccessKey event in the <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> class, or elsewhere, which you can raise or attach handlers for. Instead, the event is originated via a dedicated manager class, <a class=\"xref\" href=\"system.windows.input.accesskeymanager\" data-linktype=\"relative-path\">AccessKeyManager</a>, which post-processes all input to search for access keys that are applicable to the entire input model.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnChildDesiredSizeChanged_System_Windows_UIElement_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnChildDesiredSizeChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnChildDesiredSizeChanged(UIElement)</div>        \r\n          </div>\r\n    \r\n            <p>Supports layout behavior when a child element is resized.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnChildDesiredSizeChanged (System.Windows.UIElement child);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>child</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The child element that is being resized.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is typically not called by your application code. It is exposed so that derived element classes can make further checks on their own possibly invalid layout state. Classes could also attempt optimizations to minimize the processing time for a layout pass based on size changes to child elements. An example derived element class that implements OnChildDesiredSizeChanged is the <a class=\"xref\" href=\"system.windows.controls.grid\" data-linktype=\"relative-path\">Grid</a> control.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnCreateAutomationPeer\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnCreateAutomationPeer_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnCreateAutomationPeer()</div>        \r\n          </div>\r\n    \r\n            <p>Returns class-specific <a class=\"xref\" href=\"system.windows.automation.peers.automationpeer\" data-linktype=\"relative-path\">AutomationPeer</a> implementations for the Windows Presentation Foundation (WPF) infrastructure.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.automation.peers.automationpeer\" data-linktype=\"relative-path\">AutomationPeer</a></div>\r\n                  </div>\r\n                  <p>The type-specific <a class=\"xref\" href=\"system.windows.automation.peers.automationpeer\" data-linktype=\"relative-path\">AutomationPeer</a> implementation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnDragEnter_System_Windows_DragEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnDragEnter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnDragEnter(DragEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.DragDrop.DragEnter</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnDragEnter (System.Windows.DragEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnDragLeave_System_Windows_DragEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnDragLeave_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnDragLeave(DragEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.DragDrop.DragLeave</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnDragLeave (System.Windows.DragEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnDragOver_System_Windows_DragEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnDragOver_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnDragOver(DragEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.DragDrop.DragOver</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnDragOver (System.Windows.DragEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnDrop_System_Windows_DragEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnDrop_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnDrop(DragEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.DragDrop.DragEnter</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnDrop (System.Windows.DragEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnGiveFeedback_System_Windows_GiveFeedbackEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnGiveFeedback_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnGiveFeedback(GiveFeedbackEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.DragDrop.GiveFeedback</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnGiveFeedback (System.Windows.GiveFeedbackEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.givefeedbackeventargs\" data-linktype=\"relative-path\">GiveFeedbackEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.givefeedbackeventargs\" data-linktype=\"relative-path\">GiveFeedbackEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnGotFocus_System_Windows_RoutedEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnGotFocus_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnGotFocus(RoutedEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_GotFocus\" data-linktype=\"relative-path\">GotFocus</a> routed event by using the event data provided.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnGotFocus (System.Windows.RoutedEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.routedeventargs\" data-linktype=\"relative-path\">RoutedEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.routedeventargs\" data-linktype=\"relative-path\">RoutedEventArgs</a> that contains event data. This event data must contain the identifier for the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_GotFocus\" data-linktype=\"relative-path\">GotFocus</a> event.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method, although virtual, does have a default implementation that raises the event.  </p>\n<p> This On* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsFocused_\" data-linktype=\"relative-path\">IsFocused</a> property value changes. The OnGotFocus implementation differs from some other Windows Presentation Foundation (WPF) On* implementations, which only provide a convenient way to add class handling for that event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnGotKeyboardFocus_System_Windows_Input_KeyboardFocusChangedEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnGotKeyboardFocus_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Keyboard.GotKeyboardFocus</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.keyboardfocuschangedeventargs\" data-linktype=\"relative-path\">KeyboardFocusChangedEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.keyboardfocuschangedeventargs\" data-linktype=\"relative-path\">KeyboardFocusChangedEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnGotMouseCapture_System_Windows_Input_MouseEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnGotMouseCapture_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnGotMouseCapture(MouseEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Mouse.GotMouseCapture</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnGotMouseCapture (System.Windows.Input.MouseEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.mouseeventargs\" data-linktype=\"relative-path\">MouseEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.mouseeventargs\" data-linktype=\"relative-path\">MouseEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnGotStylusCapture_System_Windows_Input_StylusEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnGotStylusCapture_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnGotStylusCapture(StylusEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.GotStylusCapture</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnGotStylusCapture (System.Windows.Input.StylusEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnGotTouchCapture_System_Windows_Input_TouchEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnGotTouchCapture_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnGotTouchCapture(TouchEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Provides class handling for the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_GotTouchCapture\" data-linktype=\"relative-path\">GotTouchCapture</a> routed event that occurs when a touch is captured to this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnGotTouchCapture (System.Windows.Input.TouchEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The OnGotTouchCapture method has no default implementation. Override OnGotTouchCapture in a derived class to handle the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_GotTouchCapture\" data-linktype=\"relative-path\">GotTouchCapture</a> event. Be sure to call the base class’s OnGotTouchCapture method so that base classes receive the event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnIsKeyboardFocusedChanged_System_Windows_DependencyPropertyChangedEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnIsKeyboardFocusedChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsKeyboardFocusedChanged\" data-linktype=\"relative-path\">IsKeyboardFocusedChanged</a> event is raised on this element. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnIsKeyboardFocusedChanged (System.Windows.DependencyPropertyChangedEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencypropertychangedeventargs\" data-linktype=\"relative-path\">DependencyPropertyChangedEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.dependencypropertychangedeventargs\" data-linktype=\"relative-path\">DependencyPropertyChangedEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This virtual method is raised when the value of the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsKeyboardFocused_\" data-linktype=\"relative-path\">IsKeyboardFocused</a> dependency property changes. The virtual method is raised first and can manipulate the event data as necessary. Then the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsKeyboardFocusedChanged\" data-linktype=\"relative-path\">IsKeyboardFocusedChanged</a> event is raised with that same event data instance. Notice that the  <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsKeyboardFocusedChanged\" data-linktype=\"relative-path\">IsKeyboardFocusedChanged</a> event is not a routed event. Therefore, you cannot mark it as handled in the class handler.  </p>\n<p> This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnIsKeyboardFocusWithinChanged_System_Windows_DependencyPropertyChangedEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnIsKeyboardFocusWithinChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked just before the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsKeyboardFocusWithinChanged\" data-linktype=\"relative-path\">IsKeyboardFocusWithinChanged</a> event is raised by this element. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnIsKeyboardFocusWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencypropertychangedeventargs\" data-linktype=\"relative-path\">DependencyPropertyChangedEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.dependencypropertychangedeventargs\" data-linktype=\"relative-path\">DependencyPropertyChangedEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This virtual method is raised when the value of the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsKeyboardFocusWithin_\" data-linktype=\"relative-path\">IsKeyboardFocusWithin</a> dependency property changes . The virtual method is raised first and can manipulate the event data as necessary. Then the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsKeyboardFocusWithinChanged\" data-linktype=\"relative-path\">IsKeyboardFocusWithinChanged</a> event is raised with that same event data instance. Notice that the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsKeyboardFocusWithinChanged\" data-linktype=\"relative-path\">IsKeyboardFocusWithinChanged</a> event is not a routed event. Therefore, you cannot mark it as handled in the class handler.  </p>\n<p> This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnIsMouseCapturedChanged_System_Windows_DependencyPropertyChangedEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnIsMouseCapturedChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsMouseCapturedChanged\" data-linktype=\"relative-path\">IsMouseCapturedChanged</a> event is raised on this element. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnIsMouseCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencypropertychangedeventargs\" data-linktype=\"relative-path\">DependencyPropertyChangedEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.dependencypropertychangedeventargs\" data-linktype=\"relative-path\">DependencyPropertyChangedEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This virtual method is raised when the value of the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsMouseCaptured_\" data-linktype=\"relative-path\">IsMouseCaptured</a> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsMouseCapturedChanged\" data-linktype=\"relative-path\">IsMouseCapturedChanged</a> event is raised with that same event data instance. Notice that the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsMouseCapturedChanged\" data-linktype=\"relative-path\">IsMouseCapturedChanged</a> event is not a routed event; Therefore, you cannot mark it as handled in the class handler.  </p>\n<p> This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnIsMouseCaptureWithinChanged_System_Windows_DependencyPropertyChangedEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnIsMouseCaptureWithinChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsMouseCaptureWithinChanged\" data-linktype=\"relative-path\">IsMouseCaptureWithinChanged</a> event is raised on this element. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnIsMouseCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencypropertychangedeventargs\" data-linktype=\"relative-path\">DependencyPropertyChangedEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.dependencypropertychangedeventargs\" data-linktype=\"relative-path\">DependencyPropertyChangedEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnIsMouseDirectlyOverChanged_System_Windows_DependencyPropertyChangedEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnIsMouseDirectlyOverChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsMouseDirectlyOverChanged\" data-linktype=\"relative-path\">IsMouseDirectlyOverChanged</a> event is raised on this element. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnIsMouseDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencypropertychangedeventargs\" data-linktype=\"relative-path\">DependencyPropertyChangedEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.dependencypropertychangedeventargs\" data-linktype=\"relative-path\">DependencyPropertyChangedEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This virtual method is raised when the value of the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsMouseDirectlyOver_\" data-linktype=\"relative-path\">IsMouseDirectlyOver</a> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsMouseDirectlyOverChanged\" data-linktype=\"relative-path\">IsMouseDirectlyOverChanged</a> event is raised with that same event data instance. Notice that the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsMouseDirectlyOverChanged\" data-linktype=\"relative-path\">IsMouseDirectlyOverChanged</a> event is not a routed event. Therefore, you cannot mark it as handled in the class handler.  </p>\n<p> This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnIsStylusCapturedChanged_System_Windows_DependencyPropertyChangedEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnIsStylusCapturedChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsStylusCapturedChanged\" data-linktype=\"relative-path\">IsStylusCapturedChanged</a> event is raised on this element. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnIsStylusCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencypropertychangedeventargs\" data-linktype=\"relative-path\">DependencyPropertyChangedEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.dependencypropertychangedeventargs\" data-linktype=\"relative-path\">DependencyPropertyChangedEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This virtual method is raised when the value of the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsStylusCaptured_\" data-linktype=\"relative-path\">IsStylusCaptured</a> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsStylusCapturedChanged\" data-linktype=\"relative-path\">IsStylusCapturedChanged</a> event is raised with that same event data instance. Notice that the event is not a routed event. Therefore, you cannot mark it as handled in the class handler.  </p>\n<p> This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnIsStylusCaptureWithinChanged_System_Windows_DependencyPropertyChangedEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnIsStylusCaptureWithinChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsStylusCaptureWithinChanged\" data-linktype=\"relative-path\">IsStylusCaptureWithinChanged</a> event is raised on this element. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnIsStylusCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencypropertychangedeventargs\" data-linktype=\"relative-path\">DependencyPropertyChangedEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.dependencypropertychangedeventargs\" data-linktype=\"relative-path\">DependencyPropertyChangedEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This virtual method is raised when the value of the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsStylusCaptureWithin_\" data-linktype=\"relative-path\">IsStylusCaptureWithin</a> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsStylusCaptureWithinChanged\" data-linktype=\"relative-path\">IsStylusCaptureWithinChanged</a> event is raised with that same event data instance. Notice that the event is not a routed event. Therefore, you cannot mark it as handled in the class handler.  </p>\n<p> This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnIsStylusDirectlyOverChanged_System_Windows_DependencyPropertyChangedEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnIsStylusDirectlyOverChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsStylusDirectlyOverChanged\" data-linktype=\"relative-path\">IsStylusDirectlyOverChanged</a> event is raised on this element. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnIsStylusDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencypropertychangedeventargs\" data-linktype=\"relative-path\">DependencyPropertyChangedEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.dependencypropertychangedeventargs\" data-linktype=\"relative-path\">DependencyPropertyChangedEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This virtual method is raised when the value of the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsStylusDirectlyOver_\" data-linktype=\"relative-path\">IsStylusDirectlyOver</a> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsStylusDirectlyOverChanged\" data-linktype=\"relative-path\">IsStylusDirectlyOverChanged</a> event is raised with that same event data instance. Notice that the event is not a routed event. Therefore you cannot mark it as handled in the class handler.  </p>\n<p> This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnKeyDown_System_Windows_Input_KeyEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnKeyDown_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnKeyDown(KeyEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Keyboard.KeyDown</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnKeyDown (System.Windows.Input.KeyEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.keyeventargs\" data-linktype=\"relative-path\">KeyEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.keyeventargs\" data-linktype=\"relative-path\">KeyEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Keystrokes are handled by a dedicated input manager. Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke. If these input system features mark the event as handled, then OnKeyDown is not invoked.  </p>\n<p> This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnKeyUp_System_Windows_Input_KeyEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnKeyUp_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnKeyUp(KeyEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Keyboard.KeyUp</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnKeyUp (System.Windows.Input.KeyEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.keyeventargs\" data-linktype=\"relative-path\">KeyEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.keyeventargs\" data-linktype=\"relative-path\">KeyEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Keystrokes are handled by a dedicated input manager. Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke. If these input system features mark the event as handled, then OnKeyUp is not invoked.  </p>\n<p> This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnLostFocus_System_Windows_RoutedEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnLostFocus_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnLostFocus(RoutedEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_LostFocus\" data-linktype=\"relative-path\">LostFocus</a> routed event by using the event data that is provided.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnLostFocus (System.Windows.RoutedEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.routedeventargs\" data-linktype=\"relative-path\">RoutedEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.routedeventargs\" data-linktype=\"relative-path\">RoutedEventArgs</a> that contains event data. This event data must contain the identifier for the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_LostFocus\" data-linktype=\"relative-path\">LostFocus</a> event.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method, although virtual, does have a default implementation that raises the event.  </p>\n<p> This On* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsFocused_\" data-linktype=\"relative-path\">IsFocused</a> property value changes. This implementation differs from some other Windows Presentation Foundation (WPF) On* implementations, which only provide a convenient way to add class handling for that event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnLostKeyboardFocus_System_Windows_Input_KeyboardFocusChangedEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnLostKeyboardFocus_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Keyboard.LostKeyboardFocus</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.keyboardfocuschangedeventargs\" data-linktype=\"relative-path\">KeyboardFocusChangedEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.keyboardfocuschangedeventargs\" data-linktype=\"relative-path\">KeyboardFocusChangedEventArgs</a> that contains event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnLostMouseCapture_System_Windows_Input_MouseEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnLostMouseCapture_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnLostMouseCapture(MouseEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Mouse.LostMouseCapture</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnLostMouseCapture (System.Windows.Input.MouseEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.mouseeventargs\" data-linktype=\"relative-path\">MouseEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.mouseeventargs\" data-linktype=\"relative-path\">MouseEventArgs</a> that contains event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnLostStylusCapture_System_Windows_Input_StylusEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnLostStylusCapture_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnLostStylusCapture(StylusEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.LostStylusCapture</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnLostStylusCapture (System.Windows.Input.StylusEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a> that contains event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnLostTouchCapture_System_Windows_Input_TouchEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnLostTouchCapture_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnLostTouchCapture(TouchEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Provides class handling for the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_LostTouchCapture\" data-linktype=\"relative-path\">LostTouchCapture</a> routed event that occurs when this element loses a touch capture.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnLostTouchCapture (System.Windows.Input.TouchEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The OnLostTouchCapture method has no default implementation. Override OnLostTouchCapture in a derived class to handle the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_LostTouchCapture\" data-linktype=\"relative-path\">LostTouchCapture</a> event. Be sure to call the base class’s OnLostTouchCapture method so that base classes receive the event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnManipulationBoundaryFeedback_System_Windows_Input_ManipulationBoundaryFeedbackEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnManipulationBoundaryFeedback_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Called when the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationBoundaryFeedback\" data-linktype=\"relative-path\">ManipulationBoundaryFeedback</a> event occurs.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnManipulationBoundaryFeedback (System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.manipulationboundaryfeedbackeventargs\" data-linktype=\"relative-path\">ManipulationBoundaryFeedbackEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The data for the event.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The OnManipulationBoundaryFeedback method has no default implementation. Override OnManipulationBoundaryFeedback in a derived class to handle the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationBoundaryFeedback\" data-linktype=\"relative-path\">ManipulationBoundaryFeedback</a> event. Be sure to call the OnManipulationBoundaryFeedback method of the base class so that base classes receive the event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnManipulationCompleted_System_Windows_Input_ManipulationCompletedEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnManipulationCompleted_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnManipulationCompleted(ManipulationCompletedEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Called when the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationCompleted\" data-linktype=\"relative-path\">ManipulationCompleted</a> event occurs.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnManipulationCompleted (System.Windows.Input.ManipulationCompletedEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.manipulationcompletedeventargs\" data-linktype=\"relative-path\">ManipulationCompletedEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The data for the event.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The OnManipulationCompleted method has no default implementation. Override OnManipulationCompleted in a derived class to handle the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationCompleted\" data-linktype=\"relative-path\">ManipulationCompleted</a> event. Be sure to call the OnManipulationCompleted method of the base class so that base classes receive the event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnManipulationDelta_System_Windows_Input_ManipulationDeltaEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnManipulationDelta_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnManipulationDelta(ManipulationDeltaEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Called when the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationDelta\" data-linktype=\"relative-path\">ManipulationDelta</a> event occurs.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnManipulationDelta (System.Windows.Input.ManipulationDeltaEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.manipulationdeltaeventargs\" data-linktype=\"relative-path\">ManipulationDeltaEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The data for the event.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The OnManipulationDelta method has no default implementation. Override OnManipulationDelta in a derived class to handle the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationDelta\" data-linktype=\"relative-path\">ManipulationDelta</a> event. Be sure to call the OnManipulationDelta method of the base class so that base classes receive the event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnManipulationInertiaStarting_System_Windows_Input_ManipulationInertiaStartingEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnManipulationInertiaStarting_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnManipulationInertiaStarting(ManipulationInertiaStartingEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Called when the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationInertiaStarting\" data-linktype=\"relative-path\">ManipulationInertiaStarting</a> event occurs.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnManipulationInertiaStarting (System.Windows.Input.ManipulationInertiaStartingEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.manipulationinertiastartingeventargs\" data-linktype=\"relative-path\">ManipulationInertiaStartingEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The data for the event.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The OnManipulationInertiaStarting method has no default implementation. Override OnManipulationInertiaStarting in a derived class to handle the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationInertiaStarting\" data-linktype=\"relative-path\">ManipulationInertiaStarting</a> event. Be sure to call the OnManipulationInertiaStarting method of the base class so that base classes receive the event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnManipulationStarted_System_Windows_Input_ManipulationStartedEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnManipulationStarted_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnManipulationStarted(ManipulationStartedEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Called when the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationStarted\" data-linktype=\"relative-path\">ManipulationStarted</a> event occurs.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnManipulationStarted (System.Windows.Input.ManipulationStartedEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.manipulationstartedeventargs\" data-linktype=\"relative-path\">ManipulationStartedEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The data for the event.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The OnManipulationStarted method has no default implementation. Override OnManipulationStarted in a derived class to handle the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationStarted\" data-linktype=\"relative-path\">ManipulationStarted</a> event. Be sure to call the OnManipulationStarted method of the base class so that base classes receive the event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnManipulationStarting_System_Windows_Input_ManipulationStartingEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnManipulationStarting_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnManipulationStarting(ManipulationStartingEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Provides class handling for the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationStarting\" data-linktype=\"relative-path\">ManipulationStarting</a> routed event that occurs when the manipulation processor is first created.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnManipulationStarting (System.Windows.Input.ManipulationStartingEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.manipulationstartingeventargs\" data-linktype=\"relative-path\">ManipulationStartingEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.input.manipulationstartingeventargs\" data-linktype=\"relative-path\">ManipulationStartingEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The OnManipulationStarting method has no default implementation. Override OnManipulationStarting in a derived class to handle the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationStarting\" data-linktype=\"relative-path\">ManipulationStarting</a> event. Be sure to call the base class’s OnManipulationStarting method so that base classes receive the event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnMouseDown_System_Windows_Input_MouseButtonEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnMouseDown_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnMouseDown(MouseButtonEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Mouse.MouseDown</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnMouseDown (System.Windows.Input.MouseButtonEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.mousebuttoneventargs\" data-linktype=\"relative-path\">MouseButtonEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.mousebuttoneventargs\" data-linktype=\"relative-path\">MouseButtonEventArgs</a> that contains the event data. This event data reports details about the mouse button that was pressed and the handled state.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; event as handled, OnMouseDown is not invoked.  </p>\n<p> If you use this class handler to mark the event as handled, you potentially impact the following events: <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseLeftButtonDown\" data-linktype=\"relative-path\">MouseLeftButtonDown</a> and <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseRightButtonDown\" data-linktype=\"relative-path\">MouseRightButtonDown</a>. Either of these events may be raised on the receiving element when &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; is received.  </p>\n<p> If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_AddHandler_System_Windows_RoutedEvent_System_Delegate_System_Boolean_\" data-linktype=\"relative-path\">AddHandler(RoutedEvent,Delegate,Boolean)</a> with <code>handledEventsToo</code> <code>true</code> in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_System_Type_System_Windows_RoutedEvent_System_Delegate_System_Boolean_\" data-linktype=\"relative-path\">RegisterClassHandler(Type,RoutedEvent,Delegate,Boolean)</a> signature with <code>handledEventsToo</code> <code>true</code>. By handling OnMouseDown, you are implying that your class handling accounted for all possible mouse button down actions. This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.  </p>\n<p> Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  </p>\n<p> This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnMouseEnter_System_Windows_Input_MouseEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnMouseEnter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnMouseEnter(MouseEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Mouse.MouseEnter</span> attached event is raised on this element. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnMouseEnter (System.Windows.Input.MouseEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.mouseeventargs\" data-linktype=\"relative-path\">MouseEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.mouseeventargs\" data-linktype=\"relative-path\">MouseEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event, with a direct routing strategy. Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify <code>handledEventsToo</code>) from being invoked.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnMouseLeave_System_Windows_Input_MouseEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnMouseLeave_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnMouseLeave(MouseEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Mouse.MouseLeave</span> attached event is raised on this element. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnMouseLeave (System.Windows.Input.MouseEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.mouseeventargs\" data-linktype=\"relative-path\">MouseEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.mouseeventargs\" data-linktype=\"relative-path\">MouseEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event, with a direct routing strategy. Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify <code>handledEventsToo</code>) from being invoked.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnMouseLeftButtonDown_System_Windows_Input_MouseButtonEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnMouseLeftButtonDown_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnMouseLeftButtonDown(MouseButtonEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseLeftButtonDown\" data-linktype=\"relative-path\">MouseLeftButtonDown</a> routed event is raised on this element. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.mousebuttoneventargs\" data-linktype=\"relative-path\">MouseButtonEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.mousebuttoneventargs\" data-linktype=\"relative-path\">MouseButtonEventArgs</a> that contains the event data. The event data reports that the left mouse button was pressed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseLeftButtonDown\" data-linktype=\"relative-path\">MouseLeftButtonDown</a> event appears to travel a bubbling route but actually travels in an indirect way. &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; is the underlying event that is bubble routed, and each <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> along the event route uses identical handling to raise the direct routed event <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseLeftButtonDown\" data-linktype=\"relative-path\">MouseLeftButtonDown</a>. Although you can mark the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseLeftButtonDown\" data-linktype=\"relative-path\">MouseLeftButtonDown</a> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <code>handledEventsToo</code>) from being invoked.  </p>\n<p> The default implementation for general mouse event handling in <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> listens for &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;. You cannot change the mouse handling behavior of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> by overriding OnMouseLeftButtonDown.  </p>\n<p> Alternatively, you can override this method in order to change event handling for a specific mouse state. Whether you choose to call the base implementation depends on your scenario. Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke OnMouseLeftButtonDown. For example, you can derive from <a class=\"xref\" href=\"system.windows.controls.button\" data-linktype=\"relative-path\">Button</a> and override OnMouseLeftButtonDown in your derived class without calling the base implementation; however, this override disables the <a class=\"xref\" href=\"system.windows.controls.primitives.buttonbase#System_Windows_Controls_Primitives_ButtonBase_Click\" data-linktype=\"relative-path\">Click</a> event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnMouseLeftButtonUp_System_Windows_Input_MouseButtonEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnMouseLeftButtonUp_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnMouseLeftButtonUp(MouseButtonEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseLeftButtonUp\" data-linktype=\"relative-path\">MouseLeftButtonUp</a> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.mousebuttoneventargs\" data-linktype=\"relative-path\">MouseButtonEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.mousebuttoneventargs\" data-linktype=\"relative-path\">MouseButtonEventArgs</a> that contains the event data. The event data reports that the left mouse button was released.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseLeftButtonUp\" data-linktype=\"relative-path\">MouseLeftButtonUp</a> event appears to travel a bubbling route but actually travels in an indirect way. &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; is the underlying event that is bubble routed, and each <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> along the event route uses identical handling to raise the direct routed event <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseLeftButtonUp\" data-linktype=\"relative-path\">MouseLeftButtonUp</a>. Although you can mark the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseLeftButtonUp\" data-linktype=\"relative-path\">MouseLeftButtonUp</a> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <code>handledEventsToo</code>) from being invoked.  </p>\n<p> The default implementation for general mouse event handling in <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> listens for &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;. You cannot change the mouse handling behavior of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> by overriding OnMouseLeftButtonUp.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnMouseMove_System_Windows_Input_MouseEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnMouseMove_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnMouseMove(MouseEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Mouse.MouseMove</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnMouseMove (System.Windows.Input.MouseEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.mouseeventargs\" data-linktype=\"relative-path\">MouseEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.mouseeventargs\" data-linktype=\"relative-path\">MouseEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnMouseRightButtonDown_System_Windows_Input_MouseButtonEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnMouseRightButtonDown_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnMouseRightButtonDown(MouseButtonEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseRightButtonDown\" data-linktype=\"relative-path\">MouseRightButtonDown</a> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.mousebuttoneventargs\" data-linktype=\"relative-path\">MouseButtonEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.mousebuttoneventargs\" data-linktype=\"relative-path\">MouseButtonEventArgs</a> that contains the event data. The event data reports that the right mouse button was pressed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseRightButtonDown\" data-linktype=\"relative-path\">MouseRightButtonDown</a> event appears to travel a bubbling route but actually travels in an indirect way. &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; is the underlying event that is bubble routed, and each <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> along the event route uses identical handling to raise the direct routed event <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseRightButtonDown\" data-linktype=\"relative-path\">MouseRightButtonDown</a>. Although you can mark the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseRightButtonDown\" data-linktype=\"relative-path\">MouseRightButtonDown</a> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <code>handledEventsToo</code>) from being invoked.  </p>\n<p> The default implementation for general mouse event handling in <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> listens for &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;. You cannot change the mouse handling behavior of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> by overriding OnMouseRightButtonDown.  </p>\n<p> Alternatively, you can override this method in order to change event handling for a specific mouse state. Whether you choose to call the base implementation depends on your scenario. Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke OnMouseRightButtonDown. For example, you can derive from <a class=\"xref\" href=\"system.windows.controls.control\" data-linktype=\"relative-path\">Control</a> and override OnMouseRightButtonDown in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <a class=\"xref\" href=\"system.windows.controls.control\" data-linktype=\"relative-path\">Control</a> default behavior.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnMouseRightButtonUp_System_Windows_Input_MouseButtonEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnMouseRightButtonUp_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnMouseRightButtonUp(MouseButtonEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseRightButtonUp\" data-linktype=\"relative-path\">MouseRightButtonUp</a> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.mousebuttoneventargs\" data-linktype=\"relative-path\">MouseButtonEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.mousebuttoneventargs\" data-linktype=\"relative-path\">MouseButtonEventArgs</a> that contains the event data. The event data reports that the right mouse button was released.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseRightButtonUp\" data-linktype=\"relative-path\">MouseRightButtonUp</a> event appears to travel a bubbling route but actually travels in an indirect way. &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; is the underlying event that is bubble routed, and each <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> along the event route uses identical handling to raise the direct routed event <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseRightButtonUp\" data-linktype=\"relative-path\">MouseRightButtonUp</a>. Although you can mark the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseRightButtonUp\" data-linktype=\"relative-path\">MouseRightButtonUp</a> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <code>handledEventsToo</code>) from being invoked.  </p>\n<p> The default implementation for general mouse event handling in <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> listens for &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;. You cannot change the mouse handling behavior of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> by overriding OnMouseRightButtonUp.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnMouseUp_System_Windows_Input_MouseButtonEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnMouseUp_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnMouseUp(MouseButtonEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Mouse.MouseUp</span> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnMouseUp (System.Windows.Input.MouseButtonEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.mousebuttoneventargs\" data-linktype=\"relative-path\">MouseButtonEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.mousebuttoneventargs\" data-linktype=\"relative-path\">MouseButtonEventArgs</a> that contains the event data. The event data reports that the mouse button was released.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; event as handled, OnMouseUp is not invoked.  </p>\n<p> If you use this class handler to mark the event as handled, you potentially impact the following events: <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseLeftButtonUp\" data-linktype=\"relative-path\">MouseLeftButtonUp</a> and <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseRightButtonUp\" data-linktype=\"relative-path\">MouseRightButtonUp</a>. Either of these events might be raised on the receiving element when &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; is received.  </p>\n<p> If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_AddHandler_System_Windows_RoutedEvent_System_Delegate_System_Boolean_\" data-linktype=\"relative-path\">AddHandler(RoutedEvent,Delegate,Boolean)</a> with <code>handledEventsToo</code> <code>true</code> in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_System_Type_System_Windows_RoutedEvent_System_Delegate_System_Boolean_\" data-linktype=\"relative-path\">RegisterClassHandler(Type,RoutedEvent,Delegate,Boolean)</a> signature with <code>handledEventsToo</code> <code>true</code>. By handling OnMouseUp, you are implying that your class handling accounted for all possible mouse button up actions. This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.  </p>\n<p> Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  </p>\n<p> This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnMouseWheel_System_Windows_Input_MouseWheelEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnMouseWheel_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnMouseWheel(MouseWheelEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Mouse.MouseWheel</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnMouseWheel (System.Windows.Input.MouseWheelEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.mousewheeleventargs\" data-linktype=\"relative-path\">MouseWheelEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.mousewheeleventargs\" data-linktype=\"relative-path\">MouseWheelEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnPreviewDragEnter_System_Windows_DragEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnPreviewDragEnter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnPreviewDragEnter(DragEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.DragDrop.PreviewDragEnter</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnPreviewDragEnter (System.Windows.DragEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnPreviewDragLeave_System_Windows_DragEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnPreviewDragLeave_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnPreviewDragLeave(DragEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.DragDrop.PreviewDragLeave</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnPreviewDragLeave (System.Windows.DragEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnPreviewDragOver_System_Windows_DragEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnPreviewDragOver_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnPreviewDragOver(DragEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.DragDrop.PreviewDragOver</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnPreviewDragOver (System.Windows.DragEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnPreviewDrop_System_Windows_DragEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnPreviewDrop_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnPreviewDrop(DragEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.DragDrop.PreviewDrop</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnPreviewDrop (System.Windows.DragEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnPreviewGiveFeedback_System_Windows_GiveFeedbackEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnPreviewGiveFeedback_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnPreviewGiveFeedback(GiveFeedbackEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.DragDrop.PreviewGiveFeedback</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnPreviewGiveFeedback (System.Windows.GiveFeedbackEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.givefeedbackeventargs\" data-linktype=\"relative-path\">GiveFeedbackEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.givefeedbackeventargs\" data-linktype=\"relative-path\">GiveFeedbackEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnPreviewGotKeyboardFocus_System_Windows_Input_KeyboardFocusChangedEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnPreviewGotKeyboardFocus_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Keyboard.PreviewGotKeyboardFocus</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnPreviewGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.keyboardfocuschangedeventargs\" data-linktype=\"relative-path\">KeyboardFocusChangedEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.keyboardfocuschangedeventargs\" data-linktype=\"relative-path\">KeyboardFocusChangedEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnPreviewKeyDown_System_Windows_Input_KeyEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnPreviewKeyDown_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnPreviewKeyDown(KeyEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Keyboard.PreviewKeyDown</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnPreviewKeyDown (System.Windows.Input.KeyEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.keyeventargs\" data-linktype=\"relative-path\">KeyEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.keyeventargs\" data-linktype=\"relative-path\">KeyEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnPreviewKeyUp_System_Windows_Input_KeyEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnPreviewKeyUp_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnPreviewKeyUp(KeyEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Keyboard.PreviewKeyUp</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnPreviewKeyUp (System.Windows.Input.KeyEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.keyeventargs\" data-linktype=\"relative-path\">KeyEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.keyeventargs\" data-linktype=\"relative-path\">KeyEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnPreviewLostKeyboardFocus_System_Windows_Input_KeyboardFocusChangedEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnPreviewLostKeyboardFocus_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Keyboard.PreviewKeyDown</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnPreviewLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.keyboardfocuschangedeventargs\" data-linktype=\"relative-path\">KeyboardFocusChangedEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.keyboardfocuschangedeventargs\" data-linktype=\"relative-path\">KeyboardFocusChangedEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnPreviewMouseDown_System_Windows_Input_MouseButtonEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnPreviewMouseDown_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnPreviewMouseDown(MouseButtonEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Mouse.PreviewMouseDown</span> attached routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnPreviewMouseDown (System.Windows.Input.MouseButtonEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.mousebuttoneventargs\" data-linktype=\"relative-path\">MouseButtonEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.mousebuttoneventargs\" data-linktype=\"relative-path\">MouseButtonEventArgs</a> that contains the event data. The event data reports that one or more mouse buttons were pressed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; event as handled, OnPreviewMouseDown is not invoked.  </p>\n<p> If you use this class handler to mark the event as handled, you potentially impact the following events: <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseLeftButtonDown\" data-linktype=\"relative-path\">PreviewMouseLeftButtonDown</a> and <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseRightButtonDown\" data-linktype=\"relative-path\">PreviewMouseRightButtonDown</a>. Either of these events may be raised on the receiving element when &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; is received.  </p>\n<p> If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_AddHandler_System_Windows_RoutedEvent_System_Delegate_System_Boolean_\" data-linktype=\"relative-path\">AddHandler(RoutedEvent,Delegate,Boolean)</a> with <code>handledEventsToo</code> <code>true</code> in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_System_Type_System_Windows_RoutedEvent_System_Delegate_System_Boolean_\" data-linktype=\"relative-path\">RegisterClassHandler(Type,RoutedEvent,Delegate,Boolean)</a> signature with <code>handledEventsToo</code> <code>true</code>. By handling OnPreviewMouseDown, you are implying that your class handling accounted for all possible mouse button down actions. This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.  </p>\n<p> Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  </p>\n<p> This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnPreviewMouseLeftButtonDown_System_Windows_Input_MouseButtonEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnPreviewMouseLeftButtonDown_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseLeftButtonDown\" data-linktype=\"relative-path\">PreviewMouseLeftButtonDown</a> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnPreviewMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.mousebuttoneventargs\" data-linktype=\"relative-path\">MouseButtonEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.mousebuttoneventargs\" data-linktype=\"relative-path\">MouseButtonEventArgs</a> that contains the event data. The event data reports that the left mouse button was pressed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseLeftButtonDown\" data-linktype=\"relative-path\">PreviewMouseLeftButtonDown</a> event appears to travel a tunneling route but actually travels in an indirect way. &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; is the underlying event that is tunnel routed, and each <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> along the event route uses identical handling to raise the direct routed event <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseLeftButtonDown\" data-linktype=\"relative-path\">PreviewMouseLeftButtonDown</a>. Although you can mark the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseLeftButtonDown\" data-linktype=\"relative-path\">PreviewMouseLeftButtonDown</a> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <code>handledEventsToo</code>) from being invoked.  </p>\n<p> The default implementation for general mouse event handling in <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> listens for &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;. You cannot change the mouse handling behavior of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> by overriding OnPreviewMouseLeftButtonDown.  </p>\n<p> Alternatively, you can override this method in order to change event handling for a specific mouse state. Whether you choose to call the base implementation depends on your scenario. Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke OnPreviewMouseLeftButtonDown. For example, you can derive from <a class=\"xref\" href=\"system.windows.controls.button\" data-linktype=\"relative-path\">Button</a> and override OnPreviewMouseLeftButtonDown in your derived class without calling the base implementation; however, this override disables the <a class=\"xref\" href=\"system.windows.controls.primitives.buttonbase#System_Windows_Controls_Primitives_ButtonBase_Click\" data-linktype=\"relative-path\">Click</a> event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnPreviewMouseLeftButtonUp_System_Windows_Input_MouseButtonEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnPreviewMouseLeftButtonUp_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseLeftButtonUp\" data-linktype=\"relative-path\">PreviewMouseLeftButtonUp</a> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnPreviewMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.mousebuttoneventargs\" data-linktype=\"relative-path\">MouseButtonEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.mousebuttoneventargs\" data-linktype=\"relative-path\">MouseButtonEventArgs</a> that contains the event data. The event data reports that the left mouse button was released.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseLeftButtonUp\" data-linktype=\"relative-path\">PreviewMouseLeftButtonUp</a> event appears to travel a tunneling route but actually travels in an indirect way. &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; is the underlying event that is tunnel routed, and each <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> along the event route uses identical handling to raise the direct routed event <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseLeftButtonUp\" data-linktype=\"relative-path\">PreviewMouseLeftButtonUp</a>. Although you can mark the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseLeftButtonUp\" data-linktype=\"relative-path\">PreviewMouseLeftButtonUp</a> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <code>handledEventsToo</code>) from being invoked.  </p>\n<p> The default implementation for general mouse event handling in <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> listens for &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;. You cannot change the mouse handling behavior of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> by overriding OnPreviewMouseLeftButtonUp.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnPreviewMouseMove_System_Windows_Input_MouseEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnPreviewMouseMove_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnPreviewMouseMove(MouseEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Mouse.PreviewMouseMove</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnPreviewMouseMove (System.Windows.Input.MouseEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.mouseeventargs\" data-linktype=\"relative-path\">MouseEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.mouseeventargs\" data-linktype=\"relative-path\">MouseEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnPreviewMouseRightButtonDown_System_Windows_Input_MouseButtonEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnPreviewMouseRightButtonDown_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnPreviewMouseRightButtonDown(MouseButtonEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseRightButtonDown\" data-linktype=\"relative-path\">PreviewMouseRightButtonDown</a> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnPreviewMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.mousebuttoneventargs\" data-linktype=\"relative-path\">MouseButtonEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.mousebuttoneventargs\" data-linktype=\"relative-path\">MouseButtonEventArgs</a> that contains the event data. The event data reports that the right mouse button was pressed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseRightButtonDown\" data-linktype=\"relative-path\">PreviewMouseRightButtonDown</a> event appears to travel a tunneling route but actually travels in an indirect way. &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; is the underlying event that is tunnel routed, and each <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> along the event route uses identical handling to raise the direct routed event <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseRightButtonDown\" data-linktype=\"relative-path\">MouseRightButtonDown</a>. Although you can mark the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseRightButtonDown\" data-linktype=\"relative-path\">PreviewMouseRightButtonDown</a> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <code>handledEventsToo</code>) from being invoked.  </p>\n<p> The default implementation for general mouse event handling in <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> listens for &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;. You cannot change the mouse handling behavior of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> by overriding OnPreviewMouseRightButtonDown.  </p>\n<p> Alternatively, you can override this method in order to change event handling for a specific mouse state. Whether you choose to call the base implementation depends on your scenario. Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke OnPreviewMouseRightButtonDown. For example, you can derive from <a class=\"xref\" href=\"system.windows.controls.control\" data-linktype=\"relative-path\">Control</a> and override OnPreviewMouseRightButtonDown in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <a class=\"xref\" href=\"system.windows.controls.control\" data-linktype=\"relative-path\">Control</a> default behavior.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnPreviewMouseRightButtonUp_System_Windows_Input_MouseButtonEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnPreviewMouseRightButtonUp_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnPreviewMouseRightButtonUp(MouseButtonEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseRightButtonUp\" data-linktype=\"relative-path\">PreviewMouseRightButtonUp</a> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnPreviewMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.mousebuttoneventargs\" data-linktype=\"relative-path\">MouseButtonEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.mousebuttoneventargs\" data-linktype=\"relative-path\">MouseButtonEventArgs</a> that contains the event data. The event data reports that the right mouse button was released.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseRightButtonUp\" data-linktype=\"relative-path\">PreviewMouseRightButtonUp</a> event appears to travel a tunneling route but actually travels in an indirect way. &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; is the underlying event that is tunnel routed, and each <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> along the event route uses identical handling to raise the direct routed event <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseRightButtonUp\" data-linktype=\"relative-path\">PreviewMouseRightButtonUp</a>. Although you can mark the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseRightButtonUp\" data-linktype=\"relative-path\">PreviewMouseRightButtonUp</a> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <code>handledEventsToo</code>) from being invoked.  </p>\n<p> The default implementation for general mouse event handling in <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> listens for &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;. You cannot change the mouse handling behavior of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> by overriding OnPreviewMouseRightButtonUp.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnPreviewMouseUp_System_Windows_Input_MouseButtonEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnPreviewMouseUp_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnPreviewMouseUp(MouseButtonEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Mouse.PreviewMouseUp</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnPreviewMouseUp (System.Windows.Input.MouseButtonEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.mousebuttoneventargs\" data-linktype=\"relative-path\">MouseButtonEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.mousebuttoneventargs\" data-linktype=\"relative-path\">MouseButtonEventArgs</a> that contains the event data. The event data reports that one or more mouse buttons were released.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; event as handled, OnPreviewMouseUp is not invoked.  </p>\n<p> If you use this class handler to mark the event as handled, you potentially impact the following events: <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseLeftButtonUp\" data-linktype=\"relative-path\">PreviewMouseLeftButtonUp</a> and <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseRightButtonUp\" data-linktype=\"relative-path\">PreviewMouseRightButtonUp</a>. Either of these events might be raised on the receiving element when &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; is received.  </p>\n<p> If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_AddHandler_System_Windows_RoutedEvent_System_Delegate_System_Boolean_\" data-linktype=\"relative-path\">AddHandler(RoutedEvent,Delegate,Boolean)</a> with <code>handledEventsToo</code> <code>true</code> in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_System_Type_System_Windows_RoutedEvent_System_Delegate_System_Boolean_\" data-linktype=\"relative-path\">RegisterClassHandler(Type,RoutedEvent,Delegate,Boolean)</a> signature with <code>handledEventsToo</code> <code>true</code>. By handling OnPreviewMouseUp, you are implying that your class handling accounted for all possible mouse button up actions. This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.  </p>\n<p> Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  </p>\n<p> This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnPreviewMouseWheel_System_Windows_Input_MouseWheelEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnPreviewMouseWheel_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnPreviewMouseWheel(MouseWheelEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Mouse.PreviewMouseWheel</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnPreviewMouseWheel (System.Windows.Input.MouseWheelEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.mousewheeleventargs\" data-linktype=\"relative-path\">MouseWheelEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.mousewheeleventargs\" data-linktype=\"relative-path\">MouseWheelEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnPreviewQueryContinueDrag_System_Windows_QueryContinueDragEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnPreviewQueryContinueDrag_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.DragDrop.PreviewQueryContinueDrag</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnPreviewQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.querycontinuedrageventargs\" data-linktype=\"relative-path\">QueryContinueDragEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.querycontinuedrageventargs\" data-linktype=\"relative-path\">QueryContinueDragEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnPreviewStylusButtonDown_System_Windows_Input_StylusButtonEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnPreviewStylusButtonDown_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnPreviewStylusButtonDown(StylusButtonEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.PreviewStylusButtonDown</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnPreviewStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.stylusbuttoneventargs\" data-linktype=\"relative-path\">StylusButtonEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.stylusbuttoneventargs\" data-linktype=\"relative-path\">StylusButtonEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnPreviewStylusButtonUp_System_Windows_Input_StylusButtonEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnPreviewStylusButtonUp_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnPreviewStylusButtonUp(StylusButtonEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.PreviewStylusButtonUp</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnPreviewStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.stylusbuttoneventargs\" data-linktype=\"relative-path\">StylusButtonEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.stylusbuttoneventargs\" data-linktype=\"relative-path\">StylusButtonEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnPreviewStylusDown_System_Windows_Input_StylusDownEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnPreviewStylusDown_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnPreviewStylusDown(StylusDownEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.PreviewStylusDown</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnPreviewStylusDown (System.Windows.Input.StylusDownEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.stylusdowneventargs\" data-linktype=\"relative-path\">StylusDownEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.stylusdowneventargs\" data-linktype=\"relative-path\">StylusDownEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnPreviewStylusInAirMove_System_Windows_Input_StylusEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnPreviewStylusInAirMove_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnPreviewStylusInAirMove(StylusEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.PreviewStylusInAirMove</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnPreviewStylusInAirMove (System.Windows.Input.StylusEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnPreviewStylusInRange_System_Windows_Input_StylusEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnPreviewStylusInRange_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnPreviewStylusInRange(StylusEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.PreviewStylusInRange</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnPreviewStylusInRange (System.Windows.Input.StylusEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnPreviewStylusMove_System_Windows_Input_StylusEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnPreviewStylusMove_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnPreviewStylusMove(StylusEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.PreviewStylusMove</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnPreviewStylusMove (System.Windows.Input.StylusEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnPreviewStylusOutOfRange_System_Windows_Input_StylusEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnPreviewStylusOutOfRange_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnPreviewStylusOutOfRange(StylusEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.PreviewStylusOutOfRange</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnPreviewStylusOutOfRange (System.Windows.Input.StylusEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnPreviewStylusSystemGesture_System_Windows_Input_StylusSystemGestureEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnPreviewStylusSystemGesture_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.PreviewStylusSystemGesture</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnPreviewStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.stylussystemgestureeventargs\" data-linktype=\"relative-path\">StylusSystemGestureEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.stylussystemgestureeventargs\" data-linktype=\"relative-path\">StylusSystemGestureEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnPreviewStylusUp_System_Windows_Input_StylusEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnPreviewStylusUp_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnPreviewStylusUp(StylusEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.PreviewStylusUp</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnPreviewStylusUp (System.Windows.Input.StylusEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnPreviewTextInput_System_Windows_Input_TextCompositionEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnPreviewTextInput_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnPreviewTextInput(TextCompositionEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.TextCompositionManager.PreviewTextInput</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnPreviewTextInput (System.Windows.Input.TextCompositionEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.textcompositioneventargs\" data-linktype=\"relative-path\">TextCompositionEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.textcompositioneventargs\" data-linktype=\"relative-path\">TextCompositionEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnPreviewTouchDown_System_Windows_Input_TouchEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnPreviewTouchDown_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnPreviewTouchDown(TouchEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Provides class handling for the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewTouchDown\" data-linktype=\"relative-path\">PreviewTouchDown</a> routed event that occurs when a touch presses this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnPreviewTouchDown (System.Windows.Input.TouchEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The OnPreviewTouchDown method has no default implementation. Override OnPreviewTouchDown in a derived class to handle the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewTouchDown\" data-linktype=\"relative-path\">PreviewTouchDown</a> event. Be sure to call the base class’s OnPreviewTouchDown method so that base classes receive the event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnPreviewTouchMove_System_Windows_Input_TouchEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnPreviewTouchMove_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnPreviewTouchMove(TouchEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Provides class handling for the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewTouchMove\" data-linktype=\"relative-path\">PreviewTouchMove</a> routed event that occurs when a touch moves while inside this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnPreviewTouchMove (System.Windows.Input.TouchEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The OnPreviewTouchMove method has no default implementation. Override OnPreviewTouchMove in a derived class to handle the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewTouchMove\" data-linktype=\"relative-path\">PreviewTouchMove</a> event. Be sure to call the base class’s OnPreviewTouchMove method so that base classes receive the event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnPreviewTouchUp_System_Windows_Input_TouchEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnPreviewTouchUp_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnPreviewTouchUp(TouchEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Provides class handling for the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewTouchUp\" data-linktype=\"relative-path\">PreviewTouchUp</a> routed event that occurs when a touch is released inside this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnPreviewTouchUp (System.Windows.Input.TouchEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The OnPreviewTouchUp method has no default implementation. Override OnPreviewTouchUp in a derived class to handle the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewTouchUp\" data-linktype=\"relative-path\">PreviewTouchUp</a> event. Be sure to call the base class’s OnPreviewTouchUp method so that base classes receive the event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnQueryContinueDrag_System_Windows_QueryContinueDragEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnQueryContinueDrag_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnQueryContinueDrag(QueryContinueDragEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.DragDrop.QueryContinueDrag</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.querycontinuedrageventargs\" data-linktype=\"relative-path\">QueryContinueDragEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.querycontinuedrageventargs\" data-linktype=\"relative-path\">QueryContinueDragEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnQueryCursor_System_Windows_Input_QueryCursorEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnQueryCursor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnQueryCursor(QueryCursorEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Mouse.QueryCursor</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnQueryCursor (System.Windows.Input.QueryCursorEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.querycursoreventargs\" data-linktype=\"relative-path\">QueryCursorEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.querycursoreventargs\" data-linktype=\"relative-path\">QueryCursorEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnRender_System_Windows_Media_DrawingContext_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnRender_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnRender(DrawingContext)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, participates in rendering operations that are directed by the layout system. The rendering instructions for this element are not used directly when this method is invoked, and are instead preserved for later asynchronous use by layout and drawing.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnRender (System.Windows.Media.DrawingContext drawingContext);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>drawingContext</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.drawingcontext\" data-linktype=\"relative-path\">DrawingContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The drawing instructions for a specific element. This context is provided to the layout system.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation in the <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows a possible implementation for a panel derived class.  </p>\n<pre><code class=\"lang-vb\" name=\"LightWeightCustomPanel#1\">&#39; Override the OnRender call to add a Background and Border to the OffSetPanel\nProtected Overrides Sub OnRender(ByVal dc As DrawingContext)\n\tDim mySolidColorBrush As New SolidColorBrush()\n\tmySolidColorBrush.Color = Colors.LimeGreen\n\tDim myPen As New Pen(Brushes.Blue, 10)\n\tDim myRect As New Rect(0, 0, 500, 500)\n\tdc.DrawRectangle(mySolidColorBrush, myPen, myRect)\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"LightWeightCustomPanel#1\">// Override the OnRender call to add a Background and Border to the OffSetPanel\nprotected override void OnRender(DrawingContext dc)\n{\n    SolidColorBrush mySolidColorBrush  = new SolidColorBrush();\n    mySolidColorBrush.Color = Colors.LimeGreen;\n    Pen myPen = new Pen(Brushes.Blue, 10);\n    Rect myRect = new Rect(0, 0, 500, 500);\n    dc.DrawRectangle(mySolidColorBrush, myPen, myRect);\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnRenderSizeChanged_System_Windows_SizeChangedInfo_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnRenderSizeChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnRenderSizeChanged(SizeChangedInfo)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, participates in rendering operations that are directed by the layout system. This method is invoked after layout update, and before rendering, if the element&#39;s <span class=\"xref\">stem.Windows.UIElement.RenderSize*</span> has changed as a result of layout update.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnRenderSizeChanged (System.Windows.SizeChangedInfo info);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>info</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.sizechangedinfo\" data-linktype=\"relative-path\">SizeChangedInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The packaged parameters (<a class=\"xref\" href=\"system.windows.sizechangedinfo\" data-linktype=\"relative-path\">SizeChangedInfo</a>), which includes old and new sizes, and which dimension actually changes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. A typical WPF framework-level element uses the override implementation from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>. The <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a> implementation invalidates the <a class=\"xref\" href=\"system.windows.frameworkelement#System_Windows_FrameworkElement_Width_\" data-linktype=\"relative-path\">Width</a> and <a class=\"xref\" href=\"system.windows.frameworkelement#System_Windows_FrameworkElement_Height_\" data-linktype=\"relative-path\">Height</a> properties and handles the basics of remaking the layout. Overriding OnRenderSizeChanged at the <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> level implies that your element implementation is deliberately not using the WPF framework-level implementation, and therefore your element must handle layout logic more directly, typically by writing a replacement layout system.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnStylusButtonDown_System_Windows_Input_StylusButtonEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnStylusButtonDown_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnStylusButtonDown(StylusButtonEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.StylusButtonDown</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.stylusbuttoneventargs\" data-linktype=\"relative-path\">StylusButtonEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.stylusbuttoneventargs\" data-linktype=\"relative-path\">StylusButtonEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnStylusButtonUp_System_Windows_Input_StylusButtonEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnStylusButtonUp_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnStylusButtonUp(StylusButtonEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.StylusButtonUp</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.stylusbuttoneventargs\" data-linktype=\"relative-path\">StylusButtonEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.stylusbuttoneventargs\" data-linktype=\"relative-path\">StylusButtonEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnStylusDown_System_Windows_Input_StylusDownEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnStylusDown_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnStylusDown(StylusDownEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.StylusDown</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnStylusDown (System.Windows.Input.StylusDownEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.stylusdowneventargs\" data-linktype=\"relative-path\">StylusDownEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.stylusdowneventargs\" data-linktype=\"relative-path\">StylusDownEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnStylusEnter_System_Windows_Input_StylusEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnStylusEnter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnStylusEnter(StylusEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.StylusEnter</span> attached event is raised by this element. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnStylusEnter (System.Windows.Input.StylusEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.  </p>\n<p> The purpose of this method is similar to common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify <code>handledEventsToo</code>) from being invoked.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnStylusInAirMove_System_Windows_Input_StylusEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnStylusInAirMove_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnStylusInAirMove(StylusEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.StylusInAirMove</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnStylusInAirMove (System.Windows.Input.StylusEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnStylusInRange_System_Windows_Input_StylusEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnStylusInRange_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnStylusInRange(StylusEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.StylusInRange</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnStylusInRange (System.Windows.Input.StylusEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnStylusLeave_System_Windows_Input_StylusEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnStylusLeave_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnStylusLeave(StylusEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.StylusLeave</span> attached event is raised by this element. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnStylusLeave (System.Windows.Input.StylusEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.  </p>\n<p> The purpose of this method is similar to common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify <code>handledEventsToo</code>) from being invoked.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnStylusMove_System_Windows_Input_StylusEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnStylusMove_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnStylusMove(StylusEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.StylusMove</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnStylusMove (System.Windows.Input.StylusEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnStylusOutOfRange_System_Windows_Input_StylusEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnStylusOutOfRange_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnStylusOutOfRange(StylusEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.StylusOutOfRange</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnStylusOutOfRange (System.Windows.Input.StylusEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnStylusSystemGesture_System_Windows_Input_StylusSystemGestureEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnStylusSystemGesture_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnStylusSystemGesture(StylusSystemGestureEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.StylusSystemGesture</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.stylussystemgestureeventargs\" data-linktype=\"relative-path\">StylusSystemGestureEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.stylussystemgestureeventargs\" data-linktype=\"relative-path\">StylusSystemGestureEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnStylusUp_System_Windows_Input_StylusEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnStylusUp_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnStylusUp(StylusEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.Stylus.StylusUp</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnStylusUp (System.Windows.Input.StylusEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.styluseventargs\" data-linktype=\"relative-path\">StylusEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnTextInput_System_Windows_Input_TextCompositionEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnTextInput_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnTextInput(TextCompositionEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when an unhandled <span class=\"xref\">stem.Windows.Input.TextCompositionManager.TextInput</span> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnTextInput (System.Windows.Input.TextCompositionEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.textcompositioneventargs\" data-linktype=\"relative-path\">TextCompositionEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.input.textcompositioneventargs\" data-linktype=\"relative-path\">TextCompositionEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  </p>\n<p> The purpose of this method is similar to the common language runtime (CLR) event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  </p>\n<p> Either by overriding this method or by registering class handlers with <a class=\"xref\" href=\"system.windows.eventmanager#System_Windows_EventManager_RegisterClassHandler_\" data-linktype=\"relative-path\">RegisterClassHandler</a>, derived classes of <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnTouchDown_System_Windows_Input_TouchEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnTouchDown_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnTouchDown(TouchEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Provides class handling for the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_TouchDown\" data-linktype=\"relative-path\">TouchDown</a> routed event that occurs when a touch presses inside this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnTouchDown (System.Windows.Input.TouchEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The OnTouchDown method has no default implementation. Override OnTouchDown in a derived class to handle the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_TouchDown\" data-linktype=\"relative-path\">TouchDown</a> event. Be sure to call the base class’s OnTouchDown method so that base classes receive the event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnTouchEnter_System_Windows_Input_TouchEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnTouchEnter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnTouchEnter(TouchEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Provides class handling for the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_TouchEnter\" data-linktype=\"relative-path\">TouchEnter</a> routed event that occurs when a touch moves from outside to inside the bounds of this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnTouchEnter (System.Windows.Input.TouchEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>TheOnTouchEnter method has no default implementation. Override OnTouchEnter in a derived class to handle the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_TouchEnter\" data-linktype=\"relative-path\">TouchEnter</a> event. Be sure to call the base class’s OnTouchEnter method so that base classes receive the event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnTouchLeave_System_Windows_Input_TouchEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnTouchLeave_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnTouchLeave(TouchEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Provides class handling for the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_TouchLeave\" data-linktype=\"relative-path\">TouchLeave</a> routed event that occurs when a touch moves from inside to outside the bounds of this <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnTouchLeave (System.Windows.Input.TouchEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The OnTouchLeave method has no default implementation. Override OnTouchLeave in a derived class to handle the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_TouchLeave\" data-linktype=\"relative-path\">TouchLeave</a> event. Be sure to call the base class’s OnTouchLeave method so that base classes receive the event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnTouchMove_System_Windows_Input_TouchEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnTouchMove_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnTouchMove(TouchEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Provides class handling for the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_TouchMove\" data-linktype=\"relative-path\">TouchMove</a> routed event that occurs when a touch moves while inside this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnTouchMove (System.Windows.Input.TouchEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The OnTouchMove method has no default implementation. Override OnTouchMove in a derived class to handle the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_TouchMove\" data-linktype=\"relative-path\">TouchMove</a> event. Be sure to call the base class’s OnTouchMove method so that base classes receive the event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnTouchUp_System_Windows_Input_TouchEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnTouchUp_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnTouchUp(TouchEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Provides class handling for the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_TouchUp\" data-linktype=\"relative-path\">TouchUp</a> routed event that occurs when a touch is released inside this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnTouchUp (System.Windows.Input.TouchEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The OnTouchUp method has no default implementation. Override OnTouchUp in a derived class to handle the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_TouchUp\" data-linktype=\"relative-path\">TouchUp</a> event. Be sure to call the base class’s OnTouchUp method so that base classes receive the event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_OnVisualParentChanged_System_Windows_DependencyObject_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_OnVisualParentChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnVisualParentChanged(DependencyObject)</div>        \r\n          </div>\r\n    \r\n            <p>Invoked when the parent element of this <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> reports a change to its underlying visual parent.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override void OnVisualParentChanged (System.Windows.DependencyObject oldParent);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>oldParent</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyobject\" data-linktype=\"relative-path\">DependencyObject</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The previous parent. This may be provided as <code>null</code> if the <a class=\"xref\" href=\"system.windows.dependencyobject\" data-linktype=\"relative-path\">DependencyObject</a> did not have a parent element previously.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PredictFocus_System_Windows_Input_FocusNavigationDirection_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_PredictFocus_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PredictFocus(FocusNavigationDirection)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, returns the element that would receive focus for a specified focus traversal direction, without actually moving focus to that element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>direction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.focusnavigationdirection\" data-linktype=\"relative-path\">FocusNavigationDirection</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The direction of the requested focus traversal.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyobject\" data-linktype=\"relative-path\">DependencyObject</a></div>\r\n                  </div>\r\n                  <p>The element that would have received focus if <span class=\"xref\">stem.Windows.UIElement.MoveFocus*</span> were actually invoked.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default implementation of this method in this class is incomplete, and always returns <code>null</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_RaiseEvent_System_Windows_RoutedEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_RaiseEvent_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RaiseEvent(RoutedEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises a specific routed event. The <a class=\"xref\" href=\"system.windows.routedevent\" data-linktype=\"relative-path\">RoutedEvent</a> to be raised is identified within the <a class=\"xref\" href=\"system.windows.routedeventargs\" data-linktype=\"relative-path\">RoutedEventArgs</a> instance that is provided (as the <span class=\"xref\">stem.Windows.RoutedEventArgs.RoutedEvent*</span> property of that event data).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void RaiseEvent (System.Windows.RoutedEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.routedeventargs\" data-linktype=\"relative-path\">RoutedEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.routedeventargs\" data-linktype=\"relative-path\">RoutedEventArgs</a> that contains the event data and also identifies the event to raise.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>e</code> parameter is typed as the common base type for all routed event data; however, the event data should be given as the most specific event data type that is available for the event being raised, because <a class=\"xref\" href=\"system.windows.routedeventargs\" data-linktype=\"relative-path\">RoutedEventArgs</a> derived classes contain the actual specific data properties that are intended for the specific event when it is raised.  </p>\n<p> <a class=\"xref\" href=\"system.windows.routedeventargs\" data-linktype=\"relative-path\">RoutedEventArgs</a> is not just the state properties for the event; it also identifies which routed event to raise. This event-raising pattern and the routed event data both differ from common language runtime (CLR) events and data classes, which typically just contain properties that are related to the event.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates event data, appends the event identifier to the data, and then uses the event data instance to raise a custom routed event.  </p>\n<pre><code class=\"lang-cs\" name=\"RoutedEventCustom#RaiseEvent\">void RaiseTapEvent()\n{\n        RoutedEventArgs newEventArgs = new RoutedEventArgs(MyButtonSimple.TapEvent);\n        RaiseEvent(newEventArgs);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"RoutedEventCustom#RaiseEvent\">Private Sub RaiseTapEvent()\n    Dim newEventArgs As New RoutedEventArgs(MyButtonSimple.TapEvent)\n    MyBase.RaiseEvent(newEventArgs)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_ReleaseAllTouchCaptures\">\r\n    \r\n            <a id=\"System_Windows_UIElement_ReleaseAllTouchCaptures_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReleaseAllTouchCaptures()</div>        \r\n          </div>\r\n    \r\n            <p>Releases all captured touch devices from this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ReleaseAllTouchCaptures ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_ReleaseMouseCapture\">\r\n    \r\n            <a id=\"System_Windows_UIElement_ReleaseMouseCapture_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReleaseMouseCapture()</div>        \r\n          </div>\r\n    \r\n            <p>Releases the mouse capture, if this element held the capture.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ReleaseMouseCapture ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If this element did not hold the capture, calling this method has no effect. Consider checking the value of <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsMouseCaptured_\" data-linktype=\"relative-path\">IsMouseCaptured</a> before you call this method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example is the parallel to the example given for <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_CaptureMouse_\" data-linktype=\"relative-path\">CaptureMouse</a>: it handles mouse button up to release mouse capture and re-enable moving the mouse.  </p>\n<pre><code class=\"lang-cs\" name=\"CubeAnimation#UIElementMouseCapture\">private void MouseDownHandler(object sender, MouseButtonEventArgs e)\n{\n    if (!Enabled) return;\n    e.Handled = true;\n\n\n    if (Keyboard.IsKeyDown(Key.F1) == true)\n    {\n        Reset();\n        return;\n    }\n\n    UIElement el = (UIElement)sender;\n    _point = e.MouseDevice.GetPosition(el);\n    // Initialize the center of rotation to the lookatpoint\n    if (!_centered)\n    {\n        ProjectionCamera camera = (ProjectionCamera)_slaves[0].Camera;\n        _center = camera.LookDirection;\n        _centered = true;\n    }\n\n    _scaling = (e.MiddleButton == MouseButtonState.Pressed);\n\n    if (Keyboard.IsKeyDown(Key.Space) == false)\n        _rotating = true;\n    else\n        _rotating = false;\n\n    el.CaptureMouse();\n}\n\nprivate void MouseUpHandler(object sender, MouseButtonEventArgs e)\n{\n    if (!_enabled) return;\n    e.Handled = true;\n\n    // Stuff the current initial + delta into initial so when we next move we\n    // start at the right place.\n    if (_rotating == true)\n        _rotation = _rotationDelta * _rotation;\n    else\n    {\n        _translate += _translateDelta;\n        _translateDelta.X = 0;\n        _translateDelta.Y = 0;\n    }\n\n    //_scale = _scaleDelta*_scale;\n    UIElement el = (UIElement)sender;\n    el.ReleaseMouseCapture();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"CubeAnimation#UIElementMouseCapture\">Private Sub MouseDownHandler(ByVal sender As Object, ByVal e As MouseButtonEventArgs)\n\tIf Not Enabled Then\n\t\tReturn\n\tEnd If\n\te.Handled = True\n\n\n\tIf Keyboard.IsKeyDown(Key.F1) = True Then\n\t\tReset()\n\t\tReturn\n\tEnd If\n\n\tDim el As UIElement = CType(sender, UIElement)\n\t_point = e.MouseDevice.GetPosition(el)\n\t&#39; Initialize the center of rotation to the lookatpoint\n\tIf Not _centered Then\n\t\tDim camera As ProjectionCamera = CType(_slaves(0).Camera, ProjectionCamera)\n\t\t_center = camera.LookDirection\n\t\t_centered = True\n\tEnd If\n\n\t_scaling = (e.MiddleButton = MouseButtonState.Pressed)\n\n\tIf Keyboard.IsKeyDown(Key.Space) = False Then\n\t\t_rotating = True\n\tElse\n\t\t_rotating = False\n\tEnd If\n\n\tel.CaptureMouse()\nEnd Sub\n\nPrivate Sub MouseUpHandler(ByVal sender As Object, ByVal e As MouseButtonEventArgs)\n\tIf Not _enabled Then\n\t\tReturn\n\tEnd If\n\te.Handled = True\n\n\t&#39; Stuff the current initial + delta into initial so when we next move we\n\t&#39; start at the right place.\n\tIf _rotating = True Then\n\t\t_rotation = _rotationDelta * _rotation\n\tElse\n\t\t_translate += _translateDelta\n\t\t_translateDelta.X = 0\n\t\t_translateDelta.Y = 0\n\tEnd If\n\n\t&#39;_scale = _scaleDelta * _scale\n\tDim el As UIElement = CType(sender, UIElement)\n\tel.ReleaseMouseCapture()\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_ReleaseStylusCapture\">\r\n    \r\n            <a id=\"System_Windows_UIElement_ReleaseStylusCapture_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReleaseStylusCapture()</div>        \r\n          </div>\r\n    \r\n            <p>Releases the stylus device capture, if this element held the capture.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ReleaseStylusCapture ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If this element did not hold the capture, calling this method has no effect. Consider checking the value of <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsStylusCaptured_\" data-linktype=\"relative-path\">IsStylusCaptured</a> before you call this method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_ReleaseTouchCapture_System_Windows_Input_TouchDevice_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_ReleaseTouchCapture_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReleaseTouchCapture(TouchDevice)</div>        \r\n          </div>\r\n    \r\n            <p>Attempts to release the specified touch device from this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool ReleaseTouchCapture (System.Windows.Input.TouchDevice touchDevice);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>touchDevice</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.touchdevice\" data-linktype=\"relative-path\">TouchDevice</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The device to release.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the touch device is released; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>touchDevice</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_RemoveHandler_System_Windows_RoutedEvent_System_Delegate_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_RemoveHandler_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemoveHandler(RoutedEvent,Delegate)</div>        \r\n          </div>\r\n    \r\n            <p>Removes the specified routed event handler from this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void RemoveHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>routedEvent</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.routedevent\" data-linktype=\"relative-path\">RoutedEvent</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The identifier of the routed event for which the handler is attached.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>handler</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The specific handler implementation to remove from the event handler collection on this element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The most common scenario for using this API is when you implement the common language runtime (CLR) &quot;wrapper&quot; event that is associated with a custom routed event, specifically when you implement the &quot;remove&quot; logic for handlers at the CLR level. The example that follows this remarks section illustrates this scenario.  </p>\n<p> Calling this method has no effect if there were no handlers registered with criteria that matches the input parameters for the method call.  </p>\n<p> If more than one handler is attached that matched the criteria, only the first handler in the event handler store is removed. This behavior is consistent with CLR behavior of the <code>-=</code> operator.  </p>\n<p> Neither <code>routedEvent</code> nor <code>handler</code> may be <code>null</code>. Attempting to provide either value as <code>null</code> will raise an exception.  </p>\n<p> This method ignores the <code>handledEventsToo</code> parameter information, which is provided if the handler was first added with the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_AddHandler_System_Windows_RoutedEvent_System_Delegate_System_Boolean_\" data-linktype=\"relative-path\">AddHandler(RoutedEvent,Delegate,Boolean)</a> signature that enables handling of already-handled events. Either type of handler is removed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses RemoveHandler as part of an event wrapper definition.  </p>\n<pre><code class=\"lang-cs\" name=\"RoutedEventCustom#AddRemoveHandler\">public static readonly RoutedEvent TapEvent = EventManager.RegisterRoutedEvent(\n    &quot;Tap&quot;, RoutingStrategy.Bubble, typeof(RoutedEventHandler), typeof(MyButtonSimple));\n\n// Provide CLR accessors for the event\npublic event RoutedEventHandler Tap\n{\n        add { AddHandler(TapEvent, value); } \n        remove { RemoveHandler(TapEvent, value); }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"RoutedEventCustom#AddRemoveHandler\">Public Shared ReadOnly TapEvent As RoutedEvent = EventManager.RegisterRoutedEvent(&quot;Tap&quot;, RoutingStrategy.Bubble, GetType(RoutedEventHandler), GetType(MyButtonSimple))\n\n&#39; Provide CLR accessors for the event\nPublic Custom Event Tap As RoutedEventHandler\n    AddHandler(ByVal value As RoutedEventHandler)\n        Me.AddHandler(TapEvent, value)\n    End AddHandler\n\n    RemoveHandler(ByVal value As RoutedEventHandler)\n        Me.RemoveHandler(TapEvent, value)\n    End RemoveHandler\n\n    RaiseEvent(ByVal sender As Object, ByVal e As RoutedEventArgs)\n        Me.RaiseEvent(e)\n    End RaiseEvent\nEnd Event\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_ShouldSerializeCommandBindings\">\r\n    \r\n            <a id=\"System_Windows_UIElement_ShouldSerializeCommandBindings_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ShouldSerializeCommandBindings()</div>        \r\n          </div>\r\n    \r\n            <p>Returns whether serialization processes should serialize the contents of the <span class=\"xref\">stem.Windows.UIElement.CommandBindings*</span> property on instances of this class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool ShouldSerializeCommandBindings ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <span class=\"xref\">stem.Windows.UIElement.CommandBindings*</span> property value should be serialized; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This will return <code>true</code> if <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_CommandBindings_\" data-linktype=\"relative-path\">CommandBindings</a> is locally set.  </p>\n<p> This <code>ShouldSerialize</code> method is provided because the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_CommandBindings_\" data-linktype=\"relative-path\">CommandBindings</a> property does not have a simple default value. This method indicates whether the property has changed from its default value. You typically invoke this method if you are either developing a designer or developing your own control incorporating a <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a>.  </p>\n<p> For more information, see <a href=\"../Topic/Defining%20Default%20Values%20with%20the%20ShouldSerialize%20and%20Reset%20Methods.md\" data-linktype=\"relative-path\">Defining Default Values with the ShouldSerialize and Reset Methods</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_ShouldSerializeInputBindings\">\r\n    \r\n            <a id=\"System_Windows_UIElement_ShouldSerializeInputBindings_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ShouldSerializeInputBindings()</div>        \r\n          </div>\r\n    \r\n            <p>Returns whether serialization processes should serialize the contents of the <span class=\"xref\">stem.Windows.UIElement.InputBindings*</span> property on instances of this class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool ShouldSerializeInputBindings ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <span class=\"xref\">stem.Windows.UIElement.InputBindings*</span> property value should be serialized; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This will return <code>true</code> if <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_InputBindings_\" data-linktype=\"relative-path\">InputBindings</a> is locally set.  </p>\n<p> This <code>ShouldSerialize</code> method is provided because the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_InputBindings_\" data-linktype=\"relative-path\">InputBindings</a> property does not have a simple default value. This method indicates whether the property has changed from its default value. You typically invoke this method if you are either developing a designer or developing your own control incorporating a <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a>.  </p>\n<p> For more information, see <a href=\"../Topic/Defining%20Default%20Values%20with%20the%20ShouldSerialize%20and%20Reset%20Methods.md\" data-linktype=\"relative-path\">Defining Default Values with the ShouldSerialize and Reset Methods</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_TranslatePoint_System_Windows_Point_System_Windows_UIElement_\">\r\n    \r\n            <a id=\"System_Windows_UIElement_TranslatePoint_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TranslatePoint(Point,UIElement)</div>        \r\n          </div>\r\n    \r\n            <p>Translates a point relative to this element to coordinates that are relative to the specified element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Point TranslatePoint (System.Windows.Point point, System.Windows.UIElement relativeTo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>point</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.point\" data-linktype=\"relative-path\">Point</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The point value, as relative to this element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>relativeTo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The element to translate the given point into.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.point\" data-linktype=\"relative-path\">Point</a></div>\r\n                  </div>\r\n                  <p>A point value, now relative to the target element rather than this source element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Passing <code>null</code> for <code>relativeTo</code> is permitted, and indicates that coordinates should be relative to the root element in the logical tree that this element belongs to.  </p>\n<p> This method is used for translating hit test point values. Calling this method is mainly relevant if you are authoring a control and need to process input at a lower level. If you are using existing controls, you can generally assume that completed controls will report correctly translated hit test results.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_UpdateLayout\">\r\n    \r\n            <a id=\"System_Windows_UIElement_UpdateLayout_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UpdateLayout()</div>        \r\n          </div>\r\n    \r\n            <p>Ensures that all visual child elements of this element are properly updated for layout.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void UpdateLayout ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When you call this method, elements with <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsMeasureValid_\" data-linktype=\"relative-path\">IsMeasureValid</a><code>false</code> or <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsArrangeValid_\" data-linktype=\"relative-path\">IsArrangeValid</a><code>false</code> will call element-specific <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MeasureCore_\" data-linktype=\"relative-path\">MeasureCore</a> and <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ArrangeCore_\" data-linktype=\"relative-path\">ArrangeCore</a> methods, which forces layout update, and all computed sizes will be validated.  </p>\n<p> Calling this method has no effect if layout is unchanged, or if neither arrangement nor measurement state of a layout is invalid. However, if layout is invalid in either respect, the UpdateLayout call will redo the entire layout. Therefore, you should avoid calling UpdateLayout after each incremental and minor change in the element tree. The layout system will perform element layout in a deferred manner, using an algorithm that balances performance and currency, and with a weighting strategy to defer changes to roots until all child elements are valid. You should only call UpdateLayout if you absolutely need updated sizes and positions, and only after you are certain that all changes to properties that you control and that may affect layout are completed.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"events\">\r\n        <h2>Events\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_DragEnter\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DragEnter</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the input system reports an underlying drag event with this element as the drag target.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.DragEventHandler DragEnter;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event creates an alias for the &lt;xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName&gt; attached event for this class, so that DragEnter is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the DragEnter event are attached to the underlying &lt;xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_DragEnter\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_DragEnterEvent\" data-linktype=\"relative-path\">DragEnterEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.drageventhandler\" data-linktype=\"relative-path\">DragEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewDragEnter\" data-linktype=\"relative-path\">PreviewDragEnter</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnDragEnter_\" data-linktype=\"relative-path\">OnDragEnter</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_DragLeave\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DragLeave</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the input system reports an underlying drag event with this element as the drag origin.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.DragEventHandler DragLeave;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event creates an alias for the &lt;xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName&gt; attached event for this class so that DragLeave is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the DragLeave event are attached to the underlying &lt;xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_DragLeave\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_DragLeaveEvent\" data-linktype=\"relative-path\">DragLeaveEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.drageventhandler\" data-linktype=\"relative-path\">DragEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is &lt;xref:System.Windows.DragDrop.PreviewDragLeave&gt;.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnDragLeave_\" data-linktype=\"relative-path\">OnDragLeave</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_DragOver\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DragOver</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the input system reports an underlying drag event with this element as the potential drop target.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.DragEventHandler DragOver;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event occurs even if the drag originates in the element bounds. If the drag starts outside the bounds and then moves inside, this event is also raised, as well as <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_DragEnter\" data-linktype=\"relative-path\">DragEnter</a> and related preview events.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.DragDrop.DragOver?displayProperty=fullName&gt; attached event for this class so that DragOver is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the DragOver event are attached to the underlying &lt;xref:System.Windows.DragDrop.DragOver?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_DragOver\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_DragOverEvent\" data-linktype=\"relative-path\">DragOverEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.drageventhandler\" data-linktype=\"relative-path\">DragEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is &lt;xref:System.Windows.DragDrop.PreviewDragOver&gt;.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnDragOver_\" data-linktype=\"relative-path\">OnDragOver</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_Drop\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Drop</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the input system reports an underlying drop event with this element as the drop target.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.DragEventHandler Drop;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event creates an alias for the &lt;xref:System.Windows.DragDrop.Drop?displayProperty=fullName&gt; attached event for this class so that Drop is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the Drop event are attached to the underlying &lt;xref:System.Windows.DragDrop.Drop?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_Drop\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_DropEvent\" data-linktype=\"relative-path\">DropEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.drageventhandler\" data-linktype=\"relative-path\">DragEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewDrop\" data-linktype=\"relative-path\">PreviewDrop</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnDrop_\" data-linktype=\"relative-path\">OnDrop</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_FocusableChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FocusableChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the value of the <span class=\"xref\">stem.Windows.UIElement.Focusable*</span> property changes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.DependencyPropertyChangedEventHandler FocusableChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is a CLR event, not a routed event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_GiveFeedback\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GiveFeedback</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the input system reports an underlying drag-and-drop event that involves this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.GiveFeedbackEventHandler GiveFeedback;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The GiveFeedback event allows the source of a drag event to modify the appearance of the mouse pointer in order to give the user visual feedback during a drag-and-drop operation. The visual feedback reinforces that a drag-and-drop operation is in process.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName&gt; attached event for this class so that GiveFeedback is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the GiveFeedback event are attached to the underlying &lt;xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_GiveFeedback\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_GiveFeedbackEvent\" data-linktype=\"relative-path\">GiveFeedbackEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.givefeedbackeventhandler\" data-linktype=\"relative-path\">GiveFeedbackEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewGiveFeedback\" data-linktype=\"relative-path\">PreviewGiveFeedback</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnGiveFeedback_\" data-linktype=\"relative-path\">OnGiveFeedback</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_GotFocus\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GotFocus</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when this element gets logical focus.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.RoutedEventHandler GotFocus;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Logical focus differs from keyboard focus if focus is deliberately forced by using a method call but the previous keyboard focus exists in a different scope. In this scenario, keyboard focus remains where it is and the element where a <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_Focus_\" data-linktype=\"relative-path\">Focus</a> method is called still gets logical focus.  </p>\n<p> A more precise interpretation of this event is that it is raised when the value of the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsFocused_\" data-linktype=\"relative-path\">IsFocused</a> property of an element in the route is changed from <code>false</code> to <code>true</code>.  </p>\n<p> Because this event uses bubbling routing, the element that receives focus might be a child element instead of the element where the event handler is actually attached. Check the <a class=\"xref\" href=\"system.windows.routedeventargs#System_Windows_RoutedEventArgs_Source_\" data-linktype=\"relative-path\">Source</a> in the event data to determine the actual element that gained focus.  </p>\n<p><a name=\"routedEventInfo_GotFocus\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_GotFocusEvent\" data-linktype=\"relative-path\">GotFocusEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.routedeventhandler\" data-linktype=\"relative-path\">RoutedEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>There is no corresponding tunneling event.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnGotFocus_\" data-linktype=\"relative-path\">OnGotFocus</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_GotKeyboardFocus\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GotKeyboardFocus</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the keyboard is focused on this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsKeyboardFocusedChanged\" data-linktype=\"relative-path\">IsKeyboardFocusedChanged</a> is a similar event that tracks status changes in a property that maintains the focus state for an element; the GotKeyboardFocus event is raised in many of the same circumstances.  </p>\n<p> Because this event uses bubbling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached. Check the <a class=\"xref\" href=\"system.windows.routedeventargs#System_Windows_RoutedEventArgs_Source_\" data-linktype=\"relative-path\">Source</a> in the event data to determine the actual element that has focus.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName&gt; attached event for this class so that GotKeyboardFocus is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the GotKeyboardFocus event are attached to the underlying &lt;xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_GotKeyboardFocus\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_GotKeyboardFocusEvent\" data-linktype=\"relative-path\">GotKeyboardFocusEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.keyboardfocuschangedeventhandler\" data-linktype=\"relative-path\">KeyboardFocusChangedEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewGotKeyboardFocus\" data-linktype=\"relative-path\">PreviewGotKeyboardFocus</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnGotKeyboardFocus_\" data-linktype=\"relative-path\">OnGotKeyboardFocus</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_GotMouseCapture\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GotMouseCapture</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when this element captures the mouse.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.MouseEventHandler GotMouseCapture;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When an element captures the mouse, it receives mouse input even if the mouse pointer is outside its bounds. The mouse is typically captured only during drag-and-drop operations and remains captured until the drop action of the drag-and-drop operation occurs.  </p>\n<p> Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached. Check the <a class=\"xref\" href=\"system.windows.routedeventargs#System_Windows_RoutedEventArgs_Source_\" data-linktype=\"relative-path\">Source</a> in the event data to determine the actual element that has mouse capture.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName&gt; attached event for  this class so that GotMouseCapture is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the GotMouseCapture event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_GotMouseCapture\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_GotMouseCaptureEvent\" data-linktype=\"relative-path\">GotMouseCaptureEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.mouseeventhandler\" data-linktype=\"relative-path\">MouseEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>There is no defined corresponding tunneling event.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnGotMouseCapture_\" data-linktype=\"relative-path\">OnGotMouseCapture</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_GotStylusCapture\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GotStylusCapture</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when this element captures the stylus.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.StylusEventHandler GotStylusCapture;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds. The stylus is typically captured only during drag-and-drop operations and retains capture until the drop action of the drag-and-drop operation occurs.  </p>\n<p> Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached. Check the <a class=\"xref\" href=\"system.windows.routedeventargs#System_Windows_RoutedEventArgs_Source_\" data-linktype=\"relative-path\">Source</a> in the event data to determine the actual element that has capture.  </p>\n<p> This event creates an alias for the attached event for this class so that GotStylusCapture is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the GotStylusCapture event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_GotStylusCapture\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_GotStylusCaptureEvent\" data-linktype=\"relative-path\">GotStylusCaptureEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.styluseventhandler\" data-linktype=\"relative-path\">StylusEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>There is no defined corresponding tunneling event.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnGotStylusCapture_\" data-linktype=\"relative-path\">OnGotStylusCapture</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_GotTouchCapture\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GotTouchCapture</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when a touch is captured to this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; GotTouchCapture;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a name=\"routedEventInfo_GotTouchCapture\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_GotTouchCaptureEvent\" data-linktype=\"relative-path\">GotTouchCaptureEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.eventhandler-1\" data-linktype=\"relative-path\">EventHandler&lt;TEventArgs&gt;</a> of type <a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a>.</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnGotTouchCapture_\" data-linktype=\"relative-path\">OnGotTouchCapture</a> to implement class handling for this event in derived classes.</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_IsEnabledChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsEnabledChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the value of the <span class=\"xref\">stem.Windows.UIElement.IsEnabled*</span> property on this element changes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is a CLR event, not a routed event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_IsHitTestVisibleChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsHitTestVisibleChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the value of the <span class=\"xref\">stem.Windows.UIElement.IsHitTestVisible*</span> dependency property changes on this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.DependencyPropertyChangedEventHandler IsHitTestVisibleChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is a CLR event, not a routed event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_IsKeyboardFocusedChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsKeyboardFocusedChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the value of the <span class=\"xref\">stem.Windows.UIElement.IsKeyboardFocused*</span> property changes on this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is a CLR event, not a routed event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_IsKeyboardFocusWithinChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsKeyboardFocusWithinChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the value of the IsKeyboardFocusWithinChanged property changes on this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is a CLR event, not a routed event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_IsMouseCapturedChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsMouseCapturedChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the value of the <span class=\"xref\">stem.Windows.UIElement.IsMouseCaptured*</span> property changes on this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is a CLR event, not a routed event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_IsMouseCaptureWithinChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsMouseCaptureWithinChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the value of the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsMouseCaptureWithinProperty\" data-linktype=\"relative-path\">IsMouseCaptureWithinProperty</a> changes on this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is a CLR event, not a routed event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_IsMouseDirectlyOverChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsMouseDirectlyOverChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the value of the <span class=\"xref\">stem.Windows.UIElement.IsMouseDirectlyOver*</span> property changes on this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is a CLR event, not a routed event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_IsStylusCapturedChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsStylusCapturedChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the value of the <span class=\"xref\">stem.Windows.UIElement.IsStylusCaptured*</span> property changes on this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is a CLR event, not a routed event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_IsStylusCaptureWithinChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsStylusCaptureWithinChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the value of the <span class=\"xref\">stem.Windows.UIElement.IsStylusCaptureWithin*</span> property changes on this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This is a CLR event, not a routed event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_IsStylusDirectlyOverChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsStylusDirectlyOverChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the value of the <span class=\"xref\">stem.Windows.UIElement.IsStylusDirectlyOver*</span> property changes on this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is a CLR event, not a routed event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_IsVisibleChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsVisibleChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the value of the <span class=\"xref\">stem.Windows.UIElement.IsVisible*</span> property changes on this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.DependencyPropertyChangedEventHandler IsVisibleChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event is not raised if the element is not being rendered by the layout system, for reasons other than the value of the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsVisible_\" data-linktype=\"relative-path\">IsVisible</a> property. For example, the element might not have an associated visual.  </p>\n<p> This member is a CLR event, not a routed event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_KeyDown\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">KeyDown</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when a key is pressed while focus is on this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.KeyEventHandler KeyDown;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Key handling interacts with other platform features such as commanding and text composition. The KeyDown event is a lower-level text input event that might not behave as expected on certain controls. This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName&gt; attached event for this class so that KeyDown is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the KeyDown event are attached to the underlying &lt;xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_KeyDown\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_KeyDownEvent\" data-linktype=\"relative-path\">KeyDownEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.keyeventhandler\" data-linktype=\"relative-path\">KeyEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewKeyDown\" data-linktype=\"relative-path\">PreviewKeyDown</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnKeyDown_\" data-linktype=\"relative-path\">OnKeyDown</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_KeyUp\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">KeyUp</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when a key is released while focus is on this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.KeyEventHandler KeyUp;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event creates an alias for the &lt;xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName&gt; attached event for this class so that  KeyUp is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the KeyUp event are attached to the underlying &lt;xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_KeyUp\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_KeyUpEvent\" data-linktype=\"relative-path\">KeyUpEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.keyeventhandler\" data-linktype=\"relative-path\">KeyEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewKeyUp\" data-linktype=\"relative-path\">PreviewKeyUp</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnKeyUp_\" data-linktype=\"relative-path\">OnKeyUp</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_LayoutUpdated\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LayoutUpdated</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the layout of the various visual elements associated with the current <a class=\"xref\" href=\"system.windows.threading.dispatcher\" data-linktype=\"relative-path\">Dispatcher</a> changes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler LayoutUpdated;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A layout update can occur as a result of a property change, a window resize, or an explicit user request.  </p>\n<p> This member is a CLR event, not a routed event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_LostFocus\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LostFocus</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when this element loses logical focus.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.RoutedEventHandler LostFocus;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Logical focus differs from keyboard focus if focus is deliberately forced away by using a method call but the previous keyboard focus exists in a different scope. In this scenario, keyboard focus remains where it is, and the element where a <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_Focus_\" data-linktype=\"relative-path\">Focus</a> method is called still gets logical focus.  </p>\n<p> A more precise interpretation of this event is that it is raised when the value of the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsFocused_\" data-linktype=\"relative-path\">IsFocused</a> property of an element in the route changes from <code>true</code> to <code>false</code>.  </p>\n<p> Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached. Check the <a class=\"xref\" href=\"system.windows.routedeventargs#System_Windows_RoutedEventArgs_Source_\" data-linktype=\"relative-path\">Source</a> in the event data to determine the actual element that gained focus.  </p>\n<p><a name=\"routedEventInfo_LostFocus\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_LostFocusEvent\" data-linktype=\"relative-path\">LostFocusEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.routedeventhandler\" data-linktype=\"relative-path\">RoutedEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>There is no corresponding tunneling event.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnLostFocus_\" data-linktype=\"relative-path\">OnLostFocus</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_LostKeyboardFocus\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LostKeyboardFocus</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the keyboard is no longer focused on this element,.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Because this event uses bubbling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached. Check the <a class=\"xref\" href=\"system.windows.routedeventargs#System_Windows_RoutedEventArgs_Source_\" data-linktype=\"relative-path\">Source</a> in the event data to determine the actual element that lost focus.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName&gt; attached event for this class, so that LostKeyboardFocus is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the LostKeyboardFocus event are attached to the underlying &lt;xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_LostKeyboardFocus\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_LostKeyboardFocusEvent\" data-linktype=\"relative-path\">LostKeyboardFocusEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.keyboardfocuschangedeventhandler\" data-linktype=\"relative-path\">KeyboardFocusChangedEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewLostKeyboardFocus\" data-linktype=\"relative-path\">PreviewLostKeyboardFocus</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnLostKeyboardFocus_\" data-linktype=\"relative-path\">OnLostKeyboardFocus</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_LostMouseCapture\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LostMouseCapture</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when this element loses mouse capture.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.MouseEventHandler LostMouseCapture;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When an element captures the mouse, it receives mouse input even if the pointer is outside its bounds. The mouse is typically captured only during drag-and-drop operations.  </p>\n<p> Because this event uses bubbling routing, the element that loses capture might be a child element instead of the element where the event handler is actually attached. Check the <a class=\"xref\" href=\"system.windows.routedeventargs#System_Windows_RoutedEventArgs_Source_\" data-linktype=\"relative-path\">Source</a> in the event data to determine the actual element that lost capture.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName&gt; attached event for this class, so that LostMouseCapture is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the LostMouseCapture event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_LostMouseCapture\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_LostMouseCaptureEvent\" data-linktype=\"relative-path\">LostMouseCaptureEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.mouseeventhandler\" data-linktype=\"relative-path\">MouseEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>There is no defined corresponding tunneling event.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnLostMouseCapture_\" data-linktype=\"relative-path\">OnLostMouseCapture</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_LostStylusCapture\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LostStylusCapture</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when this element loses stylus capture.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.StylusEventHandler LostStylusCapture;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds. The stylus is typically captured only during drag-and-drop operations.  </p>\n<p> Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached. Check the <a class=\"xref\" href=\"system.windows.routedeventargs#System_Windows_RoutedEventArgs_Source_\" data-linktype=\"relative-path\">Source</a> in the event data to determine the actual element that lost focus.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName&gt; attached event for this class, so that LostStylusCapture is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the LostStylusCapture event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_LostStylusCapture\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_LostStylusCaptureEvent\" data-linktype=\"relative-path\">LostStylusCaptureEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.styluseventhandler\" data-linktype=\"relative-path\">StylusEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>There is no defined corresponding tunneling event.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnLostStylusCapture_\" data-linktype=\"relative-path\">OnLostStylusCapture</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_LostTouchCapture\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LostTouchCapture</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when this element loses a touch capture.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; LostTouchCapture;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a name=\"routedEventInfo_LostTouchCapture\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_LostTouchCaptureEvent\" data-linktype=\"relative-path\">LostTouchCaptureEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.eventhandler-1\" data-linktype=\"relative-path\">EventHandler&lt;TEventArgs&gt;</a> of type <a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a>.</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnLostTouchCapture_\" data-linktype=\"relative-path\">OnLostTouchCapture</a> to implement class handling for this event in derived classes.</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_ManipulationBoundaryFeedback\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ManipulationBoundaryFeedback</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the manipulation encounters a boundary.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler&lt;System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt; ManipulationBoundaryFeedback;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a name=\"routedEventInfo_ManipulationBoundaryFeedback\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationBoundaryFeedbackEvent\" data-linktype=\"relative-path\">ManipulationBoundaryFeedbackEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.eventhandler-1\" data-linktype=\"relative-path\">EventHandler&lt;TEventArgs&gt;</a> of type <a class=\"xref\" href=\"system.windows.input.manipulationboundaryfeedbackeventargs\" data-linktype=\"relative-path\">ManipulationBoundaryFeedbackEventArgs</a>.</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_ManipulationCompleted\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ManipulationCompleted</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when a manipulation and inertia on the <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> object is complete.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler&lt;System.Windows.Input.ManipulationCompletedEventArgs&gt; ManipulationCompleted;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can use this event to get information about the manipulation when it completes.  For example, you can use the <a class=\"xref\" href=\"system.windows.input.manipulationcompletedeventargs#System_Windows_Input_ManipulationCompletedEventArgs_TotalManipulation_\" data-linktype=\"relative-path\">TotalManipulation</a> property to determine the total amount the position of the manipulation changed.  </p>\n<p> For more information about manipulations, see the <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  For an example of an application that responds to manipulations, see <a href=\"../Topic/Walkthrough:%20Creating%20Your%20First%20Touch%20Application.md\" data-linktype=\"relative-path\">Walkthrough: Creating Your First Touch Application</a>.  </p>\n<p><a name=\"routedEventInfo_ManipulationCompleted\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationCompletedEvent\" data-linktype=\"relative-path\">ManipulationCompletedEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.eventhandler-1\" data-linktype=\"relative-path\">EventHandler&lt;TEventArgs&gt;</a> of type <a class=\"xref\" href=\"system.windows.input.manipulationcompletedeventargs\" data-linktype=\"relative-path\">ManipulationCompletedEventArgs</a>.</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_ManipulationDelta\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ManipulationDelta</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the input device changes position during a manipulation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler&lt;System.Windows.Input.ManipulationDeltaEventArgs&gt; ManipulationDelta;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ManipulationDelta event occurs multiple times when the user drags fingers over the screen during a manipulation and again when inertia occurs.  You can use the <a class=\"xref\" href=\"system.windows.input.manipulationdeltaeventargs#System_Windows_Input_ManipulationDeltaEventArgs_IsInertial_\" data-linktype=\"relative-path\">IsInertial</a> property to check whether the event is occurring during inertia.  </p>\n<p> The element on with ManipulationDelta event occurs is not affected in any way when the event occurs.  You must provide the logic to the element that is to be manipulated.  The <a class=\"xref\" href=\"system.windows.input.manipulationdeltaeventargs#System_Windows_Input_ManipulationDeltaEventArgs_CumulativeManipulation_\" data-linktype=\"relative-path\">CumulativeManipulation</a> and <a class=\"xref\" href=\"system.windows.input.manipulationdeltaeventargs#System_Windows_Input_ManipulationDeltaEventArgs_DeltaManipulation_\" data-linktype=\"relative-path\">DeltaManipulation</a> properties, which are of type <a class=\"xref\" href=\"system.windows.input.manipulationdelta\" data-linktype=\"relative-path\">ManipulationDelta</a>, contain data about how the position of the manipulations change and interpreted as moving, resizing, or rotating an object.  You apply that information to the element that is to be manipulated.  </p>\n<p> For more information about manipulations, see the <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  For an example of an application that responds to manipulations, see <a href=\"../Topic/Walkthrough:%20Creating%20Your%20First%20Touch%20Application.md\" data-linktype=\"relative-path\">Walkthrough: Creating Your First Touch Application</a>.  </p>\n<p><a name=\"routedEventInfo_ManipulationDelta\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationDeltaEvent\" data-linktype=\"relative-path\">ManipulationDeltaEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.eventhandler-1\" data-linktype=\"relative-path\">EventHandler&lt;TEventArgs&gt;</a> of type <a class=\"xref\" href=\"system.windows.input.manipulationdeltaeventargs\" data-linktype=\"relative-path\">ManipulationDeltaEventArgs</a>.</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows an event handler for the ManipulationDelta event. The example uses the <a class=\"xref\" href=\"system.windows.input.manipulationdeltaeventargs#System_Windows_Input_ManipulationDeltaEventArgs_DeltaManipulation_\" data-linktype=\"relative-path\">DeltaManipulation</a> property to move, resize, and rotate a <a class=\"xref\" href=\"system.windows.shapes.rectangle\" data-linktype=\"relative-path\">Rectangle</a>.  The example also checks whether the ManipulationDelta event occurred during inertia and whether the rectangle is touching the edge of a window.  If those cases are true, the application stops the manipulation to prevent the rectangle from leaving the visible area of the application. This example is part of a larger example in <a href=\"../Topic/Walkthrough:%20Creating%20Your%20First%20Touch%20Application.md\" data-linktype=\"relative-path\">Walkthrough: Creating Your First Touch Application</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"BasicManipulation#ManipulationDelta\">void Window_ManipulationDelta(object sender, ManipulationDeltaEventArgs e)\n{\n    \n    // Get the Rectangle and its RenderTransform matrix.\n    Rectangle rectToMove = e.OriginalSource as Rectangle;\n    Matrix rectsMatrix = ((MatrixTransform)rectToMove.RenderTransform).Matrix;\n\n    // Rotate the Rectangle.\n    rectsMatrix.RotateAt(e.DeltaManipulation.Rotation, \n                         e.ManipulationOrigin.X, \n                         e.ManipulationOrigin.Y);\n\n    // Resize the Rectangle.  Keep it square \n    // so use only the X value of Scale.\n    rectsMatrix.ScaleAt(e.DeltaManipulation.Scale.X, \n                        e.DeltaManipulation.Scale.X, \n                        e.ManipulationOrigin.X,\n                        e.ManipulationOrigin.Y);\n\n    // Move the Rectangle.\n    rectsMatrix.Translate(e.DeltaManipulation.Translation.X,\n                          e.DeltaManipulation.Translation.Y);\n\n    // Apply the changes to the Rectangle.\n    rectToMove.RenderTransform = new MatrixTransform(rectsMatrix);\n\n    Rect containingRect =\n        new Rect(((FrameworkElement)e.ManipulationContainer).RenderSize);\n\n    Rect shapeBounds =\n        rectToMove.RenderTransform.TransformBounds(\n            new Rect(rectToMove.RenderSize));\n\n    // Check if the rectangle is completely in the window.\n    // If it is not and intertia is occuring, stop the manipulation.\n    if (e.IsInertial &amp;&amp; !containingRect.Contains(shapeBounds))\n    {\n        e.Complete();\n    }\n\n    \n    e.Handled = true;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"BasicManipulation#ManipulationDelta\">Private Sub Window_ManipulationDelta(ByVal sender As Object, ByVal e As ManipulationDeltaEventArgs)\n\n    &#39; Get the Rectangle and its RenderTransform matrix.\n    Dim rectToMove As Rectangle = e.OriginalSource\n    Dim rectTransform As MatrixTransform = rectToMove.RenderTransform\n    Dim rectsMatrix As Matrix = rectTransform.Matrix\n\n\n    &#39; Rotate the shape\n    rectsMatrix.RotateAt(e.DeltaManipulation.Rotation,\n                         e.ManipulationOrigin.X,\n                         e.ManipulationOrigin.Y)\n\n    &#39; Resize the Rectangle. Keep it square \n    &#39; so use only the X value of Scale.\n    rectsMatrix.ScaleAt(e.DeltaManipulation.Scale.X,\n                        e.DeltaManipulation.Scale.X,\n                        e.ManipulationOrigin.X,\n                        e.ManipulationOrigin.Y)\n\n    &#39;move the center\n    rectsMatrix.Translate(e.DeltaManipulation.Translation.X,\n                          e.DeltaManipulation.Translation.Y)\n\n    &#39; Apply the changes to the Rectangle.\n    rectTransform = New MatrixTransform(rectsMatrix)\n    rectToMove.RenderTransform = rectTransform\n\n    Dim container As FrameworkElement = e.ManipulationContainer\n    Dim containingRect As New Rect(container.RenderSize)\n\n    Dim shapeBounds As Rect = rectTransform.TransformBounds(\n                                New Rect(rectToMove.RenderSize))\n\n    &#39; Check if the rectangle is completely in the window.\n    &#39; If it is not and intertia is occuring, stop the manipulation.\n    If e.IsInertial AndAlso Not containingRect.Contains(shapeBounds) Then\n        e.Complete()\n    End If\n\n    e.Handled = True\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_ManipulationInertiaStarting\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ManipulationInertiaStarting</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the input device loses contact with the <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> object during a manipulation and inertia begins.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler&lt;System.Windows.Input.ManipulationInertiaStartingEventArgs&gt; ManipulationInertiaStarting;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ManipulationInertiaStarting event occurs when the user lifts all of the fingers from the screen during a manipulation. For example, if a user &quot;throws&quot; a <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> across a surface, the user will touch the <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> to begin the action, move the finger across the screen for a short distance, and then release the <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a>. When the user releases the element, inertia begins and the ManipulationInertiaStarting event occurs.  The <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> continues to receive <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationDelta\" data-linktype=\"relative-path\">ManipulationDelta</a> events to indicate that inertia is occurring on the element.  </p>\n<p> You can use this event to specify the behavior of the inertia.  For example, you can set the initial velocity that is used when inertia begins.  You can also specify the amount of inertia by setting the desired deceleration or by setting the desired placement.  You can set these values for each type of manipulation (translation, expansion, or rotation) independently.  For more information, see <a class=\"xref\" href=\"system.windows.input.manipulationinertiastartingeventargs\" data-linktype=\"relative-path\">ManipulationInertiaStartingEventArgs</a>.  </p>\n<p> For more information about manipulations, see the <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  For an example of an application that responds to manipulations, see <a href=\"../Topic/Walkthrough:%20Creating%20Your%20First%20Touch%20Application.md\" data-linktype=\"relative-path\">Walkthrough: Creating Your First Touch Application</a>.  </p>\n<p><a name=\"routedEventInfo_ManipulationInertiaStarting\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationInertiaStartingEvent\" data-linktype=\"relative-path\">ManipulationInertiaStartingEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.eventhandler-1\" data-linktype=\"relative-path\">EventHandler&lt;TEventArgs&gt;</a> of type <a class=\"xref\" href=\"system.windows.input.manipulationinertiastartingeventargs\" data-linktype=\"relative-path\">ManipulationInertiaStartingEventArgs</a>.</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows the ManipulationInertiaStarting event handler and sets the desired deceleration for translation, expansion, and rotation that is used during inertia. This example is part of a larger example in <a href=\"../Topic/Walkthrough:%20Creating%20Your%20First%20Touch%20Application.md\" data-linktype=\"relative-path\">Walkthrough: Creating Your First Touch Application</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"BasicManipulation#ManipulationInertiaStarting\">void Window_InertiaStarting(object sender, ManipulationInertiaStartingEventArgs e)\n{\n\n    // Decrease the velocity of the Rectangle&#39;s movement by \n    // 10 inches per second every second.\n    // (10 inches * 96 pixels per inch / 1000ms^2)\n    e.TranslationBehavior.DesiredDeceleration = 10.0 * 96.0 / (1000.0 * 1000.0);\n\n    // Decrease the velocity of the Rectangle&#39;s resizing by \n    // 0.1 inches per second every second.\n    // (0.1 inches * 96 pixels per inch / (1000ms^2)\n    e.ExpansionBehavior.DesiredDeceleration = 0.1 * 96 / (1000.0 * 1000.0);\n\n    // Decrease the velocity of the Rectangle&#39;s rotation rate by \n    // 2 rotations per second every second.\n    // (2 * 360 degrees / (1000ms^2)\n    e.RotationBehavior.DesiredDeceleration = 720 / (1000.0 * 1000.0);\n\n    e.Handled = true;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"BasicManipulation#ManipulationInertiaStarting\">Private Sub Window_InertiaStarting(ByVal sender As Object,\n                                   ByVal e As ManipulationInertiaStartingEventArgs)\n\n    &#39; Decrease the velocity of the Rectangle&#39;s movement by \n    &#39; 10 inches per second every second.\n    &#39; (10 inches * 96 pixels per inch / 1000ms^2)\n    e.TranslationBehavior.DesiredDeceleration = 10.0 * 96.0 / (1000.0 * 1000.0)\n\n    &#39; Decrease the velocity of the Rectangle&#39;s resizing by \n    &#39; 0.1 inches per second every second.\n    &#39; (0.1 inches * 96 pixels per inch / (1000ms^2)\n    e.ExpansionBehavior.DesiredDeceleration = 0.1 * 96 / (1000.0 * 1000.0)\n\n    &#39; Decrease the velocity of the Rectangle&#39;s rotation rate by \n    &#39; 2 rotations per second every second.\n    &#39; (2 * 360 degrees / (1000ms^2)\n    e.RotationBehavior.DesiredDeceleration = 720 / (1000.0 * 1000.0)\n\n    e.Handled = True\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_ManipulationStarted\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ManipulationStarted</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when an input device begins a manipulation on the <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler&lt;System.Windows.Input.ManipulationStartedEventArgs&gt; ManipulationStarted;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ManipulationStarted event occurs after the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationStarting\" data-linktype=\"relative-path\">ManipulationStarting</a> event.  You can do the following with the <a class=\"xref\" href=\"system.windows.input.manipulationstartedeventargs\" data-linktype=\"relative-path\">ManipulationStartedEventArgs</a>:  </p>\n<ul>\n<li><p>Get the element that the manipulation&#39;s position is relative to by using the <a class=\"xref\" href=\"system.windows.input.manipulationstartedeventargs#System_Windows_Input_ManipulationStartedEventArgs_ManipulationContainer_\" data-linktype=\"relative-path\">ManipulationContainer</a> property.  </p>\n</li>\n<li><p>Get the origin of the manipulation by using the <a class=\"xref\" href=\"system.windows.input.manipulationstartedeventargs#System_Windows_Input_ManipulationStartedEventArgs_ManipulationOrigin_\" data-linktype=\"relative-path\">ManipulationOrigin</a> property.  </p>\n</li>\n<li><p>Cancel the manipulation by calling the <a class=\"xref\" href=\"system.windows.input.manipulationstartedeventargs#System_Windows_Input_ManipulationStartedEventArgs_Complete_\" data-linktype=\"relative-path\">Complete</a> method.  </p>\n<p>For more information about manipulations, see the <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  For an example of an application that responds to manipulations, see <a href=\"../Topic/Walkthrough:%20Creating%20Your%20First%20Touch%20Application.md\" data-linktype=\"relative-path\">Walkthrough: Creating Your First Touch Application</a>.  </p>\n</li>\n</ul>\n<p><a name=\"routedEventInfo_ManipulationStarted\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationStartedEvent\" data-linktype=\"relative-path\">ManipulationStartedEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.eventhandler-1\" data-linktype=\"relative-path\">EventHandler&lt;TEventArgs&gt;</a> of type <a class=\"xref\" href=\"system.windows.input.manipulationstartedeventargs\" data-linktype=\"relative-path\">ManipulationStartedEventArgs</a>.</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_ManipulationStarting\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ManipulationStarting</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the manipulation processor is first created.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler&lt;System.Windows.Input.ManipulationStartingEventArgs&gt; ManipulationStarting;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ManipulationStarting event occurs on an element that has the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsManipulationEnabled_\" data-linktype=\"relative-path\">IsManipulationEnabled</a> property set to <code>true</code> when the user puts a finger on it. By default, subsequent manipulation events report the position of the manipulation relative to the element that has <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsManipulationEnabled_\" data-linktype=\"relative-path\">IsManipulationEnabled</a> set to <code>true</code>.  You can specify that the position should be relative to another element by setting the <a class=\"xref\" href=\"system.windows.input.manipulationstartingeventargs#System_Windows_Input_ManipulationStartingEventArgs_ManipulationContainer_\" data-linktype=\"relative-path\">ManipulationContainer</a> property. For example, you can make the manipulation relative to the parent of the element.  </p>\n<p> You can also do the following in an event handler for ManipulationStarting:  </p>\n<ul>\n<li><p>Specify whether the user needs more than one finger to perform the manipulations by setting the <a class=\"xref\" href=\"system.windows.input.manipulationstartingeventargs#System_Windows_Input_ManipulationStartingEventArgs_IsSingleTouchEnabled_\" data-linktype=\"relative-path\">IsSingleTouchEnabled</a> property.  </p>\n</li>\n<li><p>Specify which types of manipulation are enabled by setting the <a class=\"xref\" href=\"system.windows.input.manipulationstartingeventargs#System_Windows_Input_ManipulationStartingEventArgs_Mode_\" data-linktype=\"relative-path\">Mode</a> property to a <a class=\"xref\" href=\"system.windows.input.manipulationmodes\" data-linktype=\"relative-path\">ManipulationModes</a> enumeration.  </p>\n</li>\n<li><p>Specify the center of a single-finger rotation by setting the <a class=\"xref\" href=\"system.windows.input.manipulationstartingeventargs#System_Windows_Input_ManipulationStartingEventArgs_Pivot_\" data-linktype=\"relative-path\">Pivot</a> property.  </p>\n</li>\n<li><p>Cancel the manipulation by calling the <a class=\"xref\" href=\"system.windows.input.manipulationstartingeventargs#System_Windows_Input_ManipulationStartingEventArgs_Cancel_\" data-linktype=\"relative-path\">Cancel</a> method.  </p>\n<p>For more information about manipulations, see the <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  For an example of an application that responds to manipulations, see <a href=\"../Topic/Walkthrough:%20Creating%20Your%20First%20Touch%20Application.md\" data-linktype=\"relative-path\">Walkthrough: Creating Your First Touch Application</a>.  </p>\n</li>\n</ul>\n<p><a name=\"routedEventInfo_ManipulationStarting\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_ManipulationStartingEvent\" data-linktype=\"relative-path\">ManipulationStartingEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.eventhandler-1\" data-linktype=\"relative-path\">EventHandler&lt;TEventArgs&gt;</a> of type <a class=\"xref\" href=\"system.windows.input.manipulationstartingeventargs\" data-linktype=\"relative-path\">ManipulationStartingEventArgs</a>.</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows the event handler for the ManipulationStarting event and sets the <a class=\"xref\" href=\"system.windows.input.manipulationstartingeventargs#System_Windows_Input_ManipulationStartingEventArgs_ManipulationContainer_\" data-linktype=\"relative-path\">ManipulationContainer</a> to the parent element that receives the manipulation events so that the coordinates of the manipulation are relative to the parent element.  This example is part of a larger example in <a href=\"../Topic/Walkthrough:%20Creating%20Your%20First%20Touch%20Application.md\" data-linktype=\"relative-path\">Walkthrough: Creating Your First Touch Application</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"BasicManipulation#ManipulationStarting\">void Window_ManipulationStarting(object sender, ManipulationStartingEventArgs e)\n{\n    e.ManipulationContainer = this;\n    e.Handled = true;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"BasicManipulation#ManipulationStarting\">Private Sub Window_ManipulationStarting(ByVal sender As Object, ByVal e As ManipulationStartingEventArgs)\n    e.ManipulationContainer = Me\n    e.Handled = True\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_MouseDown\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MouseDown</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when any mouse button is pressed while the pointer is over this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.MouseButtonEventHandler MouseDown;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; attached event for this class, so that MouseDown is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the MouseDown event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> The MouseDown event is often raised together with either <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseLeftButtonDown\" data-linktype=\"relative-path\">MouseLeftButtonDown</a> or <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseRightButtonDown\" data-linktype=\"relative-path\">MouseRightButtonDown</a>, which correspond to a press of one of the two standard mouse buttons. <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseLeftButtonDown\" data-linktype=\"relative-path\">MouseLeftButtonDown</a> and <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseRightButtonDown\" data-linktype=\"relative-path\">MouseRightButtonDown</a> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; event reaches this element along the event route. See Remarks for <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseLeftButtonDown\" data-linktype=\"relative-path\">MouseLeftButtonDown</a> or <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseRightButtonDown\" data-linktype=\"relative-path\">MouseRightButtonDown</a>.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Some controls might have inherent class handling for mouse button events. The left mouse button down event is the most likely event to have class handling in a control. The class handling often marks the underlying <a class=\"xref\" href=\"system.windows.input.mouse\" data-linktype=\"relative-path\">Mouse</a> class event as handled. Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised. Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.  </p>\n</div>\n<p> You can resolve the issue that is outlined in the preceding Important and still receive MouseDown events for left mouse button down events on a derived class that has class handling by using either of these solutions:  </p>\n<ul>\n<li><p>Attach handlers for the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseDown\" data-linktype=\"relative-path\">PreviewMouseDown</a> event, which is not marked as handled by the controls. Notice that because this is a preview event, the route starts at the root and tunnels down to the control.  </p>\n</li>\n<li><p>Register a handler on the control procedurally by calling <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_AddHandler_\" data-linktype=\"relative-path\">AddHandler</a> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.  </p>\n</li>\n</ul>\n<p><a name=\"routedEventInfo_MouseDown\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseDownEvent\" data-linktype=\"relative-path\">MouseDownEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.mousebuttoneventhandler\" data-linktype=\"relative-path\">MouseButtonEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseDown\" data-linktype=\"relative-path\">PreviewMouseDown</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnMouseDown_\" data-linktype=\"relative-path\">OnMouseDown</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_MouseEnter\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MouseEnter</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the mouse pointer enters the bounds of this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.MouseEventHandler MouseEnter;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>MouseEnter is a  that uses the direct event handling routing strategy. Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised. However, they do enable other aspects of routed event behavior, such as event triggers in styles.  </p>\n<p> Although MouseEnter tracks when the mouse pointer enters the bounds of an element, this event more literally reports that the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsMouseOver_\" data-linktype=\"relative-path\">IsMouseOver</a> property value has changed from <code>false</code> to <code>true</code> on this element.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName&gt; attached event for this class, so that MouseEnter is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the MouseEnter event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> A <a class=\"xref\" href=\"system.windows.controls.button\" data-linktype=\"relative-path\">Button</a> (or any <a class=\"xref\" href=\"system.windows.controls.primitives.buttonbase\" data-linktype=\"relative-path\">ButtonBase</a> derived class) has native handling for a <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_KeyDown\" data-linktype=\"relative-path\">KeyDown</a> event when the button has focus, and the pressed key is the space bar. The native handling raises the <a class=\"xref\" href=\"system.windows.controls.primitives.buttonbase#System_Windows_Controls_Primitives_ButtonBase_Click\" data-linktype=\"relative-path\">Click</a> event with the button as the source, and also captures the mouse, even though the mouse pointer does not appear to move. As a result of the mouse capture, a MouseEnter event is also raised with the button as the source. In general, if an element captures the mouse, then MouseEnter is raised, as well as <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_GotMouseCapture\" data-linktype=\"relative-path\">GotMouseCapture</a> and possibly other control-specific events.  </p>\n<p><a name=\"routedEventInfo_MouseEnter\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseEnterEvent\" data-linktype=\"relative-path\">MouseEnterEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Direct</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.mouseeventhandler\" data-linktype=\"relative-path\">MouseEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnMouseEnter_\" data-linktype=\"relative-path\">OnMouseEnter</a> to implement class handling for this event in derived classes.</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_MouseLeave\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MouseLeave</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the mouse pointer leaves the bounds of this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.MouseEventHandler MouseLeave;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>MouseLeave is a  that uses the direct event handling routing strategy. Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised. However, they do enable other aspects of routed event behavior, such as event triggers in styles.  </p>\n<p> Although MouseLeave tracks when the mouse leaves an element, this event more literally reports that the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsMouseOver_\" data-linktype=\"relative-path\">IsMouseOver</a> property value has changed from <code>true</code> to <code>false</code> on this element.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName&gt; attached event for this class, so that MouseLeave is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the MouseLeave event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_MouseLeave\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseLeaveEvent\" data-linktype=\"relative-path\">MouseLeaveEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Direct</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.mouseeventhandler\" data-linktype=\"relative-path\">MouseEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnMouseLeave_\" data-linktype=\"relative-path\">OnMouseLeave</a> to implement class handling for this event in derived classes.</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_MouseLeftButtonDown\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MouseLeftButtonDown</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the left mouse button is pressed while the mouse pointer is over this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a>.  </p>\n<p> This event is one of several related events that report the mouse-button specifics of an underlying &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; event, which is an attached event that is processed by each element along an event route.  </p>\n<p> The event data of this event exposes the event data of the underlying &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_AddHandler_\" data-linktype=\"relative-path\">AddHandler</a>, with the option to handle events that are already marked as handled, in order to be listeners to the event. If you mark MouseLeftButtonDown handled, you are essentially marking &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; handled for all further listeners along the route, and on all related events. This possibly includes class-handler generated events such as <a class=\"xref\" href=\"system.windows.controls.control#System_Windows_Controls_Control_MouseDoubleClick\" data-linktype=\"relative-path\">MouseDoubleClick</a>.  </p>\n<p> Conceptually, think of this event (and other mouse-button events on <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a>) to be a mouse &quot;service&quot; (with the service definition provided by the <a class=\"xref\" href=\"system.windows.input.mouse\" data-linktype=\"relative-path\">Mouse</a> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the APIs on the <a class=\"xref\" href=\"system.windows.input.mouse\" data-linktype=\"relative-path\">Mouse</a> class rather than those on <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a>.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Some control classes might have inherent class handling for mouse button events. The left mouse button down event is the most likely event to have class handling in a control. The class handling often marks the underlying <a class=\"xref\" href=\"system.windows.input.mouse\" data-linktype=\"relative-path\">Mouse</a> class event as handled. Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised. Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.  </p>\n</div>\n<p> You can resolve the issue that is outlined in the preceding Important and still receive MouseLeftButtonDown events for left mouse button down events on a derived class that has class handling by using either of these solutions:  </p>\n<ul>\n<li><p>Attach handlers for the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseDown\" data-linktype=\"relative-path\">PreviewMouseDown</a> event, which is not marked as handled by the controls. Notice that because this is a preview event, the route starts at the root and tunnels down to the control.  </p>\n</li>\n<li><p>Register a handler on the control procedurally by calling <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_AddHandler_\" data-linktype=\"relative-path\">AddHandler</a> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.  </p>\n</li>\n</ul>\n<p><a name=\"routedEventInfo_MouseLeftButtonDown\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseLeftButtonDownEvent\" data-linktype=\"relative-path\">MouseLeftButtonDownEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Direct</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.mousebuttoneventhandler\" data-linktype=\"relative-path\">MouseButtonEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnMouseLeftButtonDown_\" data-linktype=\"relative-path\">OnMouseLeftButtonDown</a> to implement class handling for this event in derived classes.</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_MouseLeftButtonUp\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MouseLeftButtonUp</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the left mouse button is released while the mouse pointer is over this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a>.  </p>\n<p> This event is one of several related events that report the mouse-button specifics of an underlying &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; event, which is an attached event that is processed by each element along an event route.  </p>\n<p> The event data of this event exposes the event data of the underlying &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_AddHandler_\" data-linktype=\"relative-path\">AddHandler</a>, with the option to handle events that are already marked as handled, in order to be listeners to the event. If you mark MouseLeftButtonUp handled, you are essentially marking &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; handled for all further listeners along the route, and on all related events.  </p>\n<p> Conceptually, think of this event (and other mouse-button events on <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a>) to be a mouse &quot;service&quot; (with the service definition provided by the <a class=\"xref\" href=\"system.windows.input.mouse\" data-linktype=\"relative-path\">Mouse</a> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the APIs on the <a class=\"xref\" href=\"system.windows.input.mouse\" data-linktype=\"relative-path\">Mouse</a> class rather than those on <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a>.  </p>\n<p><a name=\"routedEventInfo_MouseLeftButtonUp\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseLeftButtonUpEvent\" data-linktype=\"relative-path\">MouseLeftButtonUpEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Direct</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.mousebuttoneventhandler\" data-linktype=\"relative-path\">MouseButtonEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnMouseLeftButtonUp_\" data-linktype=\"relative-path\">OnMouseLeftButtonUp</a> to implement class handling for this event in derived classes.</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_MouseMove\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MouseMove</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the mouse pointer moves while over this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.MouseEventHandler MouseMove;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName&gt; attached event for this class, so that MouseMove is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the MouseMove event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_MouseMove\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseMoveEvent\" data-linktype=\"relative-path\">MouseMoveEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.mouseeventhandler\" data-linktype=\"relative-path\">MouseEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseMove\" data-linktype=\"relative-path\">PreviewMouseMove</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnMouseMove_\" data-linktype=\"relative-path\">OnMouseMove</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_MouseRightButtonDown\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MouseRightButtonDown</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the right mouse button is pressed while the mouse pointer is over this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a>.  </p>\n<p> This event is one of several related events that report the mouse-button specifics of an underlying &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; event, which is an attached event that is processed by each element along an event route.  </p>\n<p> The event data of this event exposes the event data of the underlying &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_AddHandler_\" data-linktype=\"relative-path\">AddHandler</a>, with the option to handle events that are already marked as handled, in order to be listeners to the event. If you mark MouseRightButtonDown handled, you are essentially marking &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; handled for all further listeners along the route, and on all related events. This possibly includes class-handler generated events such as <a class=\"xref\" href=\"system.windows.controls.control#System_Windows_Controls_Control_MouseDoubleClick\" data-linktype=\"relative-path\">MouseDoubleClick</a>.  </p>\n<p> Conceptually, think of this event (and other mouse-button events on <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a>) to be a mouse &quot;service&quot; (with the service definition provided by the <a class=\"xref\" href=\"system.windows.input.mouse\" data-linktype=\"relative-path\">Mouse</a> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the APIs on the <a class=\"xref\" href=\"system.windows.input.mouse\" data-linktype=\"relative-path\">Mouse</a> class rather than those on <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a>.  </p>\n<p> Right button mouse events frequently have native handling in application scenarios. For instance, a right mouse button down might display a context menu. See <a href=\"../Topic/ContextMenu%20Overview.md\" data-linktype=\"relative-path\">ContextMenu Overview</a>.  </p>\n<p><a name=\"routedEventInfo_MouseRightButtonDown\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseRightButtonDownEvent\" data-linktype=\"relative-path\">MouseRightButtonDownEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Direct</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.mousebuttoneventhandler\" data-linktype=\"relative-path\">MouseButtonEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnMouseRightButtonDown_\" data-linktype=\"relative-path\">OnMouseRightButtonDown</a> to implement class handling for this event in derived classes.</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_MouseRightButtonUp\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MouseRightButtonUp</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the right mouse button is released while the mouse pointer is over this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a>.  </p>\n<p> This event is one of several related events that report the mouse-button specifics of an underlying &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; event, which is an attached event that is processed by each element along an event route.  </p>\n<p> The event data of this event exposes the event data of the underlying &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_AddHandler_\" data-linktype=\"relative-path\">AddHandler</a>, with the option to handle events that are already marked as handled, in order to be listeners to the event. If you mark MouseRightButtonUp handled, you are essentially marking &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; handled for all further listeners along the route, and on all related events.  </p>\n<p> Conceptually, think of this event (and other mouse-button events on <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a>) to be a mouse &quot;service&quot; (with the service definition provided by the <a class=\"xref\" href=\"system.windows.input.mouse\" data-linktype=\"relative-path\">Mouse</a> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the APIs on the <a class=\"xref\" href=\"system.windows.input.mouse\" data-linktype=\"relative-path\">Mouse</a> class rather than those on <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a>.  </p>\n<p><a name=\"routedEventInfo_MouseRightButtonUp\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseRightButtonUpEvent\" data-linktype=\"relative-path\">MouseRightButtonUpEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Direct</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.mousebuttoneventhandler\" data-linktype=\"relative-path\">MouseButtonEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnMouseRightButtonUp_\" data-linktype=\"relative-path\">OnMouseRightButtonUp</a> to implement class handling for this event in derived classes.</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_MouseUp\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MouseUp</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when any mouse button is released over this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.MouseButtonEventHandler MouseUp;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; attached event for this class, so that MouseUp is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the MouseUp event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> The MouseUp event is often raised together with either <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseLeftButtonUp\" data-linktype=\"relative-path\">MouseLeftButtonUp</a> or <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseRightButtonUp\" data-linktype=\"relative-path\">MouseRightButtonUp</a>, which correspond to a release of one of the two standard mouse buttons. <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseLeftButtonUp\" data-linktype=\"relative-path\">MouseLeftButtonUp</a> and <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseRightButtonUp\" data-linktype=\"relative-path\">MouseRightButtonUp</a> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; event reaches this element along the event route. See Remarks for <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseLeftButtonUp\" data-linktype=\"relative-path\">MouseLeftButtonUp</a> or <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseRightButtonUp\" data-linktype=\"relative-path\">MouseRightButtonUp</a>.  </p>\n<p><a name=\"routedEventInfo_MouseUp\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseUpEvent\" data-linktype=\"relative-path\">MouseUpEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.mousebuttoneventhandler\" data-linktype=\"relative-path\">MouseButtonEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseUp\" data-linktype=\"relative-path\">PreviewMouseUp</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnMouseUp_\" data-linktype=\"relative-path\">OnMouseUp</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_MouseWheel\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MouseWheel</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.MouseWheelEventHandler MouseWheel;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive the MouseWheel event from a focused or captured element, the mouse pointer might actually be over another element.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName&gt; attached event for this class, so that MouseWheel is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the MouseWheel event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_MouseWheel\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseWheelEvent\" data-linktype=\"relative-path\">MouseWheelEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.mousewheeleventhandler\" data-linktype=\"relative-path\">MouseWheelEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseWheel\" data-linktype=\"relative-path\">PreviewMouseWheel</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnMouseWheel_\" data-linktype=\"relative-path\">OnMouseWheel</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewDragEnter\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewDragEnter</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the input system reports an underlying drag event with this element as the drag target.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.DragEventHandler PreviewDragEnter;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event creates an alias for the &lt;xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName&gt; attached event for this class, so that PreviewDragEnter is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the PreviewDragEnter event are attached to the underlying &lt;xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_PreviewDragEnter\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewDragEnterEvent\" data-linktype=\"relative-path\">PreviewDragEnterEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.drageventhandler\" data-linktype=\"relative-path\">DragEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_DragEnter\" data-linktype=\"relative-path\">DragEnter</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnPreviewDragEnter_\" data-linktype=\"relative-path\">OnPreviewDragEnter</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewDragLeave\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewDragLeave</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the input system reports an underlying drag event with this element as the drag origin.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.DragEventHandler PreviewDragLeave;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event creates an alias for the &lt;xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName&gt; attached event for this class, so that PreviewDragLeave is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the PreviewDragLeave event are attached to the underlying &lt;xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_PreviewDragLeave\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewDragLeaveEvent\" data-linktype=\"relative-path\">PreviewDragLeaveEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.drageventhandler\" data-linktype=\"relative-path\">DragEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_DragLeave\" data-linktype=\"relative-path\">DragLeave</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnPreviewDragLeave_\" data-linktype=\"relative-path\">OnPreviewDragLeave</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewDragOver\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewDragOver</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the input system reports an underlying drag event with this element as the potential drop target.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.DragEventHandler PreviewDragOver;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event creates an alias for the &lt;xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName&gt; attached event for this class, so that PreviewDragOver is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the PreviewDragOver event are attached to the underlying &lt;xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_PreviewDragOver\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewDragOverEvent\" data-linktype=\"relative-path\">PreviewDragOverEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.drageventhandler\" data-linktype=\"relative-path\">DragEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_DragOver\" data-linktype=\"relative-path\">DragOver</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnPreviewDragOver_\" data-linktype=\"relative-path\">OnPreviewDragOver</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewDrop\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewDrop</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the input system reports an underlying drop event with this element as the drop target.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.DragEventHandler PreviewDrop;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event creates an alias for the &lt;xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName&gt; attached event for this class, so that PreviewDrop is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the PreviewDrop event are attached to the underlying &lt;xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_PreviewDrop\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewDropEvent\" data-linktype=\"relative-path\">PreviewDropEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.drageventhandler\" data-linktype=\"relative-path\">DragEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_Drop\" data-linktype=\"relative-path\">Drop</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnPreviewDrop_\" data-linktype=\"relative-path\">OnPreviewDrop</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewGiveFeedback\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewGiveFeedback</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when a drag-and-drop operation is started.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The PreviewGiveFeedback event enables the source of a drag event to modify the appearance of the mouse pointer, in order to give the user visual feedback during a drag-and-drop operation.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName&gt; attached event for this class, so that PreviewGiveFeedback is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the PreviewGiveFeedback event are attached to the underlying &lt;xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_PreviewGiveFeedback\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewGiveFeedbackEvent\" data-linktype=\"relative-path\">PreviewGiveFeedbackEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.givefeedbackeventhandler\" data-linktype=\"relative-path\">GiveFeedbackEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_GiveFeedback\" data-linktype=\"relative-path\">GiveFeedback</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnPreviewGiveFeedback_\" data-linktype=\"relative-path\">OnPreviewGiveFeedback</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewGotKeyboardFocus\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewGotKeyboardFocus</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the keyboard is focused on this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Because this event uses tunneling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached. Check the <a class=\"xref\" href=\"system.windows.routedeventargs#System_Windows_RoutedEventArgs_Source_\" data-linktype=\"relative-path\">Source</a> in the event data to determine the actual element that has focus.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName&gt; attached event for this class, so that PreviewGotKeyboardFocus is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the PreviewGotKeyboardFocus event are attached to the underlying &lt;xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_PreviewGotKeyboardFocus\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewGotKeyboardFocusEvent\" data-linktype=\"relative-path\">PreviewGotKeyboardFocusEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.keyboardfocuschangedeventhandler\" data-linktype=\"relative-path\">KeyboardFocusChangedEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_GotKeyboardFocus\" data-linktype=\"relative-path\">GotKeyboardFocus</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnPreviewGotKeyboardFocus_\" data-linktype=\"relative-path\">OnPreviewGotKeyboardFocus</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewKeyDown\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewKeyDown</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when a key is pressed while focus is on this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.KeyEventHandler PreviewKeyDown;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Key handling interacts with other platform features such as commanding and text composition. The <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_KeyDown\" data-linktype=\"relative-path\">KeyDown</a> event is a lower-level text input event that might not behave as expected on certain controls. This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName&gt; attached event for this class, so that PreviewKeyDown is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the PreviewKeyDown event are attached to the underlying &lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_PreviewKeyDown\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewKeyDownEvent\" data-linktype=\"relative-path\">PreviewKeyDownEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.keyeventhandler\" data-linktype=\"relative-path\">KeyEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_KeyDown\" data-linktype=\"relative-path\">KeyDown</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnPreviewKeyDown_\" data-linktype=\"relative-path\">OnPreviewKeyDown</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewKeyUp\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewKeyUp</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when a key is released while focus is on this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.KeyEventHandler PreviewKeyUp;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Key handling interacts with other platform features such as commanding and text composition. The <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_KeyUp\" data-linktype=\"relative-path\">KeyUp</a> event is a lower-level text input event that might not behave as expected on certain controls. This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events. For details, check the documentation for individual controls.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName&gt; attached event for this class, so that PreviewKeyUp is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the PreviewKeyUp event are attached to the underlying &lt;xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_PreviewKeyUp\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewKeyUpEvent\" data-linktype=\"relative-path\">PreviewKeyUpEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.keyeventhandler\" data-linktype=\"relative-path\">KeyEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_KeyUp\" data-linktype=\"relative-path\">KeyUp</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnPreviewKeyUp_\" data-linktype=\"relative-path\">OnPreviewKeyUp</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewLostKeyboardFocus\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewLostKeyboardFocus</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the keyboard is no longer focused on this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Because this event uses tunneling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached. Check the <a class=\"xref\" href=\"system.windows.routedeventargs#System_Windows_RoutedEventArgs_Source_\" data-linktype=\"relative-path\">Source</a> in the event data to determine the actual element that lost focus.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName&gt; attached event for this class, so that PreviewLostKeyboardFocus is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the PreviewLostKeyboardFocus event are attached to the underlying &lt;xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_PreviewLostKeyboardFocus\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewLostKeyboardFocusEvent\" data-linktype=\"relative-path\">PreviewLostKeyboardFocusEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.keyboardfocuschangedeventhandler\" data-linktype=\"relative-path\">KeyboardFocusChangedEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_LostKeyboardFocus\" data-linktype=\"relative-path\">LostKeyboardFocus</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnPreviewLostKeyboardFocus_\" data-linktype=\"relative-path\">OnPreviewLostKeyboardFocus</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewMouseDown\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewMouseDown</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when any mouse button is pressed while the pointer is over this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.MouseButtonEventHandler PreviewMouseDown;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; attached event for this class, so that PreviewMouseDown is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the PreviewMouseDown event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> The PreviewMouseDown event is often raised together with either <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseLeftButtonDown\" data-linktype=\"relative-path\">PreviewMouseLeftButtonDown</a> or <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseRightButtonDown\" data-linktype=\"relative-path\">PreviewMouseRightButtonDown</a>, which correspond to a press of one of the two standard mouse buttons. <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseLeftButtonDown\" data-linktype=\"relative-path\">PreviewMouseLeftButtonDown</a> and <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseRightButtonDown\" data-linktype=\"relative-path\">PreviewMouseRightButtonDown</a> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; event reaches this element along the event route. See Remarks for <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseLeftButtonDown\" data-linktype=\"relative-path\">PreviewMouseLeftButtonDown</a> or <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseRightButtonDown\" data-linktype=\"relative-path\">PreviewMouseRightButtonDown</a>.  </p>\n<p><a name=\"routedEventInfo_PreviewMouseDown\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseDownEvent\" data-linktype=\"relative-path\">PreviewMouseDownEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.mousebuttoneventhandler\" data-linktype=\"relative-path\">MouseButtonEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseDown\" data-linktype=\"relative-path\">MouseDown</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnPreviewMouseDown_\" data-linktype=\"relative-path\">OnPreviewMouseDown</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewMouseLeftButtonDown\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewMouseLeftButtonDown</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the left mouse button is pressed while the mouse pointer is over this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a>.  </p>\n<p> This event is one of several related events that report the mouse-button specifics of an underlying &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; event, which is an attached event that is processed by each element along an event route.  </p>\n<p> The event data of this event exposes the event data of the underlying &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_AddHandler_\" data-linktype=\"relative-path\">AddHandler</a>, with the option to handle events that are already marked as handled, in order to be listeners to the event. If you mark PreviewMouseLeftButtonDown handled, you are essentially marking &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; handled for all further listeners along the route, and on all related events. This possibly includes class-handler generated events such as <a class=\"xref\" href=\"system.windows.controls.control#System_Windows_Controls_Control_PreviewMouseDoubleClick\" data-linktype=\"relative-path\">PreviewMouseDoubleClick</a>.  </p>\n<p> Conceptually, think of this event (and other mouse-button events on <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a>) to be a mouse &quot;service&quot; (with the service definition provided by the <a class=\"xref\" href=\"system.windows.input.mouse\" data-linktype=\"relative-path\">Mouse</a> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the APIs on the <a class=\"xref\" href=\"system.windows.input.mouse\" data-linktype=\"relative-path\">Mouse</a> class rather than those on <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a>.  </p>\n<p><a name=\"routedEventInfo_PreviewMouseLeftButtonDown\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseLeftButtonDownEvent\" data-linktype=\"relative-path\">PreviewMouseLeftButtonDownEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Direct</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.mousebuttoneventhandler\" data-linktype=\"relative-path\">MouseButtonEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnPreviewMouseLeftButtonDown_\" data-linktype=\"relative-path\">OnPreviewMouseLeftButtonDown</a> to implement class handling for this event in derived classes.</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewMouseLeftButtonUp\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewMouseLeftButtonUp</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the left mouse button is released while the mouse pointer is over this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a>.  </p>\n<p> This event is one of several related events that report the mouse-button specifics of an underlying &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; event, which is an attached event that is processed by each element along an event route.  </p>\n<p> The event data of this event exposes the event data of the underlying &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_AddHandler_\" data-linktype=\"relative-path\">AddHandler</a>, with the option to handle events that are already marked as handled, in order to be listeners to the event. If you mark PreviewMouseLeftButtonUp handled, you are essentially marking &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; handled for all further listeners along the route, and on all related events.  </p>\n<p> Conceptually, think of this event (and other mouse-button events on <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a>) to be a mouse &quot;service&quot; (with the service definition provided by the <a class=\"xref\" href=\"system.windows.input.mouse\" data-linktype=\"relative-path\">Mouse</a> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the APIs on the <a class=\"xref\" href=\"system.windows.input.mouse\" data-linktype=\"relative-path\">Mouse</a> class rather than those on <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a>.  </p>\n<p><a name=\"routedEventInfo_PreviewMouseLeftButtonUp\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseLeftButtonUpEvent\" data-linktype=\"relative-path\">PreviewMouseLeftButtonUpEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Direct</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.mousebuttoneventhandler\" data-linktype=\"relative-path\">MouseButtonEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnPreviewMouseLeftButtonUp_\" data-linktype=\"relative-path\">OnPreviewMouseLeftButtonUp</a> to implement class handling for this event in derived classes.</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewMouseMove\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewMouseMove</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the mouse pointer moves while the mouse pointer is over this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.MouseEventHandler PreviewMouseMove;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event occurs both when the mouse pointer first enters into the element bounds, and also when the mouse pointer moves while still remaining within the element bounds.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName&gt; attached event for this class, so that PreviewMouseMove is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the PreviewMouseMove event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_PreviewMouseMove\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseMoveEvent\" data-linktype=\"relative-path\">PreviewMouseMoveEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.mouseeventhandler\" data-linktype=\"relative-path\">MouseEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseMove\" data-linktype=\"relative-path\">MouseMove</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnPreviewMouseMove_\" data-linktype=\"relative-path\">OnPreviewMouseMove</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewMouseRightButtonDown\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewMouseRightButtonDown</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the right mouse button is pressed while the mouse pointer is over this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a>.  </p>\n<p> This event is one of several related events that report the mouse-button specifics of an underlying &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; event, which is an attached event that is processed by each element along an event route.  </p>\n<p> The event data of this event exposes the event data of the underlying &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_AddHandler_\" data-linktype=\"relative-path\">AddHandler</a>, with the option to handle events that are already marked as handled, in order to be listeners to the event. If you mark PreviewMouseRightButtonDown handled, you are essentially marking &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; handled for all further listeners along the route, and on all related events. This possibly includes class-handler generated events such as <a class=\"xref\" href=\"system.windows.controls.control#System_Windows_Controls_Control_PreviewMouseDoubleClick\" data-linktype=\"relative-path\">PreviewMouseDoubleClick</a>.  </p>\n<p> Conceptually, think of this event (and other mouse-button events on <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a>) to be a mouse &quot;service&quot; (with the service definition provided by the <a class=\"xref\" href=\"system.windows.input.mouse\" data-linktype=\"relative-path\">Mouse</a> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the APIs on the <a class=\"xref\" href=\"system.windows.input.mouse\" data-linktype=\"relative-path\">Mouse</a> class rather than those on <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a>.  </p>\n<p><a name=\"routedEventInfo_PreviewMouseRightButtonDown\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseRightButtonDownEvent\" data-linktype=\"relative-path\">PreviewMouseRightButtonDownEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Direct</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.mousebuttoneventhandler\" data-linktype=\"relative-path\">MouseButtonEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnPreviewMouseRightButtonDown_\" data-linktype=\"relative-path\">OnPreviewMouseRightButtonDown</a> to implement class handling for this event in derived classes.</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewMouseRightButtonUp\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewMouseRightButtonUp</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the right mouse button is released while the mouse pointer is over this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a>.  </p>\n<p> This event is one of several related events that report the mouse-button specifics of an underlying &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; event, which is an attached event that is processed by each element along an event route.  </p>\n<p> The event data of this event exposes the event data of the underlying &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_AddHandler_\" data-linktype=\"relative-path\">AddHandler</a>, with the option to handle events that are already marked as handled, in order to be listeners to the event. If you mark PreviewMouseRightButtonUp handled, you are essentially marking &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; handled for all further listeners along the route, and on all related events.  </p>\n<p> Conceptually, think of this event (and other mouse-button events on <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a>) to be a mouse &quot;service&quot; (with the service definition provided by the <a class=\"xref\" href=\"system.windows.input.mouse\" data-linktype=\"relative-path\">Mouse</a> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the APIs on the <a class=\"xref\" href=\"system.windows.input.mouse\" data-linktype=\"relative-path\">Mouse</a> class rather than those on <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a>.  </p>\n<p><a name=\"routedEventInfo_PreviewMouseRightButtonUp\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseRightButtonUpEvent\" data-linktype=\"relative-path\">PreviewMouseRightButtonUpEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Direct</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.mousebuttoneventhandler\" data-linktype=\"relative-path\">MouseButtonEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnPreviewMouseRightButtonUp_\" data-linktype=\"relative-path\">OnPreviewMouseRightButtonUp</a> to implement class handling for this event in derived classes.</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewMouseUp\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewMouseUp</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when any mouse button is released while the mouse pointer is over this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.MouseButtonEventHandler PreviewMouseUp;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; attached event for this class, so that PreviewMouseUp is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the PreviewMouseUp event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> The PreviewMouseUp event is often raised together with either <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseLeftButtonUp\" data-linktype=\"relative-path\">PreviewMouseLeftButtonUp</a> or <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseRightButtonUp\" data-linktype=\"relative-path\">PreviewMouseRightButtonUp</a>, which correspond to a press of one of the two standard mouse buttons. <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseLeftButtonUp\" data-linktype=\"relative-path\">PreviewMouseLeftButtonUp</a> and <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseRightButtonUp\" data-linktype=\"relative-path\">PreviewMouseRightButtonUp</a> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; event reaches this element along the event route. See Remarks for <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseLeftButtonUp\" data-linktype=\"relative-path\">PreviewMouseLeftButtonUp</a> or <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseRightButtonUp\" data-linktype=\"relative-path\">PreviewMouseRightButtonUp</a>.  </p>\n<p><a name=\"routedEventInfo_PreviewMouseUp\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseUpEvent\" data-linktype=\"relative-path\">PreviewMouseUpEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.mousebuttoneventhandler\" data-linktype=\"relative-path\">MouseButtonEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseUp\" data-linktype=\"relative-path\">MouseUp</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnPreviewMouseUp_\" data-linktype=\"relative-path\">OnPreviewMouseUp</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewMouseWheel\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewMouseWheel</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive this event from a focused or captured element, the mouse pointer might actually be over another element.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName&gt; attached event for this class, so that <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseMove\" data-linktype=\"relative-path\">PreviewMouseMove</a> is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseMove\" data-linktype=\"relative-path\">PreviewMouseMove</a> event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_PreviewMouseWheel\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewMouseWheelEvent\" data-linktype=\"relative-path\">PreviewMouseWheelEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.mousewheeleventhandler\" data-linktype=\"relative-path\">MouseWheelEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_MouseWheel\" data-linktype=\"relative-path\">MouseWheel</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnPreviewMouseWheel_\" data-linktype=\"relative-path\">OnPreviewMouseWheel</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewQueryContinueDrag\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewQueryContinueDrag</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The PreviewQueryContinueDrag event enables the drag source to declare whether the drag-and-drop operation should be canceled.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName&gt; attached event for this class, so that PreviewQueryContinueDrag is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the PreviewQueryContinueDrag event are attached to the underlying &lt;xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_PreviewQueryContinueDrag\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewQueryContinueDragEvent\" data-linktype=\"relative-path\">PreviewQueryContinueDragEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.querycontinuedrageventhandler\" data-linktype=\"relative-path\">QueryContinueDragEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_QueryContinueDrag\" data-linktype=\"relative-path\">QueryContinueDrag</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnPreviewQueryContinueDrag_\" data-linktype=\"relative-path\">OnPreviewQueryContinueDrag</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewStylusButtonDown\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewStylusButtonDown</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the stylus button is pressed while the pointer is over this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName&gt; attached event for this class, so that PreviewStylusButtonDown is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the PreviewStylusButtonDown event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> Touch, mouse, and stylus input exist in a particular relationship. For more information, see <a href=\"http://msdn.microsoft.com/en-us/63f1d71f-03d8-4d83-a174-e3dc7c57bad0\" data-linktype=\"external\">Touch Input Support in Windows Vista</a> and <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p><a name=\"routedEventInfo_PreviewStylusButtonDown\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewStylusButtonDownEvent\" data-linktype=\"relative-path\">PreviewStylusButtonDownEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.stylusbuttoneventhandler\" data-linktype=\"relative-path\">StylusButtonEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_StylusButtonDown\" data-linktype=\"relative-path\">StylusButtonDown</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnPreviewStylusButtonDown_\" data-linktype=\"relative-path\">OnPreviewStylusButtonDown</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewStylusButtonUp\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewStylusButtonUp</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the stylus button is released while the pointer is over this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName&gt; attached event for this class, so that PreviewStylusButtonUp is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the PreviewStylusButtonUp event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> Touch, mouse, and stylus input exist in a particular relationship. For more information, see <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p><a name=\"routedEventInfo_PreviewStylusButtonUp\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewStylusButtonUpEvent\" data-linktype=\"relative-path\">PreviewStylusButtonUpEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.stylusbuttoneventhandler\" data-linktype=\"relative-path\">StylusButtonEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_StylusButtonUp\" data-linktype=\"relative-path\">StylusButtonUp</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnPreviewStylusButtonUp_\" data-linktype=\"relative-path\">OnPreviewStylusButtonUp</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewStylusDown\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewStylusDown</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the stylus touches the digitizer while it is over this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.StylusDownEventHandler PreviewStylusDown;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName&gt; attached event for this class, so that PreviewStylusDown is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the PreviewStylusDown event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> Touch, mouse, and stylus input exist in a particular relationship. For more information, see <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p><a name=\"routedEventInfo_PreviewStylusDown\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewStylusDownEvent\" data-linktype=\"relative-path\">PreviewStylusDownEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.stylusdowneventhandler\" data-linktype=\"relative-path\">StylusDownEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_StylusDown\" data-linktype=\"relative-path\">StylusDown</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnPreviewStylusDown_\" data-linktype=\"relative-path\">OnPreviewStylusDown</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewStylusInAirMove\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewStylusInAirMove</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the stylus moves over an element without actually touching the digitizer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.StylusEventHandler PreviewStylusInAirMove;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName&gt; attached event for this class, so that PreviewStylusInAirMove is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the PreviewStylusInAirMove event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> Touch, mouse, and stylus input exist in a particular relationship. For more information, see <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p><a name=\"routedEventInfo_PreviewStylusInAirMove\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewStylusInAirMoveEvent\" data-linktype=\"relative-path\">PreviewStylusInAirMoveEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.styluseventhandler\" data-linktype=\"relative-path\">StylusEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_StylusInAirMove\" data-linktype=\"relative-path\">StylusInAirMove</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnPreviewStylusInAirMove_\" data-linktype=\"relative-path\">OnPreviewStylusInAirMove</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewStylusInRange\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewStylusInRange</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the stylus is close enough to the digitizer to be detected, while over this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.StylusEventHandler PreviewStylusInRange;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName&gt; attached event for this class, so that PreviewStylusInRange is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the PreviewStylusInRange event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> Touch, mouse, and stylus input exist in a particular relationship. For more information, see <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p><a name=\"routedEventInfo_PreviewStylusInRange\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewStylusInRangeEvent\" data-linktype=\"relative-path\">PreviewStylusInRangeEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.styluseventhandler\" data-linktype=\"relative-path\">StylusEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_StylusInRange\" data-linktype=\"relative-path\">StylusInRange</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnPreviewStylusInRange_\" data-linktype=\"relative-path\">OnPreviewStylusInRange</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewStylusMove\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewStylusMove</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the stylus moves while over the element. The stylus must move while being detected by the digitizer to raise this event, otherwise, <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewStylusInAirMove\" data-linktype=\"relative-path\">PreviewStylusInAirMove</a> is raised instead.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.StylusEventHandler PreviewStylusMove;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName&gt; attached event for this class, so that PreviewStylusMove is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the PreviewStylusMove event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> Touch, mouse, and stylus input exist in a particular relationship. For more information, see <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p><a name=\"routedEventInfo_PreviewStylusMove\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewStylusMoveEvent\" data-linktype=\"relative-path\">PreviewStylusMoveEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.styluseventhandler\" data-linktype=\"relative-path\">StylusEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_StylusMove\" data-linktype=\"relative-path\">StylusMove</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnPreviewStylusMove_\" data-linktype=\"relative-path\">OnPreviewStylusMove</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewStylusOutOfRange\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewStylusOutOfRange</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the stylus is too far from the digitizer to be detected.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName&gt; attached event for this class, so that PreviewStylusOutOfRange is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the PreviewStylusOutOfRange event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> Touch, mouse, and stylus input exist in a particular relationship. For more information, see <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p><a name=\"routedEventInfo_PreviewStylusOutOfRange\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewStylusOutOfRangeEvent\" data-linktype=\"relative-path\">PreviewStylusOutOfRangeEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.styluseventhandler\" data-linktype=\"relative-path\">StylusEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_StylusOutOfRange\" data-linktype=\"relative-path\">StylusOutOfRange</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnPreviewStylusOutOfRange_\" data-linktype=\"relative-path\">OnPreviewStylusOutOfRange</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewStylusSystemGesture\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewStylusSystemGesture</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when a user performs one of several stylus gestures.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For information about stylus gestures, see <a class=\"xref\" href=\"system.windows.input.systemgesture\" data-linktype=\"relative-path\">SystemGesture</a>.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName&gt; attached event for this class, so that PreviewStylusSystemGesture is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the PreviewStylusSystemGesture event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> Touch, mouse, and stylus input exist in a particular relationship. For more information, see <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p><a name=\"routedEventInfo_PreviewStylusSystemGesture\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewStylusSystemGestureEvent\" data-linktype=\"relative-path\">PreviewStylusSystemGestureEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.stylussystemgestureeventhandler\" data-linktype=\"relative-path\">StylusSystemGestureEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_StylusSystemGesture\" data-linktype=\"relative-path\">StylusSystemGesture</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnPreviewStylusSystemGesture_\" data-linktype=\"relative-path\">OnPreviewStylusSystemGesture</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewStylusUp\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewStylusUp</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the user raises the stylus off the digitizer while the stylus is over this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.StylusEventHandler PreviewStylusUp;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName&gt; attached event for this class, so that <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewStylusDown\" data-linktype=\"relative-path\">PreviewStylusDown</a> is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewStylusDown\" data-linktype=\"relative-path\">PreviewStylusDown</a> event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> Touch, mouse, and stylus input exist in a particular relationship. For more information, see <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p><a name=\"routedEventInfo_PreviewStylusUp\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewStylusUpEvent\" data-linktype=\"relative-path\">PreviewStylusUpEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.styluseventhandler\" data-linktype=\"relative-path\">StylusEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_StylusUp\" data-linktype=\"relative-path\">StylusUp</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnPreviewStylusUp_\" data-linktype=\"relative-path\">OnPreviewStylusUp</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewTextInput\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewTextInput</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when this element gets text in a device-independent manner.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.TextCompositionEventHandler PreviewTextInput;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The PreviewTextInput event allows a component or application to listen for text input in a device-independent manner. The keyboard is the primary means of PreviewTextInput; but speech, handwriting, and other input devices can also generate PreviewTextInput.  </p>\n<p> Because of key combinations—either in default keyboards or through input method editors—multiple key events may raise just one text input event.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName&gt; attached event for this class, so that PreviewTextInput is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the PreviewTextInput event are attached to the underlying &lt;xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_PreviewTextInput\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewTextInputEvent\" data-linktype=\"relative-path\">PreviewTextInputEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.textcompositioneventhandler\" data-linktype=\"relative-path\">TextCompositionEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_TextInput\" data-linktype=\"relative-path\">TextInput</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnPreviewTextInput_\" data-linktype=\"relative-path\">OnPreviewTextInput</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewTouchDown\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewTouchDown</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when a finger touches the screen while the finger is over this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default, the PreviewTouchDown and <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_TouchDown\" data-linktype=\"relative-path\">TouchDown</a> events do not occur until a finger touches the screen and moves. Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <a class=\"xref\" href=\"system.windows.input.stylus\" data-linktype=\"relative-path\">Stylus</a>. The press and hold behavior is equivalent to a mouse right-click.  </p>\n<p> To cause the PreviewTouchDown and <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_TouchDown\" data-linktype=\"relative-path\">TouchDown</a> events to occur as soon as a finger touches the screen, set the &lt;xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName&gt; attached property to <code>false</code> for this element.  </p>\n<p><a name=\"routedEventInfo_PreviewTouchDown\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewTouchDownEvent\" data-linktype=\"relative-path\">PreviewTouchDownEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.eventhandler-1\" data-linktype=\"relative-path\">EventHandler&lt;TEventArgs&gt;</a> of type <a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a>.</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_TouchDown\" data-linktype=\"relative-path\">TouchDown</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnPreviewTouchDown_\" data-linktype=\"relative-path\">OnPreviewTouchDown</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewTouchMove\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewTouchMove</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when a finger moves on the screen while the finger is over this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a name=\"routedEventInfo_PreviewTouchMove\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewTouchMoveEvent\" data-linktype=\"relative-path\">PreviewTouchMoveEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.eventhandler-1\" data-linktype=\"relative-path\">EventHandler&lt;TEventArgs&gt;</a> of type <a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a>.</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_TouchMove\" data-linktype=\"relative-path\">TouchMove</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnPreviewTouchMove_\" data-linktype=\"relative-path\">OnPreviewTouchMove</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_PreviewTouchUp\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewTouchUp</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when a finger is raised off of the screen while the finger is over this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a name=\"routedEventInfo_PreviewTouchUp\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewTouchUpEvent\" data-linktype=\"relative-path\">PreviewTouchUpEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Tunneling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.eventhandler-1\" data-linktype=\"relative-path\">EventHandler&lt;TEventArgs&gt;</a> of type <a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a>.</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding bubbling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_TouchUp\" data-linktype=\"relative-path\">TouchUp</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnPreviewTouchUp_\" data-linktype=\"relative-path\">OnPreviewTouchUp</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_QueryContinueDrag\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">QueryContinueDrag</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.QueryContinueDragEventHandler QueryContinueDrag;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The QueryContinueDrag event enables the drag source to determine whether the drag-and-drop operation should be canceled.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName&gt; attached event for this class, so that QueryContinueDrag is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the QueryContinueDrag event are attached to the underlying &lt;xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_QueryContinueDrag\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_QueryContinueDragEvent\" data-linktype=\"relative-path\">QueryContinueDragEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.querycontinuedrageventhandler\" data-linktype=\"relative-path\">QueryContinueDragEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewQueryContinueDrag\" data-linktype=\"relative-path\">PreviewQueryContinueDrag</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnQueryContinueDrag_\" data-linktype=\"relative-path\">OnQueryContinueDrag</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_QueryCursor\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">QueryCursor</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the cursor is requested to display. This event is raised on an element each time that the mouse pointer moves to a new location, which means the cursor object might need to be changed based on its new position.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.QueryCursorEventHandler QueryCursor;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName&gt; attached event for this class, so that QueryCursor is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the QueryCursor event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> The cursor being referred to by this event name is not necessarily the text cursor (sometimes known as the insertion point). Instead, the cursor in this context is the object that declares the onscreen graphical display related to several possible input-related devices or concepts in Windows programming. That object is represented by the <a class=\"xref\" href=\"system.windows.input.cursor\" data-linktype=\"relative-path\">Cursor</a> class in WPF. The WPF input system enables you to change this cursor when it represents the onscreen position of the mouse pointer. You can use predefined values from the <a class=\"xref\" href=\"system.windows.input.cursors\" data-linktype=\"relative-path\">Cursors</a> enumeration, or you can declare a custom cursor as an image file.  </p>\n<p> Listening for the QueryCursor event is not an efficient technique for cursor management. Instead, each element should define its own cursor behavior with <a class=\"xref\" href=\"system.windows.frameworkcontentelement#System_Windows_FrameworkContentElement_Cursor_\" data-linktype=\"relative-path\">Cursor</a> and <a class=\"xref\" href=\"system.windows.frameworkcontentelement#System_Windows_FrameworkContentElement_ForceCursor_\" data-linktype=\"relative-path\">ForceCursor</a>. You should only rely on QueryCursor if you are not using the WPF framework-level base elements, or in extraordinary circumstances where defining cursor behavior on a per-element basis does not meet your needs. For more information on implementing cursor behavior in response to QueryCursor, see <a class=\"xref\" href=\"system.windows.input.querycursoreventhandler\" data-linktype=\"relative-path\">QueryCursorEventHandler</a>.  </p>\n<p><a name=\"routedEventInfo_QueryCursor\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_QueryCursorEvent\" data-linktype=\"relative-path\">QueryCursorEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.querycursoreventhandler\" data-linktype=\"relative-path\">QueryCursorEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>There is no defined corresponding tunneling event.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnQueryCursor_\" data-linktype=\"relative-path\">OnQueryCursor</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_StylusButtonDown\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StylusButtonDown</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the stylus button is pressed while the pointer is over this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.StylusButtonEventHandler StylusButtonDown;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName&gt; attached event for this class, so that StylusButtonDown is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the StylusButtonDown event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> Touch, mouse, and stylus input exist in a particular relationship. For more information, see <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p><a name=\"routedEventInfo_StylusButtonDown\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_StylusButtonDownEvent\" data-linktype=\"relative-path\">StylusButtonDownEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.stylusbuttoneventhandler\" data-linktype=\"relative-path\">StylusButtonEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewStylusButtonDown\" data-linktype=\"relative-path\">PreviewStylusButtonDown</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnStylusButtonDown_\" data-linktype=\"relative-path\">OnStylusButtonDown</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_StylusButtonUp\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StylusButtonUp</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the stylus button is released while the pointer is over this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.StylusButtonEventHandler StylusButtonUp;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName&gt; attached event for this class, so that StylusButtonUp is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the StylusButtonUp event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> Touch, mouse, and stylus input exist in a particular relationship. For more information, see <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p><a name=\"routedEventInfo_StylusButtonUp\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_StylusButtonUpEvent\" data-linktype=\"relative-path\">StylusButtonUpEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.stylusbuttoneventhandler\" data-linktype=\"relative-path\">StylusButtonEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewStylusButtonUp\" data-linktype=\"relative-path\">PreviewStylusButtonUp</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnStylusButtonUp_\" data-linktype=\"relative-path\">OnStylusButtonUp</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_StylusDown\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StylusDown</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the stylus touches the digitizer while the stylus is over this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.StylusDownEventHandler StylusDown;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName&gt; attached event for this class, so that StylusDown is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the StylusDown event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> Touch, mouse, and stylus input exist in a particular relationship. For more information, see <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p><a name=\"routedEventInfo_StylusDown\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_StylusDownEvent\" data-linktype=\"relative-path\">StylusDownEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.stylusdowneventhandler\" data-linktype=\"relative-path\">StylusDownEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewStylusDown\" data-linktype=\"relative-path\">PreviewStylusDown</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnStylusDown_\" data-linktype=\"relative-path\">OnStylusDown</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_StylusEnter\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StylusEnter</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the stylus enters the bounds of this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.StylusEventHandler StylusEnter;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>StylusEnter is a  that uses the direct event handling routing strategy. Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised. However, they do enable other aspects of routed event behavior, such as event triggers in styles.  </p>\n<p> Although StylusEnter tracks when the stylus enters the bounds of an element, this event more literally reports that the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsStylusOver_\" data-linktype=\"relative-path\">IsStylusOver</a> property value has changed from <code>false</code> to <code>true</code> on this element.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName&gt; attached event for this class, so that StylusEnter is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the StylusEnter event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> Touch, mouse, and stylus input exist in a particular relationship. For more information, see <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p><a name=\"routedEventInfo_StylusEnter\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_StylusEnterEvent\" data-linktype=\"relative-path\">StylusEnterEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Direct</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.styluseventhandler\" data-linktype=\"relative-path\">StylusEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnStylusEnter_\" data-linktype=\"relative-path\">OnStylusEnter</a> to implement class handling for this event in derived classes.</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_StylusInAirMove\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StylusInAirMove</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the stylus moves over an element without actually touching the digitizer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.StylusEventHandler StylusInAirMove;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName&gt; attached event for this class, so that StylusInAirMove is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the StylusInAirMove event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> Touch, mouse, and stylus input exist in a particular relationship. For more information, see <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p><a name=\"routedEventInfo_StylusInAirMove\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_StylusInAirMoveEvent\" data-linktype=\"relative-path\">StylusInAirMoveEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.styluseventhandler\" data-linktype=\"relative-path\">StylusEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewStylusInAirMove\" data-linktype=\"relative-path\">PreviewStylusInAirMove</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnStylusInAirMove_\" data-linktype=\"relative-path\">OnStylusInAirMove</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_StylusInRange\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StylusInRange</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the stylus is close enough to the digitizer to be detected, while over this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.StylusEventHandler StylusInRange;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName&gt; attached event for this class, so that StylusInRange is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the StylusInRange event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> Touch, mouse, and stylus input exist in a particular relationship. For more information, see <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p><a name=\"routedEventInfo_StylusInRange\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_StylusInRangeEvent\" data-linktype=\"relative-path\">StylusInRangeEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.styluseventhandler\" data-linktype=\"relative-path\">StylusEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewStylusInRange\" data-linktype=\"relative-path\">PreviewStylusInRange</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnStylusInRange_\" data-linktype=\"relative-path\">OnStylusInRange</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_StylusLeave\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StylusLeave</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the stylus leaves the bounds of the element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.StylusEventHandler StylusLeave;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>StylusLeave is a  that uses the direct event handling routing strategy. Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised. However, they do enable other aspects of routed event behavior, such as event triggers in styles.  </p>\n<p> Although StylusLeave tracks when the stylus leaves the bounds of an element, this event more literally reports that the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_IsStylusOver_\" data-linktype=\"relative-path\">IsStylusOver</a> property value has changed from <code>true</code> to <code>false</code> on this element.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName&gt; attached event for this class, so that StylusLeave is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the StylusLeave event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> Touch, mouse, and stylus input exist in a particular relationship. For more information, see <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p><a name=\"routedEventInfo_StylusLeave\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_StylusLeaveEvent\" data-linktype=\"relative-path\">StylusLeaveEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Direct</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.styluseventhandler\" data-linktype=\"relative-path\">StylusEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnStylusLeave_\" data-linktype=\"relative-path\">OnStylusLeave</a> to implement class handling for this event in derived classes.</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_StylusMove\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StylusMove</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the stylus moves over this element. The stylus must move while on the digitizer to raise this event. Otherwise, <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_StylusInAirMove\" data-linktype=\"relative-path\">StylusInAirMove</a> is raised instead.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.StylusEventHandler StylusMove;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName&gt; attached event for this class, so that StylusMove is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the StylusMove event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> Touch, mouse, and stylus input exist in a particular relationship. For more information, see <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p><a name=\"routedEventInfo_StylusMove\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_StylusMoveEvent\" data-linktype=\"relative-path\">StylusMoveEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.styluseventhandler\" data-linktype=\"relative-path\">StylusEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewStylusMove\" data-linktype=\"relative-path\">PreviewStylusMove</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnStylusMove_\" data-linktype=\"relative-path\">OnStylusMove</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_StylusOutOfRange\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StylusOutOfRange</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the stylus is too far from the digitizer to be detected, while over this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.StylusEventHandler StylusOutOfRange;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName&gt; attached event for this class, so that StylusOutOfRange is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the StylusOutOfRange event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> Touch, mouse, and stylus input exist in a particular relationship. For more information, see <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p><a name=\"routedEventInfo_StylusOutOfRange\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_StylusOutOfRangeEvent\" data-linktype=\"relative-path\">StylusOutOfRangeEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.styluseventhandler\" data-linktype=\"relative-path\">StylusEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewStylusOutOfRange\" data-linktype=\"relative-path\">PreviewStylusOutOfRange</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnStylusOutOfRange_\" data-linktype=\"relative-path\">OnStylusOutOfRange</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_StylusSystemGesture\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StylusSystemGesture</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when a user performs one of several stylus gestures.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about stylus gestures, see <a class=\"xref\" href=\"system.windows.input.systemgesture\" data-linktype=\"relative-path\">SystemGesture</a>.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName&gt; attached event for this class, so that StylusSystemGesture is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the StylusSystemGesture event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> Touch, mouse, and stylus input exist in a particular relationship. For more information, see <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p><a name=\"routedEventInfo_StylusSystemGesture\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_StylusSystemGestureEvent\" data-linktype=\"relative-path\">StylusSystemGestureEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.stylussystemgestureeventhandler\" data-linktype=\"relative-path\">StylusSystemGestureEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewStylusSystemGesture\" data-linktype=\"relative-path\">PreviewStylusSystemGesture</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnStylusSystemGesture_\" data-linktype=\"relative-path\">OnStylusSystemGesture</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_StylusUp\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StylusUp</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the user raises the stylus off the digitizer while it is over this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.StylusEventHandler StylusUp;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName&gt; attached event for this class, so that StylusUp is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the StylusUp event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p> Touch, mouse, and stylus input exist in a particular relationship. For more information, see <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.  </p>\n<p><a name=\"routedEventInfo_StylusUp\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_StylusUpEvent\" data-linktype=\"relative-path\">StylusUpEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.styluseventhandler\" data-linktype=\"relative-path\">StylusEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewStylusUp\" data-linktype=\"relative-path\">PreviewStylusUp</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnStylusUp_\" data-linktype=\"relative-path\">OnStylusUp</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_TextInput\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TextInput</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when this element gets text in a device-independent manner.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Input.TextCompositionEventHandler TextInput;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"IMPORTANT\"><h5>Important</h5><p> This event might already be marked as handled by the internal implementations of composited controls. See Remark below.  </p>\n</div>\n<p> The TextInput event may already be marked as handled by the internal implementations of composited controls. For example, a <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a> is a composited control where the TextInput event is already marked as handled; within its compositing. Controls do this because the control needs to interpret some types of input, such as arrow keys, as having special meaning to that control. If you use <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewTextInput\" data-linktype=\"relative-path\">PreviewTextInput</a> as the event where you attach handlers for text input, you may receive better results. This technique circumvents most cases where control composition has already marked this event as handled and prevents your handler from receiving the event along the event route.  </p>\n<p> The TextInput event allows a component or application to listen for text input in a device-independent manner. The keyboard is the primary means of TextInput, but speech, handwriting, and other input devices can also raise TextInput.  </p>\n<p> Because of key combinations—either in default keyboards or through input method editors—multiple key events might raise just one text input event.  </p>\n<p> This event creates an alias for the &lt;xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName&gt; attached event for this class, so that TextInput is part of the class members list when <a class=\"xref\" href=\"system.windows.uielement\" data-linktype=\"relative-path\">UIElement</a> is inherited as a base element. Event handlers that are attached to the TextInput event are attached to the underlying &lt;xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName&gt; attached event and receive the same event data instance.  </p>\n<p><a name=\"routedEventInfo_TextInput\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_TextInputEvent\" data-linktype=\"relative-path\">TextInputEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.windows.input.textcompositioneventhandler\" data-linktype=\"relative-path\">TextCompositionEventHandler</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewTextInput\" data-linktype=\"relative-path\">PreviewTextInput</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnTextInput_\" data-linktype=\"relative-path\">OnTextInput</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_TouchDown\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TouchDown</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when a finger touches the screen while the finger is over this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchDown;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default, the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewTouchDown\" data-linktype=\"relative-path\">PreviewTouchDown</a> and TouchDown events do not occur until a finger touches the screen and moves. Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <a class=\"xref\" href=\"system.windows.input.stylus\" data-linktype=\"relative-path\">Stylus</a>. The press and hold behavior is equivalent to a mouse right-click.  </p>\n<p> To cause the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewTouchDown\" data-linktype=\"relative-path\">PreviewTouchDown</a> and TouchDown events to occur as soon as a finger touches the screen, set the &lt;xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName&gt; attached property to <code>false</code> for this element.  </p>\n<p><a name=\"routedEventInfo_TouchDown\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_TouchDownEvent\" data-linktype=\"relative-path\">TouchDownEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.eventhandler-1\" data-linktype=\"relative-path\">EventHandler&lt;TEventArgs&gt;</a> of type <a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a>.</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewTouchDown\" data-linktype=\"relative-path\">PreviewTouchDown</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnTouchDown_\" data-linktype=\"relative-path\">OnTouchDown</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_TouchEnter\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TouchEnter</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when a touch moves from outside to inside the bounds of this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchEnter;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event is always raised, whether or not the touch device is captured to this element.  </p>\n<p><a name=\"routedEventInfo_TouchEnter\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_TouchEnterEvent\" data-linktype=\"relative-path\">TouchEnterEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Direct</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.eventhandler-1\" data-linktype=\"relative-path\">EventHandler&lt;TEventArgs&gt;</a> of type <a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a>.</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnTouchEnter_\" data-linktype=\"relative-path\">OnTouchEnter</a> to implement class handling for this event in derived classes.</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_TouchLeave\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TouchLeave</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when a touch moves from inside to outside the bounds of this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchLeave;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event is always raised, whether or not the touch device is captured to this element.  </p>\n<p><a name=\"routedEventInfo_TouchLeave\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_TouchLeaveEvent\" data-linktype=\"relative-path\">TouchLeaveEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Direct</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.eventhandler-1\" data-linktype=\"relative-path\">EventHandler&lt;TEventArgs&gt;</a> of type <a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a>.</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnTouchLeave_\" data-linktype=\"relative-path\">OnTouchLeave</a> to implement class handling for this event in derived classes.</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_TouchMove\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TouchMove</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when a finger moves on the screen while the finger is over this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchMove;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a name=\"routedEventInfo_TouchMove\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_TouchMoveEvent\" data-linktype=\"relative-path\">TouchMoveEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.eventhandler-1\" data-linktype=\"relative-path\">EventHandler&lt;TEventArgs&gt;</a> of type <a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a>.</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewTouchMove\" data-linktype=\"relative-path\">PreviewTouchMove</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnTouchMove_\" data-linktype=\"relative-path\">OnTouchMove</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_UIElement_TouchUp\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TouchUp</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when a finger is raised off of the screen while the finger is over this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchUp;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a name=\"routedEventInfo_TouchUp\"></a>   </p>\n<h2 id=\"routed-event-information\">Routed Event Information</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Identifier field</td>\n<td><a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_TouchUpEvent\" data-linktype=\"relative-path\">TouchUpEvent</a></td>\n</tr>\n<tr>\n<td>Routing strategy</td>\n<td>Bubbling</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.eventhandler-1\" data-linktype=\"relative-path\">EventHandler&lt;TEventArgs&gt;</a> of type <a class=\"xref\" href=\"system.windows.input.toucheventargs\" data-linktype=\"relative-path\">TouchEventArgs</a>.</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The corresponding tunneling event is <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_PreviewTouchUp\" data-linktype=\"relative-path\">PreviewTouchUp</a>.  </p>\n</li>\n<li><p>Override <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_OnTouchUp_\" data-linktype=\"relative-path\">OnTouchUp</a> to implement class handling for this event in derived classes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.UIElement.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.UIElement.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement..ctor\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.AddHandler\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.AddToEventRoute\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.AllowDrop\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.AllowDropProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.ApplyAnimationClock\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.AreAnyTouchesCaptured\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.AreAnyTouchesCapturedProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.AreAnyTouchesCapturedWithin\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.AreAnyTouchesDirectlyOver\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.AreAnyTouchesOver\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.AreAnyTouchesOverProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.Arrange\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.ArrangeCore\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.BeginAnimation\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.BitmapEffect\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.BitmapEffectInput\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.BitmapEffectInputProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.BitmapEffectProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.CacheMode\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.CacheModeProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.CaptureMouse\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.CaptureStylus\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.CaptureTouch\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.Clip\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.ClipProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.ClipToBounds\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.ClipToBoundsProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.CommandBindings\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.DesiredSize\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.DragEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_DragEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_DragEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.DragEnterEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.DragLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_DragLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_DragLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.DragLeaveEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.DragOver\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_DragOver\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_DragOver\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.DragOverEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.Drop\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_Drop\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_Drop\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.DropEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.Effect\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.EffectProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.Focus\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.Focusable\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.FocusableChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_FocusableChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_FocusableChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.FocusableProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.GetAnimationBaseValue\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.GetLayoutClip\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.GetUIParentCore\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.GiveFeedback\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_GiveFeedback\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_GiveFeedback\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.GiveFeedbackEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.GotFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_GotFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_GotFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.GotFocusEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.GotKeyboardFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_GotKeyboardFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_GotKeyboardFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.GotKeyboardFocusEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.GotMouseCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_GotMouseCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_GotMouseCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.GotMouseCaptureEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.GotStylusCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_GotStylusCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_GotStylusCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.GotStylusCaptureEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.GotTouchCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_GotTouchCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_GotTouchCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.GotTouchCaptureEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.HasAnimatedProperties\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.HasEffectiveKeyboardFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.HitTestCore\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.InputBindings\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.InputHitTest\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.InvalidateArrange\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.InvalidateMeasure\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.InvalidateVisual\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.IsArrangeValid\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.IsEnabled\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.IsEnabledChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_IsEnabledChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_IsEnabledChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.IsEnabledCore\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.IsEnabledProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.IsFocused\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.IsFocusedProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.IsHitTestVisible\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.IsHitTestVisibleChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_IsHitTestVisibleChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_IsHitTestVisibleChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.IsHitTestVisibleProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.IsInputMethodEnabled\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.IsKeyboardFocused\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.IsKeyboardFocusedChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_IsKeyboardFocusedChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_IsKeyboardFocusedChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.IsKeyboardFocusedProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.IsKeyboardFocusWithin\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.IsKeyboardFocusWithinChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_IsKeyboardFocusWithinChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_IsKeyboardFocusWithinChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.IsKeyboardFocusWithinProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.IsManipulationEnabled\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.IsManipulationEnabledProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.IsMeasureValid\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.IsMouseCaptured\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.IsMouseCapturedChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_IsMouseCapturedChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_IsMouseCapturedChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.IsMouseCapturedProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.IsMouseCaptureWithin\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.IsMouseCaptureWithinChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_IsMouseCaptureWithinChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_IsMouseCaptureWithinChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.IsMouseCaptureWithinProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.IsMouseDirectlyOver\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.IsMouseDirectlyOverChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_IsMouseDirectlyOverChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_IsMouseDirectlyOverChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.IsMouseDirectlyOverProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.IsMouseOver\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.IsMouseOverProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.IsStylusCaptured\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.IsStylusCapturedChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_IsStylusCapturedChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_IsStylusCapturedChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.IsStylusCapturedProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.IsStylusCaptureWithin\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.IsStylusCaptureWithinChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_IsStylusCaptureWithinChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_IsStylusCaptureWithinChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.IsStylusCaptureWithinProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.IsStylusDirectlyOver\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.IsStylusDirectlyOverChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_IsStylusDirectlyOverChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_IsStylusDirectlyOverChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.IsStylusDirectlyOverProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.IsStylusOver\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.IsStylusOverProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.IsVisible\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.IsVisibleChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_IsVisibleChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_IsVisibleChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.IsVisibleProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.KeyDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_KeyDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_KeyDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.KeyDownEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.KeyUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_KeyUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_KeyUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.KeyUpEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.LayoutUpdated\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_LayoutUpdated\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_LayoutUpdated\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.LostFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_LostFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_LostFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.LostFocusEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.LostKeyboardFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_LostKeyboardFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_LostKeyboardFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.LostKeyboardFocusEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.LostMouseCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_LostMouseCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_LostMouseCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.LostMouseCaptureEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.LostStylusCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_LostStylusCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_LostStylusCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.LostStylusCaptureEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.LostTouchCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_LostTouchCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_LostTouchCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.LostTouchCaptureEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.ManipulationBoundaryFeedback\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_ManipulationBoundaryFeedback\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_ManipulationBoundaryFeedback\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.ManipulationBoundaryFeedbackEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.ManipulationCompleted\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_ManipulationCompleted\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_ManipulationCompleted\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.ManipulationCompletedEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.ManipulationDelta\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_ManipulationDelta\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_ManipulationDelta\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.ManipulationDeltaEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.ManipulationInertiaStarting\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_ManipulationInertiaStarting\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_ManipulationInertiaStarting\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.ManipulationInertiaStartingEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.ManipulationStarted\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_ManipulationStarted\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_ManipulationStarted\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.ManipulationStartedEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.ManipulationStarting\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_ManipulationStarting\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_ManipulationStarting\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.ManipulationStartingEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.Measure\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.MeasureCore\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.MouseDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_MouseDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_MouseDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.MouseDownEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.MouseEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_MouseEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_MouseEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.MouseEnterEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.MouseLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_MouseLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_MouseLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.MouseLeaveEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.MouseLeftButtonDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_MouseLeftButtonDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_MouseLeftButtonDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.MouseLeftButtonDownEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.MouseLeftButtonUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_MouseLeftButtonUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_MouseLeftButtonUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.MouseLeftButtonUpEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.MouseMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_MouseMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_MouseMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.MouseMoveEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.MouseRightButtonDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_MouseRightButtonDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_MouseRightButtonDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.MouseRightButtonDownEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.MouseRightButtonUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_MouseRightButtonUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_MouseRightButtonUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.MouseRightButtonUpEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.MouseUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_MouseUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_MouseUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.MouseUpEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.MouseWheel\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_MouseWheel\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_MouseWheel\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.MouseWheelEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.MoveFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnAccessKey\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnChildDesiredSizeChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnCreateAutomationPeer\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnDragEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnDragLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnDragOver\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnDrop\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnGiveFeedback\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnGotFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnGotKeyboardFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnGotMouseCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnGotStylusCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnGotTouchCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnIsKeyboardFocusedChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnIsKeyboardFocusWithinChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnIsMouseCapturedChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnIsMouseCaptureWithinChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnIsMouseDirectlyOverChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnIsStylusCapturedChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnIsStylusCaptureWithinChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnIsStylusDirectlyOverChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnKeyDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnKeyUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnLostFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnLostKeyboardFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnLostMouseCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnLostStylusCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnLostTouchCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnManipulationBoundaryFeedback\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnManipulationCompleted\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnManipulationDelta\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnManipulationInertiaStarting\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnManipulationStarted\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnManipulationStarting\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnMouseDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnMouseEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnMouseLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnMouseLeftButtonDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnMouseLeftButtonUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnMouseMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnMouseRightButtonDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnMouseRightButtonUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnMouseUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnMouseWheel\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnPreviewDragEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnPreviewDragLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnPreviewDragOver\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnPreviewDrop\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnPreviewGiveFeedback\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnPreviewGotKeyboardFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnPreviewKeyDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnPreviewKeyUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnPreviewLostKeyboardFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnPreviewMouseDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnPreviewMouseLeftButtonDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnPreviewMouseLeftButtonUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnPreviewMouseMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnPreviewMouseRightButtonDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnPreviewMouseRightButtonUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnPreviewMouseUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnPreviewMouseWheel\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnPreviewQueryContinueDrag\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnPreviewStylusButtonDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnPreviewStylusButtonUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnPreviewStylusDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnPreviewStylusInAirMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnPreviewStylusInRange\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnPreviewStylusMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnPreviewStylusOutOfRange\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnPreviewStylusSystemGesture\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnPreviewStylusUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnPreviewTextInput\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnPreviewTouchDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnPreviewTouchMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnPreviewTouchUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnQueryContinueDrag\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnQueryCursor\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnRender\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnRenderSizeChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnStylusButtonDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnStylusButtonUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnStylusDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnStylusEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnStylusInAirMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnStylusInRange\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnStylusLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnStylusMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnStylusOutOfRange\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnStylusSystemGesture\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnStylusUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnTextInput\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnTouchDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnTouchEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnTouchLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnTouchMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnTouchUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OnVisualParentChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.Opacity\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OpacityMask\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OpacityMaskProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.OpacityProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PersistId\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PredictFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewDragEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_PreviewDragEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_PreviewDragEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewDragEnterEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewDragLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_PreviewDragLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_PreviewDragLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewDragLeaveEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewDragOver\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_PreviewDragOver\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_PreviewDragOver\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewDragOverEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewDrop\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_PreviewDrop\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_PreviewDrop\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewDropEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewGiveFeedback\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_PreviewGiveFeedback\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_PreviewGiveFeedback\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewGiveFeedbackEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewGotKeyboardFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_PreviewGotKeyboardFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_PreviewGotKeyboardFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewGotKeyboardFocusEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewKeyDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_PreviewKeyDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_PreviewKeyDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewKeyDownEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewKeyUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_PreviewKeyUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_PreviewKeyUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewKeyUpEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewLostKeyboardFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_PreviewLostKeyboardFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_PreviewLostKeyboardFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewLostKeyboardFocusEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewMouseDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_PreviewMouseDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_PreviewMouseDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewMouseDownEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewMouseLeftButtonDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_PreviewMouseLeftButtonDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_PreviewMouseLeftButtonDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewMouseLeftButtonDownEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewMouseLeftButtonUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_PreviewMouseLeftButtonUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_PreviewMouseLeftButtonUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewMouseLeftButtonUpEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewMouseMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_PreviewMouseMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_PreviewMouseMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewMouseMoveEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewMouseRightButtonDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_PreviewMouseRightButtonDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_PreviewMouseRightButtonDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewMouseRightButtonDownEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewMouseRightButtonUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_PreviewMouseRightButtonUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_PreviewMouseRightButtonUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewMouseRightButtonUpEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewMouseUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_PreviewMouseUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_PreviewMouseUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewMouseUpEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewMouseWheel\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_PreviewMouseWheel\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_PreviewMouseWheel\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewMouseWheelEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewQueryContinueDrag\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_PreviewQueryContinueDrag\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_PreviewQueryContinueDrag\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewQueryContinueDragEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewStylusButtonDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_PreviewStylusButtonDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_PreviewStylusButtonDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewStylusButtonDownEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewStylusButtonUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_PreviewStylusButtonUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_PreviewStylusButtonUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewStylusButtonUpEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewStylusDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_PreviewStylusDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_PreviewStylusDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewStylusDownEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewStylusInAirMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_PreviewStylusInAirMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_PreviewStylusInAirMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewStylusInAirMoveEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewStylusInRange\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_PreviewStylusInRange\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_PreviewStylusInRange\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewStylusInRangeEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewStylusMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_PreviewStylusMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_PreviewStylusMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewStylusMoveEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewStylusOutOfRange\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_PreviewStylusOutOfRange\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_PreviewStylusOutOfRange\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewStylusOutOfRangeEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewStylusSystemGesture\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_PreviewStylusSystemGesture\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_PreviewStylusSystemGesture\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewStylusSystemGestureEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewStylusUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_PreviewStylusUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_PreviewStylusUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewStylusUpEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewTextInput\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_PreviewTextInput\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_PreviewTextInput\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewTextInputEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewTouchDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_PreviewTouchDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_PreviewTouchDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewTouchDownEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewTouchMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_PreviewTouchMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_PreviewTouchMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewTouchMoveEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewTouchUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_PreviewTouchUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_PreviewTouchUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.PreviewTouchUpEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.QueryContinueDrag\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_QueryContinueDrag\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_QueryContinueDrag\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.QueryContinueDragEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.QueryCursor\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_QueryCursor\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_QueryCursor\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.QueryCursorEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.RaiseEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.ReleaseAllTouchCaptures\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.ReleaseMouseCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.ReleaseStylusCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.ReleaseTouchCapture\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.RemoveHandler\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.RenderSize\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.RenderTransform\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.RenderTransformOrigin\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.RenderTransformOriginProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.RenderTransformProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.ShouldSerializeCommandBindings\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.ShouldSerializeInputBindings\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.SnapsToDevicePixels\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.SnapsToDevicePixelsProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.StylusButtonDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_StylusButtonDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_StylusButtonDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.StylusButtonDownEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.StylusButtonUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_StylusButtonUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_StylusButtonUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.StylusButtonUpEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.StylusDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_StylusDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_StylusDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.StylusDownEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.StylusEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_StylusEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_StylusEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.StylusEnterEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.StylusInAirMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_StylusInAirMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_StylusInAirMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.StylusInAirMoveEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.StylusInRange\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_StylusInRange\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_StylusInRange\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.StylusInRangeEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.StylusLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_StylusLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_StylusLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.StylusLeaveEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.StylusMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_StylusMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_StylusMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.StylusMoveEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.StylusOutOfRange\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_StylusOutOfRange\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_StylusOutOfRange\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.StylusOutOfRangeEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.StylusPlugIns\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.StylusSystemGesture\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_StylusSystemGesture\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_StylusSystemGesture\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.StylusSystemGestureEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.StylusUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_StylusUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_StylusUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.StylusUpEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.TextInput\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_TextInput\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_TextInput\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.TextInputEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.TouchDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_TouchDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_TouchDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.TouchDownEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.TouchEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_TouchEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_TouchEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.TouchEnterEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.TouchesCaptured\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.TouchesCapturedWithin\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.TouchesDirectlyOver\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.TouchesOver\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.TouchLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_TouchLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_TouchLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.TouchLeaveEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.TouchMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_TouchMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_TouchMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.TouchMoveEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.TouchUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.add_TouchUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.remove_TouchUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.TouchUpEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.TranslatePoint\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.Uid\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.UidProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.UpdateLayout\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.Visibility\">\r\n<meta name=\"APIName\" content=\"System.Windows.UIElement.VisibilityProperty\">\r\n<meta name=\"APILocation\" content=\"PresentationCore.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"3ba5cfbe-23d1-0499-28bd-693336c98ac1\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"UIElement is a base class for WPF core level implementations building on Windows Presentation Foundation (WPF) elements and basic presentation characteristics.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Windows/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.UIElement\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.UIElement.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.UIElement.yml","open_to_public_contributors":true,"api_name":["System.Windows.UIElement","System.Windows.UIElement..ctor","System.Windows.UIElement.AddHandler","System.Windows.UIElement.AddToEventRoute","System.Windows.UIElement.AllowDrop","System.Windows.UIElement.AllowDropProperty","System.Windows.UIElement.ApplyAnimationClock","System.Windows.UIElement.AreAnyTouchesCaptured","System.Windows.UIElement.AreAnyTouchesCapturedProperty","System.Windows.UIElement.AreAnyTouchesCapturedWithin","System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty","System.Windows.UIElement.AreAnyTouchesDirectlyOver","System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty","System.Windows.UIElement.AreAnyTouchesOver","System.Windows.UIElement.AreAnyTouchesOverProperty","System.Windows.UIElement.Arrange","System.Windows.UIElement.ArrangeCore","System.Windows.UIElement.BeginAnimation","System.Windows.UIElement.BitmapEffect","System.Windows.UIElement.BitmapEffectInput","System.Windows.UIElement.BitmapEffectInputProperty","System.Windows.UIElement.BitmapEffectProperty","System.Windows.UIElement.CacheMode","System.Windows.UIElement.CacheModeProperty","System.Windows.UIElement.CaptureMouse","System.Windows.UIElement.CaptureStylus","System.Windows.UIElement.CaptureTouch","System.Windows.UIElement.Clip","System.Windows.UIElement.ClipProperty","System.Windows.UIElement.ClipToBounds","System.Windows.UIElement.ClipToBoundsProperty","System.Windows.UIElement.CommandBindings","System.Windows.UIElement.DesiredSize","System.Windows.UIElement.DragEnter","System.Windows.UIElement.add_DragEnter","System.Windows.UIElement.remove_DragEnter","System.Windows.UIElement.DragEnterEvent","System.Windows.UIElement.DragLeave","System.Windows.UIElement.add_DragLeave","System.Windows.UIElement.remove_DragLeave","System.Windows.UIElement.DragLeaveEvent","System.Windows.UIElement.DragOver","System.Windows.UIElement.add_DragOver","System.Windows.UIElement.remove_DragOver","System.Windows.UIElement.DragOverEvent","System.Windows.UIElement.Drop","System.Windows.UIElement.add_Drop","System.Windows.UIElement.remove_Drop","System.Windows.UIElement.DropEvent","System.Windows.UIElement.Effect","System.Windows.UIElement.EffectProperty","System.Windows.UIElement.Focus","System.Windows.UIElement.Focusable","System.Windows.UIElement.FocusableChanged","System.Windows.UIElement.add_FocusableChanged","System.Windows.UIElement.remove_FocusableChanged","System.Windows.UIElement.FocusableProperty","System.Windows.UIElement.GetAnimationBaseValue","System.Windows.UIElement.GetLayoutClip","System.Windows.UIElement.GetUIParentCore","System.Windows.UIElement.GiveFeedback","System.Windows.UIElement.add_GiveFeedback","System.Windows.UIElement.remove_GiveFeedback","System.Windows.UIElement.GiveFeedbackEvent","System.Windows.UIElement.GotFocus","System.Windows.UIElement.add_GotFocus","System.Windows.UIElement.remove_GotFocus","System.Windows.UIElement.GotFocusEvent","System.Windows.UIElement.GotKeyboardFocus","System.Windows.UIElement.add_GotKeyboardFocus","System.Windows.UIElement.remove_GotKeyboardFocus","System.Windows.UIElement.GotKeyboardFocusEvent","System.Windows.UIElement.GotMouseCapture","System.Windows.UIElement.add_GotMouseCapture","System.Windows.UIElement.remove_GotMouseCapture","System.Windows.UIElement.GotMouseCaptureEvent","System.Windows.UIElement.GotStylusCapture","System.Windows.UIElement.add_GotStylusCapture","System.Windows.UIElement.remove_GotStylusCapture","System.Windows.UIElement.GotStylusCaptureEvent","System.Windows.UIElement.GotTouchCapture","System.Windows.UIElement.add_GotTouchCapture","System.Windows.UIElement.remove_GotTouchCapture","System.Windows.UIElement.GotTouchCaptureEvent","System.Windows.UIElement.HasAnimatedProperties","System.Windows.UIElement.HasEffectiveKeyboardFocus","System.Windows.UIElement.HitTestCore","System.Windows.UIElement.InputBindings","System.Windows.UIElement.InputHitTest","System.Windows.UIElement.InvalidateArrange","System.Windows.UIElement.InvalidateMeasure","System.Windows.UIElement.InvalidateVisual","System.Windows.UIElement.IsArrangeValid","System.Windows.UIElement.IsEnabled","System.Windows.UIElement.IsEnabledChanged","System.Windows.UIElement.add_IsEnabledChanged","System.Windows.UIElement.remove_IsEnabledChanged","System.Windows.UIElement.IsEnabledCore","System.Windows.UIElement.IsEnabledProperty","System.Windows.UIElement.IsFocused","System.Windows.UIElement.IsFocusedProperty","System.Windows.UIElement.IsHitTestVisible","System.Windows.UIElement.IsHitTestVisibleChanged","System.Windows.UIElement.add_IsHitTestVisibleChanged","System.Windows.UIElement.remove_IsHitTestVisibleChanged","System.Windows.UIElement.IsHitTestVisibleProperty","System.Windows.UIElement.IsInputMethodEnabled","System.Windows.UIElement.IsKeyboardFocused","System.Windows.UIElement.IsKeyboardFocusedChanged","System.Windows.UIElement.add_IsKeyboardFocusedChanged","System.Windows.UIElement.remove_IsKeyboardFocusedChanged","System.Windows.UIElement.IsKeyboardFocusedProperty","System.Windows.UIElement.IsKeyboardFocusWithin","System.Windows.UIElement.IsKeyboardFocusWithinChanged","System.Windows.UIElement.add_IsKeyboardFocusWithinChanged","System.Windows.UIElement.remove_IsKeyboardFocusWithinChanged","System.Windows.UIElement.IsKeyboardFocusWithinProperty","System.Windows.UIElement.IsManipulationEnabled","System.Windows.UIElement.IsManipulationEnabledProperty","System.Windows.UIElement.IsMeasureValid","System.Windows.UIElement.IsMouseCaptured","System.Windows.UIElement.IsMouseCapturedChanged","System.Windows.UIElement.add_IsMouseCapturedChanged","System.Windows.UIElement.remove_IsMouseCapturedChanged","System.Windows.UIElement.IsMouseCapturedProperty","System.Windows.UIElement.IsMouseCaptureWithin","System.Windows.UIElement.IsMouseCaptureWithinChanged","System.Windows.UIElement.add_IsMouseCaptureWithinChanged","System.Windows.UIElement.remove_IsMouseCaptureWithinChanged","System.Windows.UIElement.IsMouseCaptureWithinProperty","System.Windows.UIElement.IsMouseDirectlyOver","System.Windows.UIElement.IsMouseDirectlyOverChanged","System.Windows.UIElement.add_IsMouseDirectlyOverChanged","System.Windows.UIElement.remove_IsMouseDirectlyOverChanged","System.Windows.UIElement.IsMouseDirectlyOverProperty","System.Windows.UIElement.IsMouseOver","System.Windows.UIElement.IsMouseOverProperty","System.Windows.UIElement.IsStylusCaptured","System.Windows.UIElement.IsStylusCapturedChanged","System.Windows.UIElement.add_IsStylusCapturedChanged","System.Windows.UIElement.remove_IsStylusCapturedChanged","System.Windows.UIElement.IsStylusCapturedProperty","System.Windows.UIElement.IsStylusCaptureWithin","System.Windows.UIElement.IsStylusCaptureWithinChanged","System.Windows.UIElement.add_IsStylusCaptureWithinChanged","System.Windows.UIElement.remove_IsStylusCaptureWithinChanged","System.Windows.UIElement.IsStylusCaptureWithinProperty","System.Windows.UIElement.IsStylusDirectlyOver","System.Windows.UIElement.IsStylusDirectlyOverChanged","System.Windows.UIElement.add_IsStylusDirectlyOverChanged","System.Windows.UIElement.remove_IsStylusDirectlyOverChanged","System.Windows.UIElement.IsStylusDirectlyOverProperty","System.Windows.UIElement.IsStylusOver","System.Windows.UIElement.IsStylusOverProperty","System.Windows.UIElement.IsVisible","System.Windows.UIElement.IsVisibleChanged","System.Windows.UIElement.add_IsVisibleChanged","System.Windows.UIElement.remove_IsVisibleChanged","System.Windows.UIElement.IsVisibleProperty","System.Windows.UIElement.KeyDown","System.Windows.UIElement.add_KeyDown","System.Windows.UIElement.remove_KeyDown","System.Windows.UIElement.KeyDownEvent","System.Windows.UIElement.KeyUp","System.Windows.UIElement.add_KeyUp","System.Windows.UIElement.remove_KeyUp","System.Windows.UIElement.KeyUpEvent","System.Windows.UIElement.LayoutUpdated","System.Windows.UIElement.add_LayoutUpdated","System.Windows.UIElement.remove_LayoutUpdated","System.Windows.UIElement.LostFocus","System.Windows.UIElement.add_LostFocus","System.Windows.UIElement.remove_LostFocus","System.Windows.UIElement.LostFocusEvent","System.Windows.UIElement.LostKeyboardFocus","System.Windows.UIElement.add_LostKeyboardFocus","System.Windows.UIElement.remove_LostKeyboardFocus","System.Windows.UIElement.LostKeyboardFocusEvent","System.Windows.UIElement.LostMouseCapture","System.Windows.UIElement.add_LostMouseCapture","System.Windows.UIElement.remove_LostMouseCapture","System.Windows.UIElement.LostMouseCaptureEvent","System.Windows.UIElement.LostStylusCapture","System.Windows.UIElement.add_LostStylusCapture","System.Windows.UIElement.remove_LostStylusCapture","System.Windows.UIElement.LostStylusCaptureEvent","System.Windows.UIElement.LostTouchCapture","System.Windows.UIElement.add_LostTouchCapture","System.Windows.UIElement.remove_LostTouchCapture","System.Windows.UIElement.LostTouchCaptureEvent","System.Windows.UIElement.ManipulationBoundaryFeedback","System.Windows.UIElement.add_ManipulationBoundaryFeedback","System.Windows.UIElement.remove_ManipulationBoundaryFeedback","System.Windows.UIElement.ManipulationBoundaryFeedbackEvent","System.Windows.UIElement.ManipulationCompleted","System.Windows.UIElement.add_ManipulationCompleted","System.Windows.UIElement.remove_ManipulationCompleted","System.Windows.UIElement.ManipulationCompletedEvent","System.Windows.UIElement.ManipulationDelta","System.Windows.UIElement.add_ManipulationDelta","System.Windows.UIElement.remove_ManipulationDelta","System.Windows.UIElement.ManipulationDeltaEvent","System.Windows.UIElement.ManipulationInertiaStarting","System.Windows.UIElement.add_ManipulationInertiaStarting","System.Windows.UIElement.remove_ManipulationInertiaStarting","System.Windows.UIElement.ManipulationInertiaStartingEvent","System.Windows.UIElement.ManipulationStarted","System.Windows.UIElement.add_ManipulationStarted","System.Windows.UIElement.remove_ManipulationStarted","System.Windows.UIElement.ManipulationStartedEvent","System.Windows.UIElement.ManipulationStarting","System.Windows.UIElement.add_ManipulationStarting","System.Windows.UIElement.remove_ManipulationStarting","System.Windows.UIElement.ManipulationStartingEvent","System.Windows.UIElement.Measure","System.Windows.UIElement.MeasureCore","System.Windows.UIElement.MouseDown","System.Windows.UIElement.add_MouseDown","System.Windows.UIElement.remove_MouseDown","System.Windows.UIElement.MouseDownEvent","System.Windows.UIElement.MouseEnter","System.Windows.UIElement.add_MouseEnter","System.Windows.UIElement.remove_MouseEnter","System.Windows.UIElement.MouseEnterEvent","System.Windows.UIElement.MouseLeave","System.Windows.UIElement.add_MouseLeave","System.Windows.UIElement.remove_MouseLeave","System.Windows.UIElement.MouseLeaveEvent","System.Windows.UIElement.MouseLeftButtonDown","System.Windows.UIElement.add_MouseLeftButtonDown","System.Windows.UIElement.remove_MouseLeftButtonDown","System.Windows.UIElement.MouseLeftButtonDownEvent","System.Windows.UIElement.MouseLeftButtonUp","System.Windows.UIElement.add_MouseLeftButtonUp","System.Windows.UIElement.remove_MouseLeftButtonUp","System.Windows.UIElement.MouseLeftButtonUpEvent","System.Windows.UIElement.MouseMove","System.Windows.UIElement.add_MouseMove","System.Windows.UIElement.remove_MouseMove","System.Windows.UIElement.MouseMoveEvent","System.Windows.UIElement.MouseRightButtonDown","System.Windows.UIElement.add_MouseRightButtonDown","System.Windows.UIElement.remove_MouseRightButtonDown","System.Windows.UIElement.MouseRightButtonDownEvent","System.Windows.UIElement.MouseRightButtonUp","System.Windows.UIElement.add_MouseRightButtonUp","System.Windows.UIElement.remove_MouseRightButtonUp","System.Windows.UIElement.MouseRightButtonUpEvent","System.Windows.UIElement.MouseUp","System.Windows.UIElement.add_MouseUp","System.Windows.UIElement.remove_MouseUp","System.Windows.UIElement.MouseUpEvent","System.Windows.UIElement.MouseWheel","System.Windows.UIElement.add_MouseWheel","System.Windows.UIElement.remove_MouseWheel","System.Windows.UIElement.MouseWheelEvent","System.Windows.UIElement.MoveFocus","System.Windows.UIElement.OnAccessKey","System.Windows.UIElement.OnChildDesiredSizeChanged","System.Windows.UIElement.OnCreateAutomationPeer","System.Windows.UIElement.OnDragEnter","System.Windows.UIElement.OnDragLeave","System.Windows.UIElement.OnDragOver","System.Windows.UIElement.OnDrop","System.Windows.UIElement.OnGiveFeedback","System.Windows.UIElement.OnGotFocus","System.Windows.UIElement.OnGotKeyboardFocus","System.Windows.UIElement.OnGotMouseCapture","System.Windows.UIElement.OnGotStylusCapture","System.Windows.UIElement.OnGotTouchCapture","System.Windows.UIElement.OnIsKeyboardFocusedChanged","System.Windows.UIElement.OnIsKeyboardFocusWithinChanged","System.Windows.UIElement.OnIsMouseCapturedChanged","System.Windows.UIElement.OnIsMouseCaptureWithinChanged","System.Windows.UIElement.OnIsMouseDirectlyOverChanged","System.Windows.UIElement.OnIsStylusCapturedChanged","System.Windows.UIElement.OnIsStylusCaptureWithinChanged","System.Windows.UIElement.OnIsStylusDirectlyOverChanged","System.Windows.UIElement.OnKeyDown","System.Windows.UIElement.OnKeyUp","System.Windows.UIElement.OnLostFocus","System.Windows.UIElement.OnLostKeyboardFocus","System.Windows.UIElement.OnLostMouseCapture","System.Windows.UIElement.OnLostStylusCapture","System.Windows.UIElement.OnLostTouchCapture","System.Windows.UIElement.OnManipulationBoundaryFeedback","System.Windows.UIElement.OnManipulationCompleted","System.Windows.UIElement.OnManipulationDelta","System.Windows.UIElement.OnManipulationInertiaStarting","System.Windows.UIElement.OnManipulationStarted","System.Windows.UIElement.OnManipulationStarting","System.Windows.UIElement.OnMouseDown","System.Windows.UIElement.OnMouseEnter","System.Windows.UIElement.OnMouseLeave","System.Windows.UIElement.OnMouseLeftButtonDown","System.Windows.UIElement.OnMouseLeftButtonUp","System.Windows.UIElement.OnMouseMove","System.Windows.UIElement.OnMouseRightButtonDown","System.Windows.UIElement.OnMouseRightButtonUp","System.Windows.UIElement.OnMouseUp","System.Windows.UIElement.OnMouseWheel","System.Windows.UIElement.OnPreviewDragEnter","System.Windows.UIElement.OnPreviewDragLeave","System.Windows.UIElement.OnPreviewDragOver","System.Windows.UIElement.OnPreviewDrop","System.Windows.UIElement.OnPreviewGiveFeedback","System.Windows.UIElement.OnPreviewGotKeyboardFocus","System.Windows.UIElement.OnPreviewKeyDown","System.Windows.UIElement.OnPreviewKeyUp","System.Windows.UIElement.OnPreviewLostKeyboardFocus","System.Windows.UIElement.OnPreviewMouseDown","System.Windows.UIElement.OnPreviewMouseLeftButtonDown","System.Windows.UIElement.OnPreviewMouseLeftButtonUp","System.Windows.UIElement.OnPreviewMouseMove","System.Windows.UIElement.OnPreviewMouseRightButtonDown","System.Windows.UIElement.OnPreviewMouseRightButtonUp","System.Windows.UIElement.OnPreviewMouseUp","System.Windows.UIElement.OnPreviewMouseWheel","System.Windows.UIElement.OnPreviewQueryContinueDrag","System.Windows.UIElement.OnPreviewStylusButtonDown","System.Windows.UIElement.OnPreviewStylusButtonUp","System.Windows.UIElement.OnPreviewStylusDown","System.Windows.UIElement.OnPreviewStylusInAirMove","System.Windows.UIElement.OnPreviewStylusInRange","System.Windows.UIElement.OnPreviewStylusMove","System.Windows.UIElement.OnPreviewStylusOutOfRange","System.Windows.UIElement.OnPreviewStylusSystemGesture","System.Windows.UIElement.OnPreviewStylusUp","System.Windows.UIElement.OnPreviewTextInput","System.Windows.UIElement.OnPreviewTouchDown","System.Windows.UIElement.OnPreviewTouchMove","System.Windows.UIElement.OnPreviewTouchUp","System.Windows.UIElement.OnQueryContinueDrag","System.Windows.UIElement.OnQueryCursor","System.Windows.UIElement.OnRender","System.Windows.UIElement.OnRenderSizeChanged","System.Windows.UIElement.OnStylusButtonDown","System.Windows.UIElement.OnStylusButtonUp","System.Windows.UIElement.OnStylusDown","System.Windows.UIElement.OnStylusEnter","System.Windows.UIElement.OnStylusInAirMove","System.Windows.UIElement.OnStylusInRange","System.Windows.UIElement.OnStylusLeave","System.Windows.UIElement.OnStylusMove","System.Windows.UIElement.OnStylusOutOfRange","System.Windows.UIElement.OnStylusSystemGesture","System.Windows.UIElement.OnStylusUp","System.Windows.UIElement.OnTextInput","System.Windows.UIElement.OnTouchDown","System.Windows.UIElement.OnTouchEnter","System.Windows.UIElement.OnTouchLeave","System.Windows.UIElement.OnTouchMove","System.Windows.UIElement.OnTouchUp","System.Windows.UIElement.OnVisualParentChanged","System.Windows.UIElement.Opacity","System.Windows.UIElement.OpacityMask","System.Windows.UIElement.OpacityMaskProperty","System.Windows.UIElement.OpacityProperty","System.Windows.UIElement.PersistId","System.Windows.UIElement.PredictFocus","System.Windows.UIElement.PreviewDragEnter","System.Windows.UIElement.add_PreviewDragEnter","System.Windows.UIElement.remove_PreviewDragEnter","System.Windows.UIElement.PreviewDragEnterEvent","System.Windows.UIElement.PreviewDragLeave","System.Windows.UIElement.add_PreviewDragLeave","System.Windows.UIElement.remove_PreviewDragLeave","System.Windows.UIElement.PreviewDragLeaveEvent","System.Windows.UIElement.PreviewDragOver","System.Windows.UIElement.add_PreviewDragOver","System.Windows.UIElement.remove_PreviewDragOver","System.Windows.UIElement.PreviewDragOverEvent","System.Windows.UIElement.PreviewDrop","System.Windows.UIElement.add_PreviewDrop","System.Windows.UIElement.remove_PreviewDrop","System.Windows.UIElement.PreviewDropEvent","System.Windows.UIElement.PreviewGiveFeedback","System.Windows.UIElement.add_PreviewGiveFeedback","System.Windows.UIElement.remove_PreviewGiveFeedback","System.Windows.UIElement.PreviewGiveFeedbackEvent","System.Windows.UIElement.PreviewGotKeyboardFocus","System.Windows.UIElement.add_PreviewGotKeyboardFocus","System.Windows.UIElement.remove_PreviewGotKeyboardFocus","System.Windows.UIElement.PreviewGotKeyboardFocusEvent","System.Windows.UIElement.PreviewKeyDown","System.Windows.UIElement.add_PreviewKeyDown","System.Windows.UIElement.remove_PreviewKeyDown","System.Windows.UIElement.PreviewKeyDownEvent","System.Windows.UIElement.PreviewKeyUp","System.Windows.UIElement.add_PreviewKeyUp","System.Windows.UIElement.remove_PreviewKeyUp","System.Windows.UIElement.PreviewKeyUpEvent","System.Windows.UIElement.PreviewLostKeyboardFocus","System.Windows.UIElement.add_PreviewLostKeyboardFocus","System.Windows.UIElement.remove_PreviewLostKeyboardFocus","System.Windows.UIElement.PreviewLostKeyboardFocusEvent","System.Windows.UIElement.PreviewMouseDown","System.Windows.UIElement.add_PreviewMouseDown","System.Windows.UIElement.remove_PreviewMouseDown","System.Windows.UIElement.PreviewMouseDownEvent","System.Windows.UIElement.PreviewMouseLeftButtonDown","System.Windows.UIElement.add_PreviewMouseLeftButtonDown","System.Windows.UIElement.remove_PreviewMouseLeftButtonDown","System.Windows.UIElement.PreviewMouseLeftButtonDownEvent","System.Windows.UIElement.PreviewMouseLeftButtonUp","System.Windows.UIElement.add_PreviewMouseLeftButtonUp","System.Windows.UIElement.remove_PreviewMouseLeftButtonUp","System.Windows.UIElement.PreviewMouseLeftButtonUpEvent","System.Windows.UIElement.PreviewMouseMove","System.Windows.UIElement.add_PreviewMouseMove","System.Windows.UIElement.remove_PreviewMouseMove","System.Windows.UIElement.PreviewMouseMoveEvent","System.Windows.UIElement.PreviewMouseRightButtonDown","System.Windows.UIElement.add_PreviewMouseRightButtonDown","System.Windows.UIElement.remove_PreviewMouseRightButtonDown","System.Windows.UIElement.PreviewMouseRightButtonDownEvent","System.Windows.UIElement.PreviewMouseRightButtonUp","System.Windows.UIElement.add_PreviewMouseRightButtonUp","System.Windows.UIElement.remove_PreviewMouseRightButtonUp","System.Windows.UIElement.PreviewMouseRightButtonUpEvent","System.Windows.UIElement.PreviewMouseUp","System.Windows.UIElement.add_PreviewMouseUp","System.Windows.UIElement.remove_PreviewMouseUp","System.Windows.UIElement.PreviewMouseUpEvent","System.Windows.UIElement.PreviewMouseWheel","System.Windows.UIElement.add_PreviewMouseWheel","System.Windows.UIElement.remove_PreviewMouseWheel","System.Windows.UIElement.PreviewMouseWheelEvent","System.Windows.UIElement.PreviewQueryContinueDrag","System.Windows.UIElement.add_PreviewQueryContinueDrag","System.Windows.UIElement.remove_PreviewQueryContinueDrag","System.Windows.UIElement.PreviewQueryContinueDragEvent","System.Windows.UIElement.PreviewStylusButtonDown","System.Windows.UIElement.add_PreviewStylusButtonDown","System.Windows.UIElement.remove_PreviewStylusButtonDown","System.Windows.UIElement.PreviewStylusButtonDownEvent","System.Windows.UIElement.PreviewStylusButtonUp","System.Windows.UIElement.add_PreviewStylusButtonUp","System.Windows.UIElement.remove_PreviewStylusButtonUp","System.Windows.UIElement.PreviewStylusButtonUpEvent","System.Windows.UIElement.PreviewStylusDown","System.Windows.UIElement.add_PreviewStylusDown","System.Windows.UIElement.remove_PreviewStylusDown","System.Windows.UIElement.PreviewStylusDownEvent","System.Windows.UIElement.PreviewStylusInAirMove","System.Windows.UIElement.add_PreviewStylusInAirMove","System.Windows.UIElement.remove_PreviewStylusInAirMove","System.Windows.UIElement.PreviewStylusInAirMoveEvent","System.Windows.UIElement.PreviewStylusInRange","System.Windows.UIElement.add_PreviewStylusInRange","System.Windows.UIElement.remove_PreviewStylusInRange","System.Windows.UIElement.PreviewStylusInRangeEvent","System.Windows.UIElement.PreviewStylusMove","System.Windows.UIElement.add_PreviewStylusMove","System.Windows.UIElement.remove_PreviewStylusMove","System.Windows.UIElement.PreviewStylusMoveEvent","System.Windows.UIElement.PreviewStylusOutOfRange","System.Windows.UIElement.add_PreviewStylusOutOfRange","System.Windows.UIElement.remove_PreviewStylusOutOfRange","System.Windows.UIElement.PreviewStylusOutOfRangeEvent","System.Windows.UIElement.PreviewStylusSystemGesture","System.Windows.UIElement.add_PreviewStylusSystemGesture","System.Windows.UIElement.remove_PreviewStylusSystemGesture","System.Windows.UIElement.PreviewStylusSystemGestureEvent","System.Windows.UIElement.PreviewStylusUp","System.Windows.UIElement.add_PreviewStylusUp","System.Windows.UIElement.remove_PreviewStylusUp","System.Windows.UIElement.PreviewStylusUpEvent","System.Windows.UIElement.PreviewTextInput","System.Windows.UIElement.add_PreviewTextInput","System.Windows.UIElement.remove_PreviewTextInput","System.Windows.UIElement.PreviewTextInputEvent","System.Windows.UIElement.PreviewTouchDown","System.Windows.UIElement.add_PreviewTouchDown","System.Windows.UIElement.remove_PreviewTouchDown","System.Windows.UIElement.PreviewTouchDownEvent","System.Windows.UIElement.PreviewTouchMove","System.Windows.UIElement.add_PreviewTouchMove","System.Windows.UIElement.remove_PreviewTouchMove","System.Windows.UIElement.PreviewTouchMoveEvent","System.Windows.UIElement.PreviewTouchUp","System.Windows.UIElement.add_PreviewTouchUp","System.Windows.UIElement.remove_PreviewTouchUp","System.Windows.UIElement.PreviewTouchUpEvent","System.Windows.UIElement.QueryContinueDrag","System.Windows.UIElement.add_QueryContinueDrag","System.Windows.UIElement.remove_QueryContinueDrag","System.Windows.UIElement.QueryContinueDragEvent","System.Windows.UIElement.QueryCursor","System.Windows.UIElement.add_QueryCursor","System.Windows.UIElement.remove_QueryCursor","System.Windows.UIElement.QueryCursorEvent","System.Windows.UIElement.RaiseEvent","System.Windows.UIElement.ReleaseAllTouchCaptures","System.Windows.UIElement.ReleaseMouseCapture","System.Windows.UIElement.ReleaseStylusCapture","System.Windows.UIElement.ReleaseTouchCapture","System.Windows.UIElement.RemoveHandler","System.Windows.UIElement.RenderSize","System.Windows.UIElement.RenderTransform","System.Windows.UIElement.RenderTransformOrigin","System.Windows.UIElement.RenderTransformOriginProperty","System.Windows.UIElement.RenderTransformProperty","System.Windows.UIElement.ShouldSerializeCommandBindings","System.Windows.UIElement.ShouldSerializeInputBindings","System.Windows.UIElement.SnapsToDevicePixels","System.Windows.UIElement.SnapsToDevicePixelsProperty","System.Windows.UIElement.StylusButtonDown","System.Windows.UIElement.add_StylusButtonDown","System.Windows.UIElement.remove_StylusButtonDown","System.Windows.UIElement.StylusButtonDownEvent","System.Windows.UIElement.StylusButtonUp","System.Windows.UIElement.add_StylusButtonUp","System.Windows.UIElement.remove_StylusButtonUp","System.Windows.UIElement.StylusButtonUpEvent","System.Windows.UIElement.StylusDown","System.Windows.UIElement.add_StylusDown","System.Windows.UIElement.remove_StylusDown","System.Windows.UIElement.StylusDownEvent","System.Windows.UIElement.StylusEnter","System.Windows.UIElement.add_StylusEnter","System.Windows.UIElement.remove_StylusEnter","System.Windows.UIElement.StylusEnterEvent","System.Windows.UIElement.StylusInAirMove","System.Windows.UIElement.add_StylusInAirMove","System.Windows.UIElement.remove_StylusInAirMove","System.Windows.UIElement.StylusInAirMoveEvent","System.Windows.UIElement.StylusInRange","System.Windows.UIElement.add_StylusInRange","System.Windows.UIElement.remove_StylusInRange","System.Windows.UIElement.StylusInRangeEvent","System.Windows.UIElement.StylusLeave","System.Windows.UIElement.add_StylusLeave","System.Windows.UIElement.remove_StylusLeave","System.Windows.UIElement.StylusLeaveEvent","System.Windows.UIElement.StylusMove","System.Windows.UIElement.add_StylusMove","System.Windows.UIElement.remove_StylusMove","System.Windows.UIElement.StylusMoveEvent","System.Windows.UIElement.StylusOutOfRange","System.Windows.UIElement.add_StylusOutOfRange","System.Windows.UIElement.remove_StylusOutOfRange","System.Windows.UIElement.StylusOutOfRangeEvent","System.Windows.UIElement.StylusPlugIns","System.Windows.UIElement.StylusSystemGesture","System.Windows.UIElement.add_StylusSystemGesture","System.Windows.UIElement.remove_StylusSystemGesture","System.Windows.UIElement.StylusSystemGestureEvent","System.Windows.UIElement.StylusUp","System.Windows.UIElement.add_StylusUp","System.Windows.UIElement.remove_StylusUp","System.Windows.UIElement.StylusUpEvent","System.Windows.UIElement.TextInput","System.Windows.UIElement.add_TextInput","System.Windows.UIElement.remove_TextInput","System.Windows.UIElement.TextInputEvent","System.Windows.UIElement.TouchDown","System.Windows.UIElement.add_TouchDown","System.Windows.UIElement.remove_TouchDown","System.Windows.UIElement.TouchDownEvent","System.Windows.UIElement.TouchEnter","System.Windows.UIElement.add_TouchEnter","System.Windows.UIElement.remove_TouchEnter","System.Windows.UIElement.TouchEnterEvent","System.Windows.UIElement.TouchesCaptured","System.Windows.UIElement.TouchesCapturedWithin","System.Windows.UIElement.TouchesDirectlyOver","System.Windows.UIElement.TouchesOver","System.Windows.UIElement.TouchLeave","System.Windows.UIElement.add_TouchLeave","System.Windows.UIElement.remove_TouchLeave","System.Windows.UIElement.TouchLeaveEvent","System.Windows.UIElement.TouchMove","System.Windows.UIElement.add_TouchMove","System.Windows.UIElement.remove_TouchMove","System.Windows.UIElement.TouchMoveEvent","System.Windows.UIElement.TouchUp","System.Windows.UIElement.add_TouchUp","System.Windows.UIElement.remove_TouchUp","System.Windows.UIElement.TouchUpEvent","System.Windows.UIElement.TranslatePoint","System.Windows.UIElement.Uid","System.Windows.UIElement.UidProperty","System.Windows.UIElement.UpdateLayout","System.Windows.UIElement.Visibility","System.Windows.UIElement.VisibilityProperty"],"api_location":["PresentationCore.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.UIElement","System::Windows::UIElement","System.Windows.UIElement.#ctor","System::Windows::UIElement::#ctor","System.Windows.UIElement.AddHandler","System::Windows::UIElement::AddHandler","System.Windows.UIElement.AddToEventRoute","System::Windows::UIElement::AddToEventRoute","System.Windows.UIElement.AllowDrop","System::Windows::UIElement::AllowDrop","System.Windows.UIElement.AllowDropProperty","System::Windows::UIElement::AllowDropProperty","System.Windows.UIElement.ApplyAnimationClock","System::Windows::UIElement::ApplyAnimationClock","System.Windows.UIElement.AreAnyTouchesCaptured","System::Windows::UIElement::AreAnyTouchesCaptured","System.Windows.UIElement.AreAnyTouchesCapturedProperty","System::Windows::UIElement::AreAnyTouchesCapturedProperty","System.Windows.UIElement.AreAnyTouchesCapturedWithin","System::Windows::UIElement::AreAnyTouchesCapturedWithin","System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty","System::Windows::UIElement::AreAnyTouchesCapturedWithinProperty","System.Windows.UIElement.AreAnyTouchesDirectlyOver","System::Windows::UIElement::AreAnyTouchesDirectlyOver","System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty","System::Windows::UIElement::AreAnyTouchesDirectlyOverProperty","System.Windows.UIElement.AreAnyTouchesOver","System::Windows::UIElement::AreAnyTouchesOver","System.Windows.UIElement.AreAnyTouchesOverProperty","System::Windows::UIElement::AreAnyTouchesOverProperty","System.Windows.UIElement.Arrange","System::Windows::UIElement::Arrange","System.Windows.UIElement.ArrangeCore","System::Windows::UIElement::ArrangeCore","System.Windows.UIElement.BeginAnimation","System::Windows::UIElement::BeginAnimation","System.Windows.UIElement.BitmapEffect","System::Windows::UIElement::BitmapEffect","System.Windows.UIElement.BitmapEffectInput","System::Windows::UIElement::BitmapEffectInput","System.Windows.UIElement.BitmapEffectInputProperty","System::Windows::UIElement::BitmapEffectInputProperty","System.Windows.UIElement.BitmapEffectProperty","System::Windows::UIElement::BitmapEffectProperty","System.Windows.UIElement.CacheMode","System::Windows::UIElement::CacheMode","System.Windows.UIElement.CacheModeProperty","System::Windows::UIElement::CacheModeProperty","System.Windows.UIElement.CaptureMouse","System::Windows::UIElement::CaptureMouse","System.Windows.UIElement.CaptureStylus","System::Windows::UIElement::CaptureStylus","System.Windows.UIElement.CaptureTouch","System::Windows::UIElement::CaptureTouch","System.Windows.UIElement.Clip","System::Windows::UIElement::Clip","System.Windows.UIElement.ClipProperty","System::Windows::UIElement::ClipProperty","System.Windows.UIElement.ClipToBounds","System::Windows::UIElement::ClipToBounds","System.Windows.UIElement.ClipToBoundsProperty","System::Windows::UIElement::ClipToBoundsProperty","System.Windows.UIElement.CommandBindings","System::Windows::UIElement::CommandBindings","System.Windows.UIElement.DesiredSize","System::Windows::UIElement::DesiredSize","System.Windows.UIElement.DragEnter","System::Windows::UIElement::DragEnter","System.Windows.UIElement.DragEnterEvent","System::Windows::UIElement::DragEnterEvent","System.Windows.UIElement.DragLeave","System::Windows::UIElement::DragLeave","System.Windows.UIElement.DragLeaveEvent","System::Windows::UIElement::DragLeaveEvent","System.Windows.UIElement.DragOver","System::Windows::UIElement::DragOver","System.Windows.UIElement.DragOverEvent","System::Windows::UIElement::DragOverEvent","System.Windows.UIElement.Drop","System::Windows::UIElement::Drop","System.Windows.UIElement.DropEvent","System::Windows::UIElement::DropEvent","System.Windows.UIElement.Effect","System::Windows::UIElement::Effect","System.Windows.UIElement.EffectProperty","System::Windows::UIElement::EffectProperty","System.Windows.UIElement.Focus","System::Windows::UIElement::Focus","System.Windows.UIElement.Focusable","System::Windows::UIElement::Focusable","System.Windows.UIElement.FocusableChanged","System::Windows::UIElement::FocusableChanged","System.Windows.UIElement.FocusableProperty","System::Windows::UIElement::FocusableProperty","System.Windows.UIElement.GetAnimationBaseValue","System::Windows::UIElement::GetAnimationBaseValue","System.Windows.UIElement.GetLayoutClip","System::Windows::UIElement::GetLayoutClip","System.Windows.UIElement.GetUIParentCore","System::Windows::UIElement::GetUIParentCore","System.Windows.UIElement.GiveFeedback","System::Windows::UIElement::GiveFeedback","System.Windows.UIElement.GiveFeedbackEvent","System::Windows::UIElement::GiveFeedbackEvent","System.Windows.UIElement.GotFocus","System::Windows::UIElement::GotFocus","System.Windows.UIElement.GotFocusEvent","System::Windows::UIElement::GotFocusEvent","System.Windows.UIElement.GotKeyboardFocus","System::Windows::UIElement::GotKeyboardFocus","System.Windows.UIElement.GotKeyboardFocusEvent","System::Windows::UIElement::GotKeyboardFocusEvent","System.Windows.UIElement.GotMouseCapture","System::Windows::UIElement::GotMouseCapture","System.Windows.UIElement.GotMouseCaptureEvent","System::Windows::UIElement::GotMouseCaptureEvent","System.Windows.UIElement.GotStylusCapture","System::Windows::UIElement::GotStylusCapture","System.Windows.UIElement.GotStylusCaptureEvent","System::Windows::UIElement::GotStylusCaptureEvent","System.Windows.UIElement.GotTouchCapture","System::Windows::UIElement::GotTouchCapture","System.Windows.UIElement.GotTouchCaptureEvent","System::Windows::UIElement::GotTouchCaptureEvent","System.Windows.UIElement.HasAnimatedProperties","System::Windows::UIElement::HasAnimatedProperties","System.Windows.UIElement.HasEffectiveKeyboardFocus","System::Windows::UIElement::HasEffectiveKeyboardFocus","System.Windows.UIElement.HitTestCore","System::Windows::UIElement::HitTestCore","System.Windows.UIElement.InputBindings","System::Windows::UIElement::InputBindings","System.Windows.UIElement.InputHitTest","System::Windows::UIElement::InputHitTest","System.Windows.UIElement.InvalidateArrange","System::Windows::UIElement::InvalidateArrange","System.Windows.UIElement.InvalidateMeasure","System::Windows::UIElement::InvalidateMeasure","System.Windows.UIElement.InvalidateVisual","System::Windows::UIElement::InvalidateVisual","System.Windows.UIElement.IsArrangeValid","System::Windows::UIElement::IsArrangeValid","System.Windows.UIElement.IsEnabled","System::Windows::UIElement::IsEnabled","System.Windows.UIElement.IsEnabledChanged","System::Windows::UIElement::IsEnabledChanged","System.Windows.UIElement.IsEnabledCore","System::Windows::UIElement::IsEnabledCore","System.Windows.UIElement.IsEnabledProperty","System::Windows::UIElement::IsEnabledProperty","System.Windows.UIElement.IsFocused","System::Windows::UIElement::IsFocused","System.Windows.UIElement.IsFocusedProperty","System::Windows::UIElement::IsFocusedProperty","System.Windows.UIElement.IsHitTestVisible","System::Windows::UIElement::IsHitTestVisible","System.Windows.UIElement.IsHitTestVisibleChanged","System::Windows::UIElement::IsHitTestVisibleChanged","System.Windows.UIElement.IsHitTestVisibleProperty","System::Windows::UIElement::IsHitTestVisibleProperty","System.Windows.UIElement.IsInputMethodEnabled","System::Windows::UIElement::IsInputMethodEnabled","System.Windows.UIElement.IsKeyboardFocused","System::Windows::UIElement::IsKeyboardFocused","System.Windows.UIElement.IsKeyboardFocusedChanged","System::Windows::UIElement::IsKeyboardFocusedChanged","System.Windows.UIElement.IsKeyboardFocusedProperty","System::Windows::UIElement::IsKeyboardFocusedProperty","System.Windows.UIElement.IsKeyboardFocusWithin","System::Windows::UIElement::IsKeyboardFocusWithin","System.Windows.UIElement.IsKeyboardFocusWithinChanged","System::Windows::UIElement::IsKeyboardFocusWithinChanged","System.Windows.UIElement.IsKeyboardFocusWithinProperty","System::Windows::UIElement::IsKeyboardFocusWithinProperty","System.Windows.UIElement.IsManipulationEnabled","System::Windows::UIElement::IsManipulationEnabled","System.Windows.UIElement.IsManipulationEnabledProperty","System::Windows::UIElement::IsManipulationEnabledProperty","System.Windows.UIElement.IsMeasureValid","System::Windows::UIElement::IsMeasureValid","System.Windows.UIElement.IsMouseCaptured","System::Windows::UIElement::IsMouseCaptured","System.Windows.UIElement.IsMouseCapturedChanged","System::Windows::UIElement::IsMouseCapturedChanged","System.Windows.UIElement.IsMouseCapturedProperty","System::Windows::UIElement::IsMouseCapturedProperty","System.Windows.UIElement.IsMouseCaptureWithin","System::Windows::UIElement::IsMouseCaptureWithin","System.Windows.UIElement.IsMouseCaptureWithinChanged","System::Windows::UIElement::IsMouseCaptureWithinChanged","System.Windows.UIElement.IsMouseCaptureWithinProperty","System::Windows::UIElement::IsMouseCaptureWithinProperty","System.Windows.UIElement.IsMouseDirectlyOver","System::Windows::UIElement::IsMouseDirectlyOver","System.Windows.UIElement.IsMouseDirectlyOverChanged","System::Windows::UIElement::IsMouseDirectlyOverChanged","System.Windows.UIElement.IsMouseDirectlyOverProperty","System::Windows::UIElement::IsMouseDirectlyOverProperty","System.Windows.UIElement.IsMouseOver","System::Windows::UIElement::IsMouseOver","System.Windows.UIElement.IsMouseOverProperty","System::Windows::UIElement::IsMouseOverProperty","System.Windows.UIElement.IsStylusCaptured","System::Windows::UIElement::IsStylusCaptured","System.Windows.UIElement.IsStylusCapturedChanged","System::Windows::UIElement::IsStylusCapturedChanged","System.Windows.UIElement.IsStylusCapturedProperty","System::Windows::UIElement::IsStylusCapturedProperty","System.Windows.UIElement.IsStylusCaptureWithin","System::Windows::UIElement::IsStylusCaptureWithin","System.Windows.UIElement.IsStylusCaptureWithinChanged","System::Windows::UIElement::IsStylusCaptureWithinChanged","System.Windows.UIElement.IsStylusCaptureWithinProperty","System::Windows::UIElement::IsStylusCaptureWithinProperty","System.Windows.UIElement.IsStylusDirectlyOver","System::Windows::UIElement::IsStylusDirectlyOver","System.Windows.UIElement.IsStylusDirectlyOverChanged","System::Windows::UIElement::IsStylusDirectlyOverChanged","System.Windows.UIElement.IsStylusDirectlyOverProperty","System::Windows::UIElement::IsStylusDirectlyOverProperty","System.Windows.UIElement.IsStylusOver","System::Windows::UIElement::IsStylusOver","System.Windows.UIElement.IsStylusOverProperty","System::Windows::UIElement::IsStylusOverProperty","System.Windows.UIElement.IsVisible","System::Windows::UIElement::IsVisible","System.Windows.UIElement.IsVisibleChanged","System::Windows::UIElement::IsVisibleChanged","System.Windows.UIElement.IsVisibleProperty","System::Windows::UIElement::IsVisibleProperty","System.Windows.UIElement.KeyDown","System::Windows::UIElement::KeyDown","System.Windows.UIElement.KeyDownEvent","System::Windows::UIElement::KeyDownEvent","System.Windows.UIElement.KeyUp","System::Windows::UIElement::KeyUp","System.Windows.UIElement.KeyUpEvent","System::Windows::UIElement::KeyUpEvent","System.Windows.UIElement.LayoutUpdated","System::Windows::UIElement::LayoutUpdated","System.Windows.UIElement.LostFocus","System::Windows::UIElement::LostFocus","System.Windows.UIElement.LostFocusEvent","System::Windows::UIElement::LostFocusEvent","System.Windows.UIElement.LostKeyboardFocus","System::Windows::UIElement::LostKeyboardFocus","System.Windows.UIElement.LostKeyboardFocusEvent","System::Windows::UIElement::LostKeyboardFocusEvent","System.Windows.UIElement.LostMouseCapture","System::Windows::UIElement::LostMouseCapture","System.Windows.UIElement.LostMouseCaptureEvent","System::Windows::UIElement::LostMouseCaptureEvent","System.Windows.UIElement.LostStylusCapture","System::Windows::UIElement::LostStylusCapture","System.Windows.UIElement.LostStylusCaptureEvent","System::Windows::UIElement::LostStylusCaptureEvent","System.Windows.UIElement.LostTouchCapture","System::Windows::UIElement::LostTouchCapture","System.Windows.UIElement.LostTouchCaptureEvent","System::Windows::UIElement::LostTouchCaptureEvent","System.Windows.UIElement.ManipulationBoundaryFeedback","System::Windows::UIElement::ManipulationBoundaryFeedback","System.Windows.UIElement.ManipulationBoundaryFeedbackEvent","System::Windows::UIElement::ManipulationBoundaryFeedbackEvent","System.Windows.UIElement.ManipulationCompleted","System::Windows::UIElement::ManipulationCompleted","System.Windows.UIElement.ManipulationCompletedEvent","System::Windows::UIElement::ManipulationCompletedEvent","System.Windows.UIElement.ManipulationDelta","System::Windows::UIElement::ManipulationDelta","System.Windows.UIElement.ManipulationDeltaEvent","System::Windows::UIElement::ManipulationDeltaEvent","System.Windows.UIElement.ManipulationInertiaStarting","System::Windows::UIElement::ManipulationInertiaStarting","System.Windows.UIElement.ManipulationInertiaStartingEvent","System::Windows::UIElement::ManipulationInertiaStartingEvent","System.Windows.UIElement.ManipulationStarted","System::Windows::UIElement::ManipulationStarted","System.Windows.UIElement.ManipulationStartedEvent","System::Windows::UIElement::ManipulationStartedEvent","System.Windows.UIElement.ManipulationStarting","System::Windows::UIElement::ManipulationStarting","System.Windows.UIElement.ManipulationStartingEvent","System::Windows::UIElement::ManipulationStartingEvent","System.Windows.UIElement.Measure","System::Windows::UIElement::Measure","System.Windows.UIElement.MeasureCore","System::Windows::UIElement::MeasureCore","System.Windows.UIElement.MouseDown","System::Windows::UIElement::MouseDown","System.Windows.UIElement.MouseDownEvent","System::Windows::UIElement::MouseDownEvent","System.Windows.UIElement.MouseEnter","System::Windows::UIElement::MouseEnter","System.Windows.UIElement.MouseEnterEvent","System::Windows::UIElement::MouseEnterEvent","System.Windows.UIElement.MouseLeave","System::Windows::UIElement::MouseLeave","System.Windows.UIElement.MouseLeaveEvent","System::Windows::UIElement::MouseLeaveEvent","System.Windows.UIElement.MouseLeftButtonDown","System::Windows::UIElement::MouseLeftButtonDown","System.Windows.UIElement.MouseLeftButtonDownEvent","System::Windows::UIElement::MouseLeftButtonDownEvent","System.Windows.UIElement.MouseLeftButtonUp","System::Windows::UIElement::MouseLeftButtonUp","System.Windows.UIElement.MouseLeftButtonUpEvent","System::Windows::UIElement::MouseLeftButtonUpEvent","System.Windows.UIElement.MouseMove","System::Windows::UIElement::MouseMove","System.Windows.UIElement.MouseMoveEvent","System::Windows::UIElement::MouseMoveEvent","System.Windows.UIElement.MouseRightButtonDown","System::Windows::UIElement::MouseRightButtonDown","System.Windows.UIElement.MouseRightButtonDownEvent","System::Windows::UIElement::MouseRightButtonDownEvent","System.Windows.UIElement.MouseRightButtonUp","System::Windows::UIElement::MouseRightButtonUp","System.Windows.UIElement.MouseRightButtonUpEvent","System::Windows::UIElement::MouseRightButtonUpEvent","System.Windows.UIElement.MouseUp","System::Windows::UIElement::MouseUp","System.Windows.UIElement.MouseUpEvent","System::Windows::UIElement::MouseUpEvent","System.Windows.UIElement.MouseWheel","System::Windows::UIElement::MouseWheel","System.Windows.UIElement.MouseWheelEvent","System::Windows::UIElement::MouseWheelEvent","System.Windows.UIElement.MoveFocus","System::Windows::UIElement::MoveFocus","System.Windows.UIElement.OnAccessKey","System::Windows::UIElement::OnAccessKey","System.Windows.UIElement.OnChildDesiredSizeChanged","System::Windows::UIElement::OnChildDesiredSizeChanged","System.Windows.UIElement.OnCreateAutomationPeer","System::Windows::UIElement::OnCreateAutomationPeer","System.Windows.UIElement.OnDragEnter","System::Windows::UIElement::OnDragEnter","System.Windows.UIElement.OnDragLeave","System::Windows::UIElement::OnDragLeave","System.Windows.UIElement.OnDragOver","System::Windows::UIElement::OnDragOver","System.Windows.UIElement.OnDrop","System::Windows::UIElement::OnDrop","System.Windows.UIElement.OnGiveFeedback","System::Windows::UIElement::OnGiveFeedback","System.Windows.UIElement.OnGotFocus","System::Windows::UIElement::OnGotFocus","System.Windows.UIElement.OnGotKeyboardFocus","System::Windows::UIElement::OnGotKeyboardFocus","System.Windows.UIElement.OnGotMouseCapture","System::Windows::UIElement::OnGotMouseCapture","System.Windows.UIElement.OnGotStylusCapture","System::Windows::UIElement::OnGotStylusCapture","System.Windows.UIElement.OnGotTouchCapture","System::Windows::UIElement::OnGotTouchCapture","System.Windows.UIElement.OnIsKeyboardFocusedChanged","System::Windows::UIElement::OnIsKeyboardFocusedChanged","System.Windows.UIElement.OnIsKeyboardFocusWithinChanged","System::Windows::UIElement::OnIsKeyboardFocusWithinChanged","System.Windows.UIElement.OnIsMouseCapturedChanged","System::Windows::UIElement::OnIsMouseCapturedChanged","System.Windows.UIElement.OnIsMouseCaptureWithinChanged","System::Windows::UIElement::OnIsMouseCaptureWithinChanged","System.Windows.UIElement.OnIsMouseDirectlyOverChanged","System::Windows::UIElement::OnIsMouseDirectlyOverChanged","System.Windows.UIElement.OnIsStylusCapturedChanged","System::Windows::UIElement::OnIsStylusCapturedChanged","System.Windows.UIElement.OnIsStylusCaptureWithinChanged","System::Windows::UIElement::OnIsStylusCaptureWithinChanged","System.Windows.UIElement.OnIsStylusDirectlyOverChanged","System::Windows::UIElement::OnIsStylusDirectlyOverChanged","System.Windows.UIElement.OnKeyDown","System::Windows::UIElement::OnKeyDown","System.Windows.UIElement.OnKeyUp","System::Windows::UIElement::OnKeyUp","System.Windows.UIElement.OnLostFocus","System::Windows::UIElement::OnLostFocus","System.Windows.UIElement.OnLostKeyboardFocus","System::Windows::UIElement::OnLostKeyboardFocus","System.Windows.UIElement.OnLostMouseCapture","System::Windows::UIElement::OnLostMouseCapture","System.Windows.UIElement.OnLostStylusCapture","System::Windows::UIElement::OnLostStylusCapture","System.Windows.UIElement.OnLostTouchCapture","System::Windows::UIElement::OnLostTouchCapture","System.Windows.UIElement.OnManipulationBoundaryFeedback","System::Windows::UIElement::OnManipulationBoundaryFeedback","System.Windows.UIElement.OnManipulationCompleted","System::Windows::UIElement::OnManipulationCompleted","System.Windows.UIElement.OnManipulationDelta","System::Windows::UIElement::OnManipulationDelta","System.Windows.UIElement.OnManipulationInertiaStarting","System::Windows::UIElement::OnManipulationInertiaStarting","System.Windows.UIElement.OnManipulationStarted","System::Windows::UIElement::OnManipulationStarted","System.Windows.UIElement.OnManipulationStarting","System::Windows::UIElement::OnManipulationStarting","System.Windows.UIElement.OnMouseDown","System::Windows::UIElement::OnMouseDown","System.Windows.UIElement.OnMouseEnter","System::Windows::UIElement::OnMouseEnter","System.Windows.UIElement.OnMouseLeave","System::Windows::UIElement::OnMouseLeave","System.Windows.UIElement.OnMouseLeftButtonDown","System::Windows::UIElement::OnMouseLeftButtonDown","System.Windows.UIElement.OnMouseLeftButtonUp","System::Windows::UIElement::OnMouseLeftButtonUp","System.Windows.UIElement.OnMouseMove","System::Windows::UIElement::OnMouseMove","System.Windows.UIElement.OnMouseRightButtonDown","System::Windows::UIElement::OnMouseRightButtonDown","System.Windows.UIElement.OnMouseRightButtonUp","System::Windows::UIElement::OnMouseRightButtonUp","System.Windows.UIElement.OnMouseUp","System::Windows::UIElement::OnMouseUp","System.Windows.UIElement.OnMouseWheel","System::Windows::UIElement::OnMouseWheel","System.Windows.UIElement.OnPreviewDragEnter","System::Windows::UIElement::OnPreviewDragEnter","System.Windows.UIElement.OnPreviewDragLeave","System::Windows::UIElement::OnPreviewDragLeave","System.Windows.UIElement.OnPreviewDragOver","System::Windows::UIElement::OnPreviewDragOver","System.Windows.UIElement.OnPreviewDrop","System::Windows::UIElement::OnPreviewDrop","System.Windows.UIElement.OnPreviewGiveFeedback","System::Windows::UIElement::OnPreviewGiveFeedback","System.Windows.UIElement.OnPreviewGotKeyboardFocus","System::Windows::UIElement::OnPreviewGotKeyboardFocus","System.Windows.UIElement.OnPreviewKeyDown","System::Windows::UIElement::OnPreviewKeyDown","System.Windows.UIElement.OnPreviewKeyUp","System::Windows::UIElement::OnPreviewKeyUp","System.Windows.UIElement.OnPreviewLostKeyboardFocus","System::Windows::UIElement::OnPreviewLostKeyboardFocus","System.Windows.UIElement.OnPreviewMouseDown","System::Windows::UIElement::OnPreviewMouseDown","System.Windows.UIElement.OnPreviewMouseLeftButtonDown","System::Windows::UIElement::OnPreviewMouseLeftButtonDown","System.Windows.UIElement.OnPreviewMouseLeftButtonUp","System::Windows::UIElement::OnPreviewMouseLeftButtonUp","System.Windows.UIElement.OnPreviewMouseMove","System::Windows::UIElement::OnPreviewMouseMove","System.Windows.UIElement.OnPreviewMouseRightButtonDown","System::Windows::UIElement::OnPreviewMouseRightButtonDown","System.Windows.UIElement.OnPreviewMouseRightButtonUp","System::Windows::UIElement::OnPreviewMouseRightButtonUp","System.Windows.UIElement.OnPreviewMouseUp","System::Windows::UIElement::OnPreviewMouseUp","System.Windows.UIElement.OnPreviewMouseWheel","System::Windows::UIElement::OnPreviewMouseWheel","System.Windows.UIElement.OnPreviewQueryContinueDrag","System::Windows::UIElement::OnPreviewQueryContinueDrag","System.Windows.UIElement.OnPreviewStylusButtonDown","System::Windows::UIElement::OnPreviewStylusButtonDown","System.Windows.UIElement.OnPreviewStylusButtonUp","System::Windows::UIElement::OnPreviewStylusButtonUp","System.Windows.UIElement.OnPreviewStylusDown","System::Windows::UIElement::OnPreviewStylusDown","System.Windows.UIElement.OnPreviewStylusInAirMove","System::Windows::UIElement::OnPreviewStylusInAirMove","System.Windows.UIElement.OnPreviewStylusInRange","System::Windows::UIElement::OnPreviewStylusInRange","System.Windows.UIElement.OnPreviewStylusMove","System::Windows::UIElement::OnPreviewStylusMove","System.Windows.UIElement.OnPreviewStylusOutOfRange","System::Windows::UIElement::OnPreviewStylusOutOfRange","System.Windows.UIElement.OnPreviewStylusSystemGesture","System::Windows::UIElement::OnPreviewStylusSystemGesture","System.Windows.UIElement.OnPreviewStylusUp","System::Windows::UIElement::OnPreviewStylusUp","System.Windows.UIElement.OnPreviewTextInput","System::Windows::UIElement::OnPreviewTextInput","System.Windows.UIElement.OnPreviewTouchDown","System::Windows::UIElement::OnPreviewTouchDown","System.Windows.UIElement.OnPreviewTouchMove","System::Windows::UIElement::OnPreviewTouchMove","System.Windows.UIElement.OnPreviewTouchUp","System::Windows::UIElement::OnPreviewTouchUp","System.Windows.UIElement.OnQueryContinueDrag","System::Windows::UIElement::OnQueryContinueDrag","System.Windows.UIElement.OnQueryCursor","System::Windows::UIElement::OnQueryCursor","System.Windows.UIElement.OnRender","System::Windows::UIElement::OnRender","System.Windows.UIElement.OnRenderSizeChanged","System::Windows::UIElement::OnRenderSizeChanged","System.Windows.UIElement.OnStylusButtonDown","System::Windows::UIElement::OnStylusButtonDown","System.Windows.UIElement.OnStylusButtonUp","System::Windows::UIElement::OnStylusButtonUp","System.Windows.UIElement.OnStylusDown","System::Windows::UIElement::OnStylusDown","System.Windows.UIElement.OnStylusEnter","System::Windows::UIElement::OnStylusEnter","System.Windows.UIElement.OnStylusInAirMove","System::Windows::UIElement::OnStylusInAirMove","System.Windows.UIElement.OnStylusInRange","System::Windows::UIElement::OnStylusInRange","System.Windows.UIElement.OnStylusLeave","System::Windows::UIElement::OnStylusLeave","System.Windows.UIElement.OnStylusMove","System::Windows::UIElement::OnStylusMove","System.Windows.UIElement.OnStylusOutOfRange","System::Windows::UIElement::OnStylusOutOfRange","System.Windows.UIElement.OnStylusSystemGesture","System::Windows::UIElement::OnStylusSystemGesture","System.Windows.UIElement.OnStylusUp","System::Windows::UIElement::OnStylusUp","System.Windows.UIElement.OnTextInput","System::Windows::UIElement::OnTextInput","System.Windows.UIElement.OnTouchDown","System::Windows::UIElement::OnTouchDown","System.Windows.UIElement.OnTouchEnter","System::Windows::UIElement::OnTouchEnter","System.Windows.UIElement.OnTouchLeave","System::Windows::UIElement::OnTouchLeave","System.Windows.UIElement.OnTouchMove","System::Windows::UIElement::OnTouchMove","System.Windows.UIElement.OnTouchUp","System::Windows::UIElement::OnTouchUp","System.Windows.UIElement.OnVisualParentChanged","System::Windows::UIElement::OnVisualParentChanged","System.Windows.UIElement.Opacity","System::Windows::UIElement::Opacity","System.Windows.UIElement.OpacityMask","System::Windows::UIElement::OpacityMask","System.Windows.UIElement.OpacityMaskProperty","System::Windows::UIElement::OpacityMaskProperty","System.Windows.UIElement.OpacityProperty","System::Windows::UIElement::OpacityProperty","System.Windows.UIElement.PersistId","System::Windows::UIElement::PersistId","System.Windows.UIElement.PredictFocus","System::Windows::UIElement::PredictFocus","System.Windows.UIElement.PreviewDragEnter","System::Windows::UIElement::PreviewDragEnter","System.Windows.UIElement.PreviewDragEnterEvent","System::Windows::UIElement::PreviewDragEnterEvent","System.Windows.UIElement.PreviewDragLeave","System::Windows::UIElement::PreviewDragLeave","System.Windows.UIElement.PreviewDragLeaveEvent","System::Windows::UIElement::PreviewDragLeaveEvent","System.Windows.UIElement.PreviewDragOver","System::Windows::UIElement::PreviewDragOver","System.Windows.UIElement.PreviewDragOverEvent","System::Windows::UIElement::PreviewDragOverEvent","System.Windows.UIElement.PreviewDrop","System::Windows::UIElement::PreviewDrop","System.Windows.UIElement.PreviewDropEvent","System::Windows::UIElement::PreviewDropEvent","System.Windows.UIElement.PreviewGiveFeedback","System::Windows::UIElement::PreviewGiveFeedback","System.Windows.UIElement.PreviewGiveFeedbackEvent","System::Windows::UIElement::PreviewGiveFeedbackEvent","System.Windows.UIElement.PreviewGotKeyboardFocus","System::Windows::UIElement::PreviewGotKeyboardFocus","System.Windows.UIElement.PreviewGotKeyboardFocusEvent","System::Windows::UIElement::PreviewGotKeyboardFocusEvent","System.Windows.UIElement.PreviewKeyDown","System::Windows::UIElement::PreviewKeyDown","System.Windows.UIElement.PreviewKeyDownEvent","System::Windows::UIElement::PreviewKeyDownEvent","System.Windows.UIElement.PreviewKeyUp","System::Windows::UIElement::PreviewKeyUp","System.Windows.UIElement.PreviewKeyUpEvent","System::Windows::UIElement::PreviewKeyUpEvent","System.Windows.UIElement.PreviewLostKeyboardFocus","System::Windows::UIElement::PreviewLostKeyboardFocus","System.Windows.UIElement.PreviewLostKeyboardFocusEvent","System::Windows::UIElement::PreviewLostKeyboardFocusEvent","System.Windows.UIElement.PreviewMouseDown","System::Windows::UIElement::PreviewMouseDown","System.Windows.UIElement.PreviewMouseDownEvent","System::Windows::UIElement::PreviewMouseDownEvent","System.Windows.UIElement.PreviewMouseLeftButtonDown","System::Windows::UIElement::PreviewMouseLeftButtonDown","System.Windows.UIElement.PreviewMouseLeftButtonDownEvent","System::Windows::UIElement::PreviewMouseLeftButtonDownEvent","System.Windows.UIElement.PreviewMouseLeftButtonUp","System::Windows::UIElement::PreviewMouseLeftButtonUp","System.Windows.UIElement.PreviewMouseLeftButtonUpEvent","System::Windows::UIElement::PreviewMouseLeftButtonUpEvent","System.Windows.UIElement.PreviewMouseMove","System::Windows::UIElement::PreviewMouseMove","System.Windows.UIElement.PreviewMouseMoveEvent","System::Windows::UIElement::PreviewMouseMoveEvent","System.Windows.UIElement.PreviewMouseRightButtonDown","System::Windows::UIElement::PreviewMouseRightButtonDown","System.Windows.UIElement.PreviewMouseRightButtonDownEvent","System::Windows::UIElement::PreviewMouseRightButtonDownEvent","System.Windows.UIElement.PreviewMouseRightButtonUp","System::Windows::UIElement::PreviewMouseRightButtonUp","System.Windows.UIElement.PreviewMouseRightButtonUpEvent","System::Windows::UIElement::PreviewMouseRightButtonUpEvent","System.Windows.UIElement.PreviewMouseUp","System::Windows::UIElement::PreviewMouseUp","System.Windows.UIElement.PreviewMouseUpEvent","System::Windows::UIElement::PreviewMouseUpEvent","System.Windows.UIElement.PreviewMouseWheel","System::Windows::UIElement::PreviewMouseWheel","System.Windows.UIElement.PreviewMouseWheelEvent","System::Windows::UIElement::PreviewMouseWheelEvent","System.Windows.UIElement.PreviewQueryContinueDrag","System::Windows::UIElement::PreviewQueryContinueDrag","System.Windows.UIElement.PreviewQueryContinueDragEvent","System::Windows::UIElement::PreviewQueryContinueDragEvent","System.Windows.UIElement.PreviewStylusButtonDown","System::Windows::UIElement::PreviewStylusButtonDown","System.Windows.UIElement.PreviewStylusButtonDownEvent","System::Windows::UIElement::PreviewStylusButtonDownEvent","System.Windows.UIElement.PreviewStylusButtonUp","System::Windows::UIElement::PreviewStylusButtonUp","System.Windows.UIElement.PreviewStylusButtonUpEvent","System::Windows::UIElement::PreviewStylusButtonUpEvent","System.Windows.UIElement.PreviewStylusDown","System::Windows::UIElement::PreviewStylusDown","System.Windows.UIElement.PreviewStylusDownEvent","System::Windows::UIElement::PreviewStylusDownEvent","System.Windows.UIElement.PreviewStylusInAirMove","System::Windows::UIElement::PreviewStylusInAirMove","System.Windows.UIElement.PreviewStylusInAirMoveEvent","System::Windows::UIElement::PreviewStylusInAirMoveEvent","System.Windows.UIElement.PreviewStylusInRange","System::Windows::UIElement::PreviewStylusInRange","System.Windows.UIElement.PreviewStylusInRangeEvent","System::Windows::UIElement::PreviewStylusInRangeEvent","System.Windows.UIElement.PreviewStylusMove","System::Windows::UIElement::PreviewStylusMove","System.Windows.UIElement.PreviewStylusMoveEvent","System::Windows::UIElement::PreviewStylusMoveEvent","System.Windows.UIElement.PreviewStylusOutOfRange","System::Windows::UIElement::PreviewStylusOutOfRange","System.Windows.UIElement.PreviewStylusOutOfRangeEvent","System::Windows::UIElement::PreviewStylusOutOfRangeEvent","System.Windows.UIElement.PreviewStylusSystemGesture","System::Windows::UIElement::PreviewStylusSystemGesture","System.Windows.UIElement.PreviewStylusSystemGestureEvent","System::Windows::UIElement::PreviewStylusSystemGestureEvent","System.Windows.UIElement.PreviewStylusUp","System::Windows::UIElement::PreviewStylusUp","System.Windows.UIElement.PreviewStylusUpEvent","System::Windows::UIElement::PreviewStylusUpEvent","System.Windows.UIElement.PreviewTextInput","System::Windows::UIElement::PreviewTextInput","System.Windows.UIElement.PreviewTextInputEvent","System::Windows::UIElement::PreviewTextInputEvent","System.Windows.UIElement.PreviewTouchDown","System::Windows::UIElement::PreviewTouchDown","System.Windows.UIElement.PreviewTouchDownEvent","System::Windows::UIElement::PreviewTouchDownEvent","System.Windows.UIElement.PreviewTouchMove","System::Windows::UIElement::PreviewTouchMove","System.Windows.UIElement.PreviewTouchMoveEvent","System::Windows::UIElement::PreviewTouchMoveEvent","System.Windows.UIElement.PreviewTouchUp","System::Windows::UIElement::PreviewTouchUp","System.Windows.UIElement.PreviewTouchUpEvent","System::Windows::UIElement::PreviewTouchUpEvent","System.Windows.UIElement.QueryContinueDrag","System::Windows::UIElement::QueryContinueDrag","System.Windows.UIElement.QueryContinueDragEvent","System::Windows::UIElement::QueryContinueDragEvent","System.Windows.UIElement.QueryCursor","System::Windows::UIElement::QueryCursor","System.Windows.UIElement.QueryCursorEvent","System::Windows::UIElement::QueryCursorEvent","System.Windows.UIElement.RaiseEvent","System::Windows::UIElement::RaiseEvent","System.Windows.UIElement.ReleaseAllTouchCaptures","System::Windows::UIElement::ReleaseAllTouchCaptures","System.Windows.UIElement.ReleaseMouseCapture","System::Windows::UIElement::ReleaseMouseCapture","System.Windows.UIElement.ReleaseStylusCapture","System::Windows::UIElement::ReleaseStylusCapture","System.Windows.UIElement.ReleaseTouchCapture","System::Windows::UIElement::ReleaseTouchCapture","System.Windows.UIElement.RemoveHandler","System::Windows::UIElement::RemoveHandler","System.Windows.UIElement.RenderSize","System::Windows::UIElement::RenderSize","System.Windows.UIElement.RenderTransform","System::Windows::UIElement::RenderTransform","System.Windows.UIElement.RenderTransformOrigin","System::Windows::UIElement::RenderTransformOrigin","System.Windows.UIElement.RenderTransformOriginProperty","System::Windows::UIElement::RenderTransformOriginProperty","System.Windows.UIElement.RenderTransformProperty","System::Windows::UIElement::RenderTransformProperty","System.Windows.UIElement.ShouldSerializeCommandBindings","System::Windows::UIElement::ShouldSerializeCommandBindings","System.Windows.UIElement.ShouldSerializeInputBindings","System::Windows::UIElement::ShouldSerializeInputBindings","System.Windows.UIElement.SnapsToDevicePixels","System::Windows::UIElement::SnapsToDevicePixels","System.Windows.UIElement.SnapsToDevicePixelsProperty","System::Windows::UIElement::SnapsToDevicePixelsProperty","System.Windows.UIElement.StylusButtonDown","System::Windows::UIElement::StylusButtonDown","System.Windows.UIElement.StylusButtonDownEvent","System::Windows::UIElement::StylusButtonDownEvent","System.Windows.UIElement.StylusButtonUp","System::Windows::UIElement::StylusButtonUp","System.Windows.UIElement.StylusButtonUpEvent","System::Windows::UIElement::StylusButtonUpEvent","System.Windows.UIElement.StylusDown","System::Windows::UIElement::StylusDown","System.Windows.UIElement.StylusDownEvent","System::Windows::UIElement::StylusDownEvent","System.Windows.UIElement.StylusEnter","System::Windows::UIElement::StylusEnter","System.Windows.UIElement.StylusEnterEvent","System::Windows::UIElement::StylusEnterEvent","System.Windows.UIElement.StylusInAirMove","System::Windows::UIElement::StylusInAirMove","System.Windows.UIElement.StylusInAirMoveEvent","System::Windows::UIElement::StylusInAirMoveEvent","System.Windows.UIElement.StylusInRange","System::Windows::UIElement::StylusInRange","System.Windows.UIElement.StylusInRangeEvent","System::Windows::UIElement::StylusInRangeEvent","System.Windows.UIElement.StylusLeave","System::Windows::UIElement::StylusLeave","System.Windows.UIElement.StylusLeaveEvent","System::Windows::UIElement::StylusLeaveEvent","System.Windows.UIElement.StylusMove","System::Windows::UIElement::StylusMove","System.Windows.UIElement.StylusMoveEvent","System::Windows::UIElement::StylusMoveEvent","System.Windows.UIElement.StylusOutOfRange","System::Windows::UIElement::StylusOutOfRange","System.Windows.UIElement.StylusOutOfRangeEvent","System::Windows::UIElement::StylusOutOfRangeEvent","System.Windows.UIElement.StylusPlugIns","System::Windows::UIElement::StylusPlugIns","System.Windows.UIElement.StylusSystemGesture","System::Windows::UIElement::StylusSystemGesture","System.Windows.UIElement.StylusSystemGestureEvent","System::Windows::UIElement::StylusSystemGestureEvent","System.Windows.UIElement.StylusUp","System::Windows::UIElement::StylusUp","System.Windows.UIElement.StylusUpEvent","System::Windows::UIElement::StylusUpEvent","System.Windows.UIElement.TextInput","System::Windows::UIElement::TextInput","System.Windows.UIElement.TextInputEvent","System::Windows::UIElement::TextInputEvent","System.Windows.UIElement.TouchDown","System::Windows::UIElement::TouchDown","System.Windows.UIElement.TouchDownEvent","System::Windows::UIElement::TouchDownEvent","System.Windows.UIElement.TouchEnter","System::Windows::UIElement::TouchEnter","System.Windows.UIElement.TouchEnterEvent","System::Windows::UIElement::TouchEnterEvent","System.Windows.UIElement.TouchesCaptured","System::Windows::UIElement::TouchesCaptured","System.Windows.UIElement.TouchesCapturedWithin","System::Windows::UIElement::TouchesCapturedWithin","System.Windows.UIElement.TouchesDirectlyOver","System::Windows::UIElement::TouchesDirectlyOver","System.Windows.UIElement.TouchesOver","System::Windows::UIElement::TouchesOver","System.Windows.UIElement.TouchLeave","System::Windows::UIElement::TouchLeave","System.Windows.UIElement.TouchLeaveEvent","System::Windows::UIElement::TouchLeaveEvent","System.Windows.UIElement.TouchMove","System::Windows::UIElement::TouchMove","System.Windows.UIElement.TouchMoveEvent","System::Windows::UIElement::TouchMoveEvent","System.Windows.UIElement.TouchUp","System::Windows::UIElement::TouchUp","System.Windows.UIElement.TouchUpEvent","System::Windows::UIElement::TouchUpEvent","System.Windows.UIElement.TranslatePoint","System::Windows::UIElement::TranslatePoint","System.Windows.UIElement.Uid","System::Windows::UIElement::Uid","System.Windows.UIElement.UidProperty","System::Windows::UIElement::UidProperty","System.Windows.UIElement.UpdateLayout","System::Windows::UIElement::UpdateLayout","System.Windows.UIElement.Visibility","System::Windows::UIElement::Visibility","System.Windows.UIElement.VisibilityProperty","System::Windows::UIElement::VisibilityProperty"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"3ba5cfbe-23d1-0499-28bd-693336c98ac1","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Windows/UIElement.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"UIElement class | Microsoft Docs","_op_ogTitle":"UIElement class","description":"UIElement is a base class for WPF core level implementations building on Windows Presentation Foundation (WPF) elements and basic presentation characteristics.\n","toc_asset_id":"_splitted/System.Windows/toc.json","toc_rel":"_splitted/System.Windows/toc.json","source_url":"","ms.assetid":"System.Windows.UIElement","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.uielement","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.uielement","fileRelativePath":"System.Windows.UIElement.html"},"themesRelativePathToOutputRoot":"_themes/"}