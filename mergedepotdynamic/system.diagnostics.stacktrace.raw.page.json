{"content":"    \r\n    <h1 id=\"System_Diagnostics_StackTrace\">\r\n      <span class=\"lang-csharp\">StackTrace</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a stack trace, which is an ordered collection of one or more stack frames.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic class StackTrace</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">StackTrace</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>StackTrace information will be most informative with Debug build configurations. By default, Debug builds include debug symbols, while Release builds do not. The debug symbols contain most of the file, method name, line number, and column information used in constructing <a class=\"xref\" href=\"system.diagnostics.stackframe\" data-linktype=\"relative-path\">StackFrame</a> and StackTrace objects.  </p>\n<p> StackTrace might not report as many method calls as expected, due to code transformations that occur during optimization.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_StackTrace__ctor\" data-linktype=\"self-bookmark\">StackTrace()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.stacktrace\" data-linktype=\"relative-path\">StackTrace</a> class from the caller&#39;s frame.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_StackTrace__ctor_System_Boolean_\" data-linktype=\"self-bookmark\">StackTrace(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.stacktrace\" data-linktype=\"relative-path\">StackTrace</a> class from the caller&#39;s frame, optionally capturing source information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_StackTrace__ctor_System_Diagnostics_StackFrame_\" data-linktype=\"self-bookmark\">StackTrace(StackFrame)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.stacktrace\" data-linktype=\"relative-path\">StackTrace</a> class that contains a single frame.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_StackTrace__ctor_System_Exception_\" data-linktype=\"self-bookmark\">StackTrace(Exception)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.stacktrace\" data-linktype=\"relative-path\">StackTrace</a> class using the provided exception object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_StackTrace__ctor_System_Int32_\" data-linktype=\"self-bookmark\">StackTrace(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.stacktrace\" data-linktype=\"relative-path\">StackTrace</a> class from the caller&#39;s frame, skipping the specified number of frames.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_StackTrace__ctor_System_Exception_System_Boolean_\" data-linktype=\"self-bookmark\">StackTrace(Exception,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.stacktrace\" data-linktype=\"relative-path\">StackTrace</a> class, using the provided exception object and optionally capturing source information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_StackTrace__ctor_System_Exception_System_Int32_\" data-linktype=\"self-bookmark\">StackTrace(Exception,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.stacktrace\" data-linktype=\"relative-path\">StackTrace</a> class using the provided exception object and skipping the specified number of frames.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_StackTrace__ctor_System_Int32_System_Boolean_\" data-linktype=\"self-bookmark\">StackTrace(Int32,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.stacktrace\" data-linktype=\"relative-path\">StackTrace</a> class from the caller&#39;s frame, skipping the specified number of frames and optionally capturing source information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_StackTrace__ctor_System_Threading_Thread_System_Boolean_\" data-linktype=\"self-bookmark\">StackTrace(Thread,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.stacktrace\" data-linktype=\"relative-path\">StackTrace</a> class for a specific thread, optionally capturing source information.  </p>\n<p> Do not use this constructor overload.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_StackTrace__ctor_System_Exception_System_Int32_System_Boolean_\" data-linktype=\"self-bookmark\">StackTrace(Exception,Int32,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.stacktrace\" data-linktype=\"relative-path\">StackTrace</a> class using the provided exception object, skipping the specified number of frames and optionally capturing source information.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Fields\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_StackTrace_METHODS_TO_SKIP\" data-linktype=\"self-bookmark\">METHODS_TO_SKIP</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines the default for the number of methods to omit from the stack trace. This field is constant.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_StackTrace_FrameCount\" data-linktype=\"self-bookmark\">FrameCount</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of frames in the stack trace.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_StackTrace_GetFrame_System_Int32_\" data-linktype=\"self-bookmark\">GetFrame(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the specified stack frame.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_StackTrace_GetFrames\" data-linktype=\"self-bookmark\">GetFrames()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a copy of all stack frames in the current stack trace.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_StackTrace_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Builds a readable representation of the stack trace.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_StackTrace__ctor\">\r\n    \r\n            <a id=\"System_Diagnostics_StackTrace__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StackTrace()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.stacktrace\" data-linktype=\"relative-path\">StackTrace</a> class from the caller&#39;s frame.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public StackTrace ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.diagnostics.stacktrace\" data-linktype=\"relative-path\">StackTrace</a> is created with the caller&#39;s current thread, and does not contain file name, line number, or column information.  </p>\n<p> Use this default constructor when you want a complete trace with only summary method information about the call stack.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the first and last function calls in a stack trace.  </p>\n<pre><code class=\"lang-cpp\" name=\"StackFrameSample1#8\">      void Level5Method()\n      {\n         try\n         {\n            ClassLevel6^ nestedClass = gcnew ClassLevel6;\n            nestedClass-&gt;Level6Method();\n         }\n         catch ( Exception^ e ) \n         {\n            Console::WriteLine( &quot; Level5Method exception handler&quot; );\n            StackTrace^ st = gcnew StackTrace;\n            \n            // Display the most recent function call.\n            StackFrame^ sf = st-&gt;GetFrame( 0 );\n            Console::WriteLine();\n            Console::WriteLine( &quot;  Exception in method: &quot; );\n            Console::WriteLine( &quot;      {0}&quot;, sf-&gt;GetMethod() );\n            if ( st-&gt;FrameCount &gt; 1 )\n            {\n               \n               // Display the highest-level function call\n               // in the trace.\n               sf = st-&gt;GetFrame( st-&gt;FrameCount - 1 );\n               Console::WriteLine( &quot;  Original function call at top of call stack):&quot; );\n               Console::WriteLine( &quot;      {0}&quot;, sf-&gt;GetMethod() );\n            }\n            Console::WriteLine();\n            Console::WriteLine( &quot;   ... throwing exception to next level ...&quot; );\n            Console::WriteLine( &quot;-------------------------------------------------<br>&quot; );\n            throw e;\n         }\n\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"StackFrameSample1#8\">      Public Sub Level5Method()\n         Try\n            Dim nestedClass As New ClassLevel6()\n            nestedClass.Level6Method()\n         Catch e As Exception\n            Console.WriteLine(&quot; Level5Method exception handler&quot;)\n            \n            Dim st As New StackTrace()\n            \n            &#39; Display the most recent function call.\n            Dim sf As StackFrame = st.GetFrame(0)\n            Console.WriteLine()\n            Console.WriteLine(&quot;  Exception in method: &quot;)\n            Console.WriteLine(&quot;      {0}&quot;, sf.GetMethod())\n            \n            If st.FrameCount &gt; 1 Then\n               &#39; Display the highest-level function call in the trace.\n               sf = st.GetFrame((st.FrameCount - 1))\n               Console.WriteLine(&quot;  Original function call at top of call stack):&quot;)\n               Console.WriteLine(&quot;      {0}&quot;, sf.GetMethod())\n            End If\n            \n            Console.WriteLine()\n            Console.WriteLine(&quot;   ... throwing exception to next level ...&quot;)\n            Console.WriteLine(&quot;-------------------------------------------------&quot;)\n            Console.WriteLine()\n            Throw e\n         End Try\n      End Sub &#39;Level5Method\n</code></pre><pre><code class=\"lang-cs\" name=\"StackFrameSample1#8\">      public void Level5Method()\n      {\n         try \n         {\n            ClassLevel6 nestedClass = new ClassLevel6();\n            nestedClass.Level6Method();\n         }\n         catch (Exception e) \n         {\n            Console.WriteLine(&quot; Level5Method exception handler&quot;);\n\n            StackTrace st = new StackTrace();\n            \n            // Display the most recent function call.\n            StackFrame sf = st.GetFrame(0);\n            Console.WriteLine();\n            Console.WriteLine(&quot;  Exception in method: &quot;);\n            Console.WriteLine(&quot;      {0}&quot;, sf.GetMethod());\n\n            if (st.FrameCount &gt;1)\n            {\n               // Display the highest-level function call \n               // in the trace.\n               sf = st.GetFrame(st.FrameCount-1);\n               Console.WriteLine(&quot;  Original function call at top of call stack):&quot;);\n               Console.WriteLine(&quot;      {0}&quot;, sf.GetMethod());\n            }\n\n            Console.WriteLine();\n            Console.WriteLine(&quot;   ... throwing exception to next level ...&quot;);\n            Console.WriteLine(&quot;-------------------------------------------------<br>&quot;);\n            throw e;\n         }        \n      }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_StackTrace__ctor_System_Boolean_\">\r\n    \r\n            <a id=\"System_Diagnostics_StackTrace__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StackTrace(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.stacktrace\" data-linktype=\"relative-path\">StackTrace</a> class from the caller&#39;s frame, optionally capturing source information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public StackTrace (bool fNeedFileInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fNeedFileInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to capture the file name, line number, and column number; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.diagnostics.stacktrace\" data-linktype=\"relative-path\">StackTrace</a> is created with the caller&#39;s current thread.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates various <a class=\"xref\" href=\"system.diagnostics.stacktrace\" data-linktype=\"relative-path\">StackTrace</a> constructor methods.  </p>\n<pre><code class=\"lang-cpp\" name=\"StackFrameSample1#4\">      void Level2Method()\n      {\n         try\n         {\n            ClassLevel3^ nestedClass = gcnew ClassLevel3;\n            nestedClass-&gt;Level3Method();\n         }\n         catch ( Exception^ e ) \n         {\n            Console::WriteLine( &quot; Level2Method exception handler&quot; );\n            \n            // Display the full call stack at this level.\n            StackTrace^ st1 = gcnew StackTrace( true );\n            Console::WriteLine( &quot; Stack trace for this level: {0}&quot;, st1-&gt;ToString() );\n            \n            // Build a stack trace from one frame, skipping the\n            // current frame and using the next frame.\n            StackTrace^ st2 = gcnew StackTrace( gcnew StackFrame( 1,true ) );\n            Console::WriteLine( &quot; Stack trace built with next level frame: {0}&quot;, st2-&gt;ToString() );\n            \n            // Build a stack trace skipping the current frame, and\n            // including all the other frames.\n            StackTrace^ st3 = gcnew StackTrace( 1,true );\n            Console::WriteLine( &quot; Stack trace built from the next level up: {0}&quot;, st3-&gt;ToString() );\n            Console::WriteLine();\n            Console::WriteLine( &quot;   ... throwing exception to next level ...&quot; );\n            Console::WriteLine( &quot;-------------------------------------------------<br>&quot; );\n            throw e;\n         }\n\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"StackFrameSample1#4\">      Public Sub Level2Method()\n         Try\n            Dim nestedClass As New ClassLevel3\n            nestedClass.Level3Method()\n         \n         Catch e As Exception\n            Console.WriteLine(&quot; Level2Method exception handler&quot;)\n            \n            &#39; Display the full call stack at this level.\n            Dim st1 As New StackTrace(True)\n            Console.WriteLine(&quot; Stack trace for this level: {0}&quot;, _\n               st1.ToString())\n            \n            &#39; Build a stack trace from one frame, skipping the current\n            &#39; frame and using the next frame.\n            Dim st2 As New StackTrace(New StackFrame(1, True))\n            Console.WriteLine(&quot; Stack trace built with next level frame: {0}&quot;, _\n                st2.ToString())\n            \n            &#39; Build a stack trace skipping the current frame, and\n            &#39; including all the other frames.\n            Dim st3 As New StackTrace(1, True)\n            Console.WriteLine(&quot; Stack trace built from the next level up: {0}&quot;, _\n                st3.ToString())\n            \n            Console.WriteLine()\n            Console.WriteLine(&quot;   ... throwing exception to next level ...&quot;)\n            Console.WriteLine(&quot;-------------------------------------------------&quot;)\n            Console.WriteLine()\n            Throw e\n         End Try\n      End Sub &#39;Level2Method\n</code></pre><pre><code class=\"lang-cs\" name=\"StackFrameSample1#4\">      public void Level2Method()\n      {\n         try \n         {\n            ClassLevel3 nestedClass = new ClassLevel3();\n            nestedClass.Level3Method();\n\n         }\n         catch (Exception e) \n         {\n            Console.WriteLine(&quot; Level2Method exception handler&quot;);\n\n            // Display the full call stack at this level.\n            StackTrace st1 = new StackTrace(true);\n            Console.WriteLine(&quot; Stack trace for this level: {0}&quot;,\n               st1.ToString());\n\n            // Build a stack trace from one frame, skipping the current\n            // frame and using the next frame.\n            StackTrace st2 = new StackTrace(new StackFrame(1, true));\n            Console.WriteLine(&quot; Stack trace built with next level frame: {0}&quot;,\n               st2.ToString());\n\n            // Build a stack trace skipping the current frame, and\n            // including all the other frames.\n            StackTrace st3 = new StackTrace(1, true);\n            Console.WriteLine(&quot; Stack trace built from the next level up: {0}&quot;,\n               st3.ToString());\n\n            Console.WriteLine();\n            Console.WriteLine(&quot;   ... throwing exception to next level ...&quot;);\n            Console.WriteLine(&quot;-------------------------------------------------<br>&quot;);\n            throw e;\n         }\n      }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_StackTrace__ctor_System_Diagnostics_StackFrame_\">\r\n    \r\n            <a id=\"System_Diagnostics_StackTrace__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StackTrace(StackFrame)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.stacktrace\" data-linktype=\"relative-path\">StackTrace</a> class that contains a single frame.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public StackTrace (System.Diagnostics.StackFrame frame);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>frame</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.stackframe\" data-linktype=\"relative-path\">StackFrame</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The frame that the <a class=\"xref\" href=\"system.diagnostics.stacktrace\" data-linktype=\"relative-path\">StackTrace</a> object should contain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this constructor when you do not want the overhead of a full stack trace.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example writes stack trace information to an event log entry.  </p>\n<pre><code class=\"lang-cpp\" name=\"StackTraceSample3#6\">            StackFrame^ fr = gcnew StackFrame( 1,true );\n            StackTrace^ st = gcnew StackTrace( fr );\n            EventLog::WriteEntry( fr-&gt;GetMethod()-&gt;Name, st-&gt;ToString(), EventLogEntryType::Warning );\n</code></pre><pre><code class=\"lang-cs\" name=\"StackTraceSample3#6\">                StackFrame fr = new StackFrame(1,true);\n                StackTrace st = new StackTrace(fr);\n                EventLog.WriteEntry(fr.GetMethod().Name,\n                                    st.ToString(),\n                                    EventLogEntryType.Warning);\n</code></pre><pre><code class=\"lang-vb\" name=\"StackTraceSample3#6\">            Dim frame As New StackFrame(1, True)\n            Dim strace As New StackTrace(frame)            \n\n            EventLog.WriteEntry(frame.GetMethod().Name, _\n                                strace.ToString(), _\n                                EventLogEntryType.Warning)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_StackTrace__ctor_System_Exception_\">\r\n    \r\n            <a id=\"System_Diagnostics_StackTrace__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StackTrace(Exception)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.stacktrace\" data-linktype=\"relative-path\">StackTrace</a> class using the provided exception object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public StackTrace (Exception e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The exception object from which to construct the stack trace.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The parameter <code>e</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.diagnostics.stacktrace\" data-linktype=\"relative-path\">StackTrace</a> is created with the caller&#39;s current thread, and does not contain file name, line number, or column information.  </p>\n<p> The resulting stack trace describes the stack at the time of the exception.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_StackTrace__ctor_System_Int32_\">\r\n    \r\n            <a id=\"System_Diagnostics_StackTrace__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StackTrace(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.stacktrace\" data-linktype=\"relative-path\">StackTrace</a> class from the caller&#39;s frame, skipping the specified number of frames.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public StackTrace (int skipFrames);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>skipFrames</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of frames up the stack from which to start the trace.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>skipFrames</code> parameter is negative.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.diagnostics.stacktrace\" data-linktype=\"relative-path\">StackTrace</a> is created with the caller&#39;s current thread, and does not contain file name, line number, or column information.  </p>\n<p> If the number of frames to skip is greater than or equal to the total number of frames on the call stack at the time the instance is created, the <a class=\"xref\" href=\"system.diagnostics.stacktrace\" data-linktype=\"relative-path\">StackTrace</a> will contain no frames.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_StackTrace__ctor_System_Exception_System_Boolean_\">\r\n    \r\n            <a id=\"System_Diagnostics_StackTrace__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StackTrace(Exception,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.stacktrace\" data-linktype=\"relative-path\">StackTrace</a> class, using the provided exception object and optionally capturing source information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public StackTrace (Exception e, bool fNeedFileInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The exception object from which to construct the stack trace.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>fNeedFileInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to capture the file name, line number, and column number; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The parameter <code>e</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The resulting stack trace describes the stack at the time of the exception.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_StackTrace__ctor_System_Exception_System_Int32_\">\r\n    \r\n            <a id=\"System_Diagnostics_StackTrace__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StackTrace(Exception,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.stacktrace\" data-linktype=\"relative-path\">StackTrace</a> class using the provided exception object and skipping the specified number of frames.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public StackTrace (Exception e, int skipFrames);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The exception object from which to construct the stack trace.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>skipFrames</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of frames up the stack from which to start the trace.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The parameter <code>e</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>skipFrames</code> parameter is negative.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.diagnostics.stacktrace\" data-linktype=\"relative-path\">StackTrace</a> does not contain file name, line number, or column information.  </p>\n<p> The resulting stack trace describes the stack at the time of the exception.  </p>\n<p> If the number of frames to skip is greater than or equal to the total number of frames on the call stack at the time the instance is created, the <a class=\"xref\" href=\"system.diagnostics.stacktrace\" data-linktype=\"relative-path\">StackTrace</a> will contain no frames.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_StackTrace__ctor_System_Int32_System_Boolean_\">\r\n    \r\n            <a id=\"System_Diagnostics_StackTrace__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StackTrace(Int32,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.stacktrace\" data-linktype=\"relative-path\">StackTrace</a> class from the caller&#39;s frame, skipping the specified number of frames and optionally capturing source information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public StackTrace (int skipFrames, bool fNeedFileInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>skipFrames</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of frames up the stack from which to start the trace.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>fNeedFileInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to capture the file name, line number, and column number; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>skipFrames</code> parameter is negative.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the number of frames to skip is greater than or equal to the total number of frames on the call stack at the time the instance is created, the <a class=\"xref\" href=\"system.diagnostics.stacktrace\" data-linktype=\"relative-path\">StackTrace</a> will contain no frames.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates various <a class=\"xref\" href=\"system.diagnostics.stacktrace\" data-linktype=\"relative-path\">StackTrace</a> constructor methods.  </p>\n<pre><code class=\"lang-cpp\" name=\"StackFrameSample1#4\">      void Level2Method()\n      {\n         try\n         {\n            ClassLevel3^ nestedClass = gcnew ClassLevel3;\n            nestedClass-&gt;Level3Method();\n         }\n         catch ( Exception^ e ) \n         {\n            Console::WriteLine( &quot; Level2Method exception handler&quot; );\n            \n            // Display the full call stack at this level.\n            StackTrace^ st1 = gcnew StackTrace( true );\n            Console::WriteLine( &quot; Stack trace for this level: {0}&quot;, st1-&gt;ToString() );\n            \n            // Build a stack trace from one frame, skipping the\n            // current frame and using the next frame.\n            StackTrace^ st2 = gcnew StackTrace( gcnew StackFrame( 1,true ) );\n            Console::WriteLine( &quot; Stack trace built with next level frame: {0}&quot;, st2-&gt;ToString() );\n            \n            // Build a stack trace skipping the current frame, and\n            // including all the other frames.\n            StackTrace^ st3 = gcnew StackTrace( 1,true );\n            Console::WriteLine( &quot; Stack trace built from the next level up: {0}&quot;, st3-&gt;ToString() );\n            Console::WriteLine();\n            Console::WriteLine( &quot;   ... throwing exception to next level ...&quot; );\n            Console::WriteLine( &quot;-------------------------------------------------<br>&quot; );\n            throw e;\n         }\n\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"StackFrameSample1#4\">      Public Sub Level2Method()\n         Try\n            Dim nestedClass As New ClassLevel3\n            nestedClass.Level3Method()\n         \n         Catch e As Exception\n            Console.WriteLine(&quot; Level2Method exception handler&quot;)\n            \n            &#39; Display the full call stack at this level.\n            Dim st1 As New StackTrace(True)\n            Console.WriteLine(&quot; Stack trace for this level: {0}&quot;, _\n               st1.ToString())\n            \n            &#39; Build a stack trace from one frame, skipping the current\n            &#39; frame and using the next frame.\n            Dim st2 As New StackTrace(New StackFrame(1, True))\n            Console.WriteLine(&quot; Stack trace built with next level frame: {0}&quot;, _\n                st2.ToString())\n            \n            &#39; Build a stack trace skipping the current frame, and\n            &#39; including all the other frames.\n            Dim st3 As New StackTrace(1, True)\n            Console.WriteLine(&quot; Stack trace built from the next level up: {0}&quot;, _\n                st3.ToString())\n            \n            Console.WriteLine()\n            Console.WriteLine(&quot;   ... throwing exception to next level ...&quot;)\n            Console.WriteLine(&quot;-------------------------------------------------&quot;)\n            Console.WriteLine()\n            Throw e\n         End Try\n      End Sub &#39;Level2Method\n</code></pre><pre><code class=\"lang-cs\" name=\"StackFrameSample1#4\">      public void Level2Method()\n      {\n         try \n         {\n            ClassLevel3 nestedClass = new ClassLevel3();\n            nestedClass.Level3Method();\n\n         }\n         catch (Exception e) \n         {\n            Console.WriteLine(&quot; Level2Method exception handler&quot;);\n\n            // Display the full call stack at this level.\n            StackTrace st1 = new StackTrace(true);\n            Console.WriteLine(&quot; Stack trace for this level: {0}&quot;,\n               st1.ToString());\n\n            // Build a stack trace from one frame, skipping the current\n            // frame and using the next frame.\n            StackTrace st2 = new StackTrace(new StackFrame(1, true));\n            Console.WriteLine(&quot; Stack trace built with next level frame: {0}&quot;,\n               st2.ToString());\n\n            // Build a stack trace skipping the current frame, and\n            // including all the other frames.\n            StackTrace st3 = new StackTrace(1, true);\n            Console.WriteLine(&quot; Stack trace built from the next level up: {0}&quot;,\n               st3.ToString());\n\n            Console.WriteLine();\n            Console.WriteLine(&quot;   ... throwing exception to next level ...&quot;);\n            Console.WriteLine(&quot;-------------------------------------------------<br>&quot;);\n            throw e;\n         }\n      }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_StackTrace__ctor_System_Threading_Thread_System_Boolean_\">\r\n    \r\n            <a id=\"System_Diagnostics_StackTrace__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StackTrace(Thread,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.stacktrace\" data-linktype=\"relative-path\">StackTrace</a> class for a specific thread, optionally capturing source information.  </p>\n<p> Do not use this constructor overload.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public StackTrace (System.Threading.Thread targetThread, bool needFileInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>targetThread</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.thread\" data-linktype=\"relative-path\">Thread</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The thread whose stack trace is requested.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>needFileInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to capture the file name, line number, and column number; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.threadstateexception\" data-linktype=\"relative-path\">ThreadStateException</a></div>\r\n                  </div>\r\n                  <p>The thread <code>targetThread</code> is not suspended.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"IMPORTANT\"><h5>Important</h5><p> Do not use this constructor. It is obsolete, and there is no recommended alternative. When you suspend a thread, you have no way of knowing what code it is executing, and deadlocks can occur very easily. For example, if you suspend a thread while it holds locks during a security permission evaluation, other threads in the <a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a> might be blocked. If you suspend a thread while it is executing a class constructor, other threads in the <a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a> that attempt to use that class are blocked.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_StackTrace__ctor_System_Exception_System_Int32_System_Boolean_\">\r\n    \r\n            <a id=\"System_Diagnostics_StackTrace__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StackTrace(Exception,Int32,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.stacktrace\" data-linktype=\"relative-path\">StackTrace</a> class using the provided exception object, skipping the specified number of frames and optionally capturing source information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public StackTrace (Exception e, int skipFrames, bool fNeedFileInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The exception object from which to construct the stack trace.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>skipFrames</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of frames up the stack from which to start the trace.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>fNeedFileInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to capture the file name, line number, and column number; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The parameter <code>e</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>skipFrames</code> parameter is negative.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The resulting stack trace describes the stack at the time of the exception.  </p>\n<p> If the number of frames to skip is greater than or equal to the total number of frames on the call stack at the time the instance is created, the <a class=\"xref\" href=\"system.diagnostics.stacktrace\" data-linktype=\"relative-path\">StackTrace</a> will contain no frames.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"fields\">\r\n        <h2>Fields\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_StackTrace_METHODS_TO_SKIP\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">METHODS_TO_SKIP</div>        \r\n          </div>\r\n    \r\n            <p>Defines the default for the number of methods to omit from the stack trace. This field is constant.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const int METHODS_TO_SKIP = 0;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default value for the number of methods to skip at the beginning of the stack trace. The value of this constant is 0.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_StackTrace_FrameCount\">\r\n    \r\n            <a id=\"System_Diagnostics_StackTrace_FrameCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FrameCount</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of frames in the stack trace.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int FrameCount { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of frames in the stack trace.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the first and last function calls in a stack trace.  </p>\n<pre><code class=\"lang-cpp\" name=\"StackFrameSample1#8\">      void Level5Method()\n      {\n         try\n         {\n            ClassLevel6^ nestedClass = gcnew ClassLevel6;\n            nestedClass-&gt;Level6Method();\n         }\n         catch ( Exception^ e ) \n         {\n            Console::WriteLine( &quot; Level5Method exception handler&quot; );\n            StackTrace^ st = gcnew StackTrace;\n            \n            // Display the most recent function call.\n            StackFrame^ sf = st-&gt;GetFrame( 0 );\n            Console::WriteLine();\n            Console::WriteLine( &quot;  Exception in method: &quot; );\n            Console::WriteLine( &quot;      {0}&quot;, sf-&gt;GetMethod() );\n            if ( st-&gt;FrameCount &gt; 1 )\n            {\n               \n               // Display the highest-level function call\n               // in the trace.\n               sf = st-&gt;GetFrame( st-&gt;FrameCount - 1 );\n               Console::WriteLine( &quot;  Original function call at top of call stack):&quot; );\n               Console::WriteLine( &quot;      {0}&quot;, sf-&gt;GetMethod() );\n            }\n            Console::WriteLine();\n            Console::WriteLine( &quot;   ... throwing exception to next level ...&quot; );\n            Console::WriteLine( &quot;-------------------------------------------------<br>&quot; );\n            throw e;\n         }\n\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"StackFrameSample1#8\">      Public Sub Level5Method()\n         Try\n            Dim nestedClass As New ClassLevel6()\n            nestedClass.Level6Method()\n         Catch e As Exception\n            Console.WriteLine(&quot; Level5Method exception handler&quot;)\n            \n            Dim st As New StackTrace()\n            \n            &#39; Display the most recent function call.\n            Dim sf As StackFrame = st.GetFrame(0)\n            Console.WriteLine()\n            Console.WriteLine(&quot;  Exception in method: &quot;)\n            Console.WriteLine(&quot;      {0}&quot;, sf.GetMethod())\n            \n            If st.FrameCount &gt; 1 Then\n               &#39; Display the highest-level function call in the trace.\n               sf = st.GetFrame((st.FrameCount - 1))\n               Console.WriteLine(&quot;  Original function call at top of call stack):&quot;)\n               Console.WriteLine(&quot;      {0}&quot;, sf.GetMethod())\n            End If\n            \n            Console.WriteLine()\n            Console.WriteLine(&quot;   ... throwing exception to next level ...&quot;)\n            Console.WriteLine(&quot;-------------------------------------------------&quot;)\n            Console.WriteLine()\n            Throw e\n         End Try\n      End Sub &#39;Level5Method\n</code></pre><pre><code class=\"lang-cs\" name=\"StackFrameSample1#8\">      public void Level5Method()\n      {\n         try \n         {\n            ClassLevel6 nestedClass = new ClassLevel6();\n            nestedClass.Level6Method();\n         }\n         catch (Exception e) \n         {\n            Console.WriteLine(&quot; Level5Method exception handler&quot;);\n\n            StackTrace st = new StackTrace();\n            \n            // Display the most recent function call.\n            StackFrame sf = st.GetFrame(0);\n            Console.WriteLine();\n            Console.WriteLine(&quot;  Exception in method: &quot;);\n            Console.WriteLine(&quot;      {0}&quot;, sf.GetMethod());\n\n            if (st.FrameCount &gt;1)\n            {\n               // Display the highest-level function call \n               // in the trace.\n               sf = st.GetFrame(st.FrameCount-1);\n               Console.WriteLine(&quot;  Original function call at top of call stack):&quot;);\n               Console.WriteLine(&quot;      {0}&quot;, sf.GetMethod());\n            }\n\n            Console.WriteLine();\n            Console.WriteLine(&quot;   ... throwing exception to next level ...&quot;);\n            Console.WriteLine(&quot;-------------------------------------------------<br>&quot;);\n            throw e;\n         }        \n      }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_StackTrace_GetFrame_System_Int32_\">\r\n    \r\n            <a id=\"System_Diagnostics_StackTrace_GetFrame_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetFrame(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the specified stack frame.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Diagnostics.StackFrame GetFrame (int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the stack frame requested.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.stackframe\" data-linktype=\"relative-path\">StackFrame</a></div>\r\n                  </div>\r\n                  <p>The specified stack frame.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Stack frames are numbered starting at 0, which is the last stack frame pushed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the first and last function calls in a stack trace.  </p>\n<pre><code class=\"lang-cpp\" name=\"StackFrameSample1#8\">      void Level5Method()\n      {\n         try\n         {\n            ClassLevel6^ nestedClass = gcnew ClassLevel6;\n            nestedClass-&gt;Level6Method();\n         }\n         catch ( Exception^ e ) \n         {\n            Console::WriteLine( &quot; Level5Method exception handler&quot; );\n            StackTrace^ st = gcnew StackTrace;\n            \n            // Display the most recent function call.\n            StackFrame^ sf = st-&gt;GetFrame( 0 );\n            Console::WriteLine();\n            Console::WriteLine( &quot;  Exception in method: &quot; );\n            Console::WriteLine( &quot;      {0}&quot;, sf-&gt;GetMethod() );\n            if ( st-&gt;FrameCount &gt; 1 )\n            {\n               \n               // Display the highest-level function call\n               // in the trace.\n               sf = st-&gt;GetFrame( st-&gt;FrameCount - 1 );\n               Console::WriteLine( &quot;  Original function call at top of call stack):&quot; );\n               Console::WriteLine( &quot;      {0}&quot;, sf-&gt;GetMethod() );\n            }\n            Console::WriteLine();\n            Console::WriteLine( &quot;   ... throwing exception to next level ...&quot; );\n            Console::WriteLine( &quot;-------------------------------------------------<br>&quot; );\n            throw e;\n         }\n\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"StackFrameSample1#8\">      Public Sub Level5Method()\n         Try\n            Dim nestedClass As New ClassLevel6()\n            nestedClass.Level6Method()\n         Catch e As Exception\n            Console.WriteLine(&quot; Level5Method exception handler&quot;)\n            \n            Dim st As New StackTrace()\n            \n            &#39; Display the most recent function call.\n            Dim sf As StackFrame = st.GetFrame(0)\n            Console.WriteLine()\n            Console.WriteLine(&quot;  Exception in method: &quot;)\n            Console.WriteLine(&quot;      {0}&quot;, sf.GetMethod())\n            \n            If st.FrameCount &gt; 1 Then\n               &#39; Display the highest-level function call in the trace.\n               sf = st.GetFrame((st.FrameCount - 1))\n               Console.WriteLine(&quot;  Original function call at top of call stack):&quot;)\n               Console.WriteLine(&quot;      {0}&quot;, sf.GetMethod())\n            End If\n            \n            Console.WriteLine()\n            Console.WriteLine(&quot;   ... throwing exception to next level ...&quot;)\n            Console.WriteLine(&quot;-------------------------------------------------&quot;)\n            Console.WriteLine()\n            Throw e\n         End Try\n      End Sub &#39;Level5Method\n</code></pre><pre><code class=\"lang-cs\" name=\"StackFrameSample1#8\">      public void Level5Method()\n      {\n         try \n         {\n            ClassLevel6 nestedClass = new ClassLevel6();\n            nestedClass.Level6Method();\n         }\n         catch (Exception e) \n         {\n            Console.WriteLine(&quot; Level5Method exception handler&quot;);\n\n            StackTrace st = new StackTrace();\n            \n            // Display the most recent function call.\n            StackFrame sf = st.GetFrame(0);\n            Console.WriteLine();\n            Console.WriteLine(&quot;  Exception in method: &quot;);\n            Console.WriteLine(&quot;      {0}&quot;, sf.GetMethod());\n\n            if (st.FrameCount &gt;1)\n            {\n               // Display the highest-level function call \n               // in the trace.\n               sf = st.GetFrame(st.FrameCount-1);\n               Console.WriteLine(&quot;  Original function call at top of call stack):&quot;);\n               Console.WriteLine(&quot;      {0}&quot;, sf.GetMethod());\n            }\n\n            Console.WriteLine();\n            Console.WriteLine(&quot;   ... throwing exception to next level ...&quot;);\n            Console.WriteLine(&quot;-------------------------------------------------<br>&quot;);\n            throw e;\n         }        \n      }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_StackTrace_GetFrames\">\r\n    \r\n            <a id=\"System_Diagnostics_StackTrace_GetFrames_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetFrames()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a copy of all stack frames in the current stack trace.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Diagnostics.StackFrame[] GetFrames ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.stackframe\" data-linktype=\"relative-path\">StackFrame</a>[]</div>\r\n                  </div>\r\n                  <p>An array of type <a class=\"xref\" href=\"system.diagnostics.stackframe\" data-linktype=\"relative-path\">StackFrame</a> representing the function calls in the stack trace.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the returned <a class=\"xref\" href=\"system.diagnostics.stackframe\" data-linktype=\"relative-path\">StackFrame</a> array to enumerate and examine function calls in the <a class=\"xref\" href=\"system.diagnostics.stacktrace\" data-linktype=\"relative-path\">StackTrace</a>. The length of the returned array is equal to the <a class=\"xref\" href=\"system.diagnostics.stacktrace#System_Diagnostics_StackTrace_FrameCount_\" data-linktype=\"relative-path\">FrameCount</a> property value.  </p>\n<p> The <a class=\"xref\" href=\"system.diagnostics.stackframe\" data-linktype=\"relative-path\">StackFrame</a> array elements are in reverse chronological order. The <a class=\"xref\" href=\"system.diagnostics.stackframe\" data-linktype=\"relative-path\">StackFrame</a> at array index 0 represents the most recent function call in the stack trace and the last frame pushed onto the call stack. The <a class=\"xref\" href=\"system.diagnostics.stackframe\" data-linktype=\"relative-path\">StackFrame</a> at array index <a class=\"xref\" href=\"system.diagnostics.stacktrace#System_Diagnostics_StackTrace_FrameCount_\" data-linktype=\"relative-path\">FrameCount</a> minus 1 represents the oldest function call in the stack trace and the first frame pushed onto the call stack.  </p>\n<p> Use the GetFrames method to obtain all stack frames in a stack trace; use the <a class=\"xref\" href=\"system.diagnostics.stacktrace#System_Diagnostics_StackTrace_GetFrame_\" data-linktype=\"relative-path\">GetFrame</a> method to obtain a specific stack frame in a stack trace. The <a class=\"xref\" href=\"system.diagnostics.stackframe\" data-linktype=\"relative-path\">StackFrame</a> indexes are ordered alike by the two methods. For example, the <a class=\"xref\" href=\"system.diagnostics.stackframe\" data-linktype=\"relative-path\">StackFrame</a> at index 0 in the array returned by GetFrames is equivalent to the <a class=\"xref\" href=\"system.diagnostics.stackframe\" data-linktype=\"relative-path\">StackFrame</a> returned by <a class=\"xref\" href=\"system.diagnostics.stacktrace#System_Diagnostics_StackTrace_GetFrame_\" data-linktype=\"relative-path\">GetFrame</a> with an input index of 0.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates enumerating the frames in a <a class=\"xref\" href=\"system.diagnostics.stacktrace\" data-linktype=\"relative-path\">StackTrace</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"StackTraceSample2#3\">            StackTrace^ st = gcnew StackTrace( 1,true );\n            array&lt;StackFrame^&gt;^stFrames = st-&gt;GetFrames();\n            for ( int i; i &lt; stFrames-&gt;Length; i++ )\n            {\n               StackFrame^ sf = stFrames[ i ];\n               Console::WriteLine( &quot;Method: {0}&quot;, sf-&gt;GetMethod() );\n\n            }\n</code></pre><pre><code class=\"lang-vb\" name=\"StackTraceSample2#3\">            Dim strace As New StackTrace(1, True)\n            Dim stFrames As StackFrame() = strace.GetFrames()\n\n            Dim sf As StackFrame\n            For Each sf In  stFrames\n               Console.WriteLine(&quot;Method: {0}&quot;, sf.GetMethod())\n            Next sf\n</code></pre><pre><code class=\"lang-cs\" name=\"StackTraceSample2#3\">                StackTrace st = new StackTrace(1, true);\n                StackFrame [] stFrames = st.GetFrames();\n\n                foreach(StackFrame sf in stFrames )\n                {\n                   Console.WriteLine(&quot;Method: {0}&quot;, sf.GetMethod() );\n                }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_StackTrace_ToString\">\r\n    \r\n            <a id=\"System_Diagnostics_StackTrace_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Builds a readable representation of the stack trace.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A readable representation of the stack trace.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example writes stack trace information to an event log entry.  </p>\n<pre><code class=\"lang-cpp\" name=\"StackTraceSample3#6\">            StackFrame^ fr = gcnew StackFrame( 1,true );\n            StackTrace^ st = gcnew StackTrace( fr );\n            EventLog::WriteEntry( fr-&gt;GetMethod()-&gt;Name, st-&gt;ToString(), EventLogEntryType::Warning );\n</code></pre><pre><code class=\"lang-cs\" name=\"StackTraceSample3#6\">                StackFrame fr = new StackFrame(1,true);\n                StackTrace st = new StackTrace(fr);\n                EventLog.WriteEntry(fr.GetMethod().Name,\n                                    st.ToString(),\n                                    EventLogEntryType.Warning);\n</code></pre><pre><code class=\"lang-vb\" name=\"StackTraceSample3#6\">            Dim frame As New StackFrame(1, True)\n            Dim strace As New StackTrace(frame)            \n\n            EventLog.WriteEntry(frame.GetMethod().Name, _\n                                strace.ToString(), _\n                                EventLogEntryType.Warning)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Diagnostics.StackTrace.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Diagnostics.StackTrace.yml\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.StackTrace\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.StackTrace..ctor\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.StackTrace.FrameCount\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.StackTrace.GetFrame\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.StackTrace.GetFrames\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.StackTrace.METHODS_TO_SKIP\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.StackTrace.ToString\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"8fc18021-69e9-2efb-fa9c-bd26f0a0a200\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Diagnostics\\StackTrace.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a stack trace, which is an ordered collection of one or more stack frames.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Diagnostics/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Diagnostics.StackTrace\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Diagnostics.StackTrace.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Diagnostics.StackTrace.yml","open_to_public_contributors":true,"api_name":["System.Diagnostics.StackTrace","System.Diagnostics.StackTrace..ctor","System.Diagnostics.StackTrace.FrameCount","System.Diagnostics.StackTrace.GetFrame","System.Diagnostics.StackTrace.GetFrames","System.Diagnostics.StackTrace.METHODS_TO_SKIP","System.Diagnostics.StackTrace.ToString"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Diagnostics.StackTrace","System::Diagnostics::StackTrace","System.Diagnostics.StackTrace.#ctor","System::Diagnostics::StackTrace::#ctor","System.Diagnostics.StackTrace.FrameCount","System::Diagnostics::StackTrace::FrameCount","System.Diagnostics.StackTrace.GetFrame","System::Diagnostics::StackTrace::GetFrame","System.Diagnostics.StackTrace.GetFrames","System::Diagnostics::StackTrace::GetFrames","System.Diagnostics.StackTrace.METHODS_TO_SKIP","System::Diagnostics::StackTrace::METHODS_TO_SKIP","System.Diagnostics.StackTrace.ToString","System::Diagnostics::StackTrace::ToString"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"8fc18021-69e9-2efb-fa9c-bd26f0a0a200","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Diagnostics\\StackTrace.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Diagnostics/StackTrace.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"StackTrace class | Microsoft Docs","_op_ogTitle":"StackTrace class","description":"Represents a stack trace, which is an ordered collection of one or more stack frames.\n","toc_asset_id":"_splitted/System.Diagnostics/toc.json","toc_rel":"_splitted/System.Diagnostics/toc.json","source_url":"","ms.assetid":"System.Diagnostics.StackTrace","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.diagnostics.stacktrace","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.diagnostics.stacktrace","fileRelativePath":"System.Diagnostics.StackTrace.html"},"themesRelativePathToOutputRoot":"_themes/"}