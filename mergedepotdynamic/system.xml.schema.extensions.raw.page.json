{"content":"    \r\n    <h1 id=\"System_Xml_Schema_Extensions\">\r\n      <span class=\"lang-csharp\">Extensions</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>This class contains the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/sqltecxlinq-md.md&quot; -->LINQ to XML<!--END INCLUDE --> extension methods for XSD validation.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static class Extensions</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Extensions</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>This class also contains methods to get the post-schema-validation infoset (PSVI) of a validated XML node.  </p>\n<p> When you validate an <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a>, <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>, or <a class=\"xref\" href=\"system.xml.linq.xattribute\" data-linktype=\"relative-path\">XAttribute</a>, you can also optionally populate the XML tree with the post-schema-validation infoset. PSVI information is added as an annotation of type <a class=\"xref\" href=\"system.xml.schema.xmlschemainfo\" data-linktype=\"relative-path\">System.Xml.Schema.XmlSchemaInfo</a>.</p>\n\r\n    \r\n    \r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Schema_Extensions_GetSchemaInfo_System_Xml_Linq_XAttribute_\" data-linktype=\"self-bookmark\">GetSchemaInfo(XAttribute)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the post-schema-validation infoset (PSVI) of a validated attribute.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Schema_Extensions_GetSchemaInfo_System_Xml_Linq_XElement_\" data-linktype=\"self-bookmark\">GetSchemaInfo(XElement)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the post-schema-validation infoset (PSVI) of a validated element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Schema_Extensions_Validate_System_Xml_Linq_XDocument_System_Xml_Schema_XmlSchemaSet_System_Xml_Schema_ValidationEventHandler_\" data-linktype=\"self-bookmark\">Validate(XDocument,XmlSchemaSet,ValidationEventHandler)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>This method validates that an <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> conforms to an XSD in an <a class=\"xref\" href=\"system.xml.schema.xmlschemaset\" data-linktype=\"relative-path\">XmlSchemaSet</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Schema_Extensions_Validate_System_Xml_Linq_XAttribute_System_Xml_Schema_XmlSchemaObject_System_Xml_Schema_XmlSchemaSet_System_Xml_Schema_ValidationEventHandler_\" data-linktype=\"self-bookmark\">Validate(XAttribute,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>This method validates that an <a class=\"xref\" href=\"system.xml.linq.xattribute\" data-linktype=\"relative-path\">XAttribute</a> conforms to a specified <a class=\"xref\" href=\"system.xml.schema.xmlschemaobject\" data-linktype=\"relative-path\">XmlSchemaObject</a> and an <a class=\"xref\" href=\"system.xml.schema.xmlschemaset\" data-linktype=\"relative-path\">XmlSchemaSet</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Schema_Extensions_Validate_System_Xml_Linq_XDocument_System_Xml_Schema_XmlSchemaSet_System_Xml_Schema_ValidationEventHandler_System_Boolean_\" data-linktype=\"self-bookmark\">Validate(XDocument,XmlSchemaSet,ValidationEventHandler,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Validates that an <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> conforms to an XSD in an <a class=\"xref\" href=\"system.xml.schema.xmlschemaset\" data-linktype=\"relative-path\">XmlSchemaSet</a>, optionally populating the XML tree with the post-schema-validation infoset (PSVI).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Schema_Extensions_Validate_System_Xml_Linq_XElement_System_Xml_Schema_XmlSchemaObject_System_Xml_Schema_XmlSchemaSet_System_Xml_Schema_ValidationEventHandler_\" data-linktype=\"self-bookmark\">Validate(XElement,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>This method validates that an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> sub-tree conforms to a specified <a class=\"xref\" href=\"system.xml.schema.xmlschemaobject\" data-linktype=\"relative-path\">XmlSchemaObject</a> and an <a class=\"xref\" href=\"system.xml.schema.xmlschemaset\" data-linktype=\"relative-path\">XmlSchemaSet</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Schema_Extensions_Validate_System_Xml_Linq_XAttribute_System_Xml_Schema_XmlSchemaObject_System_Xml_Schema_XmlSchemaSet_System_Xml_Schema_ValidationEventHandler_System_Boolean_\" data-linktype=\"self-bookmark\">Validate(XAttribute,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Validates that an <a class=\"xref\" href=\"system.xml.linq.xattribute\" data-linktype=\"relative-path\">XAttribute</a> conforms to a specified <a class=\"xref\" href=\"system.xml.schema.xmlschemaobject\" data-linktype=\"relative-path\">XmlSchemaObject</a> and an <a class=\"xref\" href=\"system.xml.schema.xmlschemaset\" data-linktype=\"relative-path\">XmlSchemaSet</a>, optionally populating the XML tree with the post-schema-validation infoset (PSVI).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Schema_Extensions_Validate_System_Xml_Linq_XElement_System_Xml_Schema_XmlSchemaObject_System_Xml_Schema_XmlSchemaSet_System_Xml_Schema_ValidationEventHandler_System_Boolean_\" data-linktype=\"self-bookmark\">Validate(XElement,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Validates that an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> sub-tree conforms to a specified <a class=\"xref\" href=\"system.xml.schema.xmlschemaobject\" data-linktype=\"relative-path\">XmlSchemaObject</a> and an <a class=\"xref\" href=\"system.xml.schema.xmlschemaset\" data-linktype=\"relative-path\">XmlSchemaSet</a>, optionally populating the XML tree with the post-schema-validation infoset (PSVI).</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Schema_Extensions_GetSchemaInfo_System_Xml_Linq_XAttribute_\">\r\n    \r\n            <a id=\"System_Xml_Schema_Extensions_GetSchemaInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetSchemaInfo(XAttribute)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the post-schema-validation infoset (PSVI) of a validated attribute.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Xml.Schema.IXmlSchemaInfo GetSchemaInfo (this System.Xml.Linq.XAttribute source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xattribute\" data-linktype=\"relative-path\">XAttribute</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.linq.xattribute\" data-linktype=\"relative-path\">XAttribute</a> that has been previously validated.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.schema.ixmlschemainfo\" data-linktype=\"relative-path\">IXmlSchemaInfo</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.xml.schema.ixmlschemainfo\" data-linktype=\"relative-path\">IXmlSchemaInfo</a> that contains the post-schema-validation infoset for an <a class=\"xref\" href=\"system.xml.linq.xattribute\" data-linktype=\"relative-path\">XAttribute</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can use the <a class=\"xref\" href=\"system.xml.schema.ixmlschemainfo\" data-linktype=\"relative-path\">IXmlSchemaInfo</a> returned by this method to determine certain characteristics of a validated attribute. For example, you can determine if the attribute came from a default attribute value in an XSD.  </p>\n<p> You use the <a class=\"xref\" href=\"system.xml.schema.ixmlschemainfo#System_Xml_Schema_IXmlSchemaInfo_SchemaAttribute_\" data-linktype=\"relative-path\">SchemaAttribute</a> property to get a partial validation type (<a class=\"xref\" href=\"system.xml.schema.xmlschemaattribute\" data-linktype=\"relative-path\">XmlSchemaAttribute</a>). You can use it to revalidate an attribute without validating an entire document.  </p>\n<p> For an example of this property, see <a class=\"xref\" href=\"system.xml.schema.extensions#System_Xml_Schema_Extensions_Validate_\" data-linktype=\"relative-path\">Validate</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Schema_Extensions_GetSchemaInfo_System_Xml_Linq_XElement_\">\r\n    \r\n            <a id=\"System_Xml_Schema_Extensions_GetSchemaInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetSchemaInfo(XElement)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the post-schema-validation infoset (PSVI) of a validated element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Xml.Schema.IXmlSchemaInfo GetSchemaInfo (this System.Xml.Linq.XElement source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> that has been previously validated.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.schema.ixmlschemainfo\" data-linktype=\"relative-path\">IXmlSchemaInfo</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.xml.schema.ixmlschemainfo\" data-linktype=\"relative-path\">IXmlSchemaInfo</a> that contains the post-schema-validation infoset (PSVI) for an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can use the <a class=\"xref\" href=\"system.xml.schema.ixmlschemainfo\" data-linktype=\"relative-path\">IXmlSchemaInfo</a> returned by this method to determine certain characteristics of a validated element. For example, you can determine the dynamic schema type of the element.  </p>\n<p> You use the <a class=\"xref\" href=\"system.xml.schema.ixmlschemainfo#System_Xml_Schema_IXmlSchemaInfo_SchemaElement_\" data-linktype=\"relative-path\">SchemaElement</a> property to get a partial validation type (<a class=\"xref\" href=\"system.xml.schema.xmlschemaelement\" data-linktype=\"relative-path\">XmlSchemaElement</a>). You can use it to revalidate a sub-tree with an element at its root without validating an entire document.  </p>\n<p> For an example of this property, see <a class=\"xref\" href=\"system.xml.schema.extensions#System_Xml_Schema_Extensions_Validate_\" data-linktype=\"relative-path\">Validate</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example populates the tree with a PSVI. After validation, it prints all elements and attributes in the tree that are invalid according to the PSVI.  </p>\n<pre><code class=\"lang-c#\">\n                static void DumpInvalidNodes(XElement el)  \n{  \n    if (el.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  \n        Console.WriteLine(&quot;Invalid Element {0}&quot;,  \n            el.AncestorsAndSelf()  \n            .InDocumentOrder()  \n            .Aggregate(&quot;&quot;, (s, i) =&gt; s + &quot;/&quot; + i.Name.ToString()));  \n    foreach (XAttribute att in el.Attributes())  \n        if (att.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  \n            Console.WriteLine(&quot;Invalid Attribute {0}&quot;,  \n                att  \n                .Parent  \n                .AncestorsAndSelf()  \n                .InDocumentOrder()  \n                .Aggregate(&quot;&quot;,  \n                    (s, i) =&gt; s + &quot;/&quot; + i.Name.ToString()) + &quot;/@&quot; + att.Name.ToString()  \n                );  \n    foreach (XElement child in el.Elements())  \n        DumpInvalidNodes(child);  \n}  \n\nstatic void Main(string[] args)  \n{  \n    string xsdMarkup =  \n         @&quot;&lt;xsd:schema xmlns:xsd=&#39;http://www.w3.org/2001/XMLSchema&#39;&gt;  \n   &lt;xsd:simpleType name=&#39;GCType&#39;&gt;  \n    &lt;xsd:restriction base=&#39;xsd:token&#39;&gt;  \n     &lt;xsd:enumeration value=&#39;AAA&#39;/&gt;  \n     &lt;xsd:enumeration value=&#39;BBB&#39;/&gt;  \n    &lt;/xsd:restriction&gt;  \n   &lt;/xsd:simpleType&gt;  \n   &lt;xsd:element name=&#39;Root&#39;&gt;  \n    &lt;xsd:complexType&gt;  \n     &lt;xsd:sequence&gt;  \n      &lt;xsd:element name=&#39;Child1&#39; minOccurs=&#39;1&#39; maxOccurs=&#39;1&#39;&gt;  \n       &lt;xsd:complexType&gt;  \n        &lt;xsd:sequence&gt;  \n         &lt;xsd:element name=&#39;GrandChild1&#39; type=&#39;GCType&#39;/&gt;  \n         &lt;xsd:element name=&#39;GrandChild2&#39; type=&#39;GCType&#39;/&gt;  \n         &lt;xsd:element name=&#39;GrandChild3&#39; type=&#39;GCType&#39;/&gt;  \n        &lt;/xsd:sequence&gt;  \n       &lt;/xsd:complexType&gt;  \n      &lt;/xsd:element&gt;  \n     &lt;/xsd:sequence&gt;  \n    &lt;/xsd:complexType&gt;  \n   &lt;/xsd:element&gt;  \n  &lt;/xsd:schema&gt;&quot;;  \n\n    XmlSchemaSet schemas = new XmlSchemaSet();  \n    schemas.Add(&quot;&quot;, XmlReader.Create(new StringReader(xsdMarkup)));  \n\n    XDocument doc1 = new XDocument(  \n        new XElement(&quot;Root&quot;,  \n            new XElement(&quot;Child1&quot;,  \n                new XElement(&quot;GrandChild1&quot;, &quot;AAA&quot;),  \n                new XElement(&quot;GrandChild2&quot;, &quot;ZZZ&quot;),  \n                new XElement(&quot;GrandChild3&quot;, &quot;ZZZ&quot;)  \n            )  \n        )  \n    );  \n\n    Console.WriteLine(&quot;Validating doc1 ...&quot;);  \n    bool errors = false;  \n    doc1.Validate(schemas, (sender, e) =&gt;  \n    {  \n        Console.WriteLine(e.Message);  \n        errors = true;  \n    }, true);  \n    Console.WriteLine(&quot;doc1 {0}&quot;, errors ? &quot;did not validate&quot; : &quot;validated&quot;);  \n    DumpInvalidNodes(doc1.Root);  \n}\n</code></pre><pre><code class=\"lang-vb\">\n                Private Sub DumpInvalidNodes(ByVal el As XElement)  \n    If el.GetSchemaInfo.Validity &lt;&gt; XmlSchemaValidity.Valid Then  \n        Console.WriteLine(&quot;Invalid Element {0}&quot;, _  \n            el _  \n            .AncestorsAndSelf _  \n            .InDocumentOrder() _  \n            .Aggregate(&quot;&quot;, _  \n                Function(ByVal s, ByVal i) s + &quot;/&quot; + i.Name.ToString()))  \n    End If  \n    For Each att As XAttribute In el.Attributes()  \n        If att.GetSchemaInfo.Validity &lt;&gt; XmlSchemaValidity.Valid Then  \n            Console.WriteLine(&quot;Invalid Attribute {0}&quot;, _  \n                att _  \n                .Parent _  \n                .AncestorsAndSelf() _  \n                .InDocumentOrder() _  \n                .Aggregate(&quot;&quot;, _  \n                    Function(ByVal s, ByVal i) s + &quot;/&quot; + i.Name.ToString()) + _  \n                    &quot;/@&quot; + att.Name.ToString())  \n        End If  \n    Next  \n    For Each child As XElement In el.Elements()  \n        DumpInvalidNodes(child)  \n    Next  \nEnd Sub  \n\nDim errors As Boolean = False  \n\nPrivate Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  \n    Console.WriteLine(&quot;{0}&quot;, e.Message)  \n    errors = True  \nEnd Sub  \n\nSub Main()  \n    Dim xsdMarkup As XDocument = _  \n    &lt;?xml version=&#39;1.0&#39;?&gt;  \n    &lt;xsd:schema xmlns:xsd=&#39;http://www.w3.org/2001/XMLSchema&#39;&gt;  \n        &lt;xsd:simpleType name=&#39;GCType&#39;&gt;  \n            &lt;xsd:restriction base=&#39;xsd:token&#39;&gt;  \n                &lt;xsd:enumeration value=&#39;AAA&#39;/&gt;  \n                &lt;xsd:enumeration value=&#39;BBB&#39;/&gt;  \n            &lt;/xsd:restriction&gt;  \n        &lt;/xsd:simpleType&gt;  \n        &lt;xsd:element name=&#39;Root&#39;&gt;  \n            &lt;xsd:complexType&gt;  \n                &lt;xsd:sequence&gt;  \n                    &lt;xsd:element name=&#39;Child1&#39; minOccurs=&#39;1&#39; maxOccurs=&#39;1&#39;&gt;  \n                        &lt;xsd:complexType&gt;  \n                            &lt;xsd:sequence&gt;  \n                                &lt;xsd:element name=&#39;GrandChild1&#39; type=&#39;GCType&#39;/&gt;  \n                                &lt;xsd:element name=&#39;GrandChild2&#39; type=&#39;GCType&#39;/&gt;  \n                                &lt;xsd:element name=&#39;GrandChild3&#39; type=&#39;GCType&#39;/&gt;  \n                            &lt;/xsd:sequence&gt;  \n                        &lt;/xsd:complexType&gt;  \n                    &lt;/xsd:element&gt;  \n                &lt;/xsd:sequence&gt;  \n            &lt;/xsd:complexType&gt;  \n        &lt;/xsd:element&gt;  \n    &lt;/xsd:schema&gt;  \n\n    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  \n    schemas.Add(&quot;&quot;, xsdMarkup.CreateReader)  \n\n    Dim doc1 As XDocument = _  \n    &lt;?xml version=&#39;1.0&#39;?&gt;  \n    &lt;Root&gt;  \n        &lt;Child1&gt;  \n            &lt;GrandChild1&gt;AAA&lt;/GrandChild1&gt;  \n            &lt;GrandChild2&gt;ZZZ&lt;/GrandChild2&gt;  \n            &lt;GrandChild3&gt;ZZZ&lt;/GrandChild3&gt;  \n        &lt;/Child1&gt;  \n    &lt;/Root&gt;  \n\n    Console.WriteLine(&quot;Validating doc1 ...&quot;)  \n    errors = False  \n    doc1.Validate(schemas, AddressOf XSDErrors, True)  \n    Console.WriteLine(&quot;doc1 {0}&quot;, IIf(errors, &quot;did not validate&quot;, &quot;validated&quot;))  \n    DumpInvalidNodes(doc1.Root)  \nEnd Sub\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>Validating doc1 ...  \nThe &#39;GrandChild2&#39; element is invalid - The value &#39;ZZZ&#39; is invalid according to its datatype &#39;GCType&#39; - The Enumeration constraint failed.  \nThe &#39;GrandChild3&#39; element is invalid - The value &#39;ZZZ&#39; is invalid according to its datatype &#39;GCType&#39; - The Enumeration constraint failed.  \ndoc1 did not validate  \nInvalid Element /Root  \nInvalid Element /Root/Child1  \nInvalid Element /Root/Child1/GrandChild2  \nInvalid Element /Root/Child1/GrandChild3\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Schema_Extensions_Validate_System_Xml_Linq_XDocument_System_Xml_Schema_XmlSchemaSet_System_Xml_Schema_ValidationEventHandler_\">\r\n    \r\n            <a id=\"System_Xml_Schema_Extensions_Validate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Validate(XDocument,XmlSchemaSet,ValidationEventHandler)</div>        \r\n          </div>\r\n    \r\n            <p>This method validates that an <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> conforms to an XSD in an <a class=\"xref\" href=\"system.xml.schema.xmlschemaset\" data-linktype=\"relative-path\">XmlSchemaSet</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Validate (this System.Xml.Linq.XDocument source, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> to validate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>schemas</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.schema.xmlschemaset\" data-linktype=\"relative-path\">XmlSchemaSet</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.schema.xmlschemaset\" data-linktype=\"relative-path\">XmlSchemaSet</a> to validate against.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>validationEventHandler</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.schema.validationeventhandler\" data-linktype=\"relative-path\">ValidationEventHandler</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.xml.schema.validationeventhandler\" data-linktype=\"relative-path\">ValidationEventHandler</a> for an event that occurs when the reader encounters validation errors. If <code>null</code>, throws an exception upon validation errors.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.schema.xmlschemavalidationexception\" data-linktype=\"relative-path\">XmlSchemaValidationException</a></div>\r\n                  </div>\r\n                  <p>Thrown for XML Schema Definition Language (XSD) validation errors.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This extension method validates that the <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> conforms to the schema content model in <a class=\"xref\" href=\"system.xml.schema.xmlschemaset\" data-linktype=\"relative-path\">XmlSchemaSet</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an <a class=\"xref\" href=\"system.xml.schema.xmlschemaset\" data-linktype=\"relative-path\">XmlSchemaSet</a>, then validates two <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> objects against the schema set. One of the documents is valid, the other is not.  </p>\n<pre><code class=\"lang-c#\">\n                string xsdMarkup =  \n    @&quot;&lt;xsd:schema xmlns:xsd=&#39;http://www.w3.org/2001/XMLSchema&#39;&gt;  \n       &lt;xsd:element name=&#39;Root&#39;&gt;  \n        &lt;xsd:complexType&gt;  \n         &lt;xsd:sequence&gt;  \n          &lt;xsd:element name=&#39;Child1&#39; minOccurs=&#39;1&#39; maxOccurs=&#39;1&#39;/&gt;  \n          &lt;xsd:element name=&#39;Child2&#39; minOccurs=&#39;1&#39; maxOccurs=&#39;1&#39;/&gt;  \n         &lt;/xsd:sequence&gt;  \n        &lt;/xsd:complexType&gt;  \n       &lt;/xsd:element&gt;  \n      &lt;/xsd:schema&gt;&quot;;  \nXmlSchemaSet schemas = new XmlSchemaSet();  \nschemas.Add(&quot;&quot;, XmlReader.Create(new StringReader(xsdMarkup)));  \n\nXDocument doc1 = new XDocument(  \n    new XElement(&quot;Root&quot;,  \n        new XElement(&quot;Child1&quot;, &quot;content1&quot;),  \n        new XElement(&quot;Child2&quot;, &quot;content1&quot;)  \n    )  \n);  \n\nXDocument doc2 = new XDocument(  \n    new XElement(&quot;Root&quot;,  \n        new XElement(&quot;Child1&quot;, &quot;content1&quot;),  \n        new XElement(&quot;Child3&quot;, &quot;content1&quot;)  \n    )  \n);  \n\nConsole.WriteLine(&quot;Validating doc1&quot;);  \nbool errors = false;  \ndoc1.Validate(schemas, (o, e) =&gt;  \n                     {  \n                         Console.WriteLine(&quot;{0}&quot;, e.Message);  \n                         errors = true;  \n                     });  \nConsole.WriteLine(&quot;doc1 {0}&quot;, errors ? &quot;did not validate&quot; : &quot;validated&quot;);  \n\nConsole.WriteLine();  \nConsole.WriteLine(&quot;Validating doc2&quot;);  \nerrors = false;  \ndoc2.Validate(schemas, (o, e) =&gt;  \n                     {  \n                         Console.WriteLine(&quot;{0}&quot;, e.Message);  \n                         errors = true;  \n                     });  \nConsole.WriteLine(&quot;doc2 {0}&quot;, errors ? &quot;did not validate&quot; : &quot;validated&quot;);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim errors As Boolean = False  \n\nPrivate Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  \n    Console.WriteLine(&quot;{0}&quot;, e.Message)  \n    errors = True  \nEnd Sub  \n\nSub Main()  \n    Dim xsdMarkup As XDocument = _  \n    &lt;?xml version=&#39;1.0&#39;?&gt;  \n    &lt;xsd:schema xmlns:xsd=&#39;http://www.w3.org/2001/XMLSchema&#39;&gt;  \n        &lt;xsd:element name=&#39;Root&#39;&gt;  \n            &lt;xsd:complexType&gt;  \n                &lt;xsd:sequence&gt;  \n                    &lt;xsd:element name=&#39;Child1&#39; minOccurs=&#39;1&#39; maxOccurs=&#39;1&#39;/&gt;  \n                    &lt;xsd:element name=&#39;Child2&#39; minOccurs=&#39;1&#39; maxOccurs=&#39;1&#39;/&gt;  \n                &lt;/xsd:sequence&gt;  \n            &lt;/xsd:complexType&gt;  \n        &lt;/xsd:element&gt;  \n    &lt;/xsd:schema&gt;  \n\n    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  \n    schemas.Add(&quot;&quot;, xsdMarkup.CreateReader)  \n\n    Dim doc1 As XDocument = _  \n    &lt;?xml version=&#39;1.0&#39;?&gt;  \n    &lt;Root&gt;  \n        &lt;Child1&gt;content1&lt;/Child1&gt;  \n        &lt;Child2&gt;content2&lt;/Child2&gt;  \n    &lt;/Root&gt;  \n\n    Dim doc2 As XDocument = _  \n    &lt;?xml version=&#39;1.0&#39;?&gt;  \n    &lt;Root&gt;  \n        &lt;Child1&gt;content1&lt;/Child1&gt;  \n        &lt;Child3&gt;content1&lt;/Child3&gt;  \n    &lt;/Root&gt;  \n\n    Console.WriteLine(&quot;Validating doc1&quot;)  \n    errors = False  \n    doc1.Validate(schemas, AddressOf XSDErrors)  \n    Console.WriteLine(&quot;doc1 {0}&quot;, IIf(errors, &quot;did not validate&quot;, &quot;validated&quot;))  \n\n    Console.WriteLine()  \n    Console.WriteLine(&quot;Validating doc2&quot;)  \n    errors = False  \n    doc2.Validate(schemas, AddressOf XSDErrors)  \n    Console.WriteLine(&quot;doc2 {0}&quot;, IIf(errors, &quot;did not validate&quot;, &quot;validated&quot;))  \nEnd Sub\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>Validating doc1  \ndoc1 validated  \n\nValidating doc2  \nThe element &#39;Root&#39; has invalid child element &#39;Child3&#39;. List of possible elements expected: &#39;Child2&#39;.  \ndoc2 did not validate\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Schema_Extensions_Validate_System_Xml_Linq_XAttribute_System_Xml_Schema_XmlSchemaObject_System_Xml_Schema_XmlSchemaSet_System_Xml_Schema_ValidationEventHandler_\">\r\n    \r\n            <a id=\"System_Xml_Schema_Extensions_Validate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Validate(XAttribute,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler)</div>        \r\n          </div>\r\n    \r\n            <p>This method validates that an <a class=\"xref\" href=\"system.xml.linq.xattribute\" data-linktype=\"relative-path\">XAttribute</a> conforms to a specified <a class=\"xref\" href=\"system.xml.schema.xmlschemaobject\" data-linktype=\"relative-path\">XmlSchemaObject</a> and an <a class=\"xref\" href=\"system.xml.schema.xmlschemaset\" data-linktype=\"relative-path\">XmlSchemaSet</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Validate (this System.Xml.Linq.XAttribute source, System.Xml.Schema.XmlSchemaObject partialValidationType, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xattribute\" data-linktype=\"relative-path\">XAttribute</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.linq.xattribute\" data-linktype=\"relative-path\">XAttribute</a> to validate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>partialValidationType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.schema.xmlschemaobject\" data-linktype=\"relative-path\">XmlSchemaObject</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.schema.xmlschemaobject\" data-linktype=\"relative-path\">XmlSchemaObject</a> that specifies the sub-tree to validate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>schemas</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.schema.xmlschemaset\" data-linktype=\"relative-path\">XmlSchemaSet</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.schema.xmlschemaset\" data-linktype=\"relative-path\">XmlSchemaSet</a> to validate against.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>validationEventHandler</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.schema.validationeventhandler\" data-linktype=\"relative-path\">ValidationEventHandler</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.xml.schema.validationeventhandler\" data-linktype=\"relative-path\">ValidationEventHandler</a> for an event that occurs when the reader encounters validation errors. If <code>null</code>, throws an exception upon validation errors.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.schema.xmlschemavalidationexception\" data-linktype=\"relative-path\">XmlSchemaValidationException</a></div>\r\n                  </div>\r\n                  <p>Thrown for XML Schema Definition Language (XSD) validation errors.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can use this method to validate that an <a class=\"xref\" href=\"system.xml.linq.xattribute\" data-linktype=\"relative-path\">XAttribute</a> conforms to a schema. You typically use this method when you have modified an attribute, and you want to make sure that it still conforms to its schema. You could validate the entire document, but it takes less processing time to validate just the attribute.  </p>\n<p> If you pass <code>null</code> for <code>validationEventHandler</code>, this method raises an exception upon validation errors. Validation warnings will not raise an exception.  </p>\n<p> To validate an attribute, you use an instance of <a class=\"xref\" href=\"system.xml.schema.xmlschemaobject\" data-linktype=\"relative-path\">XmlSchemaObject</a>. You can obtain this instance in various ways. An easy way is as follows:  </p>\n<ol>\n<li><p>Validate that a document conforms to a schema.  </p>\n</li>\n<li><p>Add the post-schema-validation infoset (PSVI) by calling the <a class=\"xref\" href=\"system.xml.schema.extensions#System_Xml_Schema_Extensions_Validate_\" data-linktype=\"relative-path\">Validate</a> extension method.  </p>\n</li>\n<li><p>Call the <a class=\"xref\" href=\"system.xml.schema.extensions#System_Xml_Schema_Extensions_GetSchemaInfo_\" data-linktype=\"relative-path\">GetSchemaInfo</a> extension method to retrieve an object that implements <a class=\"xref\" href=\"system.xml.schema.ixmlschemainfo\" data-linktype=\"relative-path\">IXmlSchemaInfo</a>. From the retrieved object, you can get an <a class=\"xref\" href=\"system.xml.schema.xmlschemaobject\" data-linktype=\"relative-path\">XmlSchemaObject</a>.  </p>\n<ul>\n<li><p>If you get an <a class=\"xref\" href=\"system.xml.schema.xmlschemaobject\" data-linktype=\"relative-path\">XmlSchemaObject</a> for an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>, the type will be <a class=\"xref\" href=\"system.xml.schema.xmlschemaelement\" data-linktype=\"relative-path\">XmlSchemaElement</a>.  </p>\n</li>\n<li><p>If you get an <a class=\"xref\" href=\"system.xml.schema.xmlschemaobject\" data-linktype=\"relative-path\">XmlSchemaObject</a> for an <a class=\"xref\" href=\"system.xml.linq.xattribute\" data-linktype=\"relative-path\">XAttribute</a>, the type will be <a class=\"xref\" href=\"system.xml.schema.xmlschemaattribute\" data-linktype=\"relative-path\">XmlSchemaAttribute</a>.  </p>\n</li>\n</ul>\n<p>After you have an instance of an <a class=\"xref\" href=\"system.xml.schema.xmlschemaobject\" data-linktype=\"relative-path\">XmlSchemaObject</a>, you can use this method to validate an attribute.</p>\n</li>\n</ol>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-c#\">\n                string xsdMarkup =  \n    @&quot;&lt;xsd:schema xmlns:xsd=&#39;http://www.w3.org/2001/XMLSchema&#39;&gt;  \n       &lt;xsd:element name=&#39;Root&#39;&gt;  \n        &lt;xsd:complexType&gt;  \n         &lt;xsd:simpleContent&gt;  \n          &lt;xsd:extension base=&#39;xsd:string&#39;&gt;  \n           &lt;xsd:attribute name=&#39;Lang&#39; use=&#39;required&#39;&gt;  \n            &lt;xsd:simpleType&gt;  \n             &lt;xsd:restriction base=&#39;xsd:token&#39;&gt;  \n              &lt;xsd:enumeration value=&#39;C#&#39;/&gt;  \n              &lt;xsd:enumeration value=&#39;VB&#39;/&gt;  \n             &lt;/xsd:restriction&gt;  \n            &lt;/xsd:simpleType&gt;  \n           &lt;/xsd:attribute&gt;  \n          &lt;/xsd:extension&gt;  \n         &lt;/xsd:simpleContent&gt;  \n        &lt;/xsd:complexType&gt;  \n       &lt;/xsd:element&gt;  \n      &lt;/xsd:schema&gt;&quot;;  \n\nXmlSchemaSet schemas = new XmlSchemaSet();  \nschemas.Add(&quot;&quot;, XmlReader.Create(new StringReader(xsdMarkup)));  \n\nXDocument doc1 = new XDocument(  \n    new XElement(&quot;Root&quot;,  \n        new XAttribute(&quot;Lang&quot;, &quot;C#&quot;)  \n    )  \n);  \n\nConsole.WriteLine(&quot;Validating doc1 ...&quot;);  \nbool errors = false;  \ndoc1.Validate(schemas, (sender, e) =&gt;  \n    {  \n        Console.WriteLine(e.Message);  \n        errors = true;  \n    }, true);  \nConsole.WriteLine(&quot;doc1 {0}&quot;, errors ? &quot;did not validate&quot; : &quot;validated&quot;);  \n\nConsole.WriteLine();  \nConsole.WriteLine(&quot;Validating Lang attribute ...&quot;);  \nXAttribute lang = doc1.Root.Attribute(&quot;Lang&quot;);  \n\nerrors = false;  \nlang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, (sender, e) =&gt;  \n    {  \n        Console.WriteLine(e.Message);  \n        errors = true;  \n    });  \nConsole.WriteLine(&quot;lang {0}&quot;, errors ? &quot;did not validate&quot; : &quot;validated&quot;);  \n\n// the following makes the Lang attribute invalid according to the schema  \nlang.Value = &quot;VC&quot;;  \n\nConsole.WriteLine();  \nConsole.WriteLine(&quot;Validating Lang attribute ...&quot;);  \n\nerrors = false;  \nlang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, (sender, e) =&gt;  \n    {  \n        Console.WriteLine(e.Message);  \n        errors = true;  \n    });  \nConsole.WriteLine(&quot;lang {0}&quot;, errors ? &quot;did not validate&quot; : &quot;validated&quot;);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim errors As Boolean = False  \n\nPrivate Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  \n    Console.WriteLine(&quot;{0}&quot;, e.Message)  \n    errors = True  \nEnd Sub  \n\nSub Main()  \n    Dim xsdMarkup As XDocument = _  \n      &lt;?xml version=&#39;1.0&#39;?&gt;  \n      &lt;xsd:schema xmlns:xsd=&#39;http://www.w3.org/2001/XMLSchema&#39;&gt;  \n          &lt;xsd:element name=&#39;Root&#39;&gt;  \n              &lt;xsd:complexType&gt;  \n                  &lt;xsd:simpleContent&gt;  \n                      &lt;xsd:extension base=&#39;xsd:string&#39;&gt;  \n                          &lt;xsd:attribute name=&#39;Lang&#39; use=&#39;required&#39;&gt;  \n                              &lt;xsd:simpleType&gt;  \n                                  &lt;xsd:restriction base=&#39;xsd:token&#39;&gt;  \n                                      &lt;xsd:enumeration value=&#39;C#&#39;/&gt;  \n                                      &lt;xsd:enumeration value=&#39;VB&#39;/&gt;  \n                                  &lt;/xsd:restriction&gt;  \n                              &lt;/xsd:simpleType&gt;  \n                          &lt;/xsd:attribute&gt;  \n                      &lt;/xsd:extension&gt;  \n                  &lt;/xsd:simpleContent&gt;  \n              &lt;/xsd:complexType&gt;  \n          &lt;/xsd:element&gt;  \n      &lt;/xsd:schema&gt;  \n\n    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  \n    schemas.Add(&quot;&quot;, xsdMarkup.CreateReader)  \n\n    Dim doc1 As XDocument = &lt;?xml version=&#39;1.0&#39;?&gt;  \n                            &lt;Root Lang=&#39;C#&#39;/&gt;  \n\n    Console.WriteLine(&quot;Validating doc1 ...&quot;)  \n    errors = False  \n    doc1.Validate(schemas, AddressOf XSDErrors, True)  \n    Console.WriteLine(&quot;doc1 {0}&quot;, IIf(errors, &quot;did not validate&quot;, &quot;validated&quot;))  \n\n    Console.WriteLine()  \n    Console.WriteLine(&quot;Validating Lang attribute ...&quot;)  \n    Dim lang As XAttribute = doc1.Root.Attribute(&quot;Lang&quot;)  \n\n    errors = False  \n    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, AddressOf XSDErrors)  \n    Console.WriteLine(&quot;lang {0}&quot;, IIf(errors, &quot;did not validate&quot;, &quot;validated&quot;))  \n\n    &#39; the following makes the Lang attribute invalid according to the schema  \n    lang.Value = &quot;VC&quot;  \n\n    Console.WriteLine()  \n    Console.WriteLine(&quot;Validating Lang attribute ...&quot;)  \n\n    errors = False  \n    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, AddressOf XSDErrors)  \n    Console.WriteLine(&quot;lang {0}&quot;, IIf(errors, &quot;did not validate&quot;, &quot;validated&quot;))  \nEnd Sub\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>Validating doc1 ...  \ndoc1 validated  \n\nValidating Lang attribute ...  \nlang validated  \n\nValidating Lang attribute ...  \nThe &#39;Lang&#39; attribute is invalid - The value &#39;VC&#39; is invalid according to its datatype &#39;Token&#39; - The Enumeration constraint failed.  \nlang did not validate\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Schema_Extensions_Validate_System_Xml_Linq_XDocument_System_Xml_Schema_XmlSchemaSet_System_Xml_Schema_ValidationEventHandler_System_Boolean_\">\r\n    \r\n            <a id=\"System_Xml_Schema_Extensions_Validate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Validate(XDocument,XmlSchemaSet,ValidationEventHandler,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Validates that an <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> conforms to an XSD in an <a class=\"xref\" href=\"system.xml.schema.xmlschemaset\" data-linktype=\"relative-path\">XmlSchemaSet</a>, optionally populating the XML tree with the post-schema-validation infoset (PSVI).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Validate (this System.Xml.Linq.XDocument source, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler, bool addSchemaInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> to validate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>schemas</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.schema.xmlschemaset\" data-linktype=\"relative-path\">XmlSchemaSet</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.schema.xmlschemaset\" data-linktype=\"relative-path\">XmlSchemaSet</a> to validate against.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>validationEventHandler</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.schema.validationeventhandler\" data-linktype=\"relative-path\">ValidationEventHandler</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.xml.schema.validationeventhandler\" data-linktype=\"relative-path\">ValidationEventHandler</a> for an event that occurs when the reader encounters validation errors. If <code>null</code>, throws an exception upon validation errors.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>addSchemaInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> indicating whether to populate the post-schema-validation infoset (PSVI).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.schema.xmlschemavalidationexception\" data-linktype=\"relative-path\">XmlSchemaValidationException</a></div>\r\n                  </div>\r\n                  <p>Thrown for XML Schema Definition Language (XSD) validation errors.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This extension method validates that the <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> conforms to the schema content model in <a class=\"xref\" href=\"system.xml.schema.xmlschemaset\" data-linktype=\"relative-path\">XmlSchemaSet</a>.  </p>\n<p> If <code>addSchemaInfo</code> is <code>true</code>, this method populates the XML tree with the post-schema-validation infoset (PSVI).  </p>\n<p> There are two steps to populating the XML tree with the PSVI.  </p>\n<ol>\n<li><p>First, an annotation is added to all nodes in the tree to enable you to call <a class=\"xref\" href=\"system.xml.schema.extensions#System_Xml_Schema_Extensions_GetSchemaInfo_\" data-linktype=\"relative-path\">GetSchemaInfo</a> or <a class=\"xref\" href=\"system.xml.schema.extensions#System_Xml_Schema_Extensions_GetSchemaInfo_\" data-linktype=\"relative-path\">GetSchemaInfo</a> on an element or attribute in the tree.  </p>\n</li>\n<li><p>Second, default elements and attributes defined in the XSD are added to the XML tree. By calling one of the <a class=\"xref\" href=\"system.xml.schema.extensions#System_Xml_Schema_Extensions_GetSchemaInfo_\" data-linktype=\"relative-path\">GetSchemaInfo</a> methods, you can determine if a specific element or attribute was added from the XSD as a default element or attribute.</p>\n</li>\n</ol>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example contains an XSD that defines the <code>Child2</code> element with an <code>Att1</code> attribute with a default value. After successfully validating the document, the attribute with the default value is added to the XML tree. Note that the default attribute is not added to <code>doc2</code>, which does not validate against the schema.  </p>\n<pre><code class=\"lang-c#\">\n                string xsdMarkup =  \n    @&quot;&lt;xsd:schema xmlns:xsd=&#39;http://www.w3.org/2001/XMLSchema&#39;&gt;  \n       &lt;xsd:element name=&#39;Root&#39;&gt;  \n        &lt;xsd:complexType&gt;  \n         &lt;xsd:sequence&gt;  \n          &lt;xsd:element name=&#39;Child1&#39; minOccurs=&#39;1&#39; maxOccurs=&#39;1&#39;/&gt;  \n          &lt;xsd:element name=&#39;Child2&#39; minOccurs=&#39;1&#39; maxOccurs=&#39;1&#39;&gt;  \n           &lt;xsd:complexType&gt;  \n            &lt;xsd:simpleContent&gt;  \n             &lt;xsd:extension base=&#39;xsd:string&#39;&gt;  \n              &lt;xsd:attribute name=&#39;Att1&#39; default=&#39;Att1 Default Value&#39;/&gt;  \n             &lt;/xsd:extension&gt;  \n            &lt;/xsd:simpleContent&gt;  \n           &lt;/xsd:complexType&gt;  \n          &lt;/xsd:element&gt;  \n         &lt;/xsd:sequence&gt;  \n        &lt;/xsd:complexType&gt;  \n       &lt;/xsd:element&gt;  \n      &lt;/xsd:schema&gt;&quot;;  \nXmlSchemaSet schemas = new XmlSchemaSet();  \nschemas.Add(&quot;&quot;, XmlReader.Create(new StringReader(xsdMarkup)));  \n\nXDocument doc1 = new XDocument(  \n    new XElement(&quot;Root&quot;,  \n        new XElement(&quot;Child1&quot;, &quot;c1&quot;),  \n        new XElement(&quot;Child2&quot;, &quot;c2&quot;)  \n    )  \n);  \n\nXDocument doc2 = new XDocument(  \n    new XElement(&quot;Root&quot;,  \n        new XElement(&quot;Child1&quot;, &quot;content1&quot;),  \n        new XElement(&quot;Child3&quot;, &quot;content1&quot;)  \n    )  \n);  \n\nConsole.WriteLine(&quot;Validating doc1&quot;);  \nbool errors = false;  \ndoc1.Validate(schemas, (o, e) =&gt;  \n                           {  \n                               Console.WriteLine(&quot;{0}&quot;, e.Message);  \n                               errors = true;  \n                           }, true);  \nConsole.WriteLine(&quot;doc1 {0}&quot;, errors ? &quot;did not validate&quot; : &quot;validated&quot;);  \n\nConsole.WriteLine();  \nConsole.WriteLine(&quot;Validating doc2&quot;);  \nerrors = false;  \ndoc2.Validate(schemas, (o, e) =&gt;  \n                     {  \n                         Console.WriteLine(&quot;{0}&quot;, e.Message);  \n                         errors = true;  \n                     }, true);  \nConsole.WriteLine(&quot;doc2 {0}&quot;, errors ? &quot;did not validate&quot; : &quot;validated&quot;);  \n\nConsole.WriteLine();  \nConsole.WriteLine(&quot;Contents of doc1:&quot;);  \nConsole.WriteLine(doc1);  \n\nConsole.WriteLine();  \nConsole.WriteLine(&quot;Contents of doc2:&quot;);  \nConsole.WriteLine(doc2);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim errors As Boolean = False  \n\nPrivate Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  \n    Console.WriteLine(&quot;{0}&quot;, e.Message)  \n    errors = True  \nEnd Sub  \n\nSub Main()  \n    Dim xsdMarkup As XDocument = _  \n    &lt;?xml version=&#39;1.0&#39;?&gt;  \n    &lt;xsd:schema xmlns:xsd=&#39;http://www.w3.org/2001/XMLSchema&#39;&gt;  \n        &lt;xsd:element name=&#39;Root&#39;&gt;  \n            &lt;xsd:complexType&gt;  \n                &lt;xsd:sequence&gt;  \n                    &lt;xsd:element name=&#39;Child1&#39; minOccurs=&#39;1&#39; maxOccurs=&#39;1&#39;/&gt;  \n                    &lt;xsd:element name=&#39;Child2&#39; minOccurs=&#39;1&#39; maxOccurs=&#39;1&#39;&gt;  \n                        &lt;xsd:complexType&gt;  \n                            &lt;xsd:simpleContent&gt;  \n                                &lt;xsd:extension base=&#39;xsd:string&#39;&gt;  \n                                    &lt;xsd:attribute name=&#39;Att1&#39; default=&#39;Att1 Default Value&#39;/&gt;  \n                                &lt;/xsd:extension&gt;  \n                            &lt;/xsd:simpleContent&gt;  \n                        &lt;/xsd:complexType&gt;  \n                    &lt;/xsd:element&gt;  \n                &lt;/xsd:sequence&gt;  \n            &lt;/xsd:complexType&gt;  \n        &lt;/xsd:element&gt;  \n    &lt;/xsd:schema&gt;  \n    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  \n    schemas.Add(&quot;&quot;, xsdMarkup.CreateReader)  \n\n    Dim doc1 As XDocument = &lt;?xml version=&#39;1.0&#39;?&gt;  \n                            &lt;Root&gt;  \n                                &lt;Child1&gt;c1&lt;/Child1&gt;  \n                                &lt;Child2&gt;c2&lt;/Child2&gt;  \n                            &lt;/Root&gt;  \n    Dim doc2 As XDocument = &lt;?xml version=&#39;1.0&#39;?&gt;  \n                            &lt;Root&gt;  \n                                &lt;Child1&gt;content1&lt;/Child1&gt;  \n                                &lt;Child3&gt;content1&lt;/Child3&gt;  \n                            &lt;/Root&gt;  \n\n    Console.WriteLine(&quot;Validating doc1&quot;)  \n    errors = False  \n    doc1.Validate(schemas, AddressOf XSDErrors, True)  \n    Console.WriteLine(&quot;doc1 {0}&quot;, IIf(errors, &quot;did not validate&quot;, &quot;validated&quot;))  \n\n    Console.WriteLine()  \n    Console.WriteLine(&quot;Validating doc2&quot;)  \n    errors = False  \n    doc2.Validate(schemas, AddressOf XSDErrors, True)  \n    Console.WriteLine(&quot;doc2 {0}&quot;, IIf(errors, &quot;did not validate&quot;, &quot;validated&quot;))  \n\n    Console.WriteLine()  \n    Console.WriteLine(&quot;Contents of doc1:&quot;)  \n    Console.WriteLine(doc1)  \n\n    Console.WriteLine()  \n    Console.WriteLine(&quot;Contents of doc2:&quot;)  \n    Console.WriteLine(doc2)  \nEnd Sub\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>Validating doc1  \ndoc1 validated  \n\nValidating doc2  \nThe element &#39;Root&#39; has invalid child element &#39;Child3&#39;. List of possible elements expected: &#39;Child2&#39;.  \ndoc2 did not validate  \n\nContents of doc1:  \n&lt;Root&gt;  \n  &lt;Child1&gt;c1&lt;/Child1&gt;  \n  &lt;Child2 Att1=&quot;Att1 Default Value&quot;&gt;c2&lt;/Child2&gt;  \n&lt;/Root&gt;  \n\nContents of doc2:  \n&lt;Root&gt;  \n  &lt;Child1&gt;content1&lt;/Child1&gt;  \n  &lt;Child3&gt;content1&lt;/Child3&gt;  \n&lt;/Root&gt;\n</code></pre><p> The following example populates the tree with PSVI. After validation, it prints all elements and attributes in the tree that are invalid according to the PSVI.  </p>\n<pre><code class=\"lang-c#\">\n                static void DumpInvalidNodes(XElement el)  \n{  \n    if (el.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  \n        Console.WriteLine(&quot;Invalid Element {0}&quot;,  \n            el.AncestorsAndSelf()  \n            .InDocumentOrder()  \n            .Aggregate(&quot;&quot;, (s, i) =&gt; s + &quot;/&quot; + i.Name.ToString()));  \n    foreach (XAttribute att in el.Attributes())  \n        if (att.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  \n            Console.WriteLine(&quot;Invalid Attribute {0}&quot;,  \n                att  \n                .Parent  \n                .AncestorsAndSelf()  \n                .InDocumentOrder()  \n                .Aggregate(&quot;&quot;,  \n                    (s, i) =&gt; s + &quot;/&quot; + i.Name.ToString()) + &quot;/@&quot; + att.Name.ToString()  \n                );  \n    foreach (XElement child in el.Elements())  \n        DumpInvalidNodes(child);  \n}  \n\nstatic void Main(string[] args)  \n{  \n   string xsdMarkup =  \n        @&quot;&lt;xsd:schema xmlns:xsd=&#39;http://www.w3.org/2001/XMLSchema&#39;&gt;  \n           &lt;xsd:simpleType name=&#39;GCType&#39;&gt;  \n            &lt;xsd:restriction base=&#39;xsd:token&#39;&gt;  \n             &lt;xsd:enumeration value=&#39;AAA&#39;/&gt;  \n             &lt;xsd:enumeration value=&#39;BBB&#39;/&gt;  \n            &lt;/xsd:restriction&gt;  \n           &lt;/xsd:simpleType&gt;  \n           &lt;xsd:element name=&#39;Root&#39;&gt;  \n            &lt;xsd:complexType&gt;  \n             &lt;xsd:sequence&gt;  \n              &lt;xsd:element name=&#39;Child1&#39; minOccurs=&#39;1&#39; maxOccurs=&#39;1&#39;&gt;  \n               &lt;xsd:complexType&gt;  \n                &lt;xsd:sequence&gt;  \n                 &lt;xsd:element name=&#39;GrandChild1&#39; type=&#39;GCType&#39;/&gt;  \n                 &lt;xsd:element name=&#39;GrandChild2&#39; type=&#39;GCType&#39;/&gt;  \n                 &lt;xsd:element name=&#39;GrandChild3&#39; type=&#39;GCType&#39;/&gt;  \n                &lt;/xsd:sequence&gt;  \n               &lt;/xsd:complexType&gt;  \n              &lt;/xsd:element&gt;  \n             &lt;/xsd:sequence&gt;  \n            &lt;/xsd:complexType&gt;  \n           &lt;/xsd:element&gt;  \n          &lt;/xsd:schema&gt;&quot;;  \n\n    XmlSchemaSet schemas = new XmlSchemaSet();  \n    schemas.Add(&quot;&quot;, XmlReader.Create(new StringReader(xsdMarkup)));  \n\n    XDocument doc1 = new XDocument(  \n        new XElement(&quot;Root&quot;,  \n            new XElement(&quot;Child1&quot;,  \n                new XElement(&quot;GrandChild1&quot;, &quot;AAA&quot;),  \n                new XElement(&quot;GrandChild2&quot;, &quot;ZZZ&quot;),  \n                new XElement(&quot;GrandChild3&quot;, &quot;ZZZ&quot;)  \n            )  \n        )  \n    );  \n\n    Console.WriteLine(&quot;Validating doc1 ...&quot;);  \n    bool errors = false;  \n    doc1.Validate(schemas, (sender, e) =&gt;  \n        {  \n            Console.WriteLine(e.Message);  \n            errors = true;  \n        }, true);  \n    Console.WriteLine(&quot;doc1 {0}&quot;, errors ? &quot;did not validate&quot; : &quot;validated&quot;);  \n    DumpInvalidNodes(doc1.Root);  \n}\n</code></pre><pre><code class=\"lang-vb\">\n                Private Sub DumpInvalidNodes(ByVal el As XElement)  \n    If el.GetSchemaInfo.Validity &lt;&gt; XmlSchemaValidity.Valid Then  \n        Console.WriteLine(&quot;Invalid Element {0}&quot;, _  \n            el _  \n            .AncestorsAndSelf _  \n            .InDocumentOrder() _  \n            .Aggregate(&quot;&quot;, _  \n                Function(ByVal s, ByVal i) s + &quot;/&quot; + i.Name.ToString()))  \n    End If  \n    For Each att As XAttribute In el.Attributes()  \n        If att.GetSchemaInfo.Validity &lt;&gt; XmlSchemaValidity.Valid Then  \n            Console.WriteLine(&quot;Invalid Attribute {0}&quot;, _  \n                att _  \n                .Parent _  \n                .AncestorsAndSelf() _  \n                .InDocumentOrder() _  \n                .Aggregate(&quot;&quot;, _  \n                    Function(ByVal s, ByVal i) s + &quot;/&quot; + i.Name.ToString()) + _  \n                    &quot;/@&quot; + att.Name.ToString())  \n        End If  \n    Next  \n    For Each child As XElement In el.Elements()  \n        DumpInvalidNodes(child)  \n    Next  \nEnd Sub  \n\nDim errors As Boolean = False  \n\nPrivate Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  \n    Console.WriteLine(&quot;{0}&quot;, e.Message)  \n    errors = True  \nEnd Sub  \n\nSub Main()  \n    Dim xsdMarkup As XDocument = _  \n        &lt;?xml version=&#39;1.0&#39;?&gt;  \n        &lt;xsd:schema xmlns:xsd=&#39;http://www.w3.org/2001/XMLSchema&#39;&gt;  \n            &lt;xsd:simpleType name=&#39;GCType&#39;&gt;  \n                &lt;xsd:restriction base=&#39;xsd:token&#39;&gt;  \n                    &lt;xsd:enumeration value=&#39;AAA&#39;/&gt;  \n                    &lt;xsd:enumeration value=&#39;BBB&#39;/&gt;  \n                &lt;/xsd:restriction&gt;  \n            &lt;/xsd:simpleType&gt;  \n            &lt;xsd:element name=&#39;Root&#39;&gt;  \n                &lt;xsd:complexType&gt;  \n                    &lt;xsd:sequence&gt;  \n                        &lt;xsd:element name=&#39;Child1&#39; minOccurs=&#39;1&#39; maxOccurs=&#39;1&#39;&gt;  \n                            &lt;xsd:complexType&gt;  \n                                &lt;xsd:sequence&gt;  \n                                    &lt;xsd:element name=&#39;GrandChild1&#39; type=&#39;GCType&#39;/&gt;  \n                                    &lt;xsd:element name=&#39;GrandChild2&#39; type=&#39;GCType&#39;/&gt;  \n                                    &lt;xsd:element name=&#39;GrandChild3&#39; type=&#39;GCType&#39;/&gt;  \n                                &lt;/xsd:sequence&gt;  \n                            &lt;/xsd:complexType&gt;  \n                        &lt;/xsd:element&gt;  \n                    &lt;/xsd:sequence&gt;  \n                &lt;/xsd:complexType&gt;  \n            &lt;/xsd:element&gt;  \n        &lt;/xsd:schema&gt;  \n\n    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  \n    schemas.Add(&quot;&quot;, xsdMarkup.CreateReader)  \n\n    Dim doc1 As XDocument = _  \n        &lt;?xml version=&#39;1.0&#39;?&gt;  \n        &lt;Root&gt;  \n            &lt;Child1&gt;  \n                &lt;GrandChild1&gt;AAA&lt;/GrandChild1&gt;  \n                &lt;GrandChild2&gt;ZZZ&lt;/GrandChild2&gt;  \n                &lt;GrandChild3&gt;ZZZ&lt;/GrandChild3&gt;  \n            &lt;/Child1&gt;  \n        &lt;/Root&gt;  \n\n    Console.WriteLine(&quot;Validating doc1 ...&quot;)  \n    errors = False  \n    doc1.Validate(schemas, AddressOf XSDErrors, True)  \n    Console.WriteLine(&quot;doc1 {0}&quot;, IIf(errors, &quot;did not validate&quot;, &quot;validated&quot;))  \n    DumpInvalidNodes(doc1.Root)  \nEnd Sub\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>Validating doc1 ...  \nThe &#39;GrandChild2&#39; element is invalid - The value &#39;ZZZ&#39; is invalid according to its datatype &#39;GCType&#39; - The Enumeration constraint failed.  \nThe &#39;GrandChild3&#39; element is invalid - The value &#39;ZZZ&#39; is invalid according to its datatype &#39;GCType&#39; - The Enumeration constraint failed.  \ndoc1 did not validate  \nInvalid Element /Root  \nInvalid Element /Root/Child1  \nInvalid Element /Root/Child1/GrandChild2  \nInvalid Element /Root/Child1/GrandChild3\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Schema_Extensions_Validate_System_Xml_Linq_XElement_System_Xml_Schema_XmlSchemaObject_System_Xml_Schema_XmlSchemaSet_System_Xml_Schema_ValidationEventHandler_\">\r\n    \r\n            <a id=\"System_Xml_Schema_Extensions_Validate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Validate(XElement,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler)</div>        \r\n          </div>\r\n    \r\n            <p>This method validates that an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> sub-tree conforms to a specified <a class=\"xref\" href=\"system.xml.schema.xmlschemaobject\" data-linktype=\"relative-path\">XmlSchemaObject</a> and an <a class=\"xref\" href=\"system.xml.schema.xmlschemaset\" data-linktype=\"relative-path\">XmlSchemaSet</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Validate (this System.Xml.Linq.XElement source, System.Xml.Schema.XmlSchemaObject partialValidationType, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> to validate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>partialValidationType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.schema.xmlschemaobject\" data-linktype=\"relative-path\">XmlSchemaObject</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.schema.xmlschemaobject\" data-linktype=\"relative-path\">XmlSchemaObject</a> that specifies the sub-tree to validate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>schemas</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.schema.xmlschemaset\" data-linktype=\"relative-path\">XmlSchemaSet</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.schema.xmlschemaset\" data-linktype=\"relative-path\">XmlSchemaSet</a> to validate against.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>validationEventHandler</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.schema.validationeventhandler\" data-linktype=\"relative-path\">ValidationEventHandler</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.xml.schema.validationeventhandler\" data-linktype=\"relative-path\">ValidationEventHandler</a> for an event that occurs when the reader encounters validation errors. If <code>null</code>, throws an exception upon validation errors.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.schema.xmlschemavalidationexception\" data-linktype=\"relative-path\">XmlSchemaValidationException</a></div>\r\n                  </div>\r\n                  <p>Thrown for XML Schema Definition Language (XSD) validation errors.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can use this method to validate that a sub-tree (with an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> at its root) conforms to a schema. You typically use this method when you have modified a sub-tree, and you want to make sure that it still conforms to its schema. You could validate the entire document, but it takes less processing time to validate a just a sub-tree.  </p>\n<p> If you pass <code>null</code> for <code>validationEventHandler</code>, then this method raises an exception upon validation errors. Validation warnings will not raise an exception.  </p>\n<p> To validate a sub-tree, you use an instance of <a class=\"xref\" href=\"system.xml.schema.xmlschemaobject\" data-linktype=\"relative-path\">XmlSchemaObject</a>. You can obtain this instance in various ways. An easy way is as follows:  </p>\n<ol>\n<li><p>Validate that a document conforms to a schema.  </p>\n</li>\n<li><p>Add the post-schema-validation infoset (PSVI) by calling the <a class=\"xref\" href=\"system.xml.schema.extensions#System_Xml_Schema_Extensions_Validate_\" data-linktype=\"relative-path\">Validate</a> extension method.  </p>\n</li>\n<li><p>Call the <a class=\"xref\" href=\"system.xml.schema.extensions#System_Xml_Schema_Extensions_GetSchemaInfo_\" data-linktype=\"relative-path\">GetSchemaInfo</a> extension method to retrieve an object that implements <a class=\"xref\" href=\"system.xml.schema.ixmlschemainfo\" data-linktype=\"relative-path\">IXmlSchemaInfo</a>. From the retrieved object, you can get an <a class=\"xref\" href=\"system.xml.schema.xmlschemaobject\" data-linktype=\"relative-path\">XmlSchemaObject</a>.  </p>\n<ul>\n<li><p>If you get an <a class=\"xref\" href=\"system.xml.schema.xmlschemaobject\" data-linktype=\"relative-path\">XmlSchemaObject</a> for an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>, the type will be <a class=\"xref\" href=\"system.xml.schema.xmlschemaelement\" data-linktype=\"relative-path\">XmlSchemaElement</a>.  </p>\n</li>\n<li><p>If you get an <a class=\"xref\" href=\"system.xml.schema.xmlschemaobject\" data-linktype=\"relative-path\">XmlSchemaObject</a> for an <a class=\"xref\" href=\"system.xml.linq.xattribute\" data-linktype=\"relative-path\">XAttribute</a>, the type will be <a class=\"xref\" href=\"system.xml.schema.xmlschemaattribute\" data-linktype=\"relative-path\">XmlSchemaAttribute</a>.  </p>\n</li>\n</ul>\n<p>After you have an instance of an <a class=\"xref\" href=\"system.xml.schema.xmlschemaobject\" data-linktype=\"relative-path\">XmlSchemaObject</a>, you can use this method to validate an sub-tree.</p>\n</li>\n</ol>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-c#\">\n                string xsdMarkup =  \n    @&quot;&lt;xsd:schema xmlns:xsd=&#39;http://www.w3.org/2001/XMLSchema&#39;&gt;  \n       &lt;xsd:element name=&#39;Root&#39;&gt;  \n        &lt;xsd:complexType&gt;  \n         &lt;xsd:sequence&gt;  \n          &lt;xsd:element name=&#39;Child1&#39; minOccurs=&#39;1&#39; maxOccurs=&#39;1&#39;&gt;  \n           &lt;xsd:complexType&gt;  \n            &lt;xsd:sequence&gt;  \n             &lt;xsd:element name=&#39;GrandChild1&#39; minOccurs=&#39;1&#39; maxOccurs=&#39;1&#39;/&gt;  \n             &lt;xsd:element name=&#39;GrandChild2&#39; minOccurs=&#39;1&#39; maxOccurs=&#39;2&#39;/&gt;  \n            &lt;/xsd:sequence&gt;  \n           &lt;/xsd:complexType&gt;  \n          &lt;/xsd:element&gt;  \n         &lt;/xsd:sequence&gt;  \n        &lt;/xsd:complexType&gt;  \n       &lt;/xsd:element&gt;  \n      &lt;/xsd:schema&gt;&quot;;  \n\nXmlSchemaSet schemas = new XmlSchemaSet();  \nschemas.Add(&quot;&quot;, XmlReader.Create(new StringReader(xsdMarkup)));  \n\nXDocument doc1 = new XDocument(  \n    new XElement(&quot;Root&quot;,  \n        new XElement(&quot;Child1&quot;,  \n            new XElement(&quot;GrandChild1&quot;, &quot;gc&quot;),  \n            new XElement(&quot;GrandChild2&quot;, &quot;gc&quot;)  \n        )  \n    )  \n);  \n\nConsole.WriteLine(&quot;Validating doc1 ...&quot;);  \nbool errors = false;  \ndoc1.Validate(schemas, (sender, e) =&gt;  \n    {  \n        Console.WriteLine(e.Message);  \n        errors = true;  \n    }, true);  \nConsole.WriteLine(&quot;doc1 {0}&quot;, errors ? &quot;did not validate&quot; : &quot;validated&quot;);  \n\nConsole.WriteLine();  \nConsole.WriteLine(&quot;Validating Child1 after first edit ...&quot;);  \nXElement child1 = doc1.Element(&quot;Root&quot;).Element(&quot;Child1&quot;);  \nchild1.Add(new XElement(&quot;GrandChild2&quot;, &quot;gc&quot;));  \nerrors = false;  \nchild1.Validate(child1.GetSchemaInfo().SchemaElement, schemas, (sender, e) =&gt;  \n    {  \n        Console.WriteLine(e.Message);  \n        errors = true;  \n    });  \nConsole.WriteLine(&quot;child1 {0}&quot;, errors ? &quot;did not validate&quot; : &quot;validated&quot;);  \n\n// the following makes the Child1 element invalid according to the schema  \nchild1.Add(new XElement(&quot;GrandChild3&quot;, &quot;gc&quot;));  \nConsole.WriteLine();  \nConsole.WriteLine(&quot;Validating Child1 after second edit ...&quot;);  \nchild1.Validate(child1.GetSchemaInfo().SchemaElement, schemas, (sender, e) =&gt;  \n    {  \n        Console.WriteLine(e.Message);  \n        errors = true;  \n    });  \nConsole.WriteLine(&quot;child1 {0}&quot;, errors ? &quot;did not validate&quot; : &quot;validated&quot;);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim errors As Boolean = False  \n\nPrivate Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  \n    Console.WriteLine(&quot;{0}&quot;, e.Message)  \n    errors = True  \nEnd Sub  \n\nSub Main()  \n\n    Dim xsdMarkup As XDocument = _  \n        &lt;?xml version=&#39;1.0&#39;?&gt;  \n        &lt;xsd:schema xmlns:xsd=&#39;http://www.w3.org/2001/XMLSchema&#39;&gt;  \n            &lt;xsd:element name=&#39;Root&#39;&gt;  \n                &lt;xsd:complexType&gt;  \n                    &lt;xsd:sequence&gt;  \n                        &lt;xsd:element name=&#39;Child1&#39; minOccurs=&#39;1&#39; maxOccurs=&#39;1&#39;&gt;  \n                            &lt;xsd:complexType&gt;  \n                                &lt;xsd:sequence&gt;  \n                                    &lt;xsd:element name=&#39;GrandChild1&#39; minOccurs=&#39;1&#39; maxOccurs=&#39;1&#39;/&gt;  \n                                    &lt;xsd:element name=&#39;GrandChild2&#39; minOccurs=&#39;1&#39; maxOccurs=&#39;2&#39;/&gt;  \n                                &lt;/xsd:sequence&gt;  \n                            &lt;/xsd:complexType&gt;  \n                        &lt;/xsd:element&gt;  \n                    &lt;/xsd:sequence&gt;  \n                &lt;/xsd:complexType&gt;  \n            &lt;/xsd:element&gt;  \n        &lt;/xsd:schema&gt;  \n\n    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  \n    schemas.Add(&quot;&quot;, xsdMarkup.CreateReader)  \n\n    Dim doc1 As XDocument = _  \n        &lt;?xml version=&#39;1.0&#39;?&gt;  \n        &lt;Root&gt;  \n            &lt;Child1&gt;  \n                &lt;GrandChild1&gt;gc&lt;/GrandChild1&gt;  \n                &lt;GrandChild2&gt;gc&lt;/GrandChild2&gt;  \n            &lt;/Child1&gt;  \n        &lt;/Root&gt;  \n\n    Console.WriteLine(&quot;Validating doc1 ...&quot;)  \n    errors = False  \n    doc1.Validate(schemas, AddressOf XSDErrors, True)  \n    Console.WriteLine(&quot;doc1 {0}&quot;, IIf(errors, &quot;did not validate&quot;, &quot;validated&quot;))  \n\n    Console.WriteLine()  \n    Console.WriteLine(&quot;Validating Child1 after first edit ...&quot;)  \n    Dim child1 As XElement = doc1.Element(&quot;Root&quot;).Element(&quot;Child1&quot;)  \n    child1.Add(&lt;GrandChild2&gt;gc&lt;/GrandChild2&gt;)  \n    errors = False  \n    child1.Validate(child1.GetSchemaInfo().SchemaElement, schemas, AddressOf XSDErrors)  \n    Console.WriteLine(&quot;child1 {0}&quot;, IIf(errors, &quot;did not validate&quot;, &quot;validated&quot;))  \n\n    &#39; the following makes the Child1 element invalid according to the schema  \n    child1.Add(&lt;GrandChild3&gt;gc&lt;/GrandChild3&gt;)  \n    Console.WriteLine()  \n    Console.WriteLine(&quot;Validating Child1 after second edit ...&quot;)  \n    child1.Validate(child1.GetSchemaInfo().SchemaElement, schemas, AddressOf XSDErrors)  \n    Console.WriteLine(&quot;child1 {0}&quot;, IIf(errors, &quot;did not validate&quot;, &quot;validated&quot;))  \nEnd Sub\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>Validating doc1 ...  \ndoc1 validated  \n\nValidating Child1 after first edit ...  \nchild1 validated  \n\nValidating Child1 after second edit ...  \nThe element &#39;Child1&#39; has invalid child element &#39;GrandChild3&#39;.  \nchild1 did not validate\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Schema_Extensions_Validate_System_Xml_Linq_XAttribute_System_Xml_Schema_XmlSchemaObject_System_Xml_Schema_XmlSchemaSet_System_Xml_Schema_ValidationEventHandler_System_Boolean_\">\r\n    \r\n            <a id=\"System_Xml_Schema_Extensions_Validate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Validate(XAttribute,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Validates that an <a class=\"xref\" href=\"system.xml.linq.xattribute\" data-linktype=\"relative-path\">XAttribute</a> conforms to a specified <a class=\"xref\" href=\"system.xml.schema.xmlschemaobject\" data-linktype=\"relative-path\">XmlSchemaObject</a> and an <a class=\"xref\" href=\"system.xml.schema.xmlschemaset\" data-linktype=\"relative-path\">XmlSchemaSet</a>, optionally populating the XML tree with the post-schema-validation infoset (PSVI).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Validate (this System.Xml.Linq.XAttribute source, System.Xml.Schema.XmlSchemaObject partialValidationType, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler, bool addSchemaInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xattribute\" data-linktype=\"relative-path\">XAttribute</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.linq.xattribute\" data-linktype=\"relative-path\">XAttribute</a> to validate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>partialValidationType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.schema.xmlschemaobject\" data-linktype=\"relative-path\">XmlSchemaObject</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.schema.xmlschemaobject\" data-linktype=\"relative-path\">XmlSchemaObject</a> that specifies the sub-tree to validate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>schemas</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.schema.xmlschemaset\" data-linktype=\"relative-path\">XmlSchemaSet</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.schema.xmlschemaset\" data-linktype=\"relative-path\">XmlSchemaSet</a> to validate against.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>validationEventHandler</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.schema.validationeventhandler\" data-linktype=\"relative-path\">ValidationEventHandler</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.xml.schema.validationeventhandler\" data-linktype=\"relative-path\">ValidationEventHandler</a> for an event that occurs when the reader encounters validation errors. If <code>null</code>, throws an exception upon validation errors.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>addSchemaInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> indicating whether to populate the post-schema-validation infoset (PSVI).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.schema.xmlschemavalidationexception\" data-linktype=\"relative-path\">XmlSchemaValidationException</a></div>\r\n                  </div>\r\n                  <p>Thrown for XML Schema Definition Language (XSD) validation errors.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can use this method to validate that an <a class=\"xref\" href=\"system.xml.linq.xattribute\" data-linktype=\"relative-path\">XAttribute</a> conforms to a schema. You typically use this method when you have modified an attribute, and you want to make sure that it still conforms to its schema. You could validate the entire document, but it takes less processing time to validate just the attribute.  </p>\n<p> If <code>addSchemaInfo</code> is <code>true</code>, this method populates the attribute with the post-schema-validation infoset (PSVI). After you have populated the XML tree with the PSVI, you can call <a class=\"xref\" href=\"system.xml.schema.extensions#System_Xml_Schema_Extensions_GetSchemaInfo_\" data-linktype=\"relative-path\">GetSchemaInfo</a> on the validated attribute. This is useful if you are writing code that relies on data returned by <a class=\"xref\" href=\"system.xml.schema.extensions#System_Xml_Schema_Extensions_GetSchemaInfo_\" data-linktype=\"relative-path\">GetSchemaInfo</a>.  </p>\n<p> If you pass <code>null</code> for <code>validationEventHandler</code>, then this method raises an exception upon validation errors. Validation warnings will not raise an exception.  </p>\n<p> To validate an attribute, you use an instance of <a class=\"xref\" href=\"system.xml.schema.xmlschemaobject\" data-linktype=\"relative-path\">XmlSchemaObject</a>. You can obtain this instance in various ways. An easy way is as follows:  </p>\n<ol>\n<li><p>Validate that a document conforms to a schema.  </p>\n</li>\n<li><p>Add the post-schema-validation infoset (PSVI) by calling the <a class=\"xref\" href=\"system.xml.schema.extensions#System_Xml_Schema_Extensions_Validate_\" data-linktype=\"relative-path\">Validate</a> extension method.  </p>\n</li>\n<li><p>Call the <a class=\"xref\" href=\"system.xml.schema.extensions#System_Xml_Schema_Extensions_GetSchemaInfo_\" data-linktype=\"relative-path\">GetSchemaInfo</a> extension method to retrieve an object that implements <a class=\"xref\" href=\"system.xml.schema.ixmlschemainfo\" data-linktype=\"relative-path\">IXmlSchemaInfo</a>. From the retrieved object, you can get an <a class=\"xref\" href=\"system.xml.schema.xmlschemaobject\" data-linktype=\"relative-path\">XmlSchemaObject</a>.  </p>\n<ul>\n<li><p>If you get an <a class=\"xref\" href=\"system.xml.schema.xmlschemaobject\" data-linktype=\"relative-path\">XmlSchemaObject</a> for an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>, the type will be <a class=\"xref\" href=\"system.xml.schema.xmlschemaelement\" data-linktype=\"relative-path\">XmlSchemaElement</a>.  </p>\n</li>\n<li><p>If you get an <a class=\"xref\" href=\"system.xml.schema.xmlschemaobject\" data-linktype=\"relative-path\">XmlSchemaObject</a> for an <a class=\"xref\" href=\"system.xml.linq.xattribute\" data-linktype=\"relative-path\">XAttribute</a>, the type will be <a class=\"xref\" href=\"system.xml.schema.xmlschemaattribute\" data-linktype=\"relative-path\">XmlSchemaAttribute</a>.  </p>\n</li>\n</ul>\n<p>After you have an instance of an <a class=\"xref\" href=\"system.xml.schema.xmlschemaobject\" data-linktype=\"relative-path\">XmlSchemaObject</a>, you can use this method to validate an attribute.</p>\n</li>\n</ol>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-c#\">\n                static void DumpInvalidNodes(XElement el)  \n{  \n    if (el.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  \n        Console.WriteLine(&quot;Invalid Element {0}&quot;,  \n            el.AncestorsAndSelf()  \n            .InDocumentOrder()  \n            .Aggregate(&quot;&quot;, (s, i) =&gt; s + &quot;/&quot; + i.Name.ToString()));  \n    foreach (XAttribute att in el.Attributes())  \n        if (att.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  \n            Console.WriteLine(&quot;Invalid Attribute {0}&quot;,  \n                att  \n                .Parent  \n                .AncestorsAndSelf()  \n                .InDocumentOrder()  \n                .Aggregate(&quot;&quot;,  \n                    (s, i) =&gt; s + &quot;/&quot; + i.Name.ToString()) + &quot;/@&quot; + att.Name.ToString()  \n                );  \n    foreach (XElement child in el.Elements())  \n        DumpInvalidNodes(child);  \n}  \n\nstatic void Main(string[] args)  \n{  \n    string xsdMarkup =  \n        @&quot;&lt;xsd:schema xmlns:xsd=&#39;http://www.w3.org/2001/XMLSchema&#39;&gt;  \n       &lt;xsd:element name=&#39;Root&#39;&gt;  \n        &lt;xsd:complexType&gt;  \n         &lt;xsd:simpleContent&gt;  \n          &lt;xsd:extension base=&#39;xsd:string&#39;&gt;  \n           &lt;xsd:attribute name=&#39;Lang&#39; use=&#39;required&#39;&gt;  \n            &lt;xsd:simpleType&gt;  \n             &lt;xsd:restriction base=&#39;xsd:token&#39;&gt;  \n              &lt;xsd:enumeration value=&#39;C#&#39;/&gt;  \n              &lt;xsd:enumeration value=&#39;VB&#39;/&gt;  \n             &lt;/xsd:restriction&gt;  \n            &lt;/xsd:simpleType&gt;  \n           &lt;/xsd:attribute&gt;  \n          &lt;/xsd:extension&gt;  \n         &lt;/xsd:simpleContent&gt;  \n        &lt;/xsd:complexType&gt;  \n       &lt;/xsd:element&gt;  \n      &lt;/xsd:schema&gt;&quot;;  \n\n    XmlSchemaSet schemas = new XmlSchemaSet();  \n    schemas.Add(&quot;&quot;, XmlReader.Create(new StringReader(xsdMarkup)));  \n\n    XDocument doc1 = new XDocument(  \n        new XElement(&quot;Root&quot;,  \n            new XAttribute(&quot;Lang&quot;, &quot;C#&quot;)  \n        )  \n    );  \n\n    Console.WriteLine(&quot;Validating doc1 ...&quot;);  \n    bool errors = false;  \n    doc1.Validate(schemas, (sender, e) =&gt;  \n    {  \n        Console.WriteLine(e.Message);  \n        errors = true;  \n    }, true);  \n    Console.WriteLine(&quot;doc1 {0}&quot;, errors ? &quot;did not validate&quot; : &quot;validated&quot;);  \n    DumpInvalidNodes(doc1.Root);  \n\n    Console.WriteLine();  \n    Console.WriteLine(&quot;Validating Lang attribute ...&quot;);  \n    XAttribute lang = doc1.Element(&quot;Root&quot;).Attribute(&quot;Lang&quot;);  \n\n    errors = false;  \n    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, (sender, e) =&gt;  \n    {  \n        Console.WriteLine(e.Message);  \n        errors = true;  \n    }, true);  \n    Console.WriteLine(&quot;lang {0}&quot;, errors ? &quot;did not validate&quot; : &quot;validated&quot;);  \n    DumpInvalidNodes(doc1.Root);  \n\n    // the following makes the Lang attribute invalid according to the schema  \n    lang.Value = &quot;VC&quot;;  \n\n    Console.WriteLine();  \n    Console.WriteLine(&quot;Validating Lang attribute ...&quot;);  \n\n    errors = false;  \n    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, (sender, e) =&gt;  \n    {  \n        Console.WriteLine(e.Message);  \n        errors = true;  \n    }, true);  \n    Console.WriteLine(&quot;lang {0}&quot;, errors ? &quot;did not validate&quot; : &quot;validated&quot;);  \n    DumpInvalidNodes(doc1.Root);  \n}\n</code></pre><pre><code class=\"lang-vb\">\n                Private Sub DumpInvalidNodes(ByVal el As XElement)  \n    If el.GetSchemaInfo.Validity &lt;&gt; XmlSchemaValidity.Valid Then  \n        Console.WriteLine(&quot;Invalid Element {0}&quot;, _  \n            el _  \n            .AncestorsAndSelf _  \n            .InDocumentOrder() _  \n            .Aggregate(&quot;&quot;, _  \n                Function(ByVal s, ByVal i) s + &quot;/&quot; + i.Name.ToString()))  \n    End If  \n    For Each att As XAttribute In el.Attributes()  \n        If att.GetSchemaInfo.Validity &lt;&gt; XmlSchemaValidity.Valid Then  \n            Console.WriteLine(&quot;Invalid Attribute {0}&quot;, _  \n                att _  \n                .Parent _  \n                .AncestorsAndSelf() _  \n                .InDocumentOrder() _  \n                .Aggregate(&quot;&quot;, _  \n                    Function(ByVal s, ByVal i) s + &quot;/&quot; + i.Name.ToString()) + _  \n                    &quot;/@&quot; + att.Name.ToString())  \n        End If  \n    Next  \n    For Each child As XElement In el.Elements()  \n        DumpInvalidNodes(child)  \n    Next  \nEnd Sub  \n\nDim errors As Boolean = False  \n\nPrivate Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  \n    Console.WriteLine(&quot;{0}&quot;, e.Message)  \n    errors = True  \nEnd Sub  \n\nSub Main()  \n\n    Dim xsdMarkup As XDocument = _  \n        &lt;?xml version=&#39;1.0&#39;?&gt;  \n        &lt;xsd:schema xmlns:xsd=&#39;http://www.w3.org/2001/XMLSchema&#39;&gt;  \n            &lt;xsd:element name=&#39;Root&#39;&gt;  \n                &lt;xsd:complexType&gt;  \n                    &lt;xsd:simpleContent&gt;  \n                        &lt;xsd:extension base=&#39;xsd:string&#39;&gt;  \n                            &lt;xsd:attribute name=&#39;Lang&#39; use=&#39;required&#39;&gt;  \n                                &lt;xsd:simpleType&gt;  \n                                    &lt;xsd:restriction base=&#39;xsd:token&#39;&gt;  \n                                        &lt;xsd:enumeration value=&#39;C#&#39;/&gt;  \n                                        &lt;xsd:enumeration value=&#39;VB&#39;/&gt;  \n                                    &lt;/xsd:restriction&gt;  \n                                &lt;/xsd:simpleType&gt;  \n                            &lt;/xsd:attribute&gt;  \n                        &lt;/xsd:extension&gt;  \n                    &lt;/xsd:simpleContent&gt;  \n                &lt;/xsd:complexType&gt;  \n            &lt;/xsd:element&gt;  \n        &lt;/xsd:schema&gt;  \n\n    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  \n    schemas.Add(&quot;&quot;, xsdMarkup.CreateReader)  \n\n    Dim doc1 As XDocument = &lt;?xml version=&#39;1.0&#39;?&gt;  \n                            &lt;Root Lang=&#39;C#&#39;/&gt;  \n\n    Console.WriteLine(&quot;Validating doc1 ...&quot;)  \n    errors = False  \n    doc1.Validate(schemas, AddressOf XSDErrors, True)  \n    Console.WriteLine(&quot;doc1 {0}&quot;, IIf(errors, &quot;did not validate&quot;, &quot;validated&quot;))  \n    DumpInvalidNodes(doc1.Root)  \n\n    Console.WriteLine()  \n    Console.WriteLine(&quot;Validating Lang attribute ...&quot;)  \n    Dim lang As XAttribute = doc1.Element(&quot;Root&quot;).Attribute(&quot;Lang&quot;)  \n\n    errors = False  \n    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, AddressOf XSDErrors, True)  \n    Console.WriteLine(&quot;lang {0}&quot;, IIf(errors, &quot;did not validate&quot;, &quot;validated&quot;))  \n    DumpInvalidNodes(doc1.Root)  \n\n    &#39; the following makes the Lang attribute invalid according to the schema  \n    lang.Value = &quot;VC&quot;  \n\n    Console.WriteLine()  \n    Console.WriteLine(&quot;Validating Lang attribute ...&quot;)  \n\n    errors = False  \n    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, AddressOf XSDErrors, True)  \n    Console.WriteLine(&quot;lang {0}&quot;, IIf(errors, &quot;did not validate&quot;, &quot;validated&quot;))  \n    DumpInvalidNodes(doc1.Root)  \nEnd Sub\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>Validating doc1 ...  \ndoc1 validated  \n\nValidating Lang attribute ...  \nlang validated  \n\nValidating Lang attribute ...  \nThe &#39;Lang&#39; attribute is invalid - The value &#39;VC&#39; is invalid according to its datatype &#39;Token&#39; - The Enumeration constraint failed.  \nlang did not validate  \nInvalid Attribute /Root/@Lang\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Schema_Extensions_Validate_System_Xml_Linq_XElement_System_Xml_Schema_XmlSchemaObject_System_Xml_Schema_XmlSchemaSet_System_Xml_Schema_ValidationEventHandler_System_Boolean_\">\r\n    \r\n            <a id=\"System_Xml_Schema_Extensions_Validate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Validate(XElement,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Validates that an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> sub-tree conforms to a specified <a class=\"xref\" href=\"system.xml.schema.xmlschemaobject\" data-linktype=\"relative-path\">XmlSchemaObject</a> and an <a class=\"xref\" href=\"system.xml.schema.xmlschemaset\" data-linktype=\"relative-path\">XmlSchemaSet</a>, optionally populating the XML tree with the post-schema-validation infoset (PSVI).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Validate (this System.Xml.Linq.XElement source, System.Xml.Schema.XmlSchemaObject partialValidationType, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler, bool addSchemaInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> to validate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>partialValidationType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.schema.xmlschemaobject\" data-linktype=\"relative-path\">XmlSchemaObject</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.schema.xmlschemaobject\" data-linktype=\"relative-path\">XmlSchemaObject</a> that specifies the sub-tree to validate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>schemas</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.schema.xmlschemaset\" data-linktype=\"relative-path\">XmlSchemaSet</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.schema.xmlschemaset\" data-linktype=\"relative-path\">XmlSchemaSet</a> to validate against.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>validationEventHandler</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.schema.validationeventhandler\" data-linktype=\"relative-path\">ValidationEventHandler</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.xml.schema.validationeventhandler\" data-linktype=\"relative-path\">ValidationEventHandler</a> for an event that occurs when the reader encounters validation errors. If <code>null</code>, throws an exception upon validation errors.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>addSchemaInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> indicating whether to populate the post-schema-validation infoset (PSVI).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.schema.xmlschemavalidationexception\" data-linktype=\"relative-path\">XmlSchemaValidationException</a></div>\r\n                  </div>\r\n                  <p>Thrown for XML Schema Definition Language (XSD) validation errors.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can use this method to validate that a sub-tree (with an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> at the root of the sub-tree) conforms to a schema. You typically use this method when you have modified a sub-tree, and you want to make sure that it still conforms to its schema. You could validate the entire document, but it takes less processing time to validate a just a sub-tree.  </p>\n<p> If <code>addSchemaInfo</code> is <code>true</code>, then this method populates the XML tree with the post-schema-validation infoset (PSVI).  </p>\n<p> There are two aspects of populating the XML tree with the PSVI.  </p>\n<p> First, an annotation is added to all nodes in the tree such that you can now call <a class=\"xref\" href=\"system.xml.schema.extensions#System_Xml_Schema_Extensions_GetSchemaInfo_\" data-linktype=\"relative-path\">GetSchemaInfo</a> on an element or attribute in the tree.  </p>\n<p> Second, default elements and attributes defined in the XSD are added to the XML tree. By calling one of the <a class=\"xref\" href=\"system.xml.schema.extensions#System_Xml_Schema_Extensions_GetSchemaInfo_\" data-linktype=\"relative-path\">GetSchemaInfo</a> methods, you can determine if a specific element or attribute was added from the XSD as a default element or attribute.  </p>\n<p> If you pass <code>null</code> for <code>validationEventHandler</code>, then this method raises an exception upon validation errors. Validation warnings will not raise an exception.  </p>\n<p> To validate a sub-tree, you use an instance of <a class=\"xref\" href=\"system.xml.schema.xmlschemaobject\" data-linktype=\"relative-path\">XmlSchemaObject</a>. You can obtain this instance in various ways. An easy way is as follows:  </p>\n<ol>\n<li><p>Validate that a document conforms to a schema.  </p>\n</li>\n<li><p>Add the post-schema-validation infoset (PSVI) by calling the <a class=\"xref\" href=\"system.xml.schema.extensions#System_Xml_Schema_Extensions_Validate_\" data-linktype=\"relative-path\">Validate</a> extension method.  </p>\n</li>\n<li><p>Call the <a class=\"xref\" href=\"system.xml.schema.extensions#System_Xml_Schema_Extensions_GetSchemaInfo_\" data-linktype=\"relative-path\">GetSchemaInfo</a> extension method to retrieve an object that implements <a class=\"xref\" href=\"system.xml.schema.ixmlschemainfo\" data-linktype=\"relative-path\">IXmlSchemaInfo</a>. From the retrieved object, you can get an <a class=\"xref\" href=\"system.xml.schema.xmlschemaobject\" data-linktype=\"relative-path\">XmlSchemaObject</a>.  </p>\n<ul>\n<li><p>If you get an <a class=\"xref\" href=\"system.xml.schema.xmlschemaobject\" data-linktype=\"relative-path\">XmlSchemaObject</a> for an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>, the type will be <a class=\"xref\" href=\"system.xml.schema.xmlschemaelement\" data-linktype=\"relative-path\">XmlSchemaElement</a>.  </p>\n</li>\n<li><p>If you get an <a class=\"xref\" href=\"system.xml.schema.xmlschemaobject\" data-linktype=\"relative-path\">XmlSchemaObject</a> for an <a class=\"xref\" href=\"system.xml.linq.xattribute\" data-linktype=\"relative-path\">XAttribute</a>, the type will be <a class=\"xref\" href=\"system.xml.schema.xmlschemaattribute\" data-linktype=\"relative-path\">XmlSchemaAttribute</a>.  </p>\n</li>\n</ul>\n<p>After you have an instance of an <a class=\"xref\" href=\"system.xml.schema.xmlschemaobject\" data-linktype=\"relative-path\">XmlSchemaObject</a>, you can use this method to validate a sub-tree..</p>\n</li>\n</ol>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-c#\">\n                string xsdMarkup =  \n    @&quot;&lt;xsd:schema xmlns:xsd=&#39;http://www.w3.org/2001/XMLSchema&#39;&gt;  \n       &lt;xsd:element name=&#39;Root&#39;&gt;  \n        &lt;xsd:complexType&gt;  \n         &lt;xsd:sequence&gt;  \n          &lt;xsd:element name=&#39;Child1&#39; minOccurs=&#39;1&#39; maxOccurs=&#39;1&#39;/&gt;  \n          &lt;xsd:element name=&#39;Child2&#39; minOccurs=&#39;1&#39; maxOccurs=&#39;1&#39;&gt;  \n           &lt;xsd:complexType&gt;  \n            &lt;xsd:simpleContent&gt;  \n             &lt;xsd:extension base=&#39;xsd:string&#39;&gt;  \n              &lt;xsd:attribute name=&#39;Att1&#39; default=&#39;Att1 Default Value&#39;/&gt;  \n             &lt;/xsd:extension&gt;  \n            &lt;/xsd:simpleContent&gt;  \n           &lt;/xsd:complexType&gt;  \n          &lt;/xsd:element&gt;  \n         &lt;/xsd:sequence&gt;  \n        &lt;/xsd:complexType&gt;  \n       &lt;/xsd:element&gt;  \n      &lt;/xsd:schema&gt;&quot;;  \nXmlSchemaSet schemas = new XmlSchemaSet();  \nschemas.Add(&quot;&quot;, XmlReader.Create(new StringReader(xsdMarkup)));  \n\nXDocument doc1 = new XDocument(  \n    new XElement(&quot;Root&quot;,  \n        new XElement(&quot;Child1&quot;, &quot;c1&quot;),  \n        new XElement(&quot;Child2&quot;, &quot;c2&quot;)  \n    )  \n);  \n\nXDocument doc2 = new XDocument(  \n    new XElement(&quot;Root&quot;,  \n        new XElement(&quot;Child1&quot;, &quot;content1&quot;),  \n        new XElement(&quot;Child3&quot;, &quot;content1&quot;)  \n    )  \n);  \n\nConsole.WriteLine(&quot;Validating doc1&quot;);  \nbool errors = false;  \ndoc1.Validate(schemas, (o, e) =&gt;  \n                     {  \n                         Console.WriteLine(&quot;{0}&quot;, e.Message);  \n                         errors = true;  \n                     }, true);  \nConsole.WriteLine(&quot;doc1 {0}&quot;, errors ? &quot;did not validate&quot; : &quot;validated&quot;);  \n\nConsole.WriteLine();  \nConsole.WriteLine(&quot;Validating doc2&quot;);  \nerrors = false;  \ndoc2.Validate(schemas, (o, e) =&gt;  \n                     {  \n                         Console.WriteLine(&quot;{0}&quot;, e.Message);  \n                         errors = true;  \n                     }, true);  \nConsole.WriteLine(&quot;doc2 {0}&quot;, errors ? &quot;did not validate&quot; : &quot;validated&quot;);  \n\nConsole.WriteLine();  \nConsole.WriteLine(&quot;Contents of doc1:&quot;);  \nConsole.WriteLine(doc1);  \n\nConsole.WriteLine();  \nConsole.WriteLine(&quot;Contents of doc2:&quot;);  \nConsole.WriteLine(doc2);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim errors As Boolean = False  \n\nPrivate Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  \n    Console.WriteLine(&quot;{0}&quot;, e.Message)  \n    errors = True  \nEnd Sub  \n\nSub Main()  \n    Dim xsdMarkup As XDocument = _  \n        &lt;?xml version=&#39;1.0&#39;?&gt;  \n        &lt;xsd:schema xmlns:xsd=&#39;http://www.w3.org/2001/XMLSchema&#39;&gt;  \n            &lt;xsd:element name=&#39;Root&#39;&gt;  \n                &lt;xsd:complexType&gt;  \n                    &lt;xsd:sequence&gt;  \n                        &lt;xsd:element name=&#39;Child1&#39; minOccurs=&#39;1&#39; maxOccurs=&#39;1&#39;/&gt;  \n                        &lt;xsd:element name=&#39;Child2&#39; minOccurs=&#39;1&#39; maxOccurs=&#39;1&#39;&gt;  \n                            &lt;xsd:complexType&gt;  \n                                &lt;xsd:simpleContent&gt;  \n                                    &lt;xsd:extension base=&#39;xsd:string&#39;&gt;  \n                                        &lt;xsd:attribute name=&#39;Att1&#39; default=&#39;Att1 Default Value&#39;/&gt;  \n                                    &lt;/xsd:extension&gt;  \n                                &lt;/xsd:simpleContent&gt;  \n                            &lt;/xsd:complexType&gt;  \n                        &lt;/xsd:element&gt;  \n                    &lt;/xsd:sequence&gt;  \n                &lt;/xsd:complexType&gt;  \n            &lt;/xsd:element&gt;  \n        &lt;/xsd:schema&gt;  \n    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  \n    schemas.Add(&quot;&quot;, xsdMarkup.CreateReader)  \n\n    Dim doc1 As XDocument = _  \n        &lt;?xml version=&#39;1.0&#39;?&gt;  \n        &lt;Root&gt;  \n            &lt;Child1&gt;c1&lt;/Child1&gt;  \n            &lt;Child2&gt;c2&lt;/Child2&gt;  \n        &lt;/Root&gt;  \n\n    Dim doc2 As XDocument = _  \n        &lt;?xml version=&#39;1.0&#39;?&gt;  \n        &lt;Root&gt;  \n            &lt;Child1&gt;content1&lt;/Child1&gt;  \n            &lt;Child3&gt;content1&lt;/Child3&gt;  \n        &lt;/Root&gt;  \n\n    Console.WriteLine(&quot;Validating doc1&quot;)  \n    errors = False  \n    doc1.Validate(schemas, AddressOf XSDErrors, True)  \n    Console.WriteLine(&quot;doc1 {0}&quot;, IIf(errors, &quot;did not validate&quot;, &quot;validated&quot;))  \n\n    Console.WriteLine()  \n    Console.WriteLine(&quot;Validating doc2&quot;)  \n    errors = False  \n    doc2.Validate(schemas, AddressOf XSDErrors, True)  \n    Console.WriteLine(&quot;doc2 {0}&quot;, IIf(errors, &quot;did not validate&quot;, &quot;validated&quot;))  \n\n    Console.WriteLine()  \n    Console.WriteLine(&quot;Contents of doc1:&quot;)  \n    Console.WriteLine(doc1)  \n\n    Console.WriteLine()  \n    Console.WriteLine(&quot;Contents of doc2:&quot;)  \n    Console.WriteLine(doc2)  \nEnd Sub\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>Validating doc1  \ndoc1 validated  \n\nValidating doc2  \nThe element &#39;Root&#39; has invalid child element &#39;Child3&#39;. List of possible elements expected: &#39;Child2&#39;.  \ndoc2 did not validate  \n\nContents of doc1:  \n&lt;Root&gt;  \n  &lt;Child1&gt;c1&lt;/Child1&gt;  \n  &lt;Child2 Att1=&quot;Att1 Default Value&quot;&gt;c2&lt;/Child2&gt;  \n&lt;/Root&gt;  \n\nContents of doc2:  \n&lt;Root&gt;  \n  &lt;Child1&gt;content1&lt;/Child1&gt;  \n  &lt;Child3&gt;content1&lt;/Child3&gt;  \n&lt;/Root&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Xml.Schema.Extensions.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Xml.Schema.Extensions.yml\">\r\n<meta name=\"APIName\" content=\"System.Xml.Schema.Extensions\">\r\n<meta name=\"APIName\" content=\"System.Xml.Schema.Extensions.GetSchemaInfo\">\r\n<meta name=\"APIName\" content=\"System.Xml.Schema.Extensions.Validate\">\r\n<meta name=\"APILocation\" content=\"System.Xml.Linq.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"b42fe7f7-c3dd-393c-a752-0e266f7fec69\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\o2y0\\s\\fulldocset\\xml\\System.Xml.Schema\\Extensions.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"This class contains the LINQ to XML extension methods for XSD validation.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Xml.Schema/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Xml.Schema.Extensions\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Xml.Schema.Extensions.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Xml.Schema.Extensions.yml","open_to_public_contributors":true,"api_name":["System.Xml.Schema.Extensions","System.Xml.Schema.Extensions.GetSchemaInfo","System.Xml.Schema.Extensions.Validate"],"api_location":["System.Xml.Linq.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Xml.Schema.Extensions","System::Xml::Schema::Extensions","System.Xml.Schema.Extensions.GetSchemaInfo","System::Xml::Schema::Extensions::GetSchemaInfo","System.Xml.Schema.Extensions.Validate","System::Xml::Schema::Extensions::Validate"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"b42fe7f7-c3dd-393c-a752-0e266f7fec69","original_ecmaxml_local_path":"W:\\o2y0\\s\\fulldocset\\xml\\System.Xml.Schema\\Extensions.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Xml.Schema/Extensions.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Extensions class | Microsoft Docs","_op_ogTitle":"Extensions class","description":"This class contains the LINQ to XML extension methods for XSD validation.\n","toc_asset_id":"_splitted/System.Xml.Schema/toc.json","toc_rel":"_splitted/System.Xml.Schema/toc.json","source_url":"","ms.assetid":"System.Xml.Schema.Extensions","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.xml.schema.extensions","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.xml.schema.extensions","fileRelativePath":"System.Xml.Schema.Extensions.html"},"themesRelativePathToOutputRoot":"_themes/"}