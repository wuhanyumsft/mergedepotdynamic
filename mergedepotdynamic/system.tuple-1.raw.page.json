{"content":"    \r\n    <h1 id=\"System_Tuple_1\">\r\n      <span class=\"lang-csharp\">Tuple&lt;T1&gt;</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a 1-tuple, or singleton.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class Tuple&lt;T1&gt; : IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable</code></pre>\r\n    \r\n    \r\n    \t<h2>Type Parameters</h2>\r\n    \r\n    \t<table class=\"nameValue\">\r\n    \t\t<tr>\r\n    \t\t<td>\r\n    \t\tT1\r\n    \t\t</td>\r\n    \t\t<td>\r\n    \t\t<p>The type of the tuple&#39;s only component.</p>\n\r\n    \t\t</td>\r\n    \t\t</tr>\r\n    \t</table>\r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Tuple&lt;T1&gt;</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>A tuple is a data structure that has a specific number and sequence of values. The Tuple(T1) class represents a 1-tuple, or singleton, which is a tuple that has a single component. A singleton is used comparatively rarely in application development.  </p>\n<p> You can instantiate a Tuple(T1) object by calling either the <a class=\"xref\" href=\"system.tuple-1#System_Tuple_1__ctor_\" data-linktype=\"relative-path\">Tuple&lt;T1&gt;</a> constructor or the static &lt;xref:System.Tuple.Create%2A?displayProperty=fullName&gt; method. You can retrieve the value of the tuple&#39;s single component by using the read-only <a class=\"xref\" href=\"system.tuple-1#System_Tuple_1_Item1_\" data-linktype=\"relative-path\">Item1</a> instance property.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_1__ctor__0_\" data-linktype=\"self-bookmark\">Tuple&lt;T1&gt;(T1)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Tuple`1</span> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_1_Item1\" data-linktype=\"self-bookmark\">Item1</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the <span class=\"xref\">stem.Tuple`1</span> object&#39;s single component.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_1_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value that indicates whether the current <span class=\"xref\">stem.Tuple`1</span> object is equal to a specified object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_1_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the hash code for the current <span class=\"xref\">stem.Tuple`1</span> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_1_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string that represents the value of this <span class=\"xref\">stem.Tuple`1</span> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_1_System_Collections_IStructuralComparable_CompareTo_System_Object_System_Collections_IComparer_\" data-linktype=\"self-bookmark\">IStructuralComparable.CompareTo(Object,IComparer)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares the current <span class=\"xref\">stem.Tuple`1</span> object to a specified object by using a specified comparer, and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_1_System_Collections_IStructuralEquatable_Equals_System_Object_System_Collections_IEqualityComparer_\" data-linktype=\"self-bookmark\">IStructuralEquatable.Equals(Object,IEqualityComparer)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value that indicates whether the current <span class=\"xref\">stem.Tuple`1</span> object is equal to a specified object based on a specified comparison method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_1_System_Collections_IStructuralEquatable_GetHashCode_System_Collections_IEqualityComparer_\" data-linktype=\"self-bookmark\">IStructuralEquatable.GetHashCode(IEqualityComparer)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calculates the hash code for the current <span class=\"xref\">stem.Tuple`1</span> object by using a specified computation method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_1_System_IComparable_CompareTo_System_Object_\" data-linktype=\"self-bookmark\">IComparable.CompareTo(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares the current <span class=\"xref\">stem.Tuple`1</span> object to a specified object, and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_1__ctor__0_\">\r\n    \r\n            <a id=\"System_Tuple_1__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Tuple&lt;T1&gt;(T1)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Tuple`1</span> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Tuple (T1 item1);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>item1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T1</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of the tuple&#39;s only component.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can also use the static &lt;xref:System.Tuple.Create%2A?displayProperty=fullName&gt; method to instantiate a 1-tuple object without having to explicitly specify the type of its component. The following example uses the &lt;xref:System.Tuple.Create%2A&gt; method to instantiate a 1-tuple whose component is of type <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple.Create#1\">            var tuple1 = Tuple.Create(12);\n            Console.WriteLine(tuple1.Item1);     // Displays 12\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple.Create#1\">        Dim tuple1 = Tuple.Create(12)\n        Console.WriteLine(tuple1.Item1)     &#39; Displays 12\n</code></pre><p> This is equivalent to the following call to the Tuple(T1) class constructor.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple.Create#2\">            var tuple1 = new Tuple&lt;int&gt;(12);\n            Console.WriteLine(tuple1.Item1);     // Displays 12\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple.Create#2\">        Dim tuple1 = New Tuple(Of Integer)(12)\n        Console.WriteLine(tuple1.Item1)     &#39; Displays 12\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_1_Item1\">\r\n    \r\n            <a id=\"System_Tuple_1_Item1_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Item1</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the <span class=\"xref\">stem.Tuple`1</span> object&#39;s single component.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public T1 Item1 { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">T1</span></div>\r\n                  </div>\r\n                  <p>The value of the current <span class=\"xref\">stem.Tuple`1</span> object&#39;s single component.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can determine the type of the Item1 component in one of two ways:  </p>\n<ul>\n<li><p>By calling the <code>GetType</code> method on the value that is returned by the Item1 property.  </p>\n</li>\n<li><p>By retrieving the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the <a class=\"xref\" href=\"system.tuple-1\" data-linktype=\"relative-path\">Tuple&lt;T1&gt;</a> object, and retrieving the first element from the array that is returned by its <a class=\"xref\" href=\"system.type#System_Type_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method.  </p>\n<p>The example illustrates both approaches.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays information about two singletons and their components.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Tuple`1.Item1#1\">Imports System.Numerics\n\nModule modMain\n   Public Sub Main()\n      Dim tuple1 = Tuple.Create(-1.23445e-32)\n      &#39; Display information about this singleton.\n      Dim tuple1Type As Type = tuple1.GetType()\n      Console.WriteLine(&quot;First 1-Tuple:&quot;)\n      Console.WriteLine(&quot;   Type: {0}&quot;, tuple1Type.Name)\n      Console.WriteLine(&quot;   Generic Parameter Type: {0}&quot;, \n                        tuple1Type.GetGenericArguments()(0))\n      Console.WriteLine(&quot;   Component Value: {0}&quot;, tuple1.Item1)\n      Console.WriteLine(&quot;   Component Value Type: {0}&quot;, \n                        tuple1.Item1.GetType().Name)\n      Console.WriteLine()\n      \n      Dim tuple2 As New Tuple(Of BigInteger)(1.83789322281780983781356676e103)\n      &#39; Display information about this singleton.\n      Dim tuple2Type As Type = tuple2.GetType()\n      Console.WriteLine(&quot;Second 1-Tuple:&quot;)\n      Console.WriteLine(&quot;   Type: {0}&quot;, tuple2Type.Name)\n      Console.WriteLine(&quot;   Generic Parameter Type: {0}&quot;, \n                        tuple2Type.GetGenericArguments()(0))\n      Console.WriteLine(&quot;   Component Value: {0}&quot;, tuple2.Item1)\n      Console.WriteLine(&quot;   Component Value Type: {0}&quot;, \n                        tuple2.Item1.GetType().Name)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       First 1-Tuple:\n&#39;          Type: Tuple`1\n&#39;          Generic Parameter Type: System.Double\n&#39;          Component Value: -1.23445E-32\n&#39;          Component Value Type: Double\n&#39;       \n&#39;       Second 1-Tuple:\n&#39;          Type: Tuple`1\n&#39;          Generic Parameter Type: System.Numerics.BigInteger\n&#39;          Component Value: 1.8378932228178098168858909492E+103\n&#39;          Component Value Type: BigInteger\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Tuple`1.Item1#1\">using System;\nusing System.Numerics;\n\npublic class Example\n{\n   public static void Main()\n   {\n      var tuple1 = Tuple.Create(-1.23445e-32);\n      // Display information about this singleton.\n      Type tuple1Type = tuple1.GetType();\n      Console.WriteLine(&quot;First 1-Tuple:&quot;);\n      Console.WriteLine(&quot;   Type: {0}&quot;, tuple1Type.Name);\n      Console.WriteLine(&quot;   Generic Parameter Type: {0}&quot;, \n                        tuple1Type.GetGenericArguments()[0]);\n      Console.WriteLine(&quot;   Component Value: {0}&quot;, tuple1.Item1);\n      Console.WriteLine(&quot;   Component Value Type: {0}&quot;, \n                        tuple1.Item1.GetType().Name);\n      Console.WriteLine();\n      \n      var tuple2 = Tuple.Create((BigInteger)1.83789322281780983781356676e103);\n      // Display information about this singleton.\n      Type tuple2Type = tuple2.GetType();\n      Console.WriteLine(&quot;Second 1-Tuple:&quot;);\n      Console.WriteLine(&quot;   Type: {0}&quot;, tuple2Type.Name);\n      Console.WriteLine(&quot;   Generic Parameter Type: {0}&quot;, \n                        tuple2Type.GetGenericArguments()[0]);\n      Console.WriteLine(&quot;   Component Value: {0}&quot;, tuple2.Item1);\n      Console.WriteLine(&quot;   Component Value Type: {0}&quot;, \n                        tuple2.Item1.GetType().Name);\n   }\n}\n// The example displays the following output:\n//       First 1-Tuple:\n//          Type: Tuple`1\n//          Generic Parameter Type: System.Double\n//          Component Value: -1.23445E-32\n//          Component Value Type: Double\n//       \n//       Second 1-Tuple:\n//          Type: Tuple`1\n//          Generic Parameter Type: System.Numerics.BigInteger\n//          Component Value: 1.8378932228178098168858909492E+103\n//          Component Value Type: BigInteger\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_1_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_Tuple_1_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value that indicates whether the current <span class=\"xref\">stem.Tuple`1</span> object is equal to a specified object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to compare with this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current instance is equal to the specified object; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>obj</code> parameter is considered to be equal to the current instance under the following conditions:  </p>\n<ul>\n<li><p>It is a <a class=\"xref\" href=\"system.tuple-1\" data-linktype=\"relative-path\">Tuple&lt;T1&gt;</a> object.  </p>\n</li>\n<li><p>Its single component is of the same type as the current instance.  </p>\n</li>\n<li><p>Its single component is equal to that of the current instance. Equality is determined by the default object equality comparer for each component.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example calls the Equals method to compare a <a class=\"xref\" href=\"system.tuple-1\" data-linktype=\"relative-path\">Tuple&lt;T1&gt;</a> object whose component is a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> value with three <a class=\"xref\" href=\"system.tuple-1\" data-linktype=\"relative-path\">Tuple&lt;T1&gt;</a> objects whose components have the following characteristics:  </p>\n<ul>\n<li><p>Same type (<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>) and same value.  </p>\n</li>\n<li><p>Same type (<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>), but different value.  </p>\n</li>\n<li><p>Different type (<a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>), but same value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple`1.Equals#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      var doubleTuple1 = Tuple.Create(12.3455);\n      var doubleTuple2 = Tuple.Create(16.8912);\n      var doubleTuple3 = Tuple.Create(12.3455);\n      var singleTuple1 = Tuple.Create(12.3455f);\n      var tuple2 = Tuple.Create(&quot;James&quot;, 97.3); \n        \n      // Compare first tuple with a Tuple(Of Double) with a different value.\n      TestEquality(doubleTuple1, doubleTuple2);\n      // Compare first tuple with a Tuple(Of Double) with the same value.\n      TestEquality(doubleTuple1, doubleTuple3);\n      // Compare first tuple with a Tuple(Of Single) with the same value.\n      TestEquality(doubleTuple1, singleTuple1);\n      // Compare a 1-tuple with a 2-tuple.\n      TestEquality(doubleTuple1, tuple2); \n   }\n\n   private static void TestEquality(Tuple&lt;double&gt; tuple, object obj)\n   {\n      Console.WriteLine(&quot;{0} = {1}: {2}&quot;, tuple.ToString(),\n                                          obj.ToString(),\n                                          tuple.Equals(obj));\n   } \n}\n// The example displays the following output:\n//       (12.3455) = (16.8912): False\n//       (12.3455) = (12.3455): True\n//       (12.3455) = (12.3455): False\n//       (12.3455) = (James, 97.3): False\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple`1.Equals#1\">Module Example\n    Sub Main()\n        Dim doubleTuple1 = Tuple.Create(12.3455)\n\n        Dim doubleTuple2 = Tuple.Create(16.8912)\n        Dim doubleTuple3 = Tuple.Create(12.3455)\n        Dim singleTuple1 = Tuple.Create(CSng(12.3455))\n        Dim tuple2 = Tuple.Create(&quot;James&quot;, 97.3) \n        &#39; Compare first tuple with a Tuple(Of Double) with a different value.\n        TestEquality(doubleTuple1, doubleTuple2)\n        &#39; Compare first tuple with a Tuple(Of Double) with the same value.\n        TestEquality(doubleTuple1, doubleTuple3)\n        &#39; Compare first tuple with a Tuple(Of Single) with the same value.\n        TestEquality(doubleTuple1, singleTuple1)\n        &#39; Compare a 1-tuple with a 2-tuple.\n        TestEquality(doubleTuple1, tuple2) \n    End Sub\n    \n   Private Sub TestEquality(tuple As Tuple(Of Double), obj As Object)\n      Try\n         Console.WriteLine(&quot;{0} = {1}: {2}&quot;, tuple.ToString(),\n                                            obj.ToString,\n                                            tuple.Equals(obj))\n      \n      Catch e As ArgumentException\n         If obj.GetType.IsGenericType Then \n            If obj.GetType().Name = &quot;Tuple`1&quot; Then \n               Console.WriteLine(&quot;Cannot compare a Tuple(Of {0}) with a Tuple(Of {1}).&quot;, \n                              tuple.Item1.GetType().Name, obj.Item1.GetType().Name)\n            Else\n               Console.WriteLine(&quot;Cannot compare a {0} with a {1}.&quot;, tuple.GetType().Name, \n                                                                     obj.GetType().Name)\n            End If\n         Else\n            Console.WriteLine(&quot;Cannot compare a {0} with a {1}.&quot;, tuple.GetType().Name,\n                                                                  obj.GetType().Name)\n         End If\n      End Try\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       (12.3455) = (16.8912): False\n&#39;       (12.3455) = (12.3455): True\n&#39;       (12.3455) = (12.3455): False\n&#39;       (12.3455) = (James, 97.3): False\n</code></pre></li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_1_GetHashCode\">\r\n    \r\n            <a id=\"System_Tuple_1_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the hash code for the current <span class=\"xref\">stem.Tuple`1</span> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer hash code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_1_ToString\">\r\n    \r\n            <a id=\"System_Tuple_1_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string that represents the value of this <span class=\"xref\">stem.Tuple`1</span> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of this <span class=\"xref\">stem.Tuple`1</span> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The string returned by this method takes the form (<em>Item1</em>), where <em>Item1</em> represents the value of the <a class=\"xref\" href=\"system.tuple-1#System_Tuple_1_Item1_\" data-linktype=\"relative-path\">Item1</a> property. If the value of <a class=\"xref\" href=\"system.tuple-1#System_Tuple_1_Item1_\" data-linktype=\"relative-path\">Item1</a> is <code>null</code>, it is represented as <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the ToString method.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Tuple`1.ToString#1\">Module Example\n   Public Sub Main()\n      Dim tuple1Double = Tuple.Create(3.456e-18)\n      DisplayTuple(tuple1Double)\n      \n      Dim tuple1String = Tuple.Create(&quot;Australia&quot;)\n      DisplayTuple(tuple1String)\n      \n      Dim tuple1Bool = Tuple.Create(True)\n      DisplayTuple(tuple1Bool)\n      \n      Dim tuple1Char = Tuple.Create(&quot;a&quot;c)\n      DisplayTuple(tuple1Char)\n   End Sub\n   \n   Private Sub DisplayTuple(obj As Object)\n      Console.WriteLine(obj.ToString())\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       (3.456E-18)\n&#39;       (Australia)\n&#39;       (True)\n&#39;       (a)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Tuple`1.ToString#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      var tuple1Double = Tuple.Create(3.456e-18);\n      DisplayTuple(tuple1Double);\n      \n      var tuple1String = Tuple.Create(&quot;Australia&quot;);\n      DisplayTuple(tuple1String);\n      \n      var tuple1Bool = Tuple.Create(true);\n      DisplayTuple(tuple1Bool);\n      \n      var tuple1Char = Tuple.Create(&#39;a&#39;);\n      DisplayTuple(tuple1Char);\n   }\n\n   private static void DisplayTuple(object obj)\n   {\n      Console.WriteLine(obj.ToString());\n   }\n}\n// The example displays the following output:\n//       (3.456E-18)\n//       (Australia)\n//       (True)\n//       (a)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_1_System_Collections_IStructuralComparable_CompareTo_System_Object_System_Collections_IComparer_\">\r\n    \r\n            <a id=\"System_Tuple_1_System_Collections_IStructuralComparable_CompareTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IStructuralComparable.CompareTo(Object,IComparer)</div>        \r\n          </div>\r\n    \r\n            <p>Compares the current <span class=\"xref\">stem.Tuple`1</span> object to a specified object by using a specified comparer, and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">int IStructuralComparable.CompareTo (object other, System.Collections.IComparer comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>other</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare with the current instance.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that provides custom rules for comparison.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A signed integer that indicates the relative position of this instance and <code>other</code> in the sort order, as shown in the following table.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Description<br>\n </th></tr></thead><tbody><tr><td> A negative integer<br>\n </td><td> This instance precedes <code>other</code>.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> This instance and <code>other</code> have the same position in the sort order.<br>\n </td></tr><tr><td> A positive integer<br>\n </td><td> This instance follows <code>other</code>.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>other</code> is not a <span class=\"xref\">stem.Tuple`1</span> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Although this method can be called directly, it is most commonly called by collection sorting methods that include <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> parameters to order the members of a collection. For example, it is called by the <a class=\"xref\" href=\"system.array#System_Array_Sort_System_Array_System_Collections_IComparer_\" data-linktype=\"relative-path\">System.Array.Sort(Array,IComparer)</a> method and the <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Add_\" data-linktype=\"relative-path\">Add</a> method of a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object that is instantiated by using the <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList__ctor_System_Collections_IComparer_\" data-linktype=\"relative-path\">System.Collections.SortedList.SortedList(IComparer)</a> constructor.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> The IStructuralComparable.CompareTo method is intended for use in sorting operations. It should not be used when the primary purpose of a comparison is to determine whether two objects are equal. To determine whether two objects are equal, call the <a class=\"xref\" href=\"system.tuple-1#System_Tuple_1_System_Collections_IStructuralEquatable_Equals_\" data-linktype=\"relative-path\">System.Collections.IStructuralEquatable.Equals</a> method.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a generic class named <code>DescendingComparer</code> that implements the <a class=\"xref\" href=\"system.collections.generic.icomparer-1\" data-linktype=\"relative-path\">IComparer&lt;T&gt;</a> interface. <code>DescendingComparer</code> sorts objects in descending rather than ascending order by reversing the value returned by the default comparer for a particular type. An instance of the generic <code>DescendingComparer</code> class is then passed to the <a class=\"xref\" href=\"system.array#System_Array_Sort_System_Array_System_Collections_IComparer_\" data-linktype=\"relative-path\">System.Array.Sort(Array,IComparer)</a> method to sort an array of <a class=\"xref\" href=\"system.tuple-1\" data-linktype=\"relative-path\">Tuple&lt;T1&gt;</a> objects in descending order. Note that the example does not directly call the IStructuralComparable.CompareTo method. This method is called implicitly by the <a class=\"xref\" href=\"system.array#System_Array_Sort_System_Array_System_Collections_IComparer_\" data-linktype=\"relative-path\">System.Array.Sort(Array,IComparer)</a> method for each element in the array.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple`1.CompareTo#2\">using System;\nusing System.Collections.Generic;\n\npublic class DescendingComparer&lt;T&gt; : IComparer&lt;T&gt;\n{\n    public int Compare(T x, T y) \n    {\n        return -1 * Comparer&lt;T&gt;.Default.Compare(x, y);\n    }\n}\n\nclass CompareTo2\n{\n   static void Main()\n   {\n       Tuple&lt;Double&gt;[] values = { Tuple.Create(13.54),\n                                  Tuple.Create(Double.NaN),\n                                  Tuple.Create(-189.42993),\n                                  Tuple.Create(Double.PositiveInfinity),\n                                  Tuple.Create(Double.Epsilon),\n                                  Tuple.Create(1.934E-17),\n                                  Tuple.Create(Double.NegativeInfinity),\n                                  Tuple.Create(-0.000000000003588),\n                                  null };\n       Console.WriteLine(&quot;The values in unsorted order:&quot;);\n       foreach (var value in values)\n           if (value != null)\n               Console.WriteLine(&quot;   {0}&quot;, value.Item1);\n           else\n               Console.WriteLine(&quot;   &lt;null&gt;&quot;);\n       Console.WriteLine();\n\n       Array.Sort(values, new DescendingComparer&lt;Tuple&lt;Double&gt;&gt;());\n\n       Console.WriteLine(&quot;The values sorted in descending order:&quot;);\n       foreach (var value in values)\n           if (value != null)\n               Console.WriteLine(&quot;   {0}&quot;, value.Item1);\n           else\n               Console.WriteLine(&quot;   &lt;null&gt;&quot;);\n    }\n}\n// The example displays the following output:\n//      The values in unsorted order:\n//         13.54\n//         NaN\n//         -189.42993\n//         Infinity\n//         4.94065645841247E-324\n//         1.934E-17\n//         -Infinity\n//         -3.588E-12\n//         &lt;null&gt;\n//\n//      The values sorted in descending order:\n//         Infinity\n//         13.54\n//         1.934E-17\n//         4.94065645841247E-324\n//         -3.588E-12\n//         -189.42993\n//         -Infinity\n//         NaN\n//         &lt;null&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple`1.CompareTo#2\">Imports System.Collections.Generic\n\nPublic Class DescendingComparer(Of T) : Implements IComparer(Of T)\n    Public Function Compare(ByVal x As T, ByVal y As T) As Integer Implements IComparer(Of T).Compare\n        Return -1 * Comparer(Of T).Default.Compare(x, y)\n    End Function\nEnd Class\n\nModule Example\n    Sub Main()\n        Dim values() = { Tuple.Create(13.54),\n                         Tuple.Create(Double.NaN),\n                         Tuple.Create(-189.42993),\n                         Tuple.Create(Double.PositiveInfinity),\n                         Tuple.Create(Double.Epsilon),\n                         Tuple.Create(1.934E-17),\n                         Tuple.Create(Double.NegativeInfinity),\n                         Tuple.Create(-0.000000000003588),\n                         Nothing}\n\n        Console.WriteLine(&quot;The values in unsorted order:&quot;)\n        For Each value As Tuple(Of Double) In values\n            If value IsNot Nothing Then\n                Console.WriteLine(&quot;   {0}&quot;, value.Item1)\n            Else\n                Console.WriteLine(&quot;   &lt;null&gt;&quot;)\n            End If\n        Next\n        Console.WriteLine()\n\n        Array.Sort(values, New DescendingComparer(Of Tuple(Of Double)))\n\n        Console.WriteLine(&quot;The values sorted in descending order:&quot;)\n        For Each value As Tuple(Of Double) In values\n            If value IsNot Nothing Then\n                Console.WriteLine(&quot;   {0}&quot;, value.Item1)\n            Else\n                Console.WriteLine(&quot;   &lt;null&gt;&quot;)\n            End If\n        Next\n    End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;      The values in unsorted order:\n&#39;         13.54\n&#39;         NaN\n&#39;         -189.42993\n&#39;         Infinity\n&#39;         4.94065645841247E-324\n&#39;         1.934E-17\n&#39;         -Infinity\n&#39;         -3.588E-12\n&#39;         &lt;null&gt;\n&#39;\n&#39;      The values sorted in descending order:\n&#39;         Infinity\n&#39;         13.54\n&#39;         1.934E-17\n&#39;         4.94065645841247E-324\n&#39;         -3.588E-12\n&#39;         -189.42993\n&#39;         -Infinity\n&#39;         NaN\n&#39;         &lt;null&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_1_System_Collections_IStructuralEquatable_Equals_System_Object_System_Collections_IEqualityComparer_\">\r\n    \r\n            <a id=\"System_Tuple_1_System_Collections_IStructuralEquatable_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IStructuralEquatable.Equals(Object,IEqualityComparer)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value that indicates whether the current <span class=\"xref\">stem.Tuple`1</span> object is equal to a specified object based on a specified comparison method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool IStructuralEquatable.Equals (object other, System.Collections.IEqualityComparer comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>other</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to compare with this instance.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that defines the method to use to evaluate whether the two objects are equal.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current instance is equal to the specified object; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.tuple-1\" data-linktype=\"relative-path\">Tuple&lt;T1&gt;</a> instance is cast to an <a class=\"xref\" href=\"system.collections.istructuralequatable\" data-linktype=\"relative-path\">IStructuralEquatable</a> interface.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.iequalitycomparer#System_Collections_IEqualityComparer_Equals_\" data-linktype=\"relative-path\">Equals</a> implementation is called only if <code>other</code> is not <code>null</code>, and if it can be successfully cast (in C#) or converted (in Visual Basic) to a <a class=\"xref\" href=\"system.tuple-1\" data-linktype=\"relative-path\">Tuple&lt;T1&gt;</a> object whose single component is of the same type as the current instance. The method is passed the <a class=\"xref\" href=\"system.tuple-1#System_Tuple_1_Item1_\" data-linktype=\"relative-path\">Item1</a> component of the current instance and the <a class=\"xref\" href=\"system.tuple-1#System_Tuple_1_Item1_\" data-linktype=\"relative-path\">Item1</a> component of the <a class=\"xref\" href=\"system.tuple-1\" data-linktype=\"relative-path\">Tuple&lt;T1&gt;</a> object represented by the <code>other</code> parameter.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines an <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> implementation that considers two floating-point values to be equal if they are approximately equal to each other (that is, if one value is within .01 percent of the other).  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple`1.Equals#2\">using System;\nusing System.Collections;\n\npublic class Tuple1Comparer : IEqualityComparer\n{\n   new public bool Equals(object x, object y)\n   {\n      // Check if x is a floating point type. If x is, then y is.\n      if (x is double | x is float)\n      {   \n         // Convert to Double values.\n         double dblX = (double) x;\n         double dblY = (double) y;\n         if (Double.IsNaN(dblX) | Double.IsInfinity(dblX) |\n             Double.IsNaN(dblY) | Double.IsInfinity(dblY)) \n            return dblX.Equals(dblY);   \n         else\n            return Math.Abs(dblX - dblY) &lt;= dblX * .0001;\n      }\n      else\n      {\n         return x.Equals(y);\n      }\n   }\n   \n   public int GetHashCode(object obj)\n   {\n      return obj.GetHashCode();\n   }\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      var doubleTuple1 = Tuple.Create(12.3455);\n\n      var doubleTuple2 = Tuple.Create(16.8912);\n      var doubleTuple3 = Tuple.Create(12.3449599);\n\n      // Compare first tuple with a Tuple&lt;double&gt; with a different value.\n      TestEquality(doubleTuple1, doubleTuple2);\n      //Compare first tuple with a Tuple&lt;double&gt; with the same value.\n      TestEquality(doubleTuple1, doubleTuple3);\n   }\n\n   private static void TestEquality(Tuple&lt;double&gt; tuple, object obj)\n   {\n      Console.WriteLine(&quot;{0} = {1}: {2}&quot;, tuple.ToString(),\n                                             obj.ToString(),\n                                             ((IStructuralEquatable)tuple).Equals(obj, new Tuple1Comparer()));\n   }\n}\n// The example displays the following output:\n//       (12.3455) = (16.8912): False\n//       (12.3455) = (12.3449599): True\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple`1.Equals#2\">Imports System.Collections\n\nPublic Class Tuple1Comparer : Implements IEqualityComparer\n   Public Overloads Function Equals(x As Object, y As Object) As Boolean _\n                   Implements IEqualityComparer.Equals\n      &#39; Check if x is a floating point type. If x is, then y is.\n      If TypeOf x Is Double Or TypeOf x Is Single Then   \n         &#39; Convert to Double values.\n         Dim dblX As Double = CDbl(x)\n         Dim dblY As Double = CDbl(y)\n         If Double.IsNan(dblX) Or Double.IsInfinity(dblX) Or _\n            Double.IsNan(dblY) Or Double.IsInfinity(dblY) Then\n            Return dblX.Equals(dblY)   \n         Else\n            Return Math.Abs(dblX - dblY) &lt;= dblY * .0001\n         End If\n      Else\n         Return x.Equals(y)\n      End If                    \n   End Function\n   \n   Public Overloads Function GetHashCode(obj As Object) As Integer _\n                   Implements IEqualityComparer.GetHashCode\n      Return obj.GetHashCode()\n   End Function\nEnd Class\n\nModule Example\n   Public Sub Main()\n      Dim doubleTuple1 = Tuple.Create(12.3455)\n\n      Dim doubleTuple2 = Tuple.Create(16.8912)\n      Dim doubleTuple3 = Tuple.Create(12.3449599)\n\n      &#39; Compare first tuple with a Tuple(Of Double) with a different value.\n      TestEquality(doubleTuple1, doubleTuple2)\n      &#39; Compare first tuple with a Tuple(Of Double) with the same value.\n      TestEquality(doubleTuple1, doubleTuple3)\n   End Sub\n\n   Private Sub TestEquality(tuple As Tuple(Of Double), obj As Object)\n      Try\n         Console.WriteLine(&quot;{0} = {1}: {2}&quot;, tuple.ToString(),\n                                             obj.ToString,\n                                             DirectCAst(tuple, IStructuralEquatable).Equals(obj, New Tuple1Comparer()))\n      \n      Catch e As ArgumentException\n         If obj.GetType.IsGenericType Then \n            If obj.GetType().Name = &quot;Tuple`1&quot; Then \n               Console.WriteLine(&quot;Cannot compare a Tuple(Of {0}) with a Tuple(Of {1}).&quot;, \n                              tuple.Item1.GetType().Name, obj.Item1.GetType().Name)\n            Else\n               Console.WriteLine(&quot;Cannot compare a {0} with a {1}.&quot;, tuple.GetType().Name, \n                                                                     obj.GetType().Name)\n            End If\n         Else\n            Console.WriteLine(&quot;Cannot compare a {0} with a {1}.&quot;, tuple.GetType().Name,\n                                                                  obj.GetType().Name)\n         End If\n      End Try\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       (12.3455) = (16.8912): False\n&#39;       (12.3455) = (12.3449599): True\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_1_System_Collections_IStructuralEquatable_GetHashCode_System_Collections_IEqualityComparer_\">\r\n    \r\n            <a id=\"System_Tuple_1_System_Collections_IStructuralEquatable_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IStructuralEquatable.GetHashCode(IEqualityComparer)</div>        \r\n          </div>\r\n    \r\n            <p>Calculates the hash code for the current <span class=\"xref\">stem.Tuple`1</span> object by using a specified computation method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">int IStructuralEquatable.GetHashCode (System.Collections.IEqualityComparer comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object whose <span class=\"xref\">stem.Collections.IEqualityComparer.GetHashCode*</span> method calculates the hash code of the current <span class=\"xref\">stem.Tuple`1</span> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer hash code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.tuple-1\" data-linktype=\"relative-path\">Tuple&lt;T1&gt;</a> instance is cast to an <a class=\"xref\" href=\"system.collections.istructuralequatable\" data-linktype=\"relative-path\">IStructuralEquatable</a> interface.  </p>\n<p> The method simply wraps a call to the <code>comparer</code> object&#39;s <a class=\"xref\" href=\"system.collections.iequalitycomparer#System_Collections_IEqualityComparer_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a> implementation.  </p>\n<p> The algorithm used to compute the hash code should return the same hash code for two <a class=\"xref\" href=\"system.tuple-1\" data-linktype=\"relative-path\">Tuple&lt;T1&gt;</a> objects that are considered to be equal.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_1_System_IComparable_CompareTo_System_Object_\">\r\n    \r\n            <a id=\"System_Tuple_1_System_IComparable_CompareTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IComparable.CompareTo(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Compares the current <span class=\"xref\">stem.Tuple`1</span> object to a specified object, and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">int IComparable.CompareTo (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare with the current instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A signed integer that indicates the relative position of this instance and <code>obj</code> in the sort order, as shown in the following table.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Description<br>\n </th></tr></thead><tbody><tr><td> A negative integer<br>\n </td><td> This instance precedes <code>obj</code>.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> This instance and <code>obj</code> have the same position in the sort order.<br>\n </td></tr><tr><td> A positive integer<br>\n </td><td> This instance follows <code>obj</code>.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>obj</code> is not a <span class=\"xref\">stem.Tuple`1</span> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.tuple-1\" data-linktype=\"relative-path\">Tuple&lt;T1&gt;</a> instance is cast to an <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface.  </p>\n<p> This method provides the <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> implementation for the <a class=\"xref\" href=\"system.tuple-1\" data-linktype=\"relative-path\">Tuple&lt;T1&gt;</a> class. Although the method can be called directly, it is most commonly called by the default overloads of collection sorting methods, such as <a class=\"xref\" href=\"system.array#System_Array_Sort_System_Array_\" data-linktype=\"relative-path\">System.Array.Sort(Array)</a> and <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Add_\" data-linktype=\"relative-path\">Add</a>, to order the members of a collection.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> The IComparable.CompareTo method is intended for use in sorting operations. It should not be used when the primary purpose of a comparison is to determine whether two objects are equal. To determine whether two objects are equal, call the <a class=\"xref\" href=\"system.tuple-1#System_Tuple_1_Equals_\" data-linktype=\"relative-path\">Equals</a> method.  </p>\n</div>\n<p> The IComparable.CompareTo method uses the default object  comparer.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an array of singletons whose component is a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> value. It displays the value of each tuple component in unsorted order, sorts the array, and then displays the values in sorted order. Note that the example does not directly call the IComparable.CompareTo method. This method is called implicitly by the <a class=\"xref\" href=\"system.array#System_Array_Sort_System_Array_\" data-linktype=\"relative-path\">Sort(Array)</a> method for each element in the array.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple`1.CompareTo#1\">using System;\n\nclass Example\n{\n   static void Main()\n   {\n      Tuple&lt;Double&gt;[] values = { Tuple.Create(13.54),\n                                 Tuple.Create(Double.NaN),\n                                 Tuple.Create(-189.42993),\n                                 Tuple.Create(Double.PositiveInfinity),\n                                 Tuple.Create(Double.Epsilon),\n                                 Tuple.Create(1.934E-17),\n                                 Tuple.Create(Double.NegativeInfinity),\n                                 Tuple.Create(-0.000000000003588),\n                                 null };\n      Console.WriteLine(&quot;The values in unsorted order:&quot;);\n      foreach (var value in values)\n         if (value != null)\n            Console.WriteLine(&quot;   {0}&quot;, value.Item1);\n         else\n            Console.WriteLine(&quot;   &lt;null&gt;&quot;);\n      Console.WriteLine();\n\n      Array.Sort(values);\n\n      Console.WriteLine(&quot;The values in sorted order:&quot;);\n      foreach (var value in values)\n         if (value != null)\n            Console.WriteLine(&quot;   {0}&quot;, value.Item1);\n         else\n            Console.WriteLine(&quot;   &lt;null&gt;&quot;);\n   }\n}\n// The example displays the following output:\n//      The values in unsorted order:\n//         13.54\n//         NaN\n//         -189.42993\n//         Infinity\n//         4.94065645841247E-324\n//         1.934E-17\n//         -Infinity\n//         -3.588E-12\n//\n//      The values in sorted order:\n//         NaN\n//         -Infinity\n//         -189.42993\n//         -3.588E-12\n//         4.94065645841247E-324\n//         1.934E-17\n//         13.54\n//         Infinity\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple`1.CompareTo#1\">Module Example\n    Sub Main()\n        Dim values() = { Tuple.Create(13.54),\n                         Tuple.Create(Double.NaN),\n                         Tuple.Create(-189.42993),\n                         Tuple.Create(Double.PositiveInfinity),\n                         Tuple.Create(Double.Epsilon),\n                         Tuple.Create(1.934E-17),\n                         Tuple.Create(Double.NegativeInfinity),\n                         Tuple.Create(-0.000000000003588),\n                         Nothing}\n\n        Console.WriteLine(&quot;The values in unsorted order:&quot;)\n        For Each value In values\n            If value IsNot Nothing Then\n                Console.WriteLine(&quot;   {0}&quot;, value.Item1)\n            Else\n                Console.WriteLine(&quot;   &lt;null&gt;&quot;)\n            End If\n        Next\n        Console.WriteLine()\n\n        Array.Sort(values)\n\n        Console.WriteLine(&quot;The values in sorted order:&quot;)\n        For Each value In values\n            If value IsNot Nothing Then\n                Console.WriteLine(&quot;   {0}&quot;, value.Item1)\n            Else\n                Console.WriteLine(&quot;   &lt;null&gt;&quot;)\n            End If\n        Next\n    End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;      The values in unsorted order:\n&#39;         13.54\n&#39;         NaN\n&#39;         -189.42993\n&#39;         Infinity\n&#39;         4.94065645841247E-324\n&#39;         1.934E-17\n&#39;         -Infinity\n&#39;         -3.588E-12\n&#39;         &lt;null&gt;\n&#39;\n&#39;      The values in sorted order:\n&#39;         &lt;null&gt;\n&#39;         NaN\n&#39;         -Infinity\n&#39;         -189.42993\n&#39;         -3.588E-12\n&#39;         4.94065645841247E-324\n&#39;         1.934E-17\n&#39;         13.54\n&#39;         Infinity\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Tuple-1.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Tuple-1.yml\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1&gt;\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1&gt;..ctor\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1&gt;.Equals\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1&gt;.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1&gt;.Item1\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1&gt;.IStructuralComparable.CompareTo\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1&gt;.IStructuralEquatable.Equals\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1&gt;.IStructuralEquatable.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1&gt;.IComparable.CompareTo\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1&gt;.ToString\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"07fa6a98-4c92-f517-d3a4-f3a451ef3e12\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System\\Tuple`1.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a 1-tuple, or singleton.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Tuple`1\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Tuple-1.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Tuple-1.yml","open_to_public_contributors":true,"api_name":["System.Tuple<T1>","System.Tuple<T1>..ctor","System.Tuple<T1>.Equals","System.Tuple<T1>.GetHashCode","System.Tuple<T1>.Item1","System.Tuple<T1>.IStructuralComparable.CompareTo","System.Tuple<T1>.IStructuralEquatable.Equals","System.Tuple<T1>.IStructuralEquatable.GetHashCode","System.Tuple<T1>.IComparable.CompareTo","System.Tuple<T1>.ToString"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Tuple`1","System::Tuple`1","System.Tuple`1.#ctor","System::Tuple`1::#ctor","System.Tuple`1.Equals","System::Tuple`1::Equals","System.Tuple`1.GetHashCode","System::Tuple`1::GetHashCode","System.Tuple`1.Item1","System::Tuple`1::Item1","System.Tuple`1.System#Collections#IStructuralComparable#CompareTo","System::Tuple`1::System#Collections#IStructuralComparable#CompareTo","System.Tuple`1.System#Collections#IStructuralEquatable#Equals","System::Tuple`1::System#Collections#IStructuralEquatable#Equals","System.Tuple`1.System#Collections#IStructuralEquatable#GetHashCode","System::Tuple`1::System#Collections#IStructuralEquatable#GetHashCode","System.Tuple`1.System#IComparable#CompareTo","System::Tuple`1::System#IComparable#CompareTo","System.Tuple`1.ToString","System::Tuple`1::ToString"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"07fa6a98-4c92-f517-d3a4-f3a451ef3e12","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System\\Tuple`1.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/Tuple`1.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Tuple<T1> class | Microsoft Docs","_op_ogTitle":"Tuple<T1> class","description":"Represents a 1-tuple, or singleton.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.Tuple`1","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.tuple-1","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.tuple-1","fileRelativePath":"System.Tuple-1.html"},"themesRelativePathToOutputRoot":"_themes/"}