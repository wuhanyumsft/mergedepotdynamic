{"content":"    \r\n    <h1 id=\"System_Security_Cryptography_Xml_EncryptedType\">\r\n      <span class=\"lang-csharp\">EncryptedType</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents the abstract base class from which the classes <a class=\"xref\" href=\"system.security.cryptography.xml.encrypteddata\" data-linktype=\"relative-path\">EncryptedData</a> and <a class=\"xref\" href=\"system.security.cryptography.xml.encryptedkey\" data-linktype=\"relative-path\">EncryptedKey</a> derive.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract class EncryptedType</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">EncryptedType</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The EncryptedType class represents the abstract base class from which the classes <a class=\"xref\" href=\"system.security.cryptography.xml.encrypteddata\" data-linktype=\"relative-path\">EncryptedData</a> and <a class=\"xref\" href=\"system.security.cryptography.xml.encryptedkey\" data-linktype=\"relative-path\">EncryptedKey</a> derive. These two classes contain the actual encrypted data or key information in XML encryption. To comply with XML encryption standards, you should use these two derived classes.  </p>\n<p> For more information on XML encryption standards, see <a href=\"http://www.w3.org/TR/xmlenc-core/\" data-linktype=\"external\">http://www.w3.org/TR/xmlenc-core/</a>.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_EncryptedType__ctor\" data-linktype=\"self-bookmark\">EncryptedType()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.xml.encryptedtype\" data-linktype=\"relative-path\">EncryptedType</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_EncryptedType_CipherData\" data-linktype=\"self-bookmark\">CipherData</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.security.cryptography.xml.cipherdata\" data-linktype=\"relative-path\">CipherData</a> value for an instance of an <a class=\"xref\" href=\"system.security.cryptography.xml.encryptedtype\" data-linktype=\"relative-path\">EncryptedType</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_EncryptedType_Encoding\" data-linktype=\"self-bookmark\">Encoding</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the <code>Encoding</code> attribute of an <a class=\"xref\" href=\"system.security.cryptography.xml.encryptedtype\" data-linktype=\"relative-path\">EncryptedType</a> instance in XML encryption.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_EncryptedType_EncryptionMethod\" data-linktype=\"self-bookmark\">EncryptionMethod</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the <code>&lt;EncryptionMethod&gt;</code> element for XML encryption.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_EncryptedType_EncryptionProperties\" data-linktype=\"self-bookmark\">EncryptionProperties</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the <code>&lt;EncryptionProperties&gt;</code> element in XML encryption.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_EncryptedType_Id\" data-linktype=\"self-bookmark\">Id</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the <code>Id</code> attribute of an <a class=\"xref\" href=\"system.security.cryptography.xml.encryptedtype\" data-linktype=\"relative-path\">EncryptedType</a> instance in XML encryption.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_EncryptedType_KeyInfo\" data-linktype=\"self-bookmark\">KeyInfo</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets of sets the <code>&lt;KeyInfo&gt;</code> element in XML encryption.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_EncryptedType_MimeType\" data-linktype=\"self-bookmark\">MimeType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the <code>MimeType</code> attribute of an <a class=\"xref\" href=\"system.security.cryptography.xml.encryptedtype\" data-linktype=\"relative-path\">EncryptedType</a> instance in XML encryption.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_EncryptedType_Type\" data-linktype=\"self-bookmark\">Type</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the <code>Type</code> attribute of an <a class=\"xref\" href=\"system.security.cryptography.xml.encryptedtype\" data-linktype=\"relative-path\">EncryptedType</a> instance in XML encryption.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_EncryptedType_AddProperty_System_Security_Cryptography_Xml_EncryptionProperty_\" data-linktype=\"self-bookmark\">AddProperty(EncryptionProperty)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds an <code>&lt;EncryptionProperty&gt;</code> child element to the <code>&lt;EncryptedProperties&gt;</code> element in the current <a class=\"xref\" href=\"system.security.cryptography.xml.encryptedtype\" data-linktype=\"relative-path\">EncryptedType</a> object in XML encryption.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_EncryptedType_GetXml\" data-linktype=\"self-bookmark\">GetXml()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the XML representation of the <a class=\"xref\" href=\"system.security.cryptography.xml.encryptedtype\" data-linktype=\"relative-path\">EncryptedType</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_EncryptedType_LoadXml_System_Xml_XmlElement_\" data-linktype=\"self-bookmark\">LoadXml(XmlElement)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads XML information into the <code>&lt;EncryptedType&gt;</code> element in XML encryption.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_EncryptedType__ctor\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_EncryptedType__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EncryptedType()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.xml.encryptedtype\" data-linktype=\"relative-path\">EncryptedType</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected EncryptedType ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor creates a new instance of the <a class=\"xref\" href=\"system.security.cryptography.xml.encryptedtype\" data-linktype=\"relative-path\">EncryptedType</a> class. This class represents the abstract base class from which the classes <a class=\"xref\" href=\"system.security.cryptography.xml.encrypteddata\" data-linktype=\"relative-path\">EncryptedData</a> and <a class=\"xref\" href=\"system.security.cryptography.xml.encryptedkey\" data-linktype=\"relative-path\">EncryptedKey</a> derive. To comply with XML encryption standards, you should use the two derived classes. For more information on XML encryption standards, see <a href=\"http://www.w3.org/TR/xmlenc-core/\" data-linktype=\"external\">http://www.w3.org/TR/xmlenc-core/</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to encrypt and decrypt an XML element using the <a class=\"xref\" href=\"system.security.cryptography.xml.encrypteddata\" data-linktype=\"relative-path\">EncryptedData</a> class that derives from the <a class=\"xref\" href=\"system.security.cryptography.xml.encryptedtype\" data-linktype=\"relative-path\">EncryptedType</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"Cryptography.XML-EncryptedData - EncryptedType#1\">using System;\nusing System.Xml;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n\n        // Create an XmlDocument object.\n        XmlDocument xmlDoc = new XmlDocument();\n\n        // Load an XML file into the XmlDocument object.\n        try\n        {\n            xmlDoc.PreserveWhitespace = true;\n            xmlDoc.Load(&quot;test.xml&quot;);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(e.Message);\n        }\n\n        // Create a new TripleDES key. \n        TripleDESCryptoServiceProvider tDESkey = new TripleDESCryptoServiceProvider();\n\n\n        try\n        {\n            // Encrypt the &quot;creditcard&quot; element.\n            Encrypt(xmlDoc, &quot;creditcard&quot;, tDESkey);\n\n            // Display the encrypted XML to the console.\n            Console.WriteLine(&quot;Encrypted XML:&quot;);\n            Console.WriteLine();\n            Console.WriteLine(xmlDoc.OuterXml);\n\n            // Decrypt the &quot;creditcard&quot; element.\n            Decrypt(xmlDoc, tDESkey);\n\n            // Display the encrypted XML to the console.\n            Console.WriteLine();\n            Console.WriteLine(&quot;Decrypted XML:&quot;);\n            Console.WriteLine();\n            Console.WriteLine(xmlDoc.OuterXml);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(e.Message);\n        }\n        finally\n        {\n            // Clear the TripleDES key.\n            tDESkey.Clear();\n        }\n\n    }\n\n    public static void Encrypt(XmlDocument Doc, string ElementToEncrypt, TripleDESCryptoServiceProvider Alg)\n    {\n\n        ////////////////////////////////////////////////\n        // Find the specified element in the XmlDocument\n        // object and create a new XmlElemnt object.\n        ////////////////////////////////////////////////\n\n        XmlElement elementToEncrypt = Doc.GetElementsByTagName(ElementToEncrypt)[0] as XmlElement;\n\n        // Throw an XmlException if the element was not found.\n        if (elementToEncrypt == null)\n        {\n            throw new XmlException(&quot;The specified element was not found&quot;);\n\n        }\n\n        //////////////////////////////////////////////////\n        // Create a new instance of the EncryptedXml class \n        // and use it to encrypt the XmlElement with the \n        // symmetric key.\n        //////////////////////////////////////////////////\n\n        EncryptedXml eXml = new EncryptedXml();\n\n        byte[] encryptedElement = eXml.EncryptData(elementToEncrypt, Alg, false);\n\n        ////////////////////////////////////////////////\n        // Construct an EncryptedData object and populate\n        // it with the desired encryption information.\n        ////////////////////////////////////////////////\n\n\n        EncryptedData edElement = new EncryptedData();\n        \n        edElement.Type = EncryptedXml.XmlEncElementUrl;\n\n  \n        // Create an EncryptionMethod element so that the \n        // receiver knows which algorithm to use for decryption.\n        // Determine what kind of algorithm is being used and\n        // supply the appropriate URL to the EncryptionMethod element.\n\n        edElement.EncryptionMethod = new EncryptionMethod(EncryptedXml.XmlEncTripleDESUrl);\n\n        // Add the encrypted element data to the \n        // EncryptedData object.\n        edElement.CipherData.CipherValue = encryptedElement;\n\n        ////////////////////////////////////////////////////\n        // Replace the element from the original XmlDocument\n        // object with the EncryptedData element.\n        ////////////////////////////////////////////////////\n\n        EncryptedXml.ReplaceElement(elementToEncrypt, edElement, false);\n\n    }\n\n    public static void Decrypt(XmlDocument Doc, SymmetricAlgorithm Alg)\n    {\n\n        // Find the EncryptedData element in the XmlDocument.\n        XmlElement encryptedElement = Doc.GetElementsByTagName(&quot;EncryptedData&quot;)[0] as XmlElement;\n\n        // If the EncryptedData element was not found, throw an exception.\n        if (encryptedElement == null)\n        {\n            throw new XmlException(&quot;The EncryptedData element was not found.&quot;);\n        }\n\n        // Create an EncryptedData object and populate it.\n        EncryptedData edElement = new EncryptedData();\n        edElement.LoadXml(encryptedElement);\n\n        // Create a new EncryptedXml object.\n        EncryptedXml exml = new EncryptedXml();\n\n        // Decrypt the element using the symmetric key.\n        byte[] rgbOutput = exml.DecryptData(edElement, Alg);\n\n        // Replace the encryptedData element with the plaintext XML element.\n        exml.ReplaceData(encryptedElement, rgbOutput);\n\n    }\n\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.XML-EncryptedData - EncryptedType#1\">Imports System\nImports System.Xml\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\n\n\n\nModule Program\n\n    Sub Main(ByVal args() As String)\n\n        &#39; Create an XmlDocument object.\n        Dim xmlDoc As New XmlDocument()\n\n        &#39; Load an XML file into the XmlDocument object.\n        Try\n            xmlDoc.PreserveWhitespace = True\n            xmlDoc.Load(&quot;test.xml&quot;)\n        Catch e As Exception\n            Console.WriteLine(e.Message)\n        End Try\n\n        &#39; Create a new TripleDES key. \n        Dim tDESkey As New TripleDESCryptoServiceProvider()\n\n\n        Try\n            &#39; Encrypt the &quot;creditcard&quot; element.\n            Encrypt(xmlDoc, &quot;creditcard&quot;, tDESkey)\n\n            &#39; Display the encrypted XML to the console.\n            Console.WriteLine(&quot;Encrypted XML:&quot;)\n            Console.WriteLine()\n            Console.WriteLine(xmlDoc.OuterXml)\n\n            &#39; Decrypt the &quot;creditcard&quot; element.\n            Decrypt(xmlDoc, tDESkey)\n\n            &#39; Display the encrypted XML to the console.\n            Console.WriteLine()\n            Console.WriteLine(&quot;Decrypted XML:&quot;)\n            Console.WriteLine()\n            Console.WriteLine(xmlDoc.OuterXml)\n        Catch e As Exception\n            Console.WriteLine(e.Message)\n        Finally\n            &#39; Clear the TripleDES key.\n            tDESkey.Clear()\n        End Try\n\n    End Sub\n\n\n    Sub Encrypt(ByVal Doc As XmlDocument, ByVal ElementToEncryptString As String, ByVal Alg As TripleDESCryptoServiceProvider)\n\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; Find the specified element in the XmlDocument\n        &#39; object and create a new XmlElemnt object.\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n\n        Dim elementToEncrypt As XmlElement = Doc.GetElementsByTagName(ElementToEncryptString)(0)\n\n\n        &#39; Throw an XmlException if the element was not found.\n        If elementToEncrypt Is Nothing Then\n            Throw New XmlException(&quot;The specified element was not found&quot;)\n        End If\n\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; Create a new instance of the EncryptedXml class \n        &#39; and use it to encrypt the XmlElement with the \n        &#39; symmetric key.\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n\n        Dim eXml As New EncryptedXml()\n\n        Dim encryptedElement As Byte() = eXml.EncryptData(elementToEncrypt, Alg, False)\n\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; Construct an EncryptedData object and populate\n        &#39; it with the desired encryption information.\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n\n        Dim edElement As New EncryptedData()\n\n        edElement.Type = EncryptedXml.XmlEncElementUrl\n\n\n        &#39; Create an EncryptionMethod element so that the \n        &#39; receiver knows which algorithm to use for decryption.\n        &#39; Determine what kind of algorithm is being used and\n        &#39; supply the appropriate URL to the EncryptionMethod element.\n        edElement.EncryptionMethod = New EncryptionMethod(EncryptedXml.XmlEncTripleDESUrl)\n\n        &#39; Add the encrypted element data to the \n        &#39; EncryptedData object.\n        edElement.CipherData.CipherValue = encryptedElement\n\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; Replace the element from the original XmlDocument\n        &#39; object with the EncryptedData element.\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        EncryptedXml.ReplaceElement(elementToEncrypt, edElement, False)\n\n    End Sub\n\n\n    Sub Decrypt(ByVal Doc As XmlDocument, ByVal Alg As SymmetricAlgorithm)\n\n        &#39; Find the EncryptedData element in the XmlDocument.\n        Dim encryptedElement As XmlElement = Doc.GetElementsByTagName(&quot;EncryptedData&quot;)(0) \n   \n\n        &#39; If the EncryptedData element was not found, throw an exception.\n        If encryptedElement Is Nothing Then\n            Throw New XmlException(&quot;The EncryptedData element was not found.&quot;)\n        End If\n\n        &#39; Create an EncryptedData object and populate it.\n        Dim edElement As New EncryptedData()\n        edElement.LoadXml(encryptedElement)\n\n        &#39; Create a new EncryptedXml object.\n        Dim exml As New EncryptedXml()\n\n        &#39; Decrypt the element using the symmetric key.\n        Dim rgbOutput As Byte() = exml.DecryptData(edElement, Alg)\n\n        &#39; Replace the encryptedData element with the plaintext XML element.\n        exml.ReplaceData(encryptedElement, rgbOutput)\n\n    End Sub\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_EncryptedType_CipherData\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_EncryptedType_CipherData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CipherData</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.security.cryptography.xml.cipherdata\" data-linktype=\"relative-path\">CipherData</a> value for an instance of an <a class=\"xref\" href=\"system.security.cryptography.xml.encryptedtype\" data-linktype=\"relative-path\">EncryptedType</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Security.Cryptography.Xml.CipherData CipherData { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.cipherdata\" data-linktype=\"relative-path\">CipherData</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.security.cryptography.xml.cipherdata\" data-linktype=\"relative-path\">CipherData</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The CipherData property was set to <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>&lt;CipherData&gt;</code> element is a required element in XML encryption that provides the encrypted data. It must either contain the encrypted octet sequence as the base64-encoded text of the <a class=\"xref\" href=\"system.security.cryptography.xml.cipherdata#System_Security_Cryptography_Xml_CipherData_CipherValue_\" data-linktype=\"relative-path\">CipherValue</a> property, or provide a reference to an external location containing the encrypted octet sequence using the <a class=\"xref\" href=\"system.security.cryptography.xml.cipherdata#System_Security_Cryptography_Xml_CipherData_CipherReference_\" data-linktype=\"relative-path\">CipherReference</a> property.  </p>\n<p> For more information about this element, see <a class=\"xref\" href=\"system.security.cryptography.xml.cipherdata\" data-linktype=\"relative-path\">CipherData</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to encrypt and decrypt an XML element using the <a class=\"xref\" href=\"system.security.cryptography.xml.encrypteddata\" data-linktype=\"relative-path\">EncryptedData</a> class that derives from the <a class=\"xref\" href=\"system.security.cryptography.xml.encryptedtype\" data-linktype=\"relative-path\">EncryptedType</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"Cryptography.XML-EncryptedData - EncryptedType#1\">using System;\nusing System.Xml;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n\n        // Create an XmlDocument object.\n        XmlDocument xmlDoc = new XmlDocument();\n\n        // Load an XML file into the XmlDocument object.\n        try\n        {\n            xmlDoc.PreserveWhitespace = true;\n            xmlDoc.Load(&quot;test.xml&quot;);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(e.Message);\n        }\n\n        // Create a new TripleDES key. \n        TripleDESCryptoServiceProvider tDESkey = new TripleDESCryptoServiceProvider();\n\n\n        try\n        {\n            // Encrypt the &quot;creditcard&quot; element.\n            Encrypt(xmlDoc, &quot;creditcard&quot;, tDESkey);\n\n            // Display the encrypted XML to the console.\n            Console.WriteLine(&quot;Encrypted XML:&quot;);\n            Console.WriteLine();\n            Console.WriteLine(xmlDoc.OuterXml);\n\n            // Decrypt the &quot;creditcard&quot; element.\n            Decrypt(xmlDoc, tDESkey);\n\n            // Display the encrypted XML to the console.\n            Console.WriteLine();\n            Console.WriteLine(&quot;Decrypted XML:&quot;);\n            Console.WriteLine();\n            Console.WriteLine(xmlDoc.OuterXml);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(e.Message);\n        }\n        finally\n        {\n            // Clear the TripleDES key.\n            tDESkey.Clear();\n        }\n\n    }\n\n    public static void Encrypt(XmlDocument Doc, string ElementToEncrypt, TripleDESCryptoServiceProvider Alg)\n    {\n\n        ////////////////////////////////////////////////\n        // Find the specified element in the XmlDocument\n        // object and create a new XmlElemnt object.\n        ////////////////////////////////////////////////\n\n        XmlElement elementToEncrypt = Doc.GetElementsByTagName(ElementToEncrypt)[0] as XmlElement;\n\n        // Throw an XmlException if the element was not found.\n        if (elementToEncrypt == null)\n        {\n            throw new XmlException(&quot;The specified element was not found&quot;);\n\n        }\n\n        //////////////////////////////////////////////////\n        // Create a new instance of the EncryptedXml class \n        // and use it to encrypt the XmlElement with the \n        // symmetric key.\n        //////////////////////////////////////////////////\n\n        EncryptedXml eXml = new EncryptedXml();\n\n        byte[] encryptedElement = eXml.EncryptData(elementToEncrypt, Alg, false);\n\n        ////////////////////////////////////////////////\n        // Construct an EncryptedData object and populate\n        // it with the desired encryption information.\n        ////////////////////////////////////////////////\n\n\n        EncryptedData edElement = new EncryptedData();\n        \n        edElement.Type = EncryptedXml.XmlEncElementUrl;\n\n  \n        // Create an EncryptionMethod element so that the \n        // receiver knows which algorithm to use for decryption.\n        // Determine what kind of algorithm is being used and\n        // supply the appropriate URL to the EncryptionMethod element.\n\n        edElement.EncryptionMethod = new EncryptionMethod(EncryptedXml.XmlEncTripleDESUrl);\n\n        // Add the encrypted element data to the \n        // EncryptedData object.\n        edElement.CipherData.CipherValue = encryptedElement;\n\n        ////////////////////////////////////////////////////\n        // Replace the element from the original XmlDocument\n        // object with the EncryptedData element.\n        ////////////////////////////////////////////////////\n\n        EncryptedXml.ReplaceElement(elementToEncrypt, edElement, false);\n\n    }\n\n    public static void Decrypt(XmlDocument Doc, SymmetricAlgorithm Alg)\n    {\n\n        // Find the EncryptedData element in the XmlDocument.\n        XmlElement encryptedElement = Doc.GetElementsByTagName(&quot;EncryptedData&quot;)[0] as XmlElement;\n\n        // If the EncryptedData element was not found, throw an exception.\n        if (encryptedElement == null)\n        {\n            throw new XmlException(&quot;The EncryptedData element was not found.&quot;);\n        }\n\n        // Create an EncryptedData object and populate it.\n        EncryptedData edElement = new EncryptedData();\n        edElement.LoadXml(encryptedElement);\n\n        // Create a new EncryptedXml object.\n        EncryptedXml exml = new EncryptedXml();\n\n        // Decrypt the element using the symmetric key.\n        byte[] rgbOutput = exml.DecryptData(edElement, Alg);\n\n        // Replace the encryptedData element with the plaintext XML element.\n        exml.ReplaceData(encryptedElement, rgbOutput);\n\n    }\n\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.XML-EncryptedData - EncryptedType#1\">Imports System\nImports System.Xml\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\n\n\n\nModule Program\n\n    Sub Main(ByVal args() As String)\n\n        &#39; Create an XmlDocument object.\n        Dim xmlDoc As New XmlDocument()\n\n        &#39; Load an XML file into the XmlDocument object.\n        Try\n            xmlDoc.PreserveWhitespace = True\n            xmlDoc.Load(&quot;test.xml&quot;)\n        Catch e As Exception\n            Console.WriteLine(e.Message)\n        End Try\n\n        &#39; Create a new TripleDES key. \n        Dim tDESkey As New TripleDESCryptoServiceProvider()\n\n\n        Try\n            &#39; Encrypt the &quot;creditcard&quot; element.\n            Encrypt(xmlDoc, &quot;creditcard&quot;, tDESkey)\n\n            &#39; Display the encrypted XML to the console.\n            Console.WriteLine(&quot;Encrypted XML:&quot;)\n            Console.WriteLine()\n            Console.WriteLine(xmlDoc.OuterXml)\n\n            &#39; Decrypt the &quot;creditcard&quot; element.\n            Decrypt(xmlDoc, tDESkey)\n\n            &#39; Display the encrypted XML to the console.\n            Console.WriteLine()\n            Console.WriteLine(&quot;Decrypted XML:&quot;)\n            Console.WriteLine()\n            Console.WriteLine(xmlDoc.OuterXml)\n        Catch e As Exception\n            Console.WriteLine(e.Message)\n        Finally\n            &#39; Clear the TripleDES key.\n            tDESkey.Clear()\n        End Try\n\n    End Sub\n\n\n    Sub Encrypt(ByVal Doc As XmlDocument, ByVal ElementToEncryptString As String, ByVal Alg As TripleDESCryptoServiceProvider)\n\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; Find the specified element in the XmlDocument\n        &#39; object and create a new XmlElemnt object.\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n\n        Dim elementToEncrypt As XmlElement = Doc.GetElementsByTagName(ElementToEncryptString)(0)\n\n\n        &#39; Throw an XmlException if the element was not found.\n        If elementToEncrypt Is Nothing Then\n            Throw New XmlException(&quot;The specified element was not found&quot;)\n        End If\n\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; Create a new instance of the EncryptedXml class \n        &#39; and use it to encrypt the XmlElement with the \n        &#39; symmetric key.\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n\n        Dim eXml As New EncryptedXml()\n\n        Dim encryptedElement As Byte() = eXml.EncryptData(elementToEncrypt, Alg, False)\n\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; Construct an EncryptedData object and populate\n        &#39; it with the desired encryption information.\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n\n        Dim edElement As New EncryptedData()\n\n        edElement.Type = EncryptedXml.XmlEncElementUrl\n\n\n        &#39; Create an EncryptionMethod element so that the \n        &#39; receiver knows which algorithm to use for decryption.\n        &#39; Determine what kind of algorithm is being used and\n        &#39; supply the appropriate URL to the EncryptionMethod element.\n        edElement.EncryptionMethod = New EncryptionMethod(EncryptedXml.XmlEncTripleDESUrl)\n\n        &#39; Add the encrypted element data to the \n        &#39; EncryptedData object.\n        edElement.CipherData.CipherValue = encryptedElement\n\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; Replace the element from the original XmlDocument\n        &#39; object with the EncryptedData element.\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        EncryptedXml.ReplaceElement(elementToEncrypt, edElement, False)\n\n    End Sub\n\n\n    Sub Decrypt(ByVal Doc As XmlDocument, ByVal Alg As SymmetricAlgorithm)\n\n        &#39; Find the EncryptedData element in the XmlDocument.\n        Dim encryptedElement As XmlElement = Doc.GetElementsByTagName(&quot;EncryptedData&quot;)(0) \n   \n\n        &#39; If the EncryptedData element was not found, throw an exception.\n        If encryptedElement Is Nothing Then\n            Throw New XmlException(&quot;The EncryptedData element was not found.&quot;)\n        End If\n\n        &#39; Create an EncryptedData object and populate it.\n        Dim edElement As New EncryptedData()\n        edElement.LoadXml(encryptedElement)\n\n        &#39; Create a new EncryptedXml object.\n        Dim exml As New EncryptedXml()\n\n        &#39; Decrypt the element using the symmetric key.\n        Dim rgbOutput As Byte() = exml.DecryptData(edElement, Alg)\n\n        &#39; Replace the encryptedData element with the plaintext XML element.\n        exml.ReplaceData(encryptedElement, rgbOutput)\n\n    End Sub\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_EncryptedType_Encoding\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_EncryptedType_Encoding_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Encoding</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the <code>Encoding</code> attribute of an <a class=\"xref\" href=\"system.security.cryptography.xml.encryptedtype\" data-linktype=\"relative-path\">EncryptedType</a> instance in XML encryption.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string Encoding { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that describes the encoding of the encrypted data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property describes the encoding of the encrypted data. For example, if the encrypted data is a base64-encoded PNG, the encoding could be specified as &#39;<a href=\"http://www.w3.org/2000/09/xmldsig#base64\" data-linktype=\"external\">http://www.w3.org/2000/09/xmldsig#base64</a>&#39;.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to encrypt and decrypt an XML element using the <a class=\"xref\" href=\"system.security.cryptography.xml.encrypteddata\" data-linktype=\"relative-path\">EncryptedData</a> class that derives from the <a class=\"xref\" href=\"system.security.cryptography.xml.encryptedtype\" data-linktype=\"relative-path\">EncryptedType</a> class. This sample then displays various properties of the <a class=\"xref\" href=\"system.security.cryptography.xml.encrypteddata\" data-linktype=\"relative-path\">EncryptedData</a> class to the console.  </p>\n<pre><code class=\"lang-vb\" name=\"Cryptography.XML.EncryptedData#1\">Imports System\nImports System.Xml\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\n\n\n\nModule Program\n\n    Sub Main(ByVal args() As String)\n\n        &#39; Create an XmlDocument object.\n        Dim xmlDoc As New XmlDocument()\n\n        &#39; Load an XML file into the XmlDocument object.\n        Try\n            xmlDoc.PreserveWhitespace = True\n            xmlDoc.Load(&quot;test.xml&quot;)\n        Catch e As Exception\n            Console.WriteLine(e.Message)\n        End Try\n\n        &#39; Create a new RSA key.  This key will encrypt a symmetric key,\n        &#39; which will then be imbedded in the XML document.  \n        Dim rsaKey As New RSACryptoServiceProvider()\n\n\n        Try\n            &#39; Encrypt the &quot;creditcard&quot; element.\n            Encrypt(xmlDoc, &quot;creditcard&quot;, rsaKey, &quot;rsaKey&quot;)\n\n            &#39; Inspect the EncryptedKey element.\n            InspectElement(xmlDoc)\n\n            &#39; Decrypt the &quot;creditcard&quot; element.\n            Decrypt(xmlDoc, rsaKey, &quot;rsaKey&quot;)\n\n        Catch e As Exception\n            Console.WriteLine(e.Message)\n        Finally\n            &#39; Clear the RSA key.\n            rsaKey.Clear()\n        End Try\n\n    End Sub\n\n\n    Sub Encrypt(ByVal Doc As XmlDocument, ByVal ElementToEncryptParam As String, ByVal Alg As RSA, ByVal KeyName As String)\n        &#39; Check the arguments.  \n        If Doc Is Nothing Then\n            Throw New ArgumentNullException(&quot;Doc&quot;)\n        End If\n        If ElementToEncryptParam Is Nothing Then\n            Throw New ArgumentNullException(&quot;ElementToEncrypt&quot;)\n        End If\n        If Alg Is Nothing Then\n            Throw New ArgumentNullException(&quot;Alg&quot;)\n        End If\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; Find the specified element in the XmlDocument\n        &#39; object and create a new XmlElemnt object.\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        Dim elementToEncrypt As XmlElement = Doc.GetElementsByTagName(ElementToEncryptParam)(0)\n\n\n        &#39; Throw an XmlException if the element was not found.\n        If elementToEncrypt Is Nothing Then\n            Throw New XmlException(&quot;The specified element was not found&quot;)\n        End If\n\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; Create a new instance of the EncryptedXml class \n        &#39; and use it to encrypt the XmlElement with the \n        &#39; a new random symmetric key.\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; Create a 256 bit Rijndael key.\n        Dim sessionKey As New RijndaelManaged()\n        sessionKey.KeySize = 256\n\n        Dim eXml As New EncryptedXml()\n\n        Dim encryptedElement As Byte() = eXml.EncryptData(elementToEncrypt, sessionKey, False)\n\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; Construct an EncryptedData object and populate\n        &#39; it with the desired encryption information.\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n\n        Dim edElement As New EncryptedData()\n        edElement.Type = EncryptedXml.XmlEncElementUrl\n\n        &#39; Create an EncryptionMethod element so that the \n        &#39; receiver knows which algorithm to use for decryption.\n        edElement.EncryptionMethod = New EncryptionMethod(EncryptedXml.XmlEncAES256Url)\n\n        &#39; Encrypt the session key and add it to an EncryptedKey element.\n        Dim ek As New EncryptedKey()\n\n        Dim encryptedKey As Byte() = EncryptedXml.EncryptKey(sessionKey.Key, Alg, False)\n\n        ek.CipherData = New CipherData(encryptedKey)\n\n        ek.EncryptionMethod = New EncryptionMethod(EncryptedXml.XmlEncRSA15Url)\n\n        &#39; Set the KeyInfo element to specify the\n        &#39; name of the RSA key.\n        &#39; Create a new KeyInfo element.\n        edElement.KeyInfo = New KeyInfo()\n\n        &#39; Create a new KeyInfoName element.\n        Dim kin As New KeyInfoName()\n\n        &#39; Specify a name for the key.\n        kin.Value = KeyName\n\n        &#39; Add the KeyInfoName element to the \n        &#39; EncryptedKey object.\n        ek.KeyInfo.AddClause(kin)\n\n        &#39; Add the encrypted key to the \n        &#39; EncryptedData object.\n        edElement.KeyInfo.AddClause(New KeyInfoEncryptedKey(ek))\n\n        &#39; Add the encrypted element data to the \n        &#39; EncryptedData object.\n        edElement.CipherData.CipherValue = encryptedElement\n\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; Replace the element from the original XmlDocument\n        &#39; object with the EncryptedData element.\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        EncryptedXml.ReplaceElement(elementToEncrypt, edElement, False)\n\n    End Sub\n\n\n    Sub Decrypt(ByVal Doc As XmlDocument, ByVal Alg As RSA, ByVal KeyName As String)\n        &#39; Check the arguments.  \n        If Doc Is Nothing Then\n            Throw New ArgumentNullException(&quot;Doc&quot;)\n        End If\n        If Alg Is Nothing Then\n            Throw New ArgumentNullException(&quot;Alg&quot;)\n        End If\n        If KeyName Is Nothing Then\n            Throw New ArgumentNullException(&quot;KeyName&quot;)\n        End If\n        &#39; Create a new EncryptedXml object.\n        Dim exml As New EncryptedXml(Doc)\n\n        &#39; Add a key-name mapping.\n        &#39; This method can only decrypt documents\n        &#39; that present the specified key name.\n        exml.AddKeyNameMapping(KeyName, Alg)\n\n        &#39; Decrypt the element.\n        exml.DecryptDocument()\n\n    End Sub\n\n\n    Sub InspectElement(ByVal Doc As XmlDocument)\n        &#39; Get the EncryptedData element from the XMLDocument object.\n        Dim encryptedData As XmlElement = Doc.GetElementsByTagName(&quot;EncryptedData&quot;)(0)\n\n        &#39; Create a new EncryptedData object.\n        Dim encData As New EncryptedData()\n\n        &#39; Load the XML from the document to\n        &#39; initialize the EncryptedData object.\n        encData.LoadXml(encryptedData)\n\n        &#39; Display the properties.\n        &#39; Most values are Null by default.\n\n\n        Console.WriteLine(&quot;EncryptedData.CipherData: &quot; + encData.CipherData.GetXml().InnerXml)\n        Console.WriteLine(&quot;EncryptedData.Encoding: &quot; + encData.Encoding)\n        Console.WriteLine(&quot;EncryptedData.EncryptionMethod: &quot; + encData.EncryptionMethod.GetXml().InnerXml)\n        If encData.EncryptionProperties.Count &gt;= 1 Then\n            Console.WriteLine(&quot;EncryptedData.EncryptionProperties: &quot; + encData.EncryptionProperties(0).GetXml().InnerXml)\n        End If\n\n        Console.WriteLine(&quot;EncryptedData.Id: &quot; + encData.Id)\n        Console.WriteLine(&quot;EncryptedData.KeyInfo: &quot; + encData.KeyInfo.GetXml().InnerXml)\n        Console.WriteLine(&quot;EncryptedData.MimeType: &quot; + encData.MimeType)\n\n    End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"Cryptography.XML.EncryptedData#1\">using System;\nusing System.Xml;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\n\nclass Program\n{\n\tstatic void Main(string[] args)\n\t{\n\n\t\t// Create an XmlDocument object.\n\t\tXmlDocument xmlDoc = new XmlDocument();\n\n\t\t// Load an XML file into the XmlDocument object.\n\t\ttry\n\t\t{\n\t\t\txmlDoc.PreserveWhitespace = true;\n\t\t\txmlDoc.Load(&quot;test.xml&quot;);\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\tConsole.WriteLine(e.Message);\n\t\t}\n\n\t\t// Create a new RSA key.  This key will encrypt a symmetric key,\n\t\t// which will then be imbedded in the XML document.  \n\t\tRSA rsaKey = new RSACryptoServiceProvider();\n\n\n\t\ttry\n\t\t{\n\t\t\t// Encrypt the &quot;creditcard&quot; element.\n\t\t\tEncrypt(xmlDoc, &quot;creditcard&quot;, rsaKey, &quot;rsaKey&quot;);\n\n\t\t\t// Inspect the EncryptedKey element.\n\t\t\tInspectElement(xmlDoc);\n\n\t\t\t// Decrypt the &quot;creditcard&quot; element.\n\t\t\tDecrypt(xmlDoc, rsaKey, &quot;rsaKey&quot;);\n\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\tConsole.WriteLine(e.Message);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\t// Clear the RSA key.\n\t\t\trsaKey.Clear();\n\t\t}\n\n\t}\n\n\tpublic static void Encrypt(XmlDocument Doc, string ElementToEncrypt, RSA Alg, string KeyName)\n\t{\n\t\t// Check the arguments.  \n\t\tif (Doc == null)\n\t\t\tthrow new ArgumentNullException(&quot;Doc&quot;);\n\t\tif (ElementToEncrypt == null)\n\t\t\tthrow new ArgumentNullException(&quot;ElementToEncrypt&quot;);\n\t\tif (Alg == null)\n\t\t\tthrow new ArgumentNullException(&quot;Alg&quot;);\n\n\t\t////////////////////////////////////////////////\n\t\t// Find the specified element in the XmlDocument\n\t\t// object and create a new XmlElemnt object.\n\t\t////////////////////////////////////////////////\n\n\t\tXmlElement elementToEncrypt = Doc.GetElementsByTagName(ElementToEncrypt)[0] as XmlElement;\n\n\t\t// Throw an XmlException if the element was not found.\n\t\tif (elementToEncrypt == null)\n\t\t{\n\t\t\tthrow new XmlException(&quot;The specified element was not found&quot;);\n\n\t\t}\n\n\t\t//////////////////////////////////////////////////\n\t\t// Create a new instance of the EncryptedXml class \n\t\t// and use it to encrypt the XmlElement with the \n\t\t// a new random symmetric key.\n\t\t//////////////////////////////////////////////////\n\n\t\t// Create a 256 bit Rijndael key.\n\t\tRijndaelManaged sessionKey = new RijndaelManaged();\n\t\tsessionKey.KeySize = 256;\n\n\t\tEncryptedXml eXml = new EncryptedXml();\n\n\t\tbyte[] encryptedElement = eXml.EncryptData(elementToEncrypt, sessionKey, false);\n\n\t\t////////////////////////////////////////////////\n\t\t// Construct an EncryptedData object and populate\n\t\t// it with the desired encryption information.\n\t\t////////////////////////////////////////////////\n\n\n\t\tEncryptedData edElement = new EncryptedData();\n\t\tedElement.Type = EncryptedXml.XmlEncElementUrl;\n\n\t\t// Create an EncryptionMethod element so that the \n\t\t// receiver knows which algorithm to use for decryption.\n\n\t\tedElement.EncryptionMethod = new EncryptionMethod(EncryptedXml.XmlEncAES256Url);\n\n\t\t// Encrypt the session key and add it to an EncryptedKey element.\n\t\tEncryptedKey ek = new EncryptedKey();\n\n\t\tbyte[] encryptedKey = EncryptedXml.EncryptKey(sessionKey.Key, Alg, false);\n\n\t\tek.CipherData = new CipherData(encryptedKey);\n\n\t\tek.EncryptionMethod = new EncryptionMethod(EncryptedXml.XmlEncRSA15Url);\n\n\t\t// Set the KeyInfo element to specify the\n\t\t// name of the RSA key.\n\n\t\t// Create a new KeyInfo element.\n\t\tedElement.KeyInfo = new KeyInfo();\n\n\t\t// Create a new KeyInfoName element.\n\t\tKeyInfoName kin = new KeyInfoName();\n\n\t\t// Specify a name for the key.\n\t\tkin.Value = KeyName;\n\n\t\t// Add the KeyInfoName element to the \n\t\t// EncryptedKey object.\n\t\tek.KeyInfo.AddClause(kin);\n\n\t\t// Add the encrypted key to the \n\t\t// EncryptedData object.\n\n\t\tedElement.KeyInfo.AddClause(new KeyInfoEncryptedKey(ek));\n\n\t\t// Add the encrypted element data to the \n\t\t// EncryptedData object.\n\t\tedElement.CipherData.CipherValue = encryptedElement;\n\n\t\t////////////////////////////////////////////////////\n\t\t// Replace the element from the original XmlDocument\n\t\t// object with the EncryptedData element.\n\t\t////////////////////////////////////////////////////\n\n\t\tEncryptedXml.ReplaceElement(elementToEncrypt, edElement, false);\n\n\t}\n\n\tpublic static void Decrypt(XmlDocument Doc, RSA Alg, string KeyName)\n\t{\n\t\t// Check the arguments.  \n\t\tif (Doc == null)\n\t\t\tthrow new ArgumentNullException(&quot;Doc&quot;);\n\t\tif (Alg == null)\n\t\t\tthrow new ArgumentNullException(&quot;Alg&quot;);\n\t\tif (KeyName == null)\n\t\t\tthrow new ArgumentNullException(&quot;KeyName&quot;);\n\n\t\t// Create a new EncryptedXml object.\n\t\tEncryptedXml exml = new EncryptedXml(Doc);\n\n\t\t// Add a key-name mapping.\n\t\t// This method can only decrypt documents\n\t\t// that present the specified key name.\n\t\texml.AddKeyNameMapping(KeyName, Alg);\n\n\t\t// Decrypt the element.\n\t\texml.DecryptDocument();\n\n\t}\n\n\tstatic void InspectElement(XmlDocument Doc)\n\t{\n\t\t// Get the EncryptedData element from the XMLDocument object.\n\t\tXmlElement encryptedData = Doc.GetElementsByTagName(&quot;EncryptedData&quot;)[0] as XmlElement;\n\n\t\t// Create a new EncryptedData object.\n\t\tEncryptedData encData = new EncryptedData();\n\n\t\t// Load the XML from the document to\n\t\t// initialize the EncryptedData object.\n\t\tencData.LoadXml(encryptedData);\n\n\t\t// Display the properties.\n\t\t// Most values are Null by default.\n\n\n\t\t\n\t\tConsole.WriteLine(&quot;EncryptedData.CipherData: &quot; + encData.CipherData.GetXml().InnerXml);\n\t\tConsole.WriteLine(&quot;EncryptedData.Encoding: &quot; + encData.Encoding);\n\t\tConsole.WriteLine(&quot;EncryptedData.EncryptionMethod: &quot; + encData.EncryptionMethod.GetXml().InnerXml);\n\t\tif (encData.EncryptionProperties.Count &gt;= 1)\n\t\t{\n\t\t\tConsole.WriteLine(&quot;EncryptedData.EncryptionProperties: &quot; + encData.EncryptionProperties[0].GetXml().InnerXml);\n\t\t}\n\n\t\tConsole.WriteLine(&quot;EncryptedData.Id: &quot; + encData.Id);\n\t\tConsole.WriteLine(&quot;EncryptedData.KeyInfo: &quot; + encData.KeyInfo.GetXml().InnerXml);\n\t\tConsole.WriteLine(&quot;EncryptedData.MimeType: &quot; + encData.MimeType);\n\t}\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_EncryptedType_EncryptionMethod\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_EncryptedType_EncryptionMethod_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EncryptionMethod</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the <code>&lt;EncryptionMethod&gt;</code> element for XML encryption.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Security.Cryptography.Xml.EncryptionMethod EncryptionMethod { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.encryptionmethod\" data-linktype=\"relative-path\">EncryptionMethod</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.security.cryptography.xml.encryptionmethod\" data-linktype=\"relative-path\">EncryptionMethod</a> object that represents the <code>&lt;EncryptionMethod&gt;</code> element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>&lt;EncryptionMethod&gt;</code> is an optional element that describes the encryption algorithm applied to the encrypted data. If the element is absent, the encryption algorithm must be known by the recipient or decryption will fail.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to encrypt and decrypt an XML element using the <a class=\"xref\" href=\"system.security.cryptography.xml.encrypteddata\" data-linktype=\"relative-path\">EncryptedData</a> class that derives from the <a class=\"xref\" href=\"system.security.cryptography.xml.encryptedtype\" data-linktype=\"relative-path\">EncryptedType</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"Cryptography.XML-EncryptedData - EncryptedType#1\">using System;\nusing System.Xml;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n\n        // Create an XmlDocument object.\n        XmlDocument xmlDoc = new XmlDocument();\n\n        // Load an XML file into the XmlDocument object.\n        try\n        {\n            xmlDoc.PreserveWhitespace = true;\n            xmlDoc.Load(&quot;test.xml&quot;);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(e.Message);\n        }\n\n        // Create a new TripleDES key. \n        TripleDESCryptoServiceProvider tDESkey = new TripleDESCryptoServiceProvider();\n\n\n        try\n        {\n            // Encrypt the &quot;creditcard&quot; element.\n            Encrypt(xmlDoc, &quot;creditcard&quot;, tDESkey);\n\n            // Display the encrypted XML to the console.\n            Console.WriteLine(&quot;Encrypted XML:&quot;);\n            Console.WriteLine();\n            Console.WriteLine(xmlDoc.OuterXml);\n\n            // Decrypt the &quot;creditcard&quot; element.\n            Decrypt(xmlDoc, tDESkey);\n\n            // Display the encrypted XML to the console.\n            Console.WriteLine();\n            Console.WriteLine(&quot;Decrypted XML:&quot;);\n            Console.WriteLine();\n            Console.WriteLine(xmlDoc.OuterXml);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(e.Message);\n        }\n        finally\n        {\n            // Clear the TripleDES key.\n            tDESkey.Clear();\n        }\n\n    }\n\n    public static void Encrypt(XmlDocument Doc, string ElementToEncrypt, TripleDESCryptoServiceProvider Alg)\n    {\n\n        ////////////////////////////////////////////////\n        // Find the specified element in the XmlDocument\n        // object and create a new XmlElemnt object.\n        ////////////////////////////////////////////////\n\n        XmlElement elementToEncrypt = Doc.GetElementsByTagName(ElementToEncrypt)[0] as XmlElement;\n\n        // Throw an XmlException if the element was not found.\n        if (elementToEncrypt == null)\n        {\n            throw new XmlException(&quot;The specified element was not found&quot;);\n\n        }\n\n        //////////////////////////////////////////////////\n        // Create a new instance of the EncryptedXml class \n        // and use it to encrypt the XmlElement with the \n        // symmetric key.\n        //////////////////////////////////////////////////\n\n        EncryptedXml eXml = new EncryptedXml();\n\n        byte[] encryptedElement = eXml.EncryptData(elementToEncrypt, Alg, false);\n\n        ////////////////////////////////////////////////\n        // Construct an EncryptedData object and populate\n        // it with the desired encryption information.\n        ////////////////////////////////////////////////\n\n\n        EncryptedData edElement = new EncryptedData();\n        \n        edElement.Type = EncryptedXml.XmlEncElementUrl;\n\n  \n        // Create an EncryptionMethod element so that the \n        // receiver knows which algorithm to use for decryption.\n        // Determine what kind of algorithm is being used and\n        // supply the appropriate URL to the EncryptionMethod element.\n\n        edElement.EncryptionMethod = new EncryptionMethod(EncryptedXml.XmlEncTripleDESUrl);\n\n        // Add the encrypted element data to the \n        // EncryptedData object.\n        edElement.CipherData.CipherValue = encryptedElement;\n\n        ////////////////////////////////////////////////////\n        // Replace the element from the original XmlDocument\n        // object with the EncryptedData element.\n        ////////////////////////////////////////////////////\n\n        EncryptedXml.ReplaceElement(elementToEncrypt, edElement, false);\n\n    }\n\n    public static void Decrypt(XmlDocument Doc, SymmetricAlgorithm Alg)\n    {\n\n        // Find the EncryptedData element in the XmlDocument.\n        XmlElement encryptedElement = Doc.GetElementsByTagName(&quot;EncryptedData&quot;)[0] as XmlElement;\n\n        // If the EncryptedData element was not found, throw an exception.\n        if (encryptedElement == null)\n        {\n            throw new XmlException(&quot;The EncryptedData element was not found.&quot;);\n        }\n\n        // Create an EncryptedData object and populate it.\n        EncryptedData edElement = new EncryptedData();\n        edElement.LoadXml(encryptedElement);\n\n        // Create a new EncryptedXml object.\n        EncryptedXml exml = new EncryptedXml();\n\n        // Decrypt the element using the symmetric key.\n        byte[] rgbOutput = exml.DecryptData(edElement, Alg);\n\n        // Replace the encryptedData element with the plaintext XML element.\n        exml.ReplaceData(encryptedElement, rgbOutput);\n\n    }\n\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.XML-EncryptedData - EncryptedType#1\">Imports System\nImports System.Xml\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\n\n\n\nModule Program\n\n    Sub Main(ByVal args() As String)\n\n        &#39; Create an XmlDocument object.\n        Dim xmlDoc As New XmlDocument()\n\n        &#39; Load an XML file into the XmlDocument object.\n        Try\n            xmlDoc.PreserveWhitespace = True\n            xmlDoc.Load(&quot;test.xml&quot;)\n        Catch e As Exception\n            Console.WriteLine(e.Message)\n        End Try\n\n        &#39; Create a new TripleDES key. \n        Dim tDESkey As New TripleDESCryptoServiceProvider()\n\n\n        Try\n            &#39; Encrypt the &quot;creditcard&quot; element.\n            Encrypt(xmlDoc, &quot;creditcard&quot;, tDESkey)\n\n            &#39; Display the encrypted XML to the console.\n            Console.WriteLine(&quot;Encrypted XML:&quot;)\n            Console.WriteLine()\n            Console.WriteLine(xmlDoc.OuterXml)\n\n            &#39; Decrypt the &quot;creditcard&quot; element.\n            Decrypt(xmlDoc, tDESkey)\n\n            &#39; Display the encrypted XML to the console.\n            Console.WriteLine()\n            Console.WriteLine(&quot;Decrypted XML:&quot;)\n            Console.WriteLine()\n            Console.WriteLine(xmlDoc.OuterXml)\n        Catch e As Exception\n            Console.WriteLine(e.Message)\n        Finally\n            &#39; Clear the TripleDES key.\n            tDESkey.Clear()\n        End Try\n\n    End Sub\n\n\n    Sub Encrypt(ByVal Doc As XmlDocument, ByVal ElementToEncryptString As String, ByVal Alg As TripleDESCryptoServiceProvider)\n\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; Find the specified element in the XmlDocument\n        &#39; object and create a new XmlElemnt object.\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n\n        Dim elementToEncrypt As XmlElement = Doc.GetElementsByTagName(ElementToEncryptString)(0)\n\n\n        &#39; Throw an XmlException if the element was not found.\n        If elementToEncrypt Is Nothing Then\n            Throw New XmlException(&quot;The specified element was not found&quot;)\n        End If\n\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; Create a new instance of the EncryptedXml class \n        &#39; and use it to encrypt the XmlElement with the \n        &#39; symmetric key.\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n\n        Dim eXml As New EncryptedXml()\n\n        Dim encryptedElement As Byte() = eXml.EncryptData(elementToEncrypt, Alg, False)\n\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; Construct an EncryptedData object and populate\n        &#39; it with the desired encryption information.\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n\n        Dim edElement As New EncryptedData()\n\n        edElement.Type = EncryptedXml.XmlEncElementUrl\n\n\n        &#39; Create an EncryptionMethod element so that the \n        &#39; receiver knows which algorithm to use for decryption.\n        &#39; Determine what kind of algorithm is being used and\n        &#39; supply the appropriate URL to the EncryptionMethod element.\n        edElement.EncryptionMethod = New EncryptionMethod(EncryptedXml.XmlEncTripleDESUrl)\n\n        &#39; Add the encrypted element data to the \n        &#39; EncryptedData object.\n        edElement.CipherData.CipherValue = encryptedElement\n\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; Replace the element from the original XmlDocument\n        &#39; object with the EncryptedData element.\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        EncryptedXml.ReplaceElement(elementToEncrypt, edElement, False)\n\n    End Sub\n\n\n    Sub Decrypt(ByVal Doc As XmlDocument, ByVal Alg As SymmetricAlgorithm)\n\n        &#39; Find the EncryptedData element in the XmlDocument.\n        Dim encryptedElement As XmlElement = Doc.GetElementsByTagName(&quot;EncryptedData&quot;)(0) \n   \n\n        &#39; If the EncryptedData element was not found, throw an exception.\n        If encryptedElement Is Nothing Then\n            Throw New XmlException(&quot;The EncryptedData element was not found.&quot;)\n        End If\n\n        &#39; Create an EncryptedData object and populate it.\n        Dim edElement As New EncryptedData()\n        edElement.LoadXml(encryptedElement)\n\n        &#39; Create a new EncryptedXml object.\n        Dim exml As New EncryptedXml()\n\n        &#39; Decrypt the element using the symmetric key.\n        Dim rgbOutput As Byte() = exml.DecryptData(edElement, Alg)\n\n        &#39; Replace the encryptedData element with the plaintext XML element.\n        exml.ReplaceData(encryptedElement, rgbOutput)\n\n    End Sub\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_EncryptedType_EncryptionProperties\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_EncryptedType_EncryptionProperties_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EncryptionProperties</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the <code>&lt;EncryptionProperties&gt;</code> element in XML encryption.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Security.Cryptography.Xml.EncryptionPropertyCollection EncryptionProperties { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.encryptionpropertycollection\" data-linktype=\"relative-path\">EncryptionPropertyCollection</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.security.cryptography.xml.encryptionpropertycollection\" data-linktype=\"relative-path\">EncryptionPropertyCollection</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>&lt;EncryptionProperties&gt;</code> element can contain additional information about the creation of the <a class=\"xref\" href=\"system.security.cryptography.xml.encryptedtype\" data-linktype=\"relative-path\">EncryptedType</a> instance, such as a date and time stamp or the serial number of cryptographic hardware used during encryption.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to encrypt and decrypt an XML element using the <a class=\"xref\" href=\"system.security.cryptography.xml.encrypteddata\" data-linktype=\"relative-path\">EncryptedData</a> class that derives from the <a class=\"xref\" href=\"system.security.cryptography.xml.encryptedtype\" data-linktype=\"relative-path\">EncryptedType</a> class. This sample then displays various properties of the <a class=\"xref\" href=\"system.security.cryptography.xml.encrypteddata\" data-linktype=\"relative-path\">EncryptedData</a> class to the console.  </p>\n<pre><code class=\"lang-vb\" name=\"Cryptography.XML.EncryptedData#1\">Imports System\nImports System.Xml\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\n\n\n\nModule Program\n\n    Sub Main(ByVal args() As String)\n\n        &#39; Create an XmlDocument object.\n        Dim xmlDoc As New XmlDocument()\n\n        &#39; Load an XML file into the XmlDocument object.\n        Try\n            xmlDoc.PreserveWhitespace = True\n            xmlDoc.Load(&quot;test.xml&quot;)\n        Catch e As Exception\n            Console.WriteLine(e.Message)\n        End Try\n\n        &#39; Create a new RSA key.  This key will encrypt a symmetric key,\n        &#39; which will then be imbedded in the XML document.  \n        Dim rsaKey As New RSACryptoServiceProvider()\n\n\n        Try\n            &#39; Encrypt the &quot;creditcard&quot; element.\n            Encrypt(xmlDoc, &quot;creditcard&quot;, rsaKey, &quot;rsaKey&quot;)\n\n            &#39; Inspect the EncryptedKey element.\n            InspectElement(xmlDoc)\n\n            &#39; Decrypt the &quot;creditcard&quot; element.\n            Decrypt(xmlDoc, rsaKey, &quot;rsaKey&quot;)\n\n        Catch e As Exception\n            Console.WriteLine(e.Message)\n        Finally\n            &#39; Clear the RSA key.\n            rsaKey.Clear()\n        End Try\n\n    End Sub\n\n\n    Sub Encrypt(ByVal Doc As XmlDocument, ByVal ElementToEncryptParam As String, ByVal Alg As RSA, ByVal KeyName As String)\n        &#39; Check the arguments.  \n        If Doc Is Nothing Then\n            Throw New ArgumentNullException(&quot;Doc&quot;)\n        End If\n        If ElementToEncryptParam Is Nothing Then\n            Throw New ArgumentNullException(&quot;ElementToEncrypt&quot;)\n        End If\n        If Alg Is Nothing Then\n            Throw New ArgumentNullException(&quot;Alg&quot;)\n        End If\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; Find the specified element in the XmlDocument\n        &#39; object and create a new XmlElemnt object.\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        Dim elementToEncrypt As XmlElement = Doc.GetElementsByTagName(ElementToEncryptParam)(0)\n\n\n        &#39; Throw an XmlException if the element was not found.\n        If elementToEncrypt Is Nothing Then\n            Throw New XmlException(&quot;The specified element was not found&quot;)\n        End If\n\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; Create a new instance of the EncryptedXml class \n        &#39; and use it to encrypt the XmlElement with the \n        &#39; a new random symmetric key.\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; Create a 256 bit Rijndael key.\n        Dim sessionKey As New RijndaelManaged()\n        sessionKey.KeySize = 256\n\n        Dim eXml As New EncryptedXml()\n\n        Dim encryptedElement As Byte() = eXml.EncryptData(elementToEncrypt, sessionKey, False)\n\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; Construct an EncryptedData object and populate\n        &#39; it with the desired encryption information.\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n\n        Dim edElement As New EncryptedData()\n        edElement.Type = EncryptedXml.XmlEncElementUrl\n\n        &#39; Create an EncryptionMethod element so that the \n        &#39; receiver knows which algorithm to use for decryption.\n        edElement.EncryptionMethod = New EncryptionMethod(EncryptedXml.XmlEncAES256Url)\n\n        &#39; Encrypt the session key and add it to an EncryptedKey element.\n        Dim ek As New EncryptedKey()\n\n        Dim encryptedKey As Byte() = EncryptedXml.EncryptKey(sessionKey.Key, Alg, False)\n\n        ek.CipherData = New CipherData(encryptedKey)\n\n        ek.EncryptionMethod = New EncryptionMethod(EncryptedXml.XmlEncRSA15Url)\n\n        &#39; Set the KeyInfo element to specify the\n        &#39; name of the RSA key.\n        &#39; Create a new KeyInfo element.\n        edElement.KeyInfo = New KeyInfo()\n\n        &#39; Create a new KeyInfoName element.\n        Dim kin As New KeyInfoName()\n\n        &#39; Specify a name for the key.\n        kin.Value = KeyName\n\n        &#39; Add the KeyInfoName element to the \n        &#39; EncryptedKey object.\n        ek.KeyInfo.AddClause(kin)\n\n        &#39; Add the encrypted key to the \n        &#39; EncryptedData object.\n        edElement.KeyInfo.AddClause(New KeyInfoEncryptedKey(ek))\n\n        &#39; Add the encrypted element data to the \n        &#39; EncryptedData object.\n        edElement.CipherData.CipherValue = encryptedElement\n\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; Replace the element from the original XmlDocument\n        &#39; object with the EncryptedData element.\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        EncryptedXml.ReplaceElement(elementToEncrypt, edElement, False)\n\n    End Sub\n\n\n    Sub Decrypt(ByVal Doc As XmlDocument, ByVal Alg As RSA, ByVal KeyName As String)\n        &#39; Check the arguments.  \n        If Doc Is Nothing Then\n            Throw New ArgumentNullException(&quot;Doc&quot;)\n        End If\n        If Alg Is Nothing Then\n            Throw New ArgumentNullException(&quot;Alg&quot;)\n        End If\n        If KeyName Is Nothing Then\n            Throw New ArgumentNullException(&quot;KeyName&quot;)\n        End If\n        &#39; Create a new EncryptedXml object.\n        Dim exml As New EncryptedXml(Doc)\n\n        &#39; Add a key-name mapping.\n        &#39; This method can only decrypt documents\n        &#39; that present the specified key name.\n        exml.AddKeyNameMapping(KeyName, Alg)\n\n        &#39; Decrypt the element.\n        exml.DecryptDocument()\n\n    End Sub\n\n\n    Sub InspectElement(ByVal Doc As XmlDocument)\n        &#39; Get the EncryptedData element from the XMLDocument object.\n        Dim encryptedData As XmlElement = Doc.GetElementsByTagName(&quot;EncryptedData&quot;)(0)\n\n        &#39; Create a new EncryptedData object.\n        Dim encData As New EncryptedData()\n\n        &#39; Load the XML from the document to\n        &#39; initialize the EncryptedData object.\n        encData.LoadXml(encryptedData)\n\n        &#39; Display the properties.\n        &#39; Most values are Null by default.\n\n\n        Console.WriteLine(&quot;EncryptedData.CipherData: &quot; + encData.CipherData.GetXml().InnerXml)\n        Console.WriteLine(&quot;EncryptedData.Encoding: &quot; + encData.Encoding)\n        Console.WriteLine(&quot;EncryptedData.EncryptionMethod: &quot; + encData.EncryptionMethod.GetXml().InnerXml)\n        If encData.EncryptionProperties.Count &gt;= 1 Then\n            Console.WriteLine(&quot;EncryptedData.EncryptionProperties: &quot; + encData.EncryptionProperties(0).GetXml().InnerXml)\n        End If\n\n        Console.WriteLine(&quot;EncryptedData.Id: &quot; + encData.Id)\n        Console.WriteLine(&quot;EncryptedData.KeyInfo: &quot; + encData.KeyInfo.GetXml().InnerXml)\n        Console.WriteLine(&quot;EncryptedData.MimeType: &quot; + encData.MimeType)\n\n    End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"Cryptography.XML.EncryptedData#1\">using System;\nusing System.Xml;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\n\nclass Program\n{\n\tstatic void Main(string[] args)\n\t{\n\n\t\t// Create an XmlDocument object.\n\t\tXmlDocument xmlDoc = new XmlDocument();\n\n\t\t// Load an XML file into the XmlDocument object.\n\t\ttry\n\t\t{\n\t\t\txmlDoc.PreserveWhitespace = true;\n\t\t\txmlDoc.Load(&quot;test.xml&quot;);\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\tConsole.WriteLine(e.Message);\n\t\t}\n\n\t\t// Create a new RSA key.  This key will encrypt a symmetric key,\n\t\t// which will then be imbedded in the XML document.  \n\t\tRSA rsaKey = new RSACryptoServiceProvider();\n\n\n\t\ttry\n\t\t{\n\t\t\t// Encrypt the &quot;creditcard&quot; element.\n\t\t\tEncrypt(xmlDoc, &quot;creditcard&quot;, rsaKey, &quot;rsaKey&quot;);\n\n\t\t\t// Inspect the EncryptedKey element.\n\t\t\tInspectElement(xmlDoc);\n\n\t\t\t// Decrypt the &quot;creditcard&quot; element.\n\t\t\tDecrypt(xmlDoc, rsaKey, &quot;rsaKey&quot;);\n\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\tConsole.WriteLine(e.Message);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\t// Clear the RSA key.\n\t\t\trsaKey.Clear();\n\t\t}\n\n\t}\n\n\tpublic static void Encrypt(XmlDocument Doc, string ElementToEncrypt, RSA Alg, string KeyName)\n\t{\n\t\t// Check the arguments.  \n\t\tif (Doc == null)\n\t\t\tthrow new ArgumentNullException(&quot;Doc&quot;);\n\t\tif (ElementToEncrypt == null)\n\t\t\tthrow new ArgumentNullException(&quot;ElementToEncrypt&quot;);\n\t\tif (Alg == null)\n\t\t\tthrow new ArgumentNullException(&quot;Alg&quot;);\n\n\t\t////////////////////////////////////////////////\n\t\t// Find the specified element in the XmlDocument\n\t\t// object and create a new XmlElemnt object.\n\t\t////////////////////////////////////////////////\n\n\t\tXmlElement elementToEncrypt = Doc.GetElementsByTagName(ElementToEncrypt)[0] as XmlElement;\n\n\t\t// Throw an XmlException if the element was not found.\n\t\tif (elementToEncrypt == null)\n\t\t{\n\t\t\tthrow new XmlException(&quot;The specified element was not found&quot;);\n\n\t\t}\n\n\t\t//////////////////////////////////////////////////\n\t\t// Create a new instance of the EncryptedXml class \n\t\t// and use it to encrypt the XmlElement with the \n\t\t// a new random symmetric key.\n\t\t//////////////////////////////////////////////////\n\n\t\t// Create a 256 bit Rijndael key.\n\t\tRijndaelManaged sessionKey = new RijndaelManaged();\n\t\tsessionKey.KeySize = 256;\n\n\t\tEncryptedXml eXml = new EncryptedXml();\n\n\t\tbyte[] encryptedElement = eXml.EncryptData(elementToEncrypt, sessionKey, false);\n\n\t\t////////////////////////////////////////////////\n\t\t// Construct an EncryptedData object and populate\n\t\t// it with the desired encryption information.\n\t\t////////////////////////////////////////////////\n\n\n\t\tEncryptedData edElement = new EncryptedData();\n\t\tedElement.Type = EncryptedXml.XmlEncElementUrl;\n\n\t\t// Create an EncryptionMethod element so that the \n\t\t// receiver knows which algorithm to use for decryption.\n\n\t\tedElement.EncryptionMethod = new EncryptionMethod(EncryptedXml.XmlEncAES256Url);\n\n\t\t// Encrypt the session key and add it to an EncryptedKey element.\n\t\tEncryptedKey ek = new EncryptedKey();\n\n\t\tbyte[] encryptedKey = EncryptedXml.EncryptKey(sessionKey.Key, Alg, false);\n\n\t\tek.CipherData = new CipherData(encryptedKey);\n\n\t\tek.EncryptionMethod = new EncryptionMethod(EncryptedXml.XmlEncRSA15Url);\n\n\t\t// Set the KeyInfo element to specify the\n\t\t// name of the RSA key.\n\n\t\t// Create a new KeyInfo element.\n\t\tedElement.KeyInfo = new KeyInfo();\n\n\t\t// Create a new KeyInfoName element.\n\t\tKeyInfoName kin = new KeyInfoName();\n\n\t\t// Specify a name for the key.\n\t\tkin.Value = KeyName;\n\n\t\t// Add the KeyInfoName element to the \n\t\t// EncryptedKey object.\n\t\tek.KeyInfo.AddClause(kin);\n\n\t\t// Add the encrypted key to the \n\t\t// EncryptedData object.\n\n\t\tedElement.KeyInfo.AddClause(new KeyInfoEncryptedKey(ek));\n\n\t\t// Add the encrypted element data to the \n\t\t// EncryptedData object.\n\t\tedElement.CipherData.CipherValue = encryptedElement;\n\n\t\t////////////////////////////////////////////////////\n\t\t// Replace the element from the original XmlDocument\n\t\t// object with the EncryptedData element.\n\t\t////////////////////////////////////////////////////\n\n\t\tEncryptedXml.ReplaceElement(elementToEncrypt, edElement, false);\n\n\t}\n\n\tpublic static void Decrypt(XmlDocument Doc, RSA Alg, string KeyName)\n\t{\n\t\t// Check the arguments.  \n\t\tif (Doc == null)\n\t\t\tthrow new ArgumentNullException(&quot;Doc&quot;);\n\t\tif (Alg == null)\n\t\t\tthrow new ArgumentNullException(&quot;Alg&quot;);\n\t\tif (KeyName == null)\n\t\t\tthrow new ArgumentNullException(&quot;KeyName&quot;);\n\n\t\t// Create a new EncryptedXml object.\n\t\tEncryptedXml exml = new EncryptedXml(Doc);\n\n\t\t// Add a key-name mapping.\n\t\t// This method can only decrypt documents\n\t\t// that present the specified key name.\n\t\texml.AddKeyNameMapping(KeyName, Alg);\n\n\t\t// Decrypt the element.\n\t\texml.DecryptDocument();\n\n\t}\n\n\tstatic void InspectElement(XmlDocument Doc)\n\t{\n\t\t// Get the EncryptedData element from the XMLDocument object.\n\t\tXmlElement encryptedData = Doc.GetElementsByTagName(&quot;EncryptedData&quot;)[0] as XmlElement;\n\n\t\t// Create a new EncryptedData object.\n\t\tEncryptedData encData = new EncryptedData();\n\n\t\t// Load the XML from the document to\n\t\t// initialize the EncryptedData object.\n\t\tencData.LoadXml(encryptedData);\n\n\t\t// Display the properties.\n\t\t// Most values are Null by default.\n\n\n\t\t\n\t\tConsole.WriteLine(&quot;EncryptedData.CipherData: &quot; + encData.CipherData.GetXml().InnerXml);\n\t\tConsole.WriteLine(&quot;EncryptedData.Encoding: &quot; + encData.Encoding);\n\t\tConsole.WriteLine(&quot;EncryptedData.EncryptionMethod: &quot; + encData.EncryptionMethod.GetXml().InnerXml);\n\t\tif (encData.EncryptionProperties.Count &gt;= 1)\n\t\t{\n\t\t\tConsole.WriteLine(&quot;EncryptedData.EncryptionProperties: &quot; + encData.EncryptionProperties[0].GetXml().InnerXml);\n\t\t}\n\n\t\tConsole.WriteLine(&quot;EncryptedData.Id: &quot; + encData.Id);\n\t\tConsole.WriteLine(&quot;EncryptedData.KeyInfo: &quot; + encData.KeyInfo.GetXml().InnerXml);\n\t\tConsole.WriteLine(&quot;EncryptedData.MimeType: &quot; + encData.MimeType);\n\t}\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_EncryptedType_Id\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_EncryptedType_Id_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Id</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the <code>Id</code> attribute of an <a class=\"xref\" href=\"system.security.cryptography.xml.encryptedtype\" data-linktype=\"relative-path\">EncryptedType</a> instance in XML encryption.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string Id { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string of the <code>Id</code> attribute of the <code>&lt;EncryptedType&gt;</code> element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>Id</code> attribute is an optional attribute of the <code>&lt;EncryptedType&gt;</code> element that provides a standard method for assigning a string identifier to an element within an XML document.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to encrypt and decrypt an XML element using the <a class=\"xref\" href=\"system.security.cryptography.xml.encrypteddata\" data-linktype=\"relative-path\">EncryptedData</a> class that derives from the <a class=\"xref\" href=\"system.security.cryptography.xml.encryptedtype\" data-linktype=\"relative-path\">EncryptedType</a> class. This sample then displays various properties of the <a class=\"xref\" href=\"system.security.cryptography.xml.encrypteddata\" data-linktype=\"relative-path\">EncryptedData</a> class to the console.  </p>\n<pre><code class=\"lang-vb\" name=\"Cryptography.XML.EncryptedData#1\">Imports System\nImports System.Xml\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\n\n\n\nModule Program\n\n    Sub Main(ByVal args() As String)\n\n        &#39; Create an XmlDocument object.\n        Dim xmlDoc As New XmlDocument()\n\n        &#39; Load an XML file into the XmlDocument object.\n        Try\n            xmlDoc.PreserveWhitespace = True\n            xmlDoc.Load(&quot;test.xml&quot;)\n        Catch e As Exception\n            Console.WriteLine(e.Message)\n        End Try\n\n        &#39; Create a new RSA key.  This key will encrypt a symmetric key,\n        &#39; which will then be imbedded in the XML document.  \n        Dim rsaKey As New RSACryptoServiceProvider()\n\n\n        Try\n            &#39; Encrypt the &quot;creditcard&quot; element.\n            Encrypt(xmlDoc, &quot;creditcard&quot;, rsaKey, &quot;rsaKey&quot;)\n\n            &#39; Inspect the EncryptedKey element.\n            InspectElement(xmlDoc)\n\n            &#39; Decrypt the &quot;creditcard&quot; element.\n            Decrypt(xmlDoc, rsaKey, &quot;rsaKey&quot;)\n\n        Catch e As Exception\n            Console.WriteLine(e.Message)\n        Finally\n            &#39; Clear the RSA key.\n            rsaKey.Clear()\n        End Try\n\n    End Sub\n\n\n    Sub Encrypt(ByVal Doc As XmlDocument, ByVal ElementToEncryptParam As String, ByVal Alg As RSA, ByVal KeyName As String)\n        &#39; Check the arguments.  \n        If Doc Is Nothing Then\n            Throw New ArgumentNullException(&quot;Doc&quot;)\n        End If\n        If ElementToEncryptParam Is Nothing Then\n            Throw New ArgumentNullException(&quot;ElementToEncrypt&quot;)\n        End If\n        If Alg Is Nothing Then\n            Throw New ArgumentNullException(&quot;Alg&quot;)\n        End If\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; Find the specified element in the XmlDocument\n        &#39; object and create a new XmlElemnt object.\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        Dim elementToEncrypt As XmlElement = Doc.GetElementsByTagName(ElementToEncryptParam)(0)\n\n\n        &#39; Throw an XmlException if the element was not found.\n        If elementToEncrypt Is Nothing Then\n            Throw New XmlException(&quot;The specified element was not found&quot;)\n        End If\n\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; Create a new instance of the EncryptedXml class \n        &#39; and use it to encrypt the XmlElement with the \n        &#39; a new random symmetric key.\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; Create a 256 bit Rijndael key.\n        Dim sessionKey As New RijndaelManaged()\n        sessionKey.KeySize = 256\n\n        Dim eXml As New EncryptedXml()\n\n        Dim encryptedElement As Byte() = eXml.EncryptData(elementToEncrypt, sessionKey, False)\n\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; Construct an EncryptedData object and populate\n        &#39; it with the desired encryption information.\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n\n        Dim edElement As New EncryptedData()\n        edElement.Type = EncryptedXml.XmlEncElementUrl\n\n        &#39; Create an EncryptionMethod element so that the \n        &#39; receiver knows which algorithm to use for decryption.\n        edElement.EncryptionMethod = New EncryptionMethod(EncryptedXml.XmlEncAES256Url)\n\n        &#39; Encrypt the session key and add it to an EncryptedKey element.\n        Dim ek As New EncryptedKey()\n\n        Dim encryptedKey As Byte() = EncryptedXml.EncryptKey(sessionKey.Key, Alg, False)\n\n        ek.CipherData = New CipherData(encryptedKey)\n\n        ek.EncryptionMethod = New EncryptionMethod(EncryptedXml.XmlEncRSA15Url)\n\n        &#39; Set the KeyInfo element to specify the\n        &#39; name of the RSA key.\n        &#39; Create a new KeyInfo element.\n        edElement.KeyInfo = New KeyInfo()\n\n        &#39; Create a new KeyInfoName element.\n        Dim kin As New KeyInfoName()\n\n        &#39; Specify a name for the key.\n        kin.Value = KeyName\n\n        &#39; Add the KeyInfoName element to the \n        &#39; EncryptedKey object.\n        ek.KeyInfo.AddClause(kin)\n\n        &#39; Add the encrypted key to the \n        &#39; EncryptedData object.\n        edElement.KeyInfo.AddClause(New KeyInfoEncryptedKey(ek))\n\n        &#39; Add the encrypted element data to the \n        &#39; EncryptedData object.\n        edElement.CipherData.CipherValue = encryptedElement\n\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; Replace the element from the original XmlDocument\n        &#39; object with the EncryptedData element.\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        EncryptedXml.ReplaceElement(elementToEncrypt, edElement, False)\n\n    End Sub\n\n\n    Sub Decrypt(ByVal Doc As XmlDocument, ByVal Alg As RSA, ByVal KeyName As String)\n        &#39; Check the arguments.  \n        If Doc Is Nothing Then\n            Throw New ArgumentNullException(&quot;Doc&quot;)\n        End If\n        If Alg Is Nothing Then\n            Throw New ArgumentNullException(&quot;Alg&quot;)\n        End If\n        If KeyName Is Nothing Then\n            Throw New ArgumentNullException(&quot;KeyName&quot;)\n        End If\n        &#39; Create a new EncryptedXml object.\n        Dim exml As New EncryptedXml(Doc)\n\n        &#39; Add a key-name mapping.\n        &#39; This method can only decrypt documents\n        &#39; that present the specified key name.\n        exml.AddKeyNameMapping(KeyName, Alg)\n\n        &#39; Decrypt the element.\n        exml.DecryptDocument()\n\n    End Sub\n\n\n    Sub InspectElement(ByVal Doc As XmlDocument)\n        &#39; Get the EncryptedData element from the XMLDocument object.\n        Dim encryptedData As XmlElement = Doc.GetElementsByTagName(&quot;EncryptedData&quot;)(0)\n\n        &#39; Create a new EncryptedData object.\n        Dim encData As New EncryptedData()\n\n        &#39; Load the XML from the document to\n        &#39; initialize the EncryptedData object.\n        encData.LoadXml(encryptedData)\n\n        &#39; Display the properties.\n        &#39; Most values are Null by default.\n\n\n        Console.WriteLine(&quot;EncryptedData.CipherData: &quot; + encData.CipherData.GetXml().InnerXml)\n        Console.WriteLine(&quot;EncryptedData.Encoding: &quot; + encData.Encoding)\n        Console.WriteLine(&quot;EncryptedData.EncryptionMethod: &quot; + encData.EncryptionMethod.GetXml().InnerXml)\n        If encData.EncryptionProperties.Count &gt;= 1 Then\n            Console.WriteLine(&quot;EncryptedData.EncryptionProperties: &quot; + encData.EncryptionProperties(0).GetXml().InnerXml)\n        End If\n\n        Console.WriteLine(&quot;EncryptedData.Id: &quot; + encData.Id)\n        Console.WriteLine(&quot;EncryptedData.KeyInfo: &quot; + encData.KeyInfo.GetXml().InnerXml)\n        Console.WriteLine(&quot;EncryptedData.MimeType: &quot; + encData.MimeType)\n\n    End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"Cryptography.XML.EncryptedData#1\">using System;\nusing System.Xml;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\n\nclass Program\n{\n\tstatic void Main(string[] args)\n\t{\n\n\t\t// Create an XmlDocument object.\n\t\tXmlDocument xmlDoc = new XmlDocument();\n\n\t\t// Load an XML file into the XmlDocument object.\n\t\ttry\n\t\t{\n\t\t\txmlDoc.PreserveWhitespace = true;\n\t\t\txmlDoc.Load(&quot;test.xml&quot;);\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\tConsole.WriteLine(e.Message);\n\t\t}\n\n\t\t// Create a new RSA key.  This key will encrypt a symmetric key,\n\t\t// which will then be imbedded in the XML document.  \n\t\tRSA rsaKey = new RSACryptoServiceProvider();\n\n\n\t\ttry\n\t\t{\n\t\t\t// Encrypt the &quot;creditcard&quot; element.\n\t\t\tEncrypt(xmlDoc, &quot;creditcard&quot;, rsaKey, &quot;rsaKey&quot;);\n\n\t\t\t// Inspect the EncryptedKey element.\n\t\t\tInspectElement(xmlDoc);\n\n\t\t\t// Decrypt the &quot;creditcard&quot; element.\n\t\t\tDecrypt(xmlDoc, rsaKey, &quot;rsaKey&quot;);\n\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\tConsole.WriteLine(e.Message);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\t// Clear the RSA key.\n\t\t\trsaKey.Clear();\n\t\t}\n\n\t}\n\n\tpublic static void Encrypt(XmlDocument Doc, string ElementToEncrypt, RSA Alg, string KeyName)\n\t{\n\t\t// Check the arguments.  \n\t\tif (Doc == null)\n\t\t\tthrow new ArgumentNullException(&quot;Doc&quot;);\n\t\tif (ElementToEncrypt == null)\n\t\t\tthrow new ArgumentNullException(&quot;ElementToEncrypt&quot;);\n\t\tif (Alg == null)\n\t\t\tthrow new ArgumentNullException(&quot;Alg&quot;);\n\n\t\t////////////////////////////////////////////////\n\t\t// Find the specified element in the XmlDocument\n\t\t// object and create a new XmlElemnt object.\n\t\t////////////////////////////////////////////////\n\n\t\tXmlElement elementToEncrypt = Doc.GetElementsByTagName(ElementToEncrypt)[0] as XmlElement;\n\n\t\t// Throw an XmlException if the element was not found.\n\t\tif (elementToEncrypt == null)\n\t\t{\n\t\t\tthrow new XmlException(&quot;The specified element was not found&quot;);\n\n\t\t}\n\n\t\t//////////////////////////////////////////////////\n\t\t// Create a new instance of the EncryptedXml class \n\t\t// and use it to encrypt the XmlElement with the \n\t\t// a new random symmetric key.\n\t\t//////////////////////////////////////////////////\n\n\t\t// Create a 256 bit Rijndael key.\n\t\tRijndaelManaged sessionKey = new RijndaelManaged();\n\t\tsessionKey.KeySize = 256;\n\n\t\tEncryptedXml eXml = new EncryptedXml();\n\n\t\tbyte[] encryptedElement = eXml.EncryptData(elementToEncrypt, sessionKey, false);\n\n\t\t////////////////////////////////////////////////\n\t\t// Construct an EncryptedData object and populate\n\t\t// it with the desired encryption information.\n\t\t////////////////////////////////////////////////\n\n\n\t\tEncryptedData edElement = new EncryptedData();\n\t\tedElement.Type = EncryptedXml.XmlEncElementUrl;\n\n\t\t// Create an EncryptionMethod element so that the \n\t\t// receiver knows which algorithm to use for decryption.\n\n\t\tedElement.EncryptionMethod = new EncryptionMethod(EncryptedXml.XmlEncAES256Url);\n\n\t\t// Encrypt the session key and add it to an EncryptedKey element.\n\t\tEncryptedKey ek = new EncryptedKey();\n\n\t\tbyte[] encryptedKey = EncryptedXml.EncryptKey(sessionKey.Key, Alg, false);\n\n\t\tek.CipherData = new CipherData(encryptedKey);\n\n\t\tek.EncryptionMethod = new EncryptionMethod(EncryptedXml.XmlEncRSA15Url);\n\n\t\t// Set the KeyInfo element to specify the\n\t\t// name of the RSA key.\n\n\t\t// Create a new KeyInfo element.\n\t\tedElement.KeyInfo = new KeyInfo();\n\n\t\t// Create a new KeyInfoName element.\n\t\tKeyInfoName kin = new KeyInfoName();\n\n\t\t// Specify a name for the key.\n\t\tkin.Value = KeyName;\n\n\t\t// Add the KeyInfoName element to the \n\t\t// EncryptedKey object.\n\t\tek.KeyInfo.AddClause(kin);\n\n\t\t// Add the encrypted key to the \n\t\t// EncryptedData object.\n\n\t\tedElement.KeyInfo.AddClause(new KeyInfoEncryptedKey(ek));\n\n\t\t// Add the encrypted element data to the \n\t\t// EncryptedData object.\n\t\tedElement.CipherData.CipherValue = encryptedElement;\n\n\t\t////////////////////////////////////////////////////\n\t\t// Replace the element from the original XmlDocument\n\t\t// object with the EncryptedData element.\n\t\t////////////////////////////////////////////////////\n\n\t\tEncryptedXml.ReplaceElement(elementToEncrypt, edElement, false);\n\n\t}\n\n\tpublic static void Decrypt(XmlDocument Doc, RSA Alg, string KeyName)\n\t{\n\t\t// Check the arguments.  \n\t\tif (Doc == null)\n\t\t\tthrow new ArgumentNullException(&quot;Doc&quot;);\n\t\tif (Alg == null)\n\t\t\tthrow new ArgumentNullException(&quot;Alg&quot;);\n\t\tif (KeyName == null)\n\t\t\tthrow new ArgumentNullException(&quot;KeyName&quot;);\n\n\t\t// Create a new EncryptedXml object.\n\t\tEncryptedXml exml = new EncryptedXml(Doc);\n\n\t\t// Add a key-name mapping.\n\t\t// This method can only decrypt documents\n\t\t// that present the specified key name.\n\t\texml.AddKeyNameMapping(KeyName, Alg);\n\n\t\t// Decrypt the element.\n\t\texml.DecryptDocument();\n\n\t}\n\n\tstatic void InspectElement(XmlDocument Doc)\n\t{\n\t\t// Get the EncryptedData element from the XMLDocument object.\n\t\tXmlElement encryptedData = Doc.GetElementsByTagName(&quot;EncryptedData&quot;)[0] as XmlElement;\n\n\t\t// Create a new EncryptedData object.\n\t\tEncryptedData encData = new EncryptedData();\n\n\t\t// Load the XML from the document to\n\t\t// initialize the EncryptedData object.\n\t\tencData.LoadXml(encryptedData);\n\n\t\t// Display the properties.\n\t\t// Most values are Null by default.\n\n\n\t\t\n\t\tConsole.WriteLine(&quot;EncryptedData.CipherData: &quot; + encData.CipherData.GetXml().InnerXml);\n\t\tConsole.WriteLine(&quot;EncryptedData.Encoding: &quot; + encData.Encoding);\n\t\tConsole.WriteLine(&quot;EncryptedData.EncryptionMethod: &quot; + encData.EncryptionMethod.GetXml().InnerXml);\n\t\tif (encData.EncryptionProperties.Count &gt;= 1)\n\t\t{\n\t\t\tConsole.WriteLine(&quot;EncryptedData.EncryptionProperties: &quot; + encData.EncryptionProperties[0].GetXml().InnerXml);\n\t\t}\n\n\t\tConsole.WriteLine(&quot;EncryptedData.Id: &quot; + encData.Id);\n\t\tConsole.WriteLine(&quot;EncryptedData.KeyInfo: &quot; + encData.KeyInfo.GetXml().InnerXml);\n\t\tConsole.WriteLine(&quot;EncryptedData.MimeType: &quot; + encData.MimeType);\n\t}\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_EncryptedType_KeyInfo\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_EncryptedType_KeyInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">KeyInfo</div>        \r\n          </div>\r\n    \r\n            <p>Gets of sets the <code>&lt;KeyInfo&gt;</code> element in XML encryption.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.Cryptography.Xml.KeyInfo KeyInfo { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.keyinfo\" data-linktype=\"relative-path\">KeyInfo</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.security.cryptography.xml.keyinfo\" data-linktype=\"relative-path\">KeyInfo</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>&lt;KeyInfo&gt;</code> element is an optional element that contains information about the key used to encrypt the data.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to encrypt and decrypt an XML element using the <a class=\"xref\" href=\"system.security.cryptography.xml.encrypteddata\" data-linktype=\"relative-path\">EncryptedData</a> class that derives from the <a class=\"xref\" href=\"system.security.cryptography.xml.encryptedtype\" data-linktype=\"relative-path\">EncryptedType</a> class. This sample then displays various properties of the <a class=\"xref\" href=\"system.security.cryptography.xml.encrypteddata\" data-linktype=\"relative-path\">EncryptedData</a> class to the console.  </p>\n<pre><code class=\"lang-vb\" name=\"Cryptography.XML.EncryptedData#1\">Imports System\nImports System.Xml\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\n\n\n\nModule Program\n\n    Sub Main(ByVal args() As String)\n\n        &#39; Create an XmlDocument object.\n        Dim xmlDoc As New XmlDocument()\n\n        &#39; Load an XML file into the XmlDocument object.\n        Try\n            xmlDoc.PreserveWhitespace = True\n            xmlDoc.Load(&quot;test.xml&quot;)\n        Catch e As Exception\n            Console.WriteLine(e.Message)\n        End Try\n\n        &#39; Create a new RSA key.  This key will encrypt a symmetric key,\n        &#39; which will then be imbedded in the XML document.  \n        Dim rsaKey As New RSACryptoServiceProvider()\n\n\n        Try\n            &#39; Encrypt the &quot;creditcard&quot; element.\n            Encrypt(xmlDoc, &quot;creditcard&quot;, rsaKey, &quot;rsaKey&quot;)\n\n            &#39; Inspect the EncryptedKey element.\n            InspectElement(xmlDoc)\n\n            &#39; Decrypt the &quot;creditcard&quot; element.\n            Decrypt(xmlDoc, rsaKey, &quot;rsaKey&quot;)\n\n        Catch e As Exception\n            Console.WriteLine(e.Message)\n        Finally\n            &#39; Clear the RSA key.\n            rsaKey.Clear()\n        End Try\n\n    End Sub\n\n\n    Sub Encrypt(ByVal Doc As XmlDocument, ByVal ElementToEncryptParam As String, ByVal Alg As RSA, ByVal KeyName As String)\n        &#39; Check the arguments.  \n        If Doc Is Nothing Then\n            Throw New ArgumentNullException(&quot;Doc&quot;)\n        End If\n        If ElementToEncryptParam Is Nothing Then\n            Throw New ArgumentNullException(&quot;ElementToEncrypt&quot;)\n        End If\n        If Alg Is Nothing Then\n            Throw New ArgumentNullException(&quot;Alg&quot;)\n        End If\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; Find the specified element in the XmlDocument\n        &#39; object and create a new XmlElemnt object.\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        Dim elementToEncrypt As XmlElement = Doc.GetElementsByTagName(ElementToEncryptParam)(0)\n\n\n        &#39; Throw an XmlException if the element was not found.\n        If elementToEncrypt Is Nothing Then\n            Throw New XmlException(&quot;The specified element was not found&quot;)\n        End If\n\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; Create a new instance of the EncryptedXml class \n        &#39; and use it to encrypt the XmlElement with the \n        &#39; a new random symmetric key.\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; Create a 256 bit Rijndael key.\n        Dim sessionKey As New RijndaelManaged()\n        sessionKey.KeySize = 256\n\n        Dim eXml As New EncryptedXml()\n\n        Dim encryptedElement As Byte() = eXml.EncryptData(elementToEncrypt, sessionKey, False)\n\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; Construct an EncryptedData object and populate\n        &#39; it with the desired encryption information.\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n\n        Dim edElement As New EncryptedData()\n        edElement.Type = EncryptedXml.XmlEncElementUrl\n\n        &#39; Create an EncryptionMethod element so that the \n        &#39; receiver knows which algorithm to use for decryption.\n        edElement.EncryptionMethod = New EncryptionMethod(EncryptedXml.XmlEncAES256Url)\n\n        &#39; Encrypt the session key and add it to an EncryptedKey element.\n        Dim ek As New EncryptedKey()\n\n        Dim encryptedKey As Byte() = EncryptedXml.EncryptKey(sessionKey.Key, Alg, False)\n\n        ek.CipherData = New CipherData(encryptedKey)\n\n        ek.EncryptionMethod = New EncryptionMethod(EncryptedXml.XmlEncRSA15Url)\n\n        &#39; Set the KeyInfo element to specify the\n        &#39; name of the RSA key.\n        &#39; Create a new KeyInfo element.\n        edElement.KeyInfo = New KeyInfo()\n\n        &#39; Create a new KeyInfoName element.\n        Dim kin As New KeyInfoName()\n\n        &#39; Specify a name for the key.\n        kin.Value = KeyName\n\n        &#39; Add the KeyInfoName element to the \n        &#39; EncryptedKey object.\n        ek.KeyInfo.AddClause(kin)\n\n        &#39; Add the encrypted key to the \n        &#39; EncryptedData object.\n        edElement.KeyInfo.AddClause(New KeyInfoEncryptedKey(ek))\n\n        &#39; Add the encrypted element data to the \n        &#39; EncryptedData object.\n        edElement.CipherData.CipherValue = encryptedElement\n\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; Replace the element from the original XmlDocument\n        &#39; object with the EncryptedData element.\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        EncryptedXml.ReplaceElement(elementToEncrypt, edElement, False)\n\n    End Sub\n\n\n    Sub Decrypt(ByVal Doc As XmlDocument, ByVal Alg As RSA, ByVal KeyName As String)\n        &#39; Check the arguments.  \n        If Doc Is Nothing Then\n            Throw New ArgumentNullException(&quot;Doc&quot;)\n        End If\n        If Alg Is Nothing Then\n            Throw New ArgumentNullException(&quot;Alg&quot;)\n        End If\n        If KeyName Is Nothing Then\n            Throw New ArgumentNullException(&quot;KeyName&quot;)\n        End If\n        &#39; Create a new EncryptedXml object.\n        Dim exml As New EncryptedXml(Doc)\n\n        &#39; Add a key-name mapping.\n        &#39; This method can only decrypt documents\n        &#39; that present the specified key name.\n        exml.AddKeyNameMapping(KeyName, Alg)\n\n        &#39; Decrypt the element.\n        exml.DecryptDocument()\n\n    End Sub\n\n\n    Sub InspectElement(ByVal Doc As XmlDocument)\n        &#39; Get the EncryptedData element from the XMLDocument object.\n        Dim encryptedData As XmlElement = Doc.GetElementsByTagName(&quot;EncryptedData&quot;)(0)\n\n        &#39; Create a new EncryptedData object.\n        Dim encData As New EncryptedData()\n\n        &#39; Load the XML from the document to\n        &#39; initialize the EncryptedData object.\n        encData.LoadXml(encryptedData)\n\n        &#39; Display the properties.\n        &#39; Most values are Null by default.\n\n\n        Console.WriteLine(&quot;EncryptedData.CipherData: &quot; + encData.CipherData.GetXml().InnerXml)\n        Console.WriteLine(&quot;EncryptedData.Encoding: &quot; + encData.Encoding)\n        Console.WriteLine(&quot;EncryptedData.EncryptionMethod: &quot; + encData.EncryptionMethod.GetXml().InnerXml)\n        If encData.EncryptionProperties.Count &gt;= 1 Then\n            Console.WriteLine(&quot;EncryptedData.EncryptionProperties: &quot; + encData.EncryptionProperties(0).GetXml().InnerXml)\n        End If\n\n        Console.WriteLine(&quot;EncryptedData.Id: &quot; + encData.Id)\n        Console.WriteLine(&quot;EncryptedData.KeyInfo: &quot; + encData.KeyInfo.GetXml().InnerXml)\n        Console.WriteLine(&quot;EncryptedData.MimeType: &quot; + encData.MimeType)\n\n    End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"Cryptography.XML.EncryptedData#1\">using System;\nusing System.Xml;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\n\nclass Program\n{\n\tstatic void Main(string[] args)\n\t{\n\n\t\t// Create an XmlDocument object.\n\t\tXmlDocument xmlDoc = new XmlDocument();\n\n\t\t// Load an XML file into the XmlDocument object.\n\t\ttry\n\t\t{\n\t\t\txmlDoc.PreserveWhitespace = true;\n\t\t\txmlDoc.Load(&quot;test.xml&quot;);\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\tConsole.WriteLine(e.Message);\n\t\t}\n\n\t\t// Create a new RSA key.  This key will encrypt a symmetric key,\n\t\t// which will then be imbedded in the XML document.  \n\t\tRSA rsaKey = new RSACryptoServiceProvider();\n\n\n\t\ttry\n\t\t{\n\t\t\t// Encrypt the &quot;creditcard&quot; element.\n\t\t\tEncrypt(xmlDoc, &quot;creditcard&quot;, rsaKey, &quot;rsaKey&quot;);\n\n\t\t\t// Inspect the EncryptedKey element.\n\t\t\tInspectElement(xmlDoc);\n\n\t\t\t// Decrypt the &quot;creditcard&quot; element.\n\t\t\tDecrypt(xmlDoc, rsaKey, &quot;rsaKey&quot;);\n\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\tConsole.WriteLine(e.Message);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\t// Clear the RSA key.\n\t\t\trsaKey.Clear();\n\t\t}\n\n\t}\n\n\tpublic static void Encrypt(XmlDocument Doc, string ElementToEncrypt, RSA Alg, string KeyName)\n\t{\n\t\t// Check the arguments.  \n\t\tif (Doc == null)\n\t\t\tthrow new ArgumentNullException(&quot;Doc&quot;);\n\t\tif (ElementToEncrypt == null)\n\t\t\tthrow new ArgumentNullException(&quot;ElementToEncrypt&quot;);\n\t\tif (Alg == null)\n\t\t\tthrow new ArgumentNullException(&quot;Alg&quot;);\n\n\t\t////////////////////////////////////////////////\n\t\t// Find the specified element in the XmlDocument\n\t\t// object and create a new XmlElemnt object.\n\t\t////////////////////////////////////////////////\n\n\t\tXmlElement elementToEncrypt = Doc.GetElementsByTagName(ElementToEncrypt)[0] as XmlElement;\n\n\t\t// Throw an XmlException if the element was not found.\n\t\tif (elementToEncrypt == null)\n\t\t{\n\t\t\tthrow new XmlException(&quot;The specified element was not found&quot;);\n\n\t\t}\n\n\t\t//////////////////////////////////////////////////\n\t\t// Create a new instance of the EncryptedXml class \n\t\t// and use it to encrypt the XmlElement with the \n\t\t// a new random symmetric key.\n\t\t//////////////////////////////////////////////////\n\n\t\t// Create a 256 bit Rijndael key.\n\t\tRijndaelManaged sessionKey = new RijndaelManaged();\n\t\tsessionKey.KeySize = 256;\n\n\t\tEncryptedXml eXml = new EncryptedXml();\n\n\t\tbyte[] encryptedElement = eXml.EncryptData(elementToEncrypt, sessionKey, false);\n\n\t\t////////////////////////////////////////////////\n\t\t// Construct an EncryptedData object and populate\n\t\t// it with the desired encryption information.\n\t\t////////////////////////////////////////////////\n\n\n\t\tEncryptedData edElement = new EncryptedData();\n\t\tedElement.Type = EncryptedXml.XmlEncElementUrl;\n\n\t\t// Create an EncryptionMethod element so that the \n\t\t// receiver knows which algorithm to use for decryption.\n\n\t\tedElement.EncryptionMethod = new EncryptionMethod(EncryptedXml.XmlEncAES256Url);\n\n\t\t// Encrypt the session key and add it to an EncryptedKey element.\n\t\tEncryptedKey ek = new EncryptedKey();\n\n\t\tbyte[] encryptedKey = EncryptedXml.EncryptKey(sessionKey.Key, Alg, false);\n\n\t\tek.CipherData = new CipherData(encryptedKey);\n\n\t\tek.EncryptionMethod = new EncryptionMethod(EncryptedXml.XmlEncRSA15Url);\n\n\t\t// Set the KeyInfo element to specify the\n\t\t// name of the RSA key.\n\n\t\t// Create a new KeyInfo element.\n\t\tedElement.KeyInfo = new KeyInfo();\n\n\t\t// Create a new KeyInfoName element.\n\t\tKeyInfoName kin = new KeyInfoName();\n\n\t\t// Specify a name for the key.\n\t\tkin.Value = KeyName;\n\n\t\t// Add the KeyInfoName element to the \n\t\t// EncryptedKey object.\n\t\tek.KeyInfo.AddClause(kin);\n\n\t\t// Add the encrypted key to the \n\t\t// EncryptedData object.\n\n\t\tedElement.KeyInfo.AddClause(new KeyInfoEncryptedKey(ek));\n\n\t\t// Add the encrypted element data to the \n\t\t// EncryptedData object.\n\t\tedElement.CipherData.CipherValue = encryptedElement;\n\n\t\t////////////////////////////////////////////////////\n\t\t// Replace the element from the original XmlDocument\n\t\t// object with the EncryptedData element.\n\t\t////////////////////////////////////////////////////\n\n\t\tEncryptedXml.ReplaceElement(elementToEncrypt, edElement, false);\n\n\t}\n\n\tpublic static void Decrypt(XmlDocument Doc, RSA Alg, string KeyName)\n\t{\n\t\t// Check the arguments.  \n\t\tif (Doc == null)\n\t\t\tthrow new ArgumentNullException(&quot;Doc&quot;);\n\t\tif (Alg == null)\n\t\t\tthrow new ArgumentNullException(&quot;Alg&quot;);\n\t\tif (KeyName == null)\n\t\t\tthrow new ArgumentNullException(&quot;KeyName&quot;);\n\n\t\t// Create a new EncryptedXml object.\n\t\tEncryptedXml exml = new EncryptedXml(Doc);\n\n\t\t// Add a key-name mapping.\n\t\t// This method can only decrypt documents\n\t\t// that present the specified key name.\n\t\texml.AddKeyNameMapping(KeyName, Alg);\n\n\t\t// Decrypt the element.\n\t\texml.DecryptDocument();\n\n\t}\n\n\tstatic void InspectElement(XmlDocument Doc)\n\t{\n\t\t// Get the EncryptedData element from the XMLDocument object.\n\t\tXmlElement encryptedData = Doc.GetElementsByTagName(&quot;EncryptedData&quot;)[0] as XmlElement;\n\n\t\t// Create a new EncryptedData object.\n\t\tEncryptedData encData = new EncryptedData();\n\n\t\t// Load the XML from the document to\n\t\t// initialize the EncryptedData object.\n\t\tencData.LoadXml(encryptedData);\n\n\t\t// Display the properties.\n\t\t// Most values are Null by default.\n\n\n\t\t\n\t\tConsole.WriteLine(&quot;EncryptedData.CipherData: &quot; + encData.CipherData.GetXml().InnerXml);\n\t\tConsole.WriteLine(&quot;EncryptedData.Encoding: &quot; + encData.Encoding);\n\t\tConsole.WriteLine(&quot;EncryptedData.EncryptionMethod: &quot; + encData.EncryptionMethod.GetXml().InnerXml);\n\t\tif (encData.EncryptionProperties.Count &gt;= 1)\n\t\t{\n\t\t\tConsole.WriteLine(&quot;EncryptedData.EncryptionProperties: &quot; + encData.EncryptionProperties[0].GetXml().InnerXml);\n\t\t}\n\n\t\tConsole.WriteLine(&quot;EncryptedData.Id: &quot; + encData.Id);\n\t\tConsole.WriteLine(&quot;EncryptedData.KeyInfo: &quot; + encData.KeyInfo.GetXml().InnerXml);\n\t\tConsole.WriteLine(&quot;EncryptedData.MimeType: &quot; + encData.MimeType);\n\t}\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_EncryptedType_MimeType\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_EncryptedType_MimeType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MimeType</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the <code>MimeType</code> attribute of an <a class=\"xref\" href=\"system.security.cryptography.xml.encryptedtype\" data-linktype=\"relative-path\">EncryptedType</a> instance in XML encryption.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string MimeType { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that describes the media type of the encrypted data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>MimeType</code> attribute is an optional attribute that describes the media type of the encrypted data. The value of this attribute is a string with values defined by <a href=\"http://www.ietf.org/rfc/rfc2045.txt\" data-linktype=\"external\">RFC 2045: Multipurpose Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies</a>. For example, if the data that is encrypted is a base64-encoded PNG, the <code>Encoding</code> attribute would be &#39;<a href=\"http://www.w3.org/2000/09/xmldsig#base64\" data-linktype=\"external\">http://www.w3.org/2000/09/xmldsig#base64</a>&#39; and the <code>MimeType</code> would be &#39;image/png&#39;. This attribute is optional and no validation of the <code>MimeType</code> information is required. The attribute does not indicate that the encryption application must do any additional processing. Note that this information may not be necessary if it is already bound to the identifier in the <code>Type</code> attribute.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to encrypt and decrypt an XML element using the <a class=\"xref\" href=\"system.security.cryptography.xml.encrypteddata\" data-linktype=\"relative-path\">EncryptedData</a> class that derives from the <a class=\"xref\" href=\"system.security.cryptography.xml.encryptedtype\" data-linktype=\"relative-path\">EncryptedType</a> class. This sample then displays various properties of the <a class=\"xref\" href=\"system.security.cryptography.xml.encrypteddata\" data-linktype=\"relative-path\">EncryptedData</a> class to the console.  </p>\n<pre><code class=\"lang-vb\" name=\"Cryptography.XML.EncryptedData#1\">Imports System\nImports System.Xml\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\n\n\n\nModule Program\n\n    Sub Main(ByVal args() As String)\n\n        &#39; Create an XmlDocument object.\n        Dim xmlDoc As New XmlDocument()\n\n        &#39; Load an XML file into the XmlDocument object.\n        Try\n            xmlDoc.PreserveWhitespace = True\n            xmlDoc.Load(&quot;test.xml&quot;)\n        Catch e As Exception\n            Console.WriteLine(e.Message)\n        End Try\n\n        &#39; Create a new RSA key.  This key will encrypt a symmetric key,\n        &#39; which will then be imbedded in the XML document.  \n        Dim rsaKey As New RSACryptoServiceProvider()\n\n\n        Try\n            &#39; Encrypt the &quot;creditcard&quot; element.\n            Encrypt(xmlDoc, &quot;creditcard&quot;, rsaKey, &quot;rsaKey&quot;)\n\n            &#39; Inspect the EncryptedKey element.\n            InspectElement(xmlDoc)\n\n            &#39; Decrypt the &quot;creditcard&quot; element.\n            Decrypt(xmlDoc, rsaKey, &quot;rsaKey&quot;)\n\n        Catch e As Exception\n            Console.WriteLine(e.Message)\n        Finally\n            &#39; Clear the RSA key.\n            rsaKey.Clear()\n        End Try\n\n    End Sub\n\n\n    Sub Encrypt(ByVal Doc As XmlDocument, ByVal ElementToEncryptParam As String, ByVal Alg As RSA, ByVal KeyName As String)\n        &#39; Check the arguments.  \n        If Doc Is Nothing Then\n            Throw New ArgumentNullException(&quot;Doc&quot;)\n        End If\n        If ElementToEncryptParam Is Nothing Then\n            Throw New ArgumentNullException(&quot;ElementToEncrypt&quot;)\n        End If\n        If Alg Is Nothing Then\n            Throw New ArgumentNullException(&quot;Alg&quot;)\n        End If\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; Find the specified element in the XmlDocument\n        &#39; object and create a new XmlElemnt object.\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        Dim elementToEncrypt As XmlElement = Doc.GetElementsByTagName(ElementToEncryptParam)(0)\n\n\n        &#39; Throw an XmlException if the element was not found.\n        If elementToEncrypt Is Nothing Then\n            Throw New XmlException(&quot;The specified element was not found&quot;)\n        End If\n\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; Create a new instance of the EncryptedXml class \n        &#39; and use it to encrypt the XmlElement with the \n        &#39; a new random symmetric key.\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; Create a 256 bit Rijndael key.\n        Dim sessionKey As New RijndaelManaged()\n        sessionKey.KeySize = 256\n\n        Dim eXml As New EncryptedXml()\n\n        Dim encryptedElement As Byte() = eXml.EncryptData(elementToEncrypt, sessionKey, False)\n\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; Construct an EncryptedData object and populate\n        &#39; it with the desired encryption information.\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n\n        Dim edElement As New EncryptedData()\n        edElement.Type = EncryptedXml.XmlEncElementUrl\n\n        &#39; Create an EncryptionMethod element so that the \n        &#39; receiver knows which algorithm to use for decryption.\n        edElement.EncryptionMethod = New EncryptionMethod(EncryptedXml.XmlEncAES256Url)\n\n        &#39; Encrypt the session key and add it to an EncryptedKey element.\n        Dim ek As New EncryptedKey()\n\n        Dim encryptedKey As Byte() = EncryptedXml.EncryptKey(sessionKey.Key, Alg, False)\n\n        ek.CipherData = New CipherData(encryptedKey)\n\n        ek.EncryptionMethod = New EncryptionMethod(EncryptedXml.XmlEncRSA15Url)\n\n        &#39; Set the KeyInfo element to specify the\n        &#39; name of the RSA key.\n        &#39; Create a new KeyInfo element.\n        edElement.KeyInfo = New KeyInfo()\n\n        &#39; Create a new KeyInfoName element.\n        Dim kin As New KeyInfoName()\n\n        &#39; Specify a name for the key.\n        kin.Value = KeyName\n\n        &#39; Add the KeyInfoName element to the \n        &#39; EncryptedKey object.\n        ek.KeyInfo.AddClause(kin)\n\n        &#39; Add the encrypted key to the \n        &#39; EncryptedData object.\n        edElement.KeyInfo.AddClause(New KeyInfoEncryptedKey(ek))\n\n        &#39; Add the encrypted element data to the \n        &#39; EncryptedData object.\n        edElement.CipherData.CipherValue = encryptedElement\n\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; Replace the element from the original XmlDocument\n        &#39; object with the EncryptedData element.\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        EncryptedXml.ReplaceElement(elementToEncrypt, edElement, False)\n\n    End Sub\n\n\n    Sub Decrypt(ByVal Doc As XmlDocument, ByVal Alg As RSA, ByVal KeyName As String)\n        &#39; Check the arguments.  \n        If Doc Is Nothing Then\n            Throw New ArgumentNullException(&quot;Doc&quot;)\n        End If\n        If Alg Is Nothing Then\n            Throw New ArgumentNullException(&quot;Alg&quot;)\n        End If\n        If KeyName Is Nothing Then\n            Throw New ArgumentNullException(&quot;KeyName&quot;)\n        End If\n        &#39; Create a new EncryptedXml object.\n        Dim exml As New EncryptedXml(Doc)\n\n        &#39; Add a key-name mapping.\n        &#39; This method can only decrypt documents\n        &#39; that present the specified key name.\n        exml.AddKeyNameMapping(KeyName, Alg)\n\n        &#39; Decrypt the element.\n        exml.DecryptDocument()\n\n    End Sub\n\n\n    Sub InspectElement(ByVal Doc As XmlDocument)\n        &#39; Get the EncryptedData element from the XMLDocument object.\n        Dim encryptedData As XmlElement = Doc.GetElementsByTagName(&quot;EncryptedData&quot;)(0)\n\n        &#39; Create a new EncryptedData object.\n        Dim encData As New EncryptedData()\n\n        &#39; Load the XML from the document to\n        &#39; initialize the EncryptedData object.\n        encData.LoadXml(encryptedData)\n\n        &#39; Display the properties.\n        &#39; Most values are Null by default.\n\n\n        Console.WriteLine(&quot;EncryptedData.CipherData: &quot; + encData.CipherData.GetXml().InnerXml)\n        Console.WriteLine(&quot;EncryptedData.Encoding: &quot; + encData.Encoding)\n        Console.WriteLine(&quot;EncryptedData.EncryptionMethod: &quot; + encData.EncryptionMethod.GetXml().InnerXml)\n        If encData.EncryptionProperties.Count &gt;= 1 Then\n            Console.WriteLine(&quot;EncryptedData.EncryptionProperties: &quot; + encData.EncryptionProperties(0).GetXml().InnerXml)\n        End If\n\n        Console.WriteLine(&quot;EncryptedData.Id: &quot; + encData.Id)\n        Console.WriteLine(&quot;EncryptedData.KeyInfo: &quot; + encData.KeyInfo.GetXml().InnerXml)\n        Console.WriteLine(&quot;EncryptedData.MimeType: &quot; + encData.MimeType)\n\n    End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"Cryptography.XML.EncryptedData#1\">using System;\nusing System.Xml;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\n\nclass Program\n{\n\tstatic void Main(string[] args)\n\t{\n\n\t\t// Create an XmlDocument object.\n\t\tXmlDocument xmlDoc = new XmlDocument();\n\n\t\t// Load an XML file into the XmlDocument object.\n\t\ttry\n\t\t{\n\t\t\txmlDoc.PreserveWhitespace = true;\n\t\t\txmlDoc.Load(&quot;test.xml&quot;);\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\tConsole.WriteLine(e.Message);\n\t\t}\n\n\t\t// Create a new RSA key.  This key will encrypt a symmetric key,\n\t\t// which will then be imbedded in the XML document.  \n\t\tRSA rsaKey = new RSACryptoServiceProvider();\n\n\n\t\ttry\n\t\t{\n\t\t\t// Encrypt the &quot;creditcard&quot; element.\n\t\t\tEncrypt(xmlDoc, &quot;creditcard&quot;, rsaKey, &quot;rsaKey&quot;);\n\n\t\t\t// Inspect the EncryptedKey element.\n\t\t\tInspectElement(xmlDoc);\n\n\t\t\t// Decrypt the &quot;creditcard&quot; element.\n\t\t\tDecrypt(xmlDoc, rsaKey, &quot;rsaKey&quot;);\n\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\tConsole.WriteLine(e.Message);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\t// Clear the RSA key.\n\t\t\trsaKey.Clear();\n\t\t}\n\n\t}\n\n\tpublic static void Encrypt(XmlDocument Doc, string ElementToEncrypt, RSA Alg, string KeyName)\n\t{\n\t\t// Check the arguments.  \n\t\tif (Doc == null)\n\t\t\tthrow new ArgumentNullException(&quot;Doc&quot;);\n\t\tif (ElementToEncrypt == null)\n\t\t\tthrow new ArgumentNullException(&quot;ElementToEncrypt&quot;);\n\t\tif (Alg == null)\n\t\t\tthrow new ArgumentNullException(&quot;Alg&quot;);\n\n\t\t////////////////////////////////////////////////\n\t\t// Find the specified element in the XmlDocument\n\t\t// object and create a new XmlElemnt object.\n\t\t////////////////////////////////////////////////\n\n\t\tXmlElement elementToEncrypt = Doc.GetElementsByTagName(ElementToEncrypt)[0] as XmlElement;\n\n\t\t// Throw an XmlException if the element was not found.\n\t\tif (elementToEncrypt == null)\n\t\t{\n\t\t\tthrow new XmlException(&quot;The specified element was not found&quot;);\n\n\t\t}\n\n\t\t//////////////////////////////////////////////////\n\t\t// Create a new instance of the EncryptedXml class \n\t\t// and use it to encrypt the XmlElement with the \n\t\t// a new random symmetric key.\n\t\t//////////////////////////////////////////////////\n\n\t\t// Create a 256 bit Rijndael key.\n\t\tRijndaelManaged sessionKey = new RijndaelManaged();\n\t\tsessionKey.KeySize = 256;\n\n\t\tEncryptedXml eXml = new EncryptedXml();\n\n\t\tbyte[] encryptedElement = eXml.EncryptData(elementToEncrypt, sessionKey, false);\n\n\t\t////////////////////////////////////////////////\n\t\t// Construct an EncryptedData object and populate\n\t\t// it with the desired encryption information.\n\t\t////////////////////////////////////////////////\n\n\n\t\tEncryptedData edElement = new EncryptedData();\n\t\tedElement.Type = EncryptedXml.XmlEncElementUrl;\n\n\t\t// Create an EncryptionMethod element so that the \n\t\t// receiver knows which algorithm to use for decryption.\n\n\t\tedElement.EncryptionMethod = new EncryptionMethod(EncryptedXml.XmlEncAES256Url);\n\n\t\t// Encrypt the session key and add it to an EncryptedKey element.\n\t\tEncryptedKey ek = new EncryptedKey();\n\n\t\tbyte[] encryptedKey = EncryptedXml.EncryptKey(sessionKey.Key, Alg, false);\n\n\t\tek.CipherData = new CipherData(encryptedKey);\n\n\t\tek.EncryptionMethod = new EncryptionMethod(EncryptedXml.XmlEncRSA15Url);\n\n\t\t// Set the KeyInfo element to specify the\n\t\t// name of the RSA key.\n\n\t\t// Create a new KeyInfo element.\n\t\tedElement.KeyInfo = new KeyInfo();\n\n\t\t// Create a new KeyInfoName element.\n\t\tKeyInfoName kin = new KeyInfoName();\n\n\t\t// Specify a name for the key.\n\t\tkin.Value = KeyName;\n\n\t\t// Add the KeyInfoName element to the \n\t\t// EncryptedKey object.\n\t\tek.KeyInfo.AddClause(kin);\n\n\t\t// Add the encrypted key to the \n\t\t// EncryptedData object.\n\n\t\tedElement.KeyInfo.AddClause(new KeyInfoEncryptedKey(ek));\n\n\t\t// Add the encrypted element data to the \n\t\t// EncryptedData object.\n\t\tedElement.CipherData.CipherValue = encryptedElement;\n\n\t\t////////////////////////////////////////////////////\n\t\t// Replace the element from the original XmlDocument\n\t\t// object with the EncryptedData element.\n\t\t////////////////////////////////////////////////////\n\n\t\tEncryptedXml.ReplaceElement(elementToEncrypt, edElement, false);\n\n\t}\n\n\tpublic static void Decrypt(XmlDocument Doc, RSA Alg, string KeyName)\n\t{\n\t\t// Check the arguments.  \n\t\tif (Doc == null)\n\t\t\tthrow new ArgumentNullException(&quot;Doc&quot;);\n\t\tif (Alg == null)\n\t\t\tthrow new ArgumentNullException(&quot;Alg&quot;);\n\t\tif (KeyName == null)\n\t\t\tthrow new ArgumentNullException(&quot;KeyName&quot;);\n\n\t\t// Create a new EncryptedXml object.\n\t\tEncryptedXml exml = new EncryptedXml(Doc);\n\n\t\t// Add a key-name mapping.\n\t\t// This method can only decrypt documents\n\t\t// that present the specified key name.\n\t\texml.AddKeyNameMapping(KeyName, Alg);\n\n\t\t// Decrypt the element.\n\t\texml.DecryptDocument();\n\n\t}\n\n\tstatic void InspectElement(XmlDocument Doc)\n\t{\n\t\t// Get the EncryptedData element from the XMLDocument object.\n\t\tXmlElement encryptedData = Doc.GetElementsByTagName(&quot;EncryptedData&quot;)[0] as XmlElement;\n\n\t\t// Create a new EncryptedData object.\n\t\tEncryptedData encData = new EncryptedData();\n\n\t\t// Load the XML from the document to\n\t\t// initialize the EncryptedData object.\n\t\tencData.LoadXml(encryptedData);\n\n\t\t// Display the properties.\n\t\t// Most values are Null by default.\n\n\n\t\t\n\t\tConsole.WriteLine(&quot;EncryptedData.CipherData: &quot; + encData.CipherData.GetXml().InnerXml);\n\t\tConsole.WriteLine(&quot;EncryptedData.Encoding: &quot; + encData.Encoding);\n\t\tConsole.WriteLine(&quot;EncryptedData.EncryptionMethod: &quot; + encData.EncryptionMethod.GetXml().InnerXml);\n\t\tif (encData.EncryptionProperties.Count &gt;= 1)\n\t\t{\n\t\t\tConsole.WriteLine(&quot;EncryptedData.EncryptionProperties: &quot; + encData.EncryptionProperties[0].GetXml().InnerXml);\n\t\t}\n\n\t\tConsole.WriteLine(&quot;EncryptedData.Id: &quot; + encData.Id);\n\t\tConsole.WriteLine(&quot;EncryptedData.KeyInfo: &quot; + encData.KeyInfo.GetXml().InnerXml);\n\t\tConsole.WriteLine(&quot;EncryptedData.MimeType: &quot; + encData.MimeType);\n\t}\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_EncryptedType_Type\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_EncryptedType_Type_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Type</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the <code>Type</code> attribute of an <a class=\"xref\" href=\"system.security.cryptography.xml.encryptedtype\" data-linktype=\"relative-path\">EncryptedType</a> instance in XML encryption.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string Type { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that describes the text form of the encrypted data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>Type</code> attribute is an optional attribute that identifies type information about the text form of the encrypted content. While optional, this is an important attribute and is used in mandatory processing described in <a href=\"http://www.w3.org/TR/xmlenc-core/\" data-linktype=\"external\">Processing Rules: Decryption</a> (section 4.2) of the XML Encryption Syntax and Processing specification (<a href=\"http://www.w3.org/TR/xmlenc-core/\" data-linktype=\"external\">http://www.w3.org/TR/xmlenc-core/</a>). If the <code>&lt;EncryptedData&gt;</code> element contains data of type <code>&#39;element&#39;</code> or element <code>&#39;content&#39;</code>, and replaces that data in an XML document, it is strongly recommended that the <code>Type</code> attribute be provided. Without this information, the application attempting to decrypt the information will be unable to automatically restore the XML document to its original text form.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to encrypt and decrypt an XML element using the <a class=\"xref\" href=\"system.security.cryptography.xml.encrypteddata\" data-linktype=\"relative-path\">EncryptedData</a> class that derives from the <a class=\"xref\" href=\"system.security.cryptography.xml.encryptedtype\" data-linktype=\"relative-path\">EncryptedType</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"Cryptography.XML-EncryptedData - EncryptedType#1\">using System;\nusing System.Xml;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n\n        // Create an XmlDocument object.\n        XmlDocument xmlDoc = new XmlDocument();\n\n        // Load an XML file into the XmlDocument object.\n        try\n        {\n            xmlDoc.PreserveWhitespace = true;\n            xmlDoc.Load(&quot;test.xml&quot;);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(e.Message);\n        }\n\n        // Create a new TripleDES key. \n        TripleDESCryptoServiceProvider tDESkey = new TripleDESCryptoServiceProvider();\n\n\n        try\n        {\n            // Encrypt the &quot;creditcard&quot; element.\n            Encrypt(xmlDoc, &quot;creditcard&quot;, tDESkey);\n\n            // Display the encrypted XML to the console.\n            Console.WriteLine(&quot;Encrypted XML:&quot;);\n            Console.WriteLine();\n            Console.WriteLine(xmlDoc.OuterXml);\n\n            // Decrypt the &quot;creditcard&quot; element.\n            Decrypt(xmlDoc, tDESkey);\n\n            // Display the encrypted XML to the console.\n            Console.WriteLine();\n            Console.WriteLine(&quot;Decrypted XML:&quot;);\n            Console.WriteLine();\n            Console.WriteLine(xmlDoc.OuterXml);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(e.Message);\n        }\n        finally\n        {\n            // Clear the TripleDES key.\n            tDESkey.Clear();\n        }\n\n    }\n\n    public static void Encrypt(XmlDocument Doc, string ElementToEncrypt, TripleDESCryptoServiceProvider Alg)\n    {\n\n        ////////////////////////////////////////////////\n        // Find the specified element in the XmlDocument\n        // object and create a new XmlElemnt object.\n        ////////////////////////////////////////////////\n\n        XmlElement elementToEncrypt = Doc.GetElementsByTagName(ElementToEncrypt)[0] as XmlElement;\n\n        // Throw an XmlException if the element was not found.\n        if (elementToEncrypt == null)\n        {\n            throw new XmlException(&quot;The specified element was not found&quot;);\n\n        }\n\n        //////////////////////////////////////////////////\n        // Create a new instance of the EncryptedXml class \n        // and use it to encrypt the XmlElement with the \n        // symmetric key.\n        //////////////////////////////////////////////////\n\n        EncryptedXml eXml = new EncryptedXml();\n\n        byte[] encryptedElement = eXml.EncryptData(elementToEncrypt, Alg, false);\n\n        ////////////////////////////////////////////////\n        // Construct an EncryptedData object and populate\n        // it with the desired encryption information.\n        ////////////////////////////////////////////////\n\n\n        EncryptedData edElement = new EncryptedData();\n        \n        edElement.Type = EncryptedXml.XmlEncElementUrl;\n\n  \n        // Create an EncryptionMethod element so that the \n        // receiver knows which algorithm to use for decryption.\n        // Determine what kind of algorithm is being used and\n        // supply the appropriate URL to the EncryptionMethod element.\n\n        edElement.EncryptionMethod = new EncryptionMethod(EncryptedXml.XmlEncTripleDESUrl);\n\n        // Add the encrypted element data to the \n        // EncryptedData object.\n        edElement.CipherData.CipherValue = encryptedElement;\n\n        ////////////////////////////////////////////////////\n        // Replace the element from the original XmlDocument\n        // object with the EncryptedData element.\n        ////////////////////////////////////////////////////\n\n        EncryptedXml.ReplaceElement(elementToEncrypt, edElement, false);\n\n    }\n\n    public static void Decrypt(XmlDocument Doc, SymmetricAlgorithm Alg)\n    {\n\n        // Find the EncryptedData element in the XmlDocument.\n        XmlElement encryptedElement = Doc.GetElementsByTagName(&quot;EncryptedData&quot;)[0] as XmlElement;\n\n        // If the EncryptedData element was not found, throw an exception.\n        if (encryptedElement == null)\n        {\n            throw new XmlException(&quot;The EncryptedData element was not found.&quot;);\n        }\n\n        // Create an EncryptedData object and populate it.\n        EncryptedData edElement = new EncryptedData();\n        edElement.LoadXml(encryptedElement);\n\n        // Create a new EncryptedXml object.\n        EncryptedXml exml = new EncryptedXml();\n\n        // Decrypt the element using the symmetric key.\n        byte[] rgbOutput = exml.DecryptData(edElement, Alg);\n\n        // Replace the encryptedData element with the plaintext XML element.\n        exml.ReplaceData(encryptedElement, rgbOutput);\n\n    }\n\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.XML-EncryptedData - EncryptedType#1\">Imports System\nImports System.Xml\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\n\n\n\nModule Program\n\n    Sub Main(ByVal args() As String)\n\n        &#39; Create an XmlDocument object.\n        Dim xmlDoc As New XmlDocument()\n\n        &#39; Load an XML file into the XmlDocument object.\n        Try\n            xmlDoc.PreserveWhitespace = True\n            xmlDoc.Load(&quot;test.xml&quot;)\n        Catch e As Exception\n            Console.WriteLine(e.Message)\n        End Try\n\n        &#39; Create a new TripleDES key. \n        Dim tDESkey As New TripleDESCryptoServiceProvider()\n\n\n        Try\n            &#39; Encrypt the &quot;creditcard&quot; element.\n            Encrypt(xmlDoc, &quot;creditcard&quot;, tDESkey)\n\n            &#39; Display the encrypted XML to the console.\n            Console.WriteLine(&quot;Encrypted XML:&quot;)\n            Console.WriteLine()\n            Console.WriteLine(xmlDoc.OuterXml)\n\n            &#39; Decrypt the &quot;creditcard&quot; element.\n            Decrypt(xmlDoc, tDESkey)\n\n            &#39; Display the encrypted XML to the console.\n            Console.WriteLine()\n            Console.WriteLine(&quot;Decrypted XML:&quot;)\n            Console.WriteLine()\n            Console.WriteLine(xmlDoc.OuterXml)\n        Catch e As Exception\n            Console.WriteLine(e.Message)\n        Finally\n            &#39; Clear the TripleDES key.\n            tDESkey.Clear()\n        End Try\n\n    End Sub\n\n\n    Sub Encrypt(ByVal Doc As XmlDocument, ByVal ElementToEncryptString As String, ByVal Alg As TripleDESCryptoServiceProvider)\n\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; Find the specified element in the XmlDocument\n        &#39; object and create a new XmlElemnt object.\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n\n        Dim elementToEncrypt As XmlElement = Doc.GetElementsByTagName(ElementToEncryptString)(0)\n\n\n        &#39; Throw an XmlException if the element was not found.\n        If elementToEncrypt Is Nothing Then\n            Throw New XmlException(&quot;The specified element was not found&quot;)\n        End If\n\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; Create a new instance of the EncryptedXml class \n        &#39; and use it to encrypt the XmlElement with the \n        &#39; symmetric key.\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n\n        Dim eXml As New EncryptedXml()\n\n        Dim encryptedElement As Byte() = eXml.EncryptData(elementToEncrypt, Alg, False)\n\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; Construct an EncryptedData object and populate\n        &#39; it with the desired encryption information.\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n\n        Dim edElement As New EncryptedData()\n\n        edElement.Type = EncryptedXml.XmlEncElementUrl\n\n\n        &#39; Create an EncryptionMethod element so that the \n        &#39; receiver knows which algorithm to use for decryption.\n        &#39; Determine what kind of algorithm is being used and\n        &#39; supply the appropriate URL to the EncryptionMethod element.\n        edElement.EncryptionMethod = New EncryptionMethod(EncryptedXml.XmlEncTripleDESUrl)\n\n        &#39; Add the encrypted element data to the \n        &#39; EncryptedData object.\n        edElement.CipherData.CipherValue = encryptedElement\n\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; Replace the element from the original XmlDocument\n        &#39; object with the EncryptedData element.\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        EncryptedXml.ReplaceElement(elementToEncrypt, edElement, False)\n\n    End Sub\n\n\n    Sub Decrypt(ByVal Doc As XmlDocument, ByVal Alg As SymmetricAlgorithm)\n\n        &#39; Find the EncryptedData element in the XmlDocument.\n        Dim encryptedElement As XmlElement = Doc.GetElementsByTagName(&quot;EncryptedData&quot;)(0) \n   \n\n        &#39; If the EncryptedData element was not found, throw an exception.\n        If encryptedElement Is Nothing Then\n            Throw New XmlException(&quot;The EncryptedData element was not found.&quot;)\n        End If\n\n        &#39; Create an EncryptedData object and populate it.\n        Dim edElement As New EncryptedData()\n        edElement.LoadXml(encryptedElement)\n\n        &#39; Create a new EncryptedXml object.\n        Dim exml As New EncryptedXml()\n\n        &#39; Decrypt the element using the symmetric key.\n        Dim rgbOutput As Byte() = exml.DecryptData(edElement, Alg)\n\n        &#39; Replace the encryptedData element with the plaintext XML element.\n        exml.ReplaceData(encryptedElement, rgbOutput)\n\n    End Sub\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_EncryptedType_AddProperty_System_Security_Cryptography_Xml_EncryptionProperty_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_EncryptedType_AddProperty_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddProperty(EncryptionProperty)</div>        \r\n          </div>\r\n    \r\n            <p>Adds an <code>&lt;EncryptionProperty&gt;</code> child element to the <code>&lt;EncryptedProperties&gt;</code> element in the current <a class=\"xref\" href=\"system.security.cryptography.xml.encryptedtype\" data-linktype=\"relative-path\">EncryptedType</a> object in XML encryption.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AddProperty (System.Security.Cryptography.Xml.EncryptionProperty ep);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ep</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.encryptionproperty\" data-linktype=\"relative-path\">EncryptionProperty</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.security.cryptography.xml.encryptionproperty\" data-linktype=\"relative-path\">EncryptionProperty</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method can be used to add <code>&lt;EncryptionProperty&gt;</code> child elements to the <code>&lt;EncryptedProperties&gt;</code> element. The <code>&lt;EncryptedProperties&gt;</code> element provides additional information for the <code>&lt;EncryptedType&gt;</code> element.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_EncryptedType_GetXml\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_EncryptedType_GetXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetXml()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the XML representation of the <a class=\"xref\" href=\"system.security.cryptography.xml.encryptedtype\" data-linktype=\"relative-path\">EncryptedType</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract System.Xml.XmlElement GetXml ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a> object that represents the <code>&lt;EncryptedType&gt;</code> element in XML encryption.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to output the <code>&lt;EncryptedType&gt;</code> element in XML.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_EncryptedType_LoadXml_System_Xml_XmlElement_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_EncryptedType_LoadXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LoadXml(XmlElement)</div>        \r\n          </div>\r\n    \r\n            <p>Loads XML information into the <code>&lt;EncryptedType&gt;</code> element in XML encryption.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract void LoadXml (System.Xml.XmlElement value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a> object representing an XML element to use in the <code>&lt;EncryptedType&gt;</code> element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>value</code> provided is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to load an existing XML element into the <a class=\"xref\" href=\"system.security.cryptography.xml.encryptedtype\" data-linktype=\"relative-path\">EncryptedType</a> object.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to encrypt and decrypt an XML element using the <a class=\"xref\" href=\"system.security.cryptography.xml.encrypteddata\" data-linktype=\"relative-path\">EncryptedData</a> class that derives from the <a class=\"xref\" href=\"system.security.cryptography.xml.encryptedtype\" data-linktype=\"relative-path\">EncryptedType</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"Cryptography.XML-EncryptedData - EncryptedType#1\">using System;\nusing System.Xml;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n\n        // Create an XmlDocument object.\n        XmlDocument xmlDoc = new XmlDocument();\n\n        // Load an XML file into the XmlDocument object.\n        try\n        {\n            xmlDoc.PreserveWhitespace = true;\n            xmlDoc.Load(&quot;test.xml&quot;);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(e.Message);\n        }\n\n        // Create a new TripleDES key. \n        TripleDESCryptoServiceProvider tDESkey = new TripleDESCryptoServiceProvider();\n\n\n        try\n        {\n            // Encrypt the &quot;creditcard&quot; element.\n            Encrypt(xmlDoc, &quot;creditcard&quot;, tDESkey);\n\n            // Display the encrypted XML to the console.\n            Console.WriteLine(&quot;Encrypted XML:&quot;);\n            Console.WriteLine();\n            Console.WriteLine(xmlDoc.OuterXml);\n\n            // Decrypt the &quot;creditcard&quot; element.\n            Decrypt(xmlDoc, tDESkey);\n\n            // Display the encrypted XML to the console.\n            Console.WriteLine();\n            Console.WriteLine(&quot;Decrypted XML:&quot;);\n            Console.WriteLine();\n            Console.WriteLine(xmlDoc.OuterXml);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(e.Message);\n        }\n        finally\n        {\n            // Clear the TripleDES key.\n            tDESkey.Clear();\n        }\n\n    }\n\n    public static void Encrypt(XmlDocument Doc, string ElementToEncrypt, TripleDESCryptoServiceProvider Alg)\n    {\n\n        ////////////////////////////////////////////////\n        // Find the specified element in the XmlDocument\n        // object and create a new XmlElemnt object.\n        ////////////////////////////////////////////////\n\n        XmlElement elementToEncrypt = Doc.GetElementsByTagName(ElementToEncrypt)[0] as XmlElement;\n\n        // Throw an XmlException if the element was not found.\n        if (elementToEncrypt == null)\n        {\n            throw new XmlException(&quot;The specified element was not found&quot;);\n\n        }\n\n        //////////////////////////////////////////////////\n        // Create a new instance of the EncryptedXml class \n        // and use it to encrypt the XmlElement with the \n        // symmetric key.\n        //////////////////////////////////////////////////\n\n        EncryptedXml eXml = new EncryptedXml();\n\n        byte[] encryptedElement = eXml.EncryptData(elementToEncrypt, Alg, false);\n\n        ////////////////////////////////////////////////\n        // Construct an EncryptedData object and populate\n        // it with the desired encryption information.\n        ////////////////////////////////////////////////\n\n\n        EncryptedData edElement = new EncryptedData();\n        \n        edElement.Type = EncryptedXml.XmlEncElementUrl;\n\n  \n        // Create an EncryptionMethod element so that the \n        // receiver knows which algorithm to use for decryption.\n        // Determine what kind of algorithm is being used and\n        // supply the appropriate URL to the EncryptionMethod element.\n\n        edElement.EncryptionMethod = new EncryptionMethod(EncryptedXml.XmlEncTripleDESUrl);\n\n        // Add the encrypted element data to the \n        // EncryptedData object.\n        edElement.CipherData.CipherValue = encryptedElement;\n\n        ////////////////////////////////////////////////////\n        // Replace the element from the original XmlDocument\n        // object with the EncryptedData element.\n        ////////////////////////////////////////////////////\n\n        EncryptedXml.ReplaceElement(elementToEncrypt, edElement, false);\n\n    }\n\n    public static void Decrypt(XmlDocument Doc, SymmetricAlgorithm Alg)\n    {\n\n        // Find the EncryptedData element in the XmlDocument.\n        XmlElement encryptedElement = Doc.GetElementsByTagName(&quot;EncryptedData&quot;)[0] as XmlElement;\n\n        // If the EncryptedData element was not found, throw an exception.\n        if (encryptedElement == null)\n        {\n            throw new XmlException(&quot;The EncryptedData element was not found.&quot;);\n        }\n\n        // Create an EncryptedData object and populate it.\n        EncryptedData edElement = new EncryptedData();\n        edElement.LoadXml(encryptedElement);\n\n        // Create a new EncryptedXml object.\n        EncryptedXml exml = new EncryptedXml();\n\n        // Decrypt the element using the symmetric key.\n        byte[] rgbOutput = exml.DecryptData(edElement, Alg);\n\n        // Replace the encryptedData element with the plaintext XML element.\n        exml.ReplaceData(encryptedElement, rgbOutput);\n\n    }\n\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.XML-EncryptedData - EncryptedType#1\">Imports System\nImports System.Xml\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\n\n\n\nModule Program\n\n    Sub Main(ByVal args() As String)\n\n        &#39; Create an XmlDocument object.\n        Dim xmlDoc As New XmlDocument()\n\n        &#39; Load an XML file into the XmlDocument object.\n        Try\n            xmlDoc.PreserveWhitespace = True\n            xmlDoc.Load(&quot;test.xml&quot;)\n        Catch e As Exception\n            Console.WriteLine(e.Message)\n        End Try\n\n        &#39; Create a new TripleDES key. \n        Dim tDESkey As New TripleDESCryptoServiceProvider()\n\n\n        Try\n            &#39; Encrypt the &quot;creditcard&quot; element.\n            Encrypt(xmlDoc, &quot;creditcard&quot;, tDESkey)\n\n            &#39; Display the encrypted XML to the console.\n            Console.WriteLine(&quot;Encrypted XML:&quot;)\n            Console.WriteLine()\n            Console.WriteLine(xmlDoc.OuterXml)\n\n            &#39; Decrypt the &quot;creditcard&quot; element.\n            Decrypt(xmlDoc, tDESkey)\n\n            &#39; Display the encrypted XML to the console.\n            Console.WriteLine()\n            Console.WriteLine(&quot;Decrypted XML:&quot;)\n            Console.WriteLine()\n            Console.WriteLine(xmlDoc.OuterXml)\n        Catch e As Exception\n            Console.WriteLine(e.Message)\n        Finally\n            &#39; Clear the TripleDES key.\n            tDESkey.Clear()\n        End Try\n\n    End Sub\n\n\n    Sub Encrypt(ByVal Doc As XmlDocument, ByVal ElementToEncryptString As String, ByVal Alg As TripleDESCryptoServiceProvider)\n\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; Find the specified element in the XmlDocument\n        &#39; object and create a new XmlElemnt object.\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n\n        Dim elementToEncrypt As XmlElement = Doc.GetElementsByTagName(ElementToEncryptString)(0)\n\n\n        &#39; Throw an XmlException if the element was not found.\n        If elementToEncrypt Is Nothing Then\n            Throw New XmlException(&quot;The specified element was not found&quot;)\n        End If\n\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; Create a new instance of the EncryptedXml class \n        &#39; and use it to encrypt the XmlElement with the \n        &#39; symmetric key.\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n\n        Dim eXml As New EncryptedXml()\n\n        Dim encryptedElement As Byte() = eXml.EncryptData(elementToEncrypt, Alg, False)\n\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; Construct an EncryptedData object and populate\n        &#39; it with the desired encryption information.\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n\n        Dim edElement As New EncryptedData()\n\n        edElement.Type = EncryptedXml.XmlEncElementUrl\n\n\n        &#39; Create an EncryptionMethod element so that the \n        &#39; receiver knows which algorithm to use for decryption.\n        &#39; Determine what kind of algorithm is being used and\n        &#39; supply the appropriate URL to the EncryptionMethod element.\n        edElement.EncryptionMethod = New EncryptionMethod(EncryptedXml.XmlEncTripleDESUrl)\n\n        &#39; Add the encrypted element data to the \n        &#39; EncryptedData object.\n        edElement.CipherData.CipherValue = encryptedElement\n\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; Replace the element from the original XmlDocument\n        &#39; object with the EncryptedData element.\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        EncryptedXml.ReplaceElement(elementToEncrypt, edElement, False)\n\n    End Sub\n\n\n    Sub Decrypt(ByVal Doc As XmlDocument, ByVal Alg As SymmetricAlgorithm)\n\n        &#39; Find the EncryptedData element in the XmlDocument.\n        Dim encryptedElement As XmlElement = Doc.GetElementsByTagName(&quot;EncryptedData&quot;)(0) \n   \n\n        &#39; If the EncryptedData element was not found, throw an exception.\n        If encryptedElement Is Nothing Then\n            Throw New XmlException(&quot;The EncryptedData element was not found.&quot;)\n        End If\n\n        &#39; Create an EncryptedData object and populate it.\n        Dim edElement As New EncryptedData()\n        edElement.LoadXml(encryptedElement)\n\n        &#39; Create a new EncryptedXml object.\n        Dim exml As New EncryptedXml()\n\n        &#39; Decrypt the element using the symmetric key.\n        Dim rgbOutput As Byte() = exml.DecryptData(edElement, Alg)\n\n        &#39; Replace the encryptedData element with the plaintext XML element.\n        exml.ReplaceData(encryptedElement, rgbOutput)\n\n    End Sub\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.Cryptography.Xml.EncryptedType.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.Cryptography.Xml.EncryptedType.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.EncryptedType\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.EncryptedType..ctor\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.EncryptedType.AddProperty\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.EncryptedType.CipherData\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.EncryptedType.Encoding\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.EncryptedType.EncryptionMethod\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.EncryptedType.EncryptionProperties\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.EncryptedType.GetXml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.EncryptedType.Id\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.EncryptedType.KeyInfo\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.EncryptedType.LoadXml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.EncryptedType.MimeType\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.EncryptedType.Type\">\r\n<meta name=\"APILocation\" content=\"System.Security.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"8e2256da-fc5b-b492-aa61-251bfa8d9137\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the abstract base class from which the classes  and  derive.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Security.Cryptography.Xml/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.Cryptography.Xml.EncryptedType\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.Cryptography.Xml.EncryptedType.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.Cryptography.Xml.EncryptedType.yml","open_to_public_contributors":true,"api_name":["System.Security.Cryptography.Xml.EncryptedType","System.Security.Cryptography.Xml.EncryptedType..ctor","System.Security.Cryptography.Xml.EncryptedType.AddProperty","System.Security.Cryptography.Xml.EncryptedType.CipherData","System.Security.Cryptography.Xml.EncryptedType.Encoding","System.Security.Cryptography.Xml.EncryptedType.EncryptionMethod","System.Security.Cryptography.Xml.EncryptedType.EncryptionProperties","System.Security.Cryptography.Xml.EncryptedType.GetXml","System.Security.Cryptography.Xml.EncryptedType.Id","System.Security.Cryptography.Xml.EncryptedType.KeyInfo","System.Security.Cryptography.Xml.EncryptedType.LoadXml","System.Security.Cryptography.Xml.EncryptedType.MimeType","System.Security.Cryptography.Xml.EncryptedType.Type"],"api_location":["System.Security.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.Cryptography.Xml.EncryptedType","System::Security::Cryptography::Xml::EncryptedType","System.Security.Cryptography.Xml.EncryptedType.#ctor","System::Security::Cryptography::Xml::EncryptedType::#ctor","System.Security.Cryptography.Xml.EncryptedType.AddProperty","System::Security::Cryptography::Xml::EncryptedType::AddProperty","System.Security.Cryptography.Xml.EncryptedType.CipherData","System::Security::Cryptography::Xml::EncryptedType::CipherData","System.Security.Cryptography.Xml.EncryptedType.Encoding","System::Security::Cryptography::Xml::EncryptedType::Encoding","System.Security.Cryptography.Xml.EncryptedType.EncryptionMethod","System::Security::Cryptography::Xml::EncryptedType::EncryptionMethod","System.Security.Cryptography.Xml.EncryptedType.EncryptionProperties","System::Security::Cryptography::Xml::EncryptedType::EncryptionProperties","System.Security.Cryptography.Xml.EncryptedType.GetXml","System::Security::Cryptography::Xml::EncryptedType::GetXml","System.Security.Cryptography.Xml.EncryptedType.Id","System::Security::Cryptography::Xml::EncryptedType::Id","System.Security.Cryptography.Xml.EncryptedType.KeyInfo","System::Security::Cryptography::Xml::EncryptedType::KeyInfo","System.Security.Cryptography.Xml.EncryptedType.LoadXml","System::Security::Cryptography::Xml::EncryptedType::LoadXml","System.Security.Cryptography.Xml.EncryptedType.MimeType","System::Security::Cryptography::Xml::EncryptedType::MimeType","System.Security.Cryptography.Xml.EncryptedType.Type","System::Security::Cryptography::Xml::EncryptedType::Type"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"8e2256da-fc5b-b492-aa61-251bfa8d9137","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Security.Cryptography.Xml/EncryptedType.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"EncryptedType class | Microsoft Docs","_op_ogTitle":"EncryptedType class","description":"Represents the abstract base class from which the classes  and  derive.\n","toc_asset_id":"_splitted/System.Security.Cryptography.Xml/toc.json","toc_rel":"_splitted/System.Security.Cryptography.Xml/toc.json","source_url":"","ms.assetid":"System.Security.Cryptography.Xml.EncryptedType","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.cryptography.xml.encryptedtype","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.cryptography.xml.encryptedtype","fileRelativePath":"System.Security.Cryptography.Xml.EncryptedType.html"},"themesRelativePathToOutputRoot":"_themes/"}