{"content":"    \r\n    <h1 id=\"System_Net_AuthenticationManager\">\r\n      <span class=\"lang-csharp\">AuthenticationManager</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Manages the authentication modules called during the client authentication process.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class AuthenticationManager</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">AuthenticationManager</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>AuthenticationManager is a static class that manages the authentication modules that an application uses. When a request is made to protected resources, the AuthenticationManager calls the <a class=\"xref\" href=\"system.net.authenticationmanager#System_Net_AuthenticationManager_Authenticate_\" data-linktype=\"relative-path\">Authenticate</a> method to get an <a class=\"xref\" href=\"system.net.authorization\" data-linktype=\"relative-path\">Authorization</a> instance to use in subsequent requests.  </p>\n<p> The AuthenticationManager queries each registered authentication module by calling the <a class=\"xref\" href=\"system.net.iauthenticationmodule#System_Net_IAuthenticationModule_Authenticate_\" data-linktype=\"relative-path\">Authenticate</a> method for each module. The first authentication module to return an <a class=\"xref\" href=\"system.net.authorization\" data-linktype=\"relative-path\">Authorization</a> instance is used to authenticate the request.  </p>\n<p> Modules that provide the basic, digest, negotiate, NTLM, and Kerberos authentication types are registered with the AuthenticationManager by default. Additional authentication modules that implement the <a class=\"xref\" href=\"system.net.iauthenticationmodule\" data-linktype=\"relative-path\">IAuthenticationModule</a> interface can be added using the <a class=\"xref\" href=\"system.net.authenticationmanager#System_Net_AuthenticationManager_Register_\" data-linktype=\"relative-path\">Register</a> method. Authentication modules are called in the order in which they were added to the list.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The Kerberos and negotiate authentication type is not supported on Windows 95/98 or Windows NT 4.0.</p>\n</div>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_AuthenticationManager_CredentialPolicy\" data-linktype=\"self-bookmark\">CredentialPolicy</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the credential policy to be used for resource requests made using the <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_AuthenticationManager_CustomTargetNameDictionary\" data-linktype=\"self-bookmark\">CustomTargetNameDictionary</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the dictionary that contains Service Principal Names (SPNs) that are used to identify hosts during Kerberos authentication for requests made using <a class=\"xref\" href=\"system.net.webrequest\" data-linktype=\"relative-path\">WebRequest</a> and its derived classes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_AuthenticationManager_RegisteredModules\" data-linktype=\"self-bookmark\">RegisteredModules</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a list of authentication modules that are registered with the authentication manager.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_AuthenticationManager_Authenticate_System_String_System_Net_WebRequest_System_Net_ICredentials_\" data-linktype=\"self-bookmark\">Authenticate(String,WebRequest,ICredentials)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calls each registered authentication module to find the first module that can respond to the authentication request.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_AuthenticationManager_PreAuthenticate_System_Net_WebRequest_System_Net_ICredentials_\" data-linktype=\"self-bookmark\">PreAuthenticate(WebRequest,ICredentials)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Preauthenticates a request.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_AuthenticationManager_Register_System_Net_IAuthenticationModule_\" data-linktype=\"self-bookmark\">Register(IAuthenticationModule)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Registers an authentication module with the authentication manager.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_AuthenticationManager_Unregister_System_Net_IAuthenticationModule_\" data-linktype=\"self-bookmark\">Unregister(IAuthenticationModule)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the specified authentication module from the list of registered modules.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_AuthenticationManager_Unregister_System_String_\" data-linktype=\"self-bookmark\">Unregister(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes authentication modules with the specified authentication scheme from the list of registered modules.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_AuthenticationManager_CredentialPolicy\">\r\n    \r\n            <a id=\"System_Net_AuthenticationManager_CredentialPolicy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CredentialPolicy</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the credential policy to be used for resource requests made using the <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Net.ICredentialPolicy CredentialPolicy { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.icredentialpolicy\" data-linktype=\"relative-path\">ICredentialPolicy</a></div>\r\n                  </div>\r\n                  <p>An object that implements the <a class=\"xref\" href=\"system.net.icredentialpolicy\" data-linktype=\"relative-path\">ICredentialPolicy</a> interface that determines whether credentials are sent with requests. The default value is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The credential policy determines whether to send credentials when sending a request for a network resource, such as the content of a Web page. If credentials are sent, servers that require client authentication can attempt to authenticate the client when the request is received instead of sending a response indicating that the client&#39;s credentials are required. While this saves a round trip to the server, this must be balanced against the security risk inherent in sending credentials across the network. When the destination server does not require client authentication it is best to not send credentials.  </p>\n<p> The credential policy will be called only for requests that specify credentials or use a <a class=\"xref\" href=\"system.net.webproxy\" data-linktype=\"relative-path\">WebProxy</a> object that specifies credentials.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates setting the credential policy.  </p>\n<pre><code class=\"lang-cpp\" name=\"NclCredPolicy#2\">   static void UseIntranetCredentialPolicy()\n   {\n      IntranetZoneCredentialPolicy^ policy = gcnew IntranetZoneCredentialPolicy;\n      AuthenticationManager::CredentialPolicy = policy;\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"NclCredPolicy#2\">         public static void UseIntranetCredentialPolicy()\n        {\n            IntranetZoneCredentialPolicy  policy = new IntranetZoneCredentialPolicy();\n            AuthenticationManager.CredentialPolicy = policy;\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_AuthenticationManager_CustomTargetNameDictionary\">\r\n    \r\n            <a id=\"System_Net_AuthenticationManager_CustomTargetNameDictionary_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CustomTargetNameDictionary</div>        \r\n          </div>\r\n    \r\n            <p>Gets the dictionary that contains Service Principal Names (SPNs) that are used to identify hosts during Kerberos authentication for requests made using <a class=\"xref\" href=\"system.net.webrequest\" data-linktype=\"relative-path\">WebRequest</a> and its derived classes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Specialized.StringDictionary CustomTargetNameDictionary { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a></div>\r\n                  </div>\r\n                  <p>A writable <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a> that contains the SPN values for keys composed of host information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An SPN is a name by which a client uniquely identifies an instance of a service or application on a server for purposes of mutual authentication. Mutual authentication is requested by default, and you can require it by setting <a class=\"xref\" href=\"system.net.webrequest#System_Net_WebRequest_AuthenticationLevel_\" data-linktype=\"relative-path\">AuthenticationLevel</a> to <a class=\"xref\" href=\"system.net.security.authenticationlevel\" data-linktype=\"relative-path\">AuthenticationLevel</a> in your request.  </p>\n<p> When a <a class=\"xref\" href=\"system.net.webrequest\" data-linktype=\"relative-path\">WebRequest</a> requires mutual authentication, the SPN for the destination must be supplied by the client. If you know the SPN, you can add it to the CustomTargetNameDictionary before sending the request. If you have not added SPN information to this dictionary, the <a class=\"xref\" href=\"system.net.authenticationmanager\" data-linktype=\"relative-path\">AuthenticationManager</a> uses the <a class=\"xref\" href=\"system.net.webrequest#System_Net_WebRequest_RequestUri_\" data-linktype=\"relative-path\">RequestUri</a> method to compose the most likely SPN; however, this is a computed value and might be incorrect. If mutual authentication is attempted and fails, you can check the dictionary to determine the computed SPN. No SPN is entered into the dictionary if the authentication protocol does not support mutual authentication.  </p>\n<p> To add an SPN value to this dictionary, use the <a class=\"xref\" href=\"system.uri#System_Uri_AbsoluteUri_\" data-linktype=\"relative-path\">AbsoluteUri</a> of the <a class=\"xref\" href=\"system.net.webrequest#System_Net_WebRequest_RequestUri_\" data-linktype=\"relative-path\">RequestUri</a> as the key. Internally, the key is truncated to include the <a class=\"xref\" href=\"system.uri#System_Uri_Scheme_\" data-linktype=\"relative-path\">Scheme</a>, <a class=\"xref\" href=\"system.uri#System_Uri_Host_\" data-linktype=\"relative-path\">Host</a>, and the <a class=\"xref\" href=\"system.uri#System_Uri_Port_\" data-linktype=\"relative-path\">Port</a> if it is not the default port.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Accessing the methods and properties of the CustomTargetNameDictionary requires unrestricted <a class=\"xref\" href=\"system.net.webpermission\" data-linktype=\"relative-path\">WebPermission</a>.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> When Kerberos authentication is performed through a proxy, both the proxy and the ultimate host name need to be resolved to an SPN. The proxy name resolution is protected by a timeout. Resolution of the ultimate host name to a SPN requires a DNS lookup, and there is no timeout associated directly with this operation. Therefore synchronous operations may take longer to timeout. To overcome this, add the ultimate host&#39;s URI prefix to the SPN cache prior to making requests to it.  </p>\n</div>\n<p> Version 3.5 SP1 now defaults to specifying the host name used in the request URL in the SPN in the NTLM (NT LAN Manager) authentication exchange when the CustomTargetNameDictionary property is not set. The host name used in the request URL may be different from the Host header specified in the <a class=\"xref\" href=\"system.net.httprequestheader\" data-linktype=\"relative-path\">System.Net.HttpRequestHeader</a> in the client request. The host name used in the request URL may be different from the actual host name of the server, the machine name of the server, the computer&#39;s IP address, or the loopback address. In these cases, Windows will fail the authentication request. To address the issue, you may need to notify Windows that the host name used in the request URL in the client request (&quot;contoso&quot;, for example) is actually an alternate name for the local computer.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates displaying the contents of the CustomTargetNameDictionary.  </p>\n<pre><code class=\"lang-cpp\" name=\"NclCredPolicy#5\">   static void RequestResource( Uri^ resource )\n   {\n      // Set policy to send credentials when using HTTPS and basic authentication.\n      // Create a new HttpWebRequest object for the specified resource.\n      WebRequest^ request = dynamic_cast&lt;WebRequest^&gt;(WebRequest::Create( resource ));\n\n      // Supply client credentials for basic authentication.\n      request-&gt;UseDefaultCredentials = true;\n      request-&gt;AuthenticationLevel = AuthenticationLevel::MutualAuthRequired;\n      HttpWebResponse^ response = dynamic_cast&lt;HttpWebResponse^&gt;(request-&gt;GetResponse());\n\n      // Determine mutual authentication was used.\n      Console::WriteLine( L&quot;Is mutually authenticated? {0}&quot;, response-&gt;IsMutuallyAuthenticated );\n      System::Collections::Specialized::StringDictionary^ spnDictionary = AuthenticationManager::CustomTargetNameDictionary;\n      System::Collections::IEnumerator^ myEnum = spnDictionary-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         DictionaryEntry^ e = safe_cast&lt;DictionaryEntry^&gt;(myEnum-&gt;Current);\n         Console::WriteLine( &quot;Key: {0}  - {1}&quot;, dynamic_cast&lt;String^&gt;(e-&gt;Key), dynamic_cast&lt;String^&gt;(e-&gt;Value) );\n      }\n\n      // Read and display the response.\n      System::IO::Stream^ streamResponse = response-&gt;GetResponseStream();\n      System::IO::StreamReader^ streamRead = gcnew System::IO::StreamReader( streamResponse );\n      String^ responseString = streamRead-&gt;ReadToEnd();\n      Console::WriteLine( responseString );\n\n      // Close the stream objects.\n      streamResponse-&gt;Close();\n      streamRead-&gt;Close();\n\n      // Release the HttpWebResponse.\n      response-&gt;Close();\n   }\n\n   /*\n   \n   The output from this example will differ based on the requested resource\n   and whether mutual authentication was successful. For the purpose of illustration,\n   a sample of the output is shown here:\n   \n   Is mutually authenticated? True\n   Key: http://server1.someDomain.contoso.com  - HTTP/server1.someDomain.contoso.com\n   \n   &lt;html&gt;\n   ...\n   &lt;/html&gt;\n   \n   */\n</code></pre><pre><code class=\"lang-cs\" name=\"NclCredPolicy#5\">       public static void RequestResource(Uri resource)\n        {\n            // Set policy to send credentials when using HTTPS and basic authentication.\n\n            // Create a new HttpWebRequest object for the specified resource.\n            WebRequest request=(WebRequest) WebRequest.Create(resource);\n            // Supply client credentials for basic authentication.\n            request.UseDefaultCredentials = true;\n            request.AuthenticationLevel = AuthenticationLevel.MutualAuthRequired;\n            HttpWebResponse response = (HttpWebResponse) request.GetResponse();\n            // Determine mutual authentication was used.\n            Console.WriteLine(&quot;Is mutually authenticated? {0}&quot;, response.IsMutuallyAuthenticated);\n\n             System.Collections.Specialized.StringDictionary spnDictionary = AuthenticationManager.CustomTargetNameDictionary;\n            foreach (System.Collections.DictionaryEntry e in spnDictionary)\n            {\n                Console.WriteLine(&quot;Key: {0}  - {1}&quot;, e.Key as string, e.Value as string);\n            }\n            // Read and display the response.\n            System.IO.Stream streamResponse = response.GetResponseStream();\n            System.IO.StreamReader streamRead = new System.IO.StreamReader(streamResponse);\n            string responseString = streamRead.ReadToEnd();\n            Console.WriteLine(responseString);\n            // Close the stream objects.\n            streamResponse.Close();\n            streamRead.Close();\n            // Release the HttpWebResponse.\n            response.Close();\n        }\n        \n/*\n\nThe output from this example will differ based on the requested resource\nand whether mutual authentication was successful. For the purpose of illustration,\na sample of the output is shown here:\n\nIs mutually authenticated? True\nKey: http://server1.someDomain.contoso.com  - HTTP/server1.someDomain.contoso.com\n\n&lt;html&gt;\n...\n&lt;/html&gt;\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_AuthenticationManager_RegisteredModules\">\r\n    \r\n            <a id=\"System_Net_AuthenticationManager_RegisteredModules_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RegisteredModules</div>        \r\n          </div>\r\n    \r\n            <p>Gets a list of authentication modules that are registered with the authentication manager.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.IEnumerator RegisteredModules { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> that enables the registered authentication modules to be read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The RegisteredModules property provides an <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> instance that enables the list of registered authentication modules to be read. The <a class=\"xref\" href=\"system.net.authenticationmanager#System_Net_AuthenticationManager_Register_\" data-linktype=\"relative-path\">Register</a> method adds modules to the list, and the <a class=\"xref\" href=\"system.net.authenticationmanager#System_Net_AuthenticationManager_Unregister_\" data-linktype=\"relative-path\">Unregister</a> method removes modules from it.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the RegisteredModules property to get a list of authentication modules that are registered with the authentication manager. For a complete example, refer to the <a class=\"xref\" href=\"system.net.authenticationmanager\" data-linktype=\"relative-path\">AuthenticationManager</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Net.Authentication#8\">    // Display registered authentication modules.\n    private static void displayRegisteredModules() \n    {\n      // The AuthenticationManager calls all authentication modules sequentially \n      // until one of them responds with an authorization instance.  Show\n      // the current registered modules.\n      IEnumerator registeredModules = AuthenticationManager.RegisteredModules; \n      Console.WriteLine(&quot;\\r<br>The following authentication modules are now registered with the system:&quot;);\n      while(registeredModules.MoveNext())\n      {\n        Console.WriteLine(&quot;\\r <br> Module : {0}&quot;,registeredModules.Current); \n        IAuthenticationModule currentAuthenticationModule = (IAuthenticationModule)registeredModules.Current;\n        Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;  CanPreAuthenticate : {0}&quot;,currentAuthenticationModule.CanPreAuthenticate); \n      }      \n    }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Net.Authentication#8\">   // Display registered authentication modules.\n   static void displayRegisteredModules()\n   {\n      \n      // The AuthenticationManager calls all authentication modules sequentially\n      // until one of them responds with an authorization instance.  Show\n      // the current registered modules, for testing purposes.\n      IEnumerator^ registeredModules = AuthenticationManager::RegisteredModules;\n      Console::WriteLine( &quot;\\r<br>The following authentication modules are now registered with the system&quot; );\n      while ( registeredModules-&gt;MoveNext() )\n      {\n         Console::WriteLine( &quot;\\r <br> Module : {0}&quot;, registeredModules-&gt;Current );\n         IAuthenticationModule^ currentAuthenticationModule = dynamic_cast&lt;IAuthenticationModule^&gt;(registeredModules-&gt;Current);\n         Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;  CanPreAuthenticate : {0}&quot;, currentAuthenticationModule-&gt;CanPreAuthenticate );\n      }\n   }\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Net.Authentication#8\">      &#39; Display registered authentication modules.\n      Private Shared Sub displayRegisteredModules()\n        &#39; The AuthenticationManager calls all authentication modules sequentially \n        &#39; until one of them responds with an authorization instance.  Show\n        &#39; the current registered modules.\n        Dim registeredModules As IEnumerator = AuthenticationManager.RegisteredModules\n        Console.WriteLine(ControlChars.Cr + ControlChars.Lf + &quot;The following authentication modules are now registered with the system:&quot;)\n        While registeredModules.MoveNext()\n          Console.WriteLine(ControlChars.Cr + &quot; &quot; + ControlChars.Lf + &quot; Module : {0}&quot;, registeredModules.Current)\n          Dim currentAuthenticationModule As IAuthenticationModule = CType(registeredModules.Current, IAuthenticationModule)\n          Console.WriteLine(ControlChars.Tab + &quot;  CanPreAuthenticate : {0}&quot;, currentAuthenticationModule.CanPreAuthenticate)\n        End While\n      End Sub &#39;displayRegisteredModules \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_AuthenticationManager_Authenticate_System_String_System_Net_WebRequest_System_Net_ICredentials_\">\r\n    \r\n            <a id=\"System_Net_AuthenticationManager_Authenticate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Authenticate(String,WebRequest,ICredentials)</div>        \r\n          </div>\r\n    \r\n            <p>Calls each registered authentication module to find the first module that can respond to the authentication request.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Net.Authorization Authenticate (string challenge, System.Net.WebRequest request, System.Net.ICredentials credentials);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>challenge</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The challenge returned by the Internet resource.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>request</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.webrequest\" data-linktype=\"relative-path\">WebRequest</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.net.webrequest\" data-linktype=\"relative-path\">WebRequest</a> that initiated the authentication challenge.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>credentials</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.icredentials\" data-linktype=\"relative-path\">ICredentials</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.net.icredentials\" data-linktype=\"relative-path\">ICredentials</a> associated with this request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.authorization\" data-linktype=\"relative-path\">Authorization</a></div>\r\n                  </div>\r\n                  <p>An instance of the <a class=\"xref\" href=\"system.net.authorization\" data-linktype=\"relative-path\">Authorization</a> class containing the result of the authorization attempt. If there is no authentication module to respond to the challenge, this method returns <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>challenge</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>request</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>credentials</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Authenticate method calls the <a class=\"xref\" href=\"system.net.iauthenticationmodule#System_Net_IAuthenticationModule_Authenticate_\" data-linktype=\"relative-path\">Authenticate</a> method on each registered authentication module until one of the module responds with an <a class=\"xref\" href=\"system.net.authorization\" data-linktype=\"relative-path\">Authorization</a> instance.  </p>\n<p> The first <a class=\"xref\" href=\"system.net.authorization\" data-linktype=\"relative-path\">Authorization</a> instance returned is used to authenticate the request. If no authentication module can authenticate the request, the Authenticate method returns <code>null</code>.  </p>\n<p> Authentication modules are called in the order in which they are registered with the <a class=\"xref\" href=\"system.net.authenticationmanager\" data-linktype=\"relative-path\">AuthenticationManager</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_AuthenticationManager_PreAuthenticate_System_Net_WebRequest_System_Net_ICredentials_\">\r\n    \r\n            <a id=\"System_Net_AuthenticationManager_PreAuthenticate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreAuthenticate(WebRequest,ICredentials)</div>        \r\n          </div>\r\n    \r\n            <p>Preauthenticates a request.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Net.Authorization PreAuthenticate (System.Net.WebRequest request, System.Net.ICredentials credentials);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>request</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.webrequest\" data-linktype=\"relative-path\">WebRequest</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.net.webrequest\" data-linktype=\"relative-path\">WebRequest</a> to an Internet resource.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>credentials</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.icredentials\" data-linktype=\"relative-path\">ICredentials</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.net.icredentials\" data-linktype=\"relative-path\">ICredentials</a> associated with the request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.authorization\" data-linktype=\"relative-path\">Authorization</a></div>\r\n                  </div>\r\n                  <p>An instance of the <a class=\"xref\" href=\"system.net.authorization\" data-linktype=\"relative-path\">Authorization</a> class if the request can be preauthenticated; otherwise, <code>null</code>. If <code>credentials</code> is <code>null</code>, this method returns <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>request</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the authentication module can preauthenticate the request, the PreAuthenticate method returns an Authentication instance and sends the authorization information to the server preemptively instead of waiting for the resource to issue a challenge. This behavior is outlined in section 3.3 of RFC 2617 (HTTP Authentication: Basic and Digest Access Authentication). Authentication modules that support preauthentication allow clients to improve server efficiency by avoiding extra round trips caused by authentication challenges.  </p>\n<p> Authorization modules that can preauthenticate requests set the <a class=\"xref\" href=\"system.net.iauthenticationmodule#System_Net_IAuthenticationModule_CanPreAuthenticate_\" data-linktype=\"relative-path\">CanPreAuthenticate</a> property to <code>true</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_AuthenticationManager_Register_System_Net_IAuthenticationModule_\">\r\n    \r\n            <a id=\"System_Net_AuthenticationManager_Register_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Register(IAuthenticationModule)</div>        \r\n          </div>\r\n    \r\n            <p>Registers an authentication module with the authentication manager.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Register (System.Net.IAuthenticationModule authenticationModule);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>authenticationModule</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.iauthenticationmodule\" data-linktype=\"relative-path\">IAuthenticationModule</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.net.iauthenticationmodule\" data-linktype=\"relative-path\">IAuthenticationModule</a> to register with the authentication manager.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>authenticationModule</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Register method adds authentication modules to the end of the list of modules called by the <a class=\"xref\" href=\"system.net.authenticationmanager#System_Net_AuthenticationManager_Authenticate_\" data-linktype=\"relative-path\">Authenticate</a> method. Authentication modules are called in the order in which they were added to the list. If a module with the same <a class=\"xref\" href=\"system.net.iauthenticationmodule#System_Net_IAuthenticationModule_AuthenticationType_\" data-linktype=\"relative-path\">AuthenticationType</a> is already registered, this method removes the registered module and adds <code>authenticationModule</code> to the end of the list.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example registers an authentication module with the authentication manager. For a complete example, refer to the <a class=\"xref\" href=\"system.net.authenticationmanager\" data-linktype=\"relative-path\">AuthenticationManager</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Net.Sockets.Authentication#2\">    // This is the program entry point. It allows the user to enter \n    // her credentials and the Internet resource (Web page) to access.\n    // It also unregisters the standard and registers the customized basic \n    // authentication.\n    public static void Main(string[] args) \n    {\n    \n      if (args.Length &lt; 3)\n        showusage();\n      else \n      {    \n         \n        // Read the user&#39;s credentials.\n        uri = args[0];\n        username = args[1];\n        password = args[2];\n\n        if (args.Length == 3)\n          domain = string.Empty;\n        else\n          // If the domain exists, store it. Usually the domain name\n          // is by default the name of the server hosting the Internet\n          // resource.\n          domain = args[3];\n\n        // Unregister the standard Basic authentication module.\n        AuthenticationManager.Unregister(&quot;Basic&quot;);\n\n        // Instantiate the custom Basic authentication module.\n        CustomBasic customBasicModule = new CustomBasic();\n           \n        // Register the custom Basic authentication module.\n        AuthenticationManager.Register(customBasicModule);\n \n        // Display registered Authorization modules.\n        displayRegisteredModules();\n        \n        // Read the specified page and display it on the console.\n        getPage(uri);\n      }\n      return;\n    }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Net.Sockets.Authentication#2\">   // This is the program entry point. It allows the user to enter \n   // her credentials and the Internet resource (Web page) to access.\n   // It also unregisters the standard and registers the customized basic \n   // authentication.\n   static void Main()\n   {\n      array&lt;String^&gt;^args = Environment::GetCommandLineArgs();\n      if ( args-&gt;Length &lt; 4 )\n            showusage();\n      else\n      {\n         \n         // Read the user&#39;s credentials.\n         uri = args[ 1 ];\n         username = args[ 2 ];\n         password = args[ 3 ];\n         if ( args-&gt;Length == 4 )\n                  domain = String::Empty; // If the domain exists, store it. Usually the domain name\n         else\n                  domain = args[ 4 ];\n\n         \n         // is by default the name of the server hosting the Internet\n         // resource.\n         // Unregister the standard Basic authentication module.\n         AuthenticationManager::Unregister( &quot;Basic&quot; );\n         \n         // Instantiate the custom Basic authentication module.\n         CustomBasic^ customBasicModule = gcnew CustomBasic;\n         \n         // Register the custom Basic authentication module.\n         AuthenticationManager::Register( customBasicModule );\n         \n         // Display registered Authorization modules.\n         displayRegisteredModules();\n         \n         // Read the specified page and display it on the console.\n         getPage( uri );\n      }\n\n      return;\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Net.Sockets.Authentication#2\">   &#39; This is the program entry point. It allows the user to enter \n   &#39; her credentials and the Internet resource (Web page) to access.\n   &#39; It also unregisters the standard and registers the customized basic \n   &#39; authentication.\n  Private Overloads Shared Sub Main(ByVal args() As String)\n\n    If args.Length &lt; 4 Then\n      showusage()\n    Else\n\n      &#39; Read the user&#39;s credentials.\n      uri = args(1)\n      username = args(2)\n      password = args(3)\n\n      If args.Length = 4 Then\n        domain = String.Empty\n        &#39; If the domain exists, store it. Usually the domain name\n        &#39; is by default the name of the server hosting the Internet\n        &#39; resource.\n      Else\n        domain = args(5)\n      End If\n      &#39; Unregister the standard Basic authentication module.\n      AuthenticationManager.Unregister(&quot;Basic&quot;)\n\n      &#39; Instantiate the custom Basic authentication module.\n      Dim customBasicModule As New CustomBasic()\n\n      &#39; Register the custom Basic authentication module.\n      AuthenticationManager.Register(customBasicModule)\n\n      &#39; Display registered Authorization modules.\n      displayRegisteredModules()\n\n      &#39; Read the specified page and display it on the console.\n      getPage(uri)\n    End If\n    Return\n  End Sub &#39;Main\nEnd Class &#39;ClientAuthentication \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_AuthenticationManager_Unregister_System_Net_IAuthenticationModule_\">\r\n    \r\n            <a id=\"System_Net_AuthenticationManager_Unregister_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Unregister(IAuthenticationModule)</div>        \r\n          </div>\r\n    \r\n            <p>Removes the specified authentication module from the list of registered modules.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Unregister (System.Net.IAuthenticationModule authenticationModule);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>authenticationModule</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.iauthenticationmodule\" data-linktype=\"relative-path\">IAuthenticationModule</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.net.iauthenticationmodule\" data-linktype=\"relative-path\">IAuthenticationModule</a> to remove from the list of registered modules.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>authenticationModule</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The specified <a class=\"xref\" href=\"system.net.iauthenticationmodule\" data-linktype=\"relative-path\">IAuthenticationModule</a> is not registered.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Unregister method removes the specified authentication module from the list of authentication modules called by the <a class=\"xref\" href=\"system.net.authenticationmanager#System_Net_AuthenticationManager_Authenticate_\" data-linktype=\"relative-path\">Authenticate</a> method. The module must have been added to the list using the <a class=\"xref\" href=\"system.net.authenticationmanager#System_Net_AuthenticationManager_Register_\" data-linktype=\"relative-path\">Register</a> method before it can be removed from the list.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the Unregister method to remove the specified authentication module from the list of registered modules. For a complete example, refer to the <a class=\"xref\" href=\"system.net.authenticationmanager\" data-linktype=\"relative-path\">AuthenticationManager</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Net.Sockets.Authentication#2\">    // This is the program entry point. It allows the user to enter \n    // her credentials and the Internet resource (Web page) to access.\n    // It also unregisters the standard and registers the customized basic \n    // authentication.\n    public static void Main(string[] args) \n    {\n    \n      if (args.Length &lt; 3)\n        showusage();\n      else \n      {    \n         \n        // Read the user&#39;s credentials.\n        uri = args[0];\n        username = args[1];\n        password = args[2];\n\n        if (args.Length == 3)\n          domain = string.Empty;\n        else\n          // If the domain exists, store it. Usually the domain name\n          // is by default the name of the server hosting the Internet\n          // resource.\n          domain = args[3];\n\n        // Unregister the standard Basic authentication module.\n        AuthenticationManager.Unregister(&quot;Basic&quot;);\n\n        // Instantiate the custom Basic authentication module.\n        CustomBasic customBasicModule = new CustomBasic();\n           \n        // Register the custom Basic authentication module.\n        AuthenticationManager.Register(customBasicModule);\n \n        // Display registered Authorization modules.\n        displayRegisteredModules();\n        \n        // Read the specified page and display it on the console.\n        getPage(uri);\n      }\n      return;\n    }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Net.Sockets.Authentication#2\">   // This is the program entry point. It allows the user to enter \n   // her credentials and the Internet resource (Web page) to access.\n   // It also unregisters the standard and registers the customized basic \n   // authentication.\n   static void Main()\n   {\n      array&lt;String^&gt;^args = Environment::GetCommandLineArgs();\n      if ( args-&gt;Length &lt; 4 )\n            showusage();\n      else\n      {\n         \n         // Read the user&#39;s credentials.\n         uri = args[ 1 ];\n         username = args[ 2 ];\n         password = args[ 3 ];\n         if ( args-&gt;Length == 4 )\n                  domain = String::Empty; // If the domain exists, store it. Usually the domain name\n         else\n                  domain = args[ 4 ];\n\n         \n         // is by default the name of the server hosting the Internet\n         // resource.\n         // Unregister the standard Basic authentication module.\n         AuthenticationManager::Unregister( &quot;Basic&quot; );\n         \n         // Instantiate the custom Basic authentication module.\n         CustomBasic^ customBasicModule = gcnew CustomBasic;\n         \n         // Register the custom Basic authentication module.\n         AuthenticationManager::Register( customBasicModule );\n         \n         // Display registered Authorization modules.\n         displayRegisteredModules();\n         \n         // Read the specified page and display it on the console.\n         getPage( uri );\n      }\n\n      return;\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Net.Sockets.Authentication#2\">   &#39; This is the program entry point. It allows the user to enter \n   &#39; her credentials and the Internet resource (Web page) to access.\n   &#39; It also unregisters the standard and registers the customized basic \n   &#39; authentication.\n  Private Overloads Shared Sub Main(ByVal args() As String)\n\n    If args.Length &lt; 4 Then\n      showusage()\n    Else\n\n      &#39; Read the user&#39;s credentials.\n      uri = args(1)\n      username = args(2)\n      password = args(3)\n\n      If args.Length = 4 Then\n        domain = String.Empty\n        &#39; If the domain exists, store it. Usually the domain name\n        &#39; is by default the name of the server hosting the Internet\n        &#39; resource.\n      Else\n        domain = args(5)\n      End If\n      &#39; Unregister the standard Basic authentication module.\n      AuthenticationManager.Unregister(&quot;Basic&quot;)\n\n      &#39; Instantiate the custom Basic authentication module.\n      Dim customBasicModule As New CustomBasic()\n\n      &#39; Register the custom Basic authentication module.\n      AuthenticationManager.Register(customBasicModule)\n\n      &#39; Display registered Authorization modules.\n      displayRegisteredModules()\n\n      &#39; Read the specified page and display it on the console.\n      getPage(uri)\n    End If\n    Return\n  End Sub &#39;Main\nEnd Class &#39;ClientAuthentication \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_AuthenticationManager_Unregister_System_String_\">\r\n    \r\n            <a id=\"System_Net_AuthenticationManager_Unregister_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Unregister(String)</div>        \r\n          </div>\r\n    \r\n            <p>Removes authentication modules with the specified authentication scheme from the list of registered modules.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Unregister (string authenticationScheme);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>authenticationScheme</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The authentication scheme of the module to remove.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>authenticationScheme</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>A module for this authentication scheme is not registered.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.net.authenticationmanager#System_Net_AuthenticationManager_Unregister_\" data-linktype=\"relative-path\">Unregister</a> method removes the authentication module with the specified authentication scheme from the list of authentication modules called by the <a class=\"xref\" href=\"system.net.authenticationmanager#System_Net_AuthenticationManager_Authenticate_\" data-linktype=\"relative-path\">Authenticate</a> method. The module must have been added to the list using the <a class=\"xref\" href=\"system.net.authenticationmanager#System_Net_AuthenticationManager_Register_\" data-linktype=\"relative-path\">Register</a> method before it can be removed from the list.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <a class=\"xref\" href=\"system.net.authenticationmanager#System_Net_AuthenticationManager_Unregister_\" data-linktype=\"relative-path\">Unregister</a> method to remove an authentication module with the specified authentication scheme from the list of registered modules.  </p>\n<pre><code class=\"lang-vb\" name=\"AuthenticationManager_UnRegister2#2\">        Dim registeredModules As IEnumerator = AuthenticationManager.RegisteredModules\n        DisplayAllModules()\n        \n        registeredModules.Reset()\n        registeredModules.MoveNext()\n        \n        &#39;Get the first Authentication module registered with the system\n        Dim authenticationModule1 As IAuthenticationModule = CType(registeredModules.Current, IAuthenticationModule)\n        \n        &#39;Call the UnRegister method to unregister the first authentication module from the system.\n        Dim authenticationScheme As [String] = authenticationModule1.AuthenticationType\n        AuthenticationManager.Unregister(authenticationScheme)\n        Console.WriteLine(ControlChars.Cr + &quot;Successfully unregistered {0}&quot;, authenticationModule1)\n        &#39;Display all modules to see that the module was unregistered.\n        DisplayAllModules()\n        &#39;Call the Register method to register authenticationModule1 module again.\n        AuthenticationManager.Register(authenticationModule1)\n        Console.WriteLine(ControlChars.Cr + &quot;Successfully re-registered {0}&quot;, authenticationModule1)\n        &#39;Display the modules to verify that &#39;authenticationModule1&#39; has been registered again.\n        DisplayAllModules()\n</code></pre><pre><code class=\"lang-cpp\" name=\"AuthenticationManager_UnRegister2#2\">      IEnumerator^ registeredModules = AuthenticationManager::RegisteredModules;\n      // Display all the modules that are already registered with the system.\n      DisplayAllModules();\n      registeredModules-&gt;Reset();\n      registeredModules-&gt;MoveNext();\n      // Get the first Authentication module registered with the system.\n      IAuthenticationModule^ authenticationModule1 = dynamic_cast&lt;IAuthenticationModule^&gt;(registeredModules-&gt;Current);\n      // Call the UnRegister() method to unregister the first authentication module from the system.\n      String^ authenticationScheme = authenticationModule1-&gt;AuthenticationType;\n      AuthenticationManager::Unregister( authenticationScheme );\n      Console::WriteLine(  &quot;<br>Successfully unregistered &#39;{0}&#39;.&quot;, authenticationModule1 );\n      // Display all modules to see that the module was unregistered.\n      DisplayAllModules();\n</code></pre><pre><code class=\"lang-cs\" name=\"AuthenticationManager_UnRegister2#2\">        IEnumerator registeredModules = AuthenticationManager.RegisteredModules; \n        // Display all the modules that are already registered with the system.\n        DisplayAllModules();  \n        registeredModules.Reset();\n        registeredModules.MoveNext();\n        // Get the first Authentication module registered with the system.\n        IAuthenticationModule authenticationModule1 = (IAuthenticationModule)registeredModules.Current; \n        // Call the UnRegister() method to unregister the first authentication module from the system.\n        String authenticationScheme = authenticationModule1.AuthenticationType;\n        AuthenticationManager.Unregister(authenticationScheme);\n        Console.WriteLine(&quot;<br>Successfully unregistered &#39;{0}&quot;,authenticationModule1+&quot;&#39;.&quot;); \n        // Display all modules to see that the module was unregistered.\n        DisplayAllModules(); \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Net.AuthenticationManager.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Net.AuthenticationManager.yml\">\r\n<meta name=\"APIName\" content=\"System.Net.AuthenticationManager\">\r\n<meta name=\"APIName\" content=\"System.Net.AuthenticationManager.Authenticate\">\r\n<meta name=\"APIName\" content=\"System.Net.AuthenticationManager.CredentialPolicy\">\r\n<meta name=\"APIName\" content=\"System.Net.AuthenticationManager.CustomTargetNameDictionary\">\r\n<meta name=\"APIName\" content=\"System.Net.AuthenticationManager.PreAuthenticate\">\r\n<meta name=\"APIName\" content=\"System.Net.AuthenticationManager.Register\">\r\n<meta name=\"APIName\" content=\"System.Net.AuthenticationManager.RegisteredModules\">\r\n<meta name=\"APIName\" content=\"System.Net.AuthenticationManager.Unregister\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"9a286029-c2a5-a8aa-fd19-3015df6dbc87\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Net\\AuthenticationManager.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Manages the authentication modules called during the client authentication process.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Net/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Net.AuthenticationManager\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Net.AuthenticationManager.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Net.AuthenticationManager.yml","open_to_public_contributors":true,"api_name":["System.Net.AuthenticationManager","System.Net.AuthenticationManager.Authenticate","System.Net.AuthenticationManager.CredentialPolicy","System.Net.AuthenticationManager.CustomTargetNameDictionary","System.Net.AuthenticationManager.PreAuthenticate","System.Net.AuthenticationManager.Register","System.Net.AuthenticationManager.RegisteredModules","System.Net.AuthenticationManager.Unregister"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Net.AuthenticationManager","System::Net::AuthenticationManager","System.Net.AuthenticationManager.Authenticate","System::Net::AuthenticationManager::Authenticate","System.Net.AuthenticationManager.CredentialPolicy","System::Net::AuthenticationManager::CredentialPolicy","System.Net.AuthenticationManager.CustomTargetNameDictionary","System::Net::AuthenticationManager::CustomTargetNameDictionary","System.Net.AuthenticationManager.PreAuthenticate","System::Net::AuthenticationManager::PreAuthenticate","System.Net.AuthenticationManager.Register","System::Net::AuthenticationManager::Register","System.Net.AuthenticationManager.RegisteredModules","System::Net::AuthenticationManager::RegisteredModules","System.Net.AuthenticationManager.Unregister","System::Net::AuthenticationManager::Unregister"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"9a286029-c2a5-a8aa-fd19-3015df6dbc87","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Net\\AuthenticationManager.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Net/AuthenticationManager.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"AuthenticationManager class | Microsoft Docs","_op_ogTitle":"AuthenticationManager class","description":"Manages the authentication modules called during the client authentication process.\n","toc_asset_id":"_splitted/System.Net/toc.json","toc_rel":"_splitted/System.Net/toc.json","source_url":"","ms.assetid":"System.Net.AuthenticationManager","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.net.authenticationmanager","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.net.authenticationmanager","fileRelativePath":"System.Net.AuthenticationManager.html"},"themesRelativePathToOutputRoot":"_themes/"}