{"content":"    \r\n    <h1 id=\"System_Linq_Expressions_Expression\">\r\n      <span class=\"lang-csharp\">Expression</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides the base class from which the classes that represent expression tree nodes are derived. It also contains <code>static</code> (<code>Shared</code> in Visual Basic) factory methods to create the various node types. This is an <code>abstract</code> class.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract class Expression</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Expression</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression__ctor\" data-linktype=\"self-bookmark\">Expression()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Constructs a new instance of <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression__ctor_System_Linq_Expressions_ExpressionType_System_Type_\" data-linktype=\"self-bookmark\">Expression(ExpressionType,Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_CanReduce\" data-linktype=\"self-bookmark\">CanReduce</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates that the node can be reduced to a simpler node. If this returns true, Reduce() can be called to produce the reduced form.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_NodeType\" data-linktype=\"self-bookmark\">NodeType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the node type of this <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Type\" data-linktype=\"self-bookmark\">Type</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the static type of the expression that this <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> represents.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Accept_System_Linq_Expressions_ExpressionVisitor_\" data-linktype=\"self-bookmark\">Accept(ExpressionVisitor)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Dispatches to the specific visit method for this node type. For example, <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> calls the <span class=\"xref\">stem.Linq.Expressions.ExpressionVisitor.VisitMethodCall*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Add_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">Add(Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an arithmetic addition operation that does not have overflow checking.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Add_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">Add(Expression,Expression,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an arithmetic addition operation that does not have overflow checking. The implementing method can be specified.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_AddAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">AddAssign(Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an addition assignment operation that does not have overflow checking.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_AddAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">AddAssign(Expression,Expression,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an addition assignment operation that does not have overflow checking.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_AddAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_System_Linq_Expressions_LambdaExpression_\" data-linktype=\"self-bookmark\">AddAssign(Expression,Expression,MethodInfo,LambdaExpression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an addition assignment operation that does not have overflow checking.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_AddAssignChecked_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">AddAssignChecked(Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an addition assignment operation that has overflow checking.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_AddAssignChecked_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">AddAssignChecked(Expression,Expression,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an addition assignment operation that has overflow checking.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_AddAssignChecked_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_System_Linq_Expressions_LambdaExpression_\" data-linktype=\"self-bookmark\">AddAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an addition assignment operation that has overflow checking.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_AddChecked_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">AddChecked(Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an arithmetic addition operation that has overflow checking.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_AddChecked_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">AddChecked(Expression,Expression,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an arithmetic addition operation that has overflow checking. The implementing method can be specified.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_And_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">And(Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a bitwise <code>AND</code> operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_And_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">And(Expression,Expression,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a bitwise <code>AND</code> operation. The implementing method can be specified.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_AndAlso_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">AndAlso(Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a conditional <code>AND</code> operation that evaluates the second operand only if the first operand evaluates to <code>true</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_AndAlso_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">AndAlso(Expression,Expression,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a conditional <code>AND</code> operation that evaluates the second operand only if the first operand is resolved to true. The implementing method can be specified.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_AndAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">AndAssign(Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a bitwise AND assignment operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_AndAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">AndAssign(Expression,Expression,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a bitwise AND assignment operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_AndAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_System_Linq_Expressions_LambdaExpression_\" data-linktype=\"self-bookmark\">AndAssign(Expression,Expression,MethodInfo,LambdaExpression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a bitwise AND assignment operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_ArrayAccess_System_Linq_Expressions_Expression_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression__\" data-linktype=\"self-bookmark\">ArrayAccess(Expression,IEnumerable&lt;Expression&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an <a class=\"xref\" href=\"system.linq.expressions.indexexpression\" data-linktype=\"relative-path\">IndexExpression</a> to access a multidimensional array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_ArrayAccess_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression___\" data-linktype=\"self-bookmark\">ArrayAccess(Expression,Expression[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an <a class=\"xref\" href=\"system.linq.expressions.indexexpression\" data-linktype=\"relative-path\">IndexExpression</a> to access an array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_ArrayIndex_System_Linq_Expressions_Expression_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression__\" data-linktype=\"self-bookmark\">ArrayIndex(Expression,IEnumerable&lt;Expression&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents applying an array index operator to an array of rank more than one.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_ArrayIndex_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">ArrayIndex(Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents applying an array index operator to an array of rank one.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_ArrayIndex_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression___\" data-linktype=\"self-bookmark\">ArrayIndex(Expression,Expression[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents applying an array index operator to a multidimensional array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_ArrayLength_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">ArrayLength(Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents an expression for obtaining the length of a one-dimensional array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Assign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">Assign(Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an assignment operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Bind_System_Reflection_MemberInfo_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">Bind(MemberInfo,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.memberassignment\" data-linktype=\"relative-path\">MemberAssignment</a> that represents the initialization of a field or property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Bind_System_Reflection_MethodInfo_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">Bind(MethodInfo,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.memberassignment\" data-linktype=\"relative-path\">MemberAssignment</a> that represents the initialization of a member by using a property accessor method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Block_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression__\" data-linktype=\"self-bookmark\">Block(IEnumerable&lt;Expression&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a> that contains the given expressions and has no variables.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Block_System_Linq_Expressions_Expression___\" data-linktype=\"self-bookmark\">Block(Expression[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a> that contains the given expressions and has no variables.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Block_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ParameterExpression__System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression__\" data-linktype=\"self-bookmark\">Block(IEnumerable&lt;ParameterExpression&gt;,IEnumerable&lt;Expression&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a> that contains the given variables and expressions.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Block_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ParameterExpression__System_Linq_Expressions_Expression___\" data-linktype=\"self-bookmark\">Block(IEnumerable&lt;ParameterExpression&gt;,Expression[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a> that contains the given variables and expressions.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Block_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">Block(Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a> that contains two expressions and has no variables.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Block_System_Type_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression__\" data-linktype=\"self-bookmark\">Block(Type,IEnumerable&lt;Expression&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a> that contains the given expressions, has no variables and has specific result type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Block_System_Type_System_Linq_Expressions_Expression___\" data-linktype=\"self-bookmark\">Block(Type,Expression[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a> that contains the given expressions, has no variables and has specific result type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Block_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">Block(Expression,Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a> that contains three expressions and has no variables.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Block_System_Type_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ParameterExpression__System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression__\" data-linktype=\"self-bookmark\">Block(Type,IEnumerable&lt;ParameterExpression&gt;,IEnumerable&lt;Expression&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a> that contains the given variables and expressions.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Block_System_Type_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ParameterExpression__System_Linq_Expressions_Expression___\" data-linktype=\"self-bookmark\">Block(Type,IEnumerable&lt;ParameterExpression&gt;,Expression[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a> that contains the given variables and expressions.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Block_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">Block(Expression,Expression,Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a> that contains four expressions and has no variables.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Block_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">Block(Expression,Expression,Expression,Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a> that contains five expressions and has no variables.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Break_System_Linq_Expressions_LabelTarget_\" data-linktype=\"self-bookmark\">Break(LabelTarget)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> representing a break statement.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Break_System_Linq_Expressions_LabelTarget_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">Break(LabelTarget,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> representing a break statement. The value passed to the label upon jumping can be specified.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Break_System_Linq_Expressions_LabelTarget_System_Type_\" data-linktype=\"self-bookmark\">Break(LabelTarget,Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> representing a break statement with the specified type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Break_System_Linq_Expressions_LabelTarget_System_Linq_Expressions_Expression_System_Type_\" data-linktype=\"self-bookmark\">Break(LabelTarget,Expression,Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> representing a break statement with the specified type. The value passed to the label upon jumping can be specified.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Call_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">Call(Expression,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents a call to a method that takes no arguments.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Call_System_Reflection_MethodInfo_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression__\" data-linktype=\"self-bookmark\">Call(MethodInfo,IEnumerable&lt;Expression&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents a call to a static (Shared in Visual Basic) method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Call_System_Reflection_MethodInfo_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">Call(MethodInfo,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents a call to a <code>static</code> (<code>Shared</code> in Visual Basic) method that takes one argument.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Call_System_Reflection_MethodInfo_System_Linq_Expressions_Expression___\" data-linktype=\"self-bookmark\">Call(MethodInfo,Expression[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents a call to a <code>static</code> (<code>Shared</code> in Visual Basic) method that has arguments.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Call_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression__\" data-linktype=\"self-bookmark\">Call(Expression,MethodInfo,IEnumerable&lt;Expression&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents a call to a method that takes arguments.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Call_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_System_Linq_Expressions_Expression___\" data-linktype=\"self-bookmark\">Call(Expression,MethodInfo,Expression[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents a call to a method that takes arguments.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Call_System_Reflection_MethodInfo_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">Call(MethodInfo,Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents a call to a static method that takes two arguments.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Call_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">Call(Expression,MethodInfo,Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents a call to a method that takes two arguments.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Call_System_Linq_Expressions_Expression_System_String_System_Type___System_Linq_Expressions_Expression___\" data-linktype=\"self-bookmark\">Call(Expression,String,Type[],Expression[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents a call to a method by calling the appropriate factory method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Call_System_Reflection_MethodInfo_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">Call(MethodInfo,Expression,Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents a call to a static method that takes three arguments.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Call_System_Type_System_String_System_Type___System_Linq_Expressions_Expression___\" data-linktype=\"self-bookmark\">Call(Type,String,Type[],Expression[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents a call to a <code>static</code> (<code>Shared</code> in Visual Basic) method by calling the appropriate factory method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Call_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">Call(Expression,MethodInfo,Expression,Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents a call to a method that takes three arguments.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Call_System_Reflection_MethodInfo_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">Call(MethodInfo,Expression,Expression,Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents a call to a static method that takes four arguments.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Call_System_Reflection_MethodInfo_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">Call(MethodInfo,Expression,Expression,Expression,Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents a call to a static method that takes five arguments.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Catch_System_Linq_Expressions_ParameterExpression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">Catch(ParameterExpression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.catchblock\" data-linktype=\"relative-path\">CatchBlock</a> representing a catch statement with a reference to the caught <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> object for use in the handler body.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Catch_System_Type_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">Catch(Type,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.catchblock\" data-linktype=\"relative-path\">CatchBlock</a> representing a catch statement.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Catch_System_Linq_Expressions_ParameterExpression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">Catch(ParameterExpression,Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.catchblock\" data-linktype=\"relative-path\">CatchBlock</a> representing a catch statement with an <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> filter and a reference to the caught <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Catch_System_Type_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">Catch(Type,Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.catchblock\" data-linktype=\"relative-path\">CatchBlock</a> representing a catch statement with an <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> filter but no reference to the caught <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_ClearDebugInfo_System_Linq_Expressions_SymbolDocumentInfo_\" data-linktype=\"self-bookmark\">ClearDebugInfo(SymbolDocumentInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.debuginfoexpression\" data-linktype=\"relative-path\">DebugInfoExpression</a> for clearing a sequence point.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Coalesce_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">Coalesce(Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a coalescing operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Coalesce_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_LambdaExpression_\" data-linktype=\"self-bookmark\">Coalesce(Expression,Expression,LambdaExpression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a coalescing operation, given a conversion function.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Condition_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">Condition(Expression,Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.conditionalexpression\" data-linktype=\"relative-path\">ConditionalExpression</a> that represents a conditional statement.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Condition_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Type_\" data-linktype=\"self-bookmark\">Condition(Expression,Expression,Expression,Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.conditionalexpression\" data-linktype=\"relative-path\">ConditionalExpression</a> that represents a conditional statement.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Constant_System_Object_\" data-linktype=\"self-bookmark\">Constant(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.constantexpression\" data-linktype=\"relative-path\">ConstantExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.ConstantExpression.Value*</span> property set to the specified value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Constant_System_Object_System_Type_\" data-linktype=\"self-bookmark\">Constant(Object,Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.constantexpression\" data-linktype=\"relative-path\">ConstantExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.ConstantExpression.Value*</span> and <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> properties set to the specified values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Continue_System_Linq_Expressions_LabelTarget_\" data-linktype=\"self-bookmark\">Continue(LabelTarget)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> representing a continue statement.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Continue_System_Linq_Expressions_LabelTarget_System_Type_\" data-linktype=\"self-bookmark\">Continue(LabelTarget,Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> representing a continue statement with the specified type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Convert_System_Linq_Expressions_Expression_System_Type_\" data-linktype=\"self-bookmark\">Convert(Expression,Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents a type conversion operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Convert_System_Linq_Expressions_Expression_System_Type_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">Convert(Expression,Type,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents a conversion operation for which the implementing method is specified.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_ConvertChecked_System_Linq_Expressions_Expression_System_Type_\" data-linktype=\"self-bookmark\">ConvertChecked(Expression,Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents a conversion operation that throws an exception if the target type is overflowed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_ConvertChecked_System_Linq_Expressions_Expression_System_Type_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">ConvertChecked(Expression,Type,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents a conversion operation that throws an exception if the target type is overflowed and for which the implementing method is specified.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_DebugInfo_System_Linq_Expressions_SymbolDocumentInfo_System_Int32_System_Int32_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">DebugInfo(SymbolDocumentInfo,Int32,Int32,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.debuginfoexpression\" data-linktype=\"relative-path\">DebugInfoExpression</a> with the specified span.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Decrement_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">Decrement(Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents the decrementing of the expression by 1.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Decrement_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">Decrement(Expression,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents the decrementing of the expression by 1.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Default_System_Type_\" data-linktype=\"self-bookmark\">Default(Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.defaultexpression\" data-linktype=\"relative-path\">DefaultExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property set to the specified type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Divide_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">Divide(Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an arithmetic division operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Divide_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">Divide(Expression,Expression,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an arithmetic division operation. The implementing method can be specified.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_DivideAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">DivideAssign(Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a division assignment operation that does not have overflow checking.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_DivideAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">DivideAssign(Expression,Expression,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a division assignment operation that does not have overflow checking.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_DivideAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_System_Linq_Expressions_LambdaExpression_\" data-linktype=\"self-bookmark\">DivideAssign(Expression,Expression,MethodInfo,LambdaExpression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a division assignment operation that does not have overflow checking.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Dynamic_System_Runtime_CompilerServices_CallSiteBinder_System_Type_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression__\" data-linktype=\"self-bookmark\">Dynamic(CallSiteBinder,Type,IEnumerable&lt;Expression&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.dynamicexpression\" data-linktype=\"relative-path\">DynamicExpression</a> that represents a dynamic operation bound by the provided <a class=\"xref\" href=\"system.runtime.compilerservices.callsitebinder\" data-linktype=\"relative-path\">CallSiteBinder</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Dynamic_System_Runtime_CompilerServices_CallSiteBinder_System_Type_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">Dynamic(CallSiteBinder,Type,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.dynamicexpression\" data-linktype=\"relative-path\">DynamicExpression</a> that represents a dynamic operation bound by the provided <a class=\"xref\" href=\"system.runtime.compilerservices.callsitebinder\" data-linktype=\"relative-path\">CallSiteBinder</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Dynamic_System_Runtime_CompilerServices_CallSiteBinder_System_Type_System_Linq_Expressions_Expression___\" data-linktype=\"self-bookmark\">Dynamic(CallSiteBinder,Type,Expression[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.dynamicexpression\" data-linktype=\"relative-path\">DynamicExpression</a> that represents a dynamic operation bound by the provided <a class=\"xref\" href=\"system.runtime.compilerservices.callsitebinder\" data-linktype=\"relative-path\">CallSiteBinder</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Dynamic_System_Runtime_CompilerServices_CallSiteBinder_System_Type_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">Dynamic(CallSiteBinder,Type,Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.dynamicexpression\" data-linktype=\"relative-path\">DynamicExpression</a> that represents a dynamic operation bound by the provided <a class=\"xref\" href=\"system.runtime.compilerservices.callsitebinder\" data-linktype=\"relative-path\">CallSiteBinder</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Dynamic_System_Runtime_CompilerServices_CallSiteBinder_System_Type_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">Dynamic(CallSiteBinder,Type,Expression,Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.dynamicexpression\" data-linktype=\"relative-path\">DynamicExpression</a> that represents a dynamic operation bound by the provided <a class=\"xref\" href=\"system.runtime.compilerservices.callsitebinder\" data-linktype=\"relative-path\">CallSiteBinder</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Dynamic_System_Runtime_CompilerServices_CallSiteBinder_System_Type_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">Dynamic(CallSiteBinder,Type,Expression,Expression,Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.dynamicexpression\" data-linktype=\"relative-path\">DynamicExpression</a> that represents a dynamic operation bound by the provided <a class=\"xref\" href=\"system.runtime.compilerservices.callsitebinder\" data-linktype=\"relative-path\">CallSiteBinder</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_ElementInit_System_Reflection_MethodInfo_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression__\" data-linktype=\"self-bookmark\">ElementInit(MethodInfo,IEnumerable&lt;Expression&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an <a class=\"xref\" href=\"system.linq.expressions.elementinit\" data-linktype=\"relative-path\">ElementInit</a>, given an <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> as the second argument.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_ElementInit_System_Reflection_MethodInfo_System_Linq_Expressions_Expression___\" data-linktype=\"self-bookmark\">ElementInit(MethodInfo,Expression[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an <a class=\"xref\" href=\"system.linq.expressions.elementinit\" data-linktype=\"relative-path\">ElementInit</a>, given an array of values as the second argument.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Empty\" data-linktype=\"self-bookmark\">Empty()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an empty expression that has <a class=\"xref\" href=\"system.void\" data-linktype=\"relative-path\">Void</a> type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Equal_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">Equal(Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an equality comparison.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Equal_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Boolean_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">Equal(Expression,Expression,Boolean,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an equality comparison. The implementing method can be specified.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_ExclusiveOr_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">ExclusiveOr(Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a bitwise <code>XOR</code> operation, using <code>op_ExclusiveOr</code> for user-defined types.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_ExclusiveOr_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">ExclusiveOr(Expression,Expression,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a bitwise <code>XOR</code> operation, using <code>op_ExclusiveOr</code> for user-defined types. The implementing method can be specified.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_ExclusiveOrAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">ExclusiveOrAssign(Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a bitwise XOR assignment operation, using <code>op_ExclusiveOr</code> for user-defined types.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_ExclusiveOrAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">ExclusiveOrAssign(Expression,Expression,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a bitwise XOR assignment operation, using <code>op_ExclusiveOr</code> for user-defined types.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_ExclusiveOrAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_System_Linq_Expressions_LambdaExpression_\" data-linktype=\"self-bookmark\">ExclusiveOrAssign(Expression,Expression,MethodInfo,LambdaExpression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a bitwise XOR assignment operation, using <code>op_ExclusiveOr</code> for user-defined types.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Field_System_Linq_Expressions_Expression_System_Reflection_FieldInfo_\" data-linktype=\"self-bookmark\">Field(Expression,FieldInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.memberexpression\" data-linktype=\"relative-path\">MemberExpression</a> that represents accessing a field.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Field_System_Linq_Expressions_Expression_System_String_\" data-linktype=\"self-bookmark\">Field(Expression,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.memberexpression\" data-linktype=\"relative-path\">MemberExpression</a> that represents accessing a field given the name of the field.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Field_System_Linq_Expressions_Expression_System_Type_System_String_\" data-linktype=\"self-bookmark\">Field(Expression,Type,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.memberexpression\" data-linktype=\"relative-path\">MemberExpression</a> that represents accessing a field.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_GetActionType_System_Type___\" data-linktype=\"self-bookmark\">GetActionType(Type[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents a generic <code>System.Action</code> delegate type that has specific type arguments.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_GetDelegateType_System_Type___\" data-linktype=\"self-bookmark\">GetDelegateType(Type[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> object that represents a generic <code>System.Func</code> or <code>System.Action</code> delegate type that has specific type arguments.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_GetFuncType_System_Type___\" data-linktype=\"self-bookmark\">GetFuncType(Type[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> object that represents a generic <code>System.Func</code> delegate type that has specific type arguments. The last type argument specifies the return type of the created delegate.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Goto_System_Linq_Expressions_LabelTarget_\" data-linktype=\"self-bookmark\">Goto(LabelTarget)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> representing a &quot;go to&quot; statement.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Goto_System_Linq_Expressions_LabelTarget_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">Goto(LabelTarget,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> representing a &quot;go to&quot; statement. The value passed to the label upon jumping can be specified.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Goto_System_Linq_Expressions_LabelTarget_System_Type_\" data-linktype=\"self-bookmark\">Goto(LabelTarget,Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> representing a &quot;go to&quot; statement with the specified type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Goto_System_Linq_Expressions_LabelTarget_System_Linq_Expressions_Expression_System_Type_\" data-linktype=\"self-bookmark\">Goto(LabelTarget,Expression,Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> representing a &quot;go to&quot; statement with the specified type. The value passed to the label upon jumping can be specified.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_GreaterThan_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">GreaterThan(Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a &quot;greater than&quot; numeric comparison.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_GreaterThan_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Boolean_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">GreaterThan(Expression,Expression,Boolean,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a &quot;greater than&quot; numeric comparison. The implementing method can be specified.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_GreaterThanOrEqual_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">GreaterThanOrEqual(Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a &quot;greater than or equal&quot; numeric comparison.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_GreaterThanOrEqual_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Boolean_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">GreaterThanOrEqual(Expression,Expression,Boolean,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a &quot;greater than or equal&quot; numeric comparison.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_IfThen_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">IfThen(Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.conditionalexpression\" data-linktype=\"relative-path\">ConditionalExpression</a> that represents a conditional block with an <code>if</code> statement.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_IfThenElse_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">IfThenElse(Expression,Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.conditionalexpression\" data-linktype=\"relative-path\">ConditionalExpression</a> that represents a conditional block with <code>if</code> and <code>else</code> statements.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Increment_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">Increment(Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents the incrementing of the expression value by 1.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Increment_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">Increment(Expression,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents the incrementing of the expression by 1.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Invoke_System_Linq_Expressions_Expression_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression__\" data-linktype=\"self-bookmark\">Invoke(Expression,IEnumerable&lt;Expression&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an <a class=\"xref\" href=\"system.linq.expressions.invocationexpression\" data-linktype=\"relative-path\">InvocationExpression</a> that applies a delegate or lambda expression to a list of argument expressions.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Invoke_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression___\" data-linktype=\"self-bookmark\">Invoke(Expression,Expression[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an <a class=\"xref\" href=\"system.linq.expressions.invocationexpression\" data-linktype=\"relative-path\">InvocationExpression</a> that applies a delegate or lambda expression to a list of argument expressions.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_IsFalse_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">IsFalse(Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns whether the expression evaluates to false.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_IsFalse_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">IsFalse(Expression,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns whether the expression evaluates to false.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_IsTrue_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">IsTrue(Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns whether the expression evaluates to true.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_IsTrue_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">IsTrue(Expression,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns whether the expression evaluates to true.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Label\" data-linktype=\"self-bookmark\">Label()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a> representing a label with void type and no name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Label_System_Linq_Expressions_LabelTarget_\" data-linktype=\"self-bookmark\">Label(LabelTarget)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.labelexpression\" data-linktype=\"relative-path\">LabelExpression</a> representing a label without a default value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Label_System_String_\" data-linktype=\"self-bookmark\">Label(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a> representing a label with void type and the given name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Label_System_Type_\" data-linktype=\"self-bookmark\">Label(Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a> representing a label with the given type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Label_System_Linq_Expressions_LabelTarget_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">Label(LabelTarget,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.labelexpression\" data-linktype=\"relative-path\">LabelExpression</a> representing a label with the given default value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Label_System_Type_System_String_\" data-linktype=\"self-bookmark\">Label(Type,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a> representing a label with the given type and name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Lambda_System_Linq_Expressions_Expression_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ParameterExpression__\" data-linktype=\"self-bookmark\">Lambda(Expression,IEnumerable&lt;ParameterExpression&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a LambdaExpression by first constructing a delegate type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Lambda_System_Linq_Expressions_Expression_System_Linq_Expressions_ParameterExpression___\" data-linktype=\"self-bookmark\">Lambda(Expression,ParameterExpression[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a> by first constructing a delegate type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Lambda_System_Linq_Expressions_Expression_System_Boolean_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ParameterExpression__\" data-linktype=\"self-bookmark\">Lambda(Expression,Boolean,IEnumerable&lt;ParameterExpression&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a LambdaExpression by first constructing a delegate type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Lambda_System_Linq_Expressions_Expression_System_Boolean_System_Linq_Expressions_ParameterExpression___\" data-linktype=\"self-bookmark\">Lambda(Expression,Boolean,ParameterExpression[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a LambdaExpression by first constructing a delegate type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Lambda_System_Linq_Expressions_Expression_System_String_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ParameterExpression__\" data-linktype=\"self-bookmark\">Lambda(Expression,String,IEnumerable&lt;ParameterExpression&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a LambdaExpression by first constructing a delegate type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Lambda_System_Type_System_Linq_Expressions_Expression_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ParameterExpression__\" data-linktype=\"self-bookmark\">Lambda(Type,Expression,IEnumerable&lt;ParameterExpression&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a> by first constructing a delegate type. It can be used when the delegate type is not known at compile time.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Lambda_System_Type_System_Linq_Expressions_Expression_System_Linq_Expressions_ParameterExpression___\" data-linktype=\"self-bookmark\">Lambda(Type,Expression,ParameterExpression[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a> by first constructing a delegate type. It can be used when the delegate type is not known at compile time.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Lambda_System_Linq_Expressions_Expression_System_String_System_Boolean_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ParameterExpression__\" data-linktype=\"self-bookmark\">Lambda(Expression,String,Boolean,IEnumerable&lt;ParameterExpression&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a LambdaExpression by first constructing a delegate type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Lambda_System_Type_System_Linq_Expressions_Expression_System_Boolean_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ParameterExpression__\" data-linktype=\"self-bookmark\">Lambda(Type,Expression,Boolean,IEnumerable&lt;ParameterExpression&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a LambdaExpression by first constructing a delegate type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Lambda_System_Type_System_Linq_Expressions_Expression_System_Boolean_System_Linq_Expressions_ParameterExpression___\" data-linktype=\"self-bookmark\">Lambda(Type,Expression,Boolean,ParameterExpression[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a LambdaExpression by first constructing a delegate type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Lambda_System_Type_System_Linq_Expressions_Expression_System_String_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ParameterExpression__\" data-linktype=\"self-bookmark\">Lambda(Type,Expression,String,IEnumerable&lt;ParameterExpression&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a LambdaExpression by first constructing a delegate type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Lambda_System_Type_System_Linq_Expressions_Expression_System_String_System_Boolean_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ParameterExpression__\" data-linktype=\"self-bookmark\">Lambda(Type,Expression,String,Boolean,IEnumerable&lt;ParameterExpression&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a LambdaExpression by first constructing a delegate type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Lambda__1_System_Linq_Expressions_Expression_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ParameterExpression__\" data-linktype=\"self-bookmark\">Lambda&lt;TDelegate&gt;(Expression,IEnumerable&lt;ParameterExpression&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an <span class=\"xref\">stem.Linq.Expressions.Expression`1</span> where the delegate type is known at compile time.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Lambda__1_System_Linq_Expressions_Expression_System_Linq_Expressions_ParameterExpression___\" data-linktype=\"self-bookmark\">Lambda&lt;TDelegate&gt;(Expression,ParameterExpression[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an <span class=\"xref\">stem.Linq.Expressions.Expression`1</span> where the delegate type is known at compile time.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Lambda__1_System_Linq_Expressions_Expression_System_Boolean_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ParameterExpression__\" data-linktype=\"self-bookmark\">Lambda&lt;TDelegate&gt;(Expression,Boolean,IEnumerable&lt;ParameterExpression&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an <span class=\"xref\">stem.Linq.Expressions.Expression`1</span> where the delegate type is known at compile time.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Lambda__1_System_Linq_Expressions_Expression_System_Boolean_System_Linq_Expressions_ParameterExpression___\" data-linktype=\"self-bookmark\">Lambda&lt;TDelegate&gt;(Expression,Boolean,ParameterExpression[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an <span class=\"xref\">stem.Linq.Expressions.Expression`1</span> where the delegate type is known at compile time.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Lambda__1_System_Linq_Expressions_Expression_System_String_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ParameterExpression__\" data-linktype=\"self-bookmark\">Lambda&lt;TDelegate&gt;(Expression,String,IEnumerable&lt;ParameterExpression&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an <span class=\"xref\">stem.Linq.Expressions.Expression`1</span> where the delegate type is known at compile time.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Lambda__1_System_Linq_Expressions_Expression_System_String_System_Boolean_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ParameterExpression__\" data-linktype=\"self-bookmark\">Lambda&lt;TDelegate&gt;(Expression,String,Boolean,IEnumerable&lt;ParameterExpression&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an <span class=\"xref\">stem.Linq.Expressions.Expression`1</span> where the delegate type is known at compile time.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_LeftShift_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">LeftShift(Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a bitwise left-shift operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_LeftShift_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">LeftShift(Expression,Expression,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a bitwise left-shift operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_LeftShiftAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">LeftShiftAssign(Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a bitwise left-shift assignment operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_LeftShiftAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">LeftShiftAssign(Expression,Expression,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a bitwise left-shift assignment operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_LeftShiftAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_System_Linq_Expressions_LambdaExpression_\" data-linktype=\"self-bookmark\">LeftShiftAssign(Expression,Expression,MethodInfo,LambdaExpression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a bitwise left-shift assignment operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_LessThan_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">LessThan(Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a &quot;less than&quot; numeric comparison.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_LessThan_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Boolean_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">LessThan(Expression,Expression,Boolean,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a &quot;less than&quot; numeric comparison.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_LessThanOrEqual_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">LessThanOrEqual(Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a &quot; less than or equal&quot; numeric comparison.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_LessThanOrEqual_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Boolean_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">LessThanOrEqual(Expression,Expression,Boolean,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a &quot;less than or equal&quot; numeric comparison.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_ListBind_System_Reflection_MemberInfo_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ElementInit__\" data-linktype=\"self-bookmark\">ListBind(MemberInfo,IEnumerable&lt;ElementInit&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.memberlistbinding\" data-linktype=\"relative-path\">MemberListBinding</a> where the member is a field or property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_ListBind_System_Reflection_MemberInfo_System_Linq_Expressions_ElementInit___\" data-linktype=\"self-bookmark\">ListBind(MemberInfo,ElementInit[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.memberlistbinding\" data-linktype=\"relative-path\">MemberListBinding</a> where the member is a field or property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_ListBind_System_Reflection_MethodInfo_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ElementInit__\" data-linktype=\"self-bookmark\">ListBind(MethodInfo,IEnumerable&lt;ElementInit&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.memberlistbinding\" data-linktype=\"relative-path\">MemberListBinding</a> based on a specified property accessor method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_ListBind_System_Reflection_MethodInfo_System_Linq_Expressions_ElementInit___\" data-linktype=\"self-bookmark\">ListBind(MethodInfo,ElementInit[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.memberlistbinding\" data-linktype=\"relative-path\">MemberListBinding</a> object based on a specified property accessor method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_ListInit_System_Linq_Expressions_NewExpression_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ElementInit__\" data-linktype=\"self-bookmark\">ListInit(NewExpression,IEnumerable&lt;ElementInit&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.listinitexpression\" data-linktype=\"relative-path\">ListInitExpression</a> that uses specified <a class=\"xref\" href=\"system.linq.expressions.elementinit\" data-linktype=\"relative-path\">ElementInit</a> objects to initialize a collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_ListInit_System_Linq_Expressions_NewExpression_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression__\" data-linktype=\"self-bookmark\">ListInit(NewExpression,IEnumerable&lt;Expression&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.listinitexpression\" data-linktype=\"relative-path\">ListInitExpression</a> that uses a method named &quot;Add&quot; to add elements to a collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_ListInit_System_Linq_Expressions_NewExpression_System_Linq_Expressions_ElementInit___\" data-linktype=\"self-bookmark\">ListInit(NewExpression,ElementInit[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.listinitexpression\" data-linktype=\"relative-path\">ListInitExpression</a> that uses specified <a class=\"xref\" href=\"system.linq.expressions.elementinit\" data-linktype=\"relative-path\">ElementInit</a> objects to initialize a collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_ListInit_System_Linq_Expressions_NewExpression_System_Linq_Expressions_Expression___\" data-linktype=\"self-bookmark\">ListInit(NewExpression,Expression[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.listinitexpression\" data-linktype=\"relative-path\">ListInitExpression</a> that uses a method named &quot;Add&quot; to add elements to a collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_ListInit_System_Linq_Expressions_NewExpression_System_Reflection_MethodInfo_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression__\" data-linktype=\"self-bookmark\">ListInit(NewExpression,MethodInfo,IEnumerable&lt;Expression&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.listinitexpression\" data-linktype=\"relative-path\">ListInitExpression</a> that uses a specified method to add elements to a collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_ListInit_System_Linq_Expressions_NewExpression_System_Reflection_MethodInfo_System_Linq_Expressions_Expression___\" data-linktype=\"self-bookmark\">ListInit(NewExpression,MethodInfo,Expression[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.listinitexpression\" data-linktype=\"relative-path\">ListInitExpression</a> that uses a specified method to add elements to a collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Loop_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">Loop(Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.loopexpression\" data-linktype=\"relative-path\">LoopExpression</a> with the given body.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Loop_System_Linq_Expressions_Expression_System_Linq_Expressions_LabelTarget_\" data-linktype=\"self-bookmark\">Loop(Expression,LabelTarget)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.loopexpression\" data-linktype=\"relative-path\">LoopExpression</a> with the given body and break target.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Loop_System_Linq_Expressions_Expression_System_Linq_Expressions_LabelTarget_System_Linq_Expressions_LabelTarget_\" data-linktype=\"self-bookmark\">Loop(Expression,LabelTarget,LabelTarget)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.loopexpression\" data-linktype=\"relative-path\">LoopExpression</a> with the given body.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_MakeBinary_System_Linq_Expressions_ExpressionType_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">MakeBinary(ExpressionType,Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a>, given the left and right operands, by calling an appropriate factory method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_MakeBinary_System_Linq_Expressions_ExpressionType_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Boolean_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">MakeBinary(ExpressionType,Expression,Expression,Boolean,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a>, given the left operand, right operand and implementing method, by calling the appropriate factory method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_MakeBinary_System_Linq_Expressions_ExpressionType_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Boolean_System_Reflection_MethodInfo_System_Linq_Expressions_LambdaExpression_\" data-linktype=\"self-bookmark\">MakeBinary(ExpressionType,Expression,Expression,Boolean,MethodInfo,LambdaExpression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a>, given the left operand, right operand, implementing method and type conversion function, by calling the appropriate factory method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_MakeCatchBlock_System_Type_System_Linq_Expressions_ParameterExpression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">MakeCatchBlock(Type,ParameterExpression,Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.catchblock\" data-linktype=\"relative-path\">CatchBlock</a> representing a catch statement with the specified elements.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_MakeDynamic_System_Type_System_Runtime_CompilerServices_CallSiteBinder_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression__\" data-linktype=\"self-bookmark\">MakeDynamic(Type,CallSiteBinder,IEnumerable&lt;Expression&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.dynamicexpression\" data-linktype=\"relative-path\">DynamicExpression</a> that represents a dynamic operation bound by the provided <a class=\"xref\" href=\"system.runtime.compilerservices.callsitebinder\" data-linktype=\"relative-path\">CallSiteBinder</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_MakeDynamic_System_Type_System_Runtime_CompilerServices_CallSiteBinder_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">MakeDynamic(Type,CallSiteBinder,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.dynamicexpression\" data-linktype=\"relative-path\">DynamicExpression</a> that represents a dynamic operation bound by the provided <a class=\"xref\" href=\"system.runtime.compilerservices.callsitebinder\" data-linktype=\"relative-path\">CallSiteBinder</a> and one argument.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_MakeDynamic_System_Type_System_Runtime_CompilerServices_CallSiteBinder_System_Linq_Expressions_Expression___\" data-linktype=\"self-bookmark\">MakeDynamic(Type,CallSiteBinder,Expression[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.dynamicexpression\" data-linktype=\"relative-path\">DynamicExpression</a> that represents a dynamic operation bound by the provided <a class=\"xref\" href=\"system.runtime.compilerservices.callsitebinder\" data-linktype=\"relative-path\">CallSiteBinder</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_MakeDynamic_System_Type_System_Runtime_CompilerServices_CallSiteBinder_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">MakeDynamic(Type,CallSiteBinder,Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.dynamicexpression\" data-linktype=\"relative-path\">DynamicExpression</a> that represents a dynamic operation bound by the provided <a class=\"xref\" href=\"system.runtime.compilerservices.callsitebinder\" data-linktype=\"relative-path\">CallSiteBinder</a> and two arguments.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_MakeDynamic_System_Type_System_Runtime_CompilerServices_CallSiteBinder_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.dynamicexpression\" data-linktype=\"relative-path\">DynamicExpression</a> that represents a dynamic operation bound by the provided <a class=\"xref\" href=\"system.runtime.compilerservices.callsitebinder\" data-linktype=\"relative-path\">CallSiteBinder</a> and three arguments.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_MakeDynamic_System_Type_System_Runtime_CompilerServices_CallSiteBinder_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.dynamicexpression\" data-linktype=\"relative-path\">DynamicExpression</a> that represents a dynamic operation bound by the provided <a class=\"xref\" href=\"system.runtime.compilerservices.callsitebinder\" data-linktype=\"relative-path\">CallSiteBinder</a> and four arguments.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_MakeGoto_System_Linq_Expressions_GotoExpressionKind_System_Linq_Expressions_LabelTarget_System_Linq_Expressions_Expression_System_Type_\" data-linktype=\"self-bookmark\">MakeGoto(GotoExpressionKind,LabelTarget,Expression,Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> representing a jump of the specified <a class=\"xref\" href=\"system.linq.expressions.gotoexpressionkind\" data-linktype=\"relative-path\">GotoExpressionKind</a>. The value passed to the label upon jumping can also be specified.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_MakeIndex_System_Linq_Expressions_Expression_System_Reflection_PropertyInfo_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression__\" data-linktype=\"self-bookmark\">MakeIndex(Expression,PropertyInfo,IEnumerable&lt;Expression&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an <a class=\"xref\" href=\"system.linq.expressions.indexexpression\" data-linktype=\"relative-path\">IndexExpression</a> that represents accessing an indexed property in an object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_MakeMemberAccess_System_Linq_Expressions_Expression_System_Reflection_MemberInfo_\" data-linktype=\"self-bookmark\">MakeMemberAccess(Expression,MemberInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.memberexpression\" data-linktype=\"relative-path\">MemberExpression</a> that represents accessing either a field or a property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_MakeTry_System_Type_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Collections_Generic_IEnumerable_System_Linq_Expressions_CatchBlock__\" data-linktype=\"self-bookmark\">MakeTry(Type,Expression,Expression,Expression,IEnumerable&lt;CatchBlock&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.tryexpression\" data-linktype=\"relative-path\">TryExpression</a> representing a try block with the specified elements.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_MakeUnary_System_Linq_Expressions_ExpressionType_System_Linq_Expressions_Expression_System_Type_\" data-linktype=\"self-bookmark\">MakeUnary(ExpressionType,Expression,Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a>, given an operand, by calling the appropriate factory method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_MakeUnary_System_Linq_Expressions_ExpressionType_System_Linq_Expressions_Expression_System_Type_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">MakeUnary(ExpressionType,Expression,Type,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a>, given an operand and implementing method, by calling the appropriate factory method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_MemberBind_System_Reflection_MemberInfo_System_Collections_Generic_IEnumerable_System_Linq_Expressions_MemberBinding__\" data-linktype=\"self-bookmark\">MemberBind(MemberInfo,IEnumerable&lt;MemberBinding&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.membermemberbinding\" data-linktype=\"relative-path\">MemberMemberBinding</a> that represents the recursive initialization of members of a field or property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_MemberBind_System_Reflection_MemberInfo_System_Linq_Expressions_MemberBinding___\" data-linktype=\"self-bookmark\">MemberBind(MemberInfo,MemberBinding[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.membermemberbinding\" data-linktype=\"relative-path\">MemberMemberBinding</a> that represents the recursive initialization of members of a field or property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_MemberBind_System_Reflection_MethodInfo_System_Collections_Generic_IEnumerable_System_Linq_Expressions_MemberBinding__\" data-linktype=\"self-bookmark\">MemberBind(MethodInfo,IEnumerable&lt;MemberBinding&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.membermemberbinding\" data-linktype=\"relative-path\">MemberMemberBinding</a> that represents the recursive initialization of members of a member that is accessed by using a property accessor method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_MemberBind_System_Reflection_MethodInfo_System_Linq_Expressions_MemberBinding___\" data-linktype=\"self-bookmark\">MemberBind(MethodInfo,MemberBinding[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.membermemberbinding\" data-linktype=\"relative-path\">MemberMemberBinding</a> that represents the recursive initialization of members of a member that is accessed by using a property accessor method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_MemberInit_System_Linq_Expressions_NewExpression_System_Collections_Generic_IEnumerable_System_Linq_Expressions_MemberBinding__\" data-linktype=\"self-bookmark\">MemberInit(NewExpression,IEnumerable&lt;MemberBinding&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents an expression that creates a new object and initializes a property of the object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_MemberInit_System_Linq_Expressions_NewExpression_System_Linq_Expressions_MemberBinding___\" data-linktype=\"self-bookmark\">MemberInit(NewExpression,MemberBinding[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.memberinitexpression\" data-linktype=\"relative-path\">MemberInitExpression</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Modulo_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">Modulo(Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an arithmetic remainder operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Modulo_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">Modulo(Expression,Expression,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an arithmetic remainder operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_ModuloAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">ModuloAssign(Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a remainder assignment operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_ModuloAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">ModuloAssign(Expression,Expression,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a remainder assignment operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_ModuloAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_System_Linq_Expressions_LambdaExpression_\" data-linktype=\"self-bookmark\">ModuloAssign(Expression,Expression,MethodInfo,LambdaExpression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a remainder assignment operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Multiply_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">Multiply(Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an arithmetic multiplication operation that does not have overflow checking.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Multiply_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">Multiply(Expression,Expression,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an arithmetic multiplication operation that does not have overflow checking.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_MultiplyAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">MultiplyAssign(Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a multiplication assignment operation that does not have overflow checking.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_MultiplyAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">MultiplyAssign(Expression,Expression,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a multiplication assignment operation that does not have overflow checking.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_MultiplyAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_System_Linq_Expressions_LambdaExpression_\" data-linktype=\"self-bookmark\">MultiplyAssign(Expression,Expression,MethodInfo,LambdaExpression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a multiplication assignment operation that does not have overflow checking.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_MultiplyAssignChecked_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">MultiplyAssignChecked(Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a multiplication assignment operation that has overflow checking.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_MultiplyAssignChecked_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">MultiplyAssignChecked(Expression,Expression,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a multiplication assignment operation that has overflow checking.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_MultiplyAssignChecked_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_System_Linq_Expressions_LambdaExpression_\" data-linktype=\"self-bookmark\">MultiplyAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a multiplication assignment operation that has overflow checking.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_MultiplyChecked_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">MultiplyChecked(Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an arithmetic multiplication operation that has overflow checking.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_MultiplyChecked_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">MultiplyChecked(Expression,Expression,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an arithmetic multiplication operation that has overflow checking.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Negate_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">Negate(Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents an arithmetic negation operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Negate_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">Negate(Expression,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents an arithmetic negation operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_NegateChecked_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">NegateChecked(Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents an arithmetic negation operation that has overflow checking.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_NegateChecked_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">NegateChecked(Expression,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents an arithmetic negation operation that has overflow checking. The implementing method can be specified.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_New_System_Reflection_ConstructorInfo_\" data-linktype=\"self-bookmark\">New(ConstructorInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a> that represents calling the specified constructor that takes no arguments.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_New_System_Type_\" data-linktype=\"self-bookmark\">New(Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a> that represents calling the parameterless constructor of the specified type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_New_System_Reflection_ConstructorInfo_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression__\" data-linktype=\"self-bookmark\">New(ConstructorInfo,IEnumerable&lt;Expression&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a> that represents calling the specified constructor with the specified arguments.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_New_System_Reflection_ConstructorInfo_System_Linq_Expressions_Expression___\" data-linktype=\"self-bookmark\">New(ConstructorInfo,Expression[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a> that represents calling the specified constructor with the specified arguments.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_New_System_Reflection_ConstructorInfo_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression__System_Collections_Generic_IEnumerable_System_Reflection_MemberInfo__\" data-linktype=\"self-bookmark\">New(ConstructorInfo,IEnumerable&lt;Expression&gt;,IEnumerable&lt;MemberInfo&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a> that represents calling the specified constructor with the specified arguments. The members that access the constructor initialized fields are specified.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_New_System_Reflection_ConstructorInfo_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression__System_Reflection_MemberInfo___\" data-linktype=\"self-bookmark\">New(ConstructorInfo,IEnumerable&lt;Expression&gt;,MemberInfo[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a> that represents calling the specified constructor with the specified arguments. The members that access the constructor initialized fields are specified as an array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_NewArrayBounds_System_Type_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression__\" data-linktype=\"self-bookmark\">NewArrayBounds(Type,IEnumerable&lt;Expression&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.newarrayexpression\" data-linktype=\"relative-path\">NewArrayExpression</a> that represents creating an array that has a specified rank.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_NewArrayBounds_System_Type_System_Linq_Expressions_Expression___\" data-linktype=\"self-bookmark\">NewArrayBounds(Type,Expression[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.newarrayexpression\" data-linktype=\"relative-path\">NewArrayExpression</a> that represents creating an array that has a specified rank.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_NewArrayInit_System_Type_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression__\" data-linktype=\"self-bookmark\">NewArrayInit(Type,IEnumerable&lt;Expression&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.newarrayexpression\" data-linktype=\"relative-path\">NewArrayExpression</a> that represents creating a one-dimensional array and initializing it from a list of elements.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_NewArrayInit_System_Type_System_Linq_Expressions_Expression___\" data-linktype=\"self-bookmark\">NewArrayInit(Type,Expression[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.newarrayexpression\" data-linktype=\"relative-path\">NewArrayExpression</a> that represents creating a one-dimensional array and initializing it from a list of elements.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Not_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">Not(Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents a bitwise complement operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Not_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">Not(Expression,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents a bitwise complement operation. The implementing method can be specified.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_NotEqual_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">NotEqual(Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an inequality comparison.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_NotEqual_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Boolean_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">NotEqual(Expression,Expression,Boolean,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an inequality comparison.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_OnesComplement_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">OnesComplement(Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the expression representing the ones complement.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_OnesComplement_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">OnesComplement(Expression,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the expression representing the ones complement.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Or_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">Or(Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a bitwise <code>OR</code> operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Or_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">Or(Expression,Expression,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a bitwise <code>OR</code> operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_OrAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">OrAssign(Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a bitwise OR assignment operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_OrAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">OrAssign(Expression,Expression,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a bitwise OR assignment operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_OrAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_System_Linq_Expressions_LambdaExpression_\" data-linktype=\"self-bookmark\">OrAssign(Expression,Expression,MethodInfo,LambdaExpression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a bitwise OR assignment operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_OrElse_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">OrElse(Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a conditional <code>OR</code> operation that evaluates the second operand only if the first operand evaluates to <code>false</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_OrElse_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">OrElse(Expression,Expression,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a conditional <code>OR</code> operation that evaluates the second operand only if the first operand evaluates to <code>false</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Parameter_System_Type_\" data-linktype=\"self-bookmark\">Parameter(Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a> node that can be used to identify a parameter or a variable in an expression tree.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Parameter_System_Type_System_String_\" data-linktype=\"self-bookmark\">Parameter(Type,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a> node that can be used to identify a parameter or a variable in an expression tree.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_PostDecrementAssign_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">PostDecrementAssign(Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_PostDecrementAssign_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">PostDecrementAssign(Expression,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_PostIncrementAssign_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">PostIncrementAssign(Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_PostIncrementAssign_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">PostIncrementAssign(Expression,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Power_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">Power(Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents raising a number to a power.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Power_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">Power(Expression,Expression,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents raising a number to a power.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_PowerAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">PowerAssign(Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents raising an expression to a power and assigning the result back to the expression.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_PowerAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">PowerAssign(Expression,Expression,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents raising an expression to a power and assigning the result back to the expression.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_PowerAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_System_Linq_Expressions_LambdaExpression_\" data-linktype=\"self-bookmark\">PowerAssign(Expression,Expression,MethodInfo,LambdaExpression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents raising an expression to a power and assigning the result back to the expression.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_PreDecrementAssign_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">PreDecrementAssign(Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that decrements the expression by 1 and assigns the result back to the expression.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_PreDecrementAssign_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">PreDecrementAssign(Expression,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that decrements the expression by 1 and assigns the result back to the expression.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_PreIncrementAssign_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">PreIncrementAssign(Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that increments the expression by 1 and assigns the result back to the expression.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_PreIncrementAssign_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">PreIncrementAssign(Expression,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that increments the expression by 1 and assigns the result back to the expression.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Property_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">Property(Expression,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.memberexpression\" data-linktype=\"relative-path\">MemberExpression</a> that represents accessing a property by using a property accessor method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Property_System_Linq_Expressions_Expression_System_Reflection_PropertyInfo_\" data-linktype=\"self-bookmark\">Property(Expression,PropertyInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.memberexpression\" data-linktype=\"relative-path\">MemberExpression</a> that represents accessing a property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Property_System_Linq_Expressions_Expression_System_String_\" data-linktype=\"self-bookmark\">Property(Expression,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.memberexpression\" data-linktype=\"relative-path\">MemberExpression</a> that represents accessing a property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Property_System_Linq_Expressions_Expression_System_Reflection_PropertyInfo_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression__\" data-linktype=\"self-bookmark\">Property(Expression,PropertyInfo,IEnumerable&lt;Expression&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an <a class=\"xref\" href=\"system.linq.expressions.indexexpression\" data-linktype=\"relative-path\">IndexExpression</a> representing the access to an indexed property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Property_System_Linq_Expressions_Expression_System_Reflection_PropertyInfo_System_Linq_Expressions_Expression___\" data-linktype=\"self-bookmark\">Property(Expression,PropertyInfo,Expression[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an <a class=\"xref\" href=\"system.linq.expressions.indexexpression\" data-linktype=\"relative-path\">IndexExpression</a> representing the access to an indexed property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Property_System_Linq_Expressions_Expression_System_String_System_Linq_Expressions_Expression___\" data-linktype=\"self-bookmark\">Property(Expression,String,Expression[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an <a class=\"xref\" href=\"system.linq.expressions.indexexpression\" data-linktype=\"relative-path\">IndexExpression</a> representing the access to an indexed property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Property_System_Linq_Expressions_Expression_System_Type_System_String_\" data-linktype=\"self-bookmark\">Property(Expression,Type,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.memberexpression\" data-linktype=\"relative-path\">MemberExpression</a> accessing a property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_PropertyOrField_System_Linq_Expressions_Expression_System_String_\" data-linktype=\"self-bookmark\">PropertyOrField(Expression,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.memberexpression\" data-linktype=\"relative-path\">MemberExpression</a> that represents accessing a property or field.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Quote_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">Quote(Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents an expression that has a constant value of type <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Reduce\" data-linktype=\"self-bookmark\">Reduce()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reduces this node to a simpler expression. If CanReduce returns true, this should return a valid expression. This method can return another node which itself must be reduced.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_ReduceAndCheck\" data-linktype=\"self-bookmark\">ReduceAndCheck()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reduces this node to a simpler expression. If CanReduce returns true, this should return a valid expression. This method can return another node which itself must be reduced.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_ReduceExtensions\" data-linktype=\"self-bookmark\">ReduceExtensions()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reduces the expression to a known node type (that is not an Extension node) or just returns the expression if it is already a known type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_ReferenceEqual_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">ReferenceEqual(Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a reference equality comparison.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_ReferenceNotEqual_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">ReferenceNotEqual(Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a reference inequality comparison.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Rethrow\" data-linktype=\"self-bookmark\">Rethrow()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents a rethrowing of an exception.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Rethrow_System_Type_\" data-linktype=\"self-bookmark\">Rethrow(Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents a rethrowing of an exception with a given type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Return_System_Linq_Expressions_LabelTarget_\" data-linktype=\"self-bookmark\">Return(LabelTarget)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> representing a return statement.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Return_System_Linq_Expressions_LabelTarget_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">Return(LabelTarget,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> representing a return statement. The value passed to the label upon jumping can be specified.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Return_System_Linq_Expressions_LabelTarget_System_Type_\" data-linktype=\"self-bookmark\">Return(LabelTarget,Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> representing a return statement with the specified type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Return_System_Linq_Expressions_LabelTarget_System_Linq_Expressions_Expression_System_Type_\" data-linktype=\"self-bookmark\">Return(LabelTarget,Expression,Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> representing a return statement with the specified type. The value passed to the label upon jumping can be specified.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_RightShift_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">RightShift(Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a bitwise right-shift operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_RightShift_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">RightShift(Expression,Expression,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a bitwise right-shift operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_RightShiftAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">RightShiftAssign(Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a bitwise right-shift assignment operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_RightShiftAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">RightShiftAssign(Expression,Expression,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a bitwise right-shift assignment operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_RightShiftAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_System_Linq_Expressions_LambdaExpression_\" data-linktype=\"self-bookmark\">RightShiftAssign(Expression,Expression,MethodInfo,LambdaExpression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a bitwise right-shift assignment operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_RuntimeVariables_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ParameterExpression__\" data-linktype=\"self-bookmark\">RuntimeVariables(IEnumerable&lt;ParameterExpression&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an instance of <a class=\"xref\" href=\"system.linq.expressions.runtimevariablesexpression\" data-linktype=\"relative-path\">RuntimeVariablesExpression</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_RuntimeVariables_System_Linq_Expressions_ParameterExpression___\" data-linktype=\"self-bookmark\">RuntimeVariables(ParameterExpression[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an instance of <a class=\"xref\" href=\"system.linq.expressions.runtimevariablesexpression\" data-linktype=\"relative-path\">RuntimeVariablesExpression</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Subtract_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">Subtract(Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an arithmetic subtraction operation that does not have overflow checking.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Subtract_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">Subtract(Expression,Expression,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an arithmetic subtraction operation that does not have overflow checking.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_SubtractAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">SubtractAssign(Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a subtraction assignment operation that does not have overflow checking.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_SubtractAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">SubtractAssign(Expression,Expression,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a subtraction assignment operation that does not have overflow checking.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_SubtractAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_System_Linq_Expressions_LambdaExpression_\" data-linktype=\"self-bookmark\">SubtractAssign(Expression,Expression,MethodInfo,LambdaExpression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a subtraction assignment operation that does not have overflow checking.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_SubtractAssignChecked_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">SubtractAssignChecked(Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a subtraction assignment operation that has overflow checking.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_SubtractAssignChecked_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">SubtractAssignChecked(Expression,Expression,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a subtraction assignment operation that has overflow checking.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_SubtractAssignChecked_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_System_Linq_Expressions_LambdaExpression_\" data-linktype=\"self-bookmark\">SubtractAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a subtraction assignment operation that has overflow checking.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_SubtractChecked_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">SubtractChecked(Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an arithmetic subtraction operation that has overflow checking.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_SubtractChecked_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">SubtractChecked(Expression,Expression,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an arithmetic subtraction operation that has overflow checking.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Switch_System_Linq_Expressions_Expression_System_Linq_Expressions_SwitchCase___\" data-linktype=\"self-bookmark\">Switch(Expression,SwitchCase[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.switchexpression\" data-linktype=\"relative-path\">SwitchExpression</a> that represents a <code>switch</code> statement without a default case.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Switch_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_SwitchCase___\" data-linktype=\"self-bookmark\">Switch(Expression,Expression,SwitchCase[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.switchexpression\" data-linktype=\"relative-path\">SwitchExpression</a> that represents a <code>switch</code> statement that has a default case.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Switch_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_System_Collections_Generic_IEnumerable_System_Linq_Expressions_SwitchCase__\" data-linktype=\"self-bookmark\">Switch(Expression,Expression,MethodInfo,IEnumerable&lt;SwitchCase&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.switchexpression\" data-linktype=\"relative-path\">SwitchExpression</a> that represents a <code>switch</code> statement that has a default case.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Switch_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_System_Linq_Expressions_SwitchCase___\" data-linktype=\"self-bookmark\">Switch(Expression,Expression,MethodInfo,SwitchCase[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.switchexpression\" data-linktype=\"relative-path\">SwitchExpression</a> that represents a <code>switch</code> statement that has a default case.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Switch_System_Type_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_System_Collections_Generic_IEnumerable_System_Linq_Expressions_SwitchCase__\" data-linktype=\"self-bookmark\">Switch(Type,Expression,Expression,MethodInfo,IEnumerable&lt;SwitchCase&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.switchexpression\" data-linktype=\"relative-path\">SwitchExpression</a> that represents a <code>switch</code> statement that has a default case.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Switch_System_Type_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_System_Linq_Expressions_SwitchCase___\" data-linktype=\"self-bookmark\">Switch(Type,Expression,Expression,MethodInfo,SwitchCase[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.switchexpression\" data-linktype=\"relative-path\">SwitchExpression</a> that represents a <code>switch</code> statement that has a default case..</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_SwitchCase_System_Linq_Expressions_Expression_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression__\" data-linktype=\"self-bookmark\">SwitchCase(Expression,IEnumerable&lt;Expression&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.switchcase\" data-linktype=\"relative-path\">SwitchCase</a> object to be used in a <a class=\"xref\" href=\"system.linq.expressions.switchexpression\" data-linktype=\"relative-path\">SwitchExpression</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_SwitchCase_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression___\" data-linktype=\"self-bookmark\">SwitchCase(Expression,Expression[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.switchcase\" data-linktype=\"relative-path\">SwitchCase</a> for use in a <a class=\"xref\" href=\"system.linq.expressions.switchexpression\" data-linktype=\"relative-path\">SwitchExpression</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_SymbolDocument_System_String_\" data-linktype=\"self-bookmark\">SymbolDocument(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an instance of <a class=\"xref\" href=\"system.linq.expressions.symboldocumentinfo\" data-linktype=\"relative-path\">SymbolDocumentInfo</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_SymbolDocument_System_String_System_Guid_\" data-linktype=\"self-bookmark\">SymbolDocument(String,Guid)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an instance of <a class=\"xref\" href=\"system.linq.expressions.symboldocumentinfo\" data-linktype=\"relative-path\">SymbolDocumentInfo</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_SymbolDocument_System_String_System_Guid_System_Guid_\" data-linktype=\"self-bookmark\">SymbolDocument(String,Guid,Guid)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an instance of <a class=\"xref\" href=\"system.linq.expressions.symboldocumentinfo\" data-linktype=\"relative-path\">SymbolDocumentInfo</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_SymbolDocument_System_String_System_Guid_System_Guid_System_Guid_\" data-linktype=\"self-bookmark\">SymbolDocument(String,Guid,Guid,Guid)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an instance of <a class=\"xref\" href=\"system.linq.expressions.symboldocumentinfo\" data-linktype=\"relative-path\">SymbolDocumentInfo</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Throw_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">Throw(Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents a throwing of an exception.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Throw_System_Linq_Expressions_Expression_System_Type_\" data-linktype=\"self-bookmark\">Throw(Expression,Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents a throwing of an exception with a given type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a textual representation of the <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_TryCatch_System_Linq_Expressions_Expression_System_Linq_Expressions_CatchBlock___\" data-linktype=\"self-bookmark\">TryCatch(Expression,CatchBlock[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.tryexpression\" data-linktype=\"relative-path\">TryExpression</a> representing a try block with any number of catch statements and neither a fault nor finally block.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_TryCatchFinally_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_CatchBlock___\" data-linktype=\"self-bookmark\">TryCatchFinally(Expression,Expression,CatchBlock[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.tryexpression\" data-linktype=\"relative-path\">TryExpression</a> representing a try block with any number of catch statements and a finally block.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_TryFault_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">TryFault(Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.tryexpression\" data-linktype=\"relative-path\">TryExpression</a> representing a try block with a fault block and no catch statements.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_TryFinally_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">TryFinally(Expression,Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.tryexpression\" data-linktype=\"relative-path\">TryExpression</a> representing a try block with a finally block and no catch statements.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_TryGetActionType_System_Type___System_Type__\" data-linktype=\"self-bookmark\">TryGetActionType(Type[],Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> object that represents a generic System.Action delegate type that has specific type arguments.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_TryGetFuncType_System_Type___System_Type__\" data-linktype=\"self-bookmark\">TryGetFuncType(Type[],Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> object that represents a generic System.Func delegate type that has specific type arguments. The last type argument specifies the return type of the created delegate.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_TypeAs_System_Linq_Expressions_Expression_System_Type_\" data-linktype=\"self-bookmark\">TypeAs(Expression,Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents an explicit reference or boxing conversion where <code>null</code> is supplied if the conversion fails.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_TypeEqual_System_Linq_Expressions_Expression_System_Type_\" data-linktype=\"self-bookmark\">TypeEqual(Expression,Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.typebinaryexpression\" data-linktype=\"relative-path\">TypeBinaryExpression</a> that compares run-time type identity.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_TypeIs_System_Linq_Expressions_Expression_System_Type_\" data-linktype=\"self-bookmark\">TypeIs(Expression,Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.typebinaryexpression\" data-linktype=\"relative-path\">TypeBinaryExpression</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_UnaryPlus_System_Linq_Expressions_Expression_\" data-linktype=\"self-bookmark\">UnaryPlus(Expression)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents a unary plus operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_UnaryPlus_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">UnaryPlus(Expression,MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents a unary plus operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Unbox_System_Linq_Expressions_Expression_System_Type_\" data-linktype=\"self-bookmark\">Unbox(Expression,Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents an explicit unboxing.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Variable_System_Type_\" data-linktype=\"self-bookmark\">Variable(Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a> node that can be used to identify a parameter or a variable in an expression tree.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_Variable_System_Type_System_String_\" data-linktype=\"self-bookmark\">Variable(Type,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a> node that can be used to identify a parameter or a variable in an expression tree.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_Expression_VisitChildren_System_Linq_Expressions_ExpressionVisitor_\" data-linktype=\"self-bookmark\">VisitChildren(ExpressionVisitor)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reduces the node and then calls the visitor delegate on the reduced expression. The method throws an exception if the node is not reducible.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression__ctor\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Expression()</div>        \r\n          </div>\r\n    \r\n            <p>Constructs a new instance of <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected Expression ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression__ctor_System_Linq_Expressions_ExpressionType_System_Type_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Expression(ExpressionType,Type)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected Expression (System.Linq.Expressions.ExpressionType nodeType, Type type);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>nodeType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> to set as the node type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> of this <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor is called from constructors in derived classes.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_CanReduce\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_CanReduce_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CanReduce</div>        \r\n          </div>\r\n    \r\n            <p>Indicates that the node can be reduced to a simpler node. If this returns true, Reduce() can be called to produce the reduced form.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool CanReduce { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>True if the node can be reduced, otherwise false.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_NodeType\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_NodeType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NodeType</div>        \r\n          </div>\r\n    \r\n            <p>Gets the node type of this <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Linq.Expressions.ExpressionType NodeType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The NodeType property provides a more specialized description of an <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> than just its derived type. For example, a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> can be used to represent many different kinds of binary expressions, such as a division operation or a &quot;greater than&quot; operation. The NodeType property would describe these binary expressions as <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a>, respectively.  </p>\n<p> The static CLR type of the expression that the <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> object represents is represented by the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Type\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Type_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Type</div>        \r\n          </div>\r\n    \r\n            <p>Gets the static type of the expression that this <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> represents.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual Type Type { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> that represents the static type of the expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_NodeType_\" data-linktype=\"relative-path\">NodeType</a> is the type of the expression tree node, whereas the Type represents the static common language runtime (CLR) type of the expression that the node represents. For example, two nodes with different node types can have the same Type, as shown in the following code example.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#36\">        &#39; Add the following directive to your file:\n        &#39; Imports System.Linq.Expressions  \n\n        Dim constExpr As ConstantExpression = Expression.Constant(5)\n        Console.WriteLine(&quot;NodeType: &quot; &amp; constExpr.NodeType.ToString())\n        Console.WriteLine(&quot;Type: &quot; &amp; constExpr.Type.ToString())\n\n        Dim binExpr As BinaryExpression = Expression.Add(constExpr, constExpr)\n        Console.WriteLine(&quot;NodeType: &quot; &amp; binExpr.NodeType.ToString())\n        Console.WriteLine(&quot;Type: &quot; &amp; binExpr.Type.ToString())\n\n        &#39; This code example produces the following output:\n        &#39;\n        &#39; NodeType: Constant\n        &#39; Type: System.Int32\n        &#39; NodeType: Add\n        &#39; Type: System.Int32\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#36\">            // Add the following directive to your file:\n            // using System.Linq.Expressions;  \n\n            ConstantExpression constExpr = Expression.Constant(5);\n            Console.WriteLine(&quot;NodeType: &quot; + constExpr.NodeType);\n            Console.WriteLine(&quot;Type: &quot; + constExpr.Type);\n\n            BinaryExpression binExpr = Expression.Add(constExpr, constExpr);\n            Console.WriteLine(&quot;NodeType: &quot; + binExpr.NodeType);\n            Console.WriteLine(&quot;Type: &quot; + binExpr.Type);\n\n            // This code example produces the following output:\n            //\n            // NodeType: Constant\n            // Type: System.Int32\n            // NodeType: Add\n            // Type: System.Int32\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Accept_System_Linq_Expressions_ExpressionVisitor_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Accept_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Accept(ExpressionVisitor)</div>        \r\n          </div>\r\n    \r\n            <p>Dispatches to the specific visit method for this node type. For example, <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> calls the <span class=\"xref\">stem.Linq.Expressions.ExpressionVisitor.VisitMethodCall*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual System.Linq.Expressions.Expression Accept (System.Linq.Expressions.ExpressionVisitor visitor);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>visitor</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expressionvisitor\" data-linktype=\"relative-path\">ExpressionVisitor</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The visitor to visit this node with.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </div>\r\n                  <p>The result of visiting this node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This default implementation for <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> nodes calls <a class=\"xref\" href=\"system.linq.expressions.expressionvisitor#System_Linq_Expressions_ExpressionVisitor_VisitExtension_\" data-linktype=\"relative-path\">VisitExtension</a>. Override this method to call into a more specific method on a derived visitor class of the <a class=\"xref\" href=\"system.linq.expressions.expressionvisitor\" data-linktype=\"relative-path\">ExpressionVisitor</a> class. However, it should still support unknown visitors by calling <a class=\"xref\" href=\"system.linq.expressions.expressionvisitor#System_Linq_Expressions_ExpressionVisitor_VisitExtension_\" data-linktype=\"relative-path\">VisitExtension</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Add_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Add_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Add(Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an arithmetic addition operation that does not have overflow checking.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression Add (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>right</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The addition operator is not defined for <code>left</code>.Type and <code>right</code>.Type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The resulting <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> has the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> and <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> properties are both <code>true</code>. Otherwise, they are <code>false</code>. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Conversion_\" data-linktype=\"relative-path\">Conversion</a> property is <code>null</code>.  </p>\n<p> The following information describes the implementing method, the node type, and whether a node is lifted.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the selected implementing method for the operation:  </p>\n<ul>\n<li><p>If the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of either <code>left</code> or <code>right</code> represents a user-defined type that overloads the addition operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that method is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if <code>left</code>.Type and <code>right</code>.Type are numeric types, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  </p>\n<ul>\n<li><p><code>left</code>.Type and <code>right</code>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is a non-nullable value type.  </p>\n</li>\n</ul>\n<p>If the implementing method is <code>null</code>:  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined addition operator.  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create an expression that adds two integers.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#1\">        &#39; Add the following directive to your file:\n        &#39; Imports System.Linq.Expressions  \n\n        &#39; This expression adds the values of its two arguments.\n        &#39; Both arguments must be of the same type.\n        Dim sumExpr As Expression = Expression.Add(\n            Expression.Constant(1),\n            Expression.Constant(2)\n            )\n\n        &#39; Print the expression.\n        Console.WriteLine(sumExpr.ToString())\n\n        &#39; The following statement first creates an expression tree,\n        &#39; then compiles it, and then executes it.            \n        Console.WriteLine(Expression.Lambda(Of Func(Of Integer))(sumExpr).Compile()())\n\n        &#39; This code example produces the following output:\n        &#39;\n        &#39; (1 + 2)\n        &#39; 3\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#1\">            // Add the following directive to your file:\n            // using System.Linq.Expressions;  \n\n            // This expression adds the values of its two arguments.\n            // Both arguments must be of the same type.\n            Expression sumExpr = Expression.Add(\n                Expression.Constant(1),\n                Expression.Constant(2)\n            );\n\n            // Print out the expression.\n            Console.WriteLine(sumExpr.ToString());\n\n            // The following statement first creates an expression tree,\n            // then compiles it, and then executes it.            \n            Console.WriteLine(Expression.Lambda&lt;Func&lt;int&gt;&gt;(sumExpr).Compile()());\n\n            // This code example produces the following output:\n            //\n            // (1 + 2)\n            // 3\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Add_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Add_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Add(Expression,Expression,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an arithmetic addition operation that does not have overflow checking. The implementing method can be specified.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression Add (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>right</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is not <code>null</code> and the method it represents returns <code>void</code>, is not <code>static</code> (<code>Shared</code> in Visual Basic), or does not take exactly two arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is <code>null</code> and the addition operator is not defined for <code>left</code>.Type and <code>right</code>.Type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The resulting <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> has the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> and <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> properties are both <code>true</code>. Otherwise, they are <code>false</code>. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Conversion_\" data-linktype=\"relative-path\">Conversion</a> property is <code>null</code>.  </p>\n<p> The following information describes the implementing method, the node type, and whether a node is lifted.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the implementing method for the operation:  </p>\n<ul>\n<li><p>If <code>method</code> is not <code>null</code> and it represents a non-void, <code>static</code> (<code>Shared</code> in Visual Basic) method that takes two arguments, it is the implementing method for the node.  </p>\n</li>\n<li><p>Otherwise, if the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of either <code>left</code> or <code>right</code> represents a user-defined type that overloads the addition operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that method is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if <code>left</code>.Type and <code>right</code>.Type are numeric types, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  </p>\n<ul>\n<li><p><code>left</code>.Type and <code>right</code>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is a non-nullable value type.  </p>\n</li>\n</ul>\n<p>If the implementing method is <code>null</code>:  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined addition operator.  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_AddAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_AddAssign_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddAssign(Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an addition assignment operation that does not have overflow checking.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression AddAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create an expression that adds a value to an integer variable and then assigns the result of the operation to the variable.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#18\">        &#39; Add the following directive to your file:\n        &#39; Imports System.Linq.Expressions \n\n        &#39; The parameter expression is used to create a variable.\n        Dim variableExpr As ParameterExpression = Expression.Variable(GetType(Integer), &quot;sampleVar&quot;)\n\n        &#39; The block expression enables you to execute several expressions sequentually.\n        &#39; In this block, the variable is first initialized with 1. \n        &#39; Then the AddAssign method adds 2 to the variable and assigns the result to the variable.\n        Dim addAssignExpr As BlockExpression = Expression.Block(\n            New ParameterExpression() {variableExpr},\n            Expression.Assign(variableExpr, Expression.Constant(1)),\n            Expression.AddAssign(\n                variableExpr,\n                Expression.Constant(2)\n            )\n        )\n\n        &#39; Print the expression from the block expression.\n        Console.WriteLine(&quot;The expressions from the block expression:&quot;)\n        For Each expr As Expression In addAssignExpr.Expressions\n            Console.WriteLine(expr.ToString())\n        Next\n\n        Console.WriteLine(&quot;The result of executing the expression tree:&quot;)\n        &#39; The following statement first creates an expression tree,\n        &#39; then compiles it, and then executes it.\n        Console.WriteLine(Expression.Lambda(Of Func(Of Integer))(addAssignExpr).Compile()())\n\n        &#39; This code example produces the following output:\n        &#39;\n        &#39; The expressions from the block expression:\n        &#39; (sampleVar = 1)\n        &#39; (sampleVar += 2)\n\n        &#39; The result of executing the expression tree:\n        &#39; 3\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#18\">            // Add the following directive to your file:\n            // using System.Linq.Expressions;\n\n            // The Parameter expression is used to create a variable.\n            ParameterExpression variableExpr = Expression.Variable(typeof(int), &quot;sampleVar&quot;);\n\n            // The block expression enables you to execute several expressions sequentually.\n            // In this bloc, the variable is first initialized with 1. \n            // Then the AddAssign method adds 2 to the variable and assigns the result to the variable.\n            BlockExpression addAssignExpr = Expression.Block(\n                new ParameterExpression[] { variableExpr },\n                Expression.Assign(variableExpr, Expression.Constant(1)),\n                Expression.AddAssign(\n                    variableExpr,\n                    Expression.Constant(2)\n                )\n            );\n\n            // Print out the expression from the block expression.\n            Console.WriteLine(&quot;The expressions from the block expression:&quot;);\n            foreach (var expr in addAssignExpr.Expressions)\n                Console.WriteLine(expr.ToString());\n\n            Console.WriteLine(&quot;The result of executing the expression tree:&quot;);\n            // The following statement first creates an expression tree,\n            // then compiles it, and then executes it.\n            Console.WriteLine(Expression.Lambda&lt;Func&lt;int&gt;&gt;(addAssignExpr).Compile()());\n\n            // This code example produces the following output:\n            //\n            // The expressions from the block expression:\n            // (sampleVar = 1)\n            // (sampleVar += 2)\n\n            // The result of executing the expression tree:\n            // 3\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_AddAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_AddAssign_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddAssign(Expression,Expression,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an addition assignment operation that does not have overflow checking.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression AddAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span>, and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_AddAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_System_Linq_Expressions_LambdaExpression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_AddAssign_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddAssign(Expression,Expression,MethodInfo,LambdaExpression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an addition assignment operation that does not have overflow checking.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression AddAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>conversion</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Conversion*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span>, and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Conversion*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_AddAssignChecked_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_AddAssignChecked_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddAssignChecked(Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an addition assignment operation that has overflow checking.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression AddAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_AddAssignChecked_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_AddAssignChecked_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddAssignChecked(Expression,Expression,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an addition assignment operation that has overflow checking.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression AddAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span>, and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_AddAssignChecked_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_System_Linq_Expressions_LambdaExpression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_AddAssignChecked_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an addition assignment operation that has overflow checking.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression AddAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>conversion</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Conversion*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span>, and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Conversion*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_AddChecked_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_AddChecked_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddChecked(Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an arithmetic addition operation that has overflow checking.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression AddChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>right</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The addition operator is not defined for <code>left</code>.Type and <code>right</code>.Type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The resulting <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> has the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> and <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> properties are both <code>true</code>. Otherwise, they are <code>false</code>. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Conversion_\" data-linktype=\"relative-path\">Conversion</a> property is <code>null</code>.  </p>\n<p> The following information describes the implementing method, the node type, and whether a node is lifted.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the implementing method for the operation:  </p>\n<ul>\n<li><p>If the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of either <code>left</code> or <code>right</code> represents a user-defined type that overloads the addition operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that method is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if <code>left</code>.Type and <code>right</code>.Type are numeric types, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  </p>\n<ul>\n<li><p><code>left</code>.Type and <code>right</code>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is a non-nullable value type.  </p>\n</li>\n</ul>\n<p>If the implementing method is <code>null</code>:  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined addition operator.  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_AddChecked_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_AddChecked_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddChecked(Expression,Expression,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an arithmetic addition operation that has overflow checking. The implementing method can be specified.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression AddChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>right</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is not <code>null</code> and the method it represents returns <code>void</code>, is not <code>static</code> (<code>Shared</code> in Visual Basic), or does not take exactly two arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is <code>null</code> and the addition operator is not defined for <code>left</code>.Type and <code>right</code>.Type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The resulting <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> has the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> and <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> properties are both <code>true</code>. Otherwise, they are <code>false</code>. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Conversion_\" data-linktype=\"relative-path\">Conversion</a> property is <code>null</code>.  </p>\n<p> The following information describes the implementing method, the node type, and whether a node is lifted.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The implementing method for the operation is chosen based on the following rules:  </p>\n<ul>\n<li><p>If <code>method</code> is not <code>null</code> and it represents a non-void, <code>static</code> (<code>Shared</code> in Visual Basic) method that takes two arguments, it is the implementing method for the node.  </p>\n</li>\n<li><p>Otherwise, if the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of either <code>left</code> or <code>right</code> represents a user-defined type that overloads the addition operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that method is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if <code>left</code>.Type and <code>right</code>.Type are numeric types, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  </p>\n<ul>\n<li><p><code>left</code>.Type and <code>right</code>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is a non-nullable value type.  </p>\n</li>\n</ul>\n<p>If the implementing method is <code>null</code>:  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined addition operator.  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_And_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_And_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">And(Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a bitwise <code>AND</code> operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression And (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>right</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The bitwise <code>AND</code> operator is not defined for <code>left</code>.Type and <code>right</code>.Type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The resulting <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> has the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> and <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> properties are both <code>true</code>. Otherwise, they are <code>false</code>. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Conversion_\" data-linktype=\"relative-path\">Conversion</a> property is <code>null</code>.  </p>\n<p> The following information describes the implementing method, the node type, and whether a node is lifted.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the implementing method for the operation:  </p>\n<ul>\n<li><p>If the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of either <code>left</code> or <code>right</code> represents a user-defined type that overloads the bitwise <code>AND</code> operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that method is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if <code>left</code>.Type and <code>right</code>.Type are integral or Boolean types, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  </p>\n<ul>\n<li><p><code>left</code>.Type and <code>right</code>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is a non-nullable value type.  </p>\n</li>\n</ul>\n<p>If the implementing method is <code>null</code>:  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined bitwise <code>AND</code> operator.  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined bitwise <code>AND</code> operator.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create an expression that represents a logical AND operation on two Boolean values.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#2\">        &#39; Add the following directive to your file:\n        &#39; Imports System.Linq.Expressions \n\n        &#39; This expression performs a logical AND operation\n        &#39; on its two arguments. Both arguments must be of the same type,\n        &#39; which can be Boolean or integer.             \n        Dim andExpr As Expression = Expression.And(\n            Expression.Constant(True),\n            Expression.Constant(False)\n            )\n\n        &#39; Print the expression.\n        Console.WriteLine(andExpr.ToString())\n\n        &#39; The following statement first creates an expression tree,\n        &#39; then compiles it, and then executes it.       \n        Console.WriteLine(\n            Expression.Lambda(Of Func(Of Boolean))(andExpr).Compile()())\n        &#39; This code example produces the following output:\n        &#39;\n        &#39; (True And False)\n        &#39; False\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#2\">            // Add the following directive to your file:\n            // using System.Linq.Expressions;  \n\n            // This expression perfroms a logical AND operation\n            // on its two arguments. Both arguments must be of the same type,\n            // which can be boolean or integer.             \n            Expression andExpr = Expression.And(\n                Expression.Constant(true),\n                Expression.Constant(false)\n            );\n\n            // Print out the expression.\n            Console.WriteLine(andExpr.ToString());\n\n            // The following statement first creates an expression tree,\n            // then compiles it, and then executes it.       \n            Console.WriteLine(Expression.Lambda&lt;Func&lt;bool&gt;&gt;(andExpr).Compile()());\n\n            // This code example produces the following output:\n            //\n            // (True And False)\n            // False\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_And_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_And_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">And(Expression,Expression,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a bitwise <code>AND</code> operation. The implementing method can be specified.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression And (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span>, and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>right</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is not <code>null</code> and the method it represents returns <code>void</code>, is not <code>static</code> (<code>Shared</code> in Visual Basic), or does not take exactly two arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is <code>null</code> and the bitwise <code>AND</code> operator is not defined for <code>left</code>.Type and <code>right</code>.Type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The resulting <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> has the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> and <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> properties are both <code>true</code>. Otherwise, they are <code>false</code>. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Conversion_\" data-linktype=\"relative-path\">Conversion</a> property is <code>null</code>.  </p>\n<p> The following information describes the implementing method, the node type, and whether a node is lifted.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The implementing method for the operation is chosen based on the following rules:  </p>\n<ul>\n<li><p>If <code>method</code> is not <code>null</code> and it represents a non-void, <code>static</code> (<code>Shared</code> in Visual Basic) method that takes two arguments, it is the implementing method for the node.  </p>\n</li>\n<li><p>Otherwise, if the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of either <code>left</code> or <code>right</code> represents a user-defined type that overloads the bitwise <code>AND</code> operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that method is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if <code>left</code>.Type and <code>right</code>.Type are integral or Boolean types, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  </p>\n<ul>\n<li><p><code>left</code>.Type and <code>right</code>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is a non-nullable value type.  </p>\n</li>\n</ul>\n<p>If the implementing method is <code>null</code>:  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined bitwise <code>AND</code> operator.  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined bitwise <code>AND</code> operator.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_AndAlso_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_AndAlso_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AndAlso(Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a conditional <code>AND</code> operation that evaluates the second operand only if the first operand evaluates to <code>true</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression AndAlso (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>right</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The bitwise <code>AND</code> operator is not defined for <code>left</code>.Type and <code>right</code>.Type.  </p>\n<p> -or-  </p>\n<p> <code>left</code>.Type and <code>right</code>.Type are not the same Boolean type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The resulting <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> has the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> and <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> properties are both <code>true</code>. Otherwise, they are <code>false</code>. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Conversion_\" data-linktype=\"relative-path\">Conversion</a> property is <code>null</code>.  </p>\n<p> The following information describes the implementing method, the node type, and whether a node is lifted.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the implementing method for the operation:  </p>\n<ul>\n<li><p>If the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of either <code>left</code> or <code>right</code> represents a user-defined type that overloads the bitwise <code>AND</code> operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that method is the implementing method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The conditional <code>AND</code> operator cannot be overloaded in C# or Visual Basic. However, the conditional <code>AND</code> operator is evaluated by using the bitwise <code>AND</code> operator. Thus, a user-defined overload of the bitwise <code>AND</code> operator can be the implementing method for this node type.  </p>\n</div>\n</li>\n<li><p>Otherwise, if <code>left</code>.Type and <code>right</code>.Type are Boolean types, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  </p>\n<ul>\n<li><p><code>left</code>.Type and <code>right</code>.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is a non-nullable value type.  </p>\n</li>\n</ul>\n<p>If the implementing method is <code>null</code>:  </p>\n</li>\n<li><p><code>left</code>.Type and <code>right</code>.Type are the same Boolean type.  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are non-nullable, the node is not lifted. The type of the node is the result type of the predefined conditional <code>AND</code> operator.  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined conditional <code>AND</code> operator.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create an expression that performs a logical AND operation on its two operands only if the first operand evaluates to <code>true</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#19\">        &#39; Add the following directive to your file:\n        &#39; Imports System.Linq.Expressions  \n\n        &#39; This expression performs a logical AND operation\n        &#39; on its two arguments, but if the first argument is false,\n        &#39; the second argument is not evaluated.\n        &#39; Both arguments must be of the Boolean type.\n        Dim andAlsoExpr As Expression = Expression.AndAlso(\n             Expression.Constant(False),\n             Expression.Constant(True)\n         )\n\n        &#39; Print the expression.\n        Console.WriteLine(andAlsoExpr.ToString())\n\n        &#39; The following statement first creates an expression tree,\n        &#39; then compiles it, and then executes it. \n        Console.WriteLine(Expression.Lambda(Of Func(Of Boolean))(andAlsoExpr).Compile()())\n\n        &#39; This code example produces the following output:\n        &#39;\n        &#39; (False AndAlso True)\n        &#39; False\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#19\">            // Add the following directive to your file:\n            // using System.Linq.Expressions;  \n\n            // This expression perfroms a logical AND operation\n            // on its two arguments, but if the first argument is false,\n            // then the second arument is not evaluated.\n            // Both arguments must be of the boolean type.\n            Expression andAlsoExpr = Expression.AndAlso(\n                Expression.Constant(false),\n                Expression.Constant(true)\n            );\n\n            // Print out the expression.\n            Console.WriteLine(andAlsoExpr.ToString());\n\n            // The following statement first creates an expression tree,\n            // then compiles it, and then executes it. \n            Console.WriteLine(Expression.Lambda&lt;Func&lt;bool&gt;&gt;(andAlsoExpr).Compile()());\n\n            // This code example produces the following output:\n            //\n            // (False AndAlso True)\n            // False\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_AndAlso_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_AndAlso_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AndAlso(Expression,Expression,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a conditional <code>AND</code> operation that evaluates the second operand only if the first operand is resolved to true. The implementing method can be specified.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression AndAlso (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span>, and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>right</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is not <code>null</code> and the method it represents returns <code>void</code>, is not <code>static</code> (<code>Shared</code> in Visual Basic), or does not take exactly two arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is <code>null</code> and the bitwise <code>AND</code> operator is not defined for <code>left</code>.Type and <code>right</code>.Type.  </p>\n<p> -or-  </p>\n<p> <code>method</code> is <code>null</code> and <code>left</code>.Type and <code>right</code>.Type are not the same Boolean type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The resulting <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> has the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> and <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> properties are both <code>true</code>. Otherwise, they are <code>false</code>. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Conversion_\" data-linktype=\"relative-path\">Conversion</a> property is <code>null</code>.  </p>\n<p> The following information describes the implementing method, the node type, and whether a node is lifted.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The implementing method for the operation is chosen based on the following rules:  </p>\n<ul>\n<li><p>If <code>method</code> is not <code>null</code> and it represents a non-void, <code>static</code> (<code>Shared</code> in Visual Basic) method that takes two arguments, it is the implementing method for the node.  </p>\n</li>\n<li><p>Otherwise, if the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of either <code>left</code> or <code>right</code> represents a user-defined type that overloads the bitwise <code>AND</code> operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that method is the implementing method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The conditional <code>AND</code> operator cannot be overloaded in C# or Visual Basic. However, the conditional <code>AND</code> operator is evaluated by using the bitwise <code>AND</code> operator. Thus, a user-defined overload of the bitwise <code>AND</code> operator can be the implementing method for this node type.  </p>\n</div>\n</li>\n<li><p>Otherwise, if <code>left</code>.Type and <code>right</code>.Type are Boolean types, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  </p>\n<ul>\n<li><p><code>left</code>.Type and <code>right</code>.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is a non-nullable value type.  </p>\n</li>\n</ul>\n<p>If the implementing method is <code>null</code>:  </p>\n</li>\n<li><p><code>left</code>.Type and <code>right</code>.Type are the same Boolean type.  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are non-nullable, the node is not lifted. The type of the node is the result type of the predefined conditional <code>AND</code> operator.  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined conditional <code>AND</code> operator.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_AndAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_AndAssign_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AndAssign(Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a bitwise AND assignment operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression AndAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_AndAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_AndAssign_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AndAssign(Expression,Expression,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a bitwise AND assignment operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression AndAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span>, and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_AndAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_System_Linq_Expressions_LambdaExpression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_AndAssign_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AndAssign(Expression,Expression,MethodInfo,LambdaExpression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a bitwise AND assignment operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression AndAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>conversion</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Conversion*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span>, and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Conversion*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_ArrayAccess_System_Linq_Expressions_Expression_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression__\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_ArrayAccess_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ArrayAccess(Expression,IEnumerable&lt;Expression&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates an <a class=\"xref\" href=\"system.linq.expressions.indexexpression\" data-linktype=\"relative-path\">IndexExpression</a> to access a multidimensional array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.IndexExpression ArrayAccess (System.Linq.Expressions.Expression array, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; indexes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An expression that represents the multidimensional array.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>indexes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> containing expressions used to index the array.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.indexexpression\" data-linktype=\"relative-path\">IndexExpression</a></div>\r\n                  </div>\r\n                  <p>The created <a class=\"xref\" href=\"system.linq.expressions.indexexpression\" data-linktype=\"relative-path\">IndexExpression</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The expression that represents the array can be obtained by using the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_MakeMemberAccess_\" data-linktype=\"relative-path\">MakeMemberAccess</a> method, or through <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_NewArrayBounds_\" data-linktype=\"relative-path\">NewArrayBounds</a> or <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_NewArrayInit_\" data-linktype=\"relative-path\">NewArrayInit</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to change the value of an element in a multidimensional array by using the <code>ArrayAccess</code> method.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#21\">        &#39; Add the following directive to your file:\n        &#39; Imports System.Linq.Expressions  \n\n        &#39; This parameter expression represents a variable that will hold the two-dimensional array.\n        Dim arrayExpr As ParameterExpression = Expression.Parameter(GetType(Integer(,)), &quot;Array&quot;)\n\n        &#39; This parameter expression represents a first array index.            \n        Dim firstIndexExpr As ParameterExpression = Expression.Parameter(GetType(Integer), &quot;FirstIndex&quot;)\n        &#39; This parameter expression represents a second array index.            \n        Dim secondIndexExpr As ParameterExpression = Expression.Parameter(GetType(Integer), &quot;SecondIndex&quot;)\n\n        &#39; The list of indexes.\n        Dim indexes As List(Of Expression) = New List(Of Expression) From\n            {firstIndexExpr, secondIndexExpr}\n\n        &#39; This parameter represents the value that will be added to a corresponding array element.\n        Dim valueExpr As ParameterExpression = Expression.Parameter(GetType(Integer), &quot;Value&quot;)\n\n        &#39; This expression represents an access operation to a multidimensional array.\n        &#39; It can be used for assigning to, or reading from, an array element.\n        Dim arrayAccessExpr As Expression = Expression.ArrayAccess(\n            arrayExpr,\n            indexes\n        )\n\n        &#39; This lambda expression assigns a value provided to it to a specified array element.\n        &#39; The array, the index of the array element, and the value to be added to the element\n        &#39; are parameters of the lambda expression.\n        Dim lambdaExpr As Expression(Of Func(Of Integer(,), Integer, Integer, Integer, Integer)) =\n            Expression.Lambda(Of Func(Of Integer(,), Integer, Integer, Integer, Integer))(\n                Expression.Assign(arrayAccessExpr, Expression.Add(arrayAccessExpr, valueExpr)),\n                arrayExpr,\n                firstIndexExpr,\n                secondIndexExpr,\n                valueExpr\n        )\n\n        &#39; Print expressions.\n        Console.WriteLine(&quot;Array Access Expression:&quot;)\n        Console.WriteLine(arrayAccessExpr.ToString())\n\n        Console.WriteLine(&quot;Lambda Expression:&quot;)\n        Console.WriteLine(lambdaExpr.ToString())\n\n        Console.WriteLine(&quot;The result of executing the lambda expression:&quot;)\n\n        &#39; The following statement first creates an expression tree,\n        &#39; then compiles it, and then executes it.\n        &#39; Parameters passed to the Invoke method are passed to the lambda expression.\n        Dim sampleArray = {{10, 20, 30},\n                               {100, 200, 300}}\n        Console.WriteLine(lambdaExpr.Compile().Invoke(sampleArray, 1, 1, 5))\n\n        &#39; This code example produces the following output:\n        &#39;\n        &#39; Array Access Expression:\n        &#39; Array[FirstIndex, SecondIndex]\n\n        &#39; Lambda Expression:\n        &#39; (Array, FirstIndex, SecondIndex Value) =&gt; \n        &#39; (Array[FirstIndex, SecondIndex] = (Array[FirstIndex, SecondIndex] + Value))\n\n        &#39; The result of executing the lambda expression:\n        &#39; 205\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#21\">            // Add the following directive to your file:\n            // using System.Linq.Expressions;  \n\n            // This parameter expression represents a variable that will hold the two-dimensional array.\n            ParameterExpression arrayExpr = Expression.Parameter(typeof(int[,]), &quot;Array&quot;);\n\n            // This parameter expression represents a first array index.            \n            ParameterExpression firstIndexExpr = Expression.Parameter(typeof(int), &quot;FirstIndex&quot;);\n            // This parameter expression represents a second array index.            \n            ParameterExpression secondIndexExpr = Expression.Parameter(typeof(int), &quot;SecondIndex&quot;);\n\n            // The list of indexes.\n            List&lt;Expression&gt; indexes = new List&lt;Expression&gt; { firstIndexExpr, secondIndexExpr };\n\n\n            // This parameter represents the value that will be added to a corresponding array element.\n            ParameterExpression valueExpr = Expression.Parameter(typeof(int), &quot;Value&quot;);\n\n            // This expression represents an access operation to a multidimensional array.\n            // It can be used for assigning to, or reading from, an array element.\n            Expression arrayAccessExpr = Expression.ArrayAccess(\n                arrayExpr,\n                indexes\n            );\n\n            // This lambda expression assigns a value provided to it to a specified array element.\n            // The array, the index of the array element, and the value to be added to the element\n            // are parameters of the lambda expression.\n            Expression&lt;Func&lt;int[,], int, int, int, int&gt;&gt; lambdaExpr =\n                Expression.Lambda&lt;Func&lt;int[,], int, int, int, int&gt;&gt;(\n                    Expression.Assign(arrayAccessExpr, Expression.Add(arrayAccessExpr, valueExpr)),\n                    arrayExpr,\n                    firstIndexExpr,\n                    secondIndexExpr,\n                    valueExpr\n            );\n\n            // Print out expressions.\n            Console.WriteLine(&quot;Array Access Expression:&quot;);\n            Console.WriteLine(arrayAccessExpr.ToString());\n\n            Console.WriteLine(&quot;Lambda Expression:&quot;);\n            Console.WriteLine(lambdaExpr.ToString());\n\n            Console.WriteLine(&quot;The result of executing the lambda expression:&quot;);\n\n            // The following statement first creates an expression tree,\n            // then compiles it, and then executes it.\n            // Parameters passed to the Invoke method are passed to the lambda expression.\n            int[,] sampleArray = { {10,  20,   30},\n                                   {100, 200, 300}};\n            Console.WriteLine(lambdaExpr.Compile().Invoke(sampleArray, 1, 1, 5));\n\n            // This code example produces the following output:\n            //\n            // Array Access Expression:\n            // Array[FirstIndex, SecondIndex]\n\n            // Lambda Expression:\n            // (Array, FirstIndex, SecondIndex Value) =&gt; \n            // (Array[FirstIndex, SecondIndex] = (Array[FirstIndex, SecondIndex] + Value))\n\n            // The result of executing the lambda expression:\n            // 205\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_ArrayAccess_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression___\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_ArrayAccess_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ArrayAccess(Expression,Expression[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates an <a class=\"xref\" href=\"system.linq.expressions.indexexpression\" data-linktype=\"relative-path\">IndexExpression</a> to access an array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.IndexExpression ArrayAccess (System.Linq.Expressions.Expression array, System.Linq.Expressions.Expression[] indexes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An expression representing the array to index.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>indexes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array that contains expressions used to index the array.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.indexexpression\" data-linktype=\"relative-path\">IndexExpression</a></div>\r\n                  </div>\r\n                  <p>The created <a class=\"xref\" href=\"system.linq.expressions.indexexpression\" data-linktype=\"relative-path\">IndexExpression</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The expression that represents the array can be obtained by using the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_MakeMemberAccess_\" data-linktype=\"relative-path\">MakeMemberAccess</a> method, or through <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_NewArrayBounds_\" data-linktype=\"relative-path\">NewArrayBounds</a> or <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_NewArrayInit_\" data-linktype=\"relative-path\">NewArrayInit</a>.  </p>\n<p> For multidimensional arrays, use the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_ArrayAccess_\" data-linktype=\"relative-path\">ArrayAccess</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to change a value of an array element by using the <code>ArrayAccess</code> method.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#20\">        &#39; Add the following directive to your file:\n        &#39; Imports System.Linq.Expressions  \n\n        &#39; This parameter expression represents a variable that will hold the array.\n        Dim arrayExpr As ParameterExpression = Expression.Parameter(GetType(Integer()), &quot;Array&quot;)\n\n        &#39; This parameter expression represents an array index.\n        &#39; For multidimensional arrays, you can define several indexes. \n        Dim indexExpr As ParameterExpression = Expression.Parameter(GetType(Integer), &quot;Index&quot;)\n\n        &#39; This parameter represents the value that will be added to a corresponding array element.\n        Dim valueExpr As ParameterExpression = Expression.Parameter(GetType(Integer), &quot;Value&quot;)\n\n        &#39; This expression represents an array access operation.\n        &#39; It can be used for assigning to, or reading from, an array element.\n        Dim arrayAccessExpr As Expression = Expression.ArrayAccess(\n            arrayExpr,\n            indexExpr\n        )\n\n        &#39; This lambda expression assigns a value provided to it to a specified array element.\n        &#39; The array, the index of the array element, and the value to be added to the element\n        &#39; are parameters of the lambda expression.\n        Dim lambdaExpr As Expression(Of Func(Of Integer(), Integer, Integer, Integer)) =\n            Expression.Lambda(Of Func(Of Integer(), Integer, Integer, Integer))(\n                Expression.Assign(arrayAccessExpr, Expression.Add(arrayAccessExpr, valueExpr)),\n            arrayExpr,\n            indexExpr,\n            valueExpr\n          )\n\n        &#39; Print expressions.\n        Console.WriteLine(&quot;Array Access Expression:&quot;)\n        Console.WriteLine(arrayAccessExpr.ToString())\n\n        Console.WriteLine(&quot;Lambda Expression:&quot;)\n        Console.WriteLine(lambdaExpr.ToString())\n\n        Console.WriteLine(&quot;The result of executing the lambda expression:&quot;)\n\n        &#39; The following statement first creates an expression tree,\n        &#39; then compiles it, and then executes it.\n        &#39; Parameters passed to the Invoke method are passed to the lambda expression.\n        Console.WriteLine(lambdaExpr.Compile().Invoke(New Integer() {10, 20, 30}, 0, 5))\n\n        &#39; This code example produces the following output:\n        &#39;\n        &#39; Array Access Expression:\n        &#39; Array[Index]\n\n        &#39; Lambda Expression:\n        &#39; (Array, Index, Value) =&gt; (Array[Index] = (Array[Index] + Value))\n\n        &#39; The result of executing the lambda expression:\n        &#39; 15\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#20\">            // Add the following directive to your file:\n            // using System.Linq.Expressions;  \n\n            // This parameter expression represents a variable that will hold the array.\n            ParameterExpression arrayExpr = Expression.Parameter(typeof(int[]), &quot;Array&quot;);\n\n            // This parameter expression represents an array index.            \n            ParameterExpression indexExpr = Expression.Parameter(typeof(int), &quot;Index&quot;);\n\n            // This parameter represents the value that will be added to a corresponding array element.\n            ParameterExpression valueExpr = Expression.Parameter(typeof(int), &quot;Value&quot;);\n\n            // This expression represents an array access operation.\n            // It can be used for assigning to, or reading from, an array element.\n            Expression arrayAccessExpr = Expression.ArrayAccess(\n                arrayExpr,\n                indexExpr\n            );\n\n            // This lambda expression assigns a value provided to it to a specified array element.\n            // The array, the index of the array element, and the value to be added to the element\n            // are parameters of the lambda expression.\n            Expression&lt;Func&lt;int[], int, int, int&gt;&gt; lambdaExpr = Expression.Lambda&lt;Func&lt;int[], int, int, int&gt;&gt;(\n                Expression.Assign(arrayAccessExpr, Expression.Add(arrayAccessExpr, valueExpr)),\n                arrayExpr,\n                indexExpr,\n                valueExpr\n            );\n\n            // Print out expressions.\n            Console.WriteLine(&quot;Array Access Expression:&quot;);\n            Console.WriteLine(arrayAccessExpr.ToString());\n\n            Console.WriteLine(&quot;Lambda Expression:&quot;);\n            Console.WriteLine(lambdaExpr.ToString());\n\n            Console.WriteLine(&quot;The result of executing the lambda expression:&quot;);\n\n            // The following statement first creates an expression tree,\n            // then compiles it, and then executes it.\n            // Parameters passed to the Invoke method are passed to the lambda expression.\n            Console.WriteLine(lambdaExpr.Compile().Invoke(new int[] { 10, 20, 30 }, 0, 5));\n\n            // This code example produces the following output:\n            //\n            // Array Access Expression:\n            // Array[Index]\n\n            // Lambda Expression:\n            // (Array, Index, Value) =&gt; (Array[Index] = (Array[Index] + Value))\n\n            // The result of executing the lambda expression:\n            // 15\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_ArrayIndex_System_Linq_Expressions_Expression_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression__\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_ArrayIndex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ArrayIndex(Expression,IEnumerable&lt;Expression&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents applying an array index operator to an array of rank more than one.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.MethodCallExpression ArrayIndex (System.Linq.Expressions.Expression array, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; indexes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Object*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>indexes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Arguments*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Object*</span> and <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Arguments*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> or <code>indexes</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>array</code>.Type does not represent an array type.  </p>\n<p> -or-  </p>\n<p> The rank of <code>array</code>.Type does not match the number of elements in <code>indexes</code>.  </p>\n<p> -or-  </p>\n<p> The <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property of one or more elements of <code>indexes</code> does not represent the <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Each element of <code>indexes</code> must have <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> equal to <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of <code>array</code> must represent an array type whose rank matches the number of elements in <code>indexes</code>.  </p>\n<p> If the rank of <code>array</code>.Type is 1, this method returns a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a>. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Left_\" data-linktype=\"relative-path\">Left</a> property is set to <code>array</code> and the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Right_\" data-linktype=\"relative-path\">Right</a> property is set to the single element of <code>indexes</code>. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> represents the element type of <code>array</code>.Type.  </p>\n<p> If the rank of <code>array</code>.Type is more than one, this method returns a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a>. The <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression#System_Linq_Expressions_MethodCallExpression_Method_\" data-linktype=\"relative-path\">Method</a> property is set to the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that describes the public instance method <code>Get</code> on the type represented by the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of <code>array</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the [ArrayIndex(Expression,â€‚Expression&lt;xref:System.Linq.Expressions.Expression.ArrayIndex%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29&gt; method to create a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents indexing into a two-dimensional array.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.Expression#3\">            string[,] gradeArray =\n                { {&quot;chemistry&quot;, &quot;history&quot;, &quot;mathematics&quot;}, {&quot;78&quot;, &quot;61&quot;, &quot;82&quot;} };\n\n            System.Linq.Expressions.Expression arrayExpression =\n                System.Linq.Expressions.Expression.Constant(gradeArray);\n\n            // Create a MethodCallExpression that represents indexing\n            // into the two-dimensional array &#39;gradeArray&#39; at (0, 2).\n            // Executing the expression would return &quot;mathematics&quot;.\n            System.Linq.Expressions.MethodCallExpression methodCallExpression =\n                System.Linq.Expressions.Expression.ArrayIndex(\n                    arrayExpression,\n                    System.Linq.Expressions.Expression.Constant(0),\n                    System.Linq.Expressions.Expression.Constant(2));\n\n            Console.WriteLine(methodCallExpression.ToString());\n\n            // This code produces the following output:\n            //\n            // value(System.String[,]).Get(0, 2)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.Expression#3\">        Dim gradeArray(,) As String = _\n            {{&quot;chemistry&quot;, &quot;history&quot;, &quot;mathematics&quot;}, {&quot;78&quot;, &quot;61&quot;, &quot;82&quot;}}\n\n        Dim arrayExpression As System.Linq.Expressions.Expression = _\n            System.Linq.Expressions.Expression.Constant(gradeArray)\n\n        &#39; Create a MethodCallExpression that represents indexing\n        &#39; into the two-dimensional array &#39;gradeArray&#39; at (0, 2).\n        &#39; Executing the expression would return &quot;mathematics&quot;.\n        Dim methodCallExpression As System.Linq.Expressions.MethodCallExpression = _\n            System.Linq.Expressions.Expression.ArrayIndex( _\n                arrayExpression, _\n                System.Linq.Expressions.Expression.Constant(0), _\n                System.Linq.Expressions.Expression.Constant(2))\n\n        Console.WriteLine(methodCallExpression.ToString())\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; value(System.String[,]).Get(0, 2)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_ArrayIndex_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_ArrayIndex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ArrayIndex(Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents applying an array index operator to an array of rank one.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression ArrayIndex (System.Linq.Expressions.Expression array, System.Linq.Expressions.Expression index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> or <code>index</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>array</code>.Type does not represent an array type.  </p>\n<p> -or-  </p>\n<p> <code>array</code>.Type represents an array type whose rank is not 1.  </p>\n<p> -or-  </p>\n<p> <code>index</code>.Type does not represent the <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>index</code> must represent an index of type <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> is <code>null</code>, and both <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> and <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> are set to <code>false</code>. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is equal to the element type of <code>array</code>.Type. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Conversion_\" data-linktype=\"relative-path\">Conversion</a> property is <code>null</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_ArrayIndex_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression___\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_ArrayIndex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ArrayIndex(Expression,Expression[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents applying an array index operator to a multidimensional array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.MethodCallExpression ArrayIndex (System.Linq.Expressions.Expression array, System.Linq.Expressions.Expression[] indexes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> instances - indexes for the array index operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>indexes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Arguments*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Object*</span> and <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Arguments*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> or <code>indexes</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>array</code>.Type does not represent an array type.  </p>\n<p> -or-  </p>\n<p> The rank of <code>array</code>.Type does not match the number of elements in <code>indexes</code>.  </p>\n<p> -or-  </p>\n<p> The <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property of one or more elements of <code>indexes</code> does not represent the <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Each element of <code>indexes</code> must have <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> equal to <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of <code>array</code> must represent an array type whose rank matches the number of elements in <code>indexes</code>.  </p>\n<p> If the rank of <code>array</code>.Type is 1, this method returns a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a>. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Left_\" data-linktype=\"relative-path\">Left</a> property is set to <code>array</code> and the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Right_\" data-linktype=\"relative-path\">Right</a> property is set to the single element of <code>indexes</code>. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of the<a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> represents the element type of <code>array</code>.Type.  </p>\n<p> If the rank of <code>array</code>.Type is more than one, this method returns a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a>. The <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression#System_Linq_Expressions_MethodCallExpression_Method_\" data-linktype=\"relative-path\">Method</a> property is set to the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that describes the public instance method <code>Get</code> on the type represented by the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of <code>array</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the ArrayIndex method to create a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents indexing into a two-dimensional array.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.Expression#3\">            string[,] gradeArray =\n                { {&quot;chemistry&quot;, &quot;history&quot;, &quot;mathematics&quot;}, {&quot;78&quot;, &quot;61&quot;, &quot;82&quot;} };\n\n            System.Linq.Expressions.Expression arrayExpression =\n                System.Linq.Expressions.Expression.Constant(gradeArray);\n\n            // Create a MethodCallExpression that represents indexing\n            // into the two-dimensional array &#39;gradeArray&#39; at (0, 2).\n            // Executing the expression would return &quot;mathematics&quot;.\n            System.Linq.Expressions.MethodCallExpression methodCallExpression =\n                System.Linq.Expressions.Expression.ArrayIndex(\n                    arrayExpression,\n                    System.Linq.Expressions.Expression.Constant(0),\n                    System.Linq.Expressions.Expression.Constant(2));\n\n            Console.WriteLine(methodCallExpression.ToString());\n\n            // This code produces the following output:\n            //\n            // value(System.String[,]).Get(0, 2)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.Expression#3\">        Dim gradeArray(,) As String = _\n            {{&quot;chemistry&quot;, &quot;history&quot;, &quot;mathematics&quot;}, {&quot;78&quot;, &quot;61&quot;, &quot;82&quot;}}\n\n        Dim arrayExpression As System.Linq.Expressions.Expression = _\n            System.Linq.Expressions.Expression.Constant(gradeArray)\n\n        &#39; Create a MethodCallExpression that represents indexing\n        &#39; into the two-dimensional array &#39;gradeArray&#39; at (0, 2).\n        &#39; Executing the expression would return &quot;mathematics&quot;.\n        Dim methodCallExpression As System.Linq.Expressions.MethodCallExpression = _\n            System.Linq.Expressions.Expression.ArrayIndex( _\n                arrayExpression, _\n                System.Linq.Expressions.Expression.Constant(0), _\n                System.Linq.Expressions.Expression.Constant(2))\n\n        Console.WriteLine(methodCallExpression.ToString())\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; value(System.String[,]).Get(0, 2)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_ArrayLength_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_ArrayLength_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ArrayLength(Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents an expression for obtaining the length of a one-dimensional array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.UnaryExpression ArrayLength (System.Linq.Expressions.Expression array);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.UnaryExpression.Operand*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.UnaryExpression.Operand*</span> property equal to <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>array</code>.Type does not represent an array type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of <code>array</code> must represent an array type.  </p>\n<p> The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> is equal to <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>. The <a class=\"xref\" href=\"system.linq.expressions.unaryexpression#System_Linq_Expressions_UnaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property is <code>null</code>, and both <a class=\"xref\" href=\"system.linq.expressions.unaryexpression#System_Linq_Expressions_UnaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> and <a class=\"xref\" href=\"system.linq.expressions.unaryexpression#System_Linq_Expressions_UnaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> are set to <code>false</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Assign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Assign_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Assign(Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an assignment operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression Assign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>Assign</code> expression copies a value for value types, and it copies a reference for reference types.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create an expression that represents an assignment operation.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#12\">        &#39; Add the following directive to your file:\n        &#39; Imports System.Linq.Expressions \n\n        &#39; To demonstrate the assignment operation, create a variable.\n        Dim variableExpr As ParameterExpression = Expression.Variable(GetType(String), &quot;sampleVar&quot;)\n\n        &#39; This expression represents the assignment of a value\n        &#39; to a variable expression.\n        &#39; It copies a value for value types, and it\n        &#39; copies a reference for reference types.\n        Dim assignExpr As Expression = Expression.Assign(\n            variableExpr,\n            Expression.Constant(&quot;Hello World!&quot;)\n            )\n\n        &#39; The block expression allows for executing several expressions sequentually.\n        &#39; In this block, you pass the variable expression as a parameter,\n        &#39; and then assign this parameter a value in the assign expression.\n        Dim blockExpr As Expression = Expression.Block(\n              New ParameterExpression() {variableExpr}, assignExpr\n              )\n\n        &#39; Print the assign expression.\n        Console.WriteLine(assignExpr.ToString())\n\n        &#39; The following statement first creates an expression tree,\n        &#39; then compiles it, and then executes it. \n        Console.WriteLine(Expression.Lambda(Of Func(Of String))(blockExpr).Compile()())\n\n        &#39; This code example produces the following output:\n        &#39;\n        &#39; (sampleVar = &quot;Hello World!&quot;)\n        &#39; Hello World!\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#12\">            // Add the following directive to your file:\n            // using System.Linq.Expressions;  \n\n            // To demonstrate the assignment operation, we create a variable.\n            ParameterExpression variableExpr = Expression.Variable(typeof(String), &quot;sampleVar&quot;);\n\n            // This expression represents the assignment of a value\n            // to a variable expression.\n            // It copies a value for value types, and\n            // copies a reference for reference types.\n            Expression assignExpr = Expression.Assign(\n                variableExpr,\n                Expression.Constant(&quot;Hello World!&quot;)\n                );\n\n            // The block expression allows for executing several expressions sequentually.\n            // In this block, we pass the variable expression as a parameter,\n            // and then assign this parameter a value in the assign expression.\n            Expression blockExpr = Expression.Block(\n                new ParameterExpression[] { variableExpr },\n                assignExpr\n                );\n\n            // Print out the assign expression.\n            Console.WriteLine(assignExpr.ToString());\n\n            // The following statement first creates an expression tree,\n            // then compiles it, and then executes it.  \n            Console.WriteLine(Expression.Lambda&lt;Func&lt;String&gt;&gt;(blockExpr).Compile()());\n\n            // This code example produces the following output:\n            //\n            // (sampleVar = &quot;Hello World!&quot;)\n            // Hello World!\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Bind_System_Reflection_MemberInfo_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Bind_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Bind(MemberInfo,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.memberassignment\" data-linktype=\"relative-path\">MemberAssignment</a> that represents the initialization of a field or property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.MemberAssignment Bind (System.Reflection.MemberInfo member, System.Linq.Expressions.Expression expression);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>member</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.MemberBinding.Member*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.MemberAssignment.Expression*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.memberassignment\" data-linktype=\"relative-path\">MemberAssignment</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.memberassignment\" data-linktype=\"relative-path\">MemberAssignment</a> that has <span class=\"xref\">stem.Linq.Expressions.MemberBinding.BindingType*</span> equal to <a class=\"xref\" href=\"system.linq.expressions.memberbindingtype\" data-linktype=\"relative-path\">MemberBindingType</a> and the <span class=\"xref\">stem.Linq.Expressions.MemberBinding.Member*</span> and <span class=\"xref\">stem.Linq.Expressions.MemberAssignment.Expression*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>member</code> or <code>expression</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>member</code> does not represent a field or property.  </p>\n<p> -or-  </p>\n<p> The property represented by <code>member</code> does not have a <code>set</code> accessor.  </p>\n<p> -or-  </p>\n<p> <code>expression</code>.Type is not assignable to the type of the field or property that <code>member</code> represents.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of <code>expression</code> must be assignable to the type represented by the <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_FieldType_\" data-linktype=\"relative-path\">FieldType</a> or <a class=\"xref\" href=\"system.reflection.propertyinfo#System_Reflection_PropertyInfo_PropertyType_\" data-linktype=\"relative-path\">PropertyType</a> property of <code>member</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Bind_System_Reflection_MethodInfo_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Bind_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Bind(MethodInfo,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.memberassignment\" data-linktype=\"relative-path\">MemberAssignment</a> that represents the initialization of a member by using a property accessor method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.MemberAssignment Bind (System.Reflection.MethodInfo propertyAccessor, System.Linq.Expressions.Expression expression);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>propertyAccessor</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents a property accessor method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.MemberAssignment.Expression*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.memberassignment\" data-linktype=\"relative-path\">MemberAssignment</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.memberassignment\" data-linktype=\"relative-path\">MemberAssignment</a> that has the <span class=\"xref\">stem.Linq.Expressions.MemberBinding.BindingType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.memberbindingtype\" data-linktype=\"relative-path\">MemberBindingType</a>, the <span class=\"xref\">stem.Linq.Expressions.MemberBinding.Member*</span> property set to the <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a> that represents the property accessed in <code>propertyAccessor</code>, and the <span class=\"xref\">stem.Linq.Expressions.MemberAssignment.Expression*</span> property set to <code>expression</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>propertyAccessor</code> or <code>expression</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>propertyAccessor</code> does not represent a property accessor method.  </p>\n<p> -or-  </p>\n<p> The property accessed by <code>propertyAccessor</code> does not have a <code>set</code> accessor.  </p>\n<p> -or-  </p>\n<p> <code>expression</code>.Type is not assignable to the type of the field or property that <code>member</code> represents.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of <code>expression</code> must be assignable to the type represented by the <a class=\"xref\" href=\"system.reflection.propertyinfo#System_Reflection_PropertyInfo_PropertyType_\" data-linktype=\"relative-path\">PropertyType</a> property of the property accessed in <code>propertyAccessor</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Block_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression__\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Block_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Block(IEnumerable&lt;Expression&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a> that contains the given expressions and has no variables.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BlockExpression Block (System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; expressions);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expressions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The expressions in the block.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a></div>\r\n                  </div>\r\n                  <p>The created <a class=\"xref\" href=\"system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When the block expression is executed, it returns the value of the last expression in the block.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Block_System_Linq_Expressions_Expression___\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Block_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Block(Expression[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a> that contains the given expressions and has no variables.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression[] expressions);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expressions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The expressions in the block.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a></div>\r\n                  </div>\r\n                  <p>The created <a class=\"xref\" href=\"system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When the block expression is executed, it returns the value of the last expression in the block.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create a block expression. The block expression consists of two <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> objects and one <a class=\"xref\" href=\"system.linq.expressions.constantexpression\" data-linktype=\"relative-path\">ConstantExpression</a> object.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#13\">        &#39; Add the following directive to your file:\n        &#39; Imports System.Linq.Expressions\n\n        &#39; The block expression enables you to execute several expressions sequentually.\n        &#39; When the block expression is executed,\n        &#39; it returns the value of the last expression in the sequence.\n        Dim blockExpr As BlockExpression = Expression.Block(\n            Expression.Call(\n                Nothing,\n                GetType(Console).GetMethod(&quot;Write&quot;, New Type() {GetType(String)}),\n                Expression.Constant(&quot;Hello &quot;)\n               ),\n            Expression.Call(\n                Nothing,\n                GetType(Console).GetMethod(&quot;WriteLine&quot;, New Type() {GetType(String)}),\n                Expression.Constant(&quot;World!&quot;)\n                ),\n            Expression.Constant(42)\n        )\n\n        Console.WriteLine(&quot;The result of executing the expression tree:&quot;)\n        &#39; The following statement first creates an expression tree,\n        &#39; then compiles it, and then executes it.           \n        Dim result = Expression.Lambda(Of Func(Of Integer))(blockExpr).Compile()()\n\n        &#39; Print the expressions from the block expression.\n        Console.WriteLine(&quot;The expressions from the block expression:&quot;)\n        For Each expr In blockExpr.Expressions\n            Console.WriteLine(expr.ToString())\n        Next\n\n        &#39; Print the result of the tree execution.\n        Console.WriteLine(&quot;The return value of the block expression:&quot;)\n        Console.WriteLine(result)\n\n        &#39; This code example produces the following output:\n        &#39;\n        &#39; The result of executing the expression tree:\n        &#39; Hello World!\n\n        &#39; The expressions from the block expression:\n        &#39; Write(&quot;Hello &quot;)\n        &#39; WriteLine(&quot;World!&quot;)\n        &#39; 42\n\n        &#39; The return value of the block expression:\n        &#39; 42\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#13\">            // Add the following directive to your file:\n            // using System.Linq.Expressions;  \n\n            // The block expression allows for executing several expressions sequentually.\n            // When the block expression is executed,\n            // it returns the value of the last expression in the sequence.\n            BlockExpression blockExpr = Expression.Block(\n                Expression.Call(\n                    null,\n                    typeof(Console).GetMethod(&quot;Write&quot;, new Type[] { typeof(String) }),\n                    Expression.Constant(&quot;Hello &quot;)\n                   ),\n                Expression.Call(\n                    null,\n                    typeof(Console).GetMethod(&quot;WriteLine&quot;, new Type[] { typeof(String) }),\n                    Expression.Constant(&quot;World!&quot;)\n                    ),\n                Expression.Constant(42)\n            );\n\n            Console.WriteLine(&quot;The result of executing the expression tree:&quot;);\n            // The following statement first creates an expression tree,\n            // then compiles it, and then executes it.           \n            var result = Expression.Lambda&lt;Func&lt;int&gt;&gt;(blockExpr).Compile()();\n\n            // Print out the expressions from the block expression.\n            Console.WriteLine(&quot;The expressions from the block expression:&quot;);\n            foreach (var expr in blockExpr.Expressions)\n                Console.WriteLine(expr.ToString());\n\n            // Print out the result of the tree execution.\n            Console.WriteLine(&quot;The return value of the block expression:&quot;);\n            Console.WriteLine(result);\n\n            // This code example produces the following output:\n            //\n            // The result of executing the expression tree:\n            // Hello World!\n\n            // The expressions from the block expression:\n            // Write(&quot;Hello &quot;)\n            // WriteLine(&quot;World!&quot;)\n            // 42\n\n            // The return value of the block expression:\n            // 42\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Block_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ParameterExpression__System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression__\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Block_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Block(IEnumerable&lt;ParameterExpression&gt;,IEnumerable&lt;Expression&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a> that contains the given variables and expressions.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BlockExpression Block (System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; variables, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; expressions);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>variables</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The variables in the block.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>expressions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The expressions in the block.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a></div>\r\n                  </div>\r\n                  <p>The created <a class=\"xref\" href=\"system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When the block expression is executed, it returns the value of the last expression in the block.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to pass a parameter to a block expression and process this parameter within a block.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#14\">        &#39; Add the following directive to your file:\n        &#39; Imports System.Linq.Expressions  \n\n\n        &#39; This block has a parameter expression\n        &#39; that represents a variable within the block scope.\n        &#39; It assigns a value to the variable,\n        &#39; and then adds a constant to the assigned value. \n\n        Dim varExpr As ParameterExpression = Expression.Variable(GetType(Integer), &quot;sampleVar&quot;)\n        Dim blockExpr As BlockExpression = Expression.Block(\n            New ParameterExpression() {varExpr},\n            Expression.Assign(varExpr, Expression.Constant(1)),\n            Expression.Add(varExpr, Expression.Constant(5))\n        )\n\n        &#39; Print the expressions from the block expression.\n\n        Console.WriteLine(&quot;The expressions from the block expression:&quot;)\n        For Each expr In blockExpr.Expressions\n            Console.WriteLine(expr.ToString())\n        Next\n\n        Console.WriteLine(&quot;The result of executing the expression tree:&quot;)\n\n        &#39; The following statement first creates an expression tree,\n        &#39; then compiles it, and then executes it.\n        Console.WriteLine(\n            Expression.Lambda(Of Func(Of Integer))(blockExpr).Compile()())\n\n        &#39; This code example produces the following output:\n        &#39;\n        &#39; The expressions from the block expression:\n        &#39; (sampleVar = 1)\n        &#39; (sampleVar + 5)\n        &#39; The result of executing the expression tree:\n        &#39; 6\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#14\">            // Add the following directive to your file:\n            // using System.Linq.Expressions;  \n\n\n            // This block has a parameter expression\n            // that represents a variable within the block scope.\n            // It assigns a value to the variable,\n            // and then adds a constant to the assigned value. \n\n            ParameterExpression varExpr = Expression.Variable(typeof(int), &quot;sampleVar&quot;);\n            BlockExpression blockExpr = Expression.Block(\n                new ParameterExpression[] { varExpr },\n                Expression.Assign(varExpr, Expression.Constant(1)),\n                Expression.Add(varExpr, Expression.Constant(5))\n            );\n\n            // Print out the expressions from the block expression.\n            Console.WriteLine(&quot;The expressions from the block expression:&quot;);\n            foreach (var expr in blockExpr.Expressions)\n                Console.WriteLine(expr.ToString());\n\n            Console.WriteLine(&quot;The result of executing the expression tree:&quot;);\n            // The following statement first creates an expression tree,\n            // then compiles it, and then executes it.\n            Console.WriteLine(\n                Expression.Lambda&lt;Func&lt;int&gt;&gt;(blockExpr).Compile()());\n\n            // This code example produces the following output:\n            // The expressions from the block expression:\n            // (sampleVar = 1)\n            // (sampleVar + 5)\n            // The result of executing the expression tree:\n            // 6\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Block_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ParameterExpression__System_Linq_Expressions_Expression___\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Block_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Block(IEnumerable&lt;ParameterExpression&gt;,Expression[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a> that contains the given variables and expressions.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BlockExpression Block (System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; variables, System.Linq.Expressions.Expression[] expressions);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>variables</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The variables in the block.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>expressions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The expressions in the block.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a></div>\r\n                  </div>\r\n                  <p>The created <a class=\"xref\" href=\"system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When the block expression is executed, it returns the value of the last expression in the block.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Block_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Block_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Block(Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a> that contains two expressions and has no variables.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg0</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first expression in the block.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second expression in the block.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a></div>\r\n                  </div>\r\n                  <p>The created <a class=\"xref\" href=\"system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When the block expression is executed, it returns the value of the last expression in the block.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Block_System_Type_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression__\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Block_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Block(Type,IEnumerable&lt;Expression&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a> that contains the given expressions, has no variables and has specific result type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BlockExpression Block (Type type, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; expressions);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The result type of the block.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>expressions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The expressions in the block.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a></div>\r\n                  </div>\r\n                  <p>The created <a class=\"xref\" href=\"system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Block_System_Type_System_Linq_Expressions_Expression___\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Block_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Block(Type,Expression[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a> that contains the given expressions, has no variables and has specific result type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BlockExpression Block (Type type, System.Linq.Expressions.Expression[] expressions);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The result type of the block.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>expressions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The expressions in the block.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a></div>\r\n                  </div>\r\n                  <p>The created <a class=\"xref\" href=\"system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Block_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Block_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Block(Expression,Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a> that contains three expressions and has no variables.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg0</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first expression in the block.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second expression in the block.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The third expression in the block.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a></div>\r\n                  </div>\r\n                  <p>The created <a class=\"xref\" href=\"system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When the block expression is executed, it returns the value of the last expression in the block.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Block_System_Type_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ParameterExpression__System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression__\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Block_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Block(Type,IEnumerable&lt;ParameterExpression&gt;,IEnumerable&lt;Expression&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a> that contains the given variables and expressions.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BlockExpression Block (Type type, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; variables, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; expressions);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The result type of the block.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>variables</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The variables in the block.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>expressions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The expressions in the block.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a></div>\r\n                  </div>\r\n                  <p>The created <a class=\"xref\" href=\"system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Block_System_Type_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ParameterExpression__System_Linq_Expressions_Expression___\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Block_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Block(Type,IEnumerable&lt;ParameterExpression&gt;,Expression[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a> that contains the given variables and expressions.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BlockExpression Block (Type type, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; variables, System.Linq.Expressions.Expression[] expressions);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The result type of the block.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>variables</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The variables in the block.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>expressions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The expressions in the block.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a></div>\r\n                  </div>\r\n                  <p>The created <a class=\"xref\" href=\"system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Block_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Block_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Block(Expression,Expression,Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a> that contains four expressions and has no variables.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg0</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first expression in the block.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second expression in the block.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The third expression in the block.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg3</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The fourth expression in the block.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a></div>\r\n                  </div>\r\n                  <p>The created <a class=\"xref\" href=\"system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When the block expression is executed, it returns the value of the last expression in the block.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Block_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Block_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Block(Expression,Expression,Expression,Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a> that contains five expressions and has no variables.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3, System.Linq.Expressions.Expression arg4);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg0</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first expression in the block.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second expression in the block.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The third expression in the block.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg3</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The fourth expression in the block.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg4</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The fifth expression in the block.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a></div>\r\n                  </div>\r\n                  <p>The created <a class=\"xref\" href=\"system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When the block expression is executed, it returns the value of the last expression in the block.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Break_System_Linq_Expressions_LabelTarget_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Break_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Break(LabelTarget)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> representing a break statement.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a> that the <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> will jump to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> with <span class=\"xref\">stem.Linq.Expressions.GotoExpression.Kind*</span> equal to Break, the <span class=\"xref\">stem.Linq.Expressions.GotoExpression.Target*</span> property set to <code>target</code>, and a null value to be passed to the target label upon jumping.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to create an expression that contains a <a class=\"xref\" href=\"system.linq.expressions.loopexpression\" data-linktype=\"relative-path\">LoopExpression</a> object that uses the Break method.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#44\">        &#39; Add the following directive to the file:\n        &#39; Imports System.Linq.Expressions  \n        &#39; Creating a parameter expression.\n        Dim value As ParameterExpression =\n            Expression.Parameter(GetType(Integer), &quot;value&quot;)\n\n        &#39; Creating an expression to hold a local variable. \n        Dim result As ParameterExpression =\n            Expression.Parameter(GetType(Integer), &quot;result&quot;)\n\n        &#39; Creating a label to jump to from a loop.\n        Dim label As LabelTarget = Expression.Label(GetType(Integer))\n\n        &#39; Creating a method body.\n        Dim block As BlockExpression = Expression.Block(\n            New ParameterExpression() {result},\n            Expression.Assign(result, Expression.Constant(1)),\n            Expression.Loop(\n                Expression.IfThenElse(\n                    Expression.GreaterThan(value, Expression.Constant(1)),\n                    Expression.MultiplyAssign(result,\n                        Expression.PostDecrementAssign(value)),\n                    Expression.Break(label, result)\n                ),\n                label\n            )\n        )\n\n        &#39; Compile an expression tree and return a delegate.\n        Dim factorial As Integer =\n            Expression.Lambda(Of Func(Of Integer, Integer))(block, value).Compile()(5)\n\n        Console.WriteLine(factorial)\n\n        &#39; This code example produces the following output:\n        &#39;\n        &#39; 120\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#44\">            // Add the following directive to the file:\n            // using System.Linq.Expressions;  \n\n            // Creating a parameter expression.\n            ParameterExpression value = Expression.Parameter(typeof(int), &quot;value&quot;);\n\n            // Creating an expression to hold a local variable. \n            ParameterExpression result = Expression.Parameter(typeof(int), &quot;result&quot;);\n\n            // Creating a label to jump to from a loop.\n            LabelTarget label = Expression.Label(typeof(int));\n\n            // Creating a method body.\n            BlockExpression block = Expression.Block(\n                new[] { result },\n                Expression.Assign(result, Expression.Constant(1)),\n                    Expression.Loop(\n                       Expression.IfThenElse(\n                           Expression.GreaterThan(value, Expression.Constant(1)),\n                           Expression.MultiplyAssign(result,\n                               Expression.PostDecrementAssign(value)),\n                           Expression.Break(label, result)\n                       ),\n                   label\n                )\n            );\n\n            // Compile and run an expression tree.\n            int factorial = Expression.Lambda&lt;Func&lt;int, int&gt;&gt;(block, value).Compile()(5);\n\n            Console.WriteLine(factorial);\n\n            // This code example produces the following output:\n            //\n            // 120\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Break_System_Linq_Expressions_LabelTarget_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Break_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Break(LabelTarget,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> representing a break statement. The value passed to the label upon jumping can be specified.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a> that the <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> will jump to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value that will be passed to the associated label upon jumping.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> with <span class=\"xref\">stem.Linq.Expressions.GotoExpression.Kind*</span> equal to Break, the <span class=\"xref\">stem.Linq.Expressions.GotoExpression.Target*</span> property set to <code>target</code>, and <code>value</code> to be passed to the target label upon jumping.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Break_System_Linq_Expressions_LabelTarget_System_Type_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Break_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Break(LabelTarget,Type)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> representing a break statement with the specified type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target, Type type);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a> that the <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> will jump to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> to set the <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> with <span class=\"xref\">stem.Linq.Expressions.GotoExpression.Kind*</span> equal to Break, the <span class=\"xref\">stem.Linq.Expressions.GotoExpression.Target*</span> property set to <code>target</code>, and the <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property set to <code>type</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Break_System_Linq_Expressions_LabelTarget_System_Linq_Expressions_Expression_System_Type_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Break_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Break(LabelTarget,Expression,Type)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> representing a break statement with the specified type. The value passed to the label upon jumping can be specified.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a> that the <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> will jump to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value that will be passed to the associated label upon jumping.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> to set the <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> with <span class=\"xref\">stem.Linq.Expressions.GotoExpression.Kind*</span> equal to Break, the <span class=\"xref\">stem.Linq.Expressions.GotoExpression.Target*</span> property set to <code>target</code>, the <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property set to <code>type</code>, and <code>value</code> to be passed to the target label upon jumping.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Call_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Call_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Call(Expression,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents a call to a method that takes no arguments.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>instance</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> that specifies the instance for an instance method call (pass <code>null</code> for a <code>static</code> (<code>Shared</code> in Visual Basic) method).</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Object*</span> and <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>instance</code> is <code>null</code> and <code>method</code> represents an instance method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>instance</code>.Type is not assignable to the declaring type of the method represented by <code>method</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To represent a call to a <code>static</code> (<code>Shared</code> in Visual Basic) method, pass in <code>null</code> for the <code>instance</code> parameter when you call this method.  </p>\n<p> If <code>method</code> represents an instance method, the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of <code>instance</code> must be assignable to the declaring type of the method represented by <code>method</code>.  </p>\n<p> The <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression#System_Linq_Expressions_MethodCallExpression_Arguments_\" data-linktype=\"relative-path\">Arguments</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> is empty. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is equal to the return type of the method represented by <code>method</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create an expression that calls a method without arguments.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#15\">        &#39; Add the following directive to your file:\n        &#39; Imports System.Linq.Expressions   \n\n        &#39; This expression represents a call to an instance method without arguments.\n        Dim callExpr As Expression = Expression.Call(\n            Expression.Constant(&quot;sample string&quot;), GetType(String).GetMethod(&quot;ToUpper&quot;, New Type() {}))\n\n        &#39; Print the expression.\n        Console.WriteLine(callExpr.ToString())\n\n        &#39; The following statement first creates an expression tree,\n        &#39; then compiles it, and then executes it.  \n        Console.WriteLine(Expression.Lambda(Of Func(Of String))(callExpr).Compile()())\n\n        &#39; This code example produces the following output:\n        &#39;\n        &#39; &quot;sample string&quot;.ToUpper\n        &#39; SAMPLE STRING\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#15\">            // Add the following directive to your file:\n            // using System.Linq.Expressions;  \n\n            // This expression represents a call to an instance method without arguments.\n            Expression callExpr = Expression.Call(\n                Expression.Constant(&quot;sample string&quot;), typeof(String).GetMethod(&quot;ToUpper&quot;, new Type[] { }));\n\n            // Print out the expression.\n            Console.WriteLine(callExpr.ToString());\n\n            // The following statement first creates an expression tree,\n            // then compiles it, and then executes it.  \n            Console.WriteLine(Expression.Lambda&lt;Func&lt;String&gt;&gt;(callExpr).Compile()());\n\n            // This code example produces the following output:\n            //\n            // &quot;sample string&quot;.ToUpper\n            // SAMPLE STRING\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Call_System_Reflection_MethodInfo_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression__\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Call_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Call(MethodInfo,IEnumerable&lt;Expression&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents a call to a static (Shared in Visual Basic) method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents the target method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arguments</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A collection of <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> that represents the call arguments.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Object*</span> and <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Call_System_Reflection_MethodInfo_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Call_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Call(MethodInfo,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents a call to a <code>static</code> (<code>Shared</code> in Visual Basic) method that takes one argument.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg0</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> that represents the first argument.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Object*</span> and <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is null.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to create an expression that calls a <code>static</code> (<code>Shared</code> in Visual Basic) method that takes one argument.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#16\">        &#39; Add the following directive to your file:\n        &#39; Imports System.Linq.Expressions  \n        Public Class SampleClass\n            Shared Function Increment(ByVal arg1 As Integer) As Integer\n                Return arg1 + 1\n            End Function\n        End Class\n        Shared Sub TestCall()\n            &#39;This expression represents a call to an instance method with one argument.\n            Dim callExpr As Expression = Expression.Call(\n                GetType(SampleClass).GetMethod(&quot;Increment&quot;),\n                Expression.Constant(2))\n\n            &#39; Print the expression.\n            Console.WriteLine(callExpr.ToString())\n\n            &#39; The following statement first creates an expression tree,\n            &#39; then compiles it, and then executes it.\n            Console.WriteLine(Expression.Lambda(Of Func(Of Integer))(callExpr).Compile()())\n        End Sub\n\n        &#39; This code example produces the following output:\n        &#39;\n        &#39; Increment(2)\n        &#39; 3\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#16\">            // Add the following directive to your file:\n            // using System.Linq.Expressions;  \n\n            public class SampleClass\n            {\n                public static int Increment(int arg1)\n                {\n                    return arg1 + 1;\n                }\n            }\n\n            static public void TestCall()\n            {\n\n                //This expression represents a call to an instance method with one argument.\n                Expression callExpr = Expression.Call(\n                                        typeof(SampleClass).GetMethod(&quot;Increment&quot;),\n                                        Expression.Constant(2)\n                                    );\n\n                // Print out the expression.\n                Console.WriteLine(callExpr.ToString());\n\n                // The following statement first creates an expression tree,\n                // then compiles it, and then executes it.\n                Console.WriteLine(Expression.Lambda&lt;Func&lt;int&gt;&gt;(callExpr).Compile()());\n\n                // This code example produces the following output:\n                //\n                // Increment(2)\n                // 3\n            }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Call_System_Reflection_MethodInfo_System_Linq_Expressions_Expression___\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Call_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Call(MethodInfo,Expression[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents a call to a <code>static</code> (<code>Shared</code> in Visual Basic) method that has arguments.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression[] arguments);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents a <code>static</code> (<code>Shared</code> in Visual Basic) method to set the <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arguments</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Arguments*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Method*</span> and <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Arguments*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The number of elements in <code>arguments</code> does not equal the number of parameters for the method represented by <code>method</code>.  </p>\n<p> -or-  </p>\n<p> One or more of the elements of <code>arguments</code> is not assignable to the corresponding parameter for the method represented by <code>method</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>arguments</code> is not <code>null</code>, it must have the same number of elements as the number of parameters for the method represented by <code>method</code>. Each element in <code>arguments</code> must not be <code>null</code> and must be assignable to the corresponding parameter of <code>method</code>, possibly after <em>quoting</em>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An element will be quoted only if the corresponding method parameter is of type <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>. Quoting means the element is wrapped in a <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> node. The resulting node is a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> whose <a class=\"xref\" href=\"system.linq.expressions.unaryexpression#System_Linq_Expressions_UnaryExpression_Operand_\" data-linktype=\"relative-path\">Operand</a> property is the element of <code>arguments</code>.  </p>\n</div>\n<p> The <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression#System_Linq_Expressions_MethodCallExpression_Arguments_\" data-linktype=\"relative-path\">Arguments</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> is empty if <code>arguments</code> is <code>null</code>. Otherwise, it contains the same elements as <code>arguments</code>, some of which may be quoted.  </p>\n<p> The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> is equal to the return type of the method represented by <code>method</code>. The <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression#System_Linq_Expressions_MethodCallExpression_Object_\" data-linktype=\"relative-path\">Object</a> property is <code>null</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Call_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression__\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Call_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Call(Expression,MethodInfo,IEnumerable&lt;Expression&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents a call to a method that takes arguments.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>instance</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Object*</span> property equal to (pass <code>null</code> for a <code>static</code> (<code>Shared</code> in Visual Basic) method).</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arguments</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Arguments*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Object*</span>, <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Method*</span>, and <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Arguments*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>instance</code> is <code>null</code> and <code>method</code> represents an instance method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>instance</code>.Type is not assignable to the declaring type of the method represented by <code>method</code>.  </p>\n<p> -or-  </p>\n<p> The number of elements in <code>arguments</code> does not equal the number of parameters for the method represented by <code>method</code>.  </p>\n<p> -or-  </p>\n<p> One or more of the elements of <code>arguments</code> is not assignable to the corresponding parameter for the method represented by <code>method</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To represent a call to a <code>static</code> (<code>Shared</code> in Visual Basic) method, pass in <code>null</code> for the <code>instance</code> parameter when you call this method, or call <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Call_\" data-linktype=\"relative-path\">Call</a> instead.  </p>\n<p> If <code>method</code> represents an instance method, the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of <code>instance</code> must be assignable to the declaring type of the method represented by <code>method</code>.  </p>\n<p> If <code>arguments</code> is not <code>null</code>, it must have the same number of elements as the number of parameters for the method represented by <code>method</code>. Each element in <code>arguments</code> must not be <code>null</code> and must be assignable to the corresponding parameter of <code>method</code>, possibly after <em>quoting</em>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An element will be quoted only if the corresponding method parameter is of type <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>. Quoting means the element is wrapped in a <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> node. The resulting node is a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> whose <a class=\"xref\" href=\"system.linq.expressions.unaryexpression#System_Linq_Expressions_UnaryExpression_Operand_\" data-linktype=\"relative-path\">Operand</a> property is the element of <code>arguments</code>.  </p>\n</div>\n<p> The <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression#System_Linq_Expressions_MethodCallExpression_Arguments_\" data-linktype=\"relative-path\">Arguments</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> is empty if <code>arguments</code> is <code>null</code>. Otherwise, it contains the same elements as <code>arguments</code>, some of which may be quoted.  </p>\n<p> The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> is equal to the return type of the method represented by <code>method</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Call_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_System_Linq_Expressions_Expression___\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Call_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Call(Expression,MethodInfo,Expression[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents a call to a method that takes arguments.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Linq.Expressions.Expression[] arguments);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>instance</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> that specifies the instance for an instance method call (pass <code>null</code> for a <code>static</code> (<code>Shared</code> in Visual Basic) method).</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arguments</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Arguments*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Object*</span>, <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Method*</span>, and <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Arguments*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>instance</code> is <code>null</code> and <code>method</code> represents an instance method.  </p>\n<p> -or-  </p>\n<p> <code>arguments</code> is not <code>null</code> and one or more of its elements is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>instance</code>.Type is not assignable to the declaring type of the method represented by <code>method</code>.  </p>\n<p> -or-  </p>\n<p> The number of elements in <code>arguments</code> does not equal the number of parameters for the method represented by <code>method</code>.  </p>\n<p> -or-  </p>\n<p> One or more of the elements of <code>arguments</code> is not assignable to the corresponding parameter for the method represented by <code>method</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To represent a call to a <code>static</code> (<code>Shared</code> in Visual Basic) method, pass in <code>null</code> for the <code>instance</code> parameter when you call this method, or call <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Call_\" data-linktype=\"relative-path\">Call</a> instead.  </p>\n<p> If <code>method</code> represents an instance method, the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of <code>instance</code> must be assignable to the declaring type of the method represented by <code>method</code>.  </p>\n<p> If <code>arguments</code> is not <code>null</code>, it must have the same number of elements as the number of parameters for the method represented by <code>method</code>. Each element in <code>arguments</code> must not be <code>null</code> and must be assignable to the corresponding parameter of <code>method</code>, possibly after <em>quoting</em>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An element will be quoted only if the corresponding method parameter is of type <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>. Quoting means the element is wrapped in a <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> node. The resulting node is a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> whose <a class=\"xref\" href=\"system.linq.expressions.unaryexpression#System_Linq_Expressions_UnaryExpression_Operand_\" data-linktype=\"relative-path\">Operand</a> property is the element of <code>arguments</code>.  </p>\n</div>\n<p> The <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression#System_Linq_Expressions_MethodCallExpression_Arguments_\" data-linktype=\"relative-path\">Arguments</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> is empty if <code>arguments</code> is <code>null</code>. Otherwise, it contains the same elements as <code>arguments</code>, some of which may be quoted.  </p>\n<p> The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> is equal to the return type of the method represented by <code>method</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Call_System_Reflection_MethodInfo_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Call_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Call(MethodInfo,Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents a call to a static method that takes two arguments.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg0</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> that represents the first argument.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> that represents the second argument.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Object*</span> and <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is null.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Call_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Call_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Call(Expression,MethodInfo,Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents a call to a method that takes two arguments.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>instance</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> that specifies the instance for an instance call. (pass null for a static (Shared in Visual Basic) method).</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents the target method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg0</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> that represents the first argument.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> that represents the second argument.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Object*</span> and <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create an expression that calls an instance method that has two arguments.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#17\">        &#39; Add the following directive to your file:\n        &#39; Imports System.Linq.Expressions  \n        Public Class SampleClass\n            Public Function AddIntegers(ByVal arg1 As Integer, ByVal arg2 As Integer) As Integer\n                Return (arg1 + arg2)\n            End Function\n        End Class\n        Public Shared Sub TestCall()\n            &#39; This expression represents a call to an instance method that has two arguments.\n            &#39; The first argument is an expression that creates a new object of the specified type.\n            Dim callExpr As Expression = Expression.Call(\n                Expression.[New](GetType(SampleClass)),\n                GetType(SampleClass).GetMethod(&quot;AddIntegers&quot;, New Type() {GetType(Integer), GetType(Integer)}),\n                Expression.Constant(1),\n                Expression.Constant(2)\n              )\n\n            &#39; Print the expression.\n            Console.WriteLine(callExpr.ToString())\n\n            &#39; The following statement first creates an expression tree,\n            &#39; then compiles it, and then executes it.\n            Console.WriteLine(Expression.Lambda(Of Func(Of Integer))(callExpr).Compile()())\n        End Sub\n\n        &#39; This code example produces the following output:\n        &#39;\n        &#39; new SampleClass().AddIntegers(1, 2)\n        &#39; 3\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#17\">            // Add the following directive to your file:\n            // using System.Linq.Expressions;  \n            public class SampleClass\n            {\n                public int AddIntegers(int arg1, int arg2)\n                {\n                    return arg1 + arg2;\n                }\n            }\n\n            static public void TestCall()\n            {\n                // This expression represents a call to an instance method that has two arguments.\n                // The first argument is an expression that creates a new object of the specified type.\n                Expression callExpr = Expression.Call(\n                    Expression.New(typeof(SampleClass)),\n                    typeof(SampleClass).GetMethod(&quot;AddIntegers&quot;, new Type[] { typeof(int), typeof(int) }),\n                    Expression.Constant(1),\n                    Expression.Constant(2)\n                    );\n\n                // Print out the expression.\n                Console.WriteLine(callExpr.ToString());\n\n                // The following statement first creates an expression tree,\n                // then compiles it, and then executes it.\n                Console.WriteLine(Expression.Lambda&lt;Func&lt;int&gt;&gt;(callExpr).Compile()());\n\n                // This code example produces the following output:\n                //\n                // new SampleClass().AddIntegers(1, 2)\n                // 3\n            }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Call_System_Linq_Expressions_Expression_System_String_System_Type___System_Linq_Expressions_Expression___\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Call_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Call(Expression,String,Type[],Expression[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents a call to a method by calling the appropriate factory method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, string methodName, Type[] typeArguments, System.Linq.Expressions.Expression[] arguments);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>instance</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> whose <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property value will be searched for a specific method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>methodName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>typeArguments</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects that specify the type parameters of the generic method. This argument should be null when methodName specifies a non-generic method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arguments</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> objects that represents the arguments to the method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a>, the <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Object*</span> property equal to <code>instance</code>, <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Method*</span> set to the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents the specified instance method, and <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Arguments*</span> set to the specified arguments.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>instance</code> or <code>methodName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>No method whose name is <code>methodName</code>, whose type parameters match <code>typeArguments</code>, and whose parameter types match <code>arguments</code> is found in <code>instance</code>.Type or its base types.  </p>\n<p> -or-  </p>\n<p> More than one method whose name is <code>methodName</code>, whose type parameters match <code>typeArguments</code>, and whose parameter types match <code>arguments</code> is found in <code>instance</code>.Type or its base types.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> is equal to the return type of the method denoted by <code>methodName</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Call_System_Reflection_MethodInfo_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Call_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Call(MethodInfo,Expression,Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents a call to a static method that takes three arguments.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg0</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> that represents the first argument.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> that represents the second argument.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> that represents the third argument.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Object*</span> and <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is null.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Call_System_Type_System_String_System_Type___System_Linq_Expressions_Expression___\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Call_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Call(Type,String,Type[],Expression[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents a call to a <code>static</code> (<code>Shared</code> in Visual Basic) method by calling the appropriate factory method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.MethodCallExpression Call (Type type, string methodName, Type[] typeArguments, System.Linq.Expressions.Expression[] arguments);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> that specifies the type that contains the specified <code>static</code> (<code>Shared</code> in Visual Basic) method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>methodName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>typeArguments</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects that specify the type parameters of the generic method. This argument should be null when methodName specifies a non-generic method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arguments</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> objects that represent the arguments to the method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a>, the <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Method*</span> property set to the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents the specified <code>static</code> (<code>Shared</code> in Visual Basic) method, and the <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Arguments*</span> property set to the specified arguments.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>type</code> or <code>methodName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>No method whose name is <code>methodName</code>, whose type parameters match <code>typeArguments</code>, and whose parameter types match <code>arguments</code> is found in <code>type</code> or its base types.  </p>\n<p> -or-  </p>\n<p> More than one method whose name is <code>methodName</code>, whose type parameters match <code>typeArguments</code>, and whose parameter types match <code>arguments</code> is found in <code>type</code> or its base types.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> is equal to the return type of the method denoted by <code>methodName</code>. The <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression#System_Linq_Expressions_MethodCallExpression_Object_\" data-linktype=\"relative-path\">Object</a> property is <code>null</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Call_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Call_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Call(Expression,MethodInfo,Expression,Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents a call to a method that takes three arguments.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>instance</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> that specifies the instance for an instance call. (pass null for a static (Shared in Visual Basic) method).</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents the target method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg0</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> that represents the first argument.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> that represents the second argument.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> that represents the third argument.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Object*</span> and <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Call_System_Reflection_MethodInfo_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Call_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Call(MethodInfo,Expression,Expression,Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents a call to a static method that takes four arguments.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg0</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> that represents the first argument.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> that represents the second argument.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> that represents the third argument.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg3</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> that represents the fourth argument.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Object*</span> and <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is null.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Call_System_Reflection_MethodInfo_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Call_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Call(MethodInfo,Expression,Expression,Expression,Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that represents a call to a static method that takes five arguments.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3, System.Linq.Expressions.Expression arg4);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg0</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> that represents the first argument.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> that represents the second argument.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> that represents the third argument.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg3</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> that represents the fourth argument.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg4</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> that represents the fifth argument.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Object*</span> and <span class=\"xref\">stem.Linq.Expressions.MethodCallExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is null.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Catch_System_Linq_Expressions_ParameterExpression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Catch_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Catch(ParameterExpression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.catchblock\" data-linktype=\"relative-path\">CatchBlock</a> representing a catch statement with a reference to the caught <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> object for use in the handler body.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.CatchBlock Catch (System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression body);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>variable</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a> representing a reference to the <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> object caught by this handler.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The body of the catch statement.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.catchblock\" data-linktype=\"relative-path\">CatchBlock</a></div>\r\n                  </div>\r\n                  <p>The created <a class=\"xref\" href=\"system.linq.expressions.catchblock\" data-linktype=\"relative-path\">CatchBlock</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Catch_System_Type_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Catch_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Catch(Type,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.catchblock\" data-linktype=\"relative-path\">CatchBlock</a> representing a catch statement.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.CatchBlock Catch (Type type, System.Linq.Expressions.Expression body);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> of <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> this <a class=\"xref\" href=\"system.linq.expressions.catchblock\" data-linktype=\"relative-path\">CatchBlock</a> will handle.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The body of the catch statement.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.catchblock\" data-linktype=\"relative-path\">CatchBlock</a></div>\r\n                  </div>\r\n                  <p>The created <a class=\"xref\" href=\"system.linq.expressions.catchblock\" data-linktype=\"relative-path\">CatchBlock</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> of <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> to be caught can be specified but no reference to the <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> object will be available for use in the <a class=\"xref\" href=\"system.linq.expressions.catchblock\" data-linktype=\"relative-path\">CatchBlock</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Catch_System_Linq_Expressions_ParameterExpression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Catch_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Catch(ParameterExpression,Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.catchblock\" data-linktype=\"relative-path\">CatchBlock</a> representing a catch statement with an <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> filter and a reference to the caught <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.CatchBlock Catch (System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression filter);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>variable</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a> representing a reference to the <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> object caught by this handler.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The body of the catch statement.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>filter</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The body of the <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> filter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.catchblock\" data-linktype=\"relative-path\">CatchBlock</a></div>\r\n                  </div>\r\n                  <p>The created <a class=\"xref\" href=\"system.linq.expressions.catchblock\" data-linktype=\"relative-path\">CatchBlock</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Catch_System_Type_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Catch_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Catch(Type,Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.catchblock\" data-linktype=\"relative-path\">CatchBlock</a> representing a catch statement with an <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> filter but no reference to the caught <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.CatchBlock Catch (Type type, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression filter);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> of <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> this <a class=\"xref\" href=\"system.linq.expressions.catchblock\" data-linktype=\"relative-path\">CatchBlock</a> will handle.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The body of the catch statement.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>filter</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The body of the <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> filter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.catchblock\" data-linktype=\"relative-path\">CatchBlock</a></div>\r\n                  </div>\r\n                  <p>The created <a class=\"xref\" href=\"system.linq.expressions.catchblock\" data-linktype=\"relative-path\">CatchBlock</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_ClearDebugInfo_System_Linq_Expressions_SymbolDocumentInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_ClearDebugInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ClearDebugInfo(SymbolDocumentInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.debuginfoexpression\" data-linktype=\"relative-path\">DebugInfoExpression</a> for clearing a sequence point.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.DebugInfoExpression ClearDebugInfo (System.Linq.Expressions.SymbolDocumentInfo document);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>document</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.symboldocumentinfo\" data-linktype=\"relative-path\">SymbolDocumentInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.symboldocumentinfo\" data-linktype=\"relative-path\">SymbolDocumentInfo</a> that represents the source file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.debuginfoexpression\" data-linktype=\"relative-path\">DebugInfoExpression</a></div>\r\n                  </div>\r\n                  <p>An instance of <a class=\"xref\" href=\"system.linq.expressions.debuginfoexpression\" data-linktype=\"relative-path\">DebugInfoExpression</a> for clearning a sequence point.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Coalesce_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Coalesce_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Coalesce(Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a coalescing operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression Coalesce (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>right</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property of <code>left</code> does not represent a reference type or a nullable value type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>left</code>.Type and <code>right</code>.Type are not convertible to each other.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> is <code>null</code> and both <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> and <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> are set to <code>false</code>. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is equal to the result type of the coalescing operation. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Conversion_\" data-linktype=\"relative-path\">Conversion</a> property is <code>null</code>.  </p>\n<h4 id=\"result-type\">Result Type</h4>\n<p> The following rules determine the result type:  </p>\n<ul>\n<li><p>If <code>left</code>.Type represents a nullable type and <code>right</code>.Type is implicitly convertible to the corresponding non-nullable type, the result type is the non-nullable equivalent of <code>left</code>.Type.  </p>\n</li>\n<li><p>Otherwise, if <code>right</code>.Type is implicitly convertible to <code>left</code>.Type, the result type is <code>left</code>.Type.  </p>\n</li>\n<li><p>Otherwise, if the non-nullable equivalent of <code>left</code>.Type is implicitly convertible to <code>right</code>.Type, the result type is <code>right</code>.Type.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Coalesce_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_LambdaExpression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Coalesce_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Coalesce(Expression,Expression,LambdaExpression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a coalescing operation, given a conversion function.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression Coalesce (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Linq.Expressions.LambdaExpression conversion);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>conversion</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Conversion*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Conversion*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>right</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>left</code>.Type and <code>right</code>.Type are not convertible to each other.  </p>\n<p> -or-  </p>\n<p> <code>conversion</code> is not <code>null</code> and <code>conversion</code>.Type is a delegate type that does not take exactly one argument.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property of <code>left</code> does not represent a reference type or a nullable value type.  </p>\n<p> -or-  </p>\n<p> The <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property of <code>left</code> represents a type that is not assignable to the parameter type of the delegate type <code>conversion</code>.Type.  </p>\n<p> -or-  </p>\n<p> The <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property of <code>right</code> is not equal to the return type of the delegate type <code>conversion</code>.Type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> is <code>null</code> and both <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> and <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> are set to <code>false</code>.  </p>\n<p> The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> is equal to the result type of the coalescing operation.  </p>\n<p> The following rules determine the result type:  </p>\n<ul>\n<li><p>If <code>left</code>.Type represents a nullable type and <code>right</code>.Type is implicitly convertible to the corresponding non-nullable type, the result type is the non-nullable equivalent of <code>left</code>.Type.  </p>\n</li>\n<li><p>Otherwise, if <code>right</code>.Type is implicitly convertible to <code>left</code>.Type, the result type is <code>left</code>.Type.  </p>\n</li>\n<li><p>Otherwise, if the non-nullable equivalent of <code>left</code>.Type is implicitly convertible to <code>right</code>.Type, the result type is <code>right</code>.Type.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Condition_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Condition_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Condition(Expression,Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.conditionalexpression\" data-linktype=\"relative-path\">ConditionalExpression</a> that represents a conditional statement.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.ConditionalExpression Condition (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>test</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.ConditionalExpression.Test*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ifTrue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.ConditionalExpression.IfTrue*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ifFalse</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.ConditionalExpression.IfFalse*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.conditionalexpression\" data-linktype=\"relative-path\">ConditionalExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.conditionalexpression\" data-linktype=\"relative-path\">ConditionalExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.ConditionalExpression.Test*</span>, <span class=\"xref\">stem.Linq.Expressions.ConditionalExpression.IfTrue*</span>, and <span class=\"xref\">stem.Linq.Expressions.ConditionalExpression.IfFalse*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>test</code> or <code>ifTrue</code> or <code>ifFalse</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>test</code>.Type is not <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>.  </p>\n<p> -or-  </p>\n<p> <code>ifTrue</code>.Type is not equal to <code>ifFalse</code>.Type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.conditionalexpression\" data-linktype=\"relative-path\">ConditionalExpression</a> is equal to the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of <code>ifTrue</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create an expression that represents a conditional statement. If the first argument evaluates to <code>true</code>, the second argument is executed; otherwise, the third argument is executed.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#3\">        &#39; Add the following directive to your file:\n        &#39; Imports System.Linq.Expressions  \n\n        Dim num As Integer = 100\n\n        &#39; This expression represents a conditional operation; \n        &#39; it will evaluate the test (first expression) and\n        &#39; execute the ifTrue block (second argument) if the test evaluates to true, \n        &#39; or the ifFalse block (third argument) if the test evaluates to false.\n        Dim conditionExpr As Expression = Expression.Condition(\n                                    Expression.Constant(num &gt; 10),\n                                    Expression.Constant(&quot;n is greater than 10&quot;),\n                                    Expression.Constant(&quot;n is smaller than 10&quot;)\n                                )\n\n        &#39; Print the expression.\n        Console.WriteLine(conditionExpr.ToString())\n\n        &#39; The following statement first creates an expression tree,\n        &#39; then compiles it, and then executes it.       \n        Console.WriteLine(\n            Expression.Lambda(Of Func(Of String))(conditionExpr).Compile()())\n\n        &#39; This code example produces the following output:\n        &#39;\n        &#39; IIF(&quot;True&quot;, &quot;num is greater than 10&quot;, &quot;num is smaller than 10&quot;)\n        &#39; num is greater than 10\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#3\">            // Add the following directive to your file:\n            // using System.Linq.Expressions; \n\n            int num = 100;\n\n            // This expression represents a conditional operation. \n            // It evaluates the test (first expression) and\n            // executes the iftrue block (second argument) if the test evaluates to true, \n            // or the iffalse block (third argument) if the test evaluates to false.\n            Expression conditionExpr = Expression.Condition(\n                                       Expression.Constant(num &gt; 10),\n                                       Expression.Constant(&quot;num is greater than 10&quot;),\n                                       Expression.Constant(&quot;num is smaller than 10&quot;)\n                                     );\n\n            // Print out the expression.\n            Console.WriteLine(conditionExpr.ToString());\n\n            // The following statement first creates an expression tree,\n            // then compiles it, and then executes it.       \n            Console.WriteLine(\n                Expression.Lambda&lt;Func&lt;string&gt;&gt;(conditionExpr).Compile()());\n\n            // This code example produces the following output:\n            //\n            // IIF(&quot;True&quot;, &quot;num is greater than 10&quot;, &quot;num is smaller than 10&quot;)\n            // num is greater than 10\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Condition_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Type_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Condition_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Condition(Expression,Expression,Expression,Type)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.conditionalexpression\" data-linktype=\"relative-path\">ConditionalExpression</a> that represents a conditional statement.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.ConditionalExpression Condition (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse, Type type);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>test</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.ConditionalExpression.Test*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ifTrue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.ConditionalExpression.IfTrue*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ifFalse</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.ConditionalExpression.IfFalse*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> to set the <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.conditionalexpression\" data-linktype=\"relative-path\">ConditionalExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.conditionalexpression\" data-linktype=\"relative-path\">ConditionalExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.ConditionalExpression.Test*</span>, <span class=\"xref\">stem.Linq.Expressions.ConditionalExpression.IfTrue*</span>, and <span class=\"xref\">stem.Linq.Expressions.ConditionalExpression.IfFalse*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method allows explicitly unifying the result type of the conditional expression in cases where the types of <code>ifTrue</code> and <code>ifFalse</code> expressions are not equal. Types of both <code>ifTrue</code> and <code>ifFalse</code> must be implicitly reference assignable to the result type. The <code>type</code> is allowed to be <a class=\"xref\" href=\"system.void\" data-linktype=\"relative-path\">Void</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Constant_System_Object_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Constant_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Constant(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.constantexpression\" data-linktype=\"relative-path\">ConstantExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.ConstantExpression.Value*</span> property set to the specified value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.ConstantExpression Constant (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to set the <span class=\"xref\">stem.Linq.Expressions.ConstantExpression.Value*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.constantexpression\" data-linktype=\"relative-path\">ConstantExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.constantexpression\" data-linktype=\"relative-path\">ConstantExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.ConstantExpression.Value*</span> property set to the specified value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.constantexpression\" data-linktype=\"relative-path\">ConstantExpression</a> is equal to the type of <code>value</code>. If <code>value</code> is <code>null</code>, <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> is equal to <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>.  </p>\n<p> To represent <code>null</code>, you can also use the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Constant_System_Object_System_Type_\" data-linktype=\"relative-path\">Constant(Object,Type)</a> method, with which you can explicitly specify the type.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create an expression that represents a constant value.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#4\">        &#39; Add the following directive to your file:\n        &#39; Imports System.Linq.Expressions \n\n        &#39; This expression represents a constant value.\n        Dim constantExpr As Expression = Expression.Constant(5.5)\n\n        &#39; Print the expression.\n        Console.WriteLine(constantExpr.ToString())\n\n        &#39; You can also use variables.\n        Dim num As Double = 3.5\n        constantExpr = Expression.Constant(num)\n        Console.WriteLine(constantExpr.ToString())\n\n        &#39; This code example produces the following output:\n        &#39;\n        &#39; 5.5\n        &#39; 3.5\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#4\">            // Add the following directive to your file:\n            // using System.Linq.Expressions;  \n\n            // This expression represents a Constant value.\n            Expression constantExpr = Expression.Constant(5.5);\n\n            // Print out the expression.\n            Console.WriteLine(constantExpr.ToString());\n\n            // You can also use variables.\n            double num = 3.5;\n            constantExpr = Expression.Constant(num);\n            Console.WriteLine(constantExpr.ToString());\n\n            // This code example produces the following output:\n            //\n            // 5.5\n            // 3.5\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Constant_System_Object_System_Type_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Constant_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Constant(Object,Type)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.constantexpression\" data-linktype=\"relative-path\">ConstantExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.ConstantExpression.Value*</span> and <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> properties set to the specified values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.ConstantExpression Constant (object value, Type type);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to set the <span class=\"xref\">stem.Linq.Expressions.ConstantExpression.Value*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> to set the <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.constantexpression\" data-linktype=\"relative-path\">ConstantExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.constantexpression\" data-linktype=\"relative-path\">ConstantExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.ConstantExpression.Value*</span> and <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>type</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is not <code>null</code> and <code>type</code> is not assignable from the dynamic type of <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method can be useful for representing values of nullable types.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create an expression that represents a constant of the nullable type and set its value to <code>null</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#22\">        &#39; Add the following directive to your file:\n        &#39; Imports System.Linq.Expressions   \n\n        &#39; This expression represents a constant value, \n        &#39; for which you can explicitly specify the type. \n        &#39; This can be used, for example, for defining constants of a nullable type.\n        Dim constantExpr As Expression = Expression.Constant(\n                                    Nothing,\n                                    GetType(Double?)\n                                )\n\n        &#39; Print the expression.\n        Console.WriteLine(constantExpr.ToString())\n\n        &#39; This code example produces the following output:\n        &#39;\n        &#39; null\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#22\">            // Add the following directive to your file:\n            // using System.Linq.Expressions;  \n\n            // This expression represents a constant value, \n            // for which you can explicitly specify the type. \n            // This can be used, for example, for defining constants of a nullable type.\n            Expression constantExpr = Expression.Constant(\n                                        null,\n                                        typeof(double?)\n                                    );\n\n            // Print out the expression.\n            Console.WriteLine(constantExpr.ToString());\n\n            // This code example produces the following output:\n            //\n            // null\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Continue_System_Linq_Expressions_LabelTarget_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Continue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Continue(LabelTarget)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> representing a continue statement.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.GotoExpression Continue (System.Linq.Expressions.LabelTarget target);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a> that the <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> will jump to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> with <span class=\"xref\">stem.Linq.Expressions.GotoExpression.Kind*</span> equal to Continue, the <span class=\"xref\">stem.Linq.Expressions.GotoExpression.Target*</span> property set to <code>target</code>, and a null value to be passed to the target label upon jumping.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to create a loop expression that uses the Continue method.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#46\">        &#39; Add the following directive to your file:\n        &#39; Imports System.Linq.Expressions  \n\n        &#39; A label that is used by a break statement and a loop. \n        Dim breakLabel As LabelTarget = Expression.Label()\n\n        &#39; A label that is used by the Continue statement and the loop it refers to.\n        Dim continueLabel As LabelTarget = Expression.Label()\n\n        &#39; This expression represents a Continue statement.\n        Dim continueExpr As Expression = Expression.Continue(continueLabel)\n\n        &#39; A variable that triggers the exit from the loop.\n        Dim count As ParameterExpression = Expression.Parameter(GetType(Integer))\n\n        &#39; A loop statement.\n        Dim loopExpr As Expression = Expression.Loop(\n               Expression.Block(\n                   Expression.IfThen(\n                       Expression.GreaterThan(count, Expression.Constant(3)),\n                       Expression.Break(breakLabel)\n                   ),\n                   Expression.PreIncrementAssign(count),\n                   Expression.Call(\n                               Nothing,\n                               GetType(Console).GetMethod(&quot;WriteLine&quot;, New Type() {GetType(String)}),\n                               Expression.Constant(&quot;Loop&quot;)\n                           ),\n                   continueExpr,\n                   Expression.PreDecrementAssign(count)\n               ),\n               breakLabel,\n               continueLabel\n           )\n\n        &#39; The following statement first creates an expression tree,\n        &#39; then compiles it, and then runs it.\n        &#39; Without the Continue statement, the loop would go on forever.\n        Expression.Lambda(Of Action(Of Integer))(loopExpr, count).Compile()(1)\n\n        &#39; This code example produces the following output:\n        &#39;\n        &#39; Loop\n        &#39; Loop\n        &#39; Loop\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#46\">            // Add the following directive to your file:\n            // using System.Linq.Expressions;  \n\n            // A label that is used by a break statement and a loop. \n            LabelTarget breakLabel = Expression.Label();\n\n            // A label that is used by the Continue statement and the loop it refers to.\n            LabelTarget continueLabel = Expression.Label();\n\n            // This expression represents a Continue statement.\n            Expression continueExpr = Expression.Continue(continueLabel);\n\n            // A variable that triggers the exit from the loop.\n            ParameterExpression count = Expression.Parameter(typeof(int));\n\n            // A loop statement.\n            Expression loopExpr = Expression.Loop(\n                Expression.Block(\n                    Expression.IfThen(\n                        Expression.GreaterThan(count, Expression.Constant(3)),\n                        Expression.Break(breakLabel)\n                    ),\n                    Expression.PreIncrementAssign(count),\n                    Expression.Call(\n                                null,\n                                typeof(Console).GetMethod(&quot;WriteLine&quot;, new Type[] { typeof(String) }),\n                                Expression.Constant(&quot;Loop&quot;)\n                            ),\n                    continueExpr,\n                    Expression.PreDecrementAssign(count)\n                ),\n                breakLabel,\n                continueLabel\n            );\n\n            // The following statement first creates an expression tree,\n            // then compiles it, and then runs it.\n            // Without the Continue statement, the loop would go on forever.\n            Expression.Lambda&lt;Action&lt;int&gt;&gt;(loopExpr, count).Compile()(1);\n\n            // This code example produces the following output:\n            //\n            // Loop\n            // Loop\n            // Loop\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Continue_System_Linq_Expressions_LabelTarget_System_Type_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Continue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Continue(LabelTarget,Type)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> representing a continue statement with the specified type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.GotoExpression Continue (System.Linq.Expressions.LabelTarget target, Type type);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a> that the <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> will jump to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> to set the <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> with <span class=\"xref\">stem.Linq.Expressions.GotoExpression.Kind*</span> equal to Continue, the <span class=\"xref\">stem.Linq.Expressions.GotoExpression.Target*</span> property set to <code>target</code>, the <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property set to <code>type</code>, and a null value to be passed to the target label upon jumping.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Convert_System_Linq_Expressions_Expression_System_Type_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Convert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Convert(Expression,Type)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents a type conversion operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.UnaryExpression Convert (System.Linq.Expressions.Expression expression, Type type);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.UnaryExpression.Operand*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> to set the <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.UnaryExpression.Operand*</span> and <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>expression</code> or <code>type</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>No conversion operator is defined between <code>expression</code>.Type and <code>type</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.unaryexpression#System_Linq_Expressions_UnaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> is set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.unaryexpression#System_Linq_Expressions_UnaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> property is <code>false</code>. If the node is lifted, <a class=\"xref\" href=\"system.linq.expressions.unaryexpression#System_Linq_Expressions_UnaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> is <code>true</code>. Otherwise, it is <code>false</code>.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the implementing method for the operation:  </p>\n<ul>\n<li><p>If either <code>expression</code>.Type or <code>type</code> is a user-defined type that defines an implicit or explicit conversion operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that operator is the implementing method.  </p>\n</li>\n<li><p>Otherwise:  </p>\n<ul>\n<li><p>If both <code>expression</code>.Type and <code>type</code> represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is <code>null</code>.  </p>\n</li>\n<li><p>If either <code>expression</code>.Type or <code>type</code> is a reference type and an explicit boxing, unboxing, or reference conversion exists from <code>expression</code>.Type to <code>type</code>, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"lifted-versus-non-lifted\">Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>expression</code>.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to <code>type</code>, the node is not lifted.  </p>\n</li>\n<li><p>If one or both of <code>expression</code>.Type or <code>type</code> is a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.  </p>\n<p>If the implementing method is <code>null</code>:  </p>\n</li>\n<li><p>If both <code>expression</code>.Type and <code>type</code> are non-nullable, the node is not lifted.  </p>\n</li>\n<li><p>Otherwise the node is lifted.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create an expression that represents a type convertion operation.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#23\">        &#39; Add the following directive to your file:\n        &#39; Imports System.Linq.Expressions \n\n        &#39; This expression represents a type convertion operation.        \n        Dim convertExpr As Expression = Expression.Convert(\n                                    Expression.Constant(5.5),\n                                    GetType(Int16)\n                                )\n\n        &#39; Print the expression.\n        Console.WriteLine(convertExpr.ToString())\n\n        &#39; The following statement first creates an expression tree,\n        &#39; then compiles it, and then executes it.\n        Console.WriteLine(Expression.Lambda(Of Func(Of Int16))(convertExpr).Compile()())\n\n        &#39; This code example produces the following output:\n        &#39;\n        &#39; Convert(5.5)\n        &#39; 5\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#23\">            // Add the following directive to your file:\n            // using System.Linq.Expressions;  \n\n            // This expression represents a type convertion operation. \n            Expression convertExpr = Expression.Convert(\n                                        Expression.Constant(5.5),\n                                        typeof(Int16)\n                                    );\n\n            // Print out the expression.\n            Console.WriteLine(convertExpr.ToString());\n\n            // The following statement first creates an expression tree,\n            // then compiles it, and then executes it.\n            Console.WriteLine(Expression.Lambda&lt;Func&lt;Int16&gt;&gt;(convertExpr).Compile()());\n\n            // This code example produces the following output:\n            //\n            // Convert(5.5)\n            // 5\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Convert_System_Linq_Expressions_Expression_System_Type_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Convert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Convert(Expression,Type,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents a conversion operation for which the implementing method is specified.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.UnaryExpression Convert (System.Linq.Expressions.Expression expression, Type type, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.UnaryExpression.Operand*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> to set the <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.UnaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.UnaryExpression.Operand*</span>, <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span>, and <span class=\"xref\">stem.Linq.Expressions.UnaryExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>expression</code> or <code>type</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is not <code>null</code> and the method it represents returns <code>void</code>, is not <code>static</code> (<code>Shared</code> in Visual Basic), or does not take exactly one argument.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>No conversion operator is defined between <code>expression</code>.Type and <code>type</code>.  </p>\n<p> -or-  </p>\n<p> <code>expression</code>.Type is not assignable to the argument type of the method represented by <code>method</code>.  </p>\n<p> -or-  </p>\n<p> The return type of the method represented by <code>method</code> is not assignable to <code>type</code>.  </p>\n<p> -or-  </p>\n<p> <code>expression</code>.Type or <code>type</code> is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by <code>method</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.ambiguousmatchexception\" data-linktype=\"relative-path\">AmbiguousMatchException</a></div>\r\n                  </div>\r\n                  <p>More than one method that matches the <code>method</code> description was found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.unaryexpression#System_Linq_Expressions_UnaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> is set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.unaryexpression#System_Linq_Expressions_UnaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> property is <code>false</code>. If the node is lifted, <a class=\"xref\" href=\"system.linq.expressions.unaryexpression#System_Linq_Expressions_UnaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> is <code>true</code>. Otherwise, it is <code>false</code>.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the implementing method for the operation:  </p>\n<ul>\n<li><p>If method is not <code>null</code>, it is the implementing method. It must represent a non-void, <code>static</code> (<code>Shared</code> in Visual Basic) method that takes one argument.  </p>\n</li>\n<li><p>Otherwise, if either <code>expression</code>.Type or <code>type</code> is a user-defined type that defines an implicit or explicit conversion operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that operator is the implementing method.  </p>\n</li>\n<li><p>Otherwise:  </p>\n<ul>\n<li><p>If both <code>expression</code>.Type and <code>type</code> represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is <code>null</code>.  </p>\n</li>\n<li><p>If either <code>expression</code>.Type or <code>type</code> is a reference type and an explicit boxing, unboxing, or reference conversion exists from <code>expression</code>.Type to <code>type</code>, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"lifted-versus-non-lifted\">Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>expression</code>.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to <code>type</code>, the node is not lifted.  </p>\n</li>\n<li><p>If either or both of <code>expression</code>.Type or <code>type</code> are a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.  </p>\n<p>If the implementing method is <code>null</code>:  </p>\n</li>\n<li><p>If both <code>expression</code>.Type and <code>type</code> are non-nullable, the node is not lifted.  </p>\n</li>\n<li><p>Otherwise the node is lifted.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_ConvertChecked_System_Linq_Expressions_Expression_System_Type_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_ConvertChecked_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ConvertChecked(Expression,Type)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents a conversion operation that throws an exception if the target type is overflowed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.UnaryExpression ConvertChecked (System.Linq.Expressions.Expression expression, Type type);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.UnaryExpression.Operand*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> to set the <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.UnaryExpression.Operand*</span> and <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>expression</code> or <code>type</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>No conversion operator is defined between <code>expression</code>.Type and <code>type</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.unaryexpression#System_Linq_Expressions_UnaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> is set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.unaryexpression#System_Linq_Expressions_UnaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> property is <code>false</code>. If the node is lifted, <a class=\"xref\" href=\"system.linq.expressions.unaryexpression#System_Linq_Expressions_UnaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> is <code>true</code>. Otherwise, it is <code>false</code>.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the implementing method for the operation:  </p>\n<ul>\n<li><p>If either <code>expression</code>.Type or <code>type</code> is a user-defined type that defines an implicit or explicit conversion operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that operator is the implementing method.  </p>\n</li>\n<li><p>Otherwise:  </p>\n<ul>\n<li><p>If both <code>expression</code>.Type and <code>type</code> represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is <code>null</code>.  </p>\n</li>\n<li><p>If either <code>expression</code>.Type or <code>type</code> is a reference type and an explicit boxing, unboxing, or reference conversion exists from <code>expression</code>.Type to <code>type</code>, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"lifted-versus-non-lifted\">Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>expression</code>.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to <code>type</code>, the node is not lifted.  </p>\n</li>\n<li><p>If either or both of <code>expression</code>.Type or <code>type</code> are a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.  </p>\n<p>If the implementing method is <code>null</code>:  </p>\n</li>\n<li><p>If both <code>expression</code>.Type and <code>type</code> are non-nullable, the node is not lifted.  </p>\n</li>\n<li><p>Otherwise the node is lifted.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_ConvertChecked_System_Linq_Expressions_Expression_System_Type_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_ConvertChecked_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ConvertChecked(Expression,Type,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents a conversion operation that throws an exception if the target type is overflowed and for which the implementing method is specified.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.UnaryExpression ConvertChecked (System.Linq.Expressions.Expression expression, Type type, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.UnaryExpression.Operand*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> to set the <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.UnaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.UnaryExpression.Operand*</span>, <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span>, and <span class=\"xref\">stem.Linq.Expressions.UnaryExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>expression</code> or <code>type</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is not <code>null</code> and the method it represents returns <code>void</code>, is not <code>static</code> (<code>Shared</code> in Visual Basic), or does not take exactly one argument.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>No conversion operator is defined between <code>expression</code>.Type and <code>type</code>.  </p>\n<p> -or-  </p>\n<p> <code>expression</code>.Type is not assignable to the argument type of the method represented by <code>method</code>.  </p>\n<p> -or-  </p>\n<p> The return type of the method represented by <code>method</code> is not assignable to <code>type</code>.  </p>\n<p> -or-  </p>\n<p> <code>expression</code>.Type or <code>type</code> is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by <code>method</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.ambiguousmatchexception\" data-linktype=\"relative-path\">AmbiguousMatchException</a></div>\r\n                  </div>\r\n                  <p>More than one method that matches the <code>method</code> description was found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.unaryexpression#System_Linq_Expressions_UnaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> is set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.unaryexpression#System_Linq_Expressions_UnaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> property is <code>false</code>. If the node is lifted, <a class=\"xref\" href=\"system.linq.expressions.unaryexpression#System_Linq_Expressions_UnaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> is <code>true</code>. Otherwise, it is <code>false</code>.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the implementing method for the operation:  </p>\n<ul>\n<li><p>If method is not <code>null</code>, it is the implementing method. It must represent a non-void, <code>static</code> (<code>Shared</code> in Visual Basic) method that takes one argument.  </p>\n</li>\n<li><p>Otherwise, if either <code>expression</code>.Type or <code>type</code> is a user-defined type that defines an implicit or explicit conversion operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that operator is the implementing method.  </p>\n</li>\n<li><p>Otherwise:  </p>\n<ul>\n<li><p>If both <code>expression</code>.Type and <code>type</code> represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is <code>null</code>.  </p>\n</li>\n<li><p>If either <code>expression</code>.Type or <code>type</code> is a reference type and an explicit boxing, unboxing, or reference conversion exists from <code>expression</code>.Type to <code>type</code>, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"lifted-versus-non-lifted\">Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>expression</code>.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to <code>type</code>, the node is not lifted.  </p>\n</li>\n<li><p>If either or both of <code>expression</code>.Type or <code>type</code> are a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.  </p>\n<p>If the implementing method is <code>null</code>:  </p>\n</li>\n<li><p>If both <code>expression</code>.Type and <code>type</code> are non-nullable, the node is not lifted.  </p>\n</li>\n<li><p>Otherwise the node is lifted.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_DebugInfo_System_Linq_Expressions_SymbolDocumentInfo_System_Int32_System_Int32_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_DebugInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DebugInfo(SymbolDocumentInfo,Int32,Int32,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.debuginfoexpression\" data-linktype=\"relative-path\">DebugInfoExpression</a> with the specified span.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.DebugInfoExpression DebugInfo (System.Linq.Expressions.SymbolDocumentInfo document, int startLine, int startColumn, int endLine, int endColumn);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>document</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.symboldocumentinfo\" data-linktype=\"relative-path\">SymbolDocumentInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.symboldocumentinfo\" data-linktype=\"relative-path\">SymbolDocumentInfo</a> that represents the source file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startLine</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The start line of this <a class=\"xref\" href=\"system.linq.expressions.debuginfoexpression\" data-linktype=\"relative-path\">DebugInfoExpression</a>. Must be greater than 0.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startColumn</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The start column of this <a class=\"xref\" href=\"system.linq.expressions.debuginfoexpression\" data-linktype=\"relative-path\">DebugInfoExpression</a>. Must be greater than 0.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>endLine</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The end line of this <a class=\"xref\" href=\"system.linq.expressions.debuginfoexpression\" data-linktype=\"relative-path\">DebugInfoExpression</a>. Must be greater or equal than the start line.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>endColumn</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The end column of this <a class=\"xref\" href=\"system.linq.expressions.debuginfoexpression\" data-linktype=\"relative-path\">DebugInfoExpression</a>. If the end line is the same as the start line, it must be greater or equal than the start column. In any case, must be greater than 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.debuginfoexpression\" data-linktype=\"relative-path\">DebugInfoExpression</a></div>\r\n                  </div>\r\n                  <p>An instance of <a class=\"xref\" href=\"system.linq.expressions.debuginfoexpression\" data-linktype=\"relative-path\">DebugInfoExpression</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Decrement_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Decrement_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Decrement(Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents the decrementing of the expression by 1.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.UnaryExpression Decrement (System.Linq.Expressions.Expression expression);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to decrement.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents the decremented expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This expression is functional and does not change the value of the object passed to it.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create an expression that substracts 1 from a given value.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#5\">        &#39; Add the following directive to your file:\n        &#39; Imports System.Linq.Expressions   \n\n        Dim num As Double = 5.5\n\n        &#39; This expression represents a decrement operation \n        &#39; that subtracts 1 from a value. \n        Dim decrementExpr As Expression = Expression.Decrement(\n                                    Expression.Constant(num)\n                                )\n\n        &#39; Print the expression.\n        Console.WriteLine(decrementExpr.ToString())\n\n        &#39; The following statement first creates an expression tree,\n        &#39; then compiles it, and then executes it.\n        Console.WriteLine(\n            Expression.Lambda(Of Func(Of Double))(decrementExpr).Compile()())\n\n        &#39; The value of the variable did not change,\n        &#39; because the expression is functional.\n        Console.WriteLine(&quot;object: &quot; &amp; num)\n\n        &#39; This code example produces the following output:\n        &#39;\n        &#39; Decrement(5.5)\n        &#39; 4.5\n        &#39; object: 5.5\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#5\">            // Add the following directive to your file:\n            // using System.Linq.Expressions;  \n\n            double num = 5.5;\n\n            // This expression represents a decrement operation \n            // that subtracts 1 from a value. \n            Expression decrementExpr = Expression.Decrement(\n                                        Expression.Constant(num)\n                                    );\n\n            // Print expression.\n            Console.WriteLine(decrementExpr.ToString());\n\n            // The following statement first creates an expression tree,\n            // then compiles it, and then executes it.\n            Console.WriteLine(\n                Expression.Lambda&lt;Func&lt;double&gt;&gt;(decrementExpr).Compile()());\n\n            // The value of the variable did not change,\n            // because the expression is functional.\n            Console.WriteLine(&quot;object: &quot; + num);\n\n            // This code example produces the following output:\n            //\n            // Decrement(5.5)\n            // 4.5\n            // object: 5.5\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Decrement_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Decrement_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Decrement(Expression,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents the decrementing of the expression by 1.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.UnaryExpression Decrement (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to decrement.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents the implementing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents the decremented expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This expression is functional and does not change the value of the object passed to it.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Default_System_Type_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Default_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Default(Type)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.defaultexpression\" data-linktype=\"relative-path\">DefaultExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property set to the specified type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.DefaultExpression Default (Type type);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> to set the <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.defaultexpression\" data-linktype=\"relative-path\">DefaultExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.defaultexpression\" data-linktype=\"relative-path\">DefaultExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property set to the specified type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create an expression that represents a default vaule for a given type.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#6\">        &#39; Add the following directive to your file:\n        &#39; Imports System.Linq.Expressions  \n\n        &#39; This expression represents the default value of a type\n        &#39; (0 for integer, null for a string, and so on).\n        Dim defaultExpr As Expression = Expression.Default(\n                                                GetType(Byte)\n                                            )\n\n        &#39; Print the expression.\n        Console.WriteLine(defaultExpr.ToString())\n\n        &#39; The following statement first creates an expression tree,\n        &#39; then compiles it, and then executes it.\n        Console.WriteLine(\n            Expression.Lambda(Of Func(Of Byte))(defaultExpr).Compile()())\n\n        &#39; This code example produces the following output:\n        &#39;\n        &#39; default(Byte)\n        &#39; 0\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#6\">            // Add the following directive to your file:\n            // using System.Linq.Expressions;  \n\n            // This expression represents the default value of a type\n            // (0 for integer, null for a string, etc.)\n            Expression defaultExpr = Expression.Default(\n                                        typeof(byte)\n                                    );\n\n            // Print out the expression.\n            Console.WriteLine(defaultExpr.ToString());\n\n            // The following statement first creates an expression tree,\n            // then compiles it, and then executes it.\n            Console.WriteLine(\n                Expression.Lambda&lt;Func&lt;byte&gt;&gt;(defaultExpr).Compile()());\n\n            // This code example produces the following output:\n            //\n            // default(Byte)\n            // 0\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Divide_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Divide_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Divide(Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an arithmetic division operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression Divide (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>right</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The division operator is not defined for <code>left</code>.Type and <code>right</code>.Type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The resulting <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> has the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> and <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> properties are both <code>true</code>. Otherwise, they are <code>false</code>. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Conversion_\" data-linktype=\"relative-path\">Conversion</a> property is <code>null</code>.  </p>\n<p> The following information describes the implementing method, the node type, and whether a node is lifted.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the implementing method for the operation:  </p>\n<ul>\n<li><p>If the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of either <code>left</code> or <code>right</code> represents a user-defined type that overloads the division operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that method is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if <code>left</code>.Type and <code>right</code>.Type are numeric types, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  </p>\n<ul>\n<li><p><code>left</code>.Type and <code>right</code>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is a non-nullable value type.  </p>\n</li>\n</ul>\n<p>If the implementing method is <code>null</code>:  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined division operator.  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined division operator.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create an expression that divides divides its first argument by its second argument.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#7\">        &#39; Add the following directive to your file:\n        &#39; Imports System.Linq.Expressions   \n\n        &#39; This expression divides its first argument by its second argument.\n        &#39; Both arguments must be of the same type.\n        Dim divideExpr As Expression = Expression.Divide(\n            Expression.Constant(10.0),\n            Expression.Constant(4.0)\n        )\n\n        &#39; Print the expression.\n        Console.WriteLine(divideExpr.ToString())\n\n        &#39; The following statement first creates an expression tree,\n        &#39; then compiles it, and then executes it.\n        Console.WriteLine(\n            Expression.Lambda(Of Func(Of Double))(divideExpr).Compile()())\n\n        &#39; This code example produces the following output:\n        &#39;\n        &#39; (10/4)\n        &#39; 2.5\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#7\">            // Add the following directive to your file:\n            // using System.Linq.Expressions;  \n\n            // This expression divides its first argument by its second argument.\n            // Both arguments must be of the same type.\n            Expression divideExpr = Expression.Divide(\n                Expression.Constant(10.0),\n                Expression.Constant(4.0)\n            );\n\n            // Print out the expression.\n            Console.WriteLine(divideExpr.ToString());\n\n            // The following statement first creates an expression tree,\n            // then compiles it, and then executes it.\n            Console.WriteLine(\n                Expression.Lambda&lt;Func&lt;double&gt;&gt;(divideExpr).Compile()());\n\n            // This code example produces the following output:\n            //\n            // (10/4)\n            // 2.5\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Divide_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Divide_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Divide(Expression,Expression,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an arithmetic division operation. The implementing method can be specified.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression Divide (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span>, and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>right</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is not <code>null</code> and the method it represents returns <code>void</code>, is not <code>static</code> (<code>Shared</code> in Visual Basic), or does not take exactly two arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is <code>null</code> and the division operator is not defined for <code>left</code>.Type and <code>right</code>.Type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The resulting <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> has the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> and <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> properties are both <code>true</code>. Otherwise, they are <code>false</code>. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Conversion_\" data-linktype=\"relative-path\">Conversion</a> property is <code>null</code>.  </p>\n<p> The following information describes the implementing method, the node type, and whether a node is lifted.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the implementing method for the operation:  </p>\n<ul>\n<li><p>If <code>method</code> is not <code>null</code> and it represents a non-void, <code>static</code> (<code>Shared</code> in Visual Basic) method that takes two arguments, it is the implementing method for the node.  </p>\n</li>\n<li><p>Otherwise, if the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of either <code>left</code> or <code>right</code> represents a user-defined type that overloads the division operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that method is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if <code>left</code>.Type and <code>right</code>.Type are numeric types, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  </p>\n<ul>\n<li><p><code>left</code>.Type and <code>right</code>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is a non-nullable value type.  </p>\n</li>\n</ul>\n<p>If the implementing method is <code>null</code>:  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined division operator.  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined division operator.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_DivideAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_DivideAssign_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DivideAssign(Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a division assignment operation that does not have overflow checking.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression DivideAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_DivideAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_DivideAssign_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DivideAssign(Expression,Expression,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a division assignment operation that does not have overflow checking.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression DivideAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span>, and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_DivideAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_System_Linq_Expressions_LambdaExpression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_DivideAssign_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DivideAssign(Expression,Expression,MethodInfo,LambdaExpression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a division assignment operation that does not have overflow checking.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression DivideAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>conversion</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Conversion*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span>, and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Conversion*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Dynamic_System_Runtime_CompilerServices_CallSiteBinder_System_Type_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression__\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Dynamic_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dynamic(CallSiteBinder,Type,IEnumerable&lt;Expression&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.dynamicexpression\" data-linktype=\"relative-path\">DynamicExpression</a> that represents a dynamic operation bound by the provided <a class=\"xref\" href=\"system.runtime.compilerservices.callsitebinder\" data-linktype=\"relative-path\">CallSiteBinder</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.compilerservices.callsitebinder\" data-linktype=\"relative-path\">CallSiteBinder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The runtime binder for the dynamic operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>returnType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The result type of the dynamic expression.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arguments</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The arguments to the dynamic operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.dynamicexpression\" data-linktype=\"relative-path\">DynamicExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.dynamicexpression\" data-linktype=\"relative-path\">DynamicExpression</a> that has <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and has the <span class=\"xref\">stem.Linq.Expressions.DynamicExpression.Binder*</span> and <span class=\"xref\">stem.Linq.Expressions.DynamicExpression.Arguments*</span> set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.dynamicexpression#System_Linq_Expressions_DynamicExpression_DelegateType_\" data-linktype=\"relative-path\">DelegateType</a> property of the result will be inferred from the types of the arguments and the specified return type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Dynamic_System_Runtime_CompilerServices_CallSiteBinder_System_Type_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Dynamic_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dynamic(CallSiteBinder,Type,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.dynamicexpression\" data-linktype=\"relative-path\">DynamicExpression</a> that represents a dynamic operation bound by the provided <a class=\"xref\" href=\"system.runtime.compilerservices.callsitebinder\" data-linktype=\"relative-path\">CallSiteBinder</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.compilerservices.callsitebinder\" data-linktype=\"relative-path\">CallSiteBinder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The runtime binder for the dynamic operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>returnType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The result type of the dynamic expression.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg0</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first argument to the dynamic operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.dynamicexpression\" data-linktype=\"relative-path\">DynamicExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.dynamicexpression\" data-linktype=\"relative-path\">DynamicExpression</a> that has <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and has the <span class=\"xref\">stem.Linq.Expressions.DynamicExpression.Binder*</span> and <span class=\"xref\">stem.Linq.Expressions.DynamicExpression.Arguments*</span> set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.dynamicexpression#System_Linq_Expressions_DynamicExpression_DelegateType_\" data-linktype=\"relative-path\">DelegateType</a> property of the result will be inferred from the types of the arguments and the specified return type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Dynamic_System_Runtime_CompilerServices_CallSiteBinder_System_Type_System_Linq_Expressions_Expression___\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Dynamic_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dynamic(CallSiteBinder,Type,Expression[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.dynamicexpression\" data-linktype=\"relative-path\">DynamicExpression</a> that represents a dynamic operation bound by the provided <a class=\"xref\" href=\"system.runtime.compilerservices.callsitebinder\" data-linktype=\"relative-path\">CallSiteBinder</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression[] arguments);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.compilerservices.callsitebinder\" data-linktype=\"relative-path\">CallSiteBinder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The runtime binder for the dynamic operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>returnType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The result type of the dynamic expression.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arguments</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The arguments to the dynamic operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.dynamicexpression\" data-linktype=\"relative-path\">DynamicExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.dynamicexpression\" data-linktype=\"relative-path\">DynamicExpression</a> that has <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and has the <span class=\"xref\">stem.Linq.Expressions.DynamicExpression.Binder*</span> and <span class=\"xref\">stem.Linq.Expressions.DynamicExpression.Arguments*</span> set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.dynamicexpression#System_Linq_Expressions_DynamicExpression_DelegateType_\" data-linktype=\"relative-path\">DelegateType</a> property of the result will be inferred from the types of the arguments and the specified return type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Dynamic_System_Runtime_CompilerServices_CallSiteBinder_System_Type_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Dynamic_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dynamic(CallSiteBinder,Type,Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.dynamicexpression\" data-linktype=\"relative-path\">DynamicExpression</a> that represents a dynamic operation bound by the provided <a class=\"xref\" href=\"system.runtime.compilerservices.callsitebinder\" data-linktype=\"relative-path\">CallSiteBinder</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.compilerservices.callsitebinder\" data-linktype=\"relative-path\">CallSiteBinder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The runtime binder for the dynamic operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>returnType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The result type of the dynamic expression.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg0</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first argument to the dynamic operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second argument to the dynamic operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.dynamicexpression\" data-linktype=\"relative-path\">DynamicExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.dynamicexpression\" data-linktype=\"relative-path\">DynamicExpression</a> that has <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and has the <span class=\"xref\">stem.Linq.Expressions.DynamicExpression.Binder*</span> and <span class=\"xref\">stem.Linq.Expressions.DynamicExpression.Arguments*</span> set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.dynamicexpression#System_Linq_Expressions_DynamicExpression_DelegateType_\" data-linktype=\"relative-path\">DelegateType</a> property of the result will be inferred from the types of the arguments and the specified return type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Dynamic_System_Runtime_CompilerServices_CallSiteBinder_System_Type_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Dynamic_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dynamic(CallSiteBinder,Type,Expression,Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.dynamicexpression\" data-linktype=\"relative-path\">DynamicExpression</a> that represents a dynamic operation bound by the provided <a class=\"xref\" href=\"system.runtime.compilerservices.callsitebinder\" data-linktype=\"relative-path\">CallSiteBinder</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.compilerservices.callsitebinder\" data-linktype=\"relative-path\">CallSiteBinder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The runtime binder for the dynamic operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>returnType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The result type of the dynamic expression.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg0</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first argument to the dynamic operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second argument to the dynamic operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The third argument to the dynamic operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.dynamicexpression\" data-linktype=\"relative-path\">DynamicExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.dynamicexpression\" data-linktype=\"relative-path\">DynamicExpression</a> that has <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and has the <span class=\"xref\">stem.Linq.Expressions.DynamicExpression.Binder*</span> and <span class=\"xref\">stem.Linq.Expressions.DynamicExpression.Arguments*</span> set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.dynamicexpression#System_Linq_Expressions_DynamicExpression_DelegateType_\" data-linktype=\"relative-path\">DelegateType</a> property of the result will be inferred from the types of the arguments and the specified return type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Dynamic_System_Runtime_CompilerServices_CallSiteBinder_System_Type_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Dynamic_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dynamic(CallSiteBinder,Type,Expression,Expression,Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.dynamicexpression\" data-linktype=\"relative-path\">DynamicExpression</a> that represents a dynamic operation bound by the provided <a class=\"xref\" href=\"system.runtime.compilerservices.callsitebinder\" data-linktype=\"relative-path\">CallSiteBinder</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.compilerservices.callsitebinder\" data-linktype=\"relative-path\">CallSiteBinder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The runtime binder for the dynamic operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>returnType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The result type of the dynamic expression.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg0</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first argument to the dynamic operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second argument to the dynamic operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The third argument to the dynamic operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg3</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The fourth argument to the dynamic operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.dynamicexpression\" data-linktype=\"relative-path\">DynamicExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.dynamicexpression\" data-linktype=\"relative-path\">DynamicExpression</a> that has <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and has the <span class=\"xref\">stem.Linq.Expressions.DynamicExpression.Binder*</span> and <span class=\"xref\">stem.Linq.Expressions.DynamicExpression.Arguments*</span> set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.dynamicexpression#System_Linq_Expressions_DynamicExpression_DelegateType_\" data-linktype=\"relative-path\">DelegateType</a> property of the result will be inferred from the types of the arguments and the specified return type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_ElementInit_System_Reflection_MethodInfo_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression__\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_ElementInit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ElementInit(MethodInfo,IEnumerable&lt;Expression&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates an <a class=\"xref\" href=\"system.linq.expressions.elementinit\" data-linktype=\"relative-path\">ElementInit</a>, given an <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> as the second argument.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.ElementInit ElementInit (System.Reflection.MethodInfo addMethod, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>addMethod</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.ElementInit.AddMethod*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arguments</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> objects to set the <span class=\"xref\">stem.Linq.Expressions.ElementInit.Arguments*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.elementinit\" data-linktype=\"relative-path\">ElementInit</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.elementinit\" data-linktype=\"relative-path\">ElementInit</a> that has the <span class=\"xref\">stem.Linq.Expressions.ElementInit.AddMethod*</span> and <span class=\"xref\">stem.Linq.Expressions.ElementInit.Arguments*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>addMethod</code> or <code>arguments</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The method that <code>addMethod</code> represents is not named &quot;Add&quot; (case insensitive).  </p>\n<p> -or-  </p>\n<p> The method that <code>addMethod</code> represents is not an instance method.  </p>\n<p> -or-  </p>\n<p> <code>arguments</code> does not contain the same number of elements as the number of parameters for the method that <code>addMethod</code> represents.  </p>\n<p> -or-  </p>\n<p> The <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property of one or more elements of <code>arguments</code> is not assignable to the type of the corresponding parameter of the method that <code>addMethod</code> represents.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>addMethod</code> parameter must represent an instance method named &quot;Add&quot; (case insensitive). The add method must have the same number of parameters as the number of elements in <code>arguments</code>. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of each element in <code>arguments</code> must be assignable to the type of the corresponding parameter of the add method, possibly after <em>quoting</em>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An element will be quoted only if the corresponding method parameter is of type <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>. Quoting means the element is wrapped in a <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> node. The resulting node is a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> whose <a class=\"xref\" href=\"system.linq.expressions.unaryexpression#System_Linq_Expressions_UnaryExpression_Operand_\" data-linktype=\"relative-path\">Operand</a> property is the element of <code>arguments</code>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the [ElementInit(MethodInfo,â€‚Expression&lt;xref:System.Linq.Expressions.Expression.ElementInit%28System.Reflection.MethodInfo%2CSystem.Linq.Expressions.Expression%5B%5D%29&gt; method to create an <a class=\"xref\" href=\"system.linq.expressions.elementinit\" data-linktype=\"relative-path\">ElementInit</a> that represents calling the <a class=\"xref\" href=\"system.collections.generic.dictionary-2#System_Collections_Generic_Dictionary_2_Add_\" data-linktype=\"relative-path\">Add</a> method to initialize an element of a dictionary collection.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.Expression#4\">            string tree = &quot;maple&quot;;\n\n            System.Reflection.MethodInfo addMethod = typeof(Dictionary&lt;int, string&gt;).GetMethod(&quot;Add&quot;);\n\n            // Create an ElementInit that represents calling\n            // Dictionary&lt;int, string&gt;.Add(tree.Length, tree).\n            System.Linq.Expressions.ElementInit elementInit =\n                System.Linq.Expressions.Expression.ElementInit(\n                    addMethod,\n                    System.Linq.Expressions.Expression.Constant(tree.Length),\n                    System.Linq.Expressions.Expression.Constant(tree));\n\n            Console.WriteLine(elementInit.ToString());\n\n            // This code produces the following output:\n            //\n            // Void Add(Int32, System.String)(5,&quot;maple&quot;)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.Expression#4\">        Dim tree As String = &quot;maple&quot;\n\n        Dim addMethod As System.Reflection.MethodInfo = _\n            Type.GetType(&quot;System.Collections.Generic.Dictionary`2[System.Int32, System.String]&quot;).GetMethod(&quot;Add&quot;)\n\n        &#39; Create an ElementInit that represents calling\n        &#39; Dictionary(Of Integer, String).Add(tree.Length, tree).\n        Dim elementInit As System.Linq.Expressions.ElementInit = _\n            System.Linq.Expressions.Expression.ElementInit( _\n                addMethod, _\n                System.Linq.Expressions.Expression.Constant(tree.Length), _\n                System.Linq.Expressions.Expression.Constant(tree))\n\n        Console.WriteLine(elementInit.ToString())\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; Void Add(Int32, System.String)(5,&quot;maple&quot;)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_ElementInit_System_Reflection_MethodInfo_System_Linq_Expressions_Expression___\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_ElementInit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ElementInit(MethodInfo,Expression[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates an <a class=\"xref\" href=\"system.linq.expressions.elementinit\" data-linktype=\"relative-path\">ElementInit</a>, given an array of values as the second argument.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.ElementInit ElementInit (System.Reflection.MethodInfo addMethod, System.Linq.Expressions.Expression[] arguments);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>addMethod</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.ElementInit.AddMethod*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arguments</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> objects to set the <span class=\"xref\">stem.Linq.Expressions.ElementInit.Arguments*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.elementinit\" data-linktype=\"relative-path\">ElementInit</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.elementinit\" data-linktype=\"relative-path\">ElementInit</a> that has the <span class=\"xref\">stem.Linq.Expressions.ElementInit.AddMethod*</span> and <span class=\"xref\">stem.Linq.Expressions.ElementInit.Arguments*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>addMethod</code> or <code>arguments</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The method that addMethod represents is not named &quot;Add&quot; (case insensitive).  </p>\n<p> -or-  </p>\n<p> The method that addMethod represents is not an instance method.  </p>\n<p> -or-  </p>\n<p> arguments does not contain the same number of elements as the number of parameters for the method that addMethod represents.  </p>\n<p> -or-  </p>\n<p> The <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property of one or more elements of <code>arguments</code> is not assignable to the type of the corresponding parameter of the method that <code>addMethod</code> represents.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>addMethod</code> parameter must represent an instance method named &quot;Add&quot; (case insensitive). The add method must have the same number of parameters as the number of elements in <code>arguments</code>. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of each element in <code>arguments</code> must be assignable to the type of the corresponding parameter of the add method, possibly after <em>quoting</em>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An element will be quoted only if the corresponding method parameter is of type <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>. Quoting means the element is wrapped in a <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> node. The resulting node is a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> whose <a class=\"xref\" href=\"system.linq.expressions.unaryexpression#System_Linq_Expressions_UnaryExpression_Operand_\" data-linktype=\"relative-path\">Operand</a> property is the element of <code>arguments</code>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the ElementInit method to create an <a class=\"xref\" href=\"system.linq.expressions.elementinit\" data-linktype=\"relative-path\">ElementInit</a> that represents calling the <a class=\"xref\" href=\"system.collections.generic.dictionary-2#System_Collections_Generic_Dictionary_2_Add_\" data-linktype=\"relative-path\">Add</a> method to initialize an element of a dictionary collection.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.Expression#4\">            string tree = &quot;maple&quot;;\n\n            System.Reflection.MethodInfo addMethod = typeof(Dictionary&lt;int, string&gt;).GetMethod(&quot;Add&quot;);\n\n            // Create an ElementInit that represents calling\n            // Dictionary&lt;int, string&gt;.Add(tree.Length, tree).\n            System.Linq.Expressions.ElementInit elementInit =\n                System.Linq.Expressions.Expression.ElementInit(\n                    addMethod,\n                    System.Linq.Expressions.Expression.Constant(tree.Length),\n                    System.Linq.Expressions.Expression.Constant(tree));\n\n            Console.WriteLine(elementInit.ToString());\n\n            // This code produces the following output:\n            //\n            // Void Add(Int32, System.String)(5,&quot;maple&quot;)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.Expression#4\">        Dim tree As String = &quot;maple&quot;\n\n        Dim addMethod As System.Reflection.MethodInfo = _\n            Type.GetType(&quot;System.Collections.Generic.Dictionary`2[System.Int32, System.String]&quot;).GetMethod(&quot;Add&quot;)\n\n        &#39; Create an ElementInit that represents calling\n        &#39; Dictionary(Of Integer, String).Add(tree.Length, tree).\n        Dim elementInit As System.Linq.Expressions.ElementInit = _\n            System.Linq.Expressions.Expression.ElementInit( _\n                addMethod, _\n                System.Linq.Expressions.Expression.Constant(tree.Length), _\n                System.Linq.Expressions.Expression.Constant(tree))\n\n        Console.WriteLine(elementInit.ToString())\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; Void Add(Int32, System.String)(5,&quot;maple&quot;)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Empty\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Empty_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Empty()</div>        \r\n          </div>\r\n    \r\n            <p>Creates an empty expression that has <a class=\"xref\" href=\"system.void\" data-linktype=\"relative-path\">Void</a> type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.DefaultExpression Empty ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.defaultexpression\" data-linktype=\"relative-path\">DefaultExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.defaultexpression\" data-linktype=\"relative-path\">DefaultExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property set to <a class=\"xref\" href=\"system.void\" data-linktype=\"relative-path\">Void</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An empty expression can be used where an expression is expected but no action is desired. For example, you can use an empty expression as the last expression in a block expression. In this case, the block expression&#39;s return value is void.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create an empty expression and add it to a block expression.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#31\">        &#39; Add the following directive to your file:\n        &#39; Imports System.Linq.Expressions \n\n        &#39; This statement creates an empty expression.\n        Dim emptyExpr As DefaultExpression = Expression.Empty()\n\n        &#39; An empty expression can be used where an expression is expected but no action is desired.\n        &#39; For example, you can use an empty expression as the last expression in a block expression.\n        &#39; In this case, the block expression&#39;s return value is void.\n        Dim emptyBlock = Expression.Block(emptyExpr)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#31\">            // Add the following directive to your file:\n            // using System.Linq.Expressions;  \n\n            // This statement creates an empty expression.\n            DefaultExpression emptyExpr = Expression.Empty();\n\n            // The empty expression can be used where an expression is expected, but no action is desired.\n            // For example, you can use the empty expression as the last expression in the block expression.\n            // In this case the block expression&#39;s return value is void.\n            var emptyBlock = Expression.Block(emptyExpr);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Equal_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Equal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equal(Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an equality comparison.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression Equal (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>right</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The equality operator is not defined for <code>left</code>.Type and <code>right</code>.Type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The resulting <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> has the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> property is <code>true</code>. Otherwise, it is <code>false</code>. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> property is always <code>false</code>. The following information describes the implementing method, the node type, and whether a node is lifted.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the implementing method for the operation:  </p>\n<ul>\n<li><p>If the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of either <code>left</code> or <code>right</code> represents a user-defined type that overloads the equality operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that method is the implementing method.  </p>\n</li>\n<li><p>Otherwise, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted and the type of the node is <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>:  </p>\n<ul>\n<li><p><code>left</code>.Type and <code>right</code>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>.  </p>\n</li>\n</ul>\n<p>If the implementing method is <code>null</code>:  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both non-nullable, the node is not lifted. The type of the node is <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>.  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both nullable, the node is lifted. The type of the node is <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create an expression that checks whether the values of its two arguments are equal.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#8\">        &#39; Add the following directive to your file:\n        &#39; Imports System.Linq.Expressions  \n\n        &#39; This expression compares the values of its two arguments.\n        &#39; Both arguments must be of the same type.\n        Dim equalExpr As Expression = Expression.Equal(\n            Expression.Constant(42),\n            Expression.Constant(45)\n        )\n\n        &#39; Print the expression.\n        Console.WriteLine(equalExpr.ToString())\n\n        &#39; The following statement first creates an expression tree,\n        &#39; then compiles it, and then executes it.\n        Console.WriteLine(\n            Expression.Lambda(Of Func(Of Boolean))(equalExpr).Compile()())\n\n        &#39; This code example produces the following output:\n        &#39;\n        &#39; (42 == 45)\n        &#39; False\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#8\">            // Add the following directive to your file:\n            // using System.Linq.Expressions;  \n\n            // This expression compares the values of its two arguments.\n            // Both arguments need to be of the same type.\n            Expression equalExpr = Expression.Equal(\n                Expression.Constant(42),\n                Expression.Constant(45)\n            );\n\n            // Print out the expression.\n            Console.WriteLine(equalExpr.ToString());\n\n            // The following statement first creates an expression tree,\n            // then compiles it, and then executes it.\n            Console.WriteLine(\n                Expression.Lambda&lt;Func&lt;bool&gt;&gt;(equalExpr).Compile()());\n\n            // This code example produces the following output:\n            //\n            // (42 == 45)\n            // False\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Equal_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Boolean_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Equal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equal(Expression,Expression,Boolean,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an equality comparison. The implementing method can be specified.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression Equal (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>liftToNull</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to set <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.IsLiftedToNull*</span> to <code>true</code>; <code>false</code> to set <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.IsLiftedToNull*</span> to <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.IsLiftedToNull*</span>, and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>right</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is not <code>null</code> and the method it represents returns <code>void</code>, is not <code>static</code> (<code>Shared</code> in Visual Basic), or does not take exactly two arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is <code>null</code> and the equality operator is not defined for <code>left</code>.Type and <code>right</code>.Type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The resulting <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> has the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> property is <code>true</code> and the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> property is equal to <code>liftToNull</code>. Otherwise, they are both <code>false</code>. The following information describes the implementing method, the node type, and whether a node is lifted.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the implementing method for the operation:  </p>\n<ul>\n<li><p>If <code>method</code> is not <code>null</code> and it represents a non-void, <code>static</code> (<code>Shared</code> in Visual Basic) method that takes two arguments, it is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of either <code>left</code> or <code>right</code> represents a user-defined type that overloads the equality operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that method is the implementing method.  </p>\n</li>\n<li><p>Otherwise, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> if <code>liftToNull</code> is <code>true</code> or <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> if <code>liftToNull</code> is <code>false</code>:  </p>\n<ul>\n<li><p><code>left</code>.Type and <code>right</code>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>.  </p>\n</li>\n</ul>\n<p>If the implementing method is <code>null</code>:  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both non-nullable, the node is not lifted. The type of the node is <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>.  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both nullable, the node is lifted. The type of the node is nullable <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> if <code>liftToNull</code> is <code>true</code> or <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> if <code>liftToNull</code> is <code>false</code>.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_ExclusiveOr_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_ExclusiveOr_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExclusiveOr(Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a bitwise <code>XOR</code> operation, using <code>op_ExclusiveOr</code> for user-defined types.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression ExclusiveOr (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>right</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <code>XOR</code> operator is not defined for <code>left</code>.Type and <code>right</code>.Type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The resulting <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> has the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> and <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> properties are both <code>true</code>. Otherwise, they are <code>false</code>. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Conversion_\" data-linktype=\"relative-path\">Conversion</a> property is <code>null</code>.  </p>\n<p> The following information describes the implementing method, the node type, and whether a node is lifted.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the implementing method for the operation:  </p>\n<ul>\n<li><p>If the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of either <code>left</code> or <code>right</code> represents a user-defined type that overloads the <code>XOR</code> operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that method is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if <code>left</code>.Type and <code>right</code>.Type are integral or Boolean types, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  </p>\n<ul>\n<li><p><code>left</code>.Type and <code>right</code>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is a non-nullable value type.  </p>\n</li>\n</ul>\n<p>If the implementing method is <code>null</code>:  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined <code>XOR</code> operator.  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined <code>XOR</code> operator.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create an expression that represents the logical XOR operation.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#9\">        &#39; Add the following directive to your file:\n        &#39; Imports System.Linq.Expressions   \n\n        &#39; This expression represents an exclusive OR operation for its two arguments.\n        &#39; Both arguments must be of the same type, \n        &#39; which can be either integer or Boolean.\n\n        Dim exclusiveOrExpr As Expression = Expression.ExclusiveOr(\n             Expression.Constant(5),\n             Expression.Constant(3)\n         )\n\n        &#39; Print the expression.\n        Console.WriteLine(exclusiveOrExpr.ToString())\n\n        &#39; The following statement first creates an expression tree,\n        &#39; then compiles it, and then executes it.           \n        Console.WriteLine(\n            Expression.Lambda(Of Func(Of Integer))(exclusiveOrExpr).Compile()())\n\n        &#39; The XOR operation is performed as follows:\n        &#39; 101 xor 011 = 110\n\n        &#39; This code example produces the following output:\n        &#39;\n        &#39; (5 ^ 3)\n        &#39; 6\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#9\">            // Add the following directive to your file:\n            // using System.Linq.Expressions;  \n\n            // This expression represents an exclusive OR operation for its two arguments.\n            // Both arguments must be of the same type, \n            // which can be either integer or boolean.\n\n            Expression exclusiveOrExpr = Expression.ExclusiveOr(\n                Expression.Constant(5),\n                Expression.Constant(3)\n            );\n\n            // Print out the expression.\n            Console.WriteLine(exclusiveOrExpr.ToString());\n\n            // The following statement first creates an expression tree,\n            // then compiles it, and then executes it.           \n            Console.WriteLine(\n                Expression.Lambda&lt;Func&lt;int&gt;&gt;(exclusiveOrExpr).Compile()());\n\n            // The XOR operation is performed as follows:\n            // 101 xor 011 = 110\n\n            // This code example produces the following output:\n            //\n            // (5 ^ 3)\n            // 6\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_ExclusiveOr_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_ExclusiveOr_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExclusiveOr(Expression,Expression,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a bitwise <code>XOR</code> operation, using <code>op_ExclusiveOr</code> for user-defined types. The implementing method can be specified.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression ExclusiveOr (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span>, and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>right</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is not <code>null</code> and the method it represents returns <code>void</code>, is not <code>static</code> (<code>Shared</code> in Visual Basic), or does not take exactly two arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is <code>null</code> and the <code>XOR</code> operator is not defined for <code>left</code>.Type and <code>right</code>.Type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The resulting <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> has the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> and <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> properties are both <code>true</code>. Otherwise, they are <code>false</code>. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Conversion_\" data-linktype=\"relative-path\">Conversion</a> property is <code>null</code>.  </p>\n<p> The following information describes the implementing method, the node type, and whether a node is lifted.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the chosen implementing method for the operation:  </p>\n<ul>\n<li><p>If <code>method</code> is not <code>null</code> and it represents a non-void, <code>static</code> (<code>Shared</code> in Visual Basic) method that takes two arguments, it is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of either <code>left</code> or <code>right</code> represents a user-defined type that overloads the <code>XOR</code> operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that method is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if <code>left</code>.Type and <code>right</code>.Type are integral or Boolean types, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  </p>\n<ul>\n<li><p><code>left</code>.Type and <code>right</code>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is a non-nullable value type.  </p>\n</li>\n</ul>\n<p>If the implementing method is <code>null</code>:  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined <code>XOR</code> operator.  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined <code>XOR</code> operator.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_ExclusiveOrAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_ExclusiveOrAssign_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExclusiveOrAssign(Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a bitwise XOR assignment operation, using <code>op_ExclusiveOr</code> for user-defined types.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression ExclusiveOrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_ExclusiveOrAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_ExclusiveOrAssign_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExclusiveOrAssign(Expression,Expression,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a bitwise XOR assignment operation, using <code>op_ExclusiveOr</code> for user-defined types.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression ExclusiveOrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span>, and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_ExclusiveOrAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_System_Linq_Expressions_LambdaExpression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_ExclusiveOrAssign_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExclusiveOrAssign(Expression,Expression,MethodInfo,LambdaExpression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a bitwise XOR assignment operation, using <code>op_ExclusiveOr</code> for user-defined types.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression ExclusiveOrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>conversion</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Conversion*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span>, and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Conversion*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Field_System_Linq_Expressions_Expression_System_Reflection_FieldInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Field_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Field(Expression,FieldInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.memberexpression\" data-linktype=\"relative-path\">MemberExpression</a> that represents accessing a field.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.MemberExpression Field (System.Linq.Expressions.Expression expression, System.Reflection.FieldInfo field);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.MemberExpression.Expression*</span> property equal to. For <code>static</code> (<code>Shared</code> in Visual Basic), <code>expression</code> must be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>field</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.MemberExpression.Member*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.memberexpression\" data-linktype=\"relative-path\">MemberExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.memberexpression\" data-linktype=\"relative-path\">MemberExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.MemberExpression.Expression*</span> and <span class=\"xref\">stem.Linq.Expressions.MemberExpression.Member*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>field</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The field represented by <code>field</code> is not <code>static</code> (<code>Shared</code> in Visual Basic) and <code>expression</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>expression</code>.Type is not assignable to the declaring type of the field represented by <code>field</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.memberexpression\" data-linktype=\"relative-path\">MemberExpression</a> is equal to the <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_FieldType_\" data-linktype=\"relative-path\">FieldType</a> property of <code>field</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Field_System_Linq_Expressions_Expression_System_String_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Field_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Field(Expression,String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.memberexpression\" data-linktype=\"relative-path\">MemberExpression</a> that represents accessing a field given the name of the field.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.MemberExpression Field (System.Linq.Expressions.Expression expression, string fieldName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> whose <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> contains a field named <code>fieldName</code>. This can be null for static fields.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>fieldName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of a field to be accessed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.memberexpression\" data-linktype=\"relative-path\">MemberExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.memberexpression\" data-linktype=\"relative-path\">MemberExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a>, the <span class=\"xref\">stem.Linq.Expressions.MemberExpression.Expression*</span> property set to <code>expression</code>, and the <span class=\"xref\">stem.Linq.Expressions.MemberExpression.Member*</span> property set to the <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a> that represents the field denoted by <code>fieldName</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>expression</code> or <code>fieldName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>No field named <code>fieldName</code> is defined in <code>expression</code>.Type or its base types.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.memberexpression\" data-linktype=\"relative-path\">MemberExpression</a> is equal to the <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_FieldType_\" data-linktype=\"relative-path\">FieldType</a> property of the <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a> that represents the field denoted by <code>fieldName</code>.  </p>\n<p> This method searches <code>expression</code>.Type and its base types for a field that has the name <code>fieldName</code>. Public fields are given preference over non-public fields. If a matching field is found, this method passes <code>expression</code> and the <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a> that represents that field to <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Field_\" data-linktype=\"relative-path\">Field</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create an expression that represents accessing a field.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#37\">    &#39; Add the following directive to your file:\n    &#39; Imports System.Linq.Expressions\n\n    Class TestFieldClass\n        Dim sample As Integer = 40\n    End Class\n\n    Sub TestField()\n\n        Dim obj As New TestFieldClass()\n\n        &#39; This expression represents accessing a field.\n        &#39; For static fields, the first parameter must be Nothing.\n        Dim fieldExpr As Expression = Expression.Field(\n              Expression.Constant(obj),\n              &quot;sample&quot;\n          )\n\n        &#39; The following statement first creates an expression tree,\n        &#39; then compiles it, and then runs it.\n        Console.WriteLine(Expression.Lambda(Of Func(Of Integer))(fieldExpr).Compile()())\n    End Sub\n\n    &#39; This code example produces the following output:\n    &#39;\n    &#39; 40\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#37\">        // Add the following directive to your file:\n        // using System.Linq.Expressions;  \n\n        class TestFieldClass\n        {\n            int sample = 40;\n        }\n\n        static void TestField()\n        {       \n            TestFieldClass obj = new TestFieldClass();\n          \n            // This expression represents accessing a field.\n            // For static fields, the first parameter must be null.\n            Expression fieldExpr = Expression.Field(\n                Expression.Constant(obj),\n                &quot;sample&quot;\n            );\n\n            // The following statement first creates an expression tree,\n            // then compiles it, and then runs it.\n            Console.WriteLine(Expression.Lambda&lt;Func&lt;int&gt;&gt;(fieldExpr).Compile()());\n        }\n\n        // This code example produces the following output:\n        //\n        // 40\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Field_System_Linq_Expressions_Expression_System_Type_System_String_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Field_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Field(Expression,Type,String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.memberexpression\" data-linktype=\"relative-path\">MemberExpression</a> that represents accessing a field.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.MemberExpression Field (System.Linq.Expressions.Expression expression, Type type, string fieldName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The containing object of the field. This can be null for static fields.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> that contains the field.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>fieldName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The field to be accessed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.memberexpression\" data-linktype=\"relative-path\">MemberExpression</a></div>\r\n                  </div>\r\n                  <p>The created <a class=\"xref\" href=\"system.linq.expressions.memberexpression\" data-linktype=\"relative-path\">MemberExpression</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_GetActionType_System_Type___\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_GetActionType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetActionType(Type[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents a generic <code>System.Action</code> delegate type that has specific type arguments.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Type GetActionType (Type[] typeArgs);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>typeArgs</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of up to sixteen <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects that specify the type arguments for the <code>System.Action</code> delegate type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>The type of a <code>System.Action</code> delegate that has the specified type arguments.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>typeArgs</code> contains more than sixteen elements.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>typeArgs</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>As an example, if the elements of <code>typeArgs</code> represent the types <code>T1â€¦Tn</code>, the resulting <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object represents the constructed delegate type <code>System.Action&lt;T1,â€¦,Tn&gt;</code> in C# or <code>System.Action(Of T1,â€¦,Tn)</code> in Visual Basic.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_GetDelegateType_System_Type___\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_GetDelegateType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDelegateType(Type[])</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> object that represents a generic <code>System.Func</code> or <code>System.Action</code> delegate type that has specific type arguments.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Type GetDelegateType (Type[] typeArgs);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>typeArgs</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type arguments of the delegate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>The delegate type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The last type argument determines the return type of the delegate. If no Func or Action is large enough, it will generate a custom delegate type.  </p>\n<p> As with Func, the last argument is the return type. It can be set to System.Void to produce an Action.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_GetFuncType_System_Type___\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_GetFuncType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetFuncType(Type[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> object that represents a generic <code>System.Func</code> delegate type that has specific type arguments. The last type argument specifies the return type of the created delegate.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Type GetFuncType (Type[] typeArgs);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>typeArgs</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of one to seventeen <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects that specify the type arguments for the <code>System.Func</code> delegate type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>The type of a <code>System.Func</code> delegate that has the specified type arguments.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>typeArgs</code> contains fewer than one or more than seventeen elements.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>typeArgs</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>typeArgs</code> must contain at least one and at most seventeen elements.  </p>\n<p> As an example, if the elements of <code>typeArgs</code> represent the types <code>T1â€¦Tn</code>, the resulting <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object represents the constructed delegate type <code>System.Func&lt;T1,â€¦,Tn&gt;</code> in C# or <code>System.Func(Of T1,â€¦,Tn)</code> in Visual Basic.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Goto_System_Linq_Expressions_LabelTarget_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Goto_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Goto(LabelTarget)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> representing a &quot;go to&quot; statement.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a> that the <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> will jump to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> with <span class=\"xref\">stem.Linq.Expressions.GotoExpression.Kind*</span> equal to Goto, the <span class=\"xref\">stem.Linq.Expressions.GotoExpression.Target*</span> property set to the specified value, and a null value to be passed to the target label upon jumping.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to create an expression that contains a <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> object.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#45\">        &#39; Add the following directive to your file:\n        &#39; Imports System.Linq.Expressions  \n\n        &#39; A label expression of the void type that is the target for the GoToExpression.\n        Dim returnTarget As LabelTarget = Expression.Label()\n\n        &#39; This block contains a GotoExpression.\n        &#39; It transfers execution to a label expression that is initialized with the same LabelTarget as the GotoExpression.\n        &#39; The types of the GotoExpression, label expression, and LabelTarget must match.\n        Dim blockExpr As BlockExpression =\n              Expression.Block(\n                  Expression.Call(GetType(Console).GetMethod(&quot;WriteLine&quot;, New Type() {GetType(String)}), Expression.Constant(&quot;GoTo&quot;)),\n                  Expression.Goto(returnTarget),\n                  Expression.Call(GetType(Console).GetMethod(&quot;WriteLine&quot;, New Type() {GetType(String)}), Expression.Constant(&quot;Other Work&quot;)),\n                  Expression.Label(returnTarget)\n              )\n\n        &#39; The following statement first creates an expression tree,\n        &#39; then compiles it, and then runs it.\n        Expression.Lambda(Of Action)(blockExpr).Compile()()\n\n        &#39; This code example produces the following output:\n        &#39;\n        &#39; GoTo\n\n        &#39; &quot;Other Work&quot; is not printed because \n        &#39; the Return expression transfers execution from Expression.GoTo(returnTarget)\n        &#39; to Expression.Label(returnTarget).\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#45\">            // Add the following directive to your file:\n            // using System.Linq.Expressions;  \n\n            // A label expression of the void type that is the target for the GotoExpression.\n            LabelTarget returnTarget = Expression.Label();\n\n            // This block contains a GotoExpression.\n            // It transfers execution to a label expression that is initialized with the same LabelTarget as the GotoExpression.\n            // The types of the GotoExpression, label expression, and LabelTarget must match.\n            BlockExpression blockExpr =\n                Expression.Block(\n                    Expression.Call(typeof(Console).GetMethod(&quot;WriteLine&quot;, new Type[] { typeof(string) }), Expression.Constant(&quot;GoTo&quot;)),\n                    Expression.Goto(returnTarget),\n                    Expression.Call(typeof(Console).GetMethod(&quot;WriteLine&quot;, new Type[] { typeof(string) }), Expression.Constant(&quot;Other Work&quot;)),\n                    Expression.Label(returnTarget)\n                );\n\n            // The following statement first creates an expression tree,\n            // then compiles it, and then runs it.\n            Expression.Lambda&lt;Action&gt;(blockExpr).Compile()();\n\n            // This code example produces the following output:\n            //\n            // GoTo\n\n            // &quot;Other Work&quot; is not printed because \n            // the GoTo expression transfers execution from Expression.GoTo(returnTarget)\n            // to Expression.Label(returnTarget).\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Goto_System_Linq_Expressions_LabelTarget_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Goto_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Goto(LabelTarget,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> representing a &quot;go to&quot; statement. The value passed to the label upon jumping can be specified.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a> that the <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> will jump to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value that will be passed to the associated label upon jumping.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> with <span class=\"xref\">stem.Linq.Expressions.GotoExpression.Kind*</span> equal to Goto, the <span class=\"xref\">stem.Linq.Expressions.GotoExpression.Target*</span> property set to <code>target</code>, and <code>value</code> to be passed to the target label upon jumping.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Goto_System_Linq_Expressions_LabelTarget_System_Type_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Goto_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Goto(LabelTarget,Type)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> representing a &quot;go to&quot; statement with the specified type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target, Type type);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a> that the <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> will jump to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> to set the <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> with <span class=\"xref\">stem.Linq.Expressions.GotoExpression.Kind*</span> equal to Goto, the <span class=\"xref\">stem.Linq.Expressions.GotoExpression.Target*</span> property set to the specified value, the <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property set to <code>type</code>, and a null value to be passed to the target label upon jumping.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Goto_System_Linq_Expressions_LabelTarget_System_Linq_Expressions_Expression_System_Type_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Goto_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Goto(LabelTarget,Expression,Type)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> representing a &quot;go to&quot; statement with the specified type. The value passed to the label upon jumping can be specified.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a> that the <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> will jump to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value that will be passed to the associated label upon jumping.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> to set the <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> with <span class=\"xref\">stem.Linq.Expressions.GotoExpression.Kind*</span> equal to Goto, the <span class=\"xref\">stem.Linq.Expressions.GotoExpression.Target*</span> property set to <code>target</code>, the <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property set to <code>type</code>, and <code>value</code> to be passed to the target label upon jumping.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_GreaterThan_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_GreaterThan_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GreaterThan(Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a &quot;greater than&quot; numeric comparison.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression GreaterThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>right</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The &quot;greater than&quot; operator is not defined for <code>left</code>.Type and <code>right</code>.Type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The resulting <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> has the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> property is <code>true</code>. Otherwise, it is <code>false</code>. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> property is always <code>false</code>. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Conversion_\" data-linktype=\"relative-path\">Conversion</a> property is <code>null</code>.  </p>\n<p> The following information describes the implementing method, the node type, and whether a node is lifted.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the implementing method for the operation:  </p>\n<ul>\n<li><p>If the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of either <code>left</code> or <code>right</code> represents a user-defined type that overloads the &quot;greater than&quot; operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that method is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if <code>left</code>.Type and <code>right</code>.Type are numeric types, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted and the type of the node is <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>:  </p>\n<ul>\n<li><p><code>left</code>.Type and <code>right</code>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>.  </p>\n</li>\n</ul>\n<p>If the implementing method is <code>null</code>:  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both non-nullable, the node is not lifted. The type of the node is <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>.  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both nullable, the node is lifted. The type of the node is <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create an expression that compares two integers.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#10\">        &#39; Add the following directive to your file:\n        &#39; Imports System.Linq.Expressions \n\n        &#39; This expression compares the values of its two arguments.\n        &#39; Both arguments must be of the same type.\n        Dim greaterThanExpr As Expression = Expression.GreaterThan(\n            Expression.Constant(42),\n            Expression.Constant(45)\n        )\n\n        &#39; Print the expression.\n        Console.WriteLine(greaterThanExpr.ToString())\n\n        &#39; The following statement first creates an expression tree,\n        &#39; then compiles it, and then executes it.    \n        Console.WriteLine(\n            Expression.Lambda(Of Func(Of Boolean))(greaterThanExpr).Compile()())\n\n        &#39; This code example produces the following output:\n        &#39;\n        &#39; (42 &gt; 45)\n        &#39; False\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#10\">            // Add the following directive to your file:\n            // using System.Linq.Expressions;  \n\n            // This expression compares the values of its two arguments.\n            // Both arguments must be of the same type.\n            Expression greaterThanExpr = Expression.GreaterThan(\n                Expression.Constant(42),\n                Expression.Constant(45)\n            );\n\n            // Print out the expression.\n            Console.WriteLine(greaterThanExpr.ToString());\n\n            // The following statement first creates an expression tree,\n            // then compiles it, and then executes it.    \n            Console.WriteLine(\n                Expression.Lambda&lt;Func&lt;bool&gt;&gt;(greaterThanExpr).Compile()());\n\n            // This code example produces the following output:\n            //\n            // (42 &gt; 45)\n            // False\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_GreaterThan_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Boolean_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_GreaterThan_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GreaterThan(Expression,Expression,Boolean,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a &quot;greater than&quot; numeric comparison. The implementing method can be specified.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression GreaterThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>liftToNull</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to set <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.IsLiftedToNull*</span> to <code>true</code>; <code>false</code> to set <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.IsLiftedToNull*</span> to <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.IsLiftedToNull*</span>, and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>right</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is not <code>null</code> and the method it represents returns <code>void</code>, is not <code>static</code> (<code>Shared</code> in Visual Basic), or does not take exactly two arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is <code>null</code> and the &quot;greater than&quot; operator is not defined for <code>left</code>.Type and <code>right</code>.Type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The resulting <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> has the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> property is <code>true</code> and the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> property is equal to <code>liftToNull</code>. Otherwise, they are both <code>false</code>. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Conversion_\" data-linktype=\"relative-path\">Conversion</a> property is <code>null</code>.  </p>\n<p> The following information describes the implementing method, the node type, and whether a node is lifted.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the implementing method for the operation :  </p>\n<ul>\n<li><p>If <code>method</code> is not <code>null</code> and it represents a non-void, <code>static</code> (<code>Shared</code> in Visual Basic) method that takes two arguments, it is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of either <code>left</code> or <code>right</code> represents a user-defined type that overloads the &quot;greater than&quot; operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that method is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if <code>left</code>.Type and <code>right</code>.Type are numeric types, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> if <code>liftToNull</code> is <code>true</code> or <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> if <code>liftToNull</code> is <code>false</code>:  </p>\n<ul>\n<li><p><code>left</code>.Type and <code>right</code>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>.  </p>\n</li>\n</ul>\n<p>If the implementing method is <code>null</code>:  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both non-nullable, the node is not lifted. The type of the node is <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>.  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both nullable, the node is lifted. The type of the node is nullable <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> if <code>liftToNull</code> is <code>true</code> or <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> if <code>liftToNull</code> is <code>false</code>.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_GreaterThanOrEqual_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_GreaterThanOrEqual_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GreaterThanOrEqual(Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a &quot;greater than or equal&quot; numeric comparison.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression GreaterThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>right</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The &quot;greater than or equal&quot; operator is not defined for <code>left</code>.Type and <code>right</code>.Type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The resulting <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> has the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> property is <code>true</code>. Otherwise, it is <code>false</code>. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> property is always <code>false</code>. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Conversion_\" data-linktype=\"relative-path\">Conversion</a> property is <code>null</code>.  </p>\n<p> The following information describes the implementing method, the node type, and whether a node is lifted.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the implementing method for the operation:  </p>\n<ul>\n<li><p>If the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of either <code>left</code> or <code>right</code> represents a user-defined type that overloads the &quot;greater than or equal&quot; operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that method is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if <code>left</code>.Type and <code>right</code>.Type are numeric types, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted and the type of the node is <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>:  </p>\n<ul>\n<li><p><code>left</code>.Type and <code>right</code>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>.  </p>\n</li>\n</ul>\n<p>If the implementing method is <code>null</code>:  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both non-nullable, the node is not lifted. The type of the node is <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>.  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both nullable, the node is lifted. The type of the node is <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create an expression that compares two integers.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#11\">        &#39; Add the following directive to your file:\n        &#39; Imports System.Linq.Expressions \n\n        &#39; This expression compares the values of its two arguments.\n        &#39; Both arguments must be of the same type.\n        Dim greaterThanOrEqual As Expression = Expression.GreaterThanOrEqual(\n             Expression.Constant(42),\n             Expression.Constant(45)\n         )\n\n        &#39; Print the expression.\n        Console.WriteLine(greaterThanOrEqual.ToString())\n\n        &#39; The following statement first creates an expression tree,\n        &#39; then compiles it, and then executes it. \n        Console.WriteLine(\n            Expression.Lambda(Of Func(Of Boolean))(greaterThanOrEqual).Compile()())\n\n        &#39; This code example produces the following output:\n        &#39;\n        &#39; (42 &gt;= 45)\n        &#39; False\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#11\">            // Add the following directive to your file:\n            // using System.Linq.Expressions;  \n\n            // This expression compares the values of its two arguments.\n            // Both arguments must be of the same type.\n            Expression greaterThanOrEqual = Expression.GreaterThanOrEqual(\n                Expression.Constant(42),\n                Expression.Constant(45)\n            );\n\n            // Print out the expression.\n            Console.WriteLine(greaterThanOrEqual.ToString());\n\n            // The following statement first creates an expression tree,\n            // then compiles it, and then executes it. \n            Console.WriteLine(Expression.Lambda&lt;Func&lt;bool&gt;&gt;(greaterThanOrEqual).Compile()());\n\n            // This code example produces the following output:\n            //\n            // (42 &gt;= 45)\n            // False\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_GreaterThanOrEqual_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Boolean_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_GreaterThanOrEqual_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GreaterThanOrEqual(Expression,Expression,Boolean,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a &quot;greater than or equal&quot; numeric comparison.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression GreaterThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>liftToNull</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to set <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.IsLiftedToNull*</span> to <code>true</code>; <code>false</code> to set <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.IsLiftedToNull*</span> to <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.IsLiftedToNull*</span>, and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>right</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is not <code>null</code> and the method it represents returns <code>void</code>, is not <code>static</code> (<code>Shared</code> in Visual Basic), or does not take exactly two arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is <code>null</code> and the &quot;greater than or equal&quot; operator is not defined for <code>left</code>.Type and <code>right</code>.Type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The resulting <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> has the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> property is <code>true</code> and the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> property is equal to <code>liftToNull</code>. Otherwise, they are both <code>false</code>. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Conversion_\" data-linktype=\"relative-path\">Conversion</a> property is <code>null</code>.  </p>\n<p> The following information describes the implementing method, the node type, and whether a node is lifted.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the implementing method for the operation:  </p>\n<ul>\n<li><p>If <code>method</code> is not <code>null</code> and it represents a non-void, <code>static</code> (<code>Shared</code> in Visual Basic) method that takes two arguments, it is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of either <code>left</code> or <code>right</code> represents a user-defined type that overloads the &quot;greater than or equal&quot; operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that method is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if <code>left</code>.Type and <code>right</code>.Type are numeric types, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> if <code>liftToNull</code> is <code>true</code> or <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> if <code>liftToNull</code> is <code>false</code>:  </p>\n<ul>\n<li><p><code>left</code>.Type and <code>right</code>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>.  </p>\n</li>\n</ul>\n<p>If the implementing method is <code>null</code>:  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both non-nullable, the node is not lifted. The type of the node is <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>.  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both nullable, the node is lifted. The type of the node is nullable <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> if <code>liftToNull</code> is <code>true</code> or <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> if <code>liftToNull</code> is <code>false</code>.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_IfThen_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_IfThen_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IfThen(Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.conditionalexpression\" data-linktype=\"relative-path\">ConditionalExpression</a> that represents a conditional block with an <code>if</code> statement.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.ConditionalExpression IfThen (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>test</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.ConditionalExpression.Test*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ifTrue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.ConditionalExpression.IfTrue*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.conditionalexpression\" data-linktype=\"relative-path\">ConditionalExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.conditionalexpression\" data-linktype=\"relative-path\">ConditionalExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.ConditionalExpression.Test*</span>, <span class=\"xref\">stem.Linq.Expressions.ConditionalExpression.IfTrue*</span>, properties set to the specified values. The <span class=\"xref\">stem.Linq.Expressions.ConditionalExpression.IfFalse*</span> property is set to default expression and the type of the resulting <a class=\"xref\" href=\"system.linq.expressions.conditionalexpression\" data-linktype=\"relative-path\">ConditionalExpression</a> returned by this method is <a class=\"xref\" href=\"system.void\" data-linktype=\"relative-path\">Void</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create an expression that represents a conditional block.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#32\">        &#39; Add the following directive to the file:\n        &#39; Imports System.Linq.Expressions\n        Dim test As Boolean = True\n\n        &#39; This expression represents the conditional block.\n        Dim ifThenExpr As Expression = Expression.IfThen(\n             Expression.Constant(test),\n             Expression.Call(\n                 Nothing,\n                 GetType(Console).GetMethod(&quot;WriteLine&quot;, New Type() {GetType(String)}),\n                 Expression.Constant(&quot;The condition is true.&quot;)\n             )\n        )\n\n        &#39; The following statement first creates an expression tree,\n        &#39; then compiles it, and then runs it.\n        Expression.Lambda(Of Action)(ifThenExpr).Compile()()\n\n        &#39; This code example produces the following output:\n        &#39;\n        &#39; The condition is true.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#32\">            // Add the following directive to the file:\n            // using System.Linq.Expressions;  \n            bool test = true;\n\n            // This expression represents the conditional block.\n            Expression ifThenExpr = Expression.IfThen(\n                Expression.Constant(test),\n                Expression.Call(\n                    null,\n                    typeof(Console).GetMethod(&quot;WriteLine&quot;, new Type[] { typeof(String) }),\n                    Expression.Constant(&quot;The condition is true.&quot;)\n                   )\n            );\n\n            // The following statement first creates an expression tree,\n            // then compiles it, and then runs it.\n            Expression.Lambda&lt;Action&gt;(ifThenExpr).Compile()();\n\n            // This code example produces the following output:\n            //\n            // The condition is true.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_IfThenElse_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_IfThenElse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IfThenElse(Expression,Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.conditionalexpression\" data-linktype=\"relative-path\">ConditionalExpression</a> that represents a conditional block with <code>if</code> and <code>else</code> statements.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.ConditionalExpression IfThenElse (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>test</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.ConditionalExpression.Test*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ifTrue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.ConditionalExpression.IfTrue*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ifFalse</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.ConditionalExpression.IfFalse*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.conditionalexpression\" data-linktype=\"relative-path\">ConditionalExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.conditionalexpression\" data-linktype=\"relative-path\">ConditionalExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.ConditionalExpression.Test*</span>, <span class=\"xref\">stem.Linq.Expressions.ConditionalExpression.IfTrue*</span>, and <span class=\"xref\">stem.Linq.Expressions.ConditionalExpression.IfFalse*</span> properties set to the specified values. The type of the resulting <a class=\"xref\" href=\"system.linq.expressions.conditionalexpression\" data-linktype=\"relative-path\">ConditionalExpression</a> returned by this method is <a class=\"xref\" href=\"system.void\" data-linktype=\"relative-path\">Void</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create an expression that represents a conditional block.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#33\">        &#39; Add the following directive to the file:\n        &#39; Imports System.Linq.Expressions\n        Dim test As Boolean = True\n\n        &#39; This expression represents the conditional block.\n        Dim ifThenElseExpr As Expression = Expression.IfThenElse(\n             Expression.Constant(test),\n             Expression.Call(\n                 Nothing,\n                 GetType(Console).GetMethod(&quot;WriteLine&quot;, New Type() {GetType(String)}),\n                 Expression.Constant(&quot;The condition is true.&quot;)\n             ),\n             Expression.Call(\n                 Nothing,\n                 GetType(Console).GetMethod(&quot;WriteLine&quot;, New Type() {GetType(String)}),\n                 Expression.Constant(&quot;The condition is false.&quot;)\n             )\n        )\n\n        &#39; The following statement first creates an expression tree,\n        &#39; then compiles it, and then runs it.\n        Expression.Lambda(Of Action)(ifThenElseExpr).Compile()()\n\n        &#39; This code example produces the following output:\n        &#39;\n        &#39; The condition is true.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#33\">            // Add the following directive to the file:\n            // using System.Linq.Expressions;  \n            bool test = true;\n\n            // This expression represents the conditional block.\n            Expression ifThenElseExpr = Expression.IfThenElse(\n                Expression.Constant(test),\n                Expression.Call(\n                    null,\n                    typeof(Console).GetMethod(&quot;WriteLine&quot;, new Type[] { typeof(String) }),\n                    Expression.Constant(&quot;The condition is true.&quot;)\n                ),\n                Expression.Call(\n                    null,\n                    typeof(Console).GetMethod(&quot;WriteLine&quot;, new Type[] { typeof(String) }),\n                    Expression.Constant(&quot;The condition is false.&quot;)\n                )\n            );\n\n            // The following statement first creates an expression tree,\n            // then compiles it, and then runs it.\n            Expression.Lambda&lt;Action&gt;(ifThenElseExpr).Compile()();\n\n            // This code example produces the following output:\n            //\n            // The condition is true.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Increment_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Increment_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Increment(Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents the incrementing of the expression value by 1.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.UnaryExpression Increment (System.Linq.Expressions.Expression expression);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to increment.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents the incremented expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This expression is functional and does not change the value of the object that is passed to it.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create an expression that represents an increment operation.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#24\">        &#39;Add the following directive to your file:\n        &#39; Imports System.Linq.Expressions   \n        Dim num As Double = 5.5\n        &#39; This expression represents an increment operation. \n        Dim incrementExpr As Expression = Expression.Increment(\n                                    Expression.Constant(num)\n                                )\n\n        &#39; Print the expression.\n        Console.WriteLine(incrementExpr.ToString())\n\n        &#39; The following statement first creates an expression tree,\n        &#39; then compiles it, and then executes it.\n        Console.WriteLine(Expression.Lambda(Of Func(Of Double))(incrementExpr).Compile()())\n\n        &#39; The value of the variable did not change,\n        &#39; because the expression is functional.\n        Console.WriteLine(&quot;object: &quot; &amp; num)\n\n        &#39; This code example produces the following output:\n        &#39;\n        &#39; Increment(5.5)\n        &#39; 6.5\n        &#39; object: 5.5\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#24\">            // Add the following directive to your file:\n            // using System.Linq.Expressions;  \n\n            // This expression represents an increment operation. \n            double num = 5.5;\n            Expression incrementExpr = Expression.Increment(\n                                        Expression.Constant(num)\n                                    );\n\n\n            // Print out the expression.\n            Console.WriteLine(incrementExpr.ToString());\n\n            // The following statement first creates an expression tree,\n            // then compiles it, and then executes it.\n            Console.WriteLine(Expression.Lambda&lt;Func&lt;double&gt;&gt;(incrementExpr).Compile()());\n\n            // The value of the variable did not change,\n            // because the expression is functional.\n            Console.WriteLine(&quot;object: &quot; + num);\n\n            // This code example produces the following output:\n            //\n            // Increment(5.5)\n            // 6.5\n            // object: 5.5\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Increment_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Increment_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Increment(Expression,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents the incrementing of the expression by 1.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.UnaryExpression Increment (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to increment.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents the implementing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents the incremented expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This expression is functional and does not change the value of the object that is passed to it.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Invoke_System_Linq_Expressions_Expression_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression__\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Invoke_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Invoke(Expression,IEnumerable&lt;Expression&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates an <a class=\"xref\" href=\"system.linq.expressions.invocationexpression\" data-linktype=\"relative-path\">InvocationExpression</a> that applies a delegate or lambda expression to a list of argument expressions.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.InvocationExpression Invoke (System.Linq.Expressions.Expression expression, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> that represents the delegate or lambda expression to be applied to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arguments</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> objects that represent the arguments that the delegate or lambda expression is applied to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.invocationexpression\" data-linktype=\"relative-path\">InvocationExpression</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.invocationexpression\" data-linktype=\"relative-path\">InvocationExpression</a> that applies the specified delegate or lambda expression to the provided arguments.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>expression</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>expression</code>.Type does not represent a delegate type or an <span class=\"xref\">stem.Linq.Expressions.Expression`1</span>.  </p>\n<p> -or-  </p>\n<p> The <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property of an element of <code>arguments</code> is not assignable to the type of the corresponding parameter of the delegate represented by <code>expression</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>arguments</code> does not contain the same number of elements as the list of parameters for the delegate represented by <code>expression</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.invocationexpression\" data-linktype=\"relative-path\">InvocationExpression</a> represents the return type of the delegate that is represented by <code>expression</code>.Type.  </p>\n<p> The <a class=\"xref\" href=\"system.linq.expressions.invocationexpression#System_Linq_Expressions_InvocationExpression_Arguments_\" data-linktype=\"relative-path\">Arguments</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.invocationexpression\" data-linktype=\"relative-path\">InvocationExpression</a> is empty if <code>arguments</code> is <code>null</code>. Otherwise, it contains the same elements as <code>arguments</code> except that some of these <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> objects may be <em>quoted</em>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An element will be quoted only if the corresponding parameter of the delegate represented by <code>expression</code> is of type <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>. Quoting means the element is wrapped in a <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> node. The resulting node is a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> whose <a class=\"xref\" href=\"system.linq.expressions.unaryexpression#System_Linq_Expressions_UnaryExpression_Operand_\" data-linktype=\"relative-path\">Operand</a> property is the element of <code>arguments</code>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the [Invoke(Expression,â€‚Expression&lt;xref:System.Linq.Expressions.Expression.Invoke%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29&gt; method to create an <a class=\"xref\" href=\"system.linq.expressions.invocationexpression\" data-linktype=\"relative-path\">InvocationExpression</a> that represents the invocation of a lambda expression with specified arguments.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.Expression#6\">            System.Linq.Expressions.Expression&lt;Func&lt;int, int, bool&gt;&gt; largeSumTest =\n                (num1, num2) =&gt; (num1 + num2) &gt; 1000;\n\n            // Create an InvocationExpression that represents applying\n            // the arguments &#39;539&#39; and &#39;281&#39; to the lambda expression &#39;largeSumTest&#39;.\n            System.Linq.Expressions.InvocationExpression invocationExpression =\n                System.Linq.Expressions.Expression.Invoke(\n                    largeSumTest,\n                    System.Linq.Expressions.Expression.Constant(539),\n                    System.Linq.Expressions.Expression.Constant(281));\n\n            Console.WriteLine(invocationExpression.ToString());\n\n            // This code produces the following output:\n            //\n            // Invoke((num1, num2) =&gt; ((num1 + num2) &gt; 1000),539,281)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.Expression#6\">        Dim largeSumTest As System.Linq.Expressions.Expression(Of System.Func(Of Integer, Integer, Boolean)) = _\n            Function(num1, num2) (num1 + num2) &gt; 1000\n\n        &#39; Create an InvocationExpression that represents applying\n        &#39; the arguments &#39;539&#39; and &#39;281&#39; to the lambda expression &#39;largeSumTest&#39;.\n        Dim invocationExpression As System.Linq.Expressions.InvocationExpression = _\n            System.Linq.Expressions.Expression.Invoke( _\n                largeSumTest, _\n                System.Linq.Expressions.Expression.Constant(539), _\n                System.Linq.Expressions.Expression.Constant(281))\n\n        Console.WriteLine(invocationExpression.ToString())\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; Invoke((num1, num2) =&gt; ((num1 + num2) &gt; 1000),539,281)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Invoke_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression___\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Invoke_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Invoke(Expression,Expression[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates an <a class=\"xref\" href=\"system.linq.expressions.invocationexpression\" data-linktype=\"relative-path\">InvocationExpression</a> that applies a delegate or lambda expression to a list of argument expressions.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.InvocationExpression Invoke (System.Linq.Expressions.Expression expression, System.Linq.Expressions.Expression[] arguments);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> that represents the delegate or lambda expression to be applied.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arguments</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> objects that represent the arguments that the delegate or lambda expression is applied to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.invocationexpression\" data-linktype=\"relative-path\">InvocationExpression</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.invocationexpression\" data-linktype=\"relative-path\">InvocationExpression</a> that applies the specified delegate or lambda expression to the provided arguments.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>expression</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>expression</code>.Type does not represent a delegate type or an <span class=\"xref\">stem.Linq.Expressions.Expression`1</span>.  </p>\n<p> -or-  </p>\n<p> The <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property of an element of <code>arguments</code> is not assignable to the type of the corresponding parameter of the delegate represented by <code>expression</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>arguments</code> does not contain the same number of elements as the list of parameters for the delegate represented by <code>expression</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.invocationexpression\" data-linktype=\"relative-path\">InvocationExpression</a> represents the return type of the delegate that is represented by <code>expression</code>.Type.  </p>\n<p> The <a class=\"xref\" href=\"system.linq.expressions.invocationexpression#System_Linq_Expressions_InvocationExpression_Arguments_\" data-linktype=\"relative-path\">Arguments</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.invocationexpression\" data-linktype=\"relative-path\">InvocationExpression</a> is empty if <code>arguments</code> is <code>null</code>. Otherwise, it contains the same elements as <code>arguments</code> except that some of these <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> objects may be <em>quoted</em>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An element will be quoted only if the corresponding parameter of the delegate represented by <code>expression</code> is of type <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>. Quoting means the element is wrapped in a <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> node. The resulting node is a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> whose <a class=\"xref\" href=\"system.linq.expressions.unaryexpression#System_Linq_Expressions_UnaryExpression_Operand_\" data-linktype=\"relative-path\">Operand</a> property is the element of <code>arguments</code>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the Invoke method to create an <a class=\"xref\" href=\"system.linq.expressions.invocationexpression\" data-linktype=\"relative-path\">InvocationExpression</a> that represents the invocation of a lambda expression with specified arguments.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.Expression#6\">            System.Linq.Expressions.Expression&lt;Func&lt;int, int, bool&gt;&gt; largeSumTest =\n                (num1, num2) =&gt; (num1 + num2) &gt; 1000;\n\n            // Create an InvocationExpression that represents applying\n            // the arguments &#39;539&#39; and &#39;281&#39; to the lambda expression &#39;largeSumTest&#39;.\n            System.Linq.Expressions.InvocationExpression invocationExpression =\n                System.Linq.Expressions.Expression.Invoke(\n                    largeSumTest,\n                    System.Linq.Expressions.Expression.Constant(539),\n                    System.Linq.Expressions.Expression.Constant(281));\n\n            Console.WriteLine(invocationExpression.ToString());\n\n            // This code produces the following output:\n            //\n            // Invoke((num1, num2) =&gt; ((num1 + num2) &gt; 1000),539,281)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.Expression#6\">        Dim largeSumTest As System.Linq.Expressions.Expression(Of System.Func(Of Integer, Integer, Boolean)) = _\n            Function(num1, num2) (num1 + num2) &gt; 1000\n\n        &#39; Create an InvocationExpression that represents applying\n        &#39; the arguments &#39;539&#39; and &#39;281&#39; to the lambda expression &#39;largeSumTest&#39;.\n        Dim invocationExpression As System.Linq.Expressions.InvocationExpression = _\n            System.Linq.Expressions.Expression.Invoke( _\n                largeSumTest, _\n                System.Linq.Expressions.Expression.Constant(539), _\n                System.Linq.Expressions.Expression.Constant(281))\n\n        Console.WriteLine(invocationExpression.ToString())\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; Invoke((num1, num2) =&gt; ((num1 + num2) &gt; 1000),539,281)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_IsFalse_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_IsFalse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsFalse(Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Returns whether the expression evaluates to false.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.UnaryExpression IsFalse (System.Linq.Expressions.Expression expression);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to evaluate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a></div>\r\n                  </div>\r\n                  <p>An instance of <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_IsFalse_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_IsFalse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsFalse(Expression,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Returns whether the expression evaluates to false.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.UnaryExpression IsFalse (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to evaluate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents the implementing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a></div>\r\n                  </div>\r\n                  <p>An instance of <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_IsTrue_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_IsTrue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsTrue(Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Returns whether the expression evaluates to true.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.UnaryExpression IsTrue (System.Linq.Expressions.Expression expression);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to evaluate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a></div>\r\n                  </div>\r\n                  <p>An instance of <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_IsTrue_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_IsTrue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsTrue(Expression,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Returns whether the expression evaluates to true.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.UnaryExpression IsTrue (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to evaluate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents the implementing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a></div>\r\n                  </div>\r\n                  <p>An instance of <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Label\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Label_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Label()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a> representing a label with void type and no name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.LabelTarget Label ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a></div>\r\n                  </div>\r\n                  <p>The new <a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to create an expression that contains a <a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a> object.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#43\">        &#39; Add the following directive to the file:\n        &#39; Imports System.Linq.Expressions  \n        &#39; A label expression of the void type that is the target for Expression.Return().\n        Dim returnTarget As LabelTarget = Expression.Label()\n\n        &#39; This block contains a GotoExpression that represents a return statement with no value.\n        &#39; It transfers execution to a label expression that is initialized with the same LabelTarget as the GotoExpression.\n        &#39; The types of the GotoExpression, label expression, and LabelTarget must match.\n        Dim blockExpr As BlockExpression =\n              Expression.Block(\n                  Expression.Call(GetType(Console).GetMethod(&quot;WriteLine&quot;, New Type() {GetType(String)}), Expression.Constant(&quot;Return&quot;)),\n                  Expression.Return(returnTarget),\n                  Expression.Call(GetType(Console).GetMethod(&quot;WriteLine&quot;, New Type() {GetType(String)}), Expression.Constant(&quot;Other Work&quot;)),\n                  Expression.Label(returnTarget)\n              )\n\n        &#39; The following statement first creates an expression tree,\n        &#39; then compiles it, and then runs it.\n        Expression.Lambda(Of Action)(blockExpr).Compile()()\n\n        &#39; This code example produces the following output:\n        &#39;\n        &#39; Return\n\n        &#39; &quot;Other Work&quot; is not printed because \n        &#39; the Return expression transfers execution from Return(returnTarget)\n        &#39; to Expression.Label(returnTarget).\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#43\">            // Add the following directive to the file:\n            // using System.Linq.Expressions;  \n\n            // A label expression of the void type that is the target for Expression.Return().\n            LabelTarget returnTarget = Expression.Label();\n\n            // This block contains a GotoExpression that represents a return statement with no value.\n            // It transfers execution to a label expression that is initialized with the same LabelTarget as the GotoExpression.\n            // The types of the GotoExpression, label expression, and LabelTarget must match.\n            BlockExpression blockExpr =\n                Expression.Block(\n                    Expression.Call(typeof(Console).GetMethod(&quot;WriteLine&quot;, new Type[] { typeof(string) }), Expression.Constant(&quot;Return&quot;)),\n                    Expression.Return(returnTarget),\n                    Expression.Call(typeof(Console).GetMethod(&quot;WriteLine&quot;, new Type[] { typeof(string) }), Expression.Constant(&quot;Other Work&quot;)),\n                    Expression.Label(returnTarget)\n                );\n\n            // The following statement first creates an expression tree,\n            // then compiles it, and then runs it.\n            Expression.Lambda&lt;Action&gt;(blockExpr).Compile()();\n\n            // This code example produces the following output:\n            //\n            // Return\n\n            // &quot;Other Work&quot; is not printed because \n            // the Return expression transfers execution from Expression.Return(returnTarget)\n            // to Expression.Label(returnTarget).\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Label_System_Linq_Expressions_LabelTarget_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Label_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Label(LabelTarget)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.labelexpression\" data-linktype=\"relative-path\">LabelExpression</a> representing a label without a default value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.LabelExpression Label (System.Linq.Expressions.LabelTarget target);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a> which this <a class=\"xref\" href=\"system.linq.expressions.labelexpression\" data-linktype=\"relative-path\">LabelExpression</a> will be associated with.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.labelexpression\" data-linktype=\"relative-path\">LabelExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.labelexpression\" data-linktype=\"relative-path\">LabelExpression</a> without a default value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Label_System_String_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Label_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Label(String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a> representing a label with void type and the given name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.LabelTarget Label (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the label.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a></div>\r\n                  </div>\r\n                  <p>The new <a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Label_System_Type_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Label_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Label(Type)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a> representing a label with the given type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.LabelTarget Label (Type type);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of value that is passed when jumping to the label.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a></div>\r\n                  </div>\r\n                  <p>The new <a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use a <a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a> object in a loop expression.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#44\">        &#39; Add the following directive to the file:\n        &#39; Imports System.Linq.Expressions  \n        &#39; Creating a parameter expression.\n        Dim value As ParameterExpression =\n            Expression.Parameter(GetType(Integer), &quot;value&quot;)\n\n        &#39; Creating an expression to hold a local variable. \n        Dim result As ParameterExpression =\n            Expression.Parameter(GetType(Integer), &quot;result&quot;)\n\n        &#39; Creating a label to jump to from a loop.\n        Dim label As LabelTarget = Expression.Label(GetType(Integer))\n\n        &#39; Creating a method body.\n        Dim block As BlockExpression = Expression.Block(\n            New ParameterExpression() {result},\n            Expression.Assign(result, Expression.Constant(1)),\n            Expression.Loop(\n                Expression.IfThenElse(\n                    Expression.GreaterThan(value, Expression.Constant(1)),\n                    Expression.MultiplyAssign(result,\n                        Expression.PostDecrementAssign(value)),\n                    Expression.Break(label, result)\n                ),\n                label\n            )\n        )\n\n        &#39; Compile an expression tree and return a delegate.\n        Dim factorial As Integer =\n            Expression.Lambda(Of Func(Of Integer, Integer))(block, value).Compile()(5)\n\n        Console.WriteLine(factorial)\n\n        &#39; This code example produces the following output:\n        &#39;\n        &#39; 120\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#44\">            // Add the following directive to the file:\n            // using System.Linq.Expressions;  \n\n            // Creating a parameter expression.\n            ParameterExpression value = Expression.Parameter(typeof(int), &quot;value&quot;);\n\n            // Creating an expression to hold a local variable. \n            ParameterExpression result = Expression.Parameter(typeof(int), &quot;result&quot;);\n\n            // Creating a label to jump to from a loop.\n            LabelTarget label = Expression.Label(typeof(int));\n\n            // Creating a method body.\n            BlockExpression block = Expression.Block(\n                new[] { result },\n                Expression.Assign(result, Expression.Constant(1)),\n                    Expression.Loop(\n                       Expression.IfThenElse(\n                           Expression.GreaterThan(value, Expression.Constant(1)),\n                           Expression.MultiplyAssign(result,\n                               Expression.PostDecrementAssign(value)),\n                           Expression.Break(label, result)\n                       ),\n                   label\n                )\n            );\n\n            // Compile and run an expression tree.\n            int factorial = Expression.Lambda&lt;Func&lt;int, int&gt;&gt;(block, value).Compile()(5);\n\n            Console.WriteLine(factorial);\n\n            // This code example produces the following output:\n            //\n            // 120\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Label_System_Linq_Expressions_LabelTarget_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Label_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Label(LabelTarget,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.labelexpression\" data-linktype=\"relative-path\">LabelExpression</a> representing a label with the given default value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.LabelExpression Label (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression defaultValue);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a> which this <a class=\"xref\" href=\"system.linq.expressions.labelexpression\" data-linktype=\"relative-path\">LabelExpression</a> will be associated with.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>defaultValue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of this <a class=\"xref\" href=\"system.linq.expressions.labelexpression\" data-linktype=\"relative-path\">LabelExpression</a> when the label is reached through regular control flow.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.labelexpression\" data-linktype=\"relative-path\">LabelExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.labelexpression\" data-linktype=\"relative-path\">LabelExpression</a> with the given default value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Label_System_Type_System_String_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Label_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Label(Type,String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a> representing a label with the given type and name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.LabelTarget Label (Type type, string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of value that is passed when jumping to the label.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the label.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a></div>\r\n                  </div>\r\n                  <p>The new <a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Lambda_System_Linq_Expressions_Expression_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ParameterExpression__\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Lambda_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Lambda(Expression,IEnumerable&lt;ParameterExpression&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a LambdaExpression by first constructing a delegate type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Body*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameters</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains <a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Parameters*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.NodeType*</span> property equal to Lambda and the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Body*</span> and <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Parameters*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Lambda_System_Linq_Expressions_Expression_System_Linq_Expressions_ParameterExpression___\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Lambda_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Lambda(Expression,ParameterExpression[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a> by first constructing a delegate type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, System.Linq.Expressions.ParameterExpression[] parameters);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Body*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameters</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Parameters*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Body*</span> and <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Parameters*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>body</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> One or more elements of <code>parameters</code> are <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>parameters</code> contains more than sixteen elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>parameters</code> parameter must not have more than sixteen elements.  </p>\n<p> The elements of <code>parameters</code> must be reference equal to the parameter expressions in <code>body</code>.  </p>\n<p> This method constructs an appropriate delegate type from one of the <code>System.Func</code> generic delegates. It then passes the delegate type to one of the <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> factory methods to create a <a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Lambda_System_Linq_Expressions_Expression_System_Boolean_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ParameterExpression__\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Lambda_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Lambda(Expression,Boolean,IEnumerable&lt;ParameterExpression&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a LambdaExpression by first constructing a delegate type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Body*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>tailCall</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> that indicates if tail call optimization will be applied when compiling the created expression.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameters</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains <a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Parameters*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.NodeType*</span> property equal to Lambda and the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Body*</span> and <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Parameters*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Lambda_System_Linq_Expressions_Expression_System_Boolean_System_Linq_Expressions_ParameterExpression___\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Lambda_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Lambda(Expression,Boolean,ParameterExpression[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a LambdaExpression by first constructing a delegate type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, bool tailCall, System.Linq.Expressions.ParameterExpression[] parameters);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Body*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>tailCall</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> that indicates if tail call optimization will be applied when compiling the created expression.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameters</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array that contains <a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Parameters*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.NodeType*</span> property equal to Lambda and the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Body*</span> and <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Parameters*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Lambda_System_Linq_Expressions_Expression_System_String_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ParameterExpression__\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Lambda_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Lambda(Expression,String,IEnumerable&lt;ParameterExpression&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a LambdaExpression by first constructing a delegate type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, string name, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Body*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name for the lambda. Used for emitting debug information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameters</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains <a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Parameters*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.NodeType*</span> property equal to Lambda and the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Body*</span> and <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Parameters*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Lambda_System_Type_System_Linq_Expressions_Expression_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ParameterExpression__\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Lambda_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Lambda(Type,Expression,IEnumerable&lt;ParameterExpression&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a> by first constructing a delegate type. It can be used when the delegate type is not known at compile time.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>delegateType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> that represents a delegate signature for the lambda.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Body*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameters</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains <a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Parameters*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a></div>\r\n                  </div>\r\n                  <p>An object that represents a lambda expression which has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Body*</span> and <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Parameters*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>delegateType</code> or <code>body</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> One or more elements in <code>parameters</code> are <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>delegateType</code> does not represent a delegate type.  </p>\n<p> -or-  </p>\n<p> <code>body</code>.Type represents a type that is not assignable to the return type of the delegate type represented by <code>delegateType</code>.  </p>\n<p> -or-  </p>\n<p> <code>parameters</code> does not contain the same number of elements as the list of parameters for the delegate type represented by <code>delegateType</code>.  </p>\n<p> -or-  </p>\n<p> The <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property of an element of <code>parameters</code> is not assignable from the type of the corresponding parameter type of the delegate type represented by <code>delegateType</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The object that is returned from this function is of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>. The <a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a> type is used to represent the returned object because the concrete type of the lambda expression is not known at compile time.  </p>\n<p> The number of parameters for the delegate type represented by<code>delegateType</code> must equal the length of <code>parameters</code>.  </p>\n<p> The elements of <code>parameters</code> must be reference equal to the parameter expressions in <code>body</code>.  </p>\n<p> The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of the resulting object is equal to <code>delegateType</code>. If <code>parameters</code> is <code>null</code>, the <a class=\"xref\" href=\"system.linq.expressions.lambdaexpression#System_Linq_Expressions_LambdaExpression_Parameters_\" data-linktype=\"relative-path\">Parameters</a> property of the resulting object is an empty collection.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to create an expression that represents a lambda expression that adds 1 to the passed argument.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#42\">        &#39; Add the following directive to your file:\n        &#39; Imports System.Linq.Expressions  \n\n        &#39; A parameter for the lambda expression.\n        Dim paramExpr As ParameterExpression = Expression.Parameter(GetType(Integer), &quot;arg&quot;)\n\n        &#39; This expression represents a lambda expression\n        &#39; that adds 1 to the parameter value.\n        Dim lambdaExpr As LambdaExpression = Expression.Lambda(\n                Expression.Add(\n                    paramExpr,\n                    Expression.Constant(1)\n                ),\n                New List(Of ParameterExpression)() From {paramExpr}\n            )\n\n        &#39; Print out the expression.\n        Console.WriteLine(lambdaExpr)\n\n        &#39; Compile and run the lamda expression.\n        &#39; The value of the parameter is 1.\n        Console.WriteLine(lambdaExpr.Compile().DynamicInvoke(1))\n\n        &#39; This code example produces the following output:\n        &#39;\n        &#39; arg =&gt; (arg +1)\n        &#39; 2\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#42\">            // Add the following directive to your file:\n            // using System.Linq.Expressions;  \n\n            // A parameter for the lambda expression.\n            ParameterExpression paramExpr = Expression.Parameter(typeof(int), &quot;arg&quot;);\n\n            // This expression represents a lambda expression\n            // that adds 1 to the parameter value.\n            LambdaExpression lambdaExpr = Expression.Lambda(\n                Expression.Add(\n                    paramExpr,\n                    Expression.Constant(1)\n                ),\n                new List&lt;ParameterExpression&gt;() { paramExpr }\n            );\n            \n            // Print out the expression.\n            Console.WriteLine(lambdaExpr);\n\n            // Compile and run the lamda expression.\n            // The value of the parameter is 1.\n            Console.WriteLine(lambdaExpr.Compile().DynamicInvoke(1));\n\n            // This code example produces the following output:\n            //\n            // arg =&gt; (arg +1)\n            // 2\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Lambda_System_Type_System_Linq_Expressions_Expression_System_Linq_Expressions_ParameterExpression___\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Lambda_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Lambda(Type,Expression,ParameterExpression[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a> by first constructing a delegate type. It can be used when the delegate type is not known at compile time.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, System.Linq.Expressions.ParameterExpression[] parameters);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>delegateType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> that represents a delegate signature for the lambda.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Body*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameters</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Parameters*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a></div>\r\n                  </div>\r\n                  <p>An object that represents a lambda expression which has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Body*</span> and <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Parameters*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>delegateType</code> or <code>body</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> One or more elements in <code>parameters</code> are <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>delegateType</code> does not represent a delegate type.  </p>\n<p> -or-  </p>\n<p> <code>body</code>.Type represents a type that is not assignable to the return type of the delegate type represented by <code>delegateType</code>.  </p>\n<p> -or-  </p>\n<p> <code>parameters</code> does not contain the same number of elements as the list of parameters for the delegate type represented by <code>delegateType</code>.  </p>\n<p> -or-  </p>\n<p> The <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property of an element of <code>parameters</code> is not assignable from the type of the corresponding parameter type of the delegate type represented by <code>delegateType</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The object that is returned from this function is of type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>. The <a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a> type is used to represent the returned object because the concrete type of the lambda expression is not known at compile time.  </p>\n<p> The number of parameters for the delegate type represented by <code>delegateType</code> must equal the length of <code>parameters</code>.  </p>\n<p> The elements of <code>parameters</code> must be reference equal to the parameter expressions in <code>body</code>.  </p>\n<p> The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of the resulting object is equal to <code>delegateType</code>. If <code>parameters</code> is <code>null</code>, the <a class=\"xref\" href=\"system.linq.expressions.lambdaexpression#System_Linq_Expressions_LambdaExpression_Parameters_\" data-linktype=\"relative-path\">Parameters</a> property of the resulting object is an empty collection.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Lambda_System_Linq_Expressions_Expression_System_String_System_Boolean_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ParameterExpression__\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Lambda_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Lambda(Expression,String,Boolean,IEnumerable&lt;ParameterExpression&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a LambdaExpression by first constructing a delegate type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, string name, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Body*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name for the lambda. Used for emitting debug information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>tailCall</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> that indicates if tail call optimization will be applied when compiling the created expression.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameters</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains <a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Parameters*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.NodeType*</span> property equal to Lambda and the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Body*</span> and <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Parameters*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Lambda_System_Type_System_Linq_Expressions_Expression_System_Boolean_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ParameterExpression__\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Lambda_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Lambda(Type,Expression,Boolean,IEnumerable&lt;ParameterExpression&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a LambdaExpression by first constructing a delegate type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>delegateType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> representing the delegate signature for the lambda.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Body*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>tailCall</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> that indicates if tail call optimization will be applied when compiling the created expression.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameters</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains <a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Parameters*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.NodeType*</span> property equal to Lambda and the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Body*</span> and <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Parameters*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Lambda_System_Type_System_Linq_Expressions_Expression_System_Boolean_System_Linq_Expressions_ParameterExpression___\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Lambda_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Lambda(Type,Expression,Boolean,ParameterExpression[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a LambdaExpression by first constructing a delegate type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, bool tailCall, System.Linq.Expressions.ParameterExpression[] parameters);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>delegateType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> representing the delegate signature for the lambda.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Body*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>tailCall</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> that indicates if tail call optimization will be applied when compiling the created expression.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameters</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array that contains <a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Parameters*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.NodeType*</span> property equal to Lambda and the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Body*</span> and <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Parameters*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Lambda_System_Type_System_Linq_Expressions_Expression_System_String_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ParameterExpression__\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Lambda_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Lambda(Type,Expression,String,IEnumerable&lt;ParameterExpression&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a LambdaExpression by first constructing a delegate type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, string name, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>delegateType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> representing the delegate signature for the lambda.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Body*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name for the lambda. Used for emitting debug information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameters</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains <a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Parameters*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.NodeType*</span> property equal to Lambda and the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Body*</span> and <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Parameters*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Lambda_System_Type_System_Linq_Expressions_Expression_System_String_System_Boolean_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ParameterExpression__\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Lambda_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Lambda(Type,Expression,String,Boolean,IEnumerable&lt;ParameterExpression&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a LambdaExpression by first constructing a delegate type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, string name, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>delegateType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> representing the delegate signature for the lambda.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Body*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name for the lambda. Used for emitting debug information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>tailCall</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> that indicates if tail call optimization will be applied when compiling the created expression.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameters</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains <a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Parameters*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.NodeType*</span> property equal to Lambda and the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Body*</span> and <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Parameters*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Lambda__1_System_Linq_Expressions_Expression_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ParameterExpression__\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Lambda_TDelegate__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Lambda&lt;TDelegate&gt;(Expression,IEnumerable&lt;ParameterExpression&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates an <span class=\"xref\">stem.Linq.Expressions.Expression`1</span> where the delegate type is known at compile time.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Body*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameters</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains <a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Parameters*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression<tdelegate></tdelegate></a></div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.Expressions.Expression`1</span> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Body*</span> and <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Parameters*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>body</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> One or more elements in <code>parameters</code> are <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>TDelegate</code> is not a delegate type.  </p>\n<p> -or-  </p>\n<p> <code>body</code>.Type represents a type that is not assignable to the return type of <code>TDelegate</code>.  </p>\n<p> -or-  </p>\n<p> <code>parameters</code> does not contain the same number of elements as the list of parameters for <code>TDelegate</code>.  </p>\n<p> -or-  </p>\n<p> The <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property of an element of <code>parameters</code> is not assignable from the type of the corresponding parameter type of <code>TDelegate</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The number of parameters for the delegate type <code>TDelegate</code> must equal the number of elements in <code>parameters</code>.  </p>\n<p> The elements of <code>parameters</code> must be reference equal to the parameter expressions in <code>body</code>.  </p>\n<p> The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of the resulting object represents the type <code>TDelegate</code>. If <code>parameters</code> is <code>null</code>, the <a class=\"xref\" href=\"system.linq.expressions.lambdaexpression#System_Linq_Expressions_LambdaExpression_Parameters_\" data-linktype=\"relative-path\">Parameters</a> property of the resulting object is an empty collection.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Lambda__1_System_Linq_Expressions_Expression_System_Linq_Expressions_ParameterExpression___\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Lambda_TDelegate__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Lambda&lt;TDelegate&gt;(Expression,ParameterExpression[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates an <span class=\"xref\">stem.Linq.Expressions.Expression`1</span> where the delegate type is known at compile time.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, System.Linq.Expressions.ParameterExpression[] parameters);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Body*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameters</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Parameters*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression<tdelegate></tdelegate></a></div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.Expressions.Expression`1</span> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Body*</span> and <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Parameters*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>body</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> One or more elements in <code>parameters</code> are <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>TDelegate</code> is not a delegate type.  </p>\n<p> -or-  </p>\n<p> <code>body</code>.Type represents a type that is not assignable to the return type of <code>TDelegate</code>.  </p>\n<p> -or-  </p>\n<p> <code>parameters</code> does not contain the same number of elements as the list of parameters for <code>TDelegate</code>.  </p>\n<p> -or-  </p>\n<p> The <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property of an element of <code>parameters</code> is not assignable from the type of the corresponding parameter type of <code>TDelegate</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The number of parameters for the delegate type <code>TDelegate</code> must equal the number of elements in <code>parameters</code>.  </p>\n<p> The elements of <code>parameters</code> must be reference equal to the parameter expressions in<code>body</code>.  </p>\n<p> The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of the resulting object represents the type <code>TDelegate</code>. If <code>parameters</code> is <code>null</code>, the <a class=\"xref\" href=\"system.linq.expressions.lambdaexpression#System_Linq_Expressions_LambdaExpression_Parameters_\" data-linktype=\"relative-path\">Parameters</a> property of the resulting object is an empty collection.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Lambda__1_System_Linq_Expressions_Expression_System_Boolean_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ParameterExpression__\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Lambda_TDelegate__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Lambda&lt;TDelegate&gt;(Expression,Boolean,IEnumerable&lt;ParameterExpression&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates an <span class=\"xref\">stem.Linq.Expressions.Expression`1</span> where the delegate type is known at compile time.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Body*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>tailCall</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> that indicates if tail call optimization will be applied when compiling the created expression.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameters</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains <a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Parameters*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression<tdelegate></tdelegate></a></div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.Expressions.Expression`1</span> that has the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Body*</span> and <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Parameters*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Lambda__1_System_Linq_Expressions_Expression_System_Boolean_System_Linq_Expressions_ParameterExpression___\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Lambda_TDelegate__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Lambda&lt;TDelegate&gt;(Expression,Boolean,ParameterExpression[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates an <span class=\"xref\">stem.Linq.Expressions.Expression`1</span> where the delegate type is known at compile time.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, bool tailCall, System.Linq.Expressions.ParameterExpression[] parameters);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Body*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>tailCall</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> that indicates if tail call optimization will be applied when compiling the created expression.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameters</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array that contains <a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Parameters*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression<tdelegate></tdelegate></a></div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.Expressions.Expression`1</span> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Body*</span> and <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Parameters*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Lambda__1_System_Linq_Expressions_Expression_System_String_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ParameterExpression__\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Lambda_TDelegate__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Lambda&lt;TDelegate&gt;(Expression,String,IEnumerable&lt;ParameterExpression&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates an <span class=\"xref\">stem.Linq.Expressions.Expression`1</span> where the delegate type is known at compile time.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, string name, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Body*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the lambda. Used for generating debugging information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameters</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains <a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Parameters*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression<tdelegate></tdelegate></a></div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.Expressions.Expression`1</span> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Body*</span> and <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Parameters*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Lambda__1_System_Linq_Expressions_Expression_System_String_System_Boolean_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ParameterExpression__\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Lambda_TDelegate__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Lambda&lt;TDelegate&gt;(Expression,String,Boolean,IEnumerable&lt;ParameterExpression&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates an <span class=\"xref\">stem.Linq.Expressions.Expression`1</span> where the delegate type is known at compile time.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, string name, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Body*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the lambda. Used for generating debugging info.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>tailCall</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> that indicates if tail call optimization will be applied when compiling the created expression.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameters</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains <a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Parameters*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression<tdelegate></tdelegate></a></div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.Expressions.Expression`1</span> that has the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Body*</span> and <span class=\"xref\">stem.Linq.Expressions.LambdaExpression.Parameters*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_LeftShift_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_LeftShift_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LeftShift(Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a bitwise left-shift operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression LeftShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>right</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The left-shift operator is not defined for <code>left</code>.Type and <code>right</code>.Type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The resulting <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> has the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> and <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> properties are both <code>true</code>. Otherwise, they are <code>false</code>. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Conversion_\" data-linktype=\"relative-path\">Conversion</a> property is <code>null</code>.  </p>\n<p> The following information describes the implementing method, the node type, and whether a node is lifted.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the selected implementing method for the operation:  </p>\n<ul>\n<li><p>If the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of either <code>left</code> or <code>right</code> represents a user-defined type that overloads the left-shift operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that method is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if <code>left</code>.Type is an integral type (one of <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>, <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>, <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a>, <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a>, <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>, <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a>, <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>, <a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a>, or the corresponding nullable types) and <code>right</code>.Type is <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  </p>\n<ul>\n<li><p><code>left</code>.Type and <code>right</code>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is a non-nullable value type.  </p>\n</li>\n</ul>\n<p>If the implementing method is <code>null</code>:  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined left-shift operator.  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined left-shift operator.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_LeftShift_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_LeftShift_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LeftShift(Expression,Expression,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a bitwise left-shift operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression LeftShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span>, and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>right</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is not <code>null</code> and the method it represents returns <code>void</code>, is not <code>static</code> (<code>Shared</code> in Visual Basic), or does not take exactly two arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is <code>null</code> and the left-shift operator is not defined for <code>left</code>.Type and <code>right</code>.Type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The resulting <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> has the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> and <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> properties are both <code>true</code>. Otherwise, they are <code>false</code>. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Conversion_\" data-linktype=\"relative-path\">Conversion</a> property is <code>null</code>.  </p>\n<p> The following information describes the implementing method, the node type, and whether a node is lifted.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the selected implementing method for the operation:  </p>\n<ul>\n<li><p>If <code>method</code> is not <code>null</code> and it represents a non-void, <code>static</code> (<code>Shared</code> in Visual Basic) method that takes two arguments, it is the implementing method for the node.  </p>\n</li>\n<li><p>Otherwise, if the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of either <code>left</code> or <code>right</code> represents a user-defined type that overloads the left-shift operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that method is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if <code>left</code>.Type is an integral type (one of <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>, <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>, <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a>, <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a>, <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>, <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a>, <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>, <a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a>, or the corresponding nullable types) and <code>right</code>.Type is <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  </p>\n<ul>\n<li><p><code>left</code>.Type and <code>right</code>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is a non-nullable value type.  </p>\n</li>\n</ul>\n<p>If the implementing method is <code>null</code>:  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined left-shift operator.  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined left-shift operator.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_LeftShiftAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_LeftShiftAssign_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LeftShiftAssign(Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a bitwise left-shift assignment operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression LeftShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_LeftShiftAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_LeftShiftAssign_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LeftShiftAssign(Expression,Expression,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a bitwise left-shift assignment operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression LeftShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span>, and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_LeftShiftAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_System_Linq_Expressions_LambdaExpression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_LeftShiftAssign_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LeftShiftAssign(Expression,Expression,MethodInfo,LambdaExpression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a bitwise left-shift assignment operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression LeftShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>conversion</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Conversion*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span>, and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Conversion*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_LessThan_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_LessThan_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LessThan(Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a &quot;less than&quot; numeric comparison.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression LessThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>right</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The &quot;less than&quot; operator is not defined for <code>left</code>.Type and <code>right</code>.Type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The resulting <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> has the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> property is <code>true</code>. Otherwise, it is <code>false</code>. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> property is always <code>false</code>. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Conversion_\" data-linktype=\"relative-path\">Conversion</a> property is <code>null</code>.  </p>\n<p> The following information describes the implementing method, the node type, and whether a node is lifted.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The implementing method for the operation is chosen based on the following rules:  </p>\n<ul>\n<li><p>If the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of either <code>left</code> or <code>right</code> represents a user-defined type that overloads the &quot;less than&quot; operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that method is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if <code>left</code>.Type and <code>right</code>.Type are numeric types, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted and the type of the node is <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>:  </p>\n<ul>\n<li><p><code>left</code>.Type and <code>right</code>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>.  </p>\n</li>\n</ul>\n<p>If the implementing method is <code>null</code>:  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both non-nullable, the node is not lifted. The type of the node is <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>.  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both nullable, the node is lifted. The type of the node is <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create an expression that compares two integers.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#25\">        &#39; Add the following directive to your file:\n        &#39; Imports System.Linq.Expressions \n\n        &#39; This expression compares the values of its two arguments.\n        &#39; Both arguments must be of the same type.\n        Dim lessThanExpr As Expression = Expression.LessThan(\n            Expression.Constant(42),\n            Expression.Constant(45)\n        )\n\n        &#39; Print the expression.\n        Console.WriteLine(lessThanExpr.ToString())\n\n        &#39; The following statement first creates an expression tree,\n        &#39; then compiles it, and then executes it.    \n        Console.WriteLine(\n            Expression.Lambda(Of Func(Of Boolean))(lessThanExpr).Compile()())\n\n        &#39; This code example produces the following output:\n        &#39;\n        &#39; (42 &lt; 45)\n        &#39; True\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#25\">            // Add the following directive to your file:\n            // using System.Linq.Expressions;  \n\n            // This expression compares the values of its two arguments.\n            // Both arguments must be of the same type.\n            Expression lessThanExpr = Expression.LessThan(\n                Expression.Constant(42),\n                Expression.Constant(45)\n            );\n\n            // Print out the expression.\n            Console.WriteLine(lessThanExpr.ToString());\n\n            // The following statement first creates an expression tree,\n            // then compiles it, and then executes it.    \n            Console.WriteLine(\n                Expression.Lambda&lt;Func&lt;bool&gt;&gt;(lessThanExpr).Compile()());\n\n            // This code example produces the following output:\n            //\n            // (42 &lt; 45)\n            // True\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_LessThan_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Boolean_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_LessThan_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LessThan(Expression,Expression,Boolean,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a &quot;less than&quot; numeric comparison.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression LessThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>liftToNull</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to set <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.IsLiftedToNull*</span> to <code>true</code>; <code>false</code> to set <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.IsLiftedToNull*</span> to <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.IsLiftedToNull*</span>, and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>right</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is not <code>null</code> and the method it represents returns <code>void</code>, is not <code>static</code> (<code>Shared</code> in Visual Basic), or does not take exactly two arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is <code>null</code> and the &quot;less than&quot; operator is not defined for <code>left</code>.Type and <code>right</code>.Type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The resulting <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> has the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> property is <code>true</code> and the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> property is equal to <code>liftToNull</code>. Otherwise, they are both <code>false</code>. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Conversion_\" data-linktype=\"relative-path\">Conversion</a> property is <code>null</code>.  </p>\n<p> The following information describes the implementing method, the node type, and whether a node is lifted.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the implementing method for the operation:  </p>\n<ul>\n<li><p>If <code>method</code> is not <code>null</code> and it represents a non-void, <code>static</code> (<code>Shared</code> in Visual Basic) method that takes two arguments, it is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of either <code>left</code> or <code>right</code> represents a user-defined type that overloads the &quot;less than&quot; operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that method is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if <code>left</code>.Type and <code>right</code>.Type are numeric types, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> if <code>liftToNull</code> is <code>true</code> or <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> if <code>liftToNull</code> is <code>false</code>:  </p>\n<ul>\n<li><p><code>left</code>.Type and <code>right</code>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>.  </p>\n</li>\n</ul>\n<p>If the implementing method is <code>null</code>:  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both non-nullable, the node is not lifted. The type of the node is <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>.  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both nullable, the node is lifted. The type of the node is nullable <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> if <code>liftToNull</code> is <code>true</code> or <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> if <code>liftToNull</code> is <code>false</code>.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_LessThanOrEqual_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_LessThanOrEqual_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LessThanOrEqual(Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a &quot; less than or equal&quot; numeric comparison.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression LessThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>right</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The &quot;less than or equal&quot; operator is not defined for <code>left</code>.Type and <code>right</code>.Type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The resulting <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> has the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> property is <code>true</code>. Otherwise, it is <code>false</code>. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> property is always <code>false</code>. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Conversion_\" data-linktype=\"relative-path\">Conversion</a> property is <code>null</code>.  </p>\n<p> The following information describes the implementing method, the node type, and whether a node is lifted.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the implementing method for the operation:  </p>\n<ul>\n<li><p>If the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of either <code>left</code> or <code>right</code> represents a user-defined type that overloads the &quot;less than or equal&quot; operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that method is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if <code>left</code>.Type and <code>right</code>.Type are numeric types, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted and the type of the node is <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>:  </p>\n<ul>\n<li><p><code>left</code>.Type and <code>right</code>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>.  </p>\n</li>\n</ul>\n<p>If the implementing method is <code>null</code>:  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both non-nullable, the node is not lifted. The type of the node is <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>.  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both nullable, the node is lifted. The type of the node is <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create an expression that compares two integers.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#26\">        &#39; Add the following directive to your file:\n        &#39; Imports System.Linq.Expressions \n\n        &#39; This expression compares the values of its two arguments.\n        &#39; Both arguments must be of the same type.\n        Dim lessThanOrEqual As Expression = Expression.LessThanOrEqual(\n             Expression.Constant(42),\n             Expression.Constant(45)\n         )\n\n        &#39; Print the expression.\n        Console.WriteLine(lessThanOrEqual.ToString())\n\n        &#39; The following statement first creates an expression tree,\n        &#39; then compiles it, and then executes it. \n        Console.WriteLine(\n            Expression.Lambda(Of Func(Of Boolean))(lessThanOrEqual).Compile()())\n\n        &#39; This code example produces the following output:\n        &#39;\n        &#39; (42 &lt;= 45)\n        &#39; True\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#26\">            // Add the following directive to your file:\n            // using System.Linq.Expressions;  \n\n            // This expression compares the values of its two arguments.\n            // Both arguments must be of the same type.\n            Expression lessThanOrEqual = Expression.LessThanOrEqual(\n                Expression.Constant(42),\n                Expression.Constant(45)\n            );\n\n            // Print out the expression.\n            Console.WriteLine(lessThanOrEqual.ToString());\n\n            // The following statement first creates an expression tree,\n            // then compiles it, and then executes it. \n            Console.WriteLine(Expression.Lambda&lt;Func&lt;bool&gt;&gt;(lessThanOrEqual).Compile()());\n\n            // This code example produces the following output:\n            //\n            // (42 &lt;= 45)\n            // True\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_LessThanOrEqual_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Boolean_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_LessThanOrEqual_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LessThanOrEqual(Expression,Expression,Boolean,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a &quot;less than or equal&quot; numeric comparison.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression LessThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>liftToNull</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to set <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.IsLiftedToNull*</span> to <code>true</code>; <code>false</code> to set <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.IsLiftedToNull*</span> to <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.IsLiftedToNull*</span>, and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>right</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is not <code>null</code> and the method it represents returns <code>void</code>, is not <code>static</code> (<code>Shared</code> in Visual Basic), or does not take exactly two arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is <code>null</code> and the &quot;less than or equal&quot; operator is not defined for <code>left</code>.Type and <code>right</code>.Type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The resulting <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> has the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> property is <code>true</code> and the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> property is equal to <code>liftToNull</code>. Otherwise, they are both <code>false</code>. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Conversion_\" data-linktype=\"relative-path\">Conversion</a> property is <code>null</code>.  </p>\n<p> The following information describes the implementing method, the node type, and whether a node is lifted.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the implementing method for the operation:  </p>\n<ul>\n<li><p>If <code>method</code> is not <code>null</code> and it represents a non-void, <code>static</code> (<code>Shared</code> in Visual Basic) method that takes two arguments, it is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of either <code>left</code> or <code>right</code> represents a user-defined type that overloads the &quot;less than or equal&quot; operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that method is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if <code>left</code>.Type and <code>right</code>.Type are numeric types, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> if <code>liftToNull</code> is <code>true</code> or <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> if <code>liftToNull</code> is <code>false</code>:  </p>\n<ul>\n<li><p><code>left</code>.Type and <code>right</code>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>.  </p>\n</li>\n</ul>\n<p>If the implementing method is <code>null</code>:  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both non-nullable, the node is not lifted. The type of the node is <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>.  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both nullable, the node is lifted. The type of the node is nullable <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> if <code>liftToNull</code> is <code>true</code> or <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> if <code>liftToNull</code> is <code>false</code>.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_ListBind_System_Reflection_MemberInfo_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ElementInit__\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_ListBind_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ListBind(MemberInfo,IEnumerable&lt;ElementInit&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.memberlistbinding\" data-linktype=\"relative-path\">MemberListBinding</a> where the member is a field or property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MemberInfo member, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt; initializers);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>member</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> that represents a field or property to set the <span class=\"xref\">stem.Linq.Expressions.MemberBinding.Member*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>initializers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.expressions.elementinit\" data-linktype=\"relative-path\">ElementInit</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains <a class=\"xref\" href=\"system.linq.expressions.elementinit\" data-linktype=\"relative-path\">ElementInit</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.MemberListBinding.Initializers*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.memberlistbinding\" data-linktype=\"relative-path\">MemberListBinding</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.memberlistbinding\" data-linktype=\"relative-path\">MemberListBinding</a> that has the <span class=\"xref\">stem.Linq.Expressions.MemberBinding.BindingType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.memberbindingtype\" data-linktype=\"relative-path\">MemberBindingType</a> and the <span class=\"xref\">stem.Linq.Expressions.MemberBinding.Member*</span> and <span class=\"xref\">stem.Linq.Expressions.MemberListBinding.Initializers*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>member</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> One or more elements of <code>initializers</code> are <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>member</code> does not represent a field or property.  </p>\n<p> -or-  </p>\n<p> The <span class=\"xref\">stem.Reflection.FieldInfo.FieldType*</span> or <span class=\"xref\">stem.Reflection.PropertyInfo.PropertyType*</span> of the field or property that <code>member</code> represents does not implement <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_ListBind_System_Reflection_MemberInfo_System_Linq_Expressions_ElementInit___\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_ListBind_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ListBind(MemberInfo,ElementInit[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.memberlistbinding\" data-linktype=\"relative-path\">MemberListBinding</a> where the member is a field or property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MemberInfo member, System.Linq.Expressions.ElementInit[] initializers);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>member</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> that represents a field or property to set the <span class=\"xref\">stem.Linq.Expressions.MemberBinding.Member*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>initializers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.elementinit\" data-linktype=\"relative-path\">ElementInit</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.linq.expressions.elementinit\" data-linktype=\"relative-path\">ElementInit</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.MemberListBinding.Initializers*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.memberlistbinding\" data-linktype=\"relative-path\">MemberListBinding</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.memberlistbinding\" data-linktype=\"relative-path\">MemberListBinding</a> that has the <span class=\"xref\">stem.Linq.Expressions.MemberBinding.BindingType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.memberbindingtype\" data-linktype=\"relative-path\">MemberBindingType</a> and the <span class=\"xref\">stem.Linq.Expressions.MemberBinding.Member*</span> and <span class=\"xref\">stem.Linq.Expressions.MemberListBinding.Initializers*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>member</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> One or more elements of <code>initializers</code> are <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>member</code> does not represent a field or property.  </p>\n<p> -or-  </p>\n<p> The <span class=\"xref\">stem.Reflection.FieldInfo.FieldType*</span> or <span class=\"xref\">stem.Reflection.PropertyInfo.PropertyType*</span> of the field or property that <code>member</code> represents does not implement <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_ListBind_System_Reflection_MethodInfo_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ElementInit__\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_ListBind_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ListBind(MethodInfo,IEnumerable&lt;ElementInit&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.memberlistbinding\" data-linktype=\"relative-path\">MemberListBinding</a> based on a specified property accessor method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MethodInfo propertyAccessor, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt; initializers);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>propertyAccessor</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents a property accessor method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>initializers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.expressions.elementinit\" data-linktype=\"relative-path\">ElementInit</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains <a class=\"xref\" href=\"system.linq.expressions.elementinit\" data-linktype=\"relative-path\">ElementInit</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.MemberListBinding.Initializers*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.memberlistbinding\" data-linktype=\"relative-path\">MemberListBinding</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.memberlistbinding\" data-linktype=\"relative-path\">MemberListBinding</a> that has the <span class=\"xref\">stem.Linq.Expressions.MemberBinding.BindingType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.memberbindingtype\" data-linktype=\"relative-path\">MemberBindingType</a>, the <span class=\"xref\">stem.Linq.Expressions.MemberBinding.Member*</span> property set to the <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> that represents the property accessed in <code>propertyAccessor</code>, and <span class=\"xref\">stem.Linq.Expressions.MemberListBinding.Initializers*</span> populated with the elements of <code>initializers</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>propertyAccessor</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> One or more elements of <code>initializers</code> are <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>propertyAccessor</code> does not represent a property accessor method.  </p>\n<p> -or-  </p>\n<p> The <span class=\"xref\">stem.Reflection.PropertyInfo.PropertyType*</span> of the property that the method represented by <code>propertyAccessor</code> accesses does not implement <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_ListBind_System_Reflection_MethodInfo_System_Linq_Expressions_ElementInit___\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_ListBind_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ListBind(MethodInfo,ElementInit[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.memberlistbinding\" data-linktype=\"relative-path\">MemberListBinding</a> object based on a specified property accessor method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MethodInfo propertyAccessor, System.Linq.Expressions.ElementInit[] initializers);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>propertyAccessor</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents a property accessor method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>initializers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.elementinit\" data-linktype=\"relative-path\">ElementInit</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.linq.expressions.elementinit\" data-linktype=\"relative-path\">ElementInit</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.MemberListBinding.Initializers*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.memberlistbinding\" data-linktype=\"relative-path\">MemberListBinding</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.memberlistbinding\" data-linktype=\"relative-path\">MemberListBinding</a> that has the <span class=\"xref\">stem.Linq.Expressions.MemberBinding.BindingType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.memberbindingtype\" data-linktype=\"relative-path\">MemberBindingType</a>, the <span class=\"xref\">stem.Linq.Expressions.MemberBinding.Member*</span> property set to the <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> that represents the property accessed in <code>propertyAccessor</code>, and <span class=\"xref\">stem.Linq.Expressions.MemberListBinding.Initializers*</span> populated with the elements of <code>initializers</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>propertyAccessor</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> One or more elements of <code>initializers</code> are <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>propertyAccessor</code> does not represent a property accessor method.  </p>\n<p> -or-  </p>\n<p> The <span class=\"xref\">stem.Reflection.PropertyInfo.PropertyType*</span> of the property that the method represented by <code>propertyAccessor</code> accesses does not implement <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_ListInit_System_Linq_Expressions_NewExpression_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ElementInit__\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_ListInit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ListInit(NewExpression,IEnumerable&lt;ElementInit&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.listinitexpression\" data-linktype=\"relative-path\">ListInitExpression</a> that uses specified <a class=\"xref\" href=\"system.linq.expressions.elementinit\" data-linktype=\"relative-path\">ElementInit</a> objects to initialize a collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt; initializers);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>newExpression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a> to set the <span class=\"xref\">stem.Linq.Expressions.ListInitExpression.NewExpression*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>initializers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.expressions.elementinit\" data-linktype=\"relative-path\">ElementInit</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains <a class=\"xref\" href=\"system.linq.expressions.elementinit\" data-linktype=\"relative-path\">ElementInit</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.ListInitExpression.Initializers*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.listinitexpression\" data-linktype=\"relative-path\">ListInitExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.listinitexpression\" data-linktype=\"relative-path\">ListInitExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.ListInitExpression.NewExpression*</span> and <span class=\"xref\">stem.Linq.Expressions.ListInitExpression.Initializers*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>newExpression</code> or <code>initializers</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> One or more elements of <code>initializers</code> are <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>newExpression</code>.Type does not implement <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of <code>newExpression</code> must represent a type that implements <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.listinitexpression\" data-linktype=\"relative-path\">ListInitExpression</a> is equal to <code>newExpression</code>.Type.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the [ListInit(NewExpression,â€‚ElementInit&lt;xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.ElementInit%5B%5D%29&gt; method to create a <a class=\"xref\" href=\"system.linq.expressions.listinitexpression\" data-linktype=\"relative-path\">ListInitExpression</a> that represents the initialization of a new dictionary instance with two key-value pairs.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.Expression#7\">            string tree1 = &quot;maple&quot;;\n            string tree2 = &quot;oak&quot;;\n\n            System.Reflection.MethodInfo addMethod = typeof(Dictionary&lt;int, string&gt;).GetMethod(&quot;Add&quot;);\n\n            // Create two ElementInit objects that represent the\n            // two key-value pairs to add to the Dictionary.\n            System.Linq.Expressions.ElementInit elementInit1 =\n                System.Linq.Expressions.Expression.ElementInit(\n                    addMethod,\n                    System.Linq.Expressions.Expression.Constant(tree1.Length),\n                    System.Linq.Expressions.Expression.Constant(tree1));\n            System.Linq.Expressions.ElementInit elementInit2 =\n                System.Linq.Expressions.Expression.ElementInit(\n                    addMethod,\n                    System.Linq.Expressions.Expression.Constant(tree2.Length),\n                    System.Linq.Expressions.Expression.Constant(tree2));\n\n            // Create a NewExpression that represents constructing\n            // a new instance of Dictionary&lt;int, string&gt;.\n            System.Linq.Expressions.NewExpression newDictionaryExpression =\n                System.Linq.Expressions.Expression.New(typeof(Dictionary&lt;int, string&gt;));\n\n            // Create a ListInitExpression that represents initializing\n            // a new Dictionary&lt;&gt; instance with two key-value pairs.\n            System.Linq.Expressions.ListInitExpression listInitExpression =\n                System.Linq.Expressions.Expression.ListInit(\n                    newDictionaryExpression,\n                    elementInit1,\n                    elementInit2);\n\n            Console.WriteLine(listInitExpression.ToString());\n\n            // This code produces the following output:\n            //\n            // new Dictionary`2() {Void Add(Int32, System.String)(5,&quot;maple&quot;),\n            // Void Add(Int32, System.String)(3,&quot;oak&quot;)}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.Expression#7\">        Dim tree1 As String = &quot;maple&quot;\n        Dim tree2 As String = &quot;oak&quot;\n\n        Dim addMethod As System.Reflection.MethodInfo = _\n            Type.GetType(&quot;System.Collections.Generic.Dictionary`2[System.Int32, System.String]&quot;).GetMethod(&quot;Add&quot;)\n\n        &#39; Create two ElementInit objects that represent the\n        &#39; two key-value pairs to add to the Dictionary.\n        Dim elementInit1 As System.Linq.Expressions.ElementInit = _\n            System.Linq.Expressions.Expression.ElementInit( _\n                addMethod, _\n                System.Linq.Expressions.Expression.Constant(tree1.Length), _\n                System.Linq.Expressions.Expression.Constant(tree1))\n        Dim elementInit2 As System.Linq.Expressions.ElementInit = _\n            System.Linq.Expressions.Expression.ElementInit( _\n                addMethod, _\n                System.Linq.Expressions.Expression.Constant(tree2.Length), _\n                System.Linq.Expressions.Expression.Constant(tree2))\n\n        &#39; Create a NewExpression that represents constructing\n        &#39; a new instance of Dictionary(Of Integer, String).\n        Dim newDictionaryExpression As System.Linq.Expressions.NewExpression = _\n            System.Linq.Expressions.Expression.[New](Type.GetType(&quot;System.Collections.Generic.Dictionary`2[System.Int32, System.String]&quot;))\n\n        &#39; Create a ListInitExpression that represents initializing\n        &#39; a new Dictionary(Of T) instance with two key-value pairs.\n        Dim listInitExpression As System.Linq.Expressions.ListInitExpression = _\n            System.Linq.Expressions.Expression.ListInit( _\n                newDictionaryExpression, _\n                elementInit1, _\n                elementInit2)\n\n        Console.WriteLine(listInitExpression.ToString())\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; new Dictionary`2() {Void Add(Int32, System.String)(5,&quot;maple&quot;),\n        &#39; Void Add(Int32, System.String)(3,&quot;oak&quot;)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_ListInit_System_Linq_Expressions_NewExpression_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression__\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_ListInit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ListInit(NewExpression,IEnumerable&lt;Expression&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.listinitexpression\" data-linktype=\"relative-path\">ListInitExpression</a> that uses a method named &quot;Add&quot; to add elements to a collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; initializers);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>newExpression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a> to set the <span class=\"xref\">stem.Linq.Expressions.ListInitExpression.NewExpression*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>initializers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.ListInitExpression.Initializers*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.listinitexpression\" data-linktype=\"relative-path\">ListInitExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.listinitexpression\" data-linktype=\"relative-path\">ListInitExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.ListInitExpression.NewExpression*</span> property set to the specified value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>newExpression</code> or <code>initializers</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> One or more elements of <code>initializers</code> are <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>newExpression</code>.Type does not implement <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>There is no instance method named &quot;Add&quot; (case insensitive) declared in <code>newExpression</code>.Type or its base type.  </p>\n<p> -or-  </p>\n<p> The add method on <code>newExpression</code>.Type or its base type does not take exactly one argument.  </p>\n<p> -or-  </p>\n<p> The type represented by the <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property of the first element of <code>initializers</code> is not assignable to the argument type of the add method on <code>newExpression</code>.Type or its base type.  </p>\n<p> -or-  </p>\n<p> More than one argument-compatible method named &quot;Add&quot; (case-insensitive) exists on <code>newExpression</code>.Type and/or its base type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of <code>newExpression</code> must represent a type that implements <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a>.  </p>\n<p> In order to use this overload of ListInit, <code>newExpression</code>.Type or its base type must declare a single method named &quot;Add&quot; (case insensitive) that takes exactly one argument. The type of the argument must be assignable from the type represented by the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of the first element of <code>initializers</code>.  </p>\n<p> The <a class=\"xref\" href=\"system.linq.expressions.listinitexpression#System_Linq_Expressions_ListInitExpression_Initializers_\" data-linktype=\"relative-path\">Initializers</a> property of the returned <a class=\"xref\" href=\"system.linq.expressions.listinitexpression\" data-linktype=\"relative-path\">ListInitExpression</a> contains one element of type <a class=\"xref\" href=\"system.linq.expressions.elementinit\" data-linktype=\"relative-path\">ElementInit</a> for each element of <code>initializers</code>. The <a class=\"xref\" href=\"system.linq.expressions.elementinit#System_Linq_Expressions_ElementInit_Arguments_\" data-linktype=\"relative-path\">Arguments</a> property of each element of <a class=\"xref\" href=\"system.linq.expressions.listinitexpression#System_Linq_Expressions_ListInitExpression_Initializers_\" data-linktype=\"relative-path\">Initializers</a> is a singleton collection that contains the corresponding element of <code>initializers</code>. The <a class=\"xref\" href=\"system.linq.expressions.elementinit#System_Linq_Expressions_ElementInit_AddMethod_\" data-linktype=\"relative-path\">AddMethod</a> property of each element of <a class=\"xref\" href=\"system.linq.expressions.listinitexpression#System_Linq_Expressions_ListInitExpression_Initializers_\" data-linktype=\"relative-path\">Initializers</a> represents the add method that was discovered on <code>newExpression</code>.Type or its base type.  </p>\n<p> The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.listinitexpression\" data-linktype=\"relative-path\">ListInitExpression</a> is equal to <code>newExpression</code>.Type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_ListInit_System_Linq_Expressions_NewExpression_System_Linq_Expressions_ElementInit___\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_ListInit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ListInit(NewExpression,ElementInit[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.listinitexpression\" data-linktype=\"relative-path\">ListInitExpression</a> that uses specified <a class=\"xref\" href=\"system.linq.expressions.elementinit\" data-linktype=\"relative-path\">ElementInit</a> objects to initialize a collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Linq.Expressions.ElementInit[] initializers);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>newExpression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a> to set the <span class=\"xref\">stem.Linq.Expressions.ListInitExpression.NewExpression*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>initializers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.elementinit\" data-linktype=\"relative-path\">ElementInit</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.linq.expressions.elementinit\" data-linktype=\"relative-path\">ElementInit</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.ListInitExpression.Initializers*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.listinitexpression\" data-linktype=\"relative-path\">ListInitExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.listinitexpression\" data-linktype=\"relative-path\">ListInitExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.ListInitExpression.NewExpression*</span> and <span class=\"xref\">stem.Linq.Expressions.ListInitExpression.Initializers*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>newExpression</code> or <code>initializers</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> One or more elements of <code>initializers</code> are <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>newExpression</code>.Type does not implement <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of <code>newExpression</code> must represent a type that implements <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.listinitexpression\" data-linktype=\"relative-path\">ListInitExpression</a> is equal to <code>newExpression</code>.Type.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the ListInit method to create a <a class=\"xref\" href=\"system.linq.expressions.listinitexpression\" data-linktype=\"relative-path\">ListInitExpression</a>that represents the initialization of a new dictionary instance with two key-value pairs.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.Expression#7\">            string tree1 = &quot;maple&quot;;\n            string tree2 = &quot;oak&quot;;\n\n            System.Reflection.MethodInfo addMethod = typeof(Dictionary&lt;int, string&gt;).GetMethod(&quot;Add&quot;);\n\n            // Create two ElementInit objects that represent the\n            // two key-value pairs to add to the Dictionary.\n            System.Linq.Expressions.ElementInit elementInit1 =\n                System.Linq.Expressions.Expression.ElementInit(\n                    addMethod,\n                    System.Linq.Expressions.Expression.Constant(tree1.Length),\n                    System.Linq.Expressions.Expression.Constant(tree1));\n            System.Linq.Expressions.ElementInit elementInit2 =\n                System.Linq.Expressions.Expression.ElementInit(\n                    addMethod,\n                    System.Linq.Expressions.Expression.Constant(tree2.Length),\n                    System.Linq.Expressions.Expression.Constant(tree2));\n\n            // Create a NewExpression that represents constructing\n            // a new instance of Dictionary&lt;int, string&gt;.\n            System.Linq.Expressions.NewExpression newDictionaryExpression =\n                System.Linq.Expressions.Expression.New(typeof(Dictionary&lt;int, string&gt;));\n\n            // Create a ListInitExpression that represents initializing\n            // a new Dictionary&lt;&gt; instance with two key-value pairs.\n            System.Linq.Expressions.ListInitExpression listInitExpression =\n                System.Linq.Expressions.Expression.ListInit(\n                    newDictionaryExpression,\n                    elementInit1,\n                    elementInit2);\n\n            Console.WriteLine(listInitExpression.ToString());\n\n            // This code produces the following output:\n            //\n            // new Dictionary`2() {Void Add(Int32, System.String)(5,&quot;maple&quot;),\n            // Void Add(Int32, System.String)(3,&quot;oak&quot;)}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.Expression#7\">        Dim tree1 As String = &quot;maple&quot;\n        Dim tree2 As String = &quot;oak&quot;\n\n        Dim addMethod As System.Reflection.MethodInfo = _\n            Type.GetType(&quot;System.Collections.Generic.Dictionary`2[System.Int32, System.String]&quot;).GetMethod(&quot;Add&quot;)\n\n        &#39; Create two ElementInit objects that represent the\n        &#39; two key-value pairs to add to the Dictionary.\n        Dim elementInit1 As System.Linq.Expressions.ElementInit = _\n            System.Linq.Expressions.Expression.ElementInit( _\n                addMethod, _\n                System.Linq.Expressions.Expression.Constant(tree1.Length), _\n                System.Linq.Expressions.Expression.Constant(tree1))\n        Dim elementInit2 As System.Linq.Expressions.ElementInit = _\n            System.Linq.Expressions.Expression.ElementInit( _\n                addMethod, _\n                System.Linq.Expressions.Expression.Constant(tree2.Length), _\n                System.Linq.Expressions.Expression.Constant(tree2))\n\n        &#39; Create a NewExpression that represents constructing\n        &#39; a new instance of Dictionary(Of Integer, String).\n        Dim newDictionaryExpression As System.Linq.Expressions.NewExpression = _\n            System.Linq.Expressions.Expression.[New](Type.GetType(&quot;System.Collections.Generic.Dictionary`2[System.Int32, System.String]&quot;))\n\n        &#39; Create a ListInitExpression that represents initializing\n        &#39; a new Dictionary(Of T) instance with two key-value pairs.\n        Dim listInitExpression As System.Linq.Expressions.ListInitExpression = _\n            System.Linq.Expressions.Expression.ListInit( _\n                newDictionaryExpression, _\n                elementInit1, _\n                elementInit2)\n\n        Console.WriteLine(listInitExpression.ToString())\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; new Dictionary`2() {Void Add(Int32, System.String)(5,&quot;maple&quot;),\n        &#39; Void Add(Int32, System.String)(3,&quot;oak&quot;)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_ListInit_System_Linq_Expressions_NewExpression_System_Linq_Expressions_Expression___\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_ListInit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ListInit(NewExpression,Expression[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.listinitexpression\" data-linktype=\"relative-path\">ListInitExpression</a> that uses a method named &quot;Add&quot; to add elements to a collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Linq.Expressions.Expression[] initializers);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>newExpression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a> to set the <span class=\"xref\">stem.Linq.Expressions.ListInitExpression.NewExpression*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>initializers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.ListInitExpression.Initializers*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.listinitexpression\" data-linktype=\"relative-path\">ListInitExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.listinitexpression\" data-linktype=\"relative-path\">ListInitExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.ListInitExpression.NewExpression*</span> property set to the specified value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>newExpression</code> or <code>initializers</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> One or more elements of <code>initializers</code> are <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>newExpression</code>.Type does not implement <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>There is no instance method named &quot;Add&quot; (case insensitive) declared in <code>newExpression</code>.Type or its base type.  </p>\n<p> -or-  </p>\n<p> The add method on <code>newExpression</code>.Type or its base type does not take exactly one argument.  </p>\n<p> -or-  </p>\n<p> The type represented by the <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property of the first element of <code>initializers</code> is not assignable to the argument type of the add method on <code>newExpression</code>.Type or its base type.  </p>\n<p> -or-  </p>\n<p> More than one argument-compatible method named &quot;Add&quot; (case-insensitive) exists on <code>newExpression</code>.Type and/or its base type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of <code>newExpression</code> must represent a type that implements <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a>.  </p>\n<p> In order to use this overload of ListInit, <code>newExpression</code>.Type or its base type must declare a single method named &quot;Add&quot; (case insensitive) that takes exactly one argument. The type of the argument must be assignable from the type represented by the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of the first element of <code>initializers</code>.  </p>\n<p> The <a class=\"xref\" href=\"system.linq.expressions.listinitexpression#System_Linq_Expressions_ListInitExpression_Initializers_\" data-linktype=\"relative-path\">Initializers</a> property of the returned <a class=\"xref\" href=\"system.linq.expressions.listinitexpression\" data-linktype=\"relative-path\">ListInitExpression</a>contains one element of type <a class=\"xref\" href=\"system.linq.expressions.elementinit\" data-linktype=\"relative-path\">ElementInit</a> for each element of <code>initializers</code>. The <a class=\"xref\" href=\"system.linq.expressions.elementinit#System_Linq_Expressions_ElementInit_Arguments_\" data-linktype=\"relative-path\">Arguments</a> property of each element of <a class=\"xref\" href=\"system.linq.expressions.listinitexpression#System_Linq_Expressions_ListInitExpression_Initializers_\" data-linktype=\"relative-path\">Initializers</a> is a singleton collection that contains the corresponding element of <code>initializers</code>. The <a class=\"xref\" href=\"system.linq.expressions.elementinit#System_Linq_Expressions_ElementInit_AddMethod_\" data-linktype=\"relative-path\">AddMethod</a> property of each element of <a class=\"xref\" href=\"system.linq.expressions.listinitexpression#System_Linq_Expressions_ListInitExpression_Initializers_\" data-linktype=\"relative-path\">Initializers</a> represents the add method that was discovered on <code>newExpression</code>.Type or its base type.  </p>\n<p> The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.listinitexpression\" data-linktype=\"relative-path\">ListInitExpression</a> is equal to <code>newExpression</code>.Type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_ListInit_System_Linq_Expressions_NewExpression_System_Reflection_MethodInfo_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression__\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_ListInit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ListInit(NewExpression,MethodInfo,IEnumerable&lt;Expression&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.listinitexpression\" data-linktype=\"relative-path\">ListInitExpression</a> that uses a specified method to add elements to a collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Reflection.MethodInfo addMethod, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; initializers);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>newExpression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a> to set the <span class=\"xref\">stem.Linq.Expressions.ListInitExpression.NewExpression*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>addMethod</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents an instance method named &quot;Add&quot; (case insensitive), that adds an element to a collection.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>initializers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.ListInitExpression.Initializers*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.listinitexpression\" data-linktype=\"relative-path\">ListInitExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.listinitexpression\" data-linktype=\"relative-path\">ListInitExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.ListInitExpression.NewExpression*</span> property set to the specified value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>newExpression</code> or <code>initializers</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> One or more elements of <code>initializers</code> are <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>newExpression</code>.Type does not implement <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a>.  </p>\n<p> -or-  </p>\n<p> <code>addMethod</code> is not <code>null</code> and it does not represent an instance method named &quot;Add&quot; (case insensitive) that takes exactly one argument.  </p>\n<p> -or-  </p>\n<p> <code>addMethod</code> is not <code>null</code> and the type represented by the <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property of one or more elements of <code>initializers</code> is not assignable to the argument type of the method that <code>addMethod</code> represents.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>addMethod</code> is <code>null</code> and no instance method named &quot;Add&quot; that takes one type-compatible argument exists on <code>newExpression</code>.Type or its base type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of <code>newExpression</code> must represent a type that implements <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a>.  </p>\n<p> If <code>addMethod</code> is <code>null</code>, <code>newExpression</code>.Type or its base type must declare a single method named &quot;Add&quot; (case insensitive) that takes exactly one argument. If <code>addMethod</code> is not <code>null</code>, it must represent an instance method named &quot;Add&quot; (case insensitive) that has exactly one parameter. The type represented by the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of each element of <code>initializers</code> must be assignable to the argument type of the add method.  </p>\n<p> The <a class=\"xref\" href=\"system.linq.expressions.listinitexpression#System_Linq_Expressions_ListInitExpression_Initializers_\" data-linktype=\"relative-path\">Initializers</a> property of the returned <a class=\"xref\" href=\"system.linq.expressions.listinitexpression\" data-linktype=\"relative-path\">ListInitExpression</a> contains one element of type <a class=\"xref\" href=\"system.linq.expressions.elementinit\" data-linktype=\"relative-path\">ElementInit</a> for each element of <code>initializers</code>. The <a class=\"xref\" href=\"system.linq.expressions.elementinit#System_Linq_Expressions_ElementInit_Arguments_\" data-linktype=\"relative-path\">Arguments</a> property of each element of <a class=\"xref\" href=\"system.linq.expressions.listinitexpression#System_Linq_Expressions_ListInitExpression_Initializers_\" data-linktype=\"relative-path\">Initializers</a> is a singleton collection that contains the corresponding element of <code>initializers</code>. The <a class=\"xref\" href=\"system.linq.expressions.elementinit#System_Linq_Expressions_ElementInit_AddMethod_\" data-linktype=\"relative-path\">AddMethod</a> property of each element of <a class=\"xref\" href=\"system.linq.expressions.listinitexpression#System_Linq_Expressions_ListInitExpression_Initializers_\" data-linktype=\"relative-path\">Initializers</a> is equal to <code>addMethod</code>.  </p>\n<p> The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.listinitexpression\" data-linktype=\"relative-path\">ListInitExpression</a> is equal to <code>newExpression</code>.Type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_ListInit_System_Linq_Expressions_NewExpression_System_Reflection_MethodInfo_System_Linq_Expressions_Expression___\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_ListInit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ListInit(NewExpression,MethodInfo,Expression[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.listinitexpression\" data-linktype=\"relative-path\">ListInitExpression</a> that uses a specified method to add elements to a collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Reflection.MethodInfo addMethod, System.Linq.Expressions.Expression[] initializers);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>newExpression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a> to set the <span class=\"xref\">stem.Linq.Expressions.ListInitExpression.NewExpression*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>addMethod</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents an instance method that takes one argument, that adds an element to a collection.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>initializers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.ListInitExpression.Initializers*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.listinitexpression\" data-linktype=\"relative-path\">ListInitExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.listinitexpression\" data-linktype=\"relative-path\">ListInitExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.ListInitExpression.NewExpression*</span> property set to the specified value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>newExpression</code> or <code>initializers</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> One or more elements of <code>initializers</code> are <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>newExpression</code>.Type does not implement <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a>.  </p>\n<p> -or-  </p>\n<p> <code>addMethod</code> is not <code>null</code> and it does not represent an instance method named &quot;Add&quot; (case insensitive) that takes exactly one argument.  </p>\n<p> -or-  </p>\n<p> <code>addMethod</code> is not <code>null</code> and the type represented by the <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property of one or more elements of <code>initializers</code> is not assignable to the argument type of the method that <code>addMethod</code> represents.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>addMethod</code> is <code>null</code> and no instance method named &quot;Add&quot; that takes one type-compatible argument exists on <code>newExpression</code>.Type or its base type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of <code>newExpression</code> must represent a type that implements <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a>.  </p>\n<p> If <code>addMethod</code> is <code>null</code>, <code>newExpression</code>.Type or its base type must declare a single method named &quot;Add&quot; (case insensitive) that takes exactly one argument. If <code>addMethod</code> is not <code>null</code>, it must represent an instance method named &quot;Add&quot; (case insensitive) that has exactly one parameter. The type represented by the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of each element of <code>initializers</code> must be assignable to the argument type of the add method.  </p>\n<p> The <a class=\"xref\" href=\"system.linq.expressions.listinitexpression#System_Linq_Expressions_ListInitExpression_Initializers_\" data-linktype=\"relative-path\">Initializers</a> property of the returned <a class=\"xref\" href=\"system.linq.expressions.listinitexpression\" data-linktype=\"relative-path\">ListInitExpression</a>contains one element of type <a class=\"xref\" href=\"system.linq.expressions.elementinit\" data-linktype=\"relative-path\">ElementInit</a> for each element of <code>initializers</code>. The <a class=\"xref\" href=\"system.linq.expressions.elementinit#System_Linq_Expressions_ElementInit_Arguments_\" data-linktype=\"relative-path\">Arguments</a> property of each element of <a class=\"xref\" href=\"system.linq.expressions.listinitexpression#System_Linq_Expressions_ListInitExpression_Initializers_\" data-linktype=\"relative-path\">Initializers</a> is a singleton collection that contains the corresponding element of <code>initializers</code>. The <a class=\"xref\" href=\"system.linq.expressions.elementinit#System_Linq_Expressions_ElementInit_AddMethod_\" data-linktype=\"relative-path\">AddMethod</a> property of each element of <a class=\"xref\" href=\"system.linq.expressions.listinitexpression#System_Linq_Expressions_ListInitExpression_Initializers_\" data-linktype=\"relative-path\">Initializers</a> is equal to <code>addMethod</code>.  </p>\n<p> The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.listinitexpression\" data-linktype=\"relative-path\">ListInitExpression</a> is equal to <code>newExpression</code>.Type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Loop_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Loop_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Loop(Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.loopexpression\" data-linktype=\"relative-path\">LoopExpression</a> with the given body.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.LoopExpression Loop (System.Linq.Expressions.Expression body);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The body of the loop.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.loopexpression\" data-linktype=\"relative-path\">LoopExpression</a></div>\r\n                  </div>\r\n                  <p>The created <a class=\"xref\" href=\"system.linq.expressions.loopexpression\" data-linktype=\"relative-path\">LoopExpression</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Loop_System_Linq_Expressions_Expression_System_Linq_Expressions_LabelTarget_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Loop_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Loop(Expression,LabelTarget)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.loopexpression\" data-linktype=\"relative-path\">LoopExpression</a> with the given body and break target.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.LoopExpression Loop (System.Linq.Expressions.Expression body, System.Linq.Expressions.LabelTarget break);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The body of the loop.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>break</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The break target used by the loop body.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.loopexpression\" data-linktype=\"relative-path\">LoopExpression</a></div>\r\n                  </div>\r\n                  <p>The created <a class=\"xref\" href=\"system.linq.expressions.loopexpression\" data-linktype=\"relative-path\">LoopExpression</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to create a block expression that contains a <a class=\"xref\" href=\"system.linq.expressions.loopexpression\" data-linktype=\"relative-path\">LoopExpression</a> object.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#44\">        &#39; Add the following directive to the file:\n        &#39; Imports System.Linq.Expressions  \n        &#39; Creating a parameter expression.\n        Dim value As ParameterExpression =\n            Expression.Parameter(GetType(Integer), &quot;value&quot;)\n\n        &#39; Creating an expression to hold a local variable. \n        Dim result As ParameterExpression =\n            Expression.Parameter(GetType(Integer), &quot;result&quot;)\n\n        &#39; Creating a label to jump to from a loop.\n        Dim label As LabelTarget = Expression.Label(GetType(Integer))\n\n        &#39; Creating a method body.\n        Dim block As BlockExpression = Expression.Block(\n            New ParameterExpression() {result},\n            Expression.Assign(result, Expression.Constant(1)),\n            Expression.Loop(\n                Expression.IfThenElse(\n                    Expression.GreaterThan(value, Expression.Constant(1)),\n                    Expression.MultiplyAssign(result,\n                        Expression.PostDecrementAssign(value)),\n                    Expression.Break(label, result)\n                ),\n                label\n            )\n        )\n\n        &#39; Compile an expression tree and return a delegate.\n        Dim factorial As Integer =\n            Expression.Lambda(Of Func(Of Integer, Integer))(block, value).Compile()(5)\n\n        Console.WriteLine(factorial)\n\n        &#39; This code example produces the following output:\n        &#39;\n        &#39; 120\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#44\">            // Add the following directive to the file:\n            // using System.Linq.Expressions;  \n\n            // Creating a parameter expression.\n            ParameterExpression value = Expression.Parameter(typeof(int), &quot;value&quot;);\n\n            // Creating an expression to hold a local variable. \n            ParameterExpression result = Expression.Parameter(typeof(int), &quot;result&quot;);\n\n            // Creating a label to jump to from a loop.\n            LabelTarget label = Expression.Label(typeof(int));\n\n            // Creating a method body.\n            BlockExpression block = Expression.Block(\n                new[] { result },\n                Expression.Assign(result, Expression.Constant(1)),\n                    Expression.Loop(\n                       Expression.IfThenElse(\n                           Expression.GreaterThan(value, Expression.Constant(1)),\n                           Expression.MultiplyAssign(result,\n                               Expression.PostDecrementAssign(value)),\n                           Expression.Break(label, result)\n                       ),\n                   label\n                )\n            );\n\n            // Compile and run an expression tree.\n            int factorial = Expression.Lambda&lt;Func&lt;int, int&gt;&gt;(block, value).Compile()(5);\n\n            Console.WriteLine(factorial);\n\n            // This code example produces the following output:\n            //\n            // 120\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Loop_System_Linq_Expressions_Expression_System_Linq_Expressions_LabelTarget_System_Linq_Expressions_LabelTarget_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Loop_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Loop(Expression,LabelTarget,LabelTarget)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.loopexpression\" data-linktype=\"relative-path\">LoopExpression</a> with the given body.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.LoopExpression Loop (System.Linq.Expressions.Expression body, System.Linq.Expressions.LabelTarget break, System.Linq.Expressions.LabelTarget continue);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The body of the loop.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>break</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The break target used by the loop body.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>continue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The continue target used by the loop body.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.loopexpression\" data-linktype=\"relative-path\">LoopExpression</a></div>\r\n                  </div>\r\n                  <p>The created <a class=\"xref\" href=\"system.linq.expressions.loopexpression\" data-linktype=\"relative-path\">LoopExpression</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_MakeBinary_System_Linq_Expressions_ExpressionType_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_MakeBinary_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MakeBinary(ExpressionType,Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a>, given the left and right operands, by calling an appropriate factory method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression MakeBinary (System.Linq.Expressions.ExpressionType binaryType, System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>binaryType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> that specifies the type of binary operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> that represents the left operand.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> that represents the right operand.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that results from calling the appropriate factory method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>binaryType</code> does not correspond to a binary expression node.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>right</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>binaryType</code> parameter determines which <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> factory method this method calls. For example, if <code>binaryType</code> is <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a>, this method invokes <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Subtract_\" data-linktype=\"relative-path\">Subtract</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the MakeBinary method to create a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents the subtraction of one number from another.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.Expression#8\">            // Create a BinaryExpression that represents subtracting 14 from 53.\n            System.Linq.Expressions.BinaryExpression binaryExpression =\n                System.Linq.Expressions.Expression.MakeBinary(\n                    System.Linq.Expressions.ExpressionType.Subtract,\n                    System.Linq.Expressions.Expression.Constant(53),\n                    System.Linq.Expressions.Expression.Constant(14));\n\n            Console.WriteLine(binaryExpression.ToString());\n\n            // This code produces the following output:\n            //\n            // (53 - 14)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.Expression#8\">        &#39; Create a BinaryExpression that represents subtracting 14 from 53.\n        Dim binaryExpression As System.Linq.Expressions.BinaryExpression = _\n            System.Linq.Expressions.Expression.MakeBinary( _\n                System.Linq.Expressions.ExpressionType.Subtract, _\n                System.Linq.Expressions.Expression.Constant(53), _\n                System.Linq.Expressions.Expression.Constant(14))\n\n        Console.WriteLine(binaryExpression.ToString())\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; (53 - 14)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_MakeBinary_System_Linq_Expressions_ExpressionType_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Boolean_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_MakeBinary_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MakeBinary(ExpressionType,Expression,Expression,Boolean,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a>, given the left operand, right operand and implementing method, by calling the appropriate factory method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression MakeBinary (System.Linq.Expressions.ExpressionType binaryType, System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>binaryType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> that specifies the type of binary operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> that represents the left operand.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> that represents the right operand.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>liftToNull</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to set <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.IsLiftedToNull*</span> to <code>true</code>; <code>false</code> to set <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.IsLiftedToNull*</span> to <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that specifies the implementing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that results from calling the appropriate factory method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>binaryType</code> does not correspond to a binary expression node.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>right</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>binaryType</code> parameter determines which <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> factory method this method will call. For example, if <code>binaryType</code> is <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a>, this method invokes <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Subtract_\" data-linktype=\"relative-path\">Subtract</a>. The <code>liftToNull</code> and <code>method</code> parameters are ignored if the appropriate factory method does not have a corresponding parameter.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_MakeBinary_System_Linq_Expressions_ExpressionType_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Boolean_System_Reflection_MethodInfo_System_Linq_Expressions_LambdaExpression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_MakeBinary_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MakeBinary(ExpressionType,Expression,Expression,Boolean,MethodInfo,LambdaExpression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a>, given the left operand, right operand, implementing method and type conversion function, by calling the appropriate factory method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression MakeBinary (System.Linq.Expressions.ExpressionType binaryType, System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>binaryType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> that specifies the type of binary operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> that represents the left operand.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> that represents the right operand.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>liftToNull</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to set <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.IsLiftedToNull*</span> to <code>true</code>; <code>false</code> to set <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.IsLiftedToNull*</span> to <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that specifies the implementing method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>conversion</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a> that represents a type conversion function. This parameter is used only if <code>binaryType</code> is <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> or compound assignment..</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that results from calling the appropriate factory method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>binaryType</code> does not correspond to a binary expression node.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>right</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>binaryType</code> parameter determines which <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> factory method this method will call. For example, if <code>binaryType</code> is <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a>, this method invokes <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Subtract_\" data-linktype=\"relative-path\">Subtract</a>. The <code>liftToNull</code>, <code>method</code> and <code>conversion</code> parameters are ignored if the appropriate factory method does not have a corresponding parameter.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_MakeCatchBlock_System_Type_System_Linq_Expressions_ParameterExpression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_MakeCatchBlock_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MakeCatchBlock(Type,ParameterExpression,Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.catchblock\" data-linktype=\"relative-path\">CatchBlock</a> representing a catch statement with the specified elements.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.CatchBlock MakeCatchBlock (Type type, System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression filter);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> of <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> this <a class=\"xref\" href=\"system.linq.expressions.catchblock\" data-linktype=\"relative-path\">CatchBlock</a> will handle.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>variable</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a> representing a reference to the <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> object caught by this handler.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The body of the catch statement.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>filter</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The body of the <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> filter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.catchblock\" data-linktype=\"relative-path\">CatchBlock</a></div>\r\n                  </div>\r\n                  <p>The created <a class=\"xref\" href=\"system.linq.expressions.catchblock\" data-linktype=\"relative-path\">CatchBlock</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>type</code> must be non-null and match the type of <code>variable</code> (if it is supplied).</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_MakeDynamic_System_Type_System_Runtime_CompilerServices_CallSiteBinder_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression__\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_MakeDynamic_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MakeDynamic(Type,CallSiteBinder,IEnumerable&lt;Expression&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.dynamicexpression\" data-linktype=\"relative-path\">DynamicExpression</a> that represents a dynamic operation bound by the provided <a class=\"xref\" href=\"system.runtime.compilerservices.callsitebinder\" data-linktype=\"relative-path\">CallSiteBinder</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>delegateType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the delegate used by the <a class=\"xref\" href=\"system.runtime.compilerservices.callsite\" data-linktype=\"relative-path\">CallSite</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.compilerservices.callsitebinder\" data-linktype=\"relative-path\">CallSiteBinder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The runtime binder for the dynamic operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arguments</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The arguments to the dynamic operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.dynamicexpression\" data-linktype=\"relative-path\">DynamicExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.dynamicexpression\" data-linktype=\"relative-path\">DynamicExpression</a> that has <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and has the <span class=\"xref\">stem.Linq.Expressions.DynamicExpression.DelegateType*</span>, <span class=\"xref\">stem.Linq.Expressions.DynamicExpression.Binder*</span>, and <span class=\"xref\">stem.Linq.Expressions.DynamicExpression.Arguments*</span> set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_MakeDynamic_System_Type_System_Runtime_CompilerServices_CallSiteBinder_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_MakeDynamic_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MakeDynamic(Type,CallSiteBinder,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.dynamicexpression\" data-linktype=\"relative-path\">DynamicExpression</a> that represents a dynamic operation bound by the provided <a class=\"xref\" href=\"system.runtime.compilerservices.callsitebinder\" data-linktype=\"relative-path\">CallSiteBinder</a> and one argument.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>delegateType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the delegate used by the <a class=\"xref\" href=\"system.runtime.compilerservices.callsite\" data-linktype=\"relative-path\">CallSite</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.compilerservices.callsitebinder\" data-linktype=\"relative-path\">CallSiteBinder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The runtime binder for the dynamic operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg0</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The argument to the dynamic operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.dynamicexpression\" data-linktype=\"relative-path\">DynamicExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.dynamicexpression\" data-linktype=\"relative-path\">DynamicExpression</a> that has <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and has the <span class=\"xref\">stem.Linq.Expressions.DynamicExpression.DelegateType*</span>, <span class=\"xref\">stem.Linq.Expressions.DynamicExpression.Binder*</span>, and <span class=\"xref\">stem.Linq.Expressions.DynamicExpression.Arguments*</span> set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_MakeDynamic_System_Type_System_Runtime_CompilerServices_CallSiteBinder_System_Linq_Expressions_Expression___\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_MakeDynamic_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MakeDynamic(Type,CallSiteBinder,Expression[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.dynamicexpression\" data-linktype=\"relative-path\">DynamicExpression</a> that represents a dynamic operation bound by the provided <a class=\"xref\" href=\"system.runtime.compilerservices.callsitebinder\" data-linktype=\"relative-path\">CallSiteBinder</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression[] arguments);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>delegateType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the delegate used by the <a class=\"xref\" href=\"system.runtime.compilerservices.callsite\" data-linktype=\"relative-path\">CallSite</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.compilerservices.callsitebinder\" data-linktype=\"relative-path\">CallSiteBinder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The runtime binder for the dynamic operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arguments</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The arguments to the dynamic operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.dynamicexpression\" data-linktype=\"relative-path\">DynamicExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.dynamicexpression\" data-linktype=\"relative-path\">DynamicExpression</a> that has <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and has the <span class=\"xref\">stem.Linq.Expressions.DynamicExpression.DelegateType*</span>, <span class=\"xref\">stem.Linq.Expressions.DynamicExpression.Binder*</span>, and <span class=\"xref\">stem.Linq.Expressions.DynamicExpression.Arguments*</span> set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_MakeDynamic_System_Type_System_Runtime_CompilerServices_CallSiteBinder_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_MakeDynamic_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MakeDynamic(Type,CallSiteBinder,Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.dynamicexpression\" data-linktype=\"relative-path\">DynamicExpression</a> that represents a dynamic operation bound by the provided <a class=\"xref\" href=\"system.runtime.compilerservices.callsitebinder\" data-linktype=\"relative-path\">CallSiteBinder</a> and two arguments.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>delegateType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the delegate used by the <a class=\"xref\" href=\"system.runtime.compilerservices.callsite\" data-linktype=\"relative-path\">CallSite</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.compilerservices.callsitebinder\" data-linktype=\"relative-path\">CallSiteBinder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The runtime binder for the dynamic operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg0</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first argument to the dynamic operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second argument to the dynamic operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.dynamicexpression\" data-linktype=\"relative-path\">DynamicExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.dynamicexpression\" data-linktype=\"relative-path\">DynamicExpression</a> that has <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and has the <span class=\"xref\">stem.Linq.Expressions.DynamicExpression.DelegateType*</span>, <span class=\"xref\">stem.Linq.Expressions.DynamicExpression.Binder*</span>, and <span class=\"xref\">stem.Linq.Expressions.DynamicExpression.Arguments*</span> set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_MakeDynamic_System_Type_System_Runtime_CompilerServices_CallSiteBinder_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_MakeDynamic_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.dynamicexpression\" data-linktype=\"relative-path\">DynamicExpression</a> that represents a dynamic operation bound by the provided <a class=\"xref\" href=\"system.runtime.compilerservices.callsitebinder\" data-linktype=\"relative-path\">CallSiteBinder</a> and three arguments.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>delegateType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the delegate used by the <a class=\"xref\" href=\"system.runtime.compilerservices.callsite\" data-linktype=\"relative-path\">CallSite</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.compilerservices.callsitebinder\" data-linktype=\"relative-path\">CallSiteBinder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The runtime binder for the dynamic operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg0</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first argument to the dynamic operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second argument to the dynamic operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The third argument to the dynamic operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.dynamicexpression\" data-linktype=\"relative-path\">DynamicExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.dynamicexpression\" data-linktype=\"relative-path\">DynamicExpression</a> that has <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and has the <span class=\"xref\">stem.Linq.Expressions.DynamicExpression.DelegateType*</span>, <span class=\"xref\">stem.Linq.Expressions.DynamicExpression.Binder*</span>, and <span class=\"xref\">stem.Linq.Expressions.DynamicExpression.Arguments*</span> set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_MakeDynamic_System_Type_System_Runtime_CompilerServices_CallSiteBinder_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_MakeDynamic_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.dynamicexpression\" data-linktype=\"relative-path\">DynamicExpression</a> that represents a dynamic operation bound by the provided <a class=\"xref\" href=\"system.runtime.compilerservices.callsitebinder\" data-linktype=\"relative-path\">CallSiteBinder</a> and four arguments.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>delegateType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the delegate used by the <a class=\"xref\" href=\"system.runtime.compilerservices.callsite\" data-linktype=\"relative-path\">CallSite</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.compilerservices.callsitebinder\" data-linktype=\"relative-path\">CallSiteBinder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The runtime binder for the dynamic operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg0</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first argument to the dynamic operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second argument to the dynamic operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The third argument to the dynamic operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg3</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The fourth argument to the dynamic operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.dynamicexpression\" data-linktype=\"relative-path\">DynamicExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.dynamicexpression\" data-linktype=\"relative-path\">DynamicExpression</a> that has <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and has the <span class=\"xref\">stem.Linq.Expressions.DynamicExpression.DelegateType*</span>, <span class=\"xref\">stem.Linq.Expressions.DynamicExpression.Binder*</span>, and <span class=\"xref\">stem.Linq.Expressions.DynamicExpression.Arguments*</span> set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_MakeGoto_System_Linq_Expressions_GotoExpressionKind_System_Linq_Expressions_LabelTarget_System_Linq_Expressions_Expression_System_Type_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_MakeGoto_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MakeGoto(GotoExpressionKind,LabelTarget,Expression,Type)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> representing a jump of the specified <a class=\"xref\" href=\"system.linq.expressions.gotoexpressionkind\" data-linktype=\"relative-path\">GotoExpressionKind</a>. The value passed to the label upon jumping can also be specified.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.GotoExpression MakeGoto (System.Linq.Expressions.GotoExpressionKind kind, System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>kind</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.gotoexpressionkind\" data-linktype=\"relative-path\">GotoExpressionKind</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.gotoexpressionkind\" data-linktype=\"relative-path\">GotoExpressionKind</a> of the <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a> that the <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> will jump to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value that will be passed to the associated label upon jumping.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> to set the <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> with <span class=\"xref\">stem.Linq.Expressions.GotoExpression.Kind*</span> equal to <code>kind</code>, the <span class=\"xref\">stem.Linq.Expressions.GotoExpression.Target*</span> property set to <code>target</code>, the <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property set to <code>type</code>, and <code>value</code> to be passed to the target label upon jumping.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_MakeIndex_System_Linq_Expressions_Expression_System_Reflection_PropertyInfo_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression__\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_MakeIndex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MakeIndex(Expression,PropertyInfo,IEnumerable&lt;Expression&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates an <a class=\"xref\" href=\"system.linq.expressions.indexexpression\" data-linktype=\"relative-path\">IndexExpression</a> that represents accessing an indexed property in an object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.IndexExpression MakeIndex (System.Linq.Expressions.Expression instance, System.Reflection.PropertyInfo indexer, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>instance</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to which the property belongs. It should be null if the property is <code>static</code> (<code>shared</code> in Visual Basic).</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>indexer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> representing the property to index.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arguments</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <code>IEnumerable<expression></expression></code> (<code>IEnumerable (Of Expression)</code> in Visual Basic) that contains the arguments that will be used to index the property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.indexexpression\" data-linktype=\"relative-path\">IndexExpression</a></div>\r\n                  </div>\r\n                  <p>The created <a class=\"xref\" href=\"system.linq.expressions.indexexpression\" data-linktype=\"relative-path\">IndexExpression</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_MakeMemberAccess_System_Linq_Expressions_Expression_System_Reflection_MemberInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_MakeMemberAccess_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MakeMemberAccess(Expression,MemberInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.memberexpression\" data-linktype=\"relative-path\">MemberExpression</a> that represents accessing either a field or a property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.MemberExpression MakeMemberAccess (System.Linq.Expressions.Expression expression, System.Reflection.MemberInfo member);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> that represents the object that the member belongs to. This can be null for static members.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>member</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> that describes the field or property to be accessed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.memberexpression\" data-linktype=\"relative-path\">MemberExpression</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.memberexpression\" data-linktype=\"relative-path\">MemberExpression</a> that results from calling the appropriate factory method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>member</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>member</code> does not represent a field or property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method can be used to create a <a class=\"xref\" href=\"system.linq.expressions.memberexpression\" data-linktype=\"relative-path\">MemberExpression</a> that represents accessing either a field or a property, depending on the type of <code>member</code>. If <code>member</code> is of type <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a>, this method calls <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Field_\" data-linktype=\"relative-path\">Field</a> to create the <a class=\"xref\" href=\"system.linq.expressions.memberexpression\" data-linktype=\"relative-path\">MemberExpression</a>. If <code>member</code> is of type <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a>, this method calls <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Property_\" data-linktype=\"relative-path\">Property</a> to create the <a class=\"xref\" href=\"system.linq.expressions.memberexpression\" data-linktype=\"relative-path\">MemberExpression</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_MakeTry_System_Type_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Collections_Generic_IEnumerable_System_Linq_Expressions_CatchBlock__\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_MakeTry_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MakeTry(Type,Expression,Expression,Expression,IEnumerable&lt;CatchBlock&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.tryexpression\" data-linktype=\"relative-path\">TryExpression</a> representing a try block with the specified elements.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.TryExpression MakeTry (Type type, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression finally, System.Linq.Expressions.Expression fault, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.CatchBlock&gt; handlers);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The result type of the try expression. If null, bodh and all handlers must have identical type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The body of the try block.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>finally</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The body of the finally block. Pass null if the try block has no finally block associated with it.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>fault</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The body of the fault block. Pass null if the try block has no fault block associated with it.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>handlers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.expressions.catchblock\" data-linktype=\"relative-path\">CatchBlock</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A collection of <a class=\"xref\" href=\"system.linq.expressions.catchblock\" data-linktype=\"relative-path\">CatchBlock</a>s representing the catch statements to be associated with the try block.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.tryexpression\" data-linktype=\"relative-path\">TryExpression</a></div>\r\n                  </div>\r\n                  <p>The created <a class=\"xref\" href=\"system.linq.expressions.tryexpression\" data-linktype=\"relative-path\">TryExpression</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_MakeUnary_System_Linq_Expressions_ExpressionType_System_Linq_Expressions_Expression_System_Type_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_MakeUnary_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MakeUnary(ExpressionType,Expression,Type)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a>, given an operand, by calling the appropriate factory method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.UnaryExpression MakeUnary (System.Linq.Expressions.ExpressionType unaryType, System.Linq.Expressions.Expression operand, Type type);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>unaryType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> that specifies the type of unary operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>operand</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> that represents the operand.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> that specifies the type to be converted to (pass <code>null</code> if not applicable).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that results from calling the appropriate factory method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>operand</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>unaryType</code> does not correspond to a unary expression node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>unaryType</code> parameter determines which <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> factory method this method calls. For example, if <code>unaryType</code> is equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a>, this method invokes <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Convert_\" data-linktype=\"relative-path\">Convert</a>. The <code>type</code>parameter is ignored if it does not apply to the factory method that is called.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_MakeUnary_System_Linq_Expressions_ExpressionType_System_Linq_Expressions_Expression_System_Type_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_MakeUnary_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MakeUnary(ExpressionType,Expression,Type,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a>, given an operand and implementing method, by calling the appropriate factory method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.UnaryExpression MakeUnary (System.Linq.Expressions.ExpressionType unaryType, System.Linq.Expressions.Expression operand, Type type, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>unaryType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> that specifies the type of unary operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>operand</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> that represents the operand.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> that specifies the type to be converted to (pass <code>null</code> if not applicable).</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents the implementing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that results from calling the appropriate factory method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>operand</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>unaryType</code> does not correspond to a unary expression node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>unaryType</code> parameter determines which <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> factory method this method calls. For example, if <code>unaryType</code> is equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a>, this method invokes <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Convert_\" data-linktype=\"relative-path\">Convert</a>. The <code>type</code> and <code>method</code> parameters are ignored if they do not apply to the factory method that is called.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_MemberBind_System_Reflection_MemberInfo_System_Collections_Generic_IEnumerable_System_Linq_Expressions_MemberBinding__\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_MemberBind_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MemberBind(MemberInfo,IEnumerable&lt;MemberBinding&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.membermemberbinding\" data-linktype=\"relative-path\">MemberMemberBinding</a> that represents the recursive initialization of members of a field or property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MemberInfo member, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt; bindings);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>member</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.MemberBinding.Member*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindings</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.expressions.memberbinding\" data-linktype=\"relative-path\">MemberBinding</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains <a class=\"xref\" href=\"system.linq.expressions.memberbinding\" data-linktype=\"relative-path\">MemberBinding</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.MemberMemberBinding.Bindings*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.membermemberbinding\" data-linktype=\"relative-path\">MemberMemberBinding</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.membermemberbinding\" data-linktype=\"relative-path\">MemberMemberBinding</a> that has the <span class=\"xref\">stem.Linq.Expressions.MemberBinding.BindingType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.memberbindingtype\" data-linktype=\"relative-path\">MemberBindingType</a> and the <span class=\"xref\">stem.Linq.Expressions.MemberBinding.Member*</span> and <span class=\"xref\">stem.Linq.Expressions.MemberMemberBinding.Bindings*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>member</code> or <code>bindings</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>member</code> does not represent a field or property.  </p>\n<p> -or-  </p>\n<p> The <span class=\"xref\">stem.Linq.Expressions.MemberBinding.Member*</span> property of an element of <code>bindings</code> does not represent a member of the type of the field or property that <code>member</code> represents.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>member</code> parameter must represent a field or property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_MemberBind_System_Reflection_MemberInfo_System_Linq_Expressions_MemberBinding___\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_MemberBind_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MemberBind(MemberInfo,MemberBinding[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.membermemberbinding\" data-linktype=\"relative-path\">MemberMemberBinding</a> that represents the recursive initialization of members of a field or property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MemberInfo member, System.Linq.Expressions.MemberBinding[] bindings);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>member</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.MemberBinding.Member*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindings</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.memberbinding\" data-linktype=\"relative-path\">MemberBinding</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.linq.expressions.memberbinding\" data-linktype=\"relative-path\">MemberBinding</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.MemberMemberBinding.Bindings*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.membermemberbinding\" data-linktype=\"relative-path\">MemberMemberBinding</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.membermemberbinding\" data-linktype=\"relative-path\">MemberMemberBinding</a> that has the <span class=\"xref\">stem.Linq.Expressions.MemberBinding.BindingType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.memberbindingtype\" data-linktype=\"relative-path\">MemberBindingType</a> and the <span class=\"xref\">stem.Linq.Expressions.MemberBinding.Member*</span> and <span class=\"xref\">stem.Linq.Expressions.MemberMemberBinding.Bindings*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>member</code> or <code>bindings</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>member</code> does not represent a field or property.  </p>\n<p> -or-  </p>\n<p> The <span class=\"xref\">stem.Linq.Expressions.MemberBinding.Member*</span> property of an element of <code>bindings</code> does not represent a member of the type of the field or property that <code>member</code> represents.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>member</code> parameter must represent a field or property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_MemberBind_System_Reflection_MethodInfo_System_Collections_Generic_IEnumerable_System_Linq_Expressions_MemberBinding__\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_MemberBind_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MemberBind(MethodInfo,IEnumerable&lt;MemberBinding&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.membermemberbinding\" data-linktype=\"relative-path\">MemberMemberBinding</a> that represents the recursive initialization of members of a member that is accessed by using a property accessor method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MethodInfo propertyAccessor, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt; bindings);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>propertyAccessor</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents a property accessor method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindings</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.expressions.memberbinding\" data-linktype=\"relative-path\">MemberBinding</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains <a class=\"xref\" href=\"system.linq.expressions.memberbinding\" data-linktype=\"relative-path\">MemberBinding</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.MemberMemberBinding.Bindings*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.membermemberbinding\" data-linktype=\"relative-path\">MemberMemberBinding</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.membermemberbinding\" data-linktype=\"relative-path\">MemberMemberBinding</a> that has the <span class=\"xref\">stem.Linq.Expressions.MemberBinding.BindingType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.memberbindingtype\" data-linktype=\"relative-path\">MemberBindingType</a>, the <span class=\"xref\">stem.Linq.Expressions.MemberBinding.Member*</span> property set to the <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a> that represents the property accessed in <code>propertyAccessor</code>, and <span class=\"xref\">stem.Linq.Expressions.MemberMemberBinding.Bindings*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>propertyAccessor</code> or <code>bindings</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>propertyAccessor</code> does not represent a property accessor method.  </p>\n<p> -or-  </p>\n<p> The <span class=\"xref\">stem.Linq.Expressions.MemberBinding.Member*</span> property of an element of <code>bindings</code> does not represent a member of the type of the property accessed by the method that <code>propertyAccessor</code> represents.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_MemberBind_System_Reflection_MethodInfo_System_Linq_Expressions_MemberBinding___\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_MemberBind_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MemberBind(MethodInfo,MemberBinding[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.membermemberbinding\" data-linktype=\"relative-path\">MemberMemberBinding</a> that represents the recursive initialization of members of a member that is accessed by using a property accessor method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MethodInfo propertyAccessor, System.Linq.Expressions.MemberBinding[] bindings);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>propertyAccessor</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents a property accessor method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindings</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.memberbinding\" data-linktype=\"relative-path\">MemberBinding</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.linq.expressions.memberbinding\" data-linktype=\"relative-path\">MemberBinding</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.MemberMemberBinding.Bindings*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.membermemberbinding\" data-linktype=\"relative-path\">MemberMemberBinding</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.membermemberbinding\" data-linktype=\"relative-path\">MemberMemberBinding</a> that has the <span class=\"xref\">stem.Linq.Expressions.MemberBinding.BindingType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.memberbindingtype\" data-linktype=\"relative-path\">MemberBindingType</a>, the <span class=\"xref\">stem.Linq.Expressions.MemberBinding.Member*</span> property set to the <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a> that represents the property accessed in <code>propertyAccessor</code>, and <span class=\"xref\">stem.Linq.Expressions.MemberMemberBinding.Bindings*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>propertyAccessor</code> or <code>bindings</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>propertyAccessor</code> does not represent a property accessor method.  </p>\n<p> -or-  </p>\n<p> The <span class=\"xref\">stem.Linq.Expressions.MemberBinding.Member*</span> property of an element of <code>bindings</code> does not represent a member of the type of the property accessed by the method that <code>propertyAccessor</code> represents.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_MemberInit_System_Linq_Expressions_NewExpression_System_Collections_Generic_IEnumerable_System_Linq_Expressions_MemberBinding__\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_MemberInit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MemberInit(NewExpression,IEnumerable&lt;MemberBinding&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Represents an expression that creates a new object and initializes a property of the object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.MemberInitExpression MemberInit (System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt; bindings);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>newExpression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a> to set the <span class=\"xref\">stem.Linq.Expressions.MemberInitExpression.NewExpression*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindings</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.expressions.memberbinding\" data-linktype=\"relative-path\">MemberBinding</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains <a class=\"xref\" href=\"system.linq.expressions.memberbinding\" data-linktype=\"relative-path\">MemberBinding</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.MemberInitExpression.Bindings*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.memberinitexpression\" data-linktype=\"relative-path\">MemberInitExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.memberinitexpression\" data-linktype=\"relative-path\">MemberInitExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.MemberInitExpression.NewExpression*</span> and <span class=\"xref\">stem.Linq.Expressions.MemberInitExpression.Bindings*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>newExpression</code> or <code>bindings</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Linq.Expressions.MemberBinding.Member*</span> property of an element of <code>bindings</code> does not represent a member of the type that <code>newExpression</code>.Type represents.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.memberinitexpression\" data-linktype=\"relative-path\">MemberInitExpression</a> is equal to the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of <code>newExpression</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates an expression that creates a new object and initializes a property of the object.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#40\">    &#39; Add the following directive to your file:\n    &#39; Imports System.Linq.Expressions  \n\n    Class TestMemberInitClass\n        Public Property Sample As Integer\n    End Class\n\n    Sub MemberInit()\n        &#39; This expression creates a new TestMemberInitClass object\n        &#39; and assigns 10 to its Sample property.\n        Dim testExpr As Expression = Expression.MemberInit(\n            Expression.[New](GetType(TestMemberInitClass)),\n            New List(Of MemberBinding)() From {\n                Expression.Bind(GetType(TestMemberInitClass).GetMember(&quot;Sample&quot;)(0), Expression.Constant(10))\n            }\n        )\n\n        &#39; The following statement first creates an expression tree,\n        &#39; then compiles it, and then runs it.\n        Dim test = Expression.Lambda(Of Func(Of TestMemberInitClass))(testExpr).Compile()()\n        Console.WriteLine(test.Sample)\n    End Sub\n\n    &#39; This code example produces the following output:\n    &#39;\n    &#39; 10\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#40\">\n         // Add the following directive to your file:\n         // using System.Linq.Expressions;  \n\n         class TestMemberInitClass\n         {\n             public int sample { get; set; }\n         }\n\n         static void MemberInit()\n         {   \n             // This expression creates a new TestMemberInitClass object\n             // and assigns 10 to its sample property.\n             Expression testExpr = Expression.MemberInit(\n                 Expression.New(typeof(TestMemberInitClass)),\n                 new List&lt;MemberBinding&gt;() {\n                     Expression.Bind(typeof(TestMemberInitClass).GetMember(&quot;sample&quot;)[0], Expression.Constant(10))\n                 }\n             );\n\n             // The following statement first creates an expression tree,\n             // then compiles it, and then runs it.\n             var test = Expression.Lambda&lt;Func&lt;TestMemberInitClass&gt;&gt;(testExpr).Compile()();\n             Console.WriteLine(test.sample);\n         }\n\n         // This code example produces the following output:\n         //\n         // 10\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_MemberInit_System_Linq_Expressions_NewExpression_System_Linq_Expressions_MemberBinding___\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_MemberInit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MemberInit(NewExpression,MemberBinding[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.memberinitexpression\" data-linktype=\"relative-path\">MemberInitExpression</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.MemberInitExpression MemberInit (System.Linq.Expressions.NewExpression newExpression, System.Linq.Expressions.MemberBinding[] bindings);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>newExpression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a> to set the <span class=\"xref\">stem.Linq.Expressions.MemberInitExpression.NewExpression*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindings</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.memberbinding\" data-linktype=\"relative-path\">MemberBinding</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.linq.expressions.memberbinding\" data-linktype=\"relative-path\">MemberBinding</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.MemberInitExpression.Bindings*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.memberinitexpression\" data-linktype=\"relative-path\">MemberInitExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.memberinitexpression\" data-linktype=\"relative-path\">MemberInitExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.MemberInitExpression.NewExpression*</span> and <span class=\"xref\">stem.Linq.Expressions.MemberInitExpression.Bindings*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>newExpression</code> or <code>bindings</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Linq.Expressions.MemberBinding.Member*</span> property of an element of <code>bindings</code> does not represent a member of the type that <code>newExpression</code>.Type represents.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.memberinitexpression\" data-linktype=\"relative-path\">MemberInitExpression</a> is equal to the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of <code>newExpression</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the MemberInit method to create a <a class=\"xref\" href=\"system.linq.expressions.memberinitexpression\" data-linktype=\"relative-path\">MemberInitExpression</a> that represents the initialization of two members of a new object.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.Expression#9\">        class Animal\n        {\n            public string Species {get; set;}\n            public int Age {get; set;}\n        }\n\n        public static void CreateMemberInitExpression()\n        {\n            System.Linq.Expressions.NewExpression newAnimal =\n                System.Linq.Expressions.Expression.New(typeof(Animal));\n\n            System.Reflection.MemberInfo speciesMember =\n                typeof(Animal).GetMember(&quot;Species&quot;)[0];\n            System.Reflection.MemberInfo ageMember =\n                typeof(Animal).GetMember(&quot;Age&quot;)[0];\n\n            // Create a MemberBinding object for each member\n            // that you want to initialize.\n            System.Linq.Expressions.MemberBinding speciesMemberBinding =\n                System.Linq.Expressions.Expression.Bind(\n                    speciesMember,\n                    System.Linq.Expressions.Expression.Constant(&quot;horse&quot;));\n            System.Linq.Expressions.MemberBinding ageMemberBinding =\n                System.Linq.Expressions.Expression.Bind(\n                    ageMember,\n                    System.Linq.Expressions.Expression.Constant(12));\n\n            // Create a MemberInitExpression that represents initializing\n            // two members of the &#39;Animal&#39; class.\n            System.Linq.Expressions.MemberInitExpression memberInitExpression =\n                System.Linq.Expressions.Expression.MemberInit(\n                    newAnimal,\n                    speciesMemberBinding,\n                    ageMemberBinding);\n\n            Console.WriteLine(memberInitExpression.ToString());\n\n            // This code produces the following output:\n            //\n            // new Animal() {Species = &quot;horse&quot;, Age = 12}\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.Expression#9\">    Class Animal\n        Public Species As String\n        Public Age As Integer\n    End Class\n\n    Shared Sub CreateMemberInitExpression()\n        Dim newAnimal As System.Linq.Expressions.NewExpression = _\n            System.Linq.Expressions.Expression.[New](Type.GetType(&quot;ExpressionVB.MemberInitExample+Animal&quot;))\n\n        Dim speciesMember As System.Reflection.MemberInfo = _\n            Type.GetType(&quot;ExpressionVB.MemberInitExample+Animal&quot;).GetMember(&quot;Species&quot;)(0)\n        Dim ageMember As System.Reflection.MemberInfo = _\n            Type.GetType(&quot;ExpressionVB.MemberInitExample+Animal&quot;).GetMember(&quot;Age&quot;)(0)\n\n        &#39; Create a MemberBinding object for each member\n        &#39; that you want to initialize.\n        Dim speciesMemberBinding As System.Linq.Expressions.MemberBinding = _\n            System.Linq.Expressions.Expression.Bind( _\n                speciesMember, _\n                System.Linq.Expressions.Expression.Constant(&quot;horse&quot;))\n        Dim ageMemberBinding As System.Linq.Expressions.MemberBinding = _\n            System.Linq.Expressions.Expression.Bind( _\n                ageMember, _\n                System.Linq.Expressions.Expression.Constant(12))\n\n        &#39; Create a MemberInitExpression that represents initializing\n        &#39; two members of the &#39;Animal&#39; class.\n        Dim memberInitExpression As System.Linq.Expressions.MemberInitExpression = _\n            System.Linq.Expressions.Expression.MemberInit( _\n                newAnimal, _\n                speciesMemberBinding, _\n                ageMemberBinding)\n\n        Console.WriteLine(memberInitExpression.ToString())\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; new Animal() {Species = &quot;horse&quot;, Age = 12}\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Modulo_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Modulo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Modulo(Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an arithmetic remainder operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression Modulo (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>right</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The modulus operator is not defined for <code>left</code>.Type and <code>right</code>.Type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The resulting <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> has the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> and <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> properties are both <code>true</code>. Otherwise, they are <code>false</code>. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Conversion_\" data-linktype=\"relative-path\">Conversion</a> property is <code>null</code>.  </p>\n<p> The following information describes the implementing method, the node type, and whether a node is lifted.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the selected implementing method for the operation:  </p>\n<ul>\n<li><p>If the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of either <code>left</code> or <code>right</code> represents a user-defined type that overloads the modulus operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that method is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if <code>left</code>.Type and <code>right</code>.Type are numeric types, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  </p>\n<ul>\n<li><p><code>left</code>.Type and <code>right</code>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is a non-nullable value type.  </p>\n</li>\n</ul>\n<p>If the implementing method is <code>null</code>:  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined modulus operator.  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined modulus operator.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Modulo_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Modulo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Modulo(Expression,Expression,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an arithmetic remainder operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression Modulo (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span>, and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>right</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is not <code>null</code> and the method it represents returns <code>void</code>, is not <code>static</code> (<code>Shared</code> in Visual Basic), or does not take exactly two arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is <code>null</code> and the modulus operator is not defined for <code>left</code>.Type and <code>right</code>.Type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The resulting <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> has the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> and <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> properties are both <code>true</code>. Otherwise, they are <code>false</code>. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Conversion_\" data-linktype=\"relative-path\">Conversion</a> property is <code>null</code>.  </p>\n<p> The following information describes the implementing method, the node type, and whether a node is lifted.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The implementing method for the operation is chosen based on the following rules:  </p>\n<ul>\n<li><p>If <code>method</code> is not <code>null</code> and it represents a non-void, <code>static</code> (<code>Shared</code> in Visual Basic) method that takes two arguments, it is the implementing method for the node.  </p>\n</li>\n<li><p>Otherwise, if the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of either <code>left</code> or <code>right</code> represents a user-defined type that overloads the modulus operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that method is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if <code>left</code>.Type and <code>right</code>.Type are numeric types, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  </p>\n<ul>\n<li><p><code>left</code>.Type and <code>right</code>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is a non-nullable value type.  </p>\n</li>\n</ul>\n<p>If the implementing method is <code>null</code>:  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined modulus operator.  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined modulus operator.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_ModuloAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_ModuloAssign_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ModuloAssign(Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a remainder assignment operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression ModuloAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_ModuloAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_ModuloAssign_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ModuloAssign(Expression,Expression,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a remainder assignment operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression ModuloAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span>, and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_ModuloAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_System_Linq_Expressions_LambdaExpression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_ModuloAssign_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ModuloAssign(Expression,Expression,MethodInfo,LambdaExpression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a remainder assignment operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression ModuloAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>conversion</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Conversion*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span>, and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Conversion*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Multiply_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Multiply_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Multiply(Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an arithmetic multiplication operation that does not have overflow checking.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression Multiply (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>right</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The multiplication operator is not defined for <code>left</code>.Type and <code>right</code>.Type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The resulting <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> has the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> and <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> properties are both <code>true</code>. Otherwise, they are <code>false</code>. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Conversion_\" data-linktype=\"relative-path\">Conversion</a> property is <code>null</code>.  </p>\n<p> The following information describes the implementing method, the node type, and whether a node is lifted.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the selected implementing method for the operation:  </p>\n<ul>\n<li><p>If the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of either <code>left</code> or <code>right</code> represents a user-defined type that overloads the multiplication operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that method is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if <code>left</code>.Type and <code>right</code>.Type are numeric types, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  </p>\n<ul>\n<li><p><code>left</code>.Type and <code>right</code>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is a non-nullable value type.  </p>\n</li>\n</ul>\n<p>If the implementing method is <code>null</code>:  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined multiplication operator.  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create an expression that multiplies two values.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#27\">        &#39; Add the following directive to your file:\n        &#39; Imports System.Linq.Expressions  \n\n        &#39; This expression multiplies its two arguments.\n        &#39; Both arguments must be of the same type.\n        Dim multiplyExpr As Expression = Expression.Multiply(\n            Expression.Constant(10),\n            Expression.Constant(4)\n        )\n\n        &#39; Print the expression.\n        Console.WriteLine(multiplyExpr.ToString())\n\n        &#39; The following statement first creates an expression tree,\n        &#39; then compiles it, and then executes it.\n        Console.WriteLine(\n            Expression.Lambda(Of Func(Of Integer))(multiplyExpr).Compile()())\n\n        &#39; This code example produces the following output:\n        &#39;\n        &#39; (10*4)\n        &#39; 40\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#27\">            // Add the following directive to your file:\n            // using System.Linq.Expressions;  \n\n            // This expression multiplies its two arguments.\n            // Both arguments must be of the same type.\n            Expression multiplyExpr = Expression.Multiply(\n                Expression.Constant(10),\n                Expression.Constant(4)\n            );\n\n            // Print out the expression.\n            Console.WriteLine(multiplyExpr.ToString());\n\n            // The following statement first creates an expression tree,\n            // then compiles it, and then executes it.\n            Console.WriteLine(\n                Expression.Lambda&lt;Func&lt;int&gt;&gt;(multiplyExpr).Compile()());\n\n            // This code example produces the following output:\n            //\n            // (10*4)\n            // 40\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Multiply_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Multiply_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Multiply(Expression,Expression,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an arithmetic multiplication operation that does not have overflow checking.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression Multiply (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span>, and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>right</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is not <code>null</code> and the method it represents returns <code>void</code>, is not <code>static</code> (<code>Shared</code> in Visual Basic), or does not take exactly two arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is <code>null</code> and the multiplication operator is not defined for <code>left</code>.Type and <code>right</code>.Type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The resulting <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> has the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> and <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> properties are both <code>true</code>. Otherwise, they are <code>false</code>. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Conversion_\" data-linktype=\"relative-path\">Conversion</a> property is <code>null</code>.  </p>\n<p> The following information describes the implementing method, the node type, and whether a node is lifted.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the implementing method for the operation:  </p>\n<ul>\n<li><p>If <code>method</code> is not <code>null</code> and it represents a non-void, <code>static</code> (<code>Shared</code> in Visual Basic) method that takes two arguments, it is the implementing method for the node.  </p>\n</li>\n<li><p>Otherwise, if the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of either <code>left</code> or <code>right</code> represents a user-defined type that overloads the multiplication operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that method is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if <code>left</code>.Type and <code>right</code>.Type are numeric types, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  </p>\n<ul>\n<li><p><code>left</code>.Type and <code>right</code>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is a non-nullable value type.  </p>\n</li>\n</ul>\n<p>If the implementing method is <code>null</code>:  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined multiplication operator.  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_MultiplyAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_MultiplyAssign_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MultiplyAssign(Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a multiplication assignment operation that does not have overflow checking.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression MultiplyAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_MultiplyAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_MultiplyAssign_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MultiplyAssign(Expression,Expression,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a multiplication assignment operation that does not have overflow checking.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression MultiplyAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span>, and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_MultiplyAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_System_Linq_Expressions_LambdaExpression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_MultiplyAssign_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MultiplyAssign(Expression,Expression,MethodInfo,LambdaExpression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a multiplication assignment operation that does not have overflow checking.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression MultiplyAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>conversion</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Conversion*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span>, and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Conversion*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_MultiplyAssignChecked_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_MultiplyAssignChecked_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MultiplyAssignChecked(Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a multiplication assignment operation that has overflow checking.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression MultiplyAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_MultiplyAssignChecked_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_MultiplyAssignChecked_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MultiplyAssignChecked(Expression,Expression,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a multiplication assignment operation that has overflow checking.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression MultiplyAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span>, and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_MultiplyAssignChecked_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_System_Linq_Expressions_LambdaExpression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_MultiplyAssignChecked_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MultiplyAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a multiplication assignment operation that has overflow checking.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression MultiplyAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>conversion</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Conversion*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span>, and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Conversion*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_MultiplyChecked_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_MultiplyChecked_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MultiplyChecked(Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an arithmetic multiplication operation that has overflow checking.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression MultiplyChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>right</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The multiplication operator is not defined for <code>left</code>.Type and <code>right</code>.Type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The resulting <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> has the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> and <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> properties are both <code>true</code>. Otherwise, they are <code>false</code>. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Conversion_\" data-linktype=\"relative-path\">Conversion</a> property is <code>null</code>.  </p>\n<p> The following information describes the implementing method, the node type, and whether a node is lifted.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the selected implementing method for the operation:  </p>\n<ul>\n<li><p>If the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of either <code>left</code> or <code>right</code> represents a user-defined type that overloads the multiplication operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that method is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if <code>left</code>.Type and <code>right</code>.Type are numeric types, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  </p>\n<ul>\n<li><p><code>left</code>.Type and <code>right</code>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is a non-nullable value type.  </p>\n</li>\n</ul>\n<p>If the implementing method is <code>null</code>:  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined multiplication operator.  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_MultiplyChecked_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_MultiplyChecked_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MultiplyChecked(Expression,Expression,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an arithmetic multiplication operation that has overflow checking.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression MultiplyChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span>, and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>right</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is not <code>null</code> and the method it represents returns <code>void</code>, is not <code>static</code> (<code>Shared</code> in Visual Basic), or does not take exactly two arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is <code>null</code> and the multiplication operator is not defined for <code>left</code>.Type and <code>right</code>.Type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The resulting <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> has the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> and <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> properties are both <code>true</code>. Otherwise, they are <code>false</code>. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Conversion_\" data-linktype=\"relative-path\">Conversion</a> property is <code>null</code>.  </p>\n<p> The following information describes the implementing method, the node type, and whether a node is lifted.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the implementing method for the operation:  </p>\n<ul>\n<li><p>If <code>method</code> is not <code>null</code> and it represents a non-void, <code>static</code> (<code>Shared</code> in Visual Basic) method that takes two arguments, it is the implementing method for the node.  </p>\n</li>\n<li><p>Otherwise, if the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of either <code>left</code> or <code>right</code> represents a user-defined type that overloads the multiplication operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that method is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if <code>left</code>.Type and <code>right</code>.Type are numeric types, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  </p>\n<ul>\n<li><p><code>left</code>.Type and <code>right</code>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is a non-nullable value type.  </p>\n</li>\n</ul>\n<p>If the implementing method is <code>null</code>:  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined multiplication operator.  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Negate_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Negate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Negate(Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents an arithmetic negation operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.UnaryExpression Negate (System.Linq.Expressions.Expression expression);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.UnaryExpression.Operand*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.UnaryExpression.Operand*</span> property set to the specified value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>expression</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The unary minus operator is not defined for <code>expression</code>.Type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.unaryexpression#System_Linq_Expressions_UnaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> is set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> and <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> properties are both <code>true</code>. Otherwise, they are false.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the implementing method for the operation:  </p>\n<ul>\n<li><p>If <code>expression</code>.Type is a user-defined type that defines the unary minus operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that operator is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if <code>expression</code>.Type is a numeric type, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>expression</code>.Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  </p>\n<ul>\n<li><p><code>expression</code>.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is a non-nullable value type.  </p>\n</li>\n</ul>\n<p>If the implementing method is <code>null</code>, the type of the node is <code>expression</code>.Type. If <code>expression</code>.Type is non-nullable, the node is not lifted. Otherwise, the node is lifted.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to create an expression that represents an arithmetic negation operation.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#50\">        &#39; Add the following directive to your file:\n        &#39; Imports System.Linq.Expressions \n\n        &#39; This expression represents a negation operation.\n        Dim negateExpr As Expression = Expression.Negate(Expression.Constant(5))\n\n        &#39; The following statement first creates an expression tree,\n        &#39; then compiles it, and then runs it.\n        Console.WriteLine(Expression.Lambda(Of Func(Of Integer))(negateExpr).Compile()())\n\n        &#39; This code example produces the following output:\n        &#39;\n        &#39; -5\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#50\">            // Add the following directive to your file:\n            // using System.Linq.Expressions; \n\n            // This expression represents a negation operation.\n            Expression negateExpr = Expression.Negate(Expression.Constant(5));\n\n            // The following statement first creates an expression tree,\n            // then compiles it, and then runs it.\n            Console.WriteLine(Expression.Lambda&lt;Func&lt;int&gt;&gt;(negateExpr).Compile()());\n\n            // This code example produces the following output:\n            //\n            // -5\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Negate_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Negate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Negate(Expression,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents an arithmetic negation operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.UnaryExpression Negate (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.UnaryExpression.Operand*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.UnaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.UnaryExpression.Operand*</span> and <span class=\"xref\">stem.Linq.Expressions.UnaryExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>expression</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is not <code>null</code> and the method it represents returns <code>void</code>, is not <code>static</code> (<code>Shared</code> in Visual Basic), or does not take exactly one argument.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is <code>null</code> and the unary minus operator is not defined for <code>expression</code>.Type.  </p>\n<p> -or-  </p>\n<p> <code>expression</code>.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <code>method</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.unaryexpression#System_Linq_Expressions_UnaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> is set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> and <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> properties are both <code>true</code>. Otherwise, they are false.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the implementing method for the operation:  </p>\n<ul>\n<li><p>If <code>method</code> is not <code>null</code> and it represents a non-void, <code>static</code> (<code>Shared</code> in Visual Basic) method that takes one argument, it is the implementing method for the node.  </p>\n</li>\n<li><p>If <code>expression</code>.Type is a user-defined type that defines the unary minus operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that operator is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if <code>expression</code>.Type is a numeric type, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>expression</code>.Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  </p>\n<ul>\n<li><p><code>expression</code>.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is a non-nullable value type.  </p>\n</li>\n</ul>\n<p>If the implementing method is <code>null</code>, the type of the node is <code>expression</code>.Type. If <code>expression</code>.Type is non-nullable, the node is not lifted. Otherwise, the node is lifted.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_NegateChecked_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_NegateChecked_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NegateChecked(Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents an arithmetic negation operation that has overflow checking.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.UnaryExpression NegateChecked (System.Linq.Expressions.Expression expression);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.UnaryExpression.Operand*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.UnaryExpression.Operand*</span> property set to the specified value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>expression</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The unary minus operator is not defined for <code>expression</code>.Type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.unaryexpression#System_Linq_Expressions_UnaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> is set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> and <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> properties are both <code>true</code>. Otherwise, they are false.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the implementing method for the operation:  </p>\n<ul>\n<li><p>If <code>expression</code>.Type is a user-defined type that defines the unary minus operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that operator is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if <code>expression</code>.Type is a numeric type, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>expression</code>.Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  </p>\n<ul>\n<li><p><code>expression</code>.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is a non-nullable value type.  </p>\n</li>\n</ul>\n<p>If the implementing method is <code>null</code>, the type of the node is <code>expression</code>.Type. If <code>expression</code>.Type is non-nullable, the node is not lifted. Otherwise, the node is lifted.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_NegateChecked_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_NegateChecked_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NegateChecked(Expression,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents an arithmetic negation operation that has overflow checking. The implementing method can be specified.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.UnaryExpression NegateChecked (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.UnaryExpression.Operand*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.UnaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.UnaryExpression.Operand*</span> and <span class=\"xref\">stem.Linq.Expressions.UnaryExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>expression</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is not <code>null</code> and the method it represents returns <code>void</code>, is not <code>static</code> (<code>Shared</code> in Visual Basic), or does not take exactly one argument.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is <code>null</code> and the unary minus operator is not defined for <code>expression</code>.Type.  </p>\n<p> -or-  </p>\n<p> <code>expression</code>.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <code>method</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.unaryexpression#System_Linq_Expressions_UnaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> is set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> and <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> properties are both <code>true</code>. Otherwise, they are false.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the implementing method for the operation:  </p>\n<ul>\n<li><p>If <code>method</code> is not <code>null</code> and it represents a non-void, <code>static</code> (<code>Shared</code> in Visual Basic) method that takes one argument, it is the implementing method for the node.  </p>\n</li>\n<li><p>If <code>expression</code>.Type is a user-defined type that defines the unary minus operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that operator is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if <code>expression</code>.Type is a numeric type, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>expression</code>.Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  </p>\n<ul>\n<li><p><code>expression</code>.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is a non-nullable value type.  </p>\n</li>\n</ul>\n<p>If the implementing method is <code>null</code>, the type of the node is <code>expression</code>.Type. If <code>expression</code>.Type is non-nullable, the node is not lifted. Otherwise, the node is lifted.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_New_System_Reflection_ConstructorInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_New_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">New(ConstructorInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a> that represents calling the specified constructor that takes no arguments.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>constructor</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.NewExpression.Constructor*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.NewExpression.Constructor*</span> property set to the specified value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>constructor</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The constructor that <code>constructor</code> represents has at least one parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.newexpression#System_Linq_Expressions_NewExpression_Arguments_\" data-linktype=\"relative-path\">Arguments</a> and <a class=\"xref\" href=\"system.linq.expressions.newexpression#System_Linq_Expressions_NewExpression_Members_\" data-linktype=\"relative-path\">Members</a> properties of the resulting <a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a> are empty collections. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property represents the declaring type of the constructor represented by <code>constructor</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_New_System_Type_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_New_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">New(Type)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a> that represents calling the parameterless constructor of the specified type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.NewExpression New (Type type);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> that has a constructor that takes no arguments.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.NewExpression.Constructor*</span> property set to the <a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a> that represents the constructor without parameters for the specified type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>type</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The type that <code>type</code> represents does not have a constructor without parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>type</code> parameter must represent a type that has a constructor without parameters.  </p>\n<p> The <a class=\"xref\" href=\"system.linq.expressions.newexpression#System_Linq_Expressions_NewExpression_Arguments_\" data-linktype=\"relative-path\">Arguments</a> and <a class=\"xref\" href=\"system.linq.expressions.newexpression#System_Linq_Expressions_NewExpression_Members_\" data-linktype=\"relative-path\">Members</a> properties of the resulting <a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a> are empty collections. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is equal to <code>type</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the New method to create a <a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a> that represents constructing a new instance of a dictionary object by calling the constructor without parameters.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.Expression#10\">            // Create a NewExpression that represents constructing\n            // a new instance of Dictionary&lt;int, string&gt;.\n            System.Linq.Expressions.NewExpression newDictionaryExpression =\n                System.Linq.Expressions.Expression.New(typeof(Dictionary&lt;int, string&gt;));\n\n            Console.WriteLine(newDictionaryExpression.ToString());\n\n            // This code produces the following output:\n            //\n            // new Dictionary`2()\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.Expression#10\">        &#39; Create a NewExpression that represents constructing\n        &#39; a new instance of Dictionary(Of Integer, String).\n        Dim newDictionaryExpression As System.Linq.Expressions.NewExpression = _\n            System.Linq.Expressions.Expression.[New]( _\n                Type.GetType(&quot;System.Collections.Generic.Dictionary`2[System.Int32, System.String]&quot;))\n\n        Console.WriteLine(newDictionaryExpression.ToString())\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; new Dictionary`2()\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_New_System_Reflection_ConstructorInfo_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression__\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_New_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">New(ConstructorInfo,IEnumerable&lt;Expression&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a> that represents calling the specified constructor with the specified arguments.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>constructor</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.NewExpression.Constructor*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arguments</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.NewExpression.Arguments*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.NewExpression.Constructor*</span> and <span class=\"xref\">stem.Linq.Expressions.NewExpression.Arguments*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>constructor</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> An element of <code>arguments</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>arguments</code> parameter does not contain the same number of elements as the number of parameters for the constructor that <code>constructor</code> represents.  </p>\n<p> -or-  </p>\n<p> The <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property of an element of <code>arguments</code> is not assignable to the type of the corresponding parameter of the constructor that <code>constructor</code> represents.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>arguments</code> parameter must contain the same number of elements as the number of parameters for the constructor represented by <code>constructor</code>. If <code>arguments</code> is <code>null</code>, it is considered empty, and the <a class=\"xref\" href=\"system.linq.expressions.newexpression#System_Linq_Expressions_NewExpression_Arguments_\" data-linktype=\"relative-path\">Arguments</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a> is an empty collection.  </p>\n<p> The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a> represents the declaring type of the constructor represented by <code>constructor</code>. The <a class=\"xref\" href=\"system.linq.expressions.newexpression#System_Linq_Expressions_NewExpression_Members_\" data-linktype=\"relative-path\">Members</a> property is an empty collection.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_New_System_Reflection_ConstructorInfo_System_Linq_Expressions_Expression___\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_New_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">New(ConstructorInfo,Expression[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a> that represents calling the specified constructor with the specified arguments.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, System.Linq.Expressions.Expression[] arguments);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>constructor</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.NewExpression.Constructor*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arguments</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.NewExpression.Arguments*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.NewExpression.Constructor*</span> and <span class=\"xref\">stem.Linq.Expressions.NewExpression.Arguments*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>constructor</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> An element of <code>arguments</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The length of <code>arguments</code> does match the number of parameters for the constructor that <code>constructor</code> represents.  </p>\n<p> -or-  </p>\n<p> The <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property of an element of <code>arguments</code> is not assignable to the type of the corresponding parameter of the constructor that <code>constructor</code> represents.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>arguments</code> parameter must contain the same number of elements as the number of parameters for the constructor represented by <code>constructor</code>. If <code>arguments</code> is <code>null</code>, it is considered empty, and the <a class=\"xref\" href=\"system.linq.expressions.newexpression#System_Linq_Expressions_NewExpression_Arguments_\" data-linktype=\"relative-path\">Arguments</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a> is an empty collection.  </p>\n<p> The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a> represents the declaring type of the constructor represented by <code>constructor</code>. The <a class=\"xref\" href=\"system.linq.expressions.newexpression#System_Linq_Expressions_NewExpression_Members_\" data-linktype=\"relative-path\">Members</a> property is an empty collection.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_New_System_Reflection_ConstructorInfo_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression__System_Collections_Generic_IEnumerable_System_Reflection_MemberInfo__\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_New_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">New(ConstructorInfo,IEnumerable&lt;Expression&gt;,IEnumerable&lt;MemberInfo&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a> that represents calling the specified constructor with the specified arguments. The members that access the constructor initialized fields are specified.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments, System.Collections.Generic.IEnumerable&lt;System.Reflection.MemberInfo&gt; members);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>constructor</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.NewExpression.Constructor*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arguments</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.NewExpression.Arguments*</span> collection.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>members</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.NewExpression.Members*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.NewExpression.Constructor*</span>, <span class=\"xref\">stem.Linq.Expressions.NewExpression.Arguments*</span> and <span class=\"xref\">stem.Linq.Expressions.NewExpression.Members*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>constructor</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> An element of <code>arguments</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> An element of <code>members</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>arguments</code> parameter does not contain the same number of elements as the number of parameters for the constructor that <code>constructor</code> represents.  </p>\n<p> -or-  </p>\n<p> The <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property of an element of <code>arguments</code> is not assignable to the type of the corresponding parameter of the constructor that <code>constructor</code> represents.  </p>\n<p> -or-  </p>\n<p> The <code>members</code> parameter does not have the same number of elements as <code>arguments</code>.  </p>\n<p> -or-  </p>\n<p> An element of <code>arguments</code> has a <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of <code>members</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>arguments</code> parameter must contain the same number of elements as the number of parameters for the constructor represented by <code>constructor</code>. If <code>arguments</code> is <code>null</code>, it is considered empty, and the <a class=\"xref\" href=\"system.linq.expressions.newexpression#System_Linq_Expressions_NewExpression_Arguments_\" data-linktype=\"relative-path\">Arguments</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a> is an empty collection.  </p>\n<p> If <code>members</code> is <code>null</code>, the <a class=\"xref\" href=\"system.linq.expressions.newexpression#System_Linq_Expressions_NewExpression_Members_\" data-linktype=\"relative-path\">Members</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a> is an empty collection. If <code>members</code> is not <code>null</code>, it must have the same number of elements as <code>arguments</code> and each element must not be <code>null</code>. Each element of <code>members</code> must be a <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a>, <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a> or <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents an instance member on the declaring type of the constructor represented by <code>constructor</code>. If it represents a property, the property must have a <code>get</code> accessor. The corresponding element of <code>arguments</code> for each element of <code>members</code> must have a <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property that represents a type that is assignable to the type of the member that the <code>members</code> element represents.  </p>\n<p> The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a> represents the declaring type of the constructor that <code>constructor</code> represents.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_New_System_Reflection_ConstructorInfo_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression__System_Reflection_MemberInfo___\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_New_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">New(ConstructorInfo,IEnumerable&lt;Expression&gt;,MemberInfo[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a> that represents calling the specified constructor with the specified arguments. The members that access the constructor initialized fields are specified as an array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments, System.Reflection.MemberInfo[] members);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>constructor</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.NewExpression.Constructor*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arguments</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.NewExpression.Arguments*</span> collection.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>members</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.NewExpression.Members*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.NewExpression.Constructor*</span>, <span class=\"xref\">stem.Linq.Expressions.NewExpression.Arguments*</span> and <span class=\"xref\">stem.Linq.Expressions.NewExpression.Members*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>constructor</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> An element of <code>arguments</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> An element of <code>members</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>arguments</code> parameter does not contain the same number of elements as the number of parameters for the constructor that <code>constructor</code> represents.  </p>\n<p> -or-  </p>\n<p> The <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property of an element of <code>arguments</code> is not assignable to the type of the corresponding parameter of the constructor that <code>constructor</code> represents.  </p>\n<p> -or-  </p>\n<p> The <code>members</code> parameter does not have the same number of elements as <code>arguments</code>.  </p>\n<p> -or-  </p>\n<p> An element of <code>arguments</code> has a <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of <code>members</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>arguments</code> parameter must contain the same number of elements as the number of parameters for the constructor represented by <code>constructor</code>. If <code>arguments</code> is <code>null</code>, it is considered empty, and the <a class=\"xref\" href=\"system.linq.expressions.newexpression#System_Linq_Expressions_NewExpression_Arguments_\" data-linktype=\"relative-path\">Arguments</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a> is an empty collection.  </p>\n<p> If <code>members</code> is <code>null</code>, the <a class=\"xref\" href=\"system.linq.expressions.newexpression#System_Linq_Expressions_NewExpression_Members_\" data-linktype=\"relative-path\">Members</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a> is an empty collection. If <code>members</code> is not <code>null</code>, it must have the same number of elements as <code>arguments</code> and each element must not be <code>null</code>. Each element of <code>members</code> must be a <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a>, <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a> or <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents an instance member on the declaring type of the constructor represented by <code>constructor</code>. If it represents a property, the property must be able to retrieve the value of the associated field. The corresponding element of <code>arguments</code> for each element of <code>members</code> must have a <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property that represents a type that is assignable to the type of the member that the <code>members</code> element represents.  </p>\n<p> The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a> represents the declaring type of the constructor that <code>constructor</code> represents.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_NewArrayBounds_System_Type_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression__\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_NewArrayBounds_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NewArrayBounds(Type,IEnumerable&lt;Expression&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.newarrayexpression\" data-linktype=\"relative-path\">NewArrayExpression</a> that represents creating an array that has a specified rank.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.NewArrayExpression NewArrayBounds (Type type, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; bounds);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> that represents the element type of the array.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bounds</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.NewArrayExpression.Expressions*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.newarrayexpression\" data-linktype=\"relative-path\">NewArrayExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.newarrayexpression\" data-linktype=\"relative-path\">NewArrayExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.NewArrayExpression.Expressions*</span> property set to the specified value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>type</code> or <code>bounds</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> An element of <code>bounds</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property of an element of <code>bounds</code> does not represent an integral type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.newarrayexpression\" data-linktype=\"relative-path\">NewArrayExpression</a> represents an array type whose rank is equal to the length of <code>bounds</code> and whose element type is <code>type</code>.  </p>\n<p> The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of each element of <code>bounds</code> must represent an integral type.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_NewArrayBounds_\" data-linktype=\"relative-path\">NewArrayBounds</a> method to create an expression tree that represents creating a string array that has a rank of 2.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.Expression#2\">            // Create an expression tree that represents creating a \n            // two-dimensional array of type string with bounds [3,2].\n            System.Linq.Expressions.NewArrayExpression newArrayExpression =\n                System.Linq.Expressions.Expression.NewArrayBounds(\n                        typeof(string),\n                        System.Linq.Expressions.Expression.Constant(3),\n                        System.Linq.Expressions.Expression.Constant(2));\n\n            // Output the string representation of the Expression.\n            Console.WriteLine(newArrayExpression.ToString());\n\n            // This code produces the following output:\n            //\n            // new System.String[,](3, 2)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.Expression#2\">        &#39; Create an expression tree that represents creating a string\n        &#39; array with rank 2 and bounds (3,2).\n        Dim newArrayExpression As System.Linq.Expressions.NewArrayExpression = _\n            System.Linq.Expressions.Expression.NewArrayBounds( _\n                    Type.GetType(&quot;System.String&quot;), _\n                    System.Linq.Expressions.Expression.Constant(3), _\n                    System.Linq.Expressions.Expression.Constant(2))\n\n        &#39; Output the string representation of the Expression.\n        Console.WriteLine(newArrayExpression.ToString())\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; new System.String[,](3, 2)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_NewArrayBounds_System_Type_System_Linq_Expressions_Expression___\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_NewArrayBounds_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NewArrayBounds(Type,Expression[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.newarrayexpression\" data-linktype=\"relative-path\">NewArrayExpression</a> that represents creating an array that has a specified rank.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.NewArrayExpression NewArrayBounds (Type type, System.Linq.Expressions.Expression[] bounds);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> that represents the element type of the array.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bounds</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.NewArrayExpression.Expressions*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.newarrayexpression\" data-linktype=\"relative-path\">NewArrayExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.newarrayexpression\" data-linktype=\"relative-path\">NewArrayExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.NewArrayExpression.Expressions*</span> property set to the specified value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>type</code> or <code>bounds</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> An element of <code>bounds</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property of an element of <code>bounds</code> does not represent an integral type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.newarrayexpression\" data-linktype=\"relative-path\">NewArrayExpression</a> represents an array type whose rank is equal to the length of <code>bounds</code> and whose element type is <code>type</code>.  </p>\n<p> The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of each element of <code>bounds</code> must represent an integral type.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the NewArrayBounds method to create an expression tree that represents creating a string array that has a rank of 2.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.Expression#2\">            // Create an expression tree that represents creating a \n            // two-dimensional array of type string with bounds [3,2].\n            System.Linq.Expressions.NewArrayExpression newArrayExpression =\n                System.Linq.Expressions.Expression.NewArrayBounds(\n                        typeof(string),\n                        System.Linq.Expressions.Expression.Constant(3),\n                        System.Linq.Expressions.Expression.Constant(2));\n\n            // Output the string representation of the Expression.\n            Console.WriteLine(newArrayExpression.ToString());\n\n            // This code produces the following output:\n            //\n            // new System.String[,](3, 2)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.Expression#2\">        &#39; Create an expression tree that represents creating a string\n        &#39; array with rank 2 and bounds (3,2).\n        Dim newArrayExpression As System.Linq.Expressions.NewArrayExpression = _\n            System.Linq.Expressions.Expression.NewArrayBounds( _\n                    Type.GetType(&quot;System.String&quot;), _\n                    System.Linq.Expressions.Expression.Constant(3), _\n                    System.Linq.Expressions.Expression.Constant(2))\n\n        &#39; Output the string representation of the Expression.\n        Console.WriteLine(newArrayExpression.ToString())\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; new System.String[,](3, 2)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_NewArrayInit_System_Type_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression__\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_NewArrayInit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NewArrayInit(Type,IEnumerable&lt;Expression&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.newarrayexpression\" data-linktype=\"relative-path\">NewArrayExpression</a> that represents creating a one-dimensional array and initializing it from a list of elements.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.NewArrayExpression NewArrayInit (Type type, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; initializers);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> that represents the element type of the array.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>initializers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.NewArrayExpression.Expressions*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.newarrayexpression\" data-linktype=\"relative-path\">NewArrayExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.newarrayexpression\" data-linktype=\"relative-path\">NewArrayExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.NewArrayExpression.Expressions*</span> property set to the specified value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>type</code> or <code>initializers</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> An element of <code>initializers</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property of an element of <code>initializers</code> represents a type that is not assignable to the type that <code>type</code> represents.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of each element of <code>initializers</code> must represent a type that is assignable to the type represented by <code>type</code>, possibly after it is <em>quoted</em>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An element will be quoted only if <code>type</code> is <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>. Quoting means the element is wrapped in a <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> node. The resulting node is a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> whose <a class=\"xref\" href=\"system.linq.expressions.unaryexpression#System_Linq_Expressions_UnaryExpression_Operand_\" data-linktype=\"relative-path\">Operand</a> property is the element of <code>initializers</code>.  </p>\n</div>\n<p> The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.newarrayexpression\" data-linktype=\"relative-path\">NewArrayExpression</a> represents an array type whose rank is 1 and whose element type is <code>type</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the NewArrayInit method to create an expression tree that represents creating a one-dimensional string array that is initialized with a list of string expressions.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.Expression#1\">            List&lt;System.Linq.Expressions.Expression&gt; trees =\n                new List&lt;System.Linq.Expressions.Expression&gt;()\n                    { System.Linq.Expressions.Expression.Constant(&quot;oak&quot;),\n                      System.Linq.Expressions.Expression.Constant(&quot;fir&quot;),\n                      System.Linq.Expressions.Expression.Constant(&quot;spruce&quot;),\n                      System.Linq.Expressions.Expression.Constant(&quot;alder&quot;) };\n\n            // Create an expression tree that represents creating and  \n            // initializing a one-dimensional array of type string.\n            System.Linq.Expressions.NewArrayExpression newArrayExpression =\n                System.Linq.Expressions.Expression.NewArrayInit(typeof(string), trees);\n\n            // Output the string representation of the Expression.\n            Console.WriteLine(newArrayExpression.ToString());\n\n            // This code produces the following output:\n            //\n            // new [] {&quot;oak&quot;, &quot;fir&quot;, &quot;spruce&quot;, &quot;alder&quot;}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.Expression#1\">        Dim trees As New System.Collections.Generic.List(Of System.Linq.Expressions.Expression) _\n                (New System.Linq.Expressions.Expression() _\n                 {System.Linq.Expressions.Expression.Constant(&quot;oak&quot;), _\n                  System.Linq.Expressions.Expression.Constant(&quot;fir&quot;), _\n                  System.Linq.Expressions.Expression.Constant(&quot;spruce&quot;), _\n                  System.Linq.Expressions.Expression.Constant(&quot;alder&quot;)})\n\n        &#39; Create an expression tree that represents creating and  \n        &#39; initializing a one-dimensional array of type string.\n        Dim newArrayExpression As System.Linq.Expressions.NewArrayExpression = _\n            System.Linq.Expressions.Expression.NewArrayInit(Type.GetType(&quot;System.String&quot;), trees)\n\n        &#39; Output the string representation of the Expression.\n        Console.WriteLine(newArrayExpression.ToString())\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; new [] {&quot;oak&quot;, &quot;fir&quot;, &quot;spruce&quot;, &quot;alder&quot;}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_NewArrayInit_System_Type_System_Linq_Expressions_Expression___\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_NewArrayInit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NewArrayInit(Type,Expression[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.newarrayexpression\" data-linktype=\"relative-path\">NewArrayExpression</a> that represents creating a one-dimensional array and initializing it from a list of elements.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.NewArrayExpression NewArrayInit (Type type, System.Linq.Expressions.Expression[] initializers);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> that represents the element type of the array.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>initializers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.NewArrayExpression.Expressions*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.newarrayexpression\" data-linktype=\"relative-path\">NewArrayExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.newarrayexpression\" data-linktype=\"relative-path\">NewArrayExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.NewArrayExpression.Expressions*</span> property set to the specified value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>type</code> or <code>initializers</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> An element of <code>initializers</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property of an element of <code>initializers</code> represents a type that is not assignable to the type <code>type</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of each element of <code>initializers</code> must represent a type that is assignable to the type represented by <code>type</code>, possibly after it is <em>quoted</em>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An element will be quoted only if <code>type</code> is <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>. Quoting means the element is wrapped in a <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> node. The resulting node is a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> whose <a class=\"xref\" href=\"system.linq.expressions.unaryexpression#System_Linq_Expressions_UnaryExpression_Operand_\" data-linktype=\"relative-path\">Operand</a> property is the element of <code>initializers</code>.  </p>\n</div>\n<p> The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.newarrayexpression\" data-linktype=\"relative-path\">NewArrayExpression</a> represents an array type whose rank is 1 and whose element type is <code>type</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_NewArrayInit_\" data-linktype=\"relative-path\">NewArrayInit</a> method to create an expression tree that represents creating a one-dimensional string array that is initialized with a list of string expressions.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.Expression#1\">            List&lt;System.Linq.Expressions.Expression&gt; trees =\n                new List&lt;System.Linq.Expressions.Expression&gt;()\n                    { System.Linq.Expressions.Expression.Constant(&quot;oak&quot;),\n                      System.Linq.Expressions.Expression.Constant(&quot;fir&quot;),\n                      System.Linq.Expressions.Expression.Constant(&quot;spruce&quot;),\n                      System.Linq.Expressions.Expression.Constant(&quot;alder&quot;) };\n\n            // Create an expression tree that represents creating and  \n            // initializing a one-dimensional array of type string.\n            System.Linq.Expressions.NewArrayExpression newArrayExpression =\n                System.Linq.Expressions.Expression.NewArrayInit(typeof(string), trees);\n\n            // Output the string representation of the Expression.\n            Console.WriteLine(newArrayExpression.ToString());\n\n            // This code produces the following output:\n            //\n            // new [] {&quot;oak&quot;, &quot;fir&quot;, &quot;spruce&quot;, &quot;alder&quot;}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.Expression#1\">        Dim trees As New System.Collections.Generic.List(Of System.Linq.Expressions.Expression) _\n                (New System.Linq.Expressions.Expression() _\n                 {System.Linq.Expressions.Expression.Constant(&quot;oak&quot;), _\n                  System.Linq.Expressions.Expression.Constant(&quot;fir&quot;), _\n                  System.Linq.Expressions.Expression.Constant(&quot;spruce&quot;), _\n                  System.Linq.Expressions.Expression.Constant(&quot;alder&quot;)})\n\n        &#39; Create an expression tree that represents creating and  \n        &#39; initializing a one-dimensional array of type string.\n        Dim newArrayExpression As System.Linq.Expressions.NewArrayExpression = _\n            System.Linq.Expressions.Expression.NewArrayInit(Type.GetType(&quot;System.String&quot;), trees)\n\n        &#39; Output the string representation of the Expression.\n        Console.WriteLine(newArrayExpression.ToString())\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; new [] {&quot;oak&quot;, &quot;fir&quot;, &quot;spruce&quot;, &quot;alder&quot;}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Not_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Not_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Not(Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents a bitwise complement operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.UnaryExpression Not (System.Linq.Expressions.Expression expression);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.UnaryExpression.Operand*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.UnaryExpression.Operand*</span> property set to the specified value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>expression</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The unary not operator is not defined for <code>expression</code>.Type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.unaryexpression#System_Linq_Expressions_UnaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> is set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> and <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> properties are both <code>true</code>. Otherwise, they are <code>false</code>.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the implementing method for the operation:  </p>\n<ul>\n<li><p>If <code>expression</code>.Type is a user-defined type that defines the unary not operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that operator is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if <code>expression</code>.Type is a numeric or Boolean type, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>expression</code>.Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  </p>\n<ul>\n<li><p><code>expression</code>.Type is a nullable value type and the corresponding non-nullable type is equal to the argument type of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is a non-nullable value type.  </p>\n</li>\n</ul>\n<p>If the implementing method is <code>null</code>, the type of the node is <code>expression</code>.Type. If <code>expression</code>.Type is non-nullable, the node is not lifted. Otherwise, the node is lifted.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to create an expression that represents a logical NOT operation.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#51\">        &#39; Add the following directive to your file:\n        &#39; Imports System.Linq.Expressions \n\n        &#39; This expression represents a NOT operation.\n        Dim notExpr As Expression = Expression.Not(Expression.Constant(True))\n\n        Console.WriteLine(notExpr)\n        &#39; The following statement first creates an expression tree,\n        &#39; then compiles it, and then runs it.\n        Console.WriteLine(Expression.Lambda(Of Func(Of Boolean))(notExpr).Compile()())\n\n        &#39; This code example produces the following output:\n        &#39;\n        &#39; Not(True)\n        &#39; False\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#51\">            // Add the following directive to your file:\n            // using System.Linq.Expressions; \n\n            // This expression represents a NOT operation.\n            Expression notExpr = Expression.Not(Expression.Constant(true));\n\n            Console.WriteLine(notExpr);\n\n            // The following statement first creates an expression tree,\n            // then compiles it, and then runs it.\n            Console.WriteLine(Expression.Lambda&lt;Func&lt;bool&gt;&gt;(notExpr).Compile()());\n\n            // This code example produces the following output:\n            //\n            // Not(True)\n            // False\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Not_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Not_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Not(Expression,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents a bitwise complement operation. The implementing method can be specified.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.UnaryExpression Not (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.UnaryExpression.Operand*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.UnaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.UnaryExpression.Operand*</span> and <span class=\"xref\">stem.Linq.Expressions.UnaryExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>expression</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is not <code>null</code> and the method it represents returns <code>void</code>, is not <code>static</code> (<code>Shared</code> in Visual Basic), or does not take exactly one argument.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is <code>null</code> and the unary not operator is not defined for <code>expression</code>.Type.  </p>\n<p> -or-  </p>\n<p> <code>expression</code>.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <code>method</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.unaryexpression#System_Linq_Expressions_UnaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> is set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> and <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> properties are both <code>true</code>. Otherwise, they are <code>false</code>.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the implementing method for the operation:  </p>\n<ul>\n<li><p>If <code>method</code> is not <code>null</code> and it represents a non-void, <code>static</code> (<code>Shared</code> in Visual Basic) method that takes one argument, it is the implementing method for the node.  </p>\n</li>\n<li><p>If <code>expression</code>.Type is a user-defined type that defines the unary not operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that operator is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if <code>expression</code>.Type is a numeric type, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>expression</code>.Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  </p>\n<ul>\n<li><p><code>expression</code>.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is a non-nullable value type.  </p>\n</li>\n</ul>\n<p>If the implementing method is <code>null</code>, the type of the node is <code>expression</code>.Type. If <code>expression</code>.Type is non-nullable, the node is not lifted. Otherwise, the node is lifted.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_NotEqual_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_NotEqual_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NotEqual(Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an inequality comparison.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression NotEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>right</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The inequality operator is not defined for <code>left</code>.Type and <code>right</code>.Type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The resulting <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> has the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> property is <code>true</code>. Otherwise, it is <code>false</code>. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> property is always <code>false</code>. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Conversion_\" data-linktype=\"relative-path\">Conversion</a> property is <code>null</code>.  </p>\n<p> The following information describes the implementing method, the node type, and whether a node is lifted.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the implementing method for the operation:  </p>\n<ul>\n<li><p>If the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of either <code>left</code> or <code>right</code> represents a user-defined type that overloads the inequality operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that method is the implementing method.  </p>\n</li>\n<li><p>Otherwise, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted and the type of the node is <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>:  </p>\n<ul>\n<li><p><code>left</code>.Type and <code>right</code>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>.  </p>\n</li>\n</ul>\n<p>If the implementing method is <code>null</code>:  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both non-nullable, the node is not lifted. The type of the node is <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>.  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both nullable, the node is lifted. The type of the node is <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_NotEqual_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Boolean_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_NotEqual_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NotEqual(Expression,Expression,Boolean,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an inequality comparison.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression NotEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>liftToNull</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to set <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.IsLiftedToNull*</span> to <code>true</code>; <code>false</code> to set <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.IsLiftedToNull*</span> to <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.IsLiftedToNull*</span>, and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>right</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is not <code>null</code> and the method it represents returns <code>void</code>, is not <code>static</code> (<code>Shared</code> in Visual Basic), or does not take exactly two arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is <code>null</code> and the inequality operator is not defined for <code>left</code>.Type and <code>right</code>.Type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The resulting <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> has the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> property is <code>true</code> and the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> property is equal to <code>liftToNull</code>. Otherwise, they are both <code>false</code>. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Conversion_\" data-linktype=\"relative-path\">Conversion</a> property is <code>null</code>.  </p>\n<p> The following information describes the implementing method, the node type, and whether a node is lifted.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the implementing method for the operation:  </p>\n<ul>\n<li><p>If <code>method</code> is not <code>null</code> and it represents a non-void, <code>static</code> (<code>Shared</code> in Visual Basic) method that takes two arguments, it is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of either <code>left</code> or <code>right</code> represents a user-defined type that overloads the inequality operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that method is the implementing method.  </p>\n</li>\n<li><p>Otherwise, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> if <code>liftToNull</code> is <code>true</code> or <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> if <code>liftToNull</code> is <code>false</code>:  </p>\n<ul>\n<li><p><code>left</code>.Type and <code>right</code>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>.  </p>\n</li>\n</ul>\n<p>If the implementing method is <code>null</code>:  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both non-nullable, the node is not lifted. The type of the node is <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>.  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both nullable, the node is lifted. The type of the node is nullable <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> if <code>liftToNull</code> is <code>true</code> or <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> if <code>liftToNull</code> is <code>false</code>.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_OnesComplement_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_OnesComplement_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnesComplement(Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the expression representing the ones complement.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.UnaryExpression OnesComplement (System.Linq.Expressions.Expression expression);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a></div>\r\n                  </div>\r\n                  <p>An instance of <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_OnesComplement_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_OnesComplement_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnesComplement(Expression,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the expression representing the ones complement.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.UnaryExpression OnesComplement (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents the implementing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a></div>\r\n                  </div>\r\n                  <p>An instance of <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Or_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Or_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Or(Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a bitwise <code>OR</code> operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression Or (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>right</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The bitwise <code>OR</code> operator is not defined for <code>left</code>.Type and <code>right</code>.Type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The resulting <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> has the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> and <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> properties are both <code>true</code>. Otherwise, they are <code>false</code>. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Conversion_\" data-linktype=\"relative-path\">Conversion</a> property is <code>null</code>.  </p>\n<p> The following information describes the implementing method, the node type, and whether a node is lifted.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the implementing method for the operation:  </p>\n<ul>\n<li><p>If the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of either <code>left</code> or <code>right</code> represents a user-defined type that overloads the bitwise <code>OR</code> operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that method is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if <code>left</code>.Type and <code>right</code>.Type are integral or Boolean types, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  </p>\n<ul>\n<li><p><code>left</code>.Type and <code>right</code>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is a non-nullable value type.  </p>\n</li>\n</ul>\n<p>If the implementing method is <code>null</code>:  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined bitwise <code>OR</code> operator.  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined bitwise <code>OR</code> operator.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create an expression that represents a logical OR operation.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#28\">        &#39; Add the following directive to your file:\n        &#39; Imports System.Linq.Expressions  \n\n        &#39; This expression perfroms a logical OR operation\n        &#39; on its two arguments. Both arguments must be of the same type,\n        &#39; which can be Boolean or integer.             \n        Dim orExpr As Expression = Expression.Or(\n             Expression.Constant(True),\n             Expression.Constant(False)\n         )\n\n        &#39; Print the expression.\n        Console.WriteLine(orExpr.ToString())\n\n        &#39; The following statement first creates an expression tree,\n        &#39; then compiles it, and then executes it.       \n        Console.WriteLine(Expression.Lambda(Of Func(Of Boolean))(orExpr).Compile()())\n\n        &#39; This code example produces the following output:\n        &#39;\n        &#39; (True Or False)\n        &#39; True\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#28\">            // Add the following directive to your file:\n            // using System.Linq.Expressions;  \n\n            // This expression perfroms a logical OR operation\n            // on its two arguments. Both arguments must be of the same type,\n            // which can be boolean or integer.             \n            Expression orExpr = Expression.Or(\n                Expression.Constant(true),\n                Expression.Constant(false)\n            );\n\n            // Print out the expression.\n            Console.WriteLine(orExpr.ToString());\n\n            // The following statement first creates an expression tree,\n            // then compiles it, and then executes it.       \n            Console.WriteLine(Expression.Lambda&lt;Func&lt;bool&gt;&gt;(orExpr).Compile()());\n\n            // This code example produces the following output:\n            //\n            // (True Or False)\n            // True\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Or_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Or_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Or(Expression,Expression,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a bitwise <code>OR</code> operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression Or (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span>, and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>right</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is not <code>null</code> and the method it represents returns <code>void</code>, is not <code>static</code> (<code>Shared</code> in Visual Basic), or does not take exactly two arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is <code>null</code> and the bitwise <code>OR</code> operator is not defined for <code>left</code>.Type and <code>right</code>.Type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The resulting <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> has the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> and <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> properties are both <code>true</code>. Otherwise, they are <code>false</code>. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Conversion_\" data-linktype=\"relative-path\">Conversion</a> property is <code>null</code>.  </p>\n<p> The following information describes the implementing method, the node type, and whether a node is lifted.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the implementing method for the operation:  </p>\n<ul>\n<li><p>If <code>method</code> is not <code>null</code> and it represents a non-void, <code>static</code> (<code>Shared</code> in Visual Basic) method that takes two arguments, it is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of either <code>left</code> or <code>right</code> represents a user-defined type that overloads the bitwise <code>OR</code> operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that method is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if <code>left</code>.Type and <code>right</code>.Type are integral or Boolean types, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  </p>\n<ul>\n<li><p><code>left</code>.Type and <code>right</code>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is a non-nullable value type.  </p>\n</li>\n</ul>\n<p>If the implementing method is <code>null</code>:  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined bitwise <code>OR</code> operator.  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined bitwise <code>OR</code> operator.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_OrAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_OrAssign_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OrAssign(Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a bitwise OR assignment operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression OrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_OrAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_OrAssign_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OrAssign(Expression,Expression,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a bitwise OR assignment operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression OrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span>, and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_OrAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_System_Linq_Expressions_LambdaExpression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_OrAssign_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OrAssign(Expression,Expression,MethodInfo,LambdaExpression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a bitwise OR assignment operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression OrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>conversion</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Conversion*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span>, and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Conversion*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_OrElse_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_OrElse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OrElse(Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a conditional <code>OR</code> operation that evaluates the second operand only if the first operand evaluates to <code>false</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression OrElse (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>right</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The bitwise <code>OR</code> operator is not defined for <code>left</code>.Type and <code>right</code>.Type.  </p>\n<p> -or-  </p>\n<p> <code>left</code>.Type and <code>right</code>.Type are not the same Boolean type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The resulting <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> has the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> and <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> properties are both <code>true</code>. Otherwise, they are <code>false</code>. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Conversion_\" data-linktype=\"relative-path\">Conversion</a> property is <code>null</code>.  </p>\n<p> The following information describes the implementing method, the node type, and whether a node is lifted.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the implementing method for the operation:  </p>\n<ul>\n<li><p>If the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of either <code>left</code> or <code>right</code> represents a user-defined type that overloads the bitwise <code>OR</code> operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that method is the implementing method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The conditional <code>OR</code> operator cannot be overloaded in C# or Visual Basic. However, the conditional <code>OR</code> operator is evaluated by using the bitwise <code>OR</code> operator. Thus, a user-defined overload of the bitwise <code>OR</code> operator can be the implementing method for this node type.  </p>\n</div>\n</li>\n<li><p>Otherwise, if <code>left</code>.Type and <code>right</code>.Type are Boolean types, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  </p>\n<ul>\n<li><p><code>left</code>.Type and <code>right</code>.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is a non-nullable value type.  </p>\n</li>\n</ul>\n<p>If the implementing method is <code>null</code>:  </p>\n</li>\n<li><p><code>left</code>.Type and <code>right</code>.Type are the same Boolean type.  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are non-nullable, the node is not lifted. The type of the node is the result type of the predefined conditional <code>OR</code> operator.  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined conditional <code>OR</code> operator.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create an expression that represents a logical <code>OR</code> operation that evaluates the second operand only if the first operand evaluates to <code>false</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#29\">        &#39; Add the following directive to your file:\n        &#39; Imports System.Linq.Expressions  \n\n        &#39; This expression perfroms a logical OR operation\n        &#39; on its two arguments, but if the first argument is true,\n        &#39; the second arument is not evaluated.\n        &#39; Both arguments must be of the Boolean type.\n        Dim orElseExpr As Expression = Expression.OrElse(\n             Expression.Constant(False),\n             Expression.Constant(True)\n         )\n\n        &#39; Print the expression.\n        Console.WriteLine(orElseExpr.ToString())\n\n        &#39; The following statement first creates an expression tree,\n        &#39; then compiles it, and then executes it. \n        Console.WriteLine(Expression.Lambda(Of Func(Of Boolean))(orElseExpr).Compile()())\n\n        &#39; This code example produces the following output:\n        &#39;\n        &#39; (False OrElse True)\n        &#39; True\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#29\">            // Add the following directive to your file:\n            // using System.Linq.Expressions;  \n\n            // This expression perfroms a logical OR operation\n            // on its two arguments, but if the first argument is true,\n            // then the second arument is not evaluated.\n            // Both arguments must be of the boolean type.\n            Expression orElseExpr = Expression.OrElse(\n                Expression.Constant(false),\n                Expression.Constant(true)\n            );\n\n            // Print out the expression.\n            Console.WriteLine(orElseExpr.ToString());\n\n            // The following statement first creates an expression tree,\n            // then compiles it, and then executes it. \n            Console.WriteLine(Expression.Lambda&lt;Func&lt;bool&gt;&gt;(orElseExpr).Compile().Invoke());\n\n            // This code example produces the following output:\n            //\n            // (False OrElse True)\n            // True\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_OrElse_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_OrElse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OrElse(Expression,Expression,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a conditional <code>OR</code> operation that evaluates the second operand only if the first operand evaluates to <code>false</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression OrElse (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span>, and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>right</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is not <code>null</code> and the method it represents returns <code>void</code>, is not <code>static</code> (<code>Shared</code> in Visual Basic), or does not take exactly two arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is <code>null</code> and the bitwise <code>OR</code> operator is not defined for <code>left</code>.Type and <code>right</code>.Type.  </p>\n<p> -or-  </p>\n<p> <code>method</code> is <code>null</code> and <code>left</code>.Type and <code>right</code>.Type are not the same Boolean type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The resulting <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> has the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> and <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> properties are both <code>true</code>. Otherwise, they are <code>false</code>. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Conversion_\" data-linktype=\"relative-path\">Conversion</a>property is <code>null</code>.  </p>\n<p> The following information describes the implementing method, the node type, and whether a node is lifted.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the implementing method for the operation:  </p>\n<ul>\n<li><p>If <code>method</code> is not <code>null</code> and it represents a non-void, <code>static</code> (<code>Shared</code> in Visual Basic) method that takes two arguments, it is the implementing method for the node.  </p>\n</li>\n<li><p>Otherwise, if the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of either <code>left</code> or <code>right</code> represents a user-defined type that overloads the bitwise <code>OR</code> operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that method is the implementing method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The conditional <code>OR</code> operator cannot be overloaded in C# or Visual Basic. However, the conditional <code>OR</code> operator is evaluated by using the bitwise <code>OR</code> operator. Thus, a user-defined overload of the bitwise <code>OR</code> operator can be the implementing method for this node type.  </p>\n</div>\n</li>\n<li><p>Otherwise, if <code>left</code>.Type and <code>right</code>.Type are Boolean types, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  </p>\n<ul>\n<li><p><code>left</code>.Type and <code>right</code>.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is a non-nullable value type.  </p>\n</li>\n</ul>\n<p>If the implementing method is <code>null</code>:  </p>\n</li>\n<li><p><code>left</code>.Type and <code>right</code>.Type are the same Boolean type.  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are non-nullable, the node is not lifted. The type of the node is the result type of the predefined conditional <code>OR</code> operator.  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined conditional <code>OR</code> operator.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Parameter_System_Type_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Parameter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Parameter(Type)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a> node that can be used to identify a parameter or a variable in an expression tree.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.ParameterExpression Parameter (Type type);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the parameter or variable.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a> node with the specified name and type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to create a <a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a> object that prints the value of a <a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a> object.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#49\">        &#39; Add the following directive to the file:\n        &#39; Imports System.Linq.Expressions \n\n        &#39; Creating a parameter for the expression tree.\n        Dim param As ParameterExpression = Expression.Parameter(GetType(Integer))\n\n        &#39; Creating an expression for the method call and specifying its parameter.\n        Dim methodCall As MethodCallExpression = Expression.Call(\n                GetType(Console).GetMethod(&quot;WriteLine&quot;, New Type() {GetType(Integer)}),\n                param\n            )\n\n        &#39; Compiling and invoking the methodCall expression.\n        Expression.Lambda(Of Action(Of Integer))(\n            methodCall,\n            New ParameterExpression() {param}\n        ).Compile()(10)\n        &#39; This code example produces the following output:\n        &#39;\n        &#39; 10\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#49\">            // Add the following directive to the file:\n            // using System.Linq.Expressions;  \n\n            // Creating a parameter for the expression tree.\n            ParameterExpression param = Expression.Parameter(typeof(int));\n\n            // Creating an expression for the method call and specifying its parameter.\n            MethodCallExpression methodCall = Expression.Call(\n                typeof(Console).GetMethod(&quot;WriteLine&quot;, new Type[] { typeof(int) }),\n                param\n            );\n\n            // The following statement first creates an expression tree,\n            // then compiles it, and then runs it.\n            Expression.Lambda&lt;Action&lt;int&gt;&gt;(\n                methodCall,\n                new ParameterExpression[] { param }\n            ).Compile()(10);\n\n            // This code example produces the following output:\n            //\n            // 10\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Parameter_System_Type_System_String_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Parameter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Parameter(Type,String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a> node that can be used to identify a parameter or a variable in an expression tree.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.ParameterExpression Parameter (Type type, string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the parameter or variable.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the parameter or variable, used for debugging or printing purpose only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> and <span class=\"xref\">stem.Linq.Expressions.ParameterExpression.Name*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>type</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_PostDecrementAssign_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_PostDecrementAssign_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PostDecrementAssign(Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.UnaryExpression PostDecrementAssign (System.Linq.Expressions.Expression expression);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to apply the operations on.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents the resultant expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_PostDecrementAssign_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_PostDecrementAssign_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PostDecrementAssign(Expression,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.UnaryExpression PostDecrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to apply the operations on.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents the implementing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents the resultant expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_PostIncrementAssign_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_PostIncrementAssign_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PostIncrementAssign(Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.UnaryExpression PostIncrementAssign (System.Linq.Expressions.Expression expression);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to apply the operations on.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents the resultant expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_PostIncrementAssign_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_PostIncrementAssign_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PostIncrementAssign(Expression,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.UnaryExpression PostIncrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to apply the operations on.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents the implementing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents the resultant expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Power_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Power_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Power(Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents raising a number to a power.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression Power (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>right</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The exponentiation operator is not defined for <code>left</code>.Type and <code>right</code>.Type.  </p>\n<p> -or-  </p>\n<p> <code>left</code>.Type and/or <code>right</code>.Type are not <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The resulting <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> has the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> and <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> properties are both <code>true</code>. Otherwise, they are <code>false</code>. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Conversion_\" data-linktype=\"relative-path\">Conversion</a> property is <code>null</code>.  </p>\n<p> The following information describes the implementing method, the node type, and whether a node is lifted.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the implementing method for the operation:  </p>\n<ul>\n<li><p>If the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of either <code>left</code> or <code>right</code> represents a user-defined type that overloads the exponentiation operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that method is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if <code>left</code>.Type and <code>right</code>.Type are both <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>, the implementing method is <a class=\"xref\" href=\"system.math#System_Math_Pow_\" data-linktype=\"relative-path\">Pow</a>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<ul>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  </p>\n<ul>\n<li><p><code>left</code>.Type and <code>right</code>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is a non-nullable value type.</p>\n</li>\n</ul>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Power_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Power_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Power(Expression,Expression,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents raising a number to a power.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression Power (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span>, and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>right</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is not <code>null</code> and the method it represents returns <code>void</code>, is not <code>static</code> (<code>Shared</code> in Visual Basic), or does not take exactly two arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is <code>null</code> and the exponentiation operator is not defined for <code>left</code>.Type and <code>right</code>.Type.  </p>\n<p> -or-  </p>\n<p> <code>method</code> is <code>null</code> and <code>left</code>.Type and/or <code>right</code>.Type are not <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The resulting <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> has the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> and <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> properties are both <code>true</code>. Otherwise, they are <code>false</code>. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Conversion_\" data-linktype=\"relative-path\">Conversion</a> property is <code>null</code>.  </p>\n<p> The following information describes the implementing method, the node type, and whether a node is lifted.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the implementing method for the operation:  </p>\n<ul>\n<li><p>If <code>method</code> is not <code>null</code> and it represents a non-void, <code>static</code> (<code>Shared</code> in Visual Basic) method that takes two arguments, it is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of either <code>left</code> or <code>right</code> represents a user-defined type that overloads the exponentiation operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that method is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if <code>left</code>.Type and <code>right</code>.Type are both <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>, the implementing method is <a class=\"xref\" href=\"system.math#System_Math_Pow_\" data-linktype=\"relative-path\">Pow</a>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<ul>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  </p>\n<ul>\n<li><p><code>left</code>.Type and <code>right</code>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is a non-nullable value type.</p>\n</li>\n</ul>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_PowerAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_PowerAssign_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PowerAssign(Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents raising an expression to a power and assigning the result back to the expression.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression PowerAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_PowerAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_PowerAssign_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PowerAssign(Expression,Expression,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents raising an expression to a power and assigning the result back to the expression.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression PowerAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span>, and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_PowerAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_System_Linq_Expressions_LambdaExpression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_PowerAssign_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PowerAssign(Expression,Expression,MethodInfo,LambdaExpression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents raising an expression to a power and assigning the result back to the expression.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression PowerAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>conversion</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Conversion*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span>, and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Conversion*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_PreDecrementAssign_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_PreDecrementAssign_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreDecrementAssign(Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that decrements the expression by 1 and assigns the result back to the expression.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.UnaryExpression PreDecrementAssign (System.Linq.Expressions.Expression expression);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to apply the operations on.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents the resultant expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_PreDecrementAssign_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_PreDecrementAssign_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreDecrementAssign(Expression,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that decrements the expression by 1 and assigns the result back to the expression.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.UnaryExpression PreDecrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to apply the operations on.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents the implementing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents the resultant expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_PreIncrementAssign_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_PreIncrementAssign_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreIncrementAssign(Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that increments the expression by 1 and assigns the result back to the expression.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.UnaryExpression PreIncrementAssign (System.Linq.Expressions.Expression expression);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to apply the operations on.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents the resultant expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_PreIncrementAssign_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_PreIncrementAssign_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreIncrementAssign(Expression,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that increments the expression by 1 and assigns the result back to the expression.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.UnaryExpression PreIncrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to apply the operations on.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents the implementing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents the resultant expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Property_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Property_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Property(Expression,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.memberexpression\" data-linktype=\"relative-path\">MemberExpression</a> that represents accessing a property by using a property accessor method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo propertyAccessor);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.MemberExpression.Expression*</span> property equal to. This can be null for static properties.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>propertyAccessor</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents a property accessor method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.memberexpression\" data-linktype=\"relative-path\">MemberExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.memberexpression\" data-linktype=\"relative-path\">MemberExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a>, the <span class=\"xref\">stem.Linq.Expressions.MemberExpression.Expression*</span> property set to <code>expression</code> and the <span class=\"xref\">stem.Linq.Expressions.MemberExpression.Member*</span> property set to the <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a> that represents the property accessed in <code>propertyAccessor</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>propertyAccessor</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The method that <code>propertyAccessor</code> represents is not <code>static</code> (<code>Shared</code> in Visual Basic) and <code>expression</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>expression</code>.Type is not assignable to the declaring type of the method represented by <code>propertyAccessor</code>.  </p>\n<p> -or-  </p>\n<p> The method that <code>propertyAccessor</code> represents is not a property accessor method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.memberexpression\" data-linktype=\"relative-path\">MemberExpression</a> is equal to the <a class=\"xref\" href=\"system.reflection.propertyinfo#System_Reflection_PropertyInfo_PropertyType_\" data-linktype=\"relative-path\">PropertyType</a> property of <a class=\"xref\" href=\"system.linq.expressions.memberexpression#System_Linq_Expressions_MemberExpression_Member_\" data-linktype=\"relative-path\">Member</a>.  </p>\n<p> If the method represented by <code>propertyAccessor</code> is <code>static</code> (<code>Shared</code> in Visual Basic), <code>expression</code> can be <code>null</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Property_System_Linq_Expressions_Expression_System_Reflection_PropertyInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Property_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Property(Expression,PropertyInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.memberexpression\" data-linktype=\"relative-path\">MemberExpression</a> that represents accessing a property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, System.Reflection.PropertyInfo property);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.MemberExpression.Expression*</span> property equal to. This can be null for static properties.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>property</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.MemberExpression.Member*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.memberexpression\" data-linktype=\"relative-path\">MemberExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.memberexpression\" data-linktype=\"relative-path\">MemberExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.MemberExpression.Expression*</span> and <span class=\"xref\">stem.Linq.Expressions.MemberExpression.Member*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>property</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The property that <code>property</code> represents is not <code>static</code> (<code>Shared</code> in Visual Basic) and <code>expression</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>expression</code>.Type is not assignable to the declaring type of the property that <code>property</code> represents.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.memberexpression\" data-linktype=\"relative-path\">MemberExpression</a> is equal to the <a class=\"xref\" href=\"system.reflection.propertyinfo#System_Reflection_PropertyInfo_PropertyType_\" data-linktype=\"relative-path\">PropertyType</a> property of <a class=\"xref\" href=\"system.linq.expressions.memberexpression#System_Linq_Expressions_MemberExpression_Member_\" data-linktype=\"relative-path\">Member</a>.  </p>\n<p> If the property represented by <code>property</code> is <code>static</code> (<code>Shared</code> in Visual Basic), <code>expression</code> can be <code>null</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Property_System_Linq_Expressions_Expression_System_String_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Property_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Property(Expression,String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.memberexpression\" data-linktype=\"relative-path\">MemberExpression</a> that represents accessing a property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, string propertyName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> whose <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> contains a property named <code>propertyName</code>. This can be <code>null</code> for static properties.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>propertyName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of a property to be accessed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.memberexpression\" data-linktype=\"relative-path\">MemberExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.memberexpression\" data-linktype=\"relative-path\">MemberExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a>, the <span class=\"xref\">stem.Linq.Expressions.MemberExpression.Expression*</span> property set to <code>expression</code>, and the <span class=\"xref\">stem.Linq.Expressions.MemberExpression.Member*</span> property set to the <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a> that represents the property denoted by <code>propertyName</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>expression</code> or <code>propertyName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>No property named <code>propertyName</code> is defined in <code>expression</code>.Type or its base types.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.memberexpression\" data-linktype=\"relative-path\">MemberExpression</a>is equal to the <a class=\"xref\" href=\"system.reflection.propertyinfo#System_Reflection_PropertyInfo_PropertyType_\" data-linktype=\"relative-path\">PropertyType</a> property of the <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a> that represents the property denoted by <code>propertyName</code>.  </p>\n<p> This method searches <code>expression</code>.Type and its base types for a property that has the name <code>propertyName</code>. Public properties are given preference over non-public properties. If a matching property is found, this method passes <code>expression</code> and the <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a> that represents that property to <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Property_\" data-linktype=\"relative-path\">Property</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to create an expression that represents accessing a property.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#38\">    &#39; Add the following directive to your file:\n    &#39; Imports System.Linq.Expressions  \n\n    Class TestPropertyClass\n        Public Property Sample As Integer\n    End Class\n\n    Sub TestProperty()\n\n        Dim obj As New TestPropertyClass()\n        obj.Sample = 40\n\n        &#39; This expression represents accessing a property.\n        &#39; For static properties, the first parameter must be Nothing.\n        Dim propertyExpr As Expression = Expression.Property(\n              Expression.Constant(obj),\n              &quot;sample&quot;\n          )\n\n        &#39; The following statement first creates an expression tree,\n        &#39; then compiles it, and then runs it.\n        Console.WriteLine(Expression.Lambda(Of Func(Of Integer))(propertyExpr).Compile()())\n    End Sub\n\n    &#39; This code example produces the following output:\n    &#39;\n    &#39; 40\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#38\">        // Add the following directive to your file:\n        // using System.Linq.Expressions;  \n\n         class TestPropertyClass\n         {\n             public int sample {get; set;}\n         }\n\n         static void TestProperty()\n         {\n             TestPropertyClass obj = new TestPropertyClass();\n             obj.sample = 40;\n\n             // This expression represents accessing a property.\n             // For static fields, the first parameter must be null.\n             Expression propertyExpr = Expression.Property(\n                 Expression.Constant(obj),\n                 &quot;sample&quot;\n             );\n\n             // The following statement first creates an expression tree,\n             // then compiles it, and then runs it.\n             Console.WriteLine(Expression.Lambda&lt;Func&lt;int&gt;&gt;(propertyExpr).Compile()());            \n         }\n\n         // This code example produces the following output:\n         //\n         // 40\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Property_System_Linq_Expressions_Expression_System_Reflection_PropertyInfo_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression__\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Property_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Property(Expression,PropertyInfo,IEnumerable&lt;Expression&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates an <a class=\"xref\" href=\"system.linq.expressions.indexexpression\" data-linktype=\"relative-path\">IndexExpression</a> representing the access to an indexed property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.IndexExpression Property (System.Linq.Expressions.Expression instance, System.Reflection.PropertyInfo indexer, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>instance</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to which the property belongs. If the property is static/shared, it must be null.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>indexer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a> that represents the property to index.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arguments</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> of <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> objects that are used to index the property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.indexexpression\" data-linktype=\"relative-path\">IndexExpression</a></div>\r\n                  </div>\r\n                  <p>The created <a class=\"xref\" href=\"system.linq.expressions.indexexpression\" data-linktype=\"relative-path\">IndexExpression</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Property_System_Linq_Expressions_Expression_System_Reflection_PropertyInfo_System_Linq_Expressions_Expression___\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Property_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Property(Expression,PropertyInfo,Expression[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates an <a class=\"xref\" href=\"system.linq.expressions.indexexpression\" data-linktype=\"relative-path\">IndexExpression</a> representing the access to an indexed property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.IndexExpression Property (System.Linq.Expressions.Expression instance, System.Reflection.PropertyInfo indexer, System.Linq.Expressions.Expression[] arguments);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>instance</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to which the property belongs. If the property is static/shared, it must be null.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>indexer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a> that represents the property to index.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arguments</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> objects that are used to index the property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.indexexpression\" data-linktype=\"relative-path\">IndexExpression</a></div>\r\n                  </div>\r\n                  <p>The created <a class=\"xref\" href=\"system.linq.expressions.indexexpression\" data-linktype=\"relative-path\">IndexExpression</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Property_System_Linq_Expressions_Expression_System_String_System_Linq_Expressions_Expression___\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Property_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Property(Expression,String,Expression[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates an <a class=\"xref\" href=\"system.linq.expressions.indexexpression\" data-linktype=\"relative-path\">IndexExpression</a> representing the access to an indexed property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.IndexExpression Property (System.Linq.Expressions.Expression instance, string propertyName, System.Linq.Expressions.Expression[] arguments);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>instance</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to which the property belongs. If the property is static/shared, it must be null.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>propertyName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the indexer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arguments</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> objects that are used to index the property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.indexexpression\" data-linktype=\"relative-path\">IndexExpression</a></div>\r\n                  </div>\r\n                  <p>The created <a class=\"xref\" href=\"system.linq.expressions.indexexpression\" data-linktype=\"relative-path\">IndexExpression</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Property_System_Linq_Expressions_Expression_System_Type_System_String_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Property_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Property(Expression,Type,String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.memberexpression\" data-linktype=\"relative-path\">MemberExpression</a> accessing a property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, Type type, string propertyName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The containing object of the property. This can be null for static properties.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> that contains the property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>propertyName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The property to be accessed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.memberexpression\" data-linktype=\"relative-path\">MemberExpression</a></div>\r\n                  </div>\r\n                  <p>The created <a class=\"xref\" href=\"system.linq.expressions.memberexpression\" data-linktype=\"relative-path\">MemberExpression</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_PropertyOrField_System_Linq_Expressions_Expression_System_String_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_PropertyOrField_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PropertyOrField(Expression,String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.memberexpression\" data-linktype=\"relative-path\">MemberExpression</a> that represents accessing a property or field.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.MemberExpression PropertyOrField (System.Linq.Expressions.Expression expression, string propertyOrFieldName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> whose <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> contains a property or field named <code>propertyOrFieldName</code>. This can be null for static members.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>propertyOrFieldName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of a property or field to be accessed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.memberexpression\" data-linktype=\"relative-path\">MemberExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.memberexpression\" data-linktype=\"relative-path\">MemberExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a>, the <span class=\"xref\">stem.Linq.Expressions.MemberExpression.Expression*</span> property set to <code>expression</code>, and the <span class=\"xref\">stem.Linq.Expressions.MemberExpression.Member*</span> property set to the <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a> or <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a> that represents the property or field denoted by <code>propertyOrFieldName</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>expression</code> or <code>propertyOrFieldName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>No property or field named <code>propertyOrFieldName</code> is defined in <code>expression</code>.Type or its base types.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.memberexpression\" data-linktype=\"relative-path\">MemberExpression</a> is equal to the <a class=\"xref\" href=\"system.reflection.propertyinfo#System_Reflection_PropertyInfo_PropertyType_\" data-linktype=\"relative-path\">PropertyType</a> or <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_FieldType_\" data-linktype=\"relative-path\">FieldType</a> properties of the <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a> or <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a>, respectively, that represents the property or field denoted by <code>propertyOrFieldName</code>.  </p>\n<p> This method searches <code>expression</code>.Type and its base types for a property or field that has the name <code>propertyOrFieldName</code>. Public properties and fields are given preference over non-public properties and fields. Also, properties are given preference over fields. If a matching property or field is found, this method passes <code>expression</code> and the <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a> or <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a> that represents that property or field to <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Property_\" data-linktype=\"relative-path\">Property</a> or <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Field_\" data-linktype=\"relative-path\">Field</a>, respectively.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to create an expression that represents accessing a property or field.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#39\">    &#39; Add the following directive to your file:\n    &#39; Imports System.Linq.Expressions  \n\n    Class TestClass\n        Public Property Sample As Integer\n    End Class\n\n    Sub TestPropertyOrField()\n\n        Dim obj As New TestClass()\n        obj.Sample = 40\n\n        &#39; This expression represents accessing a property or field.\n        &#39; For static properties or fields, the first parameter must be Nothing.\n        Dim memberExpr As Expression = Expression.PropertyOrField(\n              Expression.Constant(obj),\n              &quot;Sample&quot;\n          )\n\n        &#39; The following statement first creates an expression tree,\n        &#39; then compiles it, and then runs it.\n        Console.WriteLine(Expression.Lambda(Of Func(Of Integer))(memberExpr).Compile()())\n    End Sub\n\n    &#39; This code example produces the following output:\n    &#39;\n    &#39; 40\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#39\">         // Add the following directive to your file:\n         // using System.Linq.Expressions;  \n\n         class TestClass\n         {\n             public int sample { get; set; }\n         }\n\n         static void TestPropertyOrField()\n         {\n             TestClass obj = new TestClass();\n             obj.sample = 40;\n\n             // This expression represents accessing a property or field.\n             // For static properties or fields, the first parameter must be null.\n             Expression memberExpr = Expression.PropertyOrField(\n                 Expression.Constant(obj),\n                 &quot;sample&quot;\n             );\n\n             // The following statement first creates an expression tree,\n             // then compiles it, and then runs it.\n             Console.WriteLine(Expression.Lambda&lt;Func&lt;int&gt;&gt;(memberExpr).Compile()());\n         }\n\n         // This code example produces the following output:\n         //\n         // 40\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Quote_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Quote_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Quote(Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents an expression that has a constant value of type <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.UnaryExpression Quote (System.Linq.Expressions.Expression expression);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.UnaryExpression.Operand*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.UnaryExpression.Operand*</span> property set to the specified value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>expression</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> represents the constructed type <a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a>, where the type argument is the type represented by <code>expression</code>.Type. The <a class=\"xref\" href=\"system.linq.expressions.unaryexpression#System_Linq_Expressions_UnaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property is <code>null</code>. Both <a class=\"xref\" href=\"system.linq.expressions.unaryexpression#System_Linq_Expressions_UnaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> and <a class=\"xref\" href=\"system.linq.expressions.unaryexpression#System_Linq_Expressions_UnaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> are <code>false</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Reduce\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Reduce_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Reduce()</div>        \r\n          </div>\r\n    \r\n            <p>Reduces this node to a simpler expression. If CanReduce returns true, this should return a valid expression. This method can return another node which itself must be reduced.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Linq.Expressions.Expression Reduce ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </div>\r\n                  <p>The reduced expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_ReduceAndCheck\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_ReduceAndCheck_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReduceAndCheck()</div>        \r\n          </div>\r\n    \r\n            <p>Reduces this node to a simpler expression. If CanReduce returns true, this should return a valid expression. This method can return another node which itself must be reduced.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Linq.Expressions.Expression ReduceAndCheck ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </div>\r\n                  <p>The reduced expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Unlike Reduce, this method checks that the reduced node satisfies certain invariants.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_ReduceExtensions\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_ReduceExtensions_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReduceExtensions()</div>        \r\n          </div>\r\n    \r\n            <p>Reduces the expression to a known node type (that is not an Extension node) or just returns the expression if it is already a known type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Linq.Expressions.Expression ReduceExtensions ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </div>\r\n                  <p>The reduced expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_ReferenceEqual_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_ReferenceEqual_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReferenceEqual(Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a reference equality comparison.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression ReferenceEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_ReferenceNotEqual_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_ReferenceNotEqual_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReferenceNotEqual(Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a reference inequality comparison.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression ReferenceNotEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Rethrow\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Rethrow_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Rethrow()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents a rethrowing of an exception.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.UnaryExpression Rethrow ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents a rethrowing of an exception.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Rethrow_System_Type_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Rethrow_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Rethrow(Type)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents a rethrowing of an exception with a given type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.UnaryExpression Rethrow (Type type);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The new <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> of the expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents a rethrowing of an exception.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Return_System_Linq_Expressions_LabelTarget_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Return_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Return(LabelTarget)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> representing a return statement.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a> that the <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> will jump to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> with <span class=\"xref\">stem.Linq.Expressions.GotoExpression.Kind*</span> equal to Return, the <span class=\"xref\">stem.Linq.Expressions.GotoExpression.Target*</span> property set to <code>target</code>, and a null value to be passed to the target label upon jumping.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Return_System_Linq_Expressions_LabelTarget_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Return_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Return(LabelTarget,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> representing a return statement. The value passed to the label upon jumping can be specified.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a> that the <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> will jump to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value that will be passed to the associated label upon jumping.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> with <span class=\"xref\">stem.Linq.Expressions.GotoExpression.Kind*</span> equal to Continue, the <span class=\"xref\">stem.Linq.Expressions.GotoExpression.Target*</span> property set to <code>target</code>, and <code>value</code> to be passed to the target label upon jumping.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to create an expression that contains the Return method.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#43\">        &#39; Add the following directive to the file:\n        &#39; Imports System.Linq.Expressions  \n        &#39; A label expression of the void type that is the target for Expression.Return().\n        Dim returnTarget As LabelTarget = Expression.Label()\n\n        &#39; This block contains a GotoExpression that represents a return statement with no value.\n        &#39; It transfers execution to a label expression that is initialized with the same LabelTarget as the GotoExpression.\n        &#39; The types of the GotoExpression, label expression, and LabelTarget must match.\n        Dim blockExpr As BlockExpression =\n              Expression.Block(\n                  Expression.Call(GetType(Console).GetMethod(&quot;WriteLine&quot;, New Type() {GetType(String)}), Expression.Constant(&quot;Return&quot;)),\n                  Expression.Return(returnTarget),\n                  Expression.Call(GetType(Console).GetMethod(&quot;WriteLine&quot;, New Type() {GetType(String)}), Expression.Constant(&quot;Other Work&quot;)),\n                  Expression.Label(returnTarget)\n              )\n\n        &#39; The following statement first creates an expression tree,\n        &#39; then compiles it, and then runs it.\n        Expression.Lambda(Of Action)(blockExpr).Compile()()\n\n        &#39; This code example produces the following output:\n        &#39;\n        &#39; Return\n\n        &#39; &quot;Other Work&quot; is not printed because \n        &#39; the Return expression transfers execution from Return(returnTarget)\n        &#39; to Expression.Label(returnTarget).\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#43\">            // Add the following directive to the file:\n            // using System.Linq.Expressions;  \n\n            // A label expression of the void type that is the target for Expression.Return().\n            LabelTarget returnTarget = Expression.Label();\n\n            // This block contains a GotoExpression that represents a return statement with no value.\n            // It transfers execution to a label expression that is initialized with the same LabelTarget as the GotoExpression.\n            // The types of the GotoExpression, label expression, and LabelTarget must match.\n            BlockExpression blockExpr =\n                Expression.Block(\n                    Expression.Call(typeof(Console).GetMethod(&quot;WriteLine&quot;, new Type[] { typeof(string) }), Expression.Constant(&quot;Return&quot;)),\n                    Expression.Return(returnTarget),\n                    Expression.Call(typeof(Console).GetMethod(&quot;WriteLine&quot;, new Type[] { typeof(string) }), Expression.Constant(&quot;Other Work&quot;)),\n                    Expression.Label(returnTarget)\n                );\n\n            // The following statement first creates an expression tree,\n            // then compiles it, and then runs it.\n            Expression.Lambda&lt;Action&gt;(blockExpr).Compile()();\n\n            // This code example produces the following output:\n            //\n            // Return\n\n            // &quot;Other Work&quot; is not printed because \n            // the Return expression transfers execution from Expression.Return(returnTarget)\n            // to Expression.Label(returnTarget).\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Return_System_Linq_Expressions_LabelTarget_System_Type_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Return_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Return(LabelTarget,Type)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> representing a return statement with the specified type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target, Type type);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a> that the <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> will jump to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> to set the <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> with <span class=\"xref\">stem.Linq.Expressions.GotoExpression.Kind*</span> equal to Return, the <span class=\"xref\">stem.Linq.Expressions.GotoExpression.Target*</span> property set to <code>target</code>, the <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property set to <code>type</code>, and a null value to be passed to the target label upon jumping.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Return_System_Linq_Expressions_LabelTarget_System_Linq_Expressions_Expression_System_Type_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Return_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Return(LabelTarget,Expression,Type)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> representing a return statement with the specified type. The value passed to the label upon jumping can be specified.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a> that the <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> will jump to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value that will be passed to the associated label upon jumping.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> to set the <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> with <span class=\"xref\">stem.Linq.Expressions.GotoExpression.Kind*</span> equal to Continue, the <span class=\"xref\">stem.Linq.Expressions.GotoExpression.Target*</span> property set to <code>target</code>, the <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property set to <code>type</code>, and <code>value</code> to be passed to the target label upon jumping.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_RightShift_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_RightShift_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RightShift(Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a bitwise right-shift operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression RightShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>right</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The right-shift operator is not defined for <code>left</code>.Type and <code>right</code>.Type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The resulting <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> has the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> and <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> properties are both <code>true</code>. Otherwise, they are <code>false</code>. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Conversion_\" data-linktype=\"relative-path\">Conversion</a> property is <code>null</code>.  </p>\n<p> The following information describes the implementing method, the node type, and whether a node is lifted.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the selected implementing method for the operation:  </p>\n<ul>\n<li><p>If the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of either <code>left</code> or <code>right</code> represents a user-defined type that overloads the right-shift operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that method is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if <code>left</code>.Type is an integral type (one of <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>, <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>, <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a>, <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a>, <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>, <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a>, <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>, <a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a>, or the corresponding nullable types) and <code>right</code>.Type is <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  </p>\n<ul>\n<li><p><code>left</code>.Type and <code>right</code>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is a non-nullable value type.  </p>\n</li>\n</ul>\n<p>If the implementing method is <code>null</code>:  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined right-shift operator.  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined right-shift operator.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_RightShift_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_RightShift_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RightShift(Expression,Expression,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a bitwise right-shift operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression RightShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span>, and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>right</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is not <code>null</code> and the method it represents returns <code>void</code>, is not <code>static</code> (<code>Shared</code> in Visual Basic), or does not take exactly two arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is <code>null</code> and the right-shift operator is not defined for <code>left</code>.Type and <code>right</code>.Type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The resulting <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> has the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> and <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> properties are both <code>true</code>. Otherwise, they are <code>false</code>. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Conversion_\" data-linktype=\"relative-path\">Conversion</a> property is <code>null</code>.  </p>\n<p> The following information describes the implementing method, the node type, and whether a node is lifted.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the selected implementing method for the operation:  </p>\n<ul>\n<li><p>If <code>method</code> is not <code>null</code> and it represents a non-void, <code>static</code> (<code>Shared</code> in Visual Basic) method that takes two arguments, it is the implementing method for the node.  </p>\n</li>\n<li><p>Otherwise, if the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of either <code>left</code> or <code>right</code> represents a user-defined type that overloads the right-shift operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that method is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if <code>left</code>.Type is an integral type (one of <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>, <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>, <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a>, <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a>, <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>, <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a>, <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>, <a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a>, or the corresponding nullable types) and <code>right</code>.Type is <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  </p>\n<ul>\n<li><p><code>left</code>.Type and <code>right</code>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is a non-nullable value type.  </p>\n</li>\n</ul>\n<p>If the implementing method is <code>null</code>:  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined right-shift operator.  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined right-shift operator.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_RightShiftAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_RightShiftAssign_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RightShiftAssign(Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a bitwise right-shift assignment operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression RightShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_RightShiftAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_RightShiftAssign_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RightShiftAssign(Expression,Expression,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a bitwise right-shift assignment operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression RightShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span>, and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_RightShiftAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_System_Linq_Expressions_LambdaExpression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_RightShiftAssign_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RightShiftAssign(Expression,Expression,MethodInfo,LambdaExpression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a bitwise right-shift assignment operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression RightShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>conversion</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Conversion*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span>, and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Conversion*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_RuntimeVariables_System_Collections_Generic_IEnumerable_System_Linq_Expressions_ParameterExpression__\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_RuntimeVariables_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RuntimeVariables(IEnumerable&lt;ParameterExpression&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates an instance of <a class=\"xref\" href=\"system.linq.expressions.runtimevariablesexpression\" data-linktype=\"relative-path\">RuntimeVariablesExpression</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables (System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; variables);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>variables</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A collection of <a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.RuntimeVariablesExpression.Variables*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.runtimevariablesexpression\" data-linktype=\"relative-path\">RuntimeVariablesExpression</a></div>\r\n                  </div>\r\n                  <p>An instance of <a class=\"xref\" href=\"system.linq.expressions.runtimevariablesexpression\" data-linktype=\"relative-path\">RuntimeVariablesExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.RuntimeVariablesExpression.Variables*</span> property set to the specified value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_RuntimeVariables_System_Linq_Expressions_ParameterExpression___\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_RuntimeVariables_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RuntimeVariables(ParameterExpression[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates an instance of <a class=\"xref\" href=\"system.linq.expressions.runtimevariablesexpression\" data-linktype=\"relative-path\">RuntimeVariablesExpression</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables (System.Linq.Expressions.ParameterExpression[] variables);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>variables</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a> objects to use to populate the <span class=\"xref\">stem.Linq.Expressions.RuntimeVariablesExpression.Variables*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.runtimevariablesexpression\" data-linktype=\"relative-path\">RuntimeVariablesExpression</a></div>\r\n                  </div>\r\n                  <p>An instance of <a class=\"xref\" href=\"system.linq.expressions.runtimevariablesexpression\" data-linktype=\"relative-path\">RuntimeVariablesExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.RuntimeVariablesExpression.Variables*</span> property set to the specified value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Subtract_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Subtract_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Subtract(Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an arithmetic subtraction operation that does not have overflow checking.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression Subtract (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>right</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The subtraction operator is not defined for <code>left</code>.Type and <code>right</code>.Type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The resulting <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> has the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> and <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> properties are both <code>true</code>. Otherwise, they are <code>false</code>. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Conversion_\" data-linktype=\"relative-path\">Conversion</a> property is <code>null</code>.  </p>\n<p> The following information describes the implementing method, the node type, and whether a node is lifted.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the selected implementing method for the operation:  </p>\n<ul>\n<li><p>If the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of either <code>left</code> or <code>right</code> represents a user-defined type that overloads the subtraction operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that method is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if <code>left</code>.Type and <code>right</code>.Type are numeric types, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  </p>\n<ul>\n<li><p><code>left</code>.Type and <code>right</code>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is a non-nullable value type.  </p>\n</li>\n</ul>\n<p>If the implementing method is <code>null</code>:  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined subtraction operator.  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create an expression that subtracts the argument from the first argument.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#30\">        &#39; Add the following directive to your file:\n        &#39; Imports System.Linq.Expressions  \n\n        &#39; This expression subtracts the second argument \n        &#39; from the first argument.\n        &#39; Both arguments must be of the same type.\n        Dim subtractExpr As Expression = Expression.Subtract(\n             Expression.Constant(12),\n             Expression.Constant(3)\n         )\n\n        &#39; Print the expression.\n        Console.WriteLine(subtractExpr.ToString())\n\n        &#39; The following statement first creates an expression tree,\n        &#39; then compiles it, and then executes it.            \n        Console.WriteLine(Expression.Lambda(Of Func(Of Integer))(subtractExpr).Compile()())\n\n        &#39; This code example produces the following output:\n        &#39;\n        &#39; (12 - 3)\n        &#39; 9\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#30\">            // Add the following directive to your file:\n            // using System.Linq.Expressions;  \n\n            // This expression subtracts the second argument \n            // from the first argument.\n            // Both arguments must be of the same type.\n            Expression subtractExpr = Expression.Subtract(\n                Expression.Constant(12),\n                Expression.Constant(3)\n            );\n\n            // Print out the expression.\n            Console.WriteLine(subtractExpr.ToString());\n\n            // The following statement first creates an expression tree,\n            // then compiles it, and then executes it.            \n            Console.WriteLine(Expression.Lambda&lt;Func&lt;int&gt;&gt;(subtractExpr).Compile().Invoke());\n\n            // This code example produces the following output:\n            //\n            // (12 - 3)\n            // 9\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Subtract_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Subtract_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Subtract(Expression,Expression,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an arithmetic subtraction operation that does not have overflow checking.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression Subtract (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span>, and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>right</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is not <code>null</code> and the method it represents returns <code>void</code>, is not <code>static</code> (<code>Shared</code> in Visual Basic), or does not take exactly two arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is <code>null</code> and the subtraction operator is not defined for <code>left</code>.Type and <code>right</code>.Type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The resulting <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> has the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> and <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> properties are both <code>true</code>. Otherwise, they are <code>false</code>. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Conversion_\" data-linktype=\"relative-path\">Conversion</a> property is <code>null</code>.  </p>\n<p> The following information describes the implementing method, the node type, and whether a node is lifted.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the implementing method for the operation:  </p>\n<ul>\n<li><p>If <code>method</code> is not <code>null</code> and it represents a non-void, <code>static</code> (<code>Shared</code> in Visual Basic) method that takes two arguments, it is the implementing method for the node.  </p>\n</li>\n<li><p>Otherwise, if the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of either <code>left</code> or <code>right</code> represents a user-defined type that overloads the subtraction operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that method is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if <code>left</code>.Type and <code>right</code>.Type are numeric types, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  </p>\n<ul>\n<li><p><code>left</code>.Type and <code>right</code>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is a non-nullable value type.  </p>\n</li>\n</ul>\n<p>If the implementing method is <code>null</code>:  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined subtraction operator.  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_SubtractAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_SubtractAssign_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SubtractAssign(Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a subtraction assignment operation that does not have overflow checking.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression SubtractAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_SubtractAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_SubtractAssign_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SubtractAssign(Expression,Expression,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a subtraction assignment operation that does not have overflow checking.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression SubtractAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span>, and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_SubtractAssign_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_System_Linq_Expressions_LambdaExpression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_SubtractAssign_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SubtractAssign(Expression,Expression,MethodInfo,LambdaExpression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a subtraction assignment operation that does not have overflow checking.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression SubtractAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>conversion</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Conversion*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span>, and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Conversion*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_SubtractAssignChecked_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_SubtractAssignChecked_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SubtractAssignChecked(Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a subtraction assignment operation that has overflow checking.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression SubtractAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_SubtractAssignChecked_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_SubtractAssignChecked_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SubtractAssignChecked(Expression,Expression,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a subtraction assignment operation that has overflow checking.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression SubtractAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span>, and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_SubtractAssignChecked_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_System_Linq_Expressions_LambdaExpression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_SubtractAssignChecked_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SubtractAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents a subtraction assignment operation that has overflow checking.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression SubtractAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>conversion</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Conversion*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span>, and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Conversion*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_SubtractChecked_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_SubtractChecked_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SubtractChecked(Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an arithmetic subtraction operation that has overflow checking.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression SubtractChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>right</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The subtraction operator is not defined for <code>left</code>.Type and <code>right</code>.Type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The resulting <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> has the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> and <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> properties are both <code>true</code>. Otherwise, they are <code>false</code>. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Conversion_\" data-linktype=\"relative-path\">Conversion</a> property is <code>null</code>.  </p>\n<p> The following information describes the implementing method, the node type, and whether a node is lifted.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the selected implementing method for the operation:  </p>\n<ul>\n<li><p>If the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of either <code>left</code> or <code>right</code> represents a user-defined type that overloads the subtraction operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that method is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if <code>left</code>.Type and <code>right</code>.Type are numeric types, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  </p>\n<ul>\n<li><p><code>left</code>.Type and <code>right</code>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is a non-nullable value type.  </p>\n</li>\n</ul>\n<p>If the implementing method is <code>null</code>:  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined subtraction operator.  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_SubtractChecked_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_SubtractChecked_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SubtractChecked(Expression,Expression,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that represents an arithmetic subtraction operation that has overflow checking.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.BinaryExpression SubtractChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Left*</span>, <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Right*</span>, and <span class=\"xref\">stem.Linq.Expressions.BinaryExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>right</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is not <code>null</code> and the method it represents returns <code>void</code>, is not <code>static</code> (<code>Shared</code> in Visual Basic), or does not take exactly two arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is <code>null</code> and the subtraction operator is not defined for <code>left</code>.Type and <code>right</code>.Type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The resulting <a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a> has the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> and <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> properties are both <code>true</code>. Otherwise, they are <code>false</code>. The <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_Conversion_\" data-linktype=\"relative-path\">Conversion</a> property is <code>null</code>.  </p>\n<p> The following information describes the implementing method, the node type, and whether a node is lifted.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the implementing method for the operation :  </p>\n<ul>\n<li><p>If <code>method</code> is not <code>null</code> and it represents a non-void, <code>static</code> (<code>Shared</code> in Visual Basic) method that takes two arguments, it is the implementing method for the node.  </p>\n</li>\n<li><p>Otherwise, if the <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of either <code>left</code> or <code>right</code> represents a user-defined type that overloads the subtraction operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that method is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if <code>left</code>.Type and <code>right</code>.Type are numeric types, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  </p>\n<ul>\n<li><p><code>left</code>.Type and <code>right</code>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is a non-nullable value type.  </p>\n</li>\n</ul>\n<p>If the implementing method is <code>null</code>:  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined subtraction operator.  </p>\n</li>\n<li><p>If <code>left</code>.Type and <code>right</code>.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Switch_System_Linq_Expressions_Expression_System_Linq_Expressions_SwitchCase___\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Switch_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Switch(Expression,SwitchCase[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.switchexpression\" data-linktype=\"relative-path\">SwitchExpression</a> that represents a <code>switch</code> statement without a default case.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.SwitchCase[] cases);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>switchValue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to be tested against each case.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cases</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.switchcase\" data-linktype=\"relative-path\">SwitchCase</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The set of cases for this switch expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.switchexpression\" data-linktype=\"relative-path\">SwitchExpression</a></div>\r\n                  </div>\r\n                  <p>The created <a class=\"xref\" href=\"system.linq.expressions.switchexpression\" data-linktype=\"relative-path\">SwitchExpression</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>All <a class=\"xref\" href=\"system.linq.expressions.switchcase\" data-linktype=\"relative-path\">SwitchCase</a> objects in a <a class=\"xref\" href=\"system.linq.expressions.switchexpression\" data-linktype=\"relative-path\">SwitchExpression</a> object must have the same type, unless the <a class=\"xref\" href=\"system.linq.expressions.switchexpression\" data-linktype=\"relative-path\">SwitchExpression</a> has the type <code>void</code>.  </p>\n<p> Each <a class=\"xref\" href=\"system.linq.expressions.switchcase\" data-linktype=\"relative-path\">SwitchCase</a> object has an implicit <code>break</code> statement, which means that there is no implicit fall through from one case label to another.  </p>\n<p> If <code>switchValue</code> does not match any of the cases, no exception is thrown.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to create an expression that represents a swtich statement without a default case.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#34\">        &#39; Add the following directive to the file:\n        &#39; Imports System.Linq.Expressions\n\n        &#39; An expression that represents the switch value.\n        Dim switchValue As ConstantExpression = Expression.Constant(2)\n\n        &#39; This expression represents a switch statement \n        &#39; without a default case.\n        Dim switchExpr As SwitchExpression =\n        Expression.Switch(\n            switchValue,\n            New SwitchCase() {\n                Expression.SwitchCase(\n                    Expression.Call(\n                        Nothing,\n                        GetType(Console).GetMethod(&quot;WriteLine&quot;, New Type() {GetType(String)}),\n                        Expression.Constant(&quot;First&quot;)\n                    ),\n                    Expression.Constant(1)\n                ),\n                Expression.SwitchCase(\n                    Expression.Call(\n                        Nothing,\n                        GetType(Console).GetMethod(&quot;WriteLine&quot;, New Type() {GetType(String)}),\n                        Expression.Constant(&quot;Second&quot;)\n                    ),\n                    Expression.Constant(2)\n                )\n            }\n        )\n\n        &#39; The following statement first creates an expression tree,\n        &#39; then compiles it, and then runs it.\n        Expression.Lambda(Of Action)(switchExpr).Compile()()\n\n        &#39; This code example produces the following output:\n        &#39;\n        &#39; Second\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#34\">            // Add the following directive to the file:\n            // using System.Linq.Expressions;  \n\n            // An expression that represents the switch value.\n            ConstantExpression switchValue = Expression.Constant(2);\n\n            // This expression represents a switch statement \n            // without a default case.\n            SwitchExpression switchExpr =\n                Expression.Switch(\n                    switchValue,\n                    new SwitchCase[] {\n                        Expression.SwitchCase(\n                            Expression.Call(\n                                null,\n                                typeof(Console).GetMethod(&quot;WriteLine&quot;, new Type[] { typeof(String) }),\n                                Expression.Constant(&quot;First&quot;)\n                            ),\n                            Expression.Constant(1)\n                        ),\n                        Expression.SwitchCase(\n                            Expression.Call(\n                                null,\n                                typeof(Console).GetMethod(&quot;WriteLine&quot;, new Type[] { typeof(String) }),\n                                Expression.Constant(&quot;Second&quot;)\n                            ),\n                            Expression.Constant(2)\n                        )\n                    }\n                );\n\n            // The following statement first creates an expression tree,\n            // then compiles it, and then runs it.\n            Expression.Lambda&lt;Action&gt;(switchExpr).Compile()();\n\n            // This code example produces the following output:\n            //\n            // Second\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Switch_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_SwitchCase___\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Switch_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Switch(Expression,Expression,SwitchCase[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.switchexpression\" data-linktype=\"relative-path\">SwitchExpression</a> that represents a <code>switch</code> statement that has a default case.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Linq.Expressions.SwitchCase[] cases);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>switchValue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to be tested against each case.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>defaultBody</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The result of the switch if <code>switchValue</code> does not match any of the cases.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cases</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.switchcase\" data-linktype=\"relative-path\">SwitchCase</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The set of cases for this switch expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.switchexpression\" data-linktype=\"relative-path\">SwitchExpression</a></div>\r\n                  </div>\r\n                  <p>The created <a class=\"xref\" href=\"system.linq.expressions.switchexpression\" data-linktype=\"relative-path\">SwitchExpression</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>All <a class=\"xref\" href=\"system.linq.expressions.switchcase\" data-linktype=\"relative-path\">SwitchCase</a> objects in a <a class=\"xref\" href=\"system.linq.expressions.switchexpression\" data-linktype=\"relative-path\">SwitchExpression</a> object must have the same type, unless the <a class=\"xref\" href=\"system.linq.expressions.switchexpression\" data-linktype=\"relative-path\">SwitchExpression</a> has the type <code>void</code>.  </p>\n<p> Each <a class=\"xref\" href=\"system.linq.expressions.switchcase\" data-linktype=\"relative-path\">SwitchCase</a> object has an implicit <code>break</code> statement, which means that there is no implicit fall through from one case label to another.  </p>\n<p> If <code>switchValue</code> does not match any of the cases, the default case represented by <code>defaultBody</code> is run.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to create an expression that represents a swtich statement that has a default case.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#35\">        &#39; Add the following directive to the file:\n        &#39; Imports System.Linq.Expressions\n\n        &#39; An expression that represents the switch value.\n        Dim switchValue As ConstantExpression = Expression.Constant(3)\n\n        &#39; This expression represents a switch statement \n        &#39; that has a default case.\n        Dim switchExpr As SwitchExpression =\n        Expression.Switch(\n            switchValue,\n            Expression.Call(\n                        Nothing,\n                        GetType(Console).GetMethod(&quot;WriteLine&quot;, New Type() {GetType(String)}),\n                        Expression.Constant(&quot;Default&quot;)\n                    ),\n            New SwitchCase() {\n                Expression.SwitchCase(\n                    Expression.Call(\n                        Nothing,\n                        GetType(Console).GetMethod(&quot;WriteLine&quot;, New Type() {GetType(String)}),\n                        Expression.Constant(&quot;First&quot;)\n                    ),\n                    Expression.Constant(1)\n                ),\n                Expression.SwitchCase(\n                    Expression.Call(\n                        Nothing,\n                        GetType(Console).GetMethod(&quot;WriteLine&quot;, New Type() {GetType(String)}),\n                        Expression.Constant(&quot;Second&quot;)\n                    ),\n                    Expression.Constant(2)\n                )\n            }\n        )\n\n        &#39; The following statement first creates an expression tree,\n        &#39; then compiles it, and then runs it.\n        Expression.Lambda(Of Action)(switchExpr).Compile()()\n\n        &#39; This code example produces the following output:\n        &#39;\n        &#39; Default\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#35\">            // Add the following directive to the file:\n            // using System.Linq.Expressions;  \n\n            // An expression that represents the switch value.\n            ConstantExpression switchValue = Expression.Constant(3);\n\n            // This expression represents a switch statement \n            // that has a default case.\n            SwitchExpression switchExpr =\n                Expression.Switch(\n                    switchValue,\n                    Expression.Call(\n                                null,\n                                typeof(Console).GetMethod(&quot;WriteLine&quot;, new Type[] { typeof(String) }),\n                                Expression.Constant(&quot;Default&quot;)\n                            ),\n                    new SwitchCase[] {\n                        Expression.SwitchCase(\n                            Expression.Call(\n                                null,\n                                typeof(Console).GetMethod(&quot;WriteLine&quot;, new Type[] { typeof(String) }),\n                                Expression.Constant(&quot;First&quot;)\n                            ),\n                            Expression.Constant(1)\n                        ),\n                        Expression.SwitchCase(\n                            Expression.Call(\n                                null,\n                                typeof(Console).GetMethod(&quot;WriteLine&quot;, new Type[] { typeof(String) }),\n                                Expression.Constant(&quot;Second&quot;)\n                            ),\n                            Expression.Constant(2)\n                        )\n                    }\n                );\n\n            // The following statement first creates an expression tree,\n            // then compiles it, and then runs it.\n            Expression.Lambda&lt;Action&gt;(switchExpr).Compile()();\n\n            // This code example produces the following output:\n            //\n            // Default\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Switch_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_System_Collections_Generic_IEnumerable_System_Linq_Expressions_SwitchCase__\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Switch_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Switch(Expression,Expression,MethodInfo,IEnumerable&lt;SwitchCase&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.switchexpression\" data-linktype=\"relative-path\">SwitchExpression</a> that represents a <code>switch</code> statement that has a default case.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.SwitchCase&gt; cases);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>switchValue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to be tested against each case.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>defaultBody</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The result of the switch if <code>switchValue</code> does not match any of the cases.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparison</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The equality comparison method to use.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cases</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.expressions.switchcase\" data-linktype=\"relative-path\">SwitchCase</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The set of cases for this switch expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.switchexpression\" data-linktype=\"relative-path\">SwitchExpression</a></div>\r\n                  </div>\r\n                  <p>The created <a class=\"xref\" href=\"system.linq.expressions.switchexpression\" data-linktype=\"relative-path\">SwitchExpression</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Switch_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_System_Linq_Expressions_SwitchCase___\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Switch_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Switch(Expression,Expression,MethodInfo,SwitchCase[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.switchexpression\" data-linktype=\"relative-path\">SwitchExpression</a> that represents a <code>switch</code> statement that has a default case.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, System.Linq.Expressions.SwitchCase[] cases);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>switchValue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to be tested against each case.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>defaultBody</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The result of the switch if <code>switchValue</code> does not match any of the cases.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparison</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The equality comparison method to use.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cases</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.switchcase\" data-linktype=\"relative-path\">SwitchCase</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The set of cases for this switch expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.switchexpression\" data-linktype=\"relative-path\">SwitchExpression</a></div>\r\n                  </div>\r\n                  <p>The created <a class=\"xref\" href=\"system.linq.expressions.switchexpression\" data-linktype=\"relative-path\">SwitchExpression</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Switch_System_Type_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_System_Collections_Generic_IEnumerable_System_Linq_Expressions_SwitchCase__\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Switch_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Switch(Type,Expression,Expression,MethodInfo,IEnumerable&lt;SwitchCase&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.switchexpression\" data-linktype=\"relative-path\">SwitchExpression</a> that represents a <code>switch</code> statement that has a default case.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.SwitchExpression Switch (Type type, System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.SwitchCase&gt; cases);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The result type of the switch.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>switchValue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to be tested against each case.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>defaultBody</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The result of the switch if <code>switchValue</code> does not match any of the cases.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparison</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The equality comparison method to use.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cases</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.expressions.switchcase\" data-linktype=\"relative-path\">SwitchCase</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The set of cases for this switch expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.switchexpression\" data-linktype=\"relative-path\">SwitchExpression</a></div>\r\n                  </div>\r\n                  <p>The created <a class=\"xref\" href=\"system.linq.expressions.switchexpression\" data-linktype=\"relative-path\">SwitchExpression</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Switch_System_Type_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_System_Linq_Expressions_SwitchCase___\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Switch_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Switch(Type,Expression,Expression,MethodInfo,SwitchCase[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.switchexpression\" data-linktype=\"relative-path\">SwitchExpression</a> that represents a <code>switch</code> statement that has a default case..</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.SwitchExpression Switch (Type type, System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, System.Linq.Expressions.SwitchCase[] cases);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The result type of the switch.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>switchValue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to be tested against each case.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>defaultBody</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The result of the switch if <code>switchValue</code> does not match any of the cases.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparison</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The equality comparison method to use.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cases</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.switchcase\" data-linktype=\"relative-path\">SwitchCase</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The set of cases for this switch expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.switchexpression\" data-linktype=\"relative-path\">SwitchExpression</a></div>\r\n                  </div>\r\n                  <p>The created <a class=\"xref\" href=\"system.linq.expressions.switchexpression\" data-linktype=\"relative-path\">SwitchExpression</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_SwitchCase_System_Linq_Expressions_Expression_System_Collections_Generic_IEnumerable_System_Linq_Expressions_Expression__\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_SwitchCase_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SwitchCase(Expression,IEnumerable&lt;Expression&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.switchcase\" data-linktype=\"relative-path\">SwitchCase</a> object to be used in a <a class=\"xref\" href=\"system.linq.expressions.switchexpression\" data-linktype=\"relative-path\">SwitchExpression</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.SwitchCase SwitchCase (System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; testValues);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The body of the case.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>testValues</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The test values of the case.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.switchcase\" data-linktype=\"relative-path\">SwitchCase</a></div>\r\n                  </div>\r\n                  <p>The created <a class=\"xref\" href=\"system.linq.expressions.switchcase\" data-linktype=\"relative-path\">SwitchCase</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>All <a class=\"xref\" href=\"system.linq.expressions.switchcase\" data-linktype=\"relative-path\">SwitchCase</a> objects in a <a class=\"xref\" href=\"system.linq.expressions.switchexpression\" data-linktype=\"relative-path\">SwitchExpression</a> object must have the same type, unless the <a class=\"xref\" href=\"system.linq.expressions.switchexpression\" data-linktype=\"relative-path\">SwitchExpression</a> has the type <code>void</code>.  </p>\n<p> Each <a class=\"xref\" href=\"system.linq.expressions.switchcase\" data-linktype=\"relative-path\">SwitchCase</a> object has an implicit <code>break</code> statement, which means that there is no implicit fall through from one case label to another.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to create an expression that represents a swtich statement that has a default case.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#35\">        &#39; Add the following directive to the file:\n        &#39; Imports System.Linq.Expressions\n\n        &#39; An expression that represents the switch value.\n        Dim switchValue As ConstantExpression = Expression.Constant(3)\n\n        &#39; This expression represents a switch statement \n        &#39; that has a default case.\n        Dim switchExpr As SwitchExpression =\n        Expression.Switch(\n            switchValue,\n            Expression.Call(\n                        Nothing,\n                        GetType(Console).GetMethod(&quot;WriteLine&quot;, New Type() {GetType(String)}),\n                        Expression.Constant(&quot;Default&quot;)\n                    ),\n            New SwitchCase() {\n                Expression.SwitchCase(\n                    Expression.Call(\n                        Nothing,\n                        GetType(Console).GetMethod(&quot;WriteLine&quot;, New Type() {GetType(String)}),\n                        Expression.Constant(&quot;First&quot;)\n                    ),\n                    Expression.Constant(1)\n                ),\n                Expression.SwitchCase(\n                    Expression.Call(\n                        Nothing,\n                        GetType(Console).GetMethod(&quot;WriteLine&quot;, New Type() {GetType(String)}),\n                        Expression.Constant(&quot;Second&quot;)\n                    ),\n                    Expression.Constant(2)\n                )\n            }\n        )\n\n        &#39; The following statement first creates an expression tree,\n        &#39; then compiles it, and then runs it.\n        Expression.Lambda(Of Action)(switchExpr).Compile()()\n\n        &#39; This code example produces the following output:\n        &#39;\n        &#39; Default\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#35\">            // Add the following directive to the file:\n            // using System.Linq.Expressions;  \n\n            // An expression that represents the switch value.\n            ConstantExpression switchValue = Expression.Constant(3);\n\n            // This expression represents a switch statement \n            // that has a default case.\n            SwitchExpression switchExpr =\n                Expression.Switch(\n                    switchValue,\n                    Expression.Call(\n                                null,\n                                typeof(Console).GetMethod(&quot;WriteLine&quot;, new Type[] { typeof(String) }),\n                                Expression.Constant(&quot;Default&quot;)\n                            ),\n                    new SwitchCase[] {\n                        Expression.SwitchCase(\n                            Expression.Call(\n                                null,\n                                typeof(Console).GetMethod(&quot;WriteLine&quot;, new Type[] { typeof(String) }),\n                                Expression.Constant(&quot;First&quot;)\n                            ),\n                            Expression.Constant(1)\n                        ),\n                        Expression.SwitchCase(\n                            Expression.Call(\n                                null,\n                                typeof(Console).GetMethod(&quot;WriteLine&quot;, new Type[] { typeof(String) }),\n                                Expression.Constant(&quot;Second&quot;)\n                            ),\n                            Expression.Constant(2)\n                        )\n                    }\n                );\n\n            // The following statement first creates an expression tree,\n            // then compiles it, and then runs it.\n            Expression.Lambda&lt;Action&gt;(switchExpr).Compile()();\n\n            // This code example produces the following output:\n            //\n            // Default\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_SwitchCase_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression___\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_SwitchCase_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SwitchCase(Expression,Expression[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.switchcase\" data-linktype=\"relative-path\">SwitchCase</a> for use in a <a class=\"xref\" href=\"system.linq.expressions.switchexpression\" data-linktype=\"relative-path\">SwitchExpression</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.SwitchCase SwitchCase (System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression[] testValues);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The body of the case.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>testValues</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The test values of the case.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.switchcase\" data-linktype=\"relative-path\">SwitchCase</a></div>\r\n                  </div>\r\n                  <p>The created <a class=\"xref\" href=\"system.linq.expressions.switchcase\" data-linktype=\"relative-path\">SwitchCase</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_SymbolDocument_System_String_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_SymbolDocument_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SymbolDocument(String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates an instance of <a class=\"xref\" href=\"system.linq.expressions.symboldocumentinfo\" data-linktype=\"relative-path\">SymbolDocumentInfo</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> to set the <span class=\"xref\">stem.Linq.Expressions.SymbolDocumentInfo.FileName*</span> equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.symboldocumentinfo\" data-linktype=\"relative-path\">SymbolDocumentInfo</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.symboldocumentinfo\" data-linktype=\"relative-path\">SymbolDocumentInfo</a> that has the <span class=\"xref\">stem.Linq.Expressions.SymbolDocumentInfo.FileName*</span> property set to the specified value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_SymbolDocument_System_String_System_Guid_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_SymbolDocument_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SymbolDocument(String,Guid)</div>        \r\n          </div>\r\n    \r\n            <p>Creates an instance of <a class=\"xref\" href=\"system.linq.expressions.symboldocumentinfo\" data-linktype=\"relative-path\">SymbolDocumentInfo</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName, Guid language);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> to set the <span class=\"xref\">stem.Linq.Expressions.SymbolDocumentInfo.FileName*</span> equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>language</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a> to set the <span class=\"xref\">stem.Linq.Expressions.SymbolDocumentInfo.Language*</span> equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.symboldocumentinfo\" data-linktype=\"relative-path\">SymbolDocumentInfo</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.symboldocumentinfo\" data-linktype=\"relative-path\">SymbolDocumentInfo</a> that has the <span class=\"xref\">stem.Linq.Expressions.SymbolDocumentInfo.FileName*</span> and <span class=\"xref\">stem.Linq.Expressions.SymbolDocumentInfo.Language*</span> properties set to the specified value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_SymbolDocument_System_String_System_Guid_System_Guid_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_SymbolDocument_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SymbolDocument(String,Guid,Guid)</div>        \r\n          </div>\r\n    \r\n            <p>Creates an instance of <a class=\"xref\" href=\"system.linq.expressions.symboldocumentinfo\" data-linktype=\"relative-path\">SymbolDocumentInfo</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName, Guid language, Guid languageVendor);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> to set the <span class=\"xref\">stem.Linq.Expressions.SymbolDocumentInfo.FileName*</span> equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>language</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a> to set the <span class=\"xref\">stem.Linq.Expressions.SymbolDocumentInfo.Language*</span> equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>languageVendor</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a> to set the <span class=\"xref\">stem.Linq.Expressions.SymbolDocumentInfo.LanguageVendor*</span> equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.symboldocumentinfo\" data-linktype=\"relative-path\">SymbolDocumentInfo</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.symboldocumentinfo\" data-linktype=\"relative-path\">SymbolDocumentInfo</a> that has the <span class=\"xref\">stem.Linq.Expressions.SymbolDocumentInfo.FileName*</span> and <span class=\"xref\">stem.Linq.Expressions.SymbolDocumentInfo.Language*</span> and <span class=\"xref\">stem.Linq.Expressions.SymbolDocumentInfo.LanguageVendor*</span> properties set to the specified value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_SymbolDocument_System_String_System_Guid_System_Guid_System_Guid_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_SymbolDocument_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SymbolDocument(String,Guid,Guid,Guid)</div>        \r\n          </div>\r\n    \r\n            <p>Creates an instance of <a class=\"xref\" href=\"system.linq.expressions.symboldocumentinfo\" data-linktype=\"relative-path\">SymbolDocumentInfo</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName, Guid language, Guid languageVendor, Guid documentType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> to set the <span class=\"xref\">stem.Linq.Expressions.SymbolDocumentInfo.FileName*</span> equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>language</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a> to set the <span class=\"xref\">stem.Linq.Expressions.SymbolDocumentInfo.Language*</span> equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>languageVendor</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a> to set the <span class=\"xref\">stem.Linq.Expressions.SymbolDocumentInfo.LanguageVendor*</span> equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>documentType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a> to set the <span class=\"xref\">stem.Linq.Expressions.SymbolDocumentInfo.DocumentType*</span> equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.symboldocumentinfo\" data-linktype=\"relative-path\">SymbolDocumentInfo</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.symboldocumentinfo\" data-linktype=\"relative-path\">SymbolDocumentInfo</a> that has the <span class=\"xref\">stem.Linq.Expressions.SymbolDocumentInfo.FileName*</span> and <span class=\"xref\">stem.Linq.Expressions.SymbolDocumentInfo.Language*</span> and <span class=\"xref\">stem.Linq.Expressions.SymbolDocumentInfo.LanguageVendor*</span> and <span class=\"xref\">stem.Linq.Expressions.SymbolDocumentInfo.DocumentType*</span> properties set to the specified value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Throw_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Throw_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Throw(Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents a throwing of an exception.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.UnaryExpression Throw (System.Linq.Expressions.Expression value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents the exception.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to create a <a class=\"xref\" href=\"system.linq.expressions.tryexpression\" data-linktype=\"relative-path\">TryExpression</a> object that uses the Throw method.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#47\">        &#39; Add the following directive to the file:\n        &#39; Imports System.Linq.Expressions \n\n        &#39; A TryExpression object that has a Catch statement.\n        &#39; The return types of the Try block and all Catch blocks must be the same.\n        Dim tryCatchExpr As TryExpression =\n               Expression.TryCatch(\n                   Expression.Block(\n                       Expression.Throw(Expression.Constant(New DivideByZeroException())),\n                       Expression.Constant(&quot;Try block&quot;)\n                   ),\n                   Expression.Catch(\n                       GetType(DivideByZeroException),\n                       Expression.Constant(&quot;Catch block&quot;)\n                   )\n               )\n\n        &#39; The following statement first creates an expression tree,\n        &#39; then compiles it, and then runs it.\n        &#39; If the exception is caught, \n        &#39; the result of the TryExpression is the last statement \n        &#39; of the corresponding Catch statement.\n        Console.WriteLine(Expression.Lambda(Of Func(Of String))(tryCatchExpr).Compile()())\n\n        &#39; This code example produces the following output:\n        &#39;\n        &#39; Catch block\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#47\">            // Add the following directive to the file:\n            // using System.Linq.Expressions;  \n\n            // A TryExpression object that has a Catch statement.\n            // The return types of the Try block and all Catch blocks must be the same.\n            TryExpression tryCatchExpr =\n                Expression.TryCatch(\n                    Expression.Block(\n                        Expression.Throw(Expression.Constant(new DivideByZeroException())),\n                        Expression.Constant(&quot;Try block&quot;)\n                    ),\n                    Expression.Catch(\n                        typeof(DivideByZeroException),\n                        Expression.Constant(&quot;Catch block&quot;)\n                    )\n                );\n\n            // The following statement first creates an expression tree,\n            // then compiles it, and then runs it.\n            // If the exception is caught, \n            // the result of the TryExpression is the last statement \n            // of the corresponding Catch statement.\n            Console.WriteLine(Expression.Lambda&lt;Func&lt;string&gt;&gt;(tryCatchExpr).Compile()());\n\n            // This code example produces the following output:\n            //\n            // Catch block\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Throw_System_Linq_Expressions_Expression_System_Type_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Throw_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Throw(Expression,Type)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents a throwing of an exception with a given type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.UnaryExpression Throw (System.Linq.Expressions.Expression value, Type type);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The new <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> of the expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents the exception.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_ToString\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a textual representation of the <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A textual representation of the <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_TryCatch_System_Linq_Expressions_Expression_System_Linq_Expressions_CatchBlock___\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_TryCatch_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryCatch(Expression,CatchBlock[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.tryexpression\" data-linktype=\"relative-path\">TryExpression</a> representing a try block with any number of catch statements and neither a fault nor finally block.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.TryExpression TryCatch (System.Linq.Expressions.Expression body, System.Linq.Expressions.CatchBlock[] handlers);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The body of the try block.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>handlers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.catchblock\" data-linktype=\"relative-path\">CatchBlock</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The array of zero or more <a class=\"xref\" href=\"system.linq.expressions.catchblock\" data-linktype=\"relative-path\">CatchBlock</a> expressions representing the catch statements to be associated with the try block.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.tryexpression\" data-linktype=\"relative-path\">TryExpression</a></div>\r\n                  </div>\r\n                  <p>The created <a class=\"xref\" href=\"system.linq.expressions.tryexpression\" data-linktype=\"relative-path\">TryExpression</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to create a <a class=\"xref\" href=\"system.linq.expressions.tryexpression\" data-linktype=\"relative-path\">TryExpression</a> object that contains a catch statement.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#47\">        &#39; Add the following directive to the file:\n        &#39; Imports System.Linq.Expressions \n\n        &#39; A TryExpression object that has a Catch statement.\n        &#39; The return types of the Try block and all Catch blocks must be the same.\n        Dim tryCatchExpr As TryExpression =\n               Expression.TryCatch(\n                   Expression.Block(\n                       Expression.Throw(Expression.Constant(New DivideByZeroException())),\n                       Expression.Constant(&quot;Try block&quot;)\n                   ),\n                   Expression.Catch(\n                       GetType(DivideByZeroException),\n                       Expression.Constant(&quot;Catch block&quot;)\n                   )\n               )\n\n        &#39; The following statement first creates an expression tree,\n        &#39; then compiles it, and then runs it.\n        &#39; If the exception is caught, \n        &#39; the result of the TryExpression is the last statement \n        &#39; of the corresponding Catch statement.\n        Console.WriteLine(Expression.Lambda(Of Func(Of String))(tryCatchExpr).Compile()())\n\n        &#39; This code example produces the following output:\n        &#39;\n        &#39; Catch block\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#47\">            // Add the following directive to the file:\n            // using System.Linq.Expressions;  \n\n            // A TryExpression object that has a Catch statement.\n            // The return types of the Try block and all Catch blocks must be the same.\n            TryExpression tryCatchExpr =\n                Expression.TryCatch(\n                    Expression.Block(\n                        Expression.Throw(Expression.Constant(new DivideByZeroException())),\n                        Expression.Constant(&quot;Try block&quot;)\n                    ),\n                    Expression.Catch(\n                        typeof(DivideByZeroException),\n                        Expression.Constant(&quot;Catch block&quot;)\n                    )\n                );\n\n            // The following statement first creates an expression tree,\n            // then compiles it, and then runs it.\n            // If the exception is caught, \n            // the result of the TryExpression is the last statement \n            // of the corresponding Catch statement.\n            Console.WriteLine(Expression.Lambda&lt;Func&lt;string&gt;&gt;(tryCatchExpr).Compile()());\n\n            // This code example produces the following output:\n            //\n            // Catch block\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_TryCatchFinally_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_System_Linq_Expressions_CatchBlock___\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_TryCatchFinally_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryCatchFinally(Expression,Expression,CatchBlock[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.tryexpression\" data-linktype=\"relative-path\">TryExpression</a> representing a try block with any number of catch statements and a finally block.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.TryExpression TryCatchFinally (System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression finally, System.Linq.Expressions.CatchBlock[] handlers);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The body of the try block.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>finally</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The body of the finally block.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>handlers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.catchblock\" data-linktype=\"relative-path\">CatchBlock</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The array of zero or more <a class=\"xref\" href=\"system.linq.expressions.catchblock\" data-linktype=\"relative-path\">CatchBlock</a> expressions representing the catch statements to be associated with the try block.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.tryexpression\" data-linktype=\"relative-path\">TryExpression</a></div>\r\n                  </div>\r\n                  <p>The created <a class=\"xref\" href=\"system.linq.expressions.tryexpression\" data-linktype=\"relative-path\">TryExpression</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to create a <a class=\"xref\" href=\"system.linq.expressions.tryexpression\" data-linktype=\"relative-path\">TryExpression</a> object that contains a catch statement and a finally statement.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.ExpressionDev10#48\">        &#39; Add the following directive to the file:\n        &#39; Imports System.Linq.Expressions \n\n        &#39; A TryExpression object that has a catch statement and a finally statement.\n        &#39; The return types of the try block and all catch blocks must be the same.\n        Dim tryCatchExpr As TryExpression =\n            Expression.TryCatchFinally(\n                Expression.Block(\n                    Expression.Throw(Expression.Constant(New DivideByZeroException())),\n                    Expression.Constant(&quot;Try block&quot;)\n                 ),\n            Expression.Call(\n                GetType(Console).GetMethod(&quot;WriteLine&quot;, New Type() {GetType(String)}),\n                Expression.Constant(&quot;Finally block&quot;)\n            ),\n            Expression.Catch(\n                GetType(DivideByZeroException),\n                Expression.Constant(&quot;Catch block&quot;)\n            )\n        )\n\n        &#39; The following statement first creates an expression tree,\n        &#39; then compiles it, and then runs it.\n        &#39; If the exception is caught, \n        &#39; the result of the TryExpression is the last statement \n        &#39; of the corresponding catch statement.\n        Console.WriteLine(Expression.Lambda(Of Func(Of String))(tryCatchExpr).Compile()())\n\n        &#39; This code example produces the following output:\n        &#39;\n        &#39; Finally block\n        &#39; Catch block\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.ExpressionDev10#48\">            // Add the following directive to the file.\n            // using System.Linq.Expressions;  \n\n            // A TryExpression object that has a catch statement and a finally statement.\n            // The return types of the try block and all catch blocks must be the same.\n            TryExpression tryCatchExpr =\n                Expression.TryCatchFinally(\n                    Expression.Block(\n                        Expression.Throw(Expression.Constant(new DivideByZeroException())),\n                        Expression.Constant(&quot;Try block&quot;)\n                    ),\n                    Expression.Call(typeof(Console).GetMethod(&quot;WriteLine&quot;, new Type[] { typeof(string) }), Expression.Constant(&quot;Finally block&quot;)),\n                    Expression.Catch(\n                        typeof(DivideByZeroException),\n                        Expression.Constant(&quot;Catch block&quot;)\n                    )\n                );\n\n            // The following statement first creates an expression tree,\n            // then compiles it, and then runs it.\n            // If the exception is caught, \n            // the result of the TryExpression is the last statement \n            // of the corresponding catch statement.\n            Console.WriteLine(Expression.Lambda&lt;Func&lt;string&gt;&gt;(tryCatchExpr).Compile()());\n\n            // This code example produces the following output:\n            //\n            // Finally block\n            // Catch block\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_TryFault_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_TryFault_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryFault(Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.tryexpression\" data-linktype=\"relative-path\">TryExpression</a> representing a try block with a fault block and no catch statements.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.TryExpression TryFault (System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression fault);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The body of the try block.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>fault</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The body of the fault block.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.tryexpression\" data-linktype=\"relative-path\">TryExpression</a></div>\r\n                  </div>\r\n                  <p>The created <a class=\"xref\" href=\"system.linq.expressions.tryexpression\" data-linktype=\"relative-path\">TryExpression</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_TryFinally_System_Linq_Expressions_Expression_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_TryFinally_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryFinally(Expression,Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.tryexpression\" data-linktype=\"relative-path\">TryExpression</a> representing a try block with a finally block and no catch statements.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.TryExpression TryFinally (System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression finally);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The body of the try block.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>finally</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The body of the finally block.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.tryexpression\" data-linktype=\"relative-path\">TryExpression</a></div>\r\n                  </div>\r\n                  <p>The created <a class=\"xref\" href=\"system.linq.expressions.tryexpression\" data-linktype=\"relative-path\">TryExpression</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_TryGetActionType_System_Type___System_Type__\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_TryGetActionType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryGetActionType(Type[],Type)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> object that represents a generic System.Action delegate type that has specific type arguments.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool TryGetActionType (Type[] typeArgs, out Type actionType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>typeArgs</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of Type objects that specify the type arguments for the System.Action delegate type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>actionType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>When this method returns, contains the generic System.Action delegate type that has specific type arguments. Contains null if there is no generic System.Action delegate that matches the <code>typeArgs</code>.This parameter is passed uninitialized.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>true if generic System.Action delegate type was created for specific <code>typeArgs</code>; false otherwise.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_TryGetFuncType_System_Type___System_Type__\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_TryGetFuncType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryGetFuncType(Type[],Type)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> object that represents a generic System.Func delegate type that has specific type arguments. The last type argument specifies the return type of the created delegate.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool TryGetFuncType (Type[] typeArgs, out Type funcType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>typeArgs</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of Type objects that specify the type arguments for the System.Func delegate type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>funcType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>When this method returns, contains the generic System.Func delegate type that has specific type arguments. Contains null if there is no generic System.Func delegate that matches the <code>typeArgs</code>.This parameter is passed uninitialized.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>true if generic System.Func delegate type was created for specific <code>typeArgs</code>; false otherwise.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_TypeAs_System_Linq_Expressions_Expression_System_Type_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_TypeAs_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TypeAs(Expression,Type)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents an explicit reference or boxing conversion where <code>null</code> is supplied if the conversion fails.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.UnaryExpression TypeAs (System.Linq.Expressions.Expression expression, Type type);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.UnaryExpression.Operand*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> to set the <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.UnaryExpression.Operand*</span> and <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>expression</code> or <code>type</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.unaryexpression#System_Linq_Expressions_UnaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> is <code>null</code>. The <a class=\"xref\" href=\"system.linq.expressions.unaryexpression#System_Linq_Expressions_UnaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> and <a class=\"xref\" href=\"system.linq.expressions.unaryexpression#System_Linq_Expressions_UnaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> properties are both <code>false</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the TypeAs method to create a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents the reference conversion of a non-nullable integer expression to the nullable integer type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.Expression#11\">            // Create a UnaryExpression that represents a\n            // conversion of an int to an int?.\n            System.Linq.Expressions.UnaryExpression typeAsExpression =\n                System.Linq.Expressions.Expression.TypeAs(\n                    System.Linq.Expressions.Expression.Constant(34, typeof(int)),\n                    typeof(int?));\n\n            Console.WriteLine(typeAsExpression.ToString());\n\n            // This code produces the following output:\n            //\n            // (34 As Nullable`1)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.Expression#11\">        &#39; Create a UnaryExpression that represents a reference\n        &#39; conversion of an Integer to an Integer? (a nullable Integer).\n        Dim typeAsExpression As System.Linq.Expressions.UnaryExpression = _\n            System.Linq.Expressions.Expression.TypeAs( _\n                System.Linq.Expressions.Expression.Constant(34, Type.GetType(&quot;System.Int32&quot;)), _\n                Type.GetType(&quot;System.Nullable`1[System.Int32]&quot;))\n\n        Console.WriteLine(typeAsExpression.ToString())\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; (34 As Nullable`1)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_TypeEqual_System_Linq_Expressions_Expression_System_Type_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_TypeEqual_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TypeEqual(Expression,Type)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.typebinaryexpression\" data-linktype=\"relative-path\">TypeBinaryExpression</a> that compares run-time type identity.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.TypeBinaryExpression TypeEqual (System.Linq.Expressions.Expression expression, Type type);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> to set the <span class=\"xref\">stem.Linq.Expressions.TypeBinaryExpression.TypeOperand*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.typebinaryexpression\" data-linktype=\"relative-path\">TypeBinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.typebinaryexpression\" data-linktype=\"relative-path\">TypeBinaryExpression</a> for which the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property is equal to TypeEqual and for which the <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> and <span class=\"xref\">stem.Linq.Expressions.TypeBinaryExpression.TypeOperand*</span> properties are set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_TypeIs_System_Linq_Expressions_Expression_System_Type_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_TypeIs_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TypeIs(Expression,Type)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.typebinaryexpression\" data-linktype=\"relative-path\">TypeBinaryExpression</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.TypeBinaryExpression TypeIs (System.Linq.Expressions.Expression expression, Type type);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.TypeBinaryExpression.Expression*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <span class=\"xref\">stem.Linq.Expressions.Expression.Type*</span> to set the <span class=\"xref\">stem.Linq.Expressions.TypeBinaryExpression.TypeOperand*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.typebinaryexpression\" data-linktype=\"relative-path\">TypeBinaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.typebinaryexpression\" data-linktype=\"relative-path\">TypeBinaryExpression</a> for which the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property is equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and for which the <span class=\"xref\">stem.Linq.Expressions.TypeBinaryExpression.Expression*</span> and <span class=\"xref\">stem.Linq.Expressions.TypeBinaryExpression.TypeOperand*</span> properties are set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>expression</code> or <code>type</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> represents <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the TypeIs method to create a <a class=\"xref\" href=\"system.linq.expressions.typebinaryexpression\" data-linktype=\"relative-path\">TypeBinaryExpression</a> that represents a type test of a string value against the <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Expressions.Expression#12\">            // Create a TypeBinaryExpression that represents a\n            // type test of the string &quot;spruce&quot; against the &#39;int&#39; type.\n            System.Linq.Expressions.TypeBinaryExpression typeBinaryExpression =\n                System.Linq.Expressions.Expression.TypeIs(\n                    System.Linq.Expressions.Expression.Constant(&quot;spruce&quot;),\n                    typeof(int));\n\n            Console.WriteLine(typeBinaryExpression.ToString());\n\n            // This code produces the following output:\n            //\n            // (&quot;spruce&quot; Is Int32)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Expressions.Expression#12\">        &#39; Create a TypeBinaryExpression that represents a\n        &#39; type test of the String &quot;spruce&quot; against the Int32 type.\n        Dim typeBinaryExpression As System.Linq.Expressions.TypeBinaryExpression = _\n            System.Linq.Expressions.Expression.TypeIs( _\n                System.Linq.Expressions.Expression.Constant(&quot;spruce&quot;), _\n                Type.GetType(&quot;System.Int32&quot;))\n\n        Console.WriteLine(typeBinaryExpression.ToString())\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; (&quot;spruce&quot; Is Int32)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_UnaryPlus_System_Linq_Expressions_Expression_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_UnaryPlus_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UnaryPlus(Expression)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents a unary plus operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.UnaryExpression UnaryPlus (System.Linq.Expressions.Expression expression);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.UnaryExpression.Operand*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.UnaryExpression.Operand*</span> property set to the specified value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>expression</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The unary plus operator is not defined for <code>expression</code>.Type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.unaryexpression#System_Linq_Expressions_UnaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> is set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> and <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> properties are both <code>true</code>. Otherwise, they are false.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the implementing method for the operation:  </p>\n<ul>\n<li><p>If <code>expression</code>.Type is a user-defined type that defines the unary plus operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that operator is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if <code>expression</code>.Type is a numeric type, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>expression</code>.Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  </p>\n<ul>\n<li><p><code>expression</code>.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is a non-nullable value type.  </p>\n</li>\n</ul>\n<p>If the implementing method is <code>null</code>, the type of the node is <code>expression</code>.Type. If <code>expression</code>.Type is non-nullable, the node is not lifted. Otherwise, the node is lifted.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_UnaryPlus_System_Linq_Expressions_Expression_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_UnaryPlus_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UnaryPlus(Expression,MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents a unary plus operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.UnaryExpression UnaryPlus (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to set the <span class=\"xref\">stem.Linq.Expressions.UnaryExpression.Operand*</span> property equal to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> to set the <span class=\"xref\">stem.Linq.Expressions.UnaryExpression.Method*</span> property equal to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that has the <span class=\"xref\">stem.Linq.Expressions.Expression.NodeType*</span> property equal to <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> and the <span class=\"xref\">stem.Linq.Expressions.UnaryExpression.Operand*</span> and <span class=\"xref\">stem.Linq.Expressions.UnaryExpression.Method*</span> properties set to the specified values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>expression</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is not <code>null</code> and the method it represents returns <code>void</code>, is not <code>static</code> (<code>Shared</code> in Visual Basic), or does not take exactly one argument.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is <code>null</code> and the unary plus operator is not defined for <code>expression</code>.Type.  </p>\n<p> -or-  </p>\n<p> <code>expression</code>.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <code>method</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.linq.expressions.unaryexpression#System_Linq_Expressions_UnaryExpression_Method_\" data-linktype=\"relative-path\">Method</a> property of the resulting <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> is set to the implementing method. The <a class=\"xref\" href=\"system.linq.expressions.expression#System_Linq_Expressions_Expression_Type_\" data-linktype=\"relative-path\">Type</a> property is set to the type of the node. If the node is lifted, the <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLifted_\" data-linktype=\"relative-path\">IsLifted</a> and <a class=\"xref\" href=\"system.linq.expressions.binaryexpression#System_Linq_Expressions_BinaryExpression_IsLiftedToNull_\" data-linktype=\"relative-path\">IsLiftedToNull</a> properties are both <code>true</code>. Otherwise, they are false.  </p>\n<h4 id=\"implementing-method\">Implementing Method</h4>\n<p> The following rules determine the implementing method for the operation:  </p>\n<ul>\n<li><p>If <code>method</code> is not <code>null</code> and it represents a non-void, <code>static</code> (<code>Shared</code> in Visual Basic) method that takes one argument, it is the implementing method for the node.  </p>\n</li>\n<li><p>If <code>expression</code>.Type is a user-defined type that defines the unary plus operator, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents that operator is the implementing method.  </p>\n</li>\n<li><p>Otherwise, if <code>expression</code>.Type is a numeric type, the implementing method is <code>null</code>.  </p>\n</li>\n</ul>\n<h4 id=\"node-type-and-lifted-versus-non-lifted\">Node Type and Lifted versus Non-Lifted</h4>\n<p> If the implementing method is not <code>null</code>:  </p>\n<ul>\n<li><p>If <code>expression</code>.Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  </p>\n</li>\n<li><p>If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  </p>\n<ul>\n<li><p><code>expression</code>.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.  </p>\n</li>\n<li><p>The return type of the implementing method is a non-nullable value type.  </p>\n</li>\n</ul>\n<p>If the implementing method is <code>null</code>, the type of the node is <code>expression</code>.Type. If <code>expression</code>.Type is non-nullable, the node is not lifted. Otherwise, the node is lifted.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Unbox_System_Linq_Expressions_Expression_System_Type_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Unbox_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Unbox(Expression,Type)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a> that represents an explicit unboxing.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.UnaryExpression Unbox (System.Linq.Expressions.Expression expression, Type type);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> to unbox.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The new <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> of the expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a></div>\r\n                  </div>\r\n                  <p>An instance of <a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Variable_System_Type_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Variable_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Variable(Type)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a> node that can be used to identify a parameter or a variable in an expression tree.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.ParameterExpression Variable (Type type);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the parameter or variable.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a> node with the specified name and type</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_Variable_System_Type_System_String_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_Variable_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Variable(Type,String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a> node that can be used to identify a parameter or a variable in an expression tree.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.Expressions.ParameterExpression Variable (Type type, string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the parameter or variable.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the parameter or variable. This name is used for debugging or printing purpose only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a> node with the specified name and type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_Expression_VisitChildren_System_Linq_Expressions_ExpressionVisitor_\">\r\n    \r\n            <a id=\"System_Linq_Expressions_Expression_VisitChildren_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">VisitChildren(ExpressionVisitor)</div>        \r\n          </div>\r\n    \r\n            <p>Reduces the node and then calls the visitor delegate on the reduced expression. The method throws an exception if the node is not reducible.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual System.Linq.Expressions.Expression VisitChildren (System.Linq.Expressions.ExpressionVisitor visitor);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>visitor</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expressionvisitor\" data-linktype=\"relative-path\">ExpressionVisitor</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An instance of <span class=\"xref\">stem.Func`2</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </div>\r\n                  <p>The expression being visited, or an expression which should replace it in the tree.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Override this method to provide logic to walk the node&#39;s children. A typical implementation will call visitor.Visit on each of its children, and if any of them change, should return a new copy of itself with the modified children.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Linq.Expressions.Expression.yml\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression..ctor\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.Accept\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.Add\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.AddAssign\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.AddAssignChecked\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.AddChecked\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.And\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.AndAlso\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.AndAssign\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.ArrayAccess\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.ArrayIndex\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.ArrayLength\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.Assign\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.Bind\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.Block\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.Break\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.Call\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.CanReduce\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.Catch\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.ClearDebugInfo\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.Coalesce\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.Condition\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.Constant\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.Continue\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.Convert\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.ConvertChecked\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.DebugInfo\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.Decrement\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.Default\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.Divide\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.DivideAssign\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.Dynamic\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.ElementInit\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.Empty\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.Equal\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.ExclusiveOr\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.ExclusiveOrAssign\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.Field\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.GetActionType\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.GetDelegateType\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.GetFuncType\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.Goto\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.GreaterThan\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.GreaterThanOrEqual\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.IfThen\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.IfThenElse\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.Increment\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.IsFalse\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.IsTrue\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.Label\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.Lambda\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.Lambda&lt;TDelegate&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.LeftShift\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.LeftShiftAssign\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.LessThan\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.LessThanOrEqual\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.ListBind\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.ListInit\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.Loop\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.MakeBinary\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.MakeCatchBlock\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.MakeDynamic\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.MakeGoto\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.MakeIndex\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.MakeMemberAccess\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.MakeTry\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.MakeUnary\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.MemberBind\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.MemberInit\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.Modulo\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.ModuloAssign\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.Multiply\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.MultiplyAssign\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.MultiplyAssignChecked\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.MultiplyChecked\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.Negate\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.NegateChecked\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.New\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.NewArrayBounds\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.NewArrayInit\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.NodeType\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.Not\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.NotEqual\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.OnesComplement\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.Or\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.OrAssign\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.OrElse\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.Parameter\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.PostDecrementAssign\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.PostIncrementAssign\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.Power\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.PowerAssign\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.PreDecrementAssign\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.PreIncrementAssign\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.Property\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.PropertyOrField\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.Quote\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.Reduce\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.ReduceAndCheck\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.ReduceExtensions\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.ReferenceEqual\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.ReferenceNotEqual\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.Rethrow\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.Return\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.RightShift\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.RightShiftAssign\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.RuntimeVariables\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.Subtract\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.SubtractAssign\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.SubtractAssignChecked\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.SubtractChecked\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.Switch\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.SwitchCase\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.SymbolDocument\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.Throw\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.ToString\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.TryCatch\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.TryCatchFinally\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.TryFault\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.TryFinally\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.TryGetActionType\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.TryGetFuncType\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.Type\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.TypeAs\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.TypeEqual\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.TypeIs\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.UnaryPlus\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.Unbox\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.Variable\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.Expression.VisitChildren\">\r\n<meta name=\"APILocation\" content=\"System.Core.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-16 06:20 AM\">\r\n<meta name=\"document_id\" content=\"0a36f99b-9895-1591-b6f9-05c1ae67c819\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides the base class from which the classes that represent expression tree nodes are derived. It also contains static (Shared in Visual Basic) factory methods to create the various node types. Thiâ€¦\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Linq.Expressions/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Linq.Expressions.Expression\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Linq.Expressions.Expression.yml","open_to_public_contributors":true,"api_name":["System.Linq.Expressions.Expression","System.Linq.Expressions.Expression..ctor","System.Linq.Expressions.Expression.Accept","System.Linq.Expressions.Expression.Add","System.Linq.Expressions.Expression.AddAssign","System.Linq.Expressions.Expression.AddAssignChecked","System.Linq.Expressions.Expression.AddChecked","System.Linq.Expressions.Expression.And","System.Linq.Expressions.Expression.AndAlso","System.Linq.Expressions.Expression.AndAssign","System.Linq.Expressions.Expression.ArrayAccess","System.Linq.Expressions.Expression.ArrayIndex","System.Linq.Expressions.Expression.ArrayLength","System.Linq.Expressions.Expression.Assign","System.Linq.Expressions.Expression.Bind","System.Linq.Expressions.Expression.Block","System.Linq.Expressions.Expression.Break","System.Linq.Expressions.Expression.Call","System.Linq.Expressions.Expression.CanReduce","System.Linq.Expressions.Expression.Catch","System.Linq.Expressions.Expression.ClearDebugInfo","System.Linq.Expressions.Expression.Coalesce","System.Linq.Expressions.Expression.Condition","System.Linq.Expressions.Expression.Constant","System.Linq.Expressions.Expression.Continue","System.Linq.Expressions.Expression.Convert","System.Linq.Expressions.Expression.ConvertChecked","System.Linq.Expressions.Expression.DebugInfo","System.Linq.Expressions.Expression.Decrement","System.Linq.Expressions.Expression.Default","System.Linq.Expressions.Expression.Divide","System.Linq.Expressions.Expression.DivideAssign","System.Linq.Expressions.Expression.Dynamic","System.Linq.Expressions.Expression.ElementInit","System.Linq.Expressions.Expression.Empty","System.Linq.Expressions.Expression.Equal","System.Linq.Expressions.Expression.ExclusiveOr","System.Linq.Expressions.Expression.ExclusiveOrAssign","System.Linq.Expressions.Expression.Field","System.Linq.Expressions.Expression.GetActionType","System.Linq.Expressions.Expression.GetDelegateType","System.Linq.Expressions.Expression.GetFuncType","System.Linq.Expressions.Expression.Goto","System.Linq.Expressions.Expression.GreaterThan","System.Linq.Expressions.Expression.GreaterThanOrEqual","System.Linq.Expressions.Expression.IfThen","System.Linq.Expressions.Expression.IfThenElse","System.Linq.Expressions.Expression.Increment","System.Linq.Expressions.Expression.Invoke","System.Linq.Expressions.Expression.IsFalse","System.Linq.Expressions.Expression.IsTrue","System.Linq.Expressions.Expression.Label","System.Linq.Expressions.Expression.Lambda","System.Linq.Expressions.Expression.Lambda<TDelegate>","System.Linq.Expressions.Expression.LeftShift","System.Linq.Expressions.Expression.LeftShiftAssign","System.Linq.Expressions.Expression.LessThan","System.Linq.Expressions.Expression.LessThanOrEqual","System.Linq.Expressions.Expression.ListBind","System.Linq.Expressions.Expression.ListInit","System.Linq.Expressions.Expression.Loop","System.Linq.Expressions.Expression.MakeBinary","System.Linq.Expressions.Expression.MakeCatchBlock","System.Linq.Expressions.Expression.MakeDynamic","System.Linq.Expressions.Expression.MakeGoto","System.Linq.Expressions.Expression.MakeIndex","System.Linq.Expressions.Expression.MakeMemberAccess","System.Linq.Expressions.Expression.MakeTry","System.Linq.Expressions.Expression.MakeUnary","System.Linq.Expressions.Expression.MemberBind","System.Linq.Expressions.Expression.MemberInit","System.Linq.Expressions.Expression.Modulo","System.Linq.Expressions.Expression.ModuloAssign","System.Linq.Expressions.Expression.Multiply","System.Linq.Expressions.Expression.MultiplyAssign","System.Linq.Expressions.Expression.MultiplyAssignChecked","System.Linq.Expressions.Expression.MultiplyChecked","System.Linq.Expressions.Expression.Negate","System.Linq.Expressions.Expression.NegateChecked","System.Linq.Expressions.Expression.New","System.Linq.Expressions.Expression.NewArrayBounds","System.Linq.Expressions.Expression.NewArrayInit","System.Linq.Expressions.Expression.NodeType","System.Linq.Expressions.Expression.Not","System.Linq.Expressions.Expression.NotEqual","System.Linq.Expressions.Expression.OnesComplement","System.Linq.Expressions.Expression.Or","System.Linq.Expressions.Expression.OrAssign","System.Linq.Expressions.Expression.OrElse","System.Linq.Expressions.Expression.Parameter","System.Linq.Expressions.Expression.PostDecrementAssign","System.Linq.Expressions.Expression.PostIncrementAssign","System.Linq.Expressions.Expression.Power","System.Linq.Expressions.Expression.PowerAssign","System.Linq.Expressions.Expression.PreDecrementAssign","System.Linq.Expressions.Expression.PreIncrementAssign","System.Linq.Expressions.Expression.Property","System.Linq.Expressions.Expression.PropertyOrField","System.Linq.Expressions.Expression.Quote","System.Linq.Expressions.Expression.Reduce","System.Linq.Expressions.Expression.ReduceAndCheck","System.Linq.Expressions.Expression.ReduceExtensions","System.Linq.Expressions.Expression.ReferenceEqual","System.Linq.Expressions.Expression.ReferenceNotEqual","System.Linq.Expressions.Expression.Rethrow","System.Linq.Expressions.Expression.Return","System.Linq.Expressions.Expression.RightShift","System.Linq.Expressions.Expression.RightShiftAssign","System.Linq.Expressions.Expression.RuntimeVariables","System.Linq.Expressions.Expression.Subtract","System.Linq.Expressions.Expression.SubtractAssign","System.Linq.Expressions.Expression.SubtractAssignChecked","System.Linq.Expressions.Expression.SubtractChecked","System.Linq.Expressions.Expression.Switch","System.Linq.Expressions.Expression.SwitchCase","System.Linq.Expressions.Expression.SymbolDocument","System.Linq.Expressions.Expression.Throw","System.Linq.Expressions.Expression.ToString","System.Linq.Expressions.Expression.TryCatch","System.Linq.Expressions.Expression.TryCatchFinally","System.Linq.Expressions.Expression.TryFault","System.Linq.Expressions.Expression.TryFinally","System.Linq.Expressions.Expression.TryGetActionType","System.Linq.Expressions.Expression.TryGetFuncType","System.Linq.Expressions.Expression.Type","System.Linq.Expressions.Expression.TypeAs","System.Linq.Expressions.Expression.TypeEqual","System.Linq.Expressions.Expression.TypeIs","System.Linq.Expressions.Expression.UnaryPlus","System.Linq.Expressions.Expression.Unbox","System.Linq.Expressions.Expression.Variable","System.Linq.Expressions.Expression.VisitChildren"],"api_location":["System.Core.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Linq.Expressions.Expression","System::Linq::Expressions::Expression","System.Linq.Expressions.Expression.#ctor","System::Linq::Expressions::Expression::#ctor","System.Linq.Expressions.Expression.Accept","System::Linq::Expressions::Expression::Accept","System.Linq.Expressions.Expression.Add","System::Linq::Expressions::Expression::Add","System.Linq.Expressions.Expression.AddAssign","System::Linq::Expressions::Expression::AddAssign","System.Linq.Expressions.Expression.AddAssignChecked","System::Linq::Expressions::Expression::AddAssignChecked","System.Linq.Expressions.Expression.AddChecked","System::Linq::Expressions::Expression::AddChecked","System.Linq.Expressions.Expression.And","System::Linq::Expressions::Expression::And","System.Linq.Expressions.Expression.AndAlso","System::Linq::Expressions::Expression::AndAlso","System.Linq.Expressions.Expression.AndAssign","System::Linq::Expressions::Expression::AndAssign","System.Linq.Expressions.Expression.ArrayAccess","System::Linq::Expressions::Expression::ArrayAccess","System.Linq.Expressions.Expression.ArrayIndex","System::Linq::Expressions::Expression::ArrayIndex","System.Linq.Expressions.Expression.ArrayLength","System::Linq::Expressions::Expression::ArrayLength","System.Linq.Expressions.Expression.Assign","System::Linq::Expressions::Expression::Assign","System.Linq.Expressions.Expression.Bind","System::Linq::Expressions::Expression::Bind","System.Linq.Expressions.Expression.Block","System::Linq::Expressions::Expression::Block","System.Linq.Expressions.Expression.Break","System::Linq::Expressions::Expression::Break","System.Linq.Expressions.Expression.Call","System::Linq::Expressions::Expression::Call","System.Linq.Expressions.Expression.CanReduce","System::Linq::Expressions::Expression::CanReduce","System.Linq.Expressions.Expression.Catch","System::Linq::Expressions::Expression::Catch","System.Linq.Expressions.Expression.ClearDebugInfo","System::Linq::Expressions::Expression::ClearDebugInfo","System.Linq.Expressions.Expression.Coalesce","System::Linq::Expressions::Expression::Coalesce","System.Linq.Expressions.Expression.Condition","System::Linq::Expressions::Expression::Condition","System.Linq.Expressions.Expression.Constant","System::Linq::Expressions::Expression::Constant","System.Linq.Expressions.Expression.Continue","System::Linq::Expressions::Expression::Continue","System.Linq.Expressions.Expression.Convert","System::Linq::Expressions::Expression::Convert","System.Linq.Expressions.Expression.ConvertChecked","System::Linq::Expressions::Expression::ConvertChecked","System.Linq.Expressions.Expression.DebugInfo","System::Linq::Expressions::Expression::DebugInfo","System.Linq.Expressions.Expression.Decrement","System::Linq::Expressions::Expression::Decrement","System.Linq.Expressions.Expression.Default","System::Linq::Expressions::Expression::Default","System.Linq.Expressions.Expression.Divide","System::Linq::Expressions::Expression::Divide","System.Linq.Expressions.Expression.DivideAssign","System::Linq::Expressions::Expression::DivideAssign","System.Linq.Expressions.Expression.Dynamic","System::Linq::Expressions::Expression::Dynamic","System.Linq.Expressions.Expression.ElementInit","System::Linq::Expressions::Expression::ElementInit","System.Linq.Expressions.Expression.Empty","System::Linq::Expressions::Expression::Empty","System.Linq.Expressions.Expression.Equal","System::Linq::Expressions::Expression::Equal","System.Linq.Expressions.Expression.ExclusiveOr","System::Linq::Expressions::Expression::ExclusiveOr","System.Linq.Expressions.Expression.ExclusiveOrAssign","System::Linq::Expressions::Expression::ExclusiveOrAssign","System.Linq.Expressions.Expression.Field","System::Linq::Expressions::Expression::Field","System.Linq.Expressions.Expression.GetActionType","System::Linq::Expressions::Expression::GetActionType","System.Linq.Expressions.Expression.GetDelegateType","System::Linq::Expressions::Expression::GetDelegateType","System.Linq.Expressions.Expression.GetFuncType","System::Linq::Expressions::Expression::GetFuncType","System.Linq.Expressions.Expression.Goto","System::Linq::Expressions::Expression::Goto","System.Linq.Expressions.Expression.GreaterThan","System::Linq::Expressions::Expression::GreaterThan","System.Linq.Expressions.Expression.GreaterThanOrEqual","System::Linq::Expressions::Expression::GreaterThanOrEqual","System.Linq.Expressions.Expression.IfThen","System::Linq::Expressions::Expression::IfThen","System.Linq.Expressions.Expression.IfThenElse","System::Linq::Expressions::Expression::IfThenElse","System.Linq.Expressions.Expression.Increment","System::Linq::Expressions::Expression::Increment","System.Linq.Expressions.Expression.Invoke","System::Linq::Expressions::Expression::Invoke","System.Linq.Expressions.Expression.IsFalse","System::Linq::Expressions::Expression::IsFalse","System.Linq.Expressions.Expression.IsTrue","System::Linq::Expressions::Expression::IsTrue","System.Linq.Expressions.Expression.Label","System::Linq::Expressions::Expression::Label","System.Linq.Expressions.Expression.Lambda","System::Linq::Expressions::Expression::Lambda","System.Linq.Expressions.Expression.Lambda``1","System::Linq::Expressions::Expression::Lambda``1","System.Linq.Expressions.Expression.LeftShift","System::Linq::Expressions::Expression::LeftShift","System.Linq.Expressions.Expression.LeftShiftAssign","System::Linq::Expressions::Expression::LeftShiftAssign","System.Linq.Expressions.Expression.LessThan","System::Linq::Expressions::Expression::LessThan","System.Linq.Expressions.Expression.LessThanOrEqual","System::Linq::Expressions::Expression::LessThanOrEqual","System.Linq.Expressions.Expression.ListBind","System::Linq::Expressions::Expression::ListBind","System.Linq.Expressions.Expression.ListInit","System::Linq::Expressions::Expression::ListInit","System.Linq.Expressions.Expression.Loop","System::Linq::Expressions::Expression::Loop","System.Linq.Expressions.Expression.MakeBinary","System::Linq::Expressions::Expression::MakeBinary","System.Linq.Expressions.Expression.MakeCatchBlock","System::Linq::Expressions::Expression::MakeCatchBlock","System.Linq.Expressions.Expression.MakeDynamic","System::Linq::Expressions::Expression::MakeDynamic","System.Linq.Expressions.Expression.MakeGoto","System::Linq::Expressions::Expression::MakeGoto","System.Linq.Expressions.Expression.MakeIndex","System::Linq::Expressions::Expression::MakeIndex","System.Linq.Expressions.Expression.MakeMemberAccess","System::Linq::Expressions::Expression::MakeMemberAccess","System.Linq.Expressions.Expression.MakeTry","System::Linq::Expressions::Expression::MakeTry","System.Linq.Expressions.Expression.MakeUnary","System::Linq::Expressions::Expression::MakeUnary","System.Linq.Expressions.Expression.MemberBind","System::Linq::Expressions::Expression::MemberBind","System.Linq.Expressions.Expression.MemberInit","System::Linq::Expressions::Expression::MemberInit","System.Linq.Expressions.Expression.Modulo","System::Linq::Expressions::Expression::Modulo","System.Linq.Expressions.Expression.ModuloAssign","System::Linq::Expressions::Expression::ModuloAssign","System.Linq.Expressions.Expression.Multiply","System::Linq::Expressions::Expression::Multiply","System.Linq.Expressions.Expression.MultiplyAssign","System::Linq::Expressions::Expression::MultiplyAssign","System.Linq.Expressions.Expression.MultiplyAssignChecked","System::Linq::Expressions::Expression::MultiplyAssignChecked","System.Linq.Expressions.Expression.MultiplyChecked","System::Linq::Expressions::Expression::MultiplyChecked","System.Linq.Expressions.Expression.Negate","System::Linq::Expressions::Expression::Negate","System.Linq.Expressions.Expression.NegateChecked","System::Linq::Expressions::Expression::NegateChecked","System.Linq.Expressions.Expression.New","System::Linq::Expressions::Expression::New","System.Linq.Expressions.Expression.NewArrayBounds","System::Linq::Expressions::Expression::NewArrayBounds","System.Linq.Expressions.Expression.NewArrayInit","System::Linq::Expressions::Expression::NewArrayInit","System.Linq.Expressions.Expression.NodeType","System::Linq::Expressions::Expression::NodeType","System.Linq.Expressions.Expression.Not","System::Linq::Expressions::Expression::Not","System.Linq.Expressions.Expression.NotEqual","System::Linq::Expressions::Expression::NotEqual","System.Linq.Expressions.Expression.OnesComplement","System::Linq::Expressions::Expression::OnesComplement","System.Linq.Expressions.Expression.Or","System::Linq::Expressions::Expression::Or","System.Linq.Expressions.Expression.OrAssign","System::Linq::Expressions::Expression::OrAssign","System.Linq.Expressions.Expression.OrElse","System::Linq::Expressions::Expression::OrElse","System.Linq.Expressions.Expression.Parameter","System::Linq::Expressions::Expression::Parameter","System.Linq.Expressions.Expression.PostDecrementAssign","System::Linq::Expressions::Expression::PostDecrementAssign","System.Linq.Expressions.Expression.PostIncrementAssign","System::Linq::Expressions::Expression::PostIncrementAssign","System.Linq.Expressions.Expression.Power","System::Linq::Expressions::Expression::Power","System.Linq.Expressions.Expression.PowerAssign","System::Linq::Expressions::Expression::PowerAssign","System.Linq.Expressions.Expression.PreDecrementAssign","System::Linq::Expressions::Expression::PreDecrementAssign","System.Linq.Expressions.Expression.PreIncrementAssign","System::Linq::Expressions::Expression::PreIncrementAssign","System.Linq.Expressions.Expression.Property","System::Linq::Expressions::Expression::Property","System.Linq.Expressions.Expression.PropertyOrField","System::Linq::Expressions::Expression::PropertyOrField","System.Linq.Expressions.Expression.Quote","System::Linq::Expressions::Expression::Quote","System.Linq.Expressions.Expression.Reduce","System::Linq::Expressions::Expression::Reduce","System.Linq.Expressions.Expression.ReduceAndCheck","System::Linq::Expressions::Expression::ReduceAndCheck","System.Linq.Expressions.Expression.ReduceExtensions","System::Linq::Expressions::Expression::ReduceExtensions","System.Linq.Expressions.Expression.ReferenceEqual","System::Linq::Expressions::Expression::ReferenceEqual","System.Linq.Expressions.Expression.ReferenceNotEqual","System::Linq::Expressions::Expression::ReferenceNotEqual","System.Linq.Expressions.Expression.Rethrow","System::Linq::Expressions::Expression::Rethrow","System.Linq.Expressions.Expression.Return","System::Linq::Expressions::Expression::Return","System.Linq.Expressions.Expression.RightShift","System::Linq::Expressions::Expression::RightShift","System.Linq.Expressions.Expression.RightShiftAssign","System::Linq::Expressions::Expression::RightShiftAssign","System.Linq.Expressions.Expression.RuntimeVariables","System::Linq::Expressions::Expression::RuntimeVariables","System.Linq.Expressions.Expression.Subtract","System::Linq::Expressions::Expression::Subtract","System.Linq.Expressions.Expression.SubtractAssign","System::Linq::Expressions::Expression::SubtractAssign","System.Linq.Expressions.Expression.SubtractAssignChecked","System::Linq::Expressions::Expression::SubtractAssignChecked","System.Linq.Expressions.Expression.SubtractChecked","System::Linq::Expressions::Expression::SubtractChecked","System.Linq.Expressions.Expression.Switch","System::Linq::Expressions::Expression::Switch","System.Linq.Expressions.Expression.SwitchCase","System::Linq::Expressions::Expression::SwitchCase","System.Linq.Expressions.Expression.SymbolDocument","System::Linq::Expressions::Expression::SymbolDocument","System.Linq.Expressions.Expression.Throw","System::Linq::Expressions::Expression::Throw","System.Linq.Expressions.Expression.ToString","System::Linq::Expressions::Expression::ToString","System.Linq.Expressions.Expression.TryCatch","System::Linq::Expressions::Expression::TryCatch","System.Linq.Expressions.Expression.TryCatchFinally","System::Linq::Expressions::Expression::TryCatchFinally","System.Linq.Expressions.Expression.TryFault","System::Linq::Expressions::Expression::TryFault","System.Linq.Expressions.Expression.TryFinally","System::Linq::Expressions::Expression::TryFinally","System.Linq.Expressions.Expression.TryGetActionType","System::Linq::Expressions::Expression::TryGetActionType","System.Linq.Expressions.Expression.TryGetFuncType","System::Linq::Expressions::Expression::TryGetFuncType","System.Linq.Expressions.Expression.Type","System::Linq::Expressions::Expression::Type","System.Linq.Expressions.Expression.TypeAs","System::Linq::Expressions::Expression::TypeAs","System.Linq.Expressions.Expression.TypeEqual","System::Linq::Expressions::Expression::TypeEqual","System.Linq.Expressions.Expression.TypeIs","System::Linq::Expressions::Expression::TypeIs","System.Linq.Expressions.Expression.UnaryPlus","System::Linq::Expressions::Expression::UnaryPlus","System.Linq.Expressions.Expression.Unbox","System::Linq::Expressions::Expression::Unbox","System.Linq.Expressions.Expression.Variable","System::Linq::Expressions::Expression::Variable","System.Linq.Expressions.Expression.VisitChildren","System::Linq::Expressions::Expression::VisitChildren"],"dev_langs":["csharp"],"updated_at":"2017-03-16 06:20 AM","document_id":"0a36f99b-9895-1591-b6f9-05c1ae67c819","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Linq.Expressions/Expression.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Expression class | Microsoft Docs","_op_ogTitle":"Expression class","description":"Provides the base class from which the classes that represent expression tree nodes are derived. It also contains static (Shared in Visual Basic) factory methods to create the various node types. Thiâ€¦","toc_asset_id":"_splitted/System.Linq.Expressions/toc.json","toc_rel":"_splitted/System.Linq.Expressions/toc.json","source_url":"","ms.assetid":"System.Linq.Expressions.Expression","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.linq.expressions.expression","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.linq.expressions.expression","fileRelativePath":"System.Linq.Expressions.Expression.html"},"themesRelativePathToOutputRoot":"_themes/"}