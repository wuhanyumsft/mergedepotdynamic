{"content":"    \r\n    <h1 id=\"System_Security_Cryptography_TripleDESCryptoServiceProvider\">\r\n      <span class=\"lang-csharp\">TripleDESCryptoServiceProvider</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Defines a wrapper object to access the cryptographic service provider (CSP) version of the <a class=\"xref\" href=\"system.security.cryptography.tripledes\" data-linktype=\"relative-path\">TripleDES</a> algorithm. This class cannot be inherited.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic sealed class TripleDESCryptoServiceProvider : System.Security.Cryptography.TripleDES</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm\" data-linktype=\"relative-path\">SymmetricAlgorithm</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.tripledes\" data-linktype=\"relative-path\">System.Security.Cryptography.TripleDES</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l3\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">TripleDESCryptoServiceProvider</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_BlockSize\" data-linktype=\"relative-path\">BlockSize</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_BlockSizeValue\" data-linktype=\"relative-path\">BlockSizeValue</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_Clear\" data-linktype=\"relative-path\">Clear()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_CreateDecryptor\" data-linktype=\"relative-path\">CreateDecryptor()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_CreateEncryptor\" data-linktype=\"relative-path\">CreateEncryptor()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_Dispose\" data-linktype=\"relative-path\">Dispose()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_Dispose_System_Boolean_\" data-linktype=\"relative-path\">Dispose(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_FeedbackSize\" data-linktype=\"relative-path\">FeedbackSize</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_FeedbackSizeValue\" data-linktype=\"relative-path\">FeedbackSizeValue</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_IV\" data-linktype=\"relative-path\">IV</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_IVValue\" data-linktype=\"relative-path\">IVValue</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_KeySize\" data-linktype=\"relative-path\">KeySize</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_KeySizeValue\" data-linktype=\"relative-path\">KeySizeValue</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_KeyValue\" data-linktype=\"relative-path\">KeyValue</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_LegalBlockSizes\" data-linktype=\"relative-path\">LegalBlockSizes</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_LegalBlockSizesValue\" data-linktype=\"relative-path\">LegalBlockSizesValue</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_LegalKeySizes\" data-linktype=\"relative-path\">LegalKeySizes</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_LegalKeySizesValue\" data-linktype=\"relative-path\">LegalKeySizesValue</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_Mode\" data-linktype=\"relative-path\">Mode</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_ModeValue\" data-linktype=\"relative-path\">ModeValue</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_Padding\" data-linktype=\"relative-path\">Padding</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_PaddingValue\" data-linktype=\"relative-path\">PaddingValue</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_ValidKeySize_System_Int32_\" data-linktype=\"relative-path\">ValidKeySize(Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.tripledes#System_Security_Cryptography_TripleDES_Create\" data-linktype=\"relative-path\">Create()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.tripledes#System_Security_Cryptography_TripleDES_Create_System_String_\" data-linktype=\"relative-path\">Create(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.tripledes#System_Security_Cryptography_TripleDES_IsWeakKey_System_Byte___\" data-linktype=\"relative-path\">IsWeakKey(Byte[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.tripledes#System_Security_Cryptography_TripleDES_Key\" data-linktype=\"relative-path\">Key</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>This algorithm supports key lengths from 128 bits to 192 bits in increments of 64 bits.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> A newer symmetric encryption algorithm, Advanced Encryption Standard (AES), is available. Consider using the <a class=\"xref\" href=\"system.security.cryptography.aescryptoserviceprovider\" data-linktype=\"relative-path\">AesCryptoServiceProvider</a> class instead of the TripleDESCryptoServiceProvider class. Use TripleDESCryptoServiceProvider only for compatibility with legacy applications and data.</p>\n</div>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_TripleDESCryptoServiceProvider__ctor\" data-linktype=\"self-bookmark\">TripleDESCryptoServiceProvider()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.tripledescryptoserviceprovider\" data-linktype=\"relative-path\">TripleDESCryptoServiceProvider</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_TripleDESCryptoServiceProvider_CreateDecryptor_System_Byte___System_Byte___\" data-linktype=\"self-bookmark\">CreateDecryptor(Byte[],Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a symmetric <a class=\"xref\" href=\"system.security.cryptography.tripledes\" data-linktype=\"relative-path\">TripleDES</a> decryptor object with the specified key (<span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.Key*</span>) and initialization vector (<span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.IV*</span>).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_TripleDESCryptoServiceProvider_CreateEncryptor_System_Byte___System_Byte___\" data-linktype=\"self-bookmark\">CreateEncryptor(Byte[],Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a symmetric <a class=\"xref\" href=\"system.security.cryptography.tripledes\" data-linktype=\"relative-path\">TripleDES</a> encryptor object with the specified key (<span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.Key*</span>) and initialization vector (<span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.IV*</span>).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_TripleDESCryptoServiceProvider_GenerateIV\" data-linktype=\"self-bookmark\">GenerateIV()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Generates a random initialization vector (<span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.IV*</span>) to use for the algorithm.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_TripleDESCryptoServiceProvider_GenerateKey\" data-linktype=\"self-bookmark\">GenerateKey()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Generates a random <span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.Key*</span> to be used for the algorithm.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_TripleDESCryptoServiceProvider__ctor\">\r\n    \r\n            <a id=\"System_Security_Cryptography_TripleDESCryptoServiceProvider__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TripleDESCryptoServiceProvider()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.tripledescryptoserviceprovider\" data-linktype=\"relative-path\">TripleDESCryptoServiceProvider</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TripleDESCryptoServiceProvider ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.security.cryptography.tripledes\" data-linktype=\"relative-path\">TripleDES</a> cryptographic service provider is not available.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a <a class=\"xref\" href=\"system.security.cryptography.tripledescryptoserviceprovider\" data-linktype=\"relative-path\">TripleDESCryptoServiceProvider</a> object and uses it to encrypt and decrypt data in a file.  </p>\n<pre><code class=\"lang-cs\" name=\"Cryptography.3DESCSP.CreateEncryptor.File#1\">using System;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.IO;\n\nclass TrippleDESCSPSample\n{\n\n    static void Main()\n    {\n        try\n        {\n            // Create a new TripleDESCryptoServiceProvider object\n            // to generate a key and initialization vector (IV).\n            TripleDESCryptoServiceProvider tDESalg = new TripleDESCryptoServiceProvider();\n\n            // Create a string to encrypt.\n            string sData = &quot;Here is some data to encrypt.&quot;;\n            string FileName = &quot;CText.txt&quot;;\n\n            // Encrypt text to a file using the file name, key, and IV.\n            EncryptTextToFile(sData, FileName, tDESalg.Key, tDESalg.IV);\n\n            // Decrypt the text from a file using the file name, key, and IV.\n            string Final = DecryptTextFromFile(FileName, tDESalg.Key, tDESalg.IV);\n            \n            // Display the decrypted string to the console.\n            Console.WriteLine(Final);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(e.Message);\n        }\n       \n    }\n\n    public static void EncryptTextToFile(String Data, String FileName, byte[] Key, byte[] IV)\n    {\n        try\n        {\n            // Create or open the specified file.\n            FileStream fStream = File.Open(FileName,FileMode.OpenOrCreate);\n\n            // Create a CryptoStream using the FileStream \n            // and the passed key and initialization vector (IV).\n            CryptoStream cStream = new CryptoStream(fStream, \n                new TripleDESCryptoServiceProvider().CreateEncryptor(Key,IV), \n                CryptoStreamMode.Write); \n\n            // Create a StreamWriter using the CryptoStream.\n            StreamWriter sWriter = new StreamWriter(cStream);\n\n            // Write the data to the stream \n            // to encrypt it.\n            sWriter.WriteLine(Data);\n  \n            // Close the streams and\n            // close the file.\n            sWriter.Close();\n            cStream.Close();\n            fStream.Close();\n        }\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(&quot;A Cryptographic error occurred: {0}&quot;, e.Message);\n        }\n        catch(UnauthorizedAccessException  e)\n        {\n            Console.WriteLine(&quot;A file access error occurred: {0}&quot;, e.Message);\n        }\n\n    }\n\n    public static string DecryptTextFromFile(String FileName, byte[] Key, byte[] IV)\n    {\n        try\n        {\n            // Create or open the specified file. \n            FileStream fStream = File.Open(FileName, FileMode.OpenOrCreate);\n  \n            // Create a CryptoStream using the FileStream \n            // and the passed key and initialization vector (IV).\n            CryptoStream cStream = new CryptoStream(fStream, \n                new TripleDESCryptoServiceProvider().CreateDecryptor(Key,IV), \n                CryptoStreamMode.Read); \n\n            // Create a StreamReader using the CryptoStream.\n            StreamReader sReader = new StreamReader(cStream);\n\n            // Read the data from the stream \n            // to decrypt it.\n            string val = sReader.ReadLine();\n    \n            // Close the streams and\n            // close the file.\n            sReader.Close();\n            cStream.Close();\n            fStream.Close();\n\n            // Return the string. \n            return val;\n        }\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(&quot;A Cryptographic error occurred: {0}&quot;, e.Message);\n            return null;\n        }\n        catch(UnauthorizedAccessException  e)\n        {\n            Console.WriteLine(&quot;A file access error occurred: {0}&quot;, e.Message);\n            return null;\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Cryptography.3DESCSP.CreateEncryptor.File#1\">using namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Text;\nusing namespace System::IO;\nvoid EncryptTextToFile( String^ Data, String^ FileName, array&lt;Byte&gt;^Key, array&lt;Byte&gt;^IV )\n{\n   try\n   {\n      \n      // Create or open the specified file.\n      FileStream^ fStream = File::Open( FileName, FileMode::OpenOrCreate );\n      \n      // Create a CryptoStream using the FileStream \n      // and the passed key and initialization vector (IV).\n      CryptoStream^ cStream = gcnew CryptoStream( fStream,(gcnew TripleDESCryptoServiceProvider)-&gt;CreateEncryptor( Key, IV ),CryptoStreamMode::Write );\n      \n      // Create a StreamWriter using the CryptoStream.\n      StreamWriter^ sWriter = gcnew StreamWriter( cStream );\n      \n      // Write the data to the stream \n      // to encrypt it.\n      sWriter-&gt;WriteLine( Data );\n      \n      // Close the streams and\n      // close the file.\n      sWriter-&gt;Close();\n      cStream-&gt;Close();\n      fStream-&gt;Close();\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( &quot;A Cryptographic error occurred: {0}&quot;, e-&gt;Message );\n   }\n   catch ( UnauthorizedAccessException^ e ) \n   {\n      Console::WriteLine( &quot;A file access error occurred: {0}&quot;, e-&gt;Message );\n   }\n\n}\n\nString^ DecryptTextFromFile( String^ FileName, array&lt;Byte&gt;^Key, array&lt;Byte&gt;^IV )\n{\n   try\n   {\n      \n      // Create or open the specified file. \n      FileStream^ fStream = File::Open( FileName, FileMode::OpenOrCreate );\n      \n      // Create a CryptoStream using the FileStream \n      // and the passed key and initialization vector (IV).\n      CryptoStream^ cStream = gcnew CryptoStream( fStream,(gcnew TripleDESCryptoServiceProvider)-&gt;CreateDecryptor( Key, IV ),CryptoStreamMode::Read );\n      \n      // Create a StreamReader using the CryptoStream.\n      StreamReader^ sReader = gcnew StreamReader( cStream );\n      \n      // Read the data from the stream \n      // to decrypt it.\n      String^ val = sReader-&gt;ReadLine();\n      \n      // Close the streams and\n      // close the file.\n      sReader-&gt;Close();\n      cStream-&gt;Close();\n      fStream-&gt;Close();\n      \n      // Return the string. \n      return val;\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( &quot;A Cryptographic error occurred: {0}&quot;, e-&gt;Message );\n      return nullptr;\n   }\n   catch ( UnauthorizedAccessException^ e ) \n   {\n      Console::WriteLine( &quot;A file access error occurred: {0}&quot;, e-&gt;Message );\n      return nullptr;\n   }\n\n}\n\nint main()\n{\n   try\n   {\n      \n      // Create a new TripleDESCryptoServiceProvider object\n      // to generate a key and initialization vector (IV).\n      TripleDESCryptoServiceProvider^ tDESalg = gcnew TripleDESCryptoServiceProvider;\n      \n      // Create a string to encrypt.\n      String^ sData = &quot;Here is some data to encrypt.&quot;;\n      String^ FileName = &quot;CText.txt&quot;;\n      \n      // Encrypt text to a file using the file name, key, and IV.\n      EncryptTextToFile( sData, FileName, tDESalg-&gt;Key, tDESalg-&gt;IV );\n      \n      // Decrypt the text from a file using the file name, key, and IV.\n      String^ Final = DecryptTextFromFile( FileName, tDESalg-&gt;Key, tDESalg-&gt;IV );\n      \n      // Display the decrypted string to the console.\n      Console::WriteLine( Final );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.3DESCSP.CreateEncryptor.File#1\">Imports System.Security.Cryptography\nImports System.Text\nImports System.IO\n\nModule TrippleDESCSPSample\n\n    Sub Main()\n        Try\n            &#39; Create a new TripleDESCryptoServiceProvider object\n            &#39; to generate a key and initialization vector (IV).\n            Dim tDESalg As New TripleDESCryptoServiceProvider\n\n            &#39; Create a string to encrypt.\n            Dim sData As String = &quot;Here is some data to encrypt.&quot;\n            Dim FileName As String = &quot;CText.txt&quot;\n\n            &#39; Encrypt text to a file using the file name, key, and IV.\n            EncryptTextToFile(sData, FileName, tDESalg.Key, tDESalg.IV)\n\n            &#39; Decrypt the text from a file using the file name, key, and IV.\n            Dim Final As String = DecryptTextFromFile(FileName, tDESalg.Key, tDESalg.IV)\n\n            &#39; Display the decrypted string to the console.\n            Console.WriteLine(Final)\n        Catch e As Exception\n            Console.WriteLine(e.Message)\n        End Try\n    End Sub\n\n\n    Sub EncryptTextToFile(ByVal Data As String, ByVal FileName As String, ByVal Key() As Byte, ByVal IV() As Byte)\n        Try\n            &#39; Create or open the specified file.\n            Dim fStream As FileStream = File.Open(FileName, FileMode.OpenOrCreate)\n\n            &#39; Create a CryptoStream using the FileStream \n            &#39; and the passed key and initialization vector (IV).\n            Dim cStream As New CryptoStream(fStream, _\n                                            New TripleDESCryptoServiceProvider().CreateEncryptor(Key, IV), _\n                                            CryptoStreamMode.Write)\n\n            &#39; Create a StreamWriter using the CryptoStream.\n            Dim sWriter As New StreamWriter(cStream)\n\n            &#39; Write the data to the stream \n            &#39; to encrypt it.\n            sWriter.WriteLine(Data)\n\n            &#39; Close the streams and\n            &#39; close the file.\n            sWriter.Close()\n            cStream.Close()\n            fStream.Close()\n        Catch e As CryptographicException\n            Console.WriteLine(&quot;A Cryptographic error occurred: {0}&quot;, e.Message)\n        Catch e As UnauthorizedAccessException\n            Console.WriteLine(&quot;A file error occurred: {0}&quot;, e.Message)\n        End Try\n    End Sub\n\n\n    Function DecryptTextFromFile(ByVal FileName As String, ByVal Key() As Byte, ByVal IV() As Byte) As String\n        Try\n            &#39; Create or open the specified file. \n            Dim fStream As FileStream = File.Open(FileName, FileMode.OpenOrCreate)\n\n            &#39; Create a CryptoStream using the FileStream \n            &#39; and the passed key and initialization vector (IV).\n            Dim cStream As New CryptoStream(fStream, _\n                                            New TripleDESCryptoServiceProvider().CreateDecryptor(Key, IV), _\n                                            CryptoStreamMode.Read)\n\n            &#39; Create a StreamReader using the CryptoStream.\n            Dim sReader As New StreamReader(cStream)\n\n            &#39; Read the data from the stream \n            &#39; to decrypt it.\n            Dim val As String = sReader.ReadLine()\n\n            &#39; Close the streams and\n            &#39; close the file.\n            sReader.Close()\n            cStream.Close()\n            fStream.Close()\n\n            &#39; Return the string. \n            Return val\n        Catch e As CryptographicException\n            Console.WriteLine(&quot;A Cryptographic error occurred: {0}&quot;, e.Message)\n            Return Nothing\n        Catch e As UnauthorizedAccessException\n            Console.WriteLine(&quot;A file error occurred: {0}&quot;, e.Message)\n            Return Nothing\n        End Try\n    End Function\nEnd Module\n</code></pre><p> The following code example creates a <a class=\"xref\" href=\"system.security.cryptography.tripledescryptoserviceprovider\" data-linktype=\"relative-path\">TripleDESCryptoServiceProvider</a> object and uses it to encrypt and decrypt data in memory.  </p>\n<pre><code class=\"lang-vb\" name=\"Cryptography.3DESCSP.CreateEncryptor.Memory#1\">Imports System.Security.Cryptography\nImports System.Text\nImports System.IO\n\nModule TrippleDESCSPSample\n\n    Sub Main()\n        Try\n            &#39; Create a new TripleDESCryptoServiceProvider object\n            &#39; to generate a key and initialization vector (IV).\n            Dim tDESalg As New TripleDESCryptoServiceProvider\n\n            &#39; Create a string to encrypt.\n            Dim sData As String = &quot;Here is some data to encrypt.&quot;\n\n            &#39; Encrypt the string to an in-memory buffer.\n            Dim Data As Byte() = EncryptTextToMemory(sData, tDESalg.Key, tDESalg.IV)\n\n            &#39; Decrypt the buffer back to a string.\n            Dim Final As String = DecryptTextFromMemory(Data, tDESalg.Key, tDESalg.IV)\n\n            &#39; Display the decrypted string to the console.\n            Console.WriteLine(Final)\n        Catch e As Exception\n            Console.WriteLine(e.Message)\n        End Try\n    End Sub\n\n\n    Function EncryptTextToMemory(ByVal Data As String, ByVal Key() As Byte, ByVal IV() As Byte) As Byte()\n        Try\n            &#39; Create a MemoryStream.\n            Dim mStream As New MemoryStream\n\n            &#39; Create a CryptoStream using the MemoryStream \n            &#39; and the passed key and initialization vector (IV).\n            Dim cStream As New CryptoStream(mStream, _\n                                            New TripleDESCryptoServiceProvider().CreateEncryptor(Key, IV), _\n                                            CryptoStreamMode.Write)\n\n            &#39; Convert the passed string to a byte array.\n            Dim toEncrypt As Byte() = New ASCIIEncoding().GetBytes(Data)\n\n            &#39; Write the byte array to the crypto stream and flush it.\n            cStream.Write(toEncrypt, 0, toEncrypt.Length)\n            cStream.FlushFinalBlock()\n\n            &#39; Get an array of bytes from the \n            &#39; MemoryStream that holds the \n            &#39; encrypted data.\n            Dim ret As Byte() = mStream.ToArray()\n\n            &#39; Close the streams.\n            cStream.Close()\n            mStream.Close()\n\n            &#39; Return the encrypted buffer.\n            Return ret\n        Catch e As CryptographicException\n            Console.WriteLine(&quot;A Cryptographic error occurred: {0}&quot;, e.Message)\n            Return Nothing\n        End Try\n    End Function\n\n\n    Function DecryptTextFromMemory(ByVal Data() As Byte, ByVal Key() As Byte, ByVal IV() As Byte) As String\n        Try\n            &#39; Create a new MemoryStream using the passed \n            &#39; array of encrypted data.\n            Dim msDecrypt As New MemoryStream(Data)\n\n            &#39; Create a CryptoStream using the MemoryStream \n            &#39; and the passed key and initialization vector (IV).\n            Dim csDecrypt As New CryptoStream(msDecrypt, _\n                                              New TripleDESCryptoServiceProvider().CreateDecryptor(Key, IV), _\n                                              CryptoStreamMode.Read)\n\n            &#39; Create buffer to hold the decrypted data.\n            Dim fromEncrypt(Data.Length - 1) As Byte\n\n            &#39; Read the decrypted data out of the crypto stream\n            &#39; and place it into the temporary buffer.\n            csDecrypt.Read(fromEncrypt, 0, fromEncrypt.Length)\n\n            &#39;Convert the buffer into a string and return it.\n            Return New ASCIIEncoding().GetString(fromEncrypt)\n        Catch e As CryptographicException\n            Console.WriteLine(&quot;A Cryptographic error occurred: {0}&quot;, e.Message)\n            Return Nothing\n        End Try\n    End Function\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"Cryptography.3DESCSP.CreateEncryptor.Memory#1\">using System;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.IO;\n\nclass TrippleDESCSPSample\n{\n\n    static void Main()\n    {\n        try\n        {\n            // Create a new TripleDESCryptoServiceProvider object\n            // to generate a key and initialization vector (IV).\n            TripleDESCryptoServiceProvider tDESalg = new TripleDESCryptoServiceProvider();\n\n            // Create a string to encrypt.\n            string sData = &quot;Here is some data to encrypt.&quot;;\n\n            // Encrypt the string to an in-memory buffer.\n            byte[] Data = EncryptTextToMemory(sData, tDESalg.Key, tDESalg.IV);\n\n            // Decrypt the buffer back to a string.\n            string Final = DecryptTextFromMemory(Data, tDESalg.Key, tDESalg.IV);\n            \n            // Display the decrypted string to the console.\n            Console.WriteLine(Final);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(e.Message);\n        }\n       \n    }\n\n    public static byte[] EncryptTextToMemory(string Data,  byte[] Key, byte[] IV)\n    {\n        try\n        {\n            // Create a MemoryStream.\n            MemoryStream mStream = new MemoryStream();\n\n            // Create a CryptoStream using the MemoryStream \n            // and the passed key and initialization vector (IV).\n            CryptoStream cStream = new CryptoStream(mStream, \n                new TripleDESCryptoServiceProvider().CreateEncryptor(Key, IV), \n                CryptoStreamMode.Write);\n\n            // Convert the passed string to a byte array.\n            byte[] toEncrypt = new ASCIIEncoding().GetBytes(Data);\n\n            // Write the byte array to the crypto stream and flush it.\n            cStream.Write(toEncrypt, 0, toEncrypt.Length);\n            cStream.FlushFinalBlock();\n        \n            // Get an array of bytes from the \n            // MemoryStream that holds the \n            // encrypted data.\n            byte[] ret = mStream.ToArray();\n\n            // Close the streams.\n            cStream.Close();\n            mStream.Close();\n\n            // Return the encrypted buffer.\n            return ret;\n        }\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(&quot;A Cryptographic error occurred: {0}&quot;, e.Message);\n            return null;\n        }\n\n    }\n\n    public static string DecryptTextFromMemory(byte[] Data,  byte[] Key, byte[] IV)\n    {\n        try\n        {\n            // Create a new MemoryStream using the passed \n            // array of encrypted data.\n            MemoryStream msDecrypt = new MemoryStream(Data);\n\n            // Create a CryptoStream using the MemoryStream \n            // and the passed key and initialization vector (IV).\n            CryptoStream csDecrypt = new CryptoStream(msDecrypt, \n                new TripleDESCryptoServiceProvider().CreateDecryptor(Key, IV), \n                CryptoStreamMode.Read);\n\n            // Create buffer to hold the decrypted data.\n            byte[] fromEncrypt = new byte[Data.Length];\n\n            // Read the decrypted data out of the crypto stream\n            // and place it into the temporary buffer.\n            csDecrypt.Read(fromEncrypt, 0, fromEncrypt.Length);\n\n            //Convert the buffer into a string and return it.\n            return new ASCIIEncoding().GetString(fromEncrypt);\n        }\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(&quot;A Cryptographic error occurred: {0}&quot;, e.Message);\n            return null;\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Cryptography.3DESCSP.CreateEncryptor.Memory#1\">using namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Text;\nusing namespace System::IO;\narray&lt;Byte&gt;^ EncryptTextToMemory( String^ Data, array&lt;Byte&gt;^Key, array&lt;Byte&gt;^IV )\n{\n   try\n   {\n      \n      // Create a MemoryStream.\n      MemoryStream^ mStream = gcnew MemoryStream;\n      \n      // Create a CryptoStream using the MemoryStream \n      // and the passed key and initialization vector (IV).\n      CryptoStream^ cStream = gcnew CryptoStream( mStream,(gcnew TripleDESCryptoServiceProvider)-&gt;CreateEncryptor( Key, IV ),CryptoStreamMode::Write );\n      \n      // Convert the passed string to a byte array.\n      array&lt;Byte&gt;^toEncrypt = (gcnew ASCIIEncoding)-&gt;GetBytes( Data );\n      \n      // Write the byte array to the crypto stream and flush it.\n      cStream-&gt;Write( toEncrypt, 0, toEncrypt-&gt;Length );\n      cStream-&gt;FlushFinalBlock();\n      \n      // Get an array of bytes from the \n      // MemoryStream that holds the \n      // encrypted data.\n      array&lt;Byte&gt;^ret = mStream-&gt;ToArray();\n      \n      // Close the streams.\n      cStream-&gt;Close();\n      mStream-&gt;Close();\n      \n      // Return the encrypted buffer.\n      return ret;\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( &quot;A Cryptographic error occurred: {0}&quot;, e-&gt;Message );\n      return nullptr;\n   }\n\n}\n\nString^ DecryptTextFromMemory( array&lt;Byte&gt;^Data, array&lt;Byte&gt;^Key, array&lt;Byte&gt;^IV )\n{\n   try\n   {\n      \n      // Create a new MemoryStream using the passed \n      // array of encrypted data.\n      MemoryStream^ msDecrypt = gcnew MemoryStream( Data );\n      \n      // Create a CryptoStream using the MemoryStream \n      // and the passed key and initialization vector (IV).\n      CryptoStream^ csDecrypt = gcnew CryptoStream( msDecrypt,(gcnew TripleDESCryptoServiceProvider)-&gt;CreateDecryptor( Key, IV ),CryptoStreamMode::Read );\n      \n      // Create buffer to hold the decrypted data.\n      array&lt;Byte&gt;^fromEncrypt = gcnew array&lt;Byte&gt;(Data-&gt;Length);\n      \n      // Read the decrypted data out of the crypto stream\n      // and place it into the temporary buffer.\n      csDecrypt-&gt;Read( fromEncrypt, 0, fromEncrypt-&gt;Length );\n      \n      //Convert the buffer into a string and return it.\n      return (gcnew ASCIIEncoding)-&gt;GetString( fromEncrypt );\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( &quot;A Cryptographic error occurred: {0}&quot;, e-&gt;Message );\n      return nullptr;\n   }\n\n}\n\nint main()\n{\n   try\n   {\n      \n      // Create a new TripleDESCryptoServiceProvider object\n      // to generate a key and initialization vector (IV).\n      TripleDESCryptoServiceProvider^ tDESalg = gcnew TripleDESCryptoServiceProvider;\n      \n      // Create a string to encrypt.\n      String^ sData = &quot;Here is some data to encrypt.&quot;;\n      \n      // Encrypt the string to an in-memory buffer.\n      array&lt;Byte&gt;^Data = EncryptTextToMemory( sData, tDESalg-&gt;Key, tDESalg-&gt;IV );\n      \n      // Decrypt the buffer back to a string.\n      String^ Final = DecryptTextFromMemory( Data, tDESalg-&gt;Key, tDESalg-&gt;IV );\n      \n      // Display the decrypted string to the console.\n      Console::WriteLine( Final );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_TripleDESCryptoServiceProvider_CreateDecryptor_System_Byte___System_Byte___\">\r\n    \r\n            <a id=\"System_Security_Cryptography_TripleDESCryptoServiceProvider_CreateDecryptor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateDecryptor(Byte[],Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a symmetric <a class=\"xref\" href=\"system.security.cryptography.tripledes\" data-linktype=\"relative-path\">TripleDES</a> decryptor object with the specified key (<span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.Key*</span>) and initialization vector (<span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.IV*</span>).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Security.Cryptography.ICryptoTransform CreateDecryptor (byte[] rgbKey, byte[] rgbIV);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgbKey</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The secret key to use for the symmetric algorithm.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgbIV</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The initialization vector to use for the symmetric algorithm.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.icryptotransform\" data-linktype=\"relative-path\">ICryptoTransform</a></div>\r\n                  </div>\r\n                  <p>A symmetric <a class=\"xref\" href=\"system.security.cryptography.tripledes\" data-linktype=\"relative-path\">TripleDES</a> decryptor object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The value of the <span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.Mode*</span> property is <a class=\"xref\" href=\"system.security.cryptography.ciphermode\" data-linktype=\"relative-path\">CipherMode</a>.  </p>\n<p> -or-  </p>\n<p> The value of the <span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.Mode*</span> property is <a class=\"xref\" href=\"system.security.cryptography.ciphermode\" data-linktype=\"relative-path\">CipherMode</a> and the value of the <span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.FeedbackSize*</span> property is not 8.  </p>\n<p> -or-  </p>\n<p> An invalid key size was used.  </p>\n<p> -or-  </p>\n<p> The algorithm key size was not available.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method decrypts an encrypted message created using the <a class=\"xref\" href=\"system.security.cryptography.tripledescryptoserviceprovider#System_Security_Cryptography_TripleDESCryptoServiceProvider_CreateEncryptor_\" data-linktype=\"relative-path\">CreateEncryptor</a> overload with the same parameters.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a <a class=\"xref\" href=\"system.security.cryptography.tripledescryptoserviceprovider\" data-linktype=\"relative-path\">TripleDESCryptoServiceProvider</a> object and uses it to encrypt and decrypt data in a file.  </p>\n<pre><code class=\"lang-cs\" name=\"Cryptography.3DESCSP.CreateEncryptor.File#1\">using System;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.IO;\n\nclass TrippleDESCSPSample\n{\n\n    static void Main()\n    {\n        try\n        {\n            // Create a new TripleDESCryptoServiceProvider object\n            // to generate a key and initialization vector (IV).\n            TripleDESCryptoServiceProvider tDESalg = new TripleDESCryptoServiceProvider();\n\n            // Create a string to encrypt.\n            string sData = &quot;Here is some data to encrypt.&quot;;\n            string FileName = &quot;CText.txt&quot;;\n\n            // Encrypt text to a file using the file name, key, and IV.\n            EncryptTextToFile(sData, FileName, tDESalg.Key, tDESalg.IV);\n\n            // Decrypt the text from a file using the file name, key, and IV.\n            string Final = DecryptTextFromFile(FileName, tDESalg.Key, tDESalg.IV);\n            \n            // Display the decrypted string to the console.\n            Console.WriteLine(Final);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(e.Message);\n        }\n       \n    }\n\n    public static void EncryptTextToFile(String Data, String FileName, byte[] Key, byte[] IV)\n    {\n        try\n        {\n            // Create or open the specified file.\n            FileStream fStream = File.Open(FileName,FileMode.OpenOrCreate);\n\n            // Create a CryptoStream using the FileStream \n            // and the passed key and initialization vector (IV).\n            CryptoStream cStream = new CryptoStream(fStream, \n                new TripleDESCryptoServiceProvider().CreateEncryptor(Key,IV), \n                CryptoStreamMode.Write); \n\n            // Create a StreamWriter using the CryptoStream.\n            StreamWriter sWriter = new StreamWriter(cStream);\n\n            // Write the data to the stream \n            // to encrypt it.\n            sWriter.WriteLine(Data);\n  \n            // Close the streams and\n            // close the file.\n            sWriter.Close();\n            cStream.Close();\n            fStream.Close();\n        }\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(&quot;A Cryptographic error occurred: {0}&quot;, e.Message);\n        }\n        catch(UnauthorizedAccessException  e)\n        {\n            Console.WriteLine(&quot;A file access error occurred: {0}&quot;, e.Message);\n        }\n\n    }\n\n    public static string DecryptTextFromFile(String FileName, byte[] Key, byte[] IV)\n    {\n        try\n        {\n            // Create or open the specified file. \n            FileStream fStream = File.Open(FileName, FileMode.OpenOrCreate);\n  \n            // Create a CryptoStream using the FileStream \n            // and the passed key and initialization vector (IV).\n            CryptoStream cStream = new CryptoStream(fStream, \n                new TripleDESCryptoServiceProvider().CreateDecryptor(Key,IV), \n                CryptoStreamMode.Read); \n\n            // Create a StreamReader using the CryptoStream.\n            StreamReader sReader = new StreamReader(cStream);\n\n            // Read the data from the stream \n            // to decrypt it.\n            string val = sReader.ReadLine();\n    \n            // Close the streams and\n            // close the file.\n            sReader.Close();\n            cStream.Close();\n            fStream.Close();\n\n            // Return the string. \n            return val;\n        }\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(&quot;A Cryptographic error occurred: {0}&quot;, e.Message);\n            return null;\n        }\n        catch(UnauthorizedAccessException  e)\n        {\n            Console.WriteLine(&quot;A file access error occurred: {0}&quot;, e.Message);\n            return null;\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Cryptography.3DESCSP.CreateEncryptor.File#1\">using namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Text;\nusing namespace System::IO;\nvoid EncryptTextToFile( String^ Data, String^ FileName, array&lt;Byte&gt;^Key, array&lt;Byte&gt;^IV )\n{\n   try\n   {\n      \n      // Create or open the specified file.\n      FileStream^ fStream = File::Open( FileName, FileMode::OpenOrCreate );\n      \n      // Create a CryptoStream using the FileStream \n      // and the passed key and initialization vector (IV).\n      CryptoStream^ cStream = gcnew CryptoStream( fStream,(gcnew TripleDESCryptoServiceProvider)-&gt;CreateEncryptor( Key, IV ),CryptoStreamMode::Write );\n      \n      // Create a StreamWriter using the CryptoStream.\n      StreamWriter^ sWriter = gcnew StreamWriter( cStream );\n      \n      // Write the data to the stream \n      // to encrypt it.\n      sWriter-&gt;WriteLine( Data );\n      \n      // Close the streams and\n      // close the file.\n      sWriter-&gt;Close();\n      cStream-&gt;Close();\n      fStream-&gt;Close();\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( &quot;A Cryptographic error occurred: {0}&quot;, e-&gt;Message );\n   }\n   catch ( UnauthorizedAccessException^ e ) \n   {\n      Console::WriteLine( &quot;A file access error occurred: {0}&quot;, e-&gt;Message );\n   }\n\n}\n\nString^ DecryptTextFromFile( String^ FileName, array&lt;Byte&gt;^Key, array&lt;Byte&gt;^IV )\n{\n   try\n   {\n      \n      // Create or open the specified file. \n      FileStream^ fStream = File::Open( FileName, FileMode::OpenOrCreate );\n      \n      // Create a CryptoStream using the FileStream \n      // and the passed key and initialization vector (IV).\n      CryptoStream^ cStream = gcnew CryptoStream( fStream,(gcnew TripleDESCryptoServiceProvider)-&gt;CreateDecryptor( Key, IV ),CryptoStreamMode::Read );\n      \n      // Create a StreamReader using the CryptoStream.\n      StreamReader^ sReader = gcnew StreamReader( cStream );\n      \n      // Read the data from the stream \n      // to decrypt it.\n      String^ val = sReader-&gt;ReadLine();\n      \n      // Close the streams and\n      // close the file.\n      sReader-&gt;Close();\n      cStream-&gt;Close();\n      fStream-&gt;Close();\n      \n      // Return the string. \n      return val;\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( &quot;A Cryptographic error occurred: {0}&quot;, e-&gt;Message );\n      return nullptr;\n   }\n   catch ( UnauthorizedAccessException^ e ) \n   {\n      Console::WriteLine( &quot;A file access error occurred: {0}&quot;, e-&gt;Message );\n      return nullptr;\n   }\n\n}\n\nint main()\n{\n   try\n   {\n      \n      // Create a new TripleDESCryptoServiceProvider object\n      // to generate a key and initialization vector (IV).\n      TripleDESCryptoServiceProvider^ tDESalg = gcnew TripleDESCryptoServiceProvider;\n      \n      // Create a string to encrypt.\n      String^ sData = &quot;Here is some data to encrypt.&quot;;\n      String^ FileName = &quot;CText.txt&quot;;\n      \n      // Encrypt text to a file using the file name, key, and IV.\n      EncryptTextToFile( sData, FileName, tDESalg-&gt;Key, tDESalg-&gt;IV );\n      \n      // Decrypt the text from a file using the file name, key, and IV.\n      String^ Final = DecryptTextFromFile( FileName, tDESalg-&gt;Key, tDESalg-&gt;IV );\n      \n      // Display the decrypted string to the console.\n      Console::WriteLine( Final );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.3DESCSP.CreateEncryptor.File#1\">Imports System.Security.Cryptography\nImports System.Text\nImports System.IO\n\nModule TrippleDESCSPSample\n\n    Sub Main()\n        Try\n            &#39; Create a new TripleDESCryptoServiceProvider object\n            &#39; to generate a key and initialization vector (IV).\n            Dim tDESalg As New TripleDESCryptoServiceProvider\n\n            &#39; Create a string to encrypt.\n            Dim sData As String = &quot;Here is some data to encrypt.&quot;\n            Dim FileName As String = &quot;CText.txt&quot;\n\n            &#39; Encrypt text to a file using the file name, key, and IV.\n            EncryptTextToFile(sData, FileName, tDESalg.Key, tDESalg.IV)\n\n            &#39; Decrypt the text from a file using the file name, key, and IV.\n            Dim Final As String = DecryptTextFromFile(FileName, tDESalg.Key, tDESalg.IV)\n\n            &#39; Display the decrypted string to the console.\n            Console.WriteLine(Final)\n        Catch e As Exception\n            Console.WriteLine(e.Message)\n        End Try\n    End Sub\n\n\n    Sub EncryptTextToFile(ByVal Data As String, ByVal FileName As String, ByVal Key() As Byte, ByVal IV() As Byte)\n        Try\n            &#39; Create or open the specified file.\n            Dim fStream As FileStream = File.Open(FileName, FileMode.OpenOrCreate)\n\n            &#39; Create a CryptoStream using the FileStream \n            &#39; and the passed key and initialization vector (IV).\n            Dim cStream As New CryptoStream(fStream, _\n                                            New TripleDESCryptoServiceProvider().CreateEncryptor(Key, IV), _\n                                            CryptoStreamMode.Write)\n\n            &#39; Create a StreamWriter using the CryptoStream.\n            Dim sWriter As New StreamWriter(cStream)\n\n            &#39; Write the data to the stream \n            &#39; to encrypt it.\n            sWriter.WriteLine(Data)\n\n            &#39; Close the streams and\n            &#39; close the file.\n            sWriter.Close()\n            cStream.Close()\n            fStream.Close()\n        Catch e As CryptographicException\n            Console.WriteLine(&quot;A Cryptographic error occurred: {0}&quot;, e.Message)\n        Catch e As UnauthorizedAccessException\n            Console.WriteLine(&quot;A file error occurred: {0}&quot;, e.Message)\n        End Try\n    End Sub\n\n\n    Function DecryptTextFromFile(ByVal FileName As String, ByVal Key() As Byte, ByVal IV() As Byte) As String\n        Try\n            &#39; Create or open the specified file. \n            Dim fStream As FileStream = File.Open(FileName, FileMode.OpenOrCreate)\n\n            &#39; Create a CryptoStream using the FileStream \n            &#39; and the passed key and initialization vector (IV).\n            Dim cStream As New CryptoStream(fStream, _\n                                            New TripleDESCryptoServiceProvider().CreateDecryptor(Key, IV), _\n                                            CryptoStreamMode.Read)\n\n            &#39; Create a StreamReader using the CryptoStream.\n            Dim sReader As New StreamReader(cStream)\n\n            &#39; Read the data from the stream \n            &#39; to decrypt it.\n            Dim val As String = sReader.ReadLine()\n\n            &#39; Close the streams and\n            &#39; close the file.\n            sReader.Close()\n            cStream.Close()\n            fStream.Close()\n\n            &#39; Return the string. \n            Return val\n        Catch e As CryptographicException\n            Console.WriteLine(&quot;A Cryptographic error occurred: {0}&quot;, e.Message)\n            Return Nothing\n        Catch e As UnauthorizedAccessException\n            Console.WriteLine(&quot;A file error occurred: {0}&quot;, e.Message)\n            Return Nothing\n        End Try\n    End Function\nEnd Module\n</code></pre><p> The following code example creates a <a class=\"xref\" href=\"system.security.cryptography.tripledescryptoserviceprovider\" data-linktype=\"relative-path\">TripleDESCryptoServiceProvider</a> object and uses it to encrypt and decrypt data in memory.  </p>\n<pre><code class=\"lang-vb\" name=\"Cryptography.3DESCSP.CreateEncryptor.Memory#1\">Imports System.Security.Cryptography\nImports System.Text\nImports System.IO\n\nModule TrippleDESCSPSample\n\n    Sub Main()\n        Try\n            &#39; Create a new TripleDESCryptoServiceProvider object\n            &#39; to generate a key and initialization vector (IV).\n            Dim tDESalg As New TripleDESCryptoServiceProvider\n\n            &#39; Create a string to encrypt.\n            Dim sData As String = &quot;Here is some data to encrypt.&quot;\n\n            &#39; Encrypt the string to an in-memory buffer.\n            Dim Data As Byte() = EncryptTextToMemory(sData, tDESalg.Key, tDESalg.IV)\n\n            &#39; Decrypt the buffer back to a string.\n            Dim Final As String = DecryptTextFromMemory(Data, tDESalg.Key, tDESalg.IV)\n\n            &#39; Display the decrypted string to the console.\n            Console.WriteLine(Final)\n        Catch e As Exception\n            Console.WriteLine(e.Message)\n        End Try\n    End Sub\n\n\n    Function EncryptTextToMemory(ByVal Data As String, ByVal Key() As Byte, ByVal IV() As Byte) As Byte()\n        Try\n            &#39; Create a MemoryStream.\n            Dim mStream As New MemoryStream\n\n            &#39; Create a CryptoStream using the MemoryStream \n            &#39; and the passed key and initialization vector (IV).\n            Dim cStream As New CryptoStream(mStream, _\n                                            New TripleDESCryptoServiceProvider().CreateEncryptor(Key, IV), _\n                                            CryptoStreamMode.Write)\n\n            &#39; Convert the passed string to a byte array.\n            Dim toEncrypt As Byte() = New ASCIIEncoding().GetBytes(Data)\n\n            &#39; Write the byte array to the crypto stream and flush it.\n            cStream.Write(toEncrypt, 0, toEncrypt.Length)\n            cStream.FlushFinalBlock()\n\n            &#39; Get an array of bytes from the \n            &#39; MemoryStream that holds the \n            &#39; encrypted data.\n            Dim ret As Byte() = mStream.ToArray()\n\n            &#39; Close the streams.\n            cStream.Close()\n            mStream.Close()\n\n            &#39; Return the encrypted buffer.\n            Return ret\n        Catch e As CryptographicException\n            Console.WriteLine(&quot;A Cryptographic error occurred: {0}&quot;, e.Message)\n            Return Nothing\n        End Try\n    End Function\n\n\n    Function DecryptTextFromMemory(ByVal Data() As Byte, ByVal Key() As Byte, ByVal IV() As Byte) As String\n        Try\n            &#39; Create a new MemoryStream using the passed \n            &#39; array of encrypted data.\n            Dim msDecrypt As New MemoryStream(Data)\n\n            &#39; Create a CryptoStream using the MemoryStream \n            &#39; and the passed key and initialization vector (IV).\n            Dim csDecrypt As New CryptoStream(msDecrypt, _\n                                              New TripleDESCryptoServiceProvider().CreateDecryptor(Key, IV), _\n                                              CryptoStreamMode.Read)\n\n            &#39; Create buffer to hold the decrypted data.\n            Dim fromEncrypt(Data.Length - 1) As Byte\n\n            &#39; Read the decrypted data out of the crypto stream\n            &#39; and place it into the temporary buffer.\n            csDecrypt.Read(fromEncrypt, 0, fromEncrypt.Length)\n\n            &#39;Convert the buffer into a string and return it.\n            Return New ASCIIEncoding().GetString(fromEncrypt)\n        Catch e As CryptographicException\n            Console.WriteLine(&quot;A Cryptographic error occurred: {0}&quot;, e.Message)\n            Return Nothing\n        End Try\n    End Function\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"Cryptography.3DESCSP.CreateEncryptor.Memory#1\">using System;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.IO;\n\nclass TrippleDESCSPSample\n{\n\n    static void Main()\n    {\n        try\n        {\n            // Create a new TripleDESCryptoServiceProvider object\n            // to generate a key and initialization vector (IV).\n            TripleDESCryptoServiceProvider tDESalg = new TripleDESCryptoServiceProvider();\n\n            // Create a string to encrypt.\n            string sData = &quot;Here is some data to encrypt.&quot;;\n\n            // Encrypt the string to an in-memory buffer.\n            byte[] Data = EncryptTextToMemory(sData, tDESalg.Key, tDESalg.IV);\n\n            // Decrypt the buffer back to a string.\n            string Final = DecryptTextFromMemory(Data, tDESalg.Key, tDESalg.IV);\n            \n            // Display the decrypted string to the console.\n            Console.WriteLine(Final);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(e.Message);\n        }\n       \n    }\n\n    public static byte[] EncryptTextToMemory(string Data,  byte[] Key, byte[] IV)\n    {\n        try\n        {\n            // Create a MemoryStream.\n            MemoryStream mStream = new MemoryStream();\n\n            // Create a CryptoStream using the MemoryStream \n            // and the passed key and initialization vector (IV).\n            CryptoStream cStream = new CryptoStream(mStream, \n                new TripleDESCryptoServiceProvider().CreateEncryptor(Key, IV), \n                CryptoStreamMode.Write);\n\n            // Convert the passed string to a byte array.\n            byte[] toEncrypt = new ASCIIEncoding().GetBytes(Data);\n\n            // Write the byte array to the crypto stream and flush it.\n            cStream.Write(toEncrypt, 0, toEncrypt.Length);\n            cStream.FlushFinalBlock();\n        \n            // Get an array of bytes from the \n            // MemoryStream that holds the \n            // encrypted data.\n            byte[] ret = mStream.ToArray();\n\n            // Close the streams.\n            cStream.Close();\n            mStream.Close();\n\n            // Return the encrypted buffer.\n            return ret;\n        }\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(&quot;A Cryptographic error occurred: {0}&quot;, e.Message);\n            return null;\n        }\n\n    }\n\n    public static string DecryptTextFromMemory(byte[] Data,  byte[] Key, byte[] IV)\n    {\n        try\n        {\n            // Create a new MemoryStream using the passed \n            // array of encrypted data.\n            MemoryStream msDecrypt = new MemoryStream(Data);\n\n            // Create a CryptoStream using the MemoryStream \n            // and the passed key and initialization vector (IV).\n            CryptoStream csDecrypt = new CryptoStream(msDecrypt, \n                new TripleDESCryptoServiceProvider().CreateDecryptor(Key, IV), \n                CryptoStreamMode.Read);\n\n            // Create buffer to hold the decrypted data.\n            byte[] fromEncrypt = new byte[Data.Length];\n\n            // Read the decrypted data out of the crypto stream\n            // and place it into the temporary buffer.\n            csDecrypt.Read(fromEncrypt, 0, fromEncrypt.Length);\n\n            //Convert the buffer into a string and return it.\n            return new ASCIIEncoding().GetString(fromEncrypt);\n        }\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(&quot;A Cryptographic error occurred: {0}&quot;, e.Message);\n            return null;\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Cryptography.3DESCSP.CreateEncryptor.Memory#1\">using namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Text;\nusing namespace System::IO;\narray&lt;Byte&gt;^ EncryptTextToMemory( String^ Data, array&lt;Byte&gt;^Key, array&lt;Byte&gt;^IV )\n{\n   try\n   {\n      \n      // Create a MemoryStream.\n      MemoryStream^ mStream = gcnew MemoryStream;\n      \n      // Create a CryptoStream using the MemoryStream \n      // and the passed key and initialization vector (IV).\n      CryptoStream^ cStream = gcnew CryptoStream( mStream,(gcnew TripleDESCryptoServiceProvider)-&gt;CreateEncryptor( Key, IV ),CryptoStreamMode::Write );\n      \n      // Convert the passed string to a byte array.\n      array&lt;Byte&gt;^toEncrypt = (gcnew ASCIIEncoding)-&gt;GetBytes( Data );\n      \n      // Write the byte array to the crypto stream and flush it.\n      cStream-&gt;Write( toEncrypt, 0, toEncrypt-&gt;Length );\n      cStream-&gt;FlushFinalBlock();\n      \n      // Get an array of bytes from the \n      // MemoryStream that holds the \n      // encrypted data.\n      array&lt;Byte&gt;^ret = mStream-&gt;ToArray();\n      \n      // Close the streams.\n      cStream-&gt;Close();\n      mStream-&gt;Close();\n      \n      // Return the encrypted buffer.\n      return ret;\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( &quot;A Cryptographic error occurred: {0}&quot;, e-&gt;Message );\n      return nullptr;\n   }\n\n}\n\nString^ DecryptTextFromMemory( array&lt;Byte&gt;^Data, array&lt;Byte&gt;^Key, array&lt;Byte&gt;^IV )\n{\n   try\n   {\n      \n      // Create a new MemoryStream using the passed \n      // array of encrypted data.\n      MemoryStream^ msDecrypt = gcnew MemoryStream( Data );\n      \n      // Create a CryptoStream using the MemoryStream \n      // and the passed key and initialization vector (IV).\n      CryptoStream^ csDecrypt = gcnew CryptoStream( msDecrypt,(gcnew TripleDESCryptoServiceProvider)-&gt;CreateDecryptor( Key, IV ),CryptoStreamMode::Read );\n      \n      // Create buffer to hold the decrypted data.\n      array&lt;Byte&gt;^fromEncrypt = gcnew array&lt;Byte&gt;(Data-&gt;Length);\n      \n      // Read the decrypted data out of the crypto stream\n      // and place it into the temporary buffer.\n      csDecrypt-&gt;Read( fromEncrypt, 0, fromEncrypt-&gt;Length );\n      \n      //Convert the buffer into a string and return it.\n      return (gcnew ASCIIEncoding)-&gt;GetString( fromEncrypt );\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( &quot;A Cryptographic error occurred: {0}&quot;, e-&gt;Message );\n      return nullptr;\n   }\n\n}\n\nint main()\n{\n   try\n   {\n      \n      // Create a new TripleDESCryptoServiceProvider object\n      // to generate a key and initialization vector (IV).\n      TripleDESCryptoServiceProvider^ tDESalg = gcnew TripleDESCryptoServiceProvider;\n      \n      // Create a string to encrypt.\n      String^ sData = &quot;Here is some data to encrypt.&quot;;\n      \n      // Encrypt the string to an in-memory buffer.\n      array&lt;Byte&gt;^Data = EncryptTextToMemory( sData, tDESalg-&gt;Key, tDESalg-&gt;IV );\n      \n      // Decrypt the buffer back to a string.\n      String^ Final = DecryptTextFromMemory( Data, tDESalg-&gt;Key, tDESalg-&gt;IV );\n      \n      // Display the decrypted string to the console.\n      Console::WriteLine( Final );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_TripleDESCryptoServiceProvider_CreateEncryptor_System_Byte___System_Byte___\">\r\n    \r\n            <a id=\"System_Security_Cryptography_TripleDESCryptoServiceProvider_CreateEncryptor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateEncryptor(Byte[],Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a symmetric <a class=\"xref\" href=\"system.security.cryptography.tripledes\" data-linktype=\"relative-path\">TripleDES</a> encryptor object with the specified key (<span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.Key*</span>) and initialization vector (<span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.IV*</span>).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Security.Cryptography.ICryptoTransform CreateEncryptor (byte[] rgbKey, byte[] rgbIV);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgbKey</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The secret key to use for the symmetric algorithm.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgbIV</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The initialization vector to use for the symmetric algorithm.  </p>\n <div class=\"alert NOTE\"><br> The initialization vector must be 8 bytes long. If it is longer than 8 bytes, it is truncated and an exception is not thrown. Before you call CreateEncryptor, check the length of the initialization vector and throw an exception if it is too long.<br>\n</div>\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.icryptotransform\" data-linktype=\"relative-path\">ICryptoTransform</a></div>\r\n                  </div>\r\n                  <p>A symmetric <a class=\"xref\" href=\"system.security.cryptography.tripledes\" data-linktype=\"relative-path\">TripleDES</a> encryptor object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The value of the <span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.Mode*</span> property is <a class=\"xref\" href=\"system.security.cryptography.ciphermode\" data-linktype=\"relative-path\">CipherMode</a>.  </p>\n<p> -or-  </p>\n<p> The value of the <span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.Mode*</span> property is <a class=\"xref\" href=\"system.security.cryptography.ciphermode\" data-linktype=\"relative-path\">CipherMode</a> and the value of the <span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.FeedbackSize*</span> property is not 8.  </p>\n<p> -or-  </p>\n<p> An invalid key size was used.  </p>\n<p> -or-  </p>\n<p> The algorithm key size was not available.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.security.cryptography.tripledescryptoserviceprovider#System_Security_Cryptography_TripleDESCryptoServiceProvider_CreateDecryptor_\" data-linktype=\"relative-path\">CreateDecryptor</a> overload with the same parameters to decrypt the result of this method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a <a class=\"xref\" href=\"system.security.cryptography.tripledescryptoserviceprovider\" data-linktype=\"relative-path\">TripleDESCryptoServiceProvider</a> object and uses it to encrypt and decrypt data in a file.  </p>\n<pre><code class=\"lang-cs\" name=\"Cryptography.3DESCSP.CreateEncryptor.File#1\">using System;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.IO;\n\nclass TrippleDESCSPSample\n{\n\n    static void Main()\n    {\n        try\n        {\n            // Create a new TripleDESCryptoServiceProvider object\n            // to generate a key and initialization vector (IV).\n            TripleDESCryptoServiceProvider tDESalg = new TripleDESCryptoServiceProvider();\n\n            // Create a string to encrypt.\n            string sData = &quot;Here is some data to encrypt.&quot;;\n            string FileName = &quot;CText.txt&quot;;\n\n            // Encrypt text to a file using the file name, key, and IV.\n            EncryptTextToFile(sData, FileName, tDESalg.Key, tDESalg.IV);\n\n            // Decrypt the text from a file using the file name, key, and IV.\n            string Final = DecryptTextFromFile(FileName, tDESalg.Key, tDESalg.IV);\n            \n            // Display the decrypted string to the console.\n            Console.WriteLine(Final);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(e.Message);\n        }\n       \n    }\n\n    public static void EncryptTextToFile(String Data, String FileName, byte[] Key, byte[] IV)\n    {\n        try\n        {\n            // Create or open the specified file.\n            FileStream fStream = File.Open(FileName,FileMode.OpenOrCreate);\n\n            // Create a CryptoStream using the FileStream \n            // and the passed key and initialization vector (IV).\n            CryptoStream cStream = new CryptoStream(fStream, \n                new TripleDESCryptoServiceProvider().CreateEncryptor(Key,IV), \n                CryptoStreamMode.Write); \n\n            // Create a StreamWriter using the CryptoStream.\n            StreamWriter sWriter = new StreamWriter(cStream);\n\n            // Write the data to the stream \n            // to encrypt it.\n            sWriter.WriteLine(Data);\n  \n            // Close the streams and\n            // close the file.\n            sWriter.Close();\n            cStream.Close();\n            fStream.Close();\n        }\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(&quot;A Cryptographic error occurred: {0}&quot;, e.Message);\n        }\n        catch(UnauthorizedAccessException  e)\n        {\n            Console.WriteLine(&quot;A file access error occurred: {0}&quot;, e.Message);\n        }\n\n    }\n\n    public static string DecryptTextFromFile(String FileName, byte[] Key, byte[] IV)\n    {\n        try\n        {\n            // Create or open the specified file. \n            FileStream fStream = File.Open(FileName, FileMode.OpenOrCreate);\n  \n            // Create a CryptoStream using the FileStream \n            // and the passed key and initialization vector (IV).\n            CryptoStream cStream = new CryptoStream(fStream, \n                new TripleDESCryptoServiceProvider().CreateDecryptor(Key,IV), \n                CryptoStreamMode.Read); \n\n            // Create a StreamReader using the CryptoStream.\n            StreamReader sReader = new StreamReader(cStream);\n\n            // Read the data from the stream \n            // to decrypt it.\n            string val = sReader.ReadLine();\n    \n            // Close the streams and\n            // close the file.\n            sReader.Close();\n            cStream.Close();\n            fStream.Close();\n\n            // Return the string. \n            return val;\n        }\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(&quot;A Cryptographic error occurred: {0}&quot;, e.Message);\n            return null;\n        }\n        catch(UnauthorizedAccessException  e)\n        {\n            Console.WriteLine(&quot;A file access error occurred: {0}&quot;, e.Message);\n            return null;\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Cryptography.3DESCSP.CreateEncryptor.File#1\">using namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Text;\nusing namespace System::IO;\nvoid EncryptTextToFile( String^ Data, String^ FileName, array&lt;Byte&gt;^Key, array&lt;Byte&gt;^IV )\n{\n   try\n   {\n      \n      // Create or open the specified file.\n      FileStream^ fStream = File::Open( FileName, FileMode::OpenOrCreate );\n      \n      // Create a CryptoStream using the FileStream \n      // and the passed key and initialization vector (IV).\n      CryptoStream^ cStream = gcnew CryptoStream( fStream,(gcnew TripleDESCryptoServiceProvider)-&gt;CreateEncryptor( Key, IV ),CryptoStreamMode::Write );\n      \n      // Create a StreamWriter using the CryptoStream.\n      StreamWriter^ sWriter = gcnew StreamWriter( cStream );\n      \n      // Write the data to the stream \n      // to encrypt it.\n      sWriter-&gt;WriteLine( Data );\n      \n      // Close the streams and\n      // close the file.\n      sWriter-&gt;Close();\n      cStream-&gt;Close();\n      fStream-&gt;Close();\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( &quot;A Cryptographic error occurred: {0}&quot;, e-&gt;Message );\n   }\n   catch ( UnauthorizedAccessException^ e ) \n   {\n      Console::WriteLine( &quot;A file access error occurred: {0}&quot;, e-&gt;Message );\n   }\n\n}\n\nString^ DecryptTextFromFile( String^ FileName, array&lt;Byte&gt;^Key, array&lt;Byte&gt;^IV )\n{\n   try\n   {\n      \n      // Create or open the specified file. \n      FileStream^ fStream = File::Open( FileName, FileMode::OpenOrCreate );\n      \n      // Create a CryptoStream using the FileStream \n      // and the passed key and initialization vector (IV).\n      CryptoStream^ cStream = gcnew CryptoStream( fStream,(gcnew TripleDESCryptoServiceProvider)-&gt;CreateDecryptor( Key, IV ),CryptoStreamMode::Read );\n      \n      // Create a StreamReader using the CryptoStream.\n      StreamReader^ sReader = gcnew StreamReader( cStream );\n      \n      // Read the data from the stream \n      // to decrypt it.\n      String^ val = sReader-&gt;ReadLine();\n      \n      // Close the streams and\n      // close the file.\n      sReader-&gt;Close();\n      cStream-&gt;Close();\n      fStream-&gt;Close();\n      \n      // Return the string. \n      return val;\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( &quot;A Cryptographic error occurred: {0}&quot;, e-&gt;Message );\n      return nullptr;\n   }\n   catch ( UnauthorizedAccessException^ e ) \n   {\n      Console::WriteLine( &quot;A file access error occurred: {0}&quot;, e-&gt;Message );\n      return nullptr;\n   }\n\n}\n\nint main()\n{\n   try\n   {\n      \n      // Create a new TripleDESCryptoServiceProvider object\n      // to generate a key and initialization vector (IV).\n      TripleDESCryptoServiceProvider^ tDESalg = gcnew TripleDESCryptoServiceProvider;\n      \n      // Create a string to encrypt.\n      String^ sData = &quot;Here is some data to encrypt.&quot;;\n      String^ FileName = &quot;CText.txt&quot;;\n      \n      // Encrypt text to a file using the file name, key, and IV.\n      EncryptTextToFile( sData, FileName, tDESalg-&gt;Key, tDESalg-&gt;IV );\n      \n      // Decrypt the text from a file using the file name, key, and IV.\n      String^ Final = DecryptTextFromFile( FileName, tDESalg-&gt;Key, tDESalg-&gt;IV );\n      \n      // Display the decrypted string to the console.\n      Console::WriteLine( Final );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.3DESCSP.CreateEncryptor.File#1\">Imports System.Security.Cryptography\nImports System.Text\nImports System.IO\n\nModule TrippleDESCSPSample\n\n    Sub Main()\n        Try\n            &#39; Create a new TripleDESCryptoServiceProvider object\n            &#39; to generate a key and initialization vector (IV).\n            Dim tDESalg As New TripleDESCryptoServiceProvider\n\n            &#39; Create a string to encrypt.\n            Dim sData As String = &quot;Here is some data to encrypt.&quot;\n            Dim FileName As String = &quot;CText.txt&quot;\n\n            &#39; Encrypt text to a file using the file name, key, and IV.\n            EncryptTextToFile(sData, FileName, tDESalg.Key, tDESalg.IV)\n\n            &#39; Decrypt the text from a file using the file name, key, and IV.\n            Dim Final As String = DecryptTextFromFile(FileName, tDESalg.Key, tDESalg.IV)\n\n            &#39; Display the decrypted string to the console.\n            Console.WriteLine(Final)\n        Catch e As Exception\n            Console.WriteLine(e.Message)\n        End Try\n    End Sub\n\n\n    Sub EncryptTextToFile(ByVal Data As String, ByVal FileName As String, ByVal Key() As Byte, ByVal IV() As Byte)\n        Try\n            &#39; Create or open the specified file.\n            Dim fStream As FileStream = File.Open(FileName, FileMode.OpenOrCreate)\n\n            &#39; Create a CryptoStream using the FileStream \n            &#39; and the passed key and initialization vector (IV).\n            Dim cStream As New CryptoStream(fStream, _\n                                            New TripleDESCryptoServiceProvider().CreateEncryptor(Key, IV), _\n                                            CryptoStreamMode.Write)\n\n            &#39; Create a StreamWriter using the CryptoStream.\n            Dim sWriter As New StreamWriter(cStream)\n\n            &#39; Write the data to the stream \n            &#39; to encrypt it.\n            sWriter.WriteLine(Data)\n\n            &#39; Close the streams and\n            &#39; close the file.\n            sWriter.Close()\n            cStream.Close()\n            fStream.Close()\n        Catch e As CryptographicException\n            Console.WriteLine(&quot;A Cryptographic error occurred: {0}&quot;, e.Message)\n        Catch e As UnauthorizedAccessException\n            Console.WriteLine(&quot;A file error occurred: {0}&quot;, e.Message)\n        End Try\n    End Sub\n\n\n    Function DecryptTextFromFile(ByVal FileName As String, ByVal Key() As Byte, ByVal IV() As Byte) As String\n        Try\n            &#39; Create or open the specified file. \n            Dim fStream As FileStream = File.Open(FileName, FileMode.OpenOrCreate)\n\n            &#39; Create a CryptoStream using the FileStream \n            &#39; and the passed key and initialization vector (IV).\n            Dim cStream As New CryptoStream(fStream, _\n                                            New TripleDESCryptoServiceProvider().CreateDecryptor(Key, IV), _\n                                            CryptoStreamMode.Read)\n\n            &#39; Create a StreamReader using the CryptoStream.\n            Dim sReader As New StreamReader(cStream)\n\n            &#39; Read the data from the stream \n            &#39; to decrypt it.\n            Dim val As String = sReader.ReadLine()\n\n            &#39; Close the streams and\n            &#39; close the file.\n            sReader.Close()\n            cStream.Close()\n            fStream.Close()\n\n            &#39; Return the string. \n            Return val\n        Catch e As CryptographicException\n            Console.WriteLine(&quot;A Cryptographic error occurred: {0}&quot;, e.Message)\n            Return Nothing\n        Catch e As UnauthorizedAccessException\n            Console.WriteLine(&quot;A file error occurred: {0}&quot;, e.Message)\n            Return Nothing\n        End Try\n    End Function\nEnd Module\n</code></pre><p> The following code example creates a <a class=\"xref\" href=\"system.security.cryptography.tripledescryptoserviceprovider\" data-linktype=\"relative-path\">TripleDESCryptoServiceProvider</a> object and uses it to encrypt and decrypt data in memory.  </p>\n<pre><code class=\"lang-vb\" name=\"Cryptography.3DESCSP.CreateEncryptor.Memory#1\">Imports System.Security.Cryptography\nImports System.Text\nImports System.IO\n\nModule TrippleDESCSPSample\n\n    Sub Main()\n        Try\n            &#39; Create a new TripleDESCryptoServiceProvider object\n            &#39; to generate a key and initialization vector (IV).\n            Dim tDESalg As New TripleDESCryptoServiceProvider\n\n            &#39; Create a string to encrypt.\n            Dim sData As String = &quot;Here is some data to encrypt.&quot;\n\n            &#39; Encrypt the string to an in-memory buffer.\n            Dim Data As Byte() = EncryptTextToMemory(sData, tDESalg.Key, tDESalg.IV)\n\n            &#39; Decrypt the buffer back to a string.\n            Dim Final As String = DecryptTextFromMemory(Data, tDESalg.Key, tDESalg.IV)\n\n            &#39; Display the decrypted string to the console.\n            Console.WriteLine(Final)\n        Catch e As Exception\n            Console.WriteLine(e.Message)\n        End Try\n    End Sub\n\n\n    Function EncryptTextToMemory(ByVal Data As String, ByVal Key() As Byte, ByVal IV() As Byte) As Byte()\n        Try\n            &#39; Create a MemoryStream.\n            Dim mStream As New MemoryStream\n\n            &#39; Create a CryptoStream using the MemoryStream \n            &#39; and the passed key and initialization vector (IV).\n            Dim cStream As New CryptoStream(mStream, _\n                                            New TripleDESCryptoServiceProvider().CreateEncryptor(Key, IV), _\n                                            CryptoStreamMode.Write)\n\n            &#39; Convert the passed string to a byte array.\n            Dim toEncrypt As Byte() = New ASCIIEncoding().GetBytes(Data)\n\n            &#39; Write the byte array to the crypto stream and flush it.\n            cStream.Write(toEncrypt, 0, toEncrypt.Length)\n            cStream.FlushFinalBlock()\n\n            &#39; Get an array of bytes from the \n            &#39; MemoryStream that holds the \n            &#39; encrypted data.\n            Dim ret As Byte() = mStream.ToArray()\n\n            &#39; Close the streams.\n            cStream.Close()\n            mStream.Close()\n\n            &#39; Return the encrypted buffer.\n            Return ret\n        Catch e As CryptographicException\n            Console.WriteLine(&quot;A Cryptographic error occurred: {0}&quot;, e.Message)\n            Return Nothing\n        End Try\n    End Function\n\n\n    Function DecryptTextFromMemory(ByVal Data() As Byte, ByVal Key() As Byte, ByVal IV() As Byte) As String\n        Try\n            &#39; Create a new MemoryStream using the passed \n            &#39; array of encrypted data.\n            Dim msDecrypt As New MemoryStream(Data)\n\n            &#39; Create a CryptoStream using the MemoryStream \n            &#39; and the passed key and initialization vector (IV).\n            Dim csDecrypt As New CryptoStream(msDecrypt, _\n                                              New TripleDESCryptoServiceProvider().CreateDecryptor(Key, IV), _\n                                              CryptoStreamMode.Read)\n\n            &#39; Create buffer to hold the decrypted data.\n            Dim fromEncrypt(Data.Length - 1) As Byte\n\n            &#39; Read the decrypted data out of the crypto stream\n            &#39; and place it into the temporary buffer.\n            csDecrypt.Read(fromEncrypt, 0, fromEncrypt.Length)\n\n            &#39;Convert the buffer into a string and return it.\n            Return New ASCIIEncoding().GetString(fromEncrypt)\n        Catch e As CryptographicException\n            Console.WriteLine(&quot;A Cryptographic error occurred: {0}&quot;, e.Message)\n            Return Nothing\n        End Try\n    End Function\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"Cryptography.3DESCSP.CreateEncryptor.Memory#1\">using System;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.IO;\n\nclass TrippleDESCSPSample\n{\n\n    static void Main()\n    {\n        try\n        {\n            // Create a new TripleDESCryptoServiceProvider object\n            // to generate a key and initialization vector (IV).\n            TripleDESCryptoServiceProvider tDESalg = new TripleDESCryptoServiceProvider();\n\n            // Create a string to encrypt.\n            string sData = &quot;Here is some data to encrypt.&quot;;\n\n            // Encrypt the string to an in-memory buffer.\n            byte[] Data = EncryptTextToMemory(sData, tDESalg.Key, tDESalg.IV);\n\n            // Decrypt the buffer back to a string.\n            string Final = DecryptTextFromMemory(Data, tDESalg.Key, tDESalg.IV);\n            \n            // Display the decrypted string to the console.\n            Console.WriteLine(Final);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(e.Message);\n        }\n       \n    }\n\n    public static byte[] EncryptTextToMemory(string Data,  byte[] Key, byte[] IV)\n    {\n        try\n        {\n            // Create a MemoryStream.\n            MemoryStream mStream = new MemoryStream();\n\n            // Create a CryptoStream using the MemoryStream \n            // and the passed key and initialization vector (IV).\n            CryptoStream cStream = new CryptoStream(mStream, \n                new TripleDESCryptoServiceProvider().CreateEncryptor(Key, IV), \n                CryptoStreamMode.Write);\n\n            // Convert the passed string to a byte array.\n            byte[] toEncrypt = new ASCIIEncoding().GetBytes(Data);\n\n            // Write the byte array to the crypto stream and flush it.\n            cStream.Write(toEncrypt, 0, toEncrypt.Length);\n            cStream.FlushFinalBlock();\n        \n            // Get an array of bytes from the \n            // MemoryStream that holds the \n            // encrypted data.\n            byte[] ret = mStream.ToArray();\n\n            // Close the streams.\n            cStream.Close();\n            mStream.Close();\n\n            // Return the encrypted buffer.\n            return ret;\n        }\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(&quot;A Cryptographic error occurred: {0}&quot;, e.Message);\n            return null;\n        }\n\n    }\n\n    public static string DecryptTextFromMemory(byte[] Data,  byte[] Key, byte[] IV)\n    {\n        try\n        {\n            // Create a new MemoryStream using the passed \n            // array of encrypted data.\n            MemoryStream msDecrypt = new MemoryStream(Data);\n\n            // Create a CryptoStream using the MemoryStream \n            // and the passed key and initialization vector (IV).\n            CryptoStream csDecrypt = new CryptoStream(msDecrypt, \n                new TripleDESCryptoServiceProvider().CreateDecryptor(Key, IV), \n                CryptoStreamMode.Read);\n\n            // Create buffer to hold the decrypted data.\n            byte[] fromEncrypt = new byte[Data.Length];\n\n            // Read the decrypted data out of the crypto stream\n            // and place it into the temporary buffer.\n            csDecrypt.Read(fromEncrypt, 0, fromEncrypt.Length);\n\n            //Convert the buffer into a string and return it.\n            return new ASCIIEncoding().GetString(fromEncrypt);\n        }\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(&quot;A Cryptographic error occurred: {0}&quot;, e.Message);\n            return null;\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Cryptography.3DESCSP.CreateEncryptor.Memory#1\">using namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Text;\nusing namespace System::IO;\narray&lt;Byte&gt;^ EncryptTextToMemory( String^ Data, array&lt;Byte&gt;^Key, array&lt;Byte&gt;^IV )\n{\n   try\n   {\n      \n      // Create a MemoryStream.\n      MemoryStream^ mStream = gcnew MemoryStream;\n      \n      // Create a CryptoStream using the MemoryStream \n      // and the passed key and initialization vector (IV).\n      CryptoStream^ cStream = gcnew CryptoStream( mStream,(gcnew TripleDESCryptoServiceProvider)-&gt;CreateEncryptor( Key, IV ),CryptoStreamMode::Write );\n      \n      // Convert the passed string to a byte array.\n      array&lt;Byte&gt;^toEncrypt = (gcnew ASCIIEncoding)-&gt;GetBytes( Data );\n      \n      // Write the byte array to the crypto stream and flush it.\n      cStream-&gt;Write( toEncrypt, 0, toEncrypt-&gt;Length );\n      cStream-&gt;FlushFinalBlock();\n      \n      // Get an array of bytes from the \n      // MemoryStream that holds the \n      // encrypted data.\n      array&lt;Byte&gt;^ret = mStream-&gt;ToArray();\n      \n      // Close the streams.\n      cStream-&gt;Close();\n      mStream-&gt;Close();\n      \n      // Return the encrypted buffer.\n      return ret;\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( &quot;A Cryptographic error occurred: {0}&quot;, e-&gt;Message );\n      return nullptr;\n   }\n\n}\n\nString^ DecryptTextFromMemory( array&lt;Byte&gt;^Data, array&lt;Byte&gt;^Key, array&lt;Byte&gt;^IV )\n{\n   try\n   {\n      \n      // Create a new MemoryStream using the passed \n      // array of encrypted data.\n      MemoryStream^ msDecrypt = gcnew MemoryStream( Data );\n      \n      // Create a CryptoStream using the MemoryStream \n      // and the passed key and initialization vector (IV).\n      CryptoStream^ csDecrypt = gcnew CryptoStream( msDecrypt,(gcnew TripleDESCryptoServiceProvider)-&gt;CreateDecryptor( Key, IV ),CryptoStreamMode::Read );\n      \n      // Create buffer to hold the decrypted data.\n      array&lt;Byte&gt;^fromEncrypt = gcnew array&lt;Byte&gt;(Data-&gt;Length);\n      \n      // Read the decrypted data out of the crypto stream\n      // and place it into the temporary buffer.\n      csDecrypt-&gt;Read( fromEncrypt, 0, fromEncrypt-&gt;Length );\n      \n      //Convert the buffer into a string and return it.\n      return (gcnew ASCIIEncoding)-&gt;GetString( fromEncrypt );\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( &quot;A Cryptographic error occurred: {0}&quot;, e-&gt;Message );\n      return nullptr;\n   }\n\n}\n\nint main()\n{\n   try\n   {\n      \n      // Create a new TripleDESCryptoServiceProvider object\n      // to generate a key and initialization vector (IV).\n      TripleDESCryptoServiceProvider^ tDESalg = gcnew TripleDESCryptoServiceProvider;\n      \n      // Create a string to encrypt.\n      String^ sData = &quot;Here is some data to encrypt.&quot;;\n      \n      // Encrypt the string to an in-memory buffer.\n      array&lt;Byte&gt;^Data = EncryptTextToMemory( sData, tDESalg-&gt;Key, tDESalg-&gt;IV );\n      \n      // Decrypt the buffer back to a string.\n      String^ Final = DecryptTextFromMemory( Data, tDESalg-&gt;Key, tDESalg-&gt;IV );\n      \n      // Display the decrypted string to the console.\n      Console::WriteLine( Final );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_TripleDESCryptoServiceProvider_GenerateIV\">\r\n    \r\n            <a id=\"System_Security_Cryptography_TripleDESCryptoServiceProvider_GenerateIV_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GenerateIV()</div>        \r\n          </div>\r\n    \r\n            <p>Generates a random initialization vector (<span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.IV*</span>) to use for the algorithm.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void GenerateIV ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to generate a random initialization vector when none is specified.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_TripleDESCryptoServiceProvider_GenerateKey\">\r\n    \r\n            <a id=\"System_Security_Cryptography_TripleDESCryptoServiceProvider_GenerateKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GenerateKey()</div>        \r\n          </div>\r\n    \r\n            <p>Generates a random <span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.Key*</span> to be used for the algorithm.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void GenerateKey ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to generate a random key when none is specified. This method will never return a weak key (see <a class=\"xref\" href=\"system.security.cryptography.tripledes#System_Security_Cryptography_TripleDES_IsWeakKey_\" data-linktype=\"relative-path\">IsWeakKey</a>).  </p>\n<p> This algorithm supports key lengths from 128 bits to 192 bits in increments of 64 bits.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.Cryptography.TripleDESCryptoServiceProvider.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.Cryptography.TripleDESCryptoServiceProvider.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.TripleDESCryptoServiceProvider\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.TripleDESCryptoServiceProvider..ctor\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.TripleDESCryptoServiceProvider.CreateDecryptor\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.TripleDESCryptoServiceProvider.CreateEncryptor\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.TripleDESCryptoServiceProvider.GenerateIV\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.TripleDESCryptoServiceProvider.GenerateKey\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"7fefcaf5-4410-a269-ad71-add427e738a9\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines a wrapper object to access the cryptographic service provider (CSP) version of the  algorithm. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Security.Cryptography/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.Cryptography.TripleDESCryptoServiceProvider\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.Cryptography.TripleDESCryptoServiceProvider.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.Cryptography.TripleDESCryptoServiceProvider.yml","open_to_public_contributors":true,"api_name":["System.Security.Cryptography.TripleDESCryptoServiceProvider","System.Security.Cryptography.TripleDESCryptoServiceProvider..ctor","System.Security.Cryptography.TripleDESCryptoServiceProvider.CreateDecryptor","System.Security.Cryptography.TripleDESCryptoServiceProvider.CreateEncryptor","System.Security.Cryptography.TripleDESCryptoServiceProvider.GenerateIV","System.Security.Cryptography.TripleDESCryptoServiceProvider.GenerateKey"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.Cryptography.TripleDESCryptoServiceProvider","System::Security::Cryptography::TripleDESCryptoServiceProvider","System.Security.Cryptography.TripleDESCryptoServiceProvider.#ctor","System::Security::Cryptography::TripleDESCryptoServiceProvider::#ctor","System.Security.Cryptography.TripleDESCryptoServiceProvider.CreateDecryptor","System::Security::Cryptography::TripleDESCryptoServiceProvider::CreateDecryptor","System.Security.Cryptography.TripleDESCryptoServiceProvider.CreateEncryptor","System::Security::Cryptography::TripleDESCryptoServiceProvider::CreateEncryptor","System.Security.Cryptography.TripleDESCryptoServiceProvider.GenerateIV","System::Security::Cryptography::TripleDESCryptoServiceProvider::GenerateIV","System.Security.Cryptography.TripleDESCryptoServiceProvider.GenerateKey","System::Security::Cryptography::TripleDESCryptoServiceProvider::GenerateKey"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"7fefcaf5-4410-a269-ad71-add427e738a9","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Security.Cryptography/TripleDESCryptoServiceProvider.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"TripleDESCryptoServiceProvider class | Microsoft Docs","_op_ogTitle":"TripleDESCryptoServiceProvider class","description":"Defines a wrapper object to access the cryptographic service provider (CSP) version of the  algorithm. This class cannot be inherited.\n","toc_asset_id":"_splitted/System.Security.Cryptography/toc.json","toc_rel":"_splitted/System.Security.Cryptography/toc.json","source_url":"","ms.assetid":"System.Security.Cryptography.TripleDESCryptoServiceProvider","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.cryptography.tripledescryptoserviceprovider","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.cryptography.tripledescryptoserviceprovider","fileRelativePath":"System.Security.Cryptography.TripleDESCryptoServiceProvider.html"},"themesRelativePathToOutputRoot":"_themes/"}