{"content":"    \r\n    <h1 id=\"System_Attribute\">\r\n      <span class=\"lang-csharp\">Attribute</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents the base class for custom attributes.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.AttributeUsage(System.AttributeTargets.All, AllowMultiple=false, Inherited=true)]\n[System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]\n[System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._Attribute))]\n[System.Runtime.InteropServices.ComVisible(true)]\npublic abstract class Attribute : System.Runtime.InteropServices._Attribute</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Attribute</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The Attribute class associates predefined system information or user-defined custom information with a target element. A target element can be an assembly, class, constructor, delegate, enum, event, field, interface, method, portable executable file module, parameter, property, return value, struct, or another attribute.  </p>\n<p> Information provided by an attribute is also known as metadata. Metadata can be examined at run time by your application to control how your program processes data, or before run time by external tools to control how your application itself is processed or maintained. For example, the .NET Framework predefines and uses attribute types to control run-time behavior, and some programming languages use attribute types to represent language features not directly supported by the .NET Framework common type system.  </p>\n<p> All attribute types derive directly or indirectly from the Attribute class. Attributes can be applied to any target element; multiple attributes can be applied to the same target element; and attributes can be inherited by an element derived from a target element. Use the <a class=\"xref\" href=\"system.attributetargets\" data-linktype=\"relative-path\">AttributeTargets</a> class to specify the target element to which the attribute is applied.  </p>\n<p> The Attribute class provides convenient methods to retrieve and test custom attributes. For more information about using attributes, see <a href=\"../Topic/Applying%20Attributes.md\" data-linktype=\"relative-path\">Applying Attributes</a> and <a href=\"../Topic/Extending%20Metadata%20Using%20Attributes.md\" data-linktype=\"relative-path\">Attributes</a>.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Attribute__ctor\" data-linktype=\"self-bookmark\">Attribute()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Attribute_TypeId\" data-linktype=\"self-bookmark\">TypeId</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When implemented in a derived class, gets a unique identifier for this <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Attribute_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value that indicates whether this instance is equal to a specified object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Attribute_GetCustomAttribute_System_Reflection_Assembly_System_Type_\" data-linktype=\"self-bookmark\">GetCustomAttribute(Assembly,Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves a custom attribute applied to a specified assembly. Parameters specify the assembly and the type of the custom attribute to search for.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Attribute_GetCustomAttribute_System_Reflection_MemberInfo_System_Type_\" data-linktype=\"self-bookmark\">GetCustomAttribute(MemberInfo,Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves a custom attribute applied to a member of a type. Parameters specify the member, and the type of the custom attribute to search for.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Attribute_GetCustomAttribute_System_Reflection_Module_System_Type_\" data-linktype=\"self-bookmark\">GetCustomAttribute(Module,Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves a custom attribute applied to a module. Parameters specify the module, and the type of the custom attribute to search for.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Attribute_GetCustomAttribute_System_Reflection_ParameterInfo_System_Type_\" data-linktype=\"self-bookmark\">GetCustomAttribute(ParameterInfo,Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves a custom attribute applied to a method parameter. Parameters specify the method parameter, and the type of the custom attribute to search for.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Attribute_GetCustomAttribute_System_Reflection_Assembly_System_Type_System_Boolean_\" data-linktype=\"self-bookmark\">GetCustomAttribute(Assembly,Type,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves a custom attribute applied to an assembly. Parameters specify the assembly, the type of the custom attribute to search for, and an ignored search option.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Attribute_GetCustomAttribute_System_Reflection_MemberInfo_System_Type_System_Boolean_\" data-linktype=\"self-bookmark\">GetCustomAttribute(MemberInfo,Type,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves a custom attribute applied to a member of a type. Parameters specify the member, the type of the custom attribute to search for, and whether to search ancestors of the member.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Attribute_GetCustomAttribute_System_Reflection_Module_System_Type_System_Boolean_\" data-linktype=\"self-bookmark\">GetCustomAttribute(Module,Type,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves a custom attribute applied to a module. Parameters specify the module, the type of the custom attribute to search for, and an ignored search option.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Attribute_GetCustomAttribute_System_Reflection_ParameterInfo_System_Type_System_Boolean_\" data-linktype=\"self-bookmark\">GetCustomAttribute(ParameterInfo,Type,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves a custom attribute applied to a method parameter. Parameters specify the method parameter, the type of the custom attribute to search for, and whether to search ancestors of the method parameter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Attribute_GetCustomAttributes_System_Reflection_Assembly_\" data-linktype=\"self-bookmark\">GetCustomAttributes(Assembly)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves an array of the custom attributes applied to an assembly. A parameter specifies the assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Attribute_GetCustomAttributes_System_Reflection_MemberInfo_\" data-linktype=\"self-bookmark\">GetCustomAttributes(MemberInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves an array of the custom attributes applied to a member of a type. A parameter specifies the member.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Attribute_GetCustomAttributes_System_Reflection_Module_\" data-linktype=\"self-bookmark\">GetCustomAttributes(Module)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves an array of the custom attributes applied to a module. A parameter specifies the module.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Attribute_GetCustomAttributes_System_Reflection_ParameterInfo_\" data-linktype=\"self-bookmark\">GetCustomAttributes(ParameterInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves an array of the custom attributes applied to a method parameter. A parameter specifies the method parameter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Attribute_GetCustomAttributes_System_Reflection_Assembly_System_Boolean_\" data-linktype=\"self-bookmark\">GetCustomAttributes(Assembly,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves an array of the custom attributes applied to an assembly. Parameters specify the assembly, and an ignored search option.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Attribute_GetCustomAttributes_System_Reflection_Assembly_System_Type_\" data-linktype=\"self-bookmark\">GetCustomAttributes(Assembly,Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves an array of the custom attributes applied to an assembly. Parameters specify the assembly, and the type of the custom attribute to search for.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Attribute_GetCustomAttributes_System_Reflection_MemberInfo_System_Boolean_\" data-linktype=\"self-bookmark\">GetCustomAttributes(MemberInfo,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves an array of the custom attributes applied to a member of a type. Parameters specify the member, the type of the custom attribute to search for, and whether to search ancestors of the member.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Attribute_GetCustomAttributes_System_Reflection_MemberInfo_System_Type_\" data-linktype=\"self-bookmark\">GetCustomAttributes(MemberInfo,Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves an array of the custom attributes applied to a member of a type. Parameters specify the member, and the type of the custom attribute to search for.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Attribute_GetCustomAttributes_System_Reflection_Module_System_Boolean_\" data-linktype=\"self-bookmark\">GetCustomAttributes(Module,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves an array of the custom attributes applied to a module. Parameters specify the module, and an ignored search option.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Attribute_GetCustomAttributes_System_Reflection_Module_System_Type_\" data-linktype=\"self-bookmark\">GetCustomAttributes(Module,Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves an array of the custom attributes applied to a module. Parameters specify the module, and the type of the custom attribute to search for.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Attribute_GetCustomAttributes_System_Reflection_ParameterInfo_System_Boolean_\" data-linktype=\"self-bookmark\">GetCustomAttributes(ParameterInfo,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves an array of the custom attributes applied to a method parameter. Parameters specify the method parameter, and whether to search ancestors of the method parameter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Attribute_GetCustomAttributes_System_Reflection_ParameterInfo_System_Type_\" data-linktype=\"self-bookmark\">GetCustomAttributes(ParameterInfo,Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves an array of the custom attributes applied to a method parameter. Parameters specify the method parameter, and the type of the custom attribute to search for.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Attribute_GetCustomAttributes_System_Reflection_Assembly_System_Type_System_Boolean_\" data-linktype=\"self-bookmark\">GetCustomAttributes(Assembly,Type,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves an array of the custom attributes applied to an assembly. Parameters specify the assembly, the type of the custom attribute to search for, and an ignored search option.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Attribute_GetCustomAttributes_System_Reflection_MemberInfo_System_Type_System_Boolean_\" data-linktype=\"self-bookmark\">GetCustomAttributes(MemberInfo,Type,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves an array of the custom attributes applied to a member of a type. Parameters specify the member, the type of the custom attribute to search for, and whether to search ancestors of the member.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Attribute_GetCustomAttributes_System_Reflection_Module_System_Type_System_Boolean_\" data-linktype=\"self-bookmark\">GetCustomAttributes(Module,Type,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves an array of the custom attributes applied to a module. Parameters specify the module, the type of the custom attribute to search for, and an ignored search option.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Attribute_GetCustomAttributes_System_Reflection_ParameterInfo_System_Type_System_Boolean_\" data-linktype=\"self-bookmark\">GetCustomAttributes(ParameterInfo,Type,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves an array of the custom attributes applied to a method parameter. Parameters specify the method parameter, the type of the custom attribute to search for, and whether to search ancestors of the method parameter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Attribute_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the hash code for this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Attribute_IsDefaultAttribute\" data-linktype=\"self-bookmark\">IsDefaultAttribute()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, indicates whether the value of this instance is the default value for the derived class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Attribute_IsDefined_System_Reflection_Assembly_System_Type_\" data-linktype=\"self-bookmark\">IsDefined(Assembly,Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether any custom attributes are applied to an assembly. Parameters specify the assembly, and the type of the custom attribute to search for.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Attribute_IsDefined_System_Reflection_MemberInfo_System_Type_\" data-linktype=\"self-bookmark\">IsDefined(MemberInfo,Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether any custom attributes are applied to a member of a type. Parameters specify the member, and the type of the custom attribute to search for.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Attribute_IsDefined_System_Reflection_Module_System_Type_\" data-linktype=\"self-bookmark\">IsDefined(Module,Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether any custom attributes of a specified type are applied to a module. Parameters specify the module, and the type of the custom attribute to search for.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Attribute_IsDefined_System_Reflection_ParameterInfo_System_Type_\" data-linktype=\"self-bookmark\">IsDefined(ParameterInfo,Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether any custom attributes are applied to a method parameter. Parameters specify the method parameter, and the type of the custom attribute to search for.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Attribute_IsDefined_System_Reflection_Assembly_System_Type_System_Boolean_\" data-linktype=\"self-bookmark\">IsDefined(Assembly,Type,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether any custom attributes are applied to an assembly. Parameters specify the assembly, the type of the custom attribute to search for, and an ignored search option.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Attribute_IsDefined_System_Reflection_MemberInfo_System_Type_System_Boolean_\" data-linktype=\"self-bookmark\">IsDefined(MemberInfo,Type,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether any custom attributes are applied to a member of a type. Parameters specify the member, the type of the custom attribute to search for, and whether to search ancestors of the member.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Attribute_IsDefined_System_Reflection_Module_System_Type_System_Boolean_\" data-linktype=\"self-bookmark\">IsDefined(Module,Type,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether any custom attributes are applied to a module. Parameters specify the module, the type of the custom attribute to search for, and an ignored search option.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Attribute_IsDefined_System_Reflection_ParameterInfo_System_Type_System_Boolean_\" data-linktype=\"self-bookmark\">IsDefined(ParameterInfo,Type,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether any custom attributes are applied to a method parameter. Parameters specify the method parameter, the type of the custom attribute to search for, and whether to search ancestors of the method parameter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Attribute_Match_System_Object_\" data-linktype=\"self-bookmark\">Match(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, returns a value that indicates whether this instance equals a specified object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Attribute_System_Runtime_InteropServices__Attribute_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"self-bookmark\">_Attribute.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Maps a set of names to a corresponding set of dispatch identifiers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Attribute_System_Runtime_InteropServices__Attribute_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"self-bookmark\">_Attribute.GetTypeInfo(UInt32,UInt32,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the type information for an object, which can be used to get the type information for an interface.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Attribute_System_Runtime_InteropServices__Attribute_GetTypeInfoCount_System_UInt32__\" data-linktype=\"self-bookmark\">_Attribute.GetTypeInfoCount(UInt32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Attribute_System_Runtime_InteropServices__Attribute_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\" data-linktype=\"self-bookmark\">_Attribute.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides access to properties and methods exposed by an object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Attribute__ctor\">\r\n    \r\n            <a id=\"System_Attribute__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Attribute()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected Attribute ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor is only called by classes that derive from <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows the definition of a custom parameter <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a> class with its constructor.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Attribute.GetCustomAttribute#2\">   // Define a custom parameter attribute that takes a single message argument.\n\n   [AttributeUsage(AttributeTargets::Parameter)]\n   public ref class ArgumentUsageAttribute: public Attribute\n   {\n   protected:\n\n      // usageMsg is storage for the attribute message.\n      String^ usageMsg;\n\n   public:\n\n      // This is the attribute constructor.\n      ArgumentUsageAttribute( String^ UsageMsg )\n      {\n         this-&gt;usageMsg = UsageMsg;\n      }\n\n\n      property String^ Message \n      {\n         // This is the Message property for the attribute.\n         String^ get()\n         {\n            return usageMsg;\n         }\n\n         void set( String^ value )\n         {\n            this-&gt;usageMsg = value;\n         }\n      }\n   };\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Attribute.GetCustomAttribute#2\">    &#39; Define a custom parameter attribute that takes a single message argument.\n    &lt;AttributeUsage(AttributeTargets.Parameter)&gt;  _\n    Public Class ArgumentUsageAttribute\n        Inherits Attribute\n           \n        &#39; This is the attribute constructor.\n        Public Sub New(UsageMsg As String)\n            Me.usageMsg = UsageMsg\n        End Sub &#39; New\n\n        &#39; usageMsg is storage for the attribute message.\n        Protected usageMsg As String\n           \n        &#39; This is the Message property for the attribute.\n        Public Property Message() As String\n            Get\n                Return usageMsg\n            End Get\n            Set\n                usageMsg = value\n            End Set\n        End Property\n    End Class &#39; ArgumentUsageAttribute \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Attribute.GetCustomAttribute#2\">    // Define a custom parameter attribute that takes a single message argument.\n    [AttributeUsage( AttributeTargets.Parameter )]\n    public class ArgumentUsageAttribute : Attribute\n    {\n        // This is the attribute constructor.\n        public ArgumentUsageAttribute( string UsageMsg )\n        {\n            this.usageMsg = UsageMsg;\n        }\n\n        // usageMsg is storage for the attribute message.\n        protected string usageMsg;\n\n        // This is the Message property for the attribute.\n        public string Message\n        {\n            get { return usageMsg; }\n            set { usageMsg = value; }\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Attribute_TypeId\">\r\n    \r\n            <a id=\"System_Attribute_TypeId_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TypeId</div>        \r\n          </div>\r\n    \r\n            <p>When implemented in a derived class, gets a unique identifier for this <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual object TypeId { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> that is a unique identifier for the attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>As implemented, this identifier is merely the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> of the attribute. However, it is intended that the unique identifier be used to identify two attributes of the same type.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example implements the TypeId property in a custom parameter <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a> class and shows its use.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Attribute.TypeId#1\">// Example for the Attribute::TypeId property.\nusing namespace System;\nusing namespace System::Reflection;\n\nnamespace NDP_UE_CPP\n{\n\n   // Define a custom parameter attribute that takes a single message argument.\n\n   [AttributeUsage(AttributeTargets::Parameter)]\n   public ref class ArgumentUsageAttribute: public Attribute\n   {\n   protected:\n\n      // This is storage for the attribute message and unique ID.\n      String^ usageMsg;\n      Guid instanceGUID;\n\n   public:\n\n      // The constructor saves the message and creates a unique identifier.\n      ArgumentUsageAttribute( String^ UsageMsg )\n      {\n         this-&gt;usageMsg = UsageMsg;\n         this-&gt;instanceGUID = Guid::NewGuid();\n      }\n\n      property String^ Message \n      {\n         // This is the Message property for the attribute.\n         String^ get()\n         {\n            return usageMsg;\n         }\n\n         void set( String^ value )\n         {\n            this-&gt;usageMsg = value;\n         }\n      }\n\n      property Object^ TypeId \n      {\n         // Override TypeId to provide a unique identifier for the instance.\n         virtual Object^ get() override\n         {\n            return instanceGUID;\n         }\n      }\n\n      // Override ToString() to append the message to \n      // what the base generates.\n      virtual String^ ToString() override\n      {\n         return String::Concat( Attribute::ToString(), &quot;:&quot;, usageMsg );\n      }\n   };\n\n   public ref class TestClass\n   {\n   public:\n\n      // Assign an ArgumentUsage attribute to each parameter.\n      // Assign a ParamArray attribute to strList.\n      void TestMethod( [ArgumentUsage(&quot;Must pass an array here.&quot;)]array&lt;String^&gt;^strArray,\n                       [ArgumentUsage(&quot;Can pass a param list or array here.&quot;)]array&lt;String^&gt;^strList ){}\n   };\n\n   static void ShowAttributeTypeIds()\n   {\n      // Get the class type, and then get the MethodInfo object \n      // for TestMethod to access its metadata.\n      Type^ clsType = TestClass::typeid;\n      MethodInfo^ mInfo = clsType-&gt;GetMethod( &quot;TestMethod&quot; );\n\n      // There will be two elements in pInfoArray, one for each parameter.\n      array&lt;ParameterInfo^&gt;^pInfoArray = mInfo-&gt;GetParameters();\n      if ( pInfoArray != nullptr )\n      {\n         // Create an instance of the param array attribute on strList.\n         ParamArrayAttribute^ listArrayAttr = static_cast&lt;ParamArrayAttribute^&gt;(Attribute::GetCustomAttribute( pInfoArray[ 1 ], ParamArrayAttribute::typeid ));\n\n         // Create an instance of the argument usage attribute on strArray.\n         ArgumentUsageAttribute^ arrayUsageAttr1 = static_cast&lt;ArgumentUsageAttribute^&gt;(Attribute::GetCustomAttribute( pInfoArray[ 0 ], ArgumentUsageAttribute::typeid ));\n\n         // Create another instance of the argument usage attribute \n         // on strArray.\n         ArgumentUsageAttribute^ arrayUsageAttr2 = static_cast&lt;ArgumentUsageAttribute^&gt;(Attribute::GetCustomAttribute( pInfoArray[ 0 ], ArgumentUsageAttribute::typeid ));\n\n         // Create an instance of the argument usage attribute on strList.\n         ArgumentUsageAttribute^ listUsageAttr = static_cast&lt;ArgumentUsageAttribute^&gt;(Attribute::GetCustomAttribute( pInfoArray[ 1 ], ArgumentUsageAttribute::typeid ));\n\n         // Display the attributes and corresponding TypeId values.\n         Console::WriteLine( &quot;<br>\\&quot;{0}\\&quot; <br>TypeId: {1}&quot;, listArrayAttr-&gt;ToString(), listArrayAttr-&gt;TypeId );\n         Console::WriteLine( &quot;<br>\\&quot;{0}\\&quot; <br>TypeId: {1}&quot;, arrayUsageAttr1-&gt;ToString(), arrayUsageAttr1-&gt;TypeId );\n         Console::WriteLine( &quot;<br>\\&quot;{0}\\&quot; <br>TypeId: {1}&quot;, arrayUsageAttr2-&gt;ToString(), arrayUsageAttr2-&gt;TypeId );\n         Console::WriteLine( &quot;<br>\\&quot;{0}\\&quot; <br>TypeId: {1}&quot;, listUsageAttr-&gt;ToString(), listUsageAttr-&gt;TypeId );\n      }\n      else\n            Console::WriteLine( &quot;The parameters information could &quot;\n      &quot;not be retrieved for method {0}.&quot;, mInfo-&gt;Name );\n   }\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of the Attribute::TypeId property<br>&quot;\n   &quot;generates the following output.&quot; );\n   Console::WriteLine( &quot;<br>Create instances from a derived Attribute &quot;\n   &quot;class that implements TypeId, <br>and then &quot;\n   &quot;display the attributes and corresponding TypeId values:&quot; );\n   NDP_UE_CPP::ShowAttributeTypeIds();\n}\n\n/*\nThis example of the Attribute::TypeId property\ngenerates the following output.\n\nCreate instances from a derived Attribute class that implements TypeId,\nand then display the attributes and corresponding TypeId values:\n\n&quot;System.ParamArrayAttribute&quot;\nTypeId: System.ParamArrayAttribute\n\n&quot;NDP_UE_CPP.ArgumentUsageAttribute:Must pass an array here.&quot;\nTypeId: 9316015d-1219-4ce1-b317-e71efb23d42e\n\n&quot;NDP_UE_CPP.ArgumentUsageAttribute:Must pass an array here.&quot;\nTypeId: ebc1ba23-2573-4c1f-aea6-90515e733796\n\n&quot;NDP_UE_CPP.ArgumentUsageAttribute:Can pass a param list or array here.&quot;\nTypeId: 624af10b-9bba-4403-a97e-46927e7385fb\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Attribute.TypeId#1\">&#39; Example for the Attribute.TypeId property.\nImports System\nImports System.Reflection\nImports Microsoft.VisualBasic\n\nNamespace NDP_UE_VB\n\n    &#39; Define a custom parameter attribute that takes a single message argument.\n    &lt;AttributeUsage(AttributeTargets.Parameter)&gt;  _\n    Public Class ArgumentUsageAttribute\n        Inherits Attribute\n           \n        &#39; The constructor saves the message and creates a unique identifier.\n        Public Sub New(UsageMsg As String)\n            Me.usageMsg = UsageMsg\n            Me.GUIDinstance = Guid.NewGuid()\n        End Sub &#39; New\n\n        &#39; This is storage for the attribute message and unique ID.\n        Protected usageMsg As String\n        Protected GUIDinstance As Guid\n           \n        &#39; This is the Message property for the attribute.\n        Public Property Message() As String\n            Get\n                Return usageMsg\n            End Get\n            Set\n                usageMsg = value\n            End Set\n        End Property \n\n        &#39; Override TypeId to provide a unique identifier for the instance.\n        Public Overrides ReadOnly Property TypeId() As Object\n            Get\n                Return CType(GUIDinstance, Object)\n            End Get\n        End Property\n            \n        &#39; Override ToString() to append the message to what base the generates.\n        Public Overrides Function ToString() As String\n            Return MyBase.ToString() + &quot;:&quot; + usageMsg\n        End Function &#39; ToString\n    End Class &#39; ArgumentUsageAttribute\n\n    Public Class TestClass\n       \n        &#39; Assign an ArgumentUsage attribute to each parameter.\n        &#39; Assign a ParamArray attribute to strList.\n        Public Sub TestMethod( _\n            &lt;ArgumentUsage(&quot;Must pass an array here.&quot;)&gt; _\n            strArray() As String, _\n            &lt;ArgumentUsage(&quot;Can pass a param list or array here.&quot;)&gt; _\n            ParamArray strList() As String)\n        End Sub &#39; TestMethod\n    End Class &#39; TestClass\n\n    Module AttributeTypeIdDemo\n       \n        &#39; Create attributes from the derived class, \n        &#39; and then display the TypeId values.\n        Sub ShowAttributeTypeIds()\n\n            &#39; Get the class type, and then get the MethodInfo object \n            &#39; for TestMethod to access its metadata.\n            Dim clsType As Type = GetType(TestClass)\n            Dim mInfo As MethodInfo = clsType.GetMethod(&quot;TestMethod&quot;)\n              \n            &#39; There will be two elements in pInfoArray, one for each parameter.\n            Dim pInfoArray As ParameterInfo() = mInfo.GetParameters()\n            If Not (pInfoArray Is Nothing) Then\n\n                &#39; Create an instance of the param array attribute on strList.\n                Dim listArrayAttr As ParamArrayAttribute = _\n                    Attribute.GetCustomAttribute(pInfoArray(1), _\n                        GetType(ParamArrayAttribute))\n                 \n                &#39; Create an instance of the argument usage attribute on strArray.\n                Dim arrayUsageAttr1 As ArgumentUsageAttribute = _\n                    Attribute.GetCustomAttribute(pInfoArray(0), _\n                        GetType(ArgumentUsageAttribute))\n                 \n                &#39; Create another instance of the argument usage attribute \n                &#39; on strArray.\n                Dim arrayUsageAttr2 As ArgumentUsageAttribute = _\n                    Attribute.GetCustomAttribute(pInfoArray(0), _\n                        GetType(ArgumentUsageAttribute))\n                 \n                &#39; Create an instance of the argument usage attribute on strList.\n                Dim listUsageAttr As ArgumentUsageAttribute = _\n                    Attribute.GetCustomAttribute(pInfoArray(1), _\n                        GetType(ArgumentUsageAttribute))\n                 \n                &#39; Display the attributes and corresponding TypeId values.\n                Console.WriteLine(vbCrLf &amp; &quot;&quot;&quot;{0}&quot;&quot; &quot; &amp; vbCrLf &amp; &quot;TypeId: {1}&quot;, _\n                    listArrayAttr.ToString(), listArrayAttr.TypeId)\n                Console.WriteLine(vbCrLf &amp; &quot;&quot;&quot;{0}&quot;&quot; &quot; &amp; vbCrLf &amp; &quot;TypeId: {1}&quot;, _\n                    arrayUsageAttr1.ToString(), arrayUsageAttr1.TypeId)\n                Console.WriteLine(vbCrLf &amp; &quot;&quot;&quot;{0}&quot;&quot; &quot; &amp; vbCrLf &amp; &quot;TypeId: {1}&quot;, _\n                    arrayUsageAttr2.ToString(), arrayUsageAttr2.TypeId)\n                Console.WriteLine(vbCrLf &amp; &quot;&quot;&quot;{0}&quot;&quot; &quot; &amp; vbCrLf &amp; &quot;TypeId: {1}&quot;, _\n                    listUsageAttr.ToString(), listUsageAttr.TypeId)\n            Else\n                Console.WriteLine(&quot;The parameters information could not &quot; &amp; _\n                    &quot;be retrieved for method {0}.&quot;, mInfo.Name)\n            End If\n        End Sub &#39; ShowAttributeTypeIds\n\n        Sub Main()\n            Console.WriteLine( _\n                &quot;This example of the Attribute.TypeId property&quot; &amp; _\n                vbCrLf &amp; &quot;generates the following output.&quot;)\n            Console.WriteLine( _\n                vbCrLf &amp; &quot;Create instances from a derived Attribute &quot; &amp; _\n                &quot;class that implements TypeId, &quot; &amp; vbCrLf &amp; &quot;and then &quot; &amp; _\n                &quot;display the attributes and corresponding TypeId values:&quot; )\n\n            ShowAttributeTypeIds( )\n        End Sub &#39; Main\n\n    End Module &#39; AttributeTypeIdDemo\nEnd Namespace &#39; NDP_UE_VB\n\n&#39; This example of the Attribute.TypeId property\n&#39; generates the following output.\n&#39; \n&#39; Create instances from a derived Attribute class that implements TypeId,\n&#39; and then display the attributes and corresponding TypeId values:\n&#39; \n&#39; &quot;System.ParamArrayAttribute&quot;\n&#39; TypeId: System.ParamArrayAttribute\n&#39; \n&#39; &quot;NDP_UE_VB.ArgumentUsageAttribute:Must pass an array here.&quot;\n&#39; TypeId: f312e528-3ff9-4587-9e6d-8108b62f2980\n&#39; \n&#39; &quot;NDP_UE_VB.ArgumentUsageAttribute:Must pass an array here.&quot;\n&#39; TypeId: 7b2cf0ec-b166-4557-a7ab-137a57c87226\n&#39; \n&#39; &quot;NDP_UE_VB.ArgumentUsageAttribute:Can pass a param list or array here.&quot;\n&#39; TypeId: 0b05f2a7-4a15-4d24-99f0-8503b238a18c\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Attribute.TypeId#1\">// Example for the Attribute.TypeId property.\nusing System;\nusing System.Reflection;\n\nnamespace NDP_UE_CS \n{\n    // Define a custom parameter attribute that takes a single message argument.\n    [AttributeUsage( AttributeTargets.Parameter )]\n    public class ArgumentUsageAttribute : Attribute\n    {\n        // The constructor saves the message and creates a unique identifier.\n        public ArgumentUsageAttribute( string UsageMsg )\n        {\n            this.usageMsg = UsageMsg;\n            this.instanceGUID = Guid.NewGuid( );\n        }\n\n        // This is storage for the attribute message and unique ID.\n        protected string usageMsg;\n        protected Guid instanceGUID;\n\n        // This is the Message property for the attribute.\n        public string Message\n        {\n            get { return usageMsg; }\n            set { usageMsg = value; }\n        }\n\n        // Override TypeId to provide a unique identifier for the instance.\n        public override object TypeId\n        {\n            get { return (object)instanceGUID; }\n        }\n\n        // Override ToString() to append the message to what the base generates.\n        public override string ToString( )\n        {\n            return base.ToString( ) + &quot;:&quot; + usageMsg;\n        }\n    }\n\n    public class TestClass \n    {\n        // Assign an ArgumentUsage attribute to each parameter.\n        // Assign a ParamArray attribute to strList using the params keyword.\n        public void TestMethod(\n            [ArgumentUsage(&quot;Must pass an array here.&quot;)]\n            String[] strArray,\n            [ArgumentUsage(&quot;Can pass a param list or array here.&quot;)]\n            params String[] strList)\n        { }\n    }\n\n    class AttributeTypeIdDemo \n    {\n        static void ShowAttributeTypeIds( ) \n        {\n            // Get the class type, and then get the MethodInfo object \n            // for TestMethod to access its metadata.\n            Type clsType = typeof( TestClass );\n            MethodInfo mInfo = clsType.GetMethod(&quot;TestMethod&quot;);\n\n            // There will be two elements in pInfoArray, one for each parameter.\n            ParameterInfo[] pInfoArray = mInfo.GetParameters();\n            if (pInfoArray != null) \n            {\n                // Create an instance of the param array attribute on strList.\n                ParamArrayAttribute listArrayAttr = (ParamArrayAttribute)\n                    Attribute.GetCustomAttribute( pInfoArray[1], \n                        typeof(ParamArrayAttribute) );\n\n                // Create an instance of the argument usage attribute on strArray.\n                ArgumentUsageAttribute arrayUsageAttr1 = (ArgumentUsageAttribute)\n                    Attribute.GetCustomAttribute( pInfoArray[0], \n                        typeof(ArgumentUsageAttribute) );\n\n                // Create another instance of the argument usage attribute \n                // on strArray.\n                ArgumentUsageAttribute arrayUsageAttr2 = (ArgumentUsageAttribute)\n                    Attribute.GetCustomAttribute( pInfoArray[0], \n                        typeof(ArgumentUsageAttribute) );\n\n                // Create an instance of the argument usage attribute on strList.\n                ArgumentUsageAttribute listUsageAttr = (ArgumentUsageAttribute)\n                    Attribute.GetCustomAttribute( pInfoArray[1], \n                        typeof(ArgumentUsageAttribute) );\n\n                // Display the attributes and corresponding TypeId values.\n                Console.WriteLine( &quot;<br>\\&quot;{0}\\&quot; <br>TypeId: {1}&quot;,\n                    listArrayAttr.ToString(), listArrayAttr.TypeId );\n                Console.WriteLine( &quot;<br>\\&quot;{0}\\&quot; <br>TypeId: {1}&quot;,\n                    arrayUsageAttr1.ToString(), arrayUsageAttr1.TypeId );\n                Console.WriteLine( &quot;<br>\\&quot;{0}\\&quot; <br>TypeId: {1}&quot;,\n                    arrayUsageAttr2.ToString(), arrayUsageAttr2.TypeId );\n                Console.WriteLine( &quot;<br>\\&quot;{0}\\&quot; <br>TypeId: {1}&quot;,\n                    listUsageAttr.ToString(), listUsageAttr.TypeId );\n            }\n            else\n                Console.WriteLine( &quot;The parameters information could &quot; +\n                    &quot;not be retrieved for method {0}.&quot;, mInfo.Name );\n        }\n\n        static void Main( ) \n        {\n            Console.WriteLine( \n                &quot;This example of the Attribute.TypeId property<br>&quot; +\n                &quot;generates the following output.&quot; );\n            Console.WriteLine( \n                &quot;<br>Create instances from a derived Attribute &quot; +\n                &quot;class that implements TypeId, <br>and then &quot; +\n                &quot;display the attributes and corresponding TypeId values:&quot; );\n\n            ShowAttributeTypeIds( );\n        }\n    }\n}\n\n/*\nThis example of the Attribute.TypeId property\ngenerates the following output.\n\nCreate instances from a derived Attribute class that implements TypeId,\nand then display the attributes and corresponding TypeId values:\n\n&quot;System.ParamArrayAttribute&quot;\nTypeId: System.ParamArrayAttribute\n\n&quot;NDP_UE_CS.ArgumentUsageAttribute:Must pass an array here.&quot;\nTypeId: d03a23f4-2536-4478-920f-8b0426dec7f1\n\n&quot;NDP_UE_CS.ArgumentUsageAttribute:Must pass an array here.&quot;\nTypeId: a1b412e8-3047-49fa-8d03-7660d37ef718\n\n&quot;NDP_UE_CS.ArgumentUsageAttribute:Can pass a param list or array here.&quot;\nTypeId: 7ac2bf61-0327-48d6-a07e-eb9aaf3dd45e\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Attribute_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_Attribute_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value that indicates whether this instance is equal to a specified object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to compare with this instance or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>obj</code> equals the type and value of this instance; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example defines two custom parameter <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a> classes, then creates several objects of each class and shows the use of the Equals method to compare them.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Attribute.Equals#1\">// Example for the Attribute.Equals( object ) method.\nusing System;\nusing System.Reflection;\n\nnamespace NDP_UE_CS \n{\n    // Define a custom parameter attribute that takes a single message argument.\n    [AttributeUsage( AttributeTargets.Parameter )]\n    public class ArgumentUsageAttribute : Attribute\n    {\n        // This is the attribute constructor.\n        public ArgumentUsageAttribute( string UsageMsg )\n        {\n            this.usageMsg = UsageMsg;\n        }\n\n        // usageMsg is storage for the attribute message.\n        protected string usageMsg;\n\n        // Override ToString() to append the message to what the base generates.\n        public override string ToString( )\n        {\n            return base.ToString( ) + &quot;:&quot; + usageMsg;\n        }\n    }\n\n    // Define a custom parameter attribute that generates \n    // a GUID for each instance.\n    [AttributeUsage( AttributeTargets.Parameter )]\n    public class ArgumentIDAttribute : Attribute\n    {\n        // This is the attribute constructor, which generates the GUID.\n        public ArgumentIDAttribute( )\n        {\n            this.instanceGUID = Guid.NewGuid( );\n        }\n\n        // instanceGUID is storage for the generated GUID.\n        protected Guid instanceGUID;\n\n        // Override ToString() to append the GUID to what the base generates.\n        public override string ToString( )\n        {\n            return base.ToString( ) + &quot;.&quot; + instanceGUID.ToString( );\n        }\n    }\n\n    public class TestClass \n    {\n        // Assign an ArgumentID attribute to each parameter.\n        // Assign an ArgumentUsage attribute to each parameter.\n        public void TestMethod(\n            [ArgumentID]\n            [ArgumentUsage(&quot;Must pass an array here.&quot;)]\n            String[] strArray,\n            [ArgumentID]\n            [ArgumentUsage(&quot;Can pass param list or array here.&quot;)]\n            params String[] strList)\n        { }\n    }\n\n    class AttributeEqualsDemo \n    {\n        // Create Attribute objects and compare them.\n        static void Main( ) \n        {\n            Console.WriteLine( &quot;This example of Attribute.Equals( object ) &quot; +\n                &quot;generates the following output.&quot; );\n\n            // Get the class type, and then get the MethodInfo object \n            // for TestMethod to access its metadata.\n            Type clsType = typeof( TestClass );\n            MethodInfo mInfo = clsType.GetMethod(&quot;TestMethod&quot;);\n\n            // There will be two elements in pInfoArray, one for each parameter.\n            ParameterInfo[] pInfoArray = mInfo.GetParameters();\n            if (pInfoArray != null) \n            {\n                // Create an instance of the argument usage attribute on strArray.\n                ArgumentUsageAttribute arrayUsageAttr1 = (ArgumentUsageAttribute)\n                    Attribute.GetCustomAttribute( pInfoArray[0], \n                        typeof(ArgumentUsageAttribute) );\n\n                // Create another instance of the argument usage attribute \n                // on strArray.\n                ArgumentUsageAttribute arrayUsageAttr2 = (ArgumentUsageAttribute)\n                    Attribute.GetCustomAttribute( pInfoArray[0], \n                        typeof(ArgumentUsageAttribute) );\n\n                // Create an instance of the argument usage attribute on strList.\n                ArgumentUsageAttribute listUsageAttr = (ArgumentUsageAttribute)\n                    Attribute.GetCustomAttribute( pInfoArray[1], \n                        typeof(ArgumentUsageAttribute) );\n\n                // Create an instance of the argument ID attribute on strArray.\n                ArgumentIDAttribute arrayIDAttr1 = (ArgumentIDAttribute)\n                    Attribute.GetCustomAttribute( pInfoArray[0], \n                        typeof(ArgumentIDAttribute) );\n\n                // Create another instance of the argument ID attribute on strArray.\n                ArgumentIDAttribute arrayIDAttr2 = (ArgumentIDAttribute)\n                    Attribute.GetCustomAttribute( pInfoArray[0], \n                        typeof(ArgumentIDAttribute) );\n\n                // Create an instance of the argument ID attribute on strList.\n                ArgumentIDAttribute listIDAttr = (ArgumentIDAttribute)\n                    Attribute.GetCustomAttribute( pInfoArray[1], \n                        typeof(ArgumentIDAttribute) );\n\n                // Compare various pairs of attributes for equality.\n                Console.WriteLine( &quot;<br>Compare a usage attribute instance to &quot; +\n                    &quot;another instance of the same attribute:&quot; );\n                Console.WriteLine( &quot;   \\&quot;{0}\\&quot; == <br>   \\&quot;{1}\\&quot; ? {2}&quot;,\n                    arrayUsageAttr1.ToString(), arrayUsageAttr2.ToString(), \n                    arrayUsageAttr1.Equals( arrayUsageAttr2 ) );\n\n                Console.WriteLine( &quot;<br>Compare a usage attribute to &quot; +\n                    &quot;another usage attribute:&quot; );\n                Console.WriteLine( &quot;   \\&quot;{0}\\&quot; == <br>   \\&quot;{1}\\&quot; ? {2}&quot;,\n                    arrayUsageAttr1.ToString(), listUsageAttr.ToString(), \n                    arrayUsageAttr1.Equals( listUsageAttr ) );\n\n                Console.WriteLine( &quot;<br>Compare an ID attribute instance to &quot; +\n                    &quot;another instance of the same attribute:&quot; );\n                Console.WriteLine( &quot;   \\&quot;{0}\\&quot; == <br>   \\&quot;{1}\\&quot; ? {2}&quot;,\n                    arrayIDAttr1.ToString(), arrayIDAttr2.ToString(), \n                    arrayIDAttr1.Equals( arrayIDAttr2 ) );\n\n                Console.WriteLine( &quot;<br>Compare an ID attribute to another ID attribute:&quot; );\n                Console.WriteLine( &quot;   \\&quot;{0}\\&quot; == <br>   \\&quot;{1}\\&quot; ? {2}&quot;,\n                    arrayIDAttr1.ToString(), listIDAttr.ToString(), \n                    arrayIDAttr1.Equals( listIDAttr ) );\n            }\n            else\n                Console.WriteLine( &quot;The parameters information could &quot; +\n                    &quot;not be retrieved for method {0}.&quot;, mInfo.Name);\n        }\n    }\n}\n\n/*\nThis example of Attribute.Equals( object ) generates the following output.\n\nCompare a usage attribute instance to another instance of the same attribute:\n   &quot;NDP_UE_CS.ArgumentUsageAttribute:Must pass an array here.&quot; ==\n   &quot;NDP_UE_CS.ArgumentUsageAttribute:Must pass an array here.&quot; ? True\n\nCompare a usage attribute to another usage attribute:\n   &quot;NDP_UE_CS.ArgumentUsageAttribute:Must pass an array here.&quot; ==\n   &quot;NDP_UE_CS.ArgumentUsageAttribute:Can pass param list or array here.&quot; ? False\n\nCompare an ID attribute instance to another instance of the same attribute:\n   &quot;NDP_UE_CS.ArgumentIDAttribute.06abf046-0c38-47ac-b215-09e1daa7f37d&quot; ==\n   &quot;NDP_UE_CS.ArgumentIDAttribute.cea23c39-f14b-4e95-bee2-9f661d8cd64b&quot; ? False\n\nCompare an ID attribute to another ID attribute:\n   &quot;NDP_UE_CS.ArgumentIDAttribute.06abf046-0c38-47ac-b215-09e1daa7f37d&quot; ==\n   &quot;NDP_UE_CS.ArgumentIDAttribute.bdeb6f3e-18aa-410b-bef6-9788956b008c&quot; ? False\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Attribute.Equals#1\">// Example for the Attribute.Equals( Object* ) method.\nusing namespace System;\nusing namespace System::Reflection;\n\nnamespace NDP_UE_CPP\n{\n   // Define a custom parameter attribute that takes a single message argument.\n\n   [AttributeUsage(AttributeTargets::Parameter)]\n   public ref class ArgumentUsageAttribute: public Attribute\n   {\n   protected:\n\n      // usageMsg is storage for the attribute message.\n      String^ usageMsg;\n\n   public:\n\n      // This is the attribute constructor.\n      ArgumentUsageAttribute( String^ UsageMsg )\n      {\n         this-&gt;usageMsg = UsageMsg;\n      }\n\n\n      // Override ToString() to append the message to what the base generates.\n      virtual String^ ToString() override\n      {\n         return String::Concat( Attribute::ToString(), &quot;:&quot;, usageMsg );\n      }\n\n   };\n\n\n   // Define a custom parameter attribute that generates a GUID for each instance.\n\n   [AttributeUsage(AttributeTargets::Parameter)]\n   public ref class ArgumentIDAttribute: public Attribute\n   {\n   protected:\n\n      // instanceGUID is storage for the generated GUID.\n      Guid instanceGUID;\n\n   public:\n\n      // This is the attribute constructor, which generates the GUID.\n      ArgumentIDAttribute()\n      {\n         this-&gt;instanceGUID = Guid::NewGuid();\n      }\n\n      // Override ToString() to append the GUID to what the base generates.\n      virtual String^ ToString() override\n      {\n         return String::Concat( Attribute::ToString(), &quot;.&quot;, instanceGUID.ToString() );\n      }\n   };\n\n   public ref class TestClass\n   {\n   public:\n\n      // Assign an ArgumentID attribute to each parameter.\n      // Assign an ArgumentUsage attribute to each parameter.\n      void TestMethod( [ArgumentID][ArgumentUsage(&quot;Must pass an array here.&quot;)]array&lt;String^&gt;^strArray, \n                       [ArgumentID][ArgumentUsage(&quot;Can pass param list or array here.&quot;)]array&lt;String^&gt;^strList ){}\n\n   };\n\n\n   // Create Attribute objects and compare them.\n   void CompareAttributes()\n   {\n      // Get the class type, and then get the MethodInfo object \n      // for TestMethod to access its metadata.\n      Type^ clsType = TestClass::typeid;\n      MethodInfo^ mInfo = clsType-&gt;GetMethod( &quot;TestMethod&quot; );\n\n      // There will be two elements in pInfoArray, one for each parameter.\n      array&lt;ParameterInfo^&gt;^pInfoArray = mInfo-&gt;GetParameters();\n      if ( pInfoArray != nullptr )\n      {\n         // Create an instance of the argument usage attribute on strArray.\n         ArgumentUsageAttribute^ arrayUsageAttr1 = static_cast&lt;ArgumentUsageAttribute^&gt;(Attribute::GetCustomAttribute( pInfoArray[ 0 ], ArgumentUsageAttribute::typeid ));\n\n         // Create another instance of the argument usage attribute \n         // on strArray.\n         ArgumentUsageAttribute^ arrayUsageAttr2 = static_cast&lt;ArgumentUsageAttribute^&gt;(Attribute::GetCustomAttribute( pInfoArray[ 0 ], ArgumentUsageAttribute::typeid ));\n\n         // Create an instance of the argument usage attribute on strList.\n         ArgumentUsageAttribute^ listUsageAttr = static_cast&lt;ArgumentUsageAttribute^&gt;(Attribute::GetCustomAttribute( pInfoArray[ 1 ], ArgumentUsageAttribute::typeid ));\n\n         // Create an instance of the argument ID attribute on strArray.\n         ArgumentIDAttribute^ arrayIDAttr1 = static_cast&lt;ArgumentIDAttribute^&gt;(Attribute::GetCustomAttribute( pInfoArray[ 0 ], ArgumentIDAttribute::typeid ));\n\n         // Create another instance of the argument ID attribute on strArray.\n         ArgumentIDAttribute^ arrayIDAttr2 = static_cast&lt;ArgumentIDAttribute^&gt;(Attribute::GetCustomAttribute( pInfoArray[ 0 ], ArgumentIDAttribute::typeid ));\n\n         // Create an instance of the argument ID attribute on strList.\n         ArgumentIDAttribute^ listIDAttr = static_cast&lt;ArgumentIDAttribute^&gt;(Attribute::GetCustomAttribute( pInfoArray[ 1 ], ArgumentIDAttribute::typeid ));\n\n         // Compare various pairs of attributes for equality.\n         Console::WriteLine( &quot;<br>Compare a usage attribute instance to &quot;\n         &quot;another instance of the same attribute:&quot; );\n         Console::WriteLine( &quot;   \\&quot;{0}\\&quot; == <br>   \\&quot;{1}\\&quot; ? {2}&quot;, arrayUsageAttr1-&gt;ToString(), arrayUsageAttr2-&gt;ToString(), arrayUsageAttr1-&gt;Equals( arrayUsageAttr2 ) );\n         Console::WriteLine( &quot;<br>Compare a usage attribute to another usage attribute:&quot; );\n         Console::WriteLine( &quot;   \\&quot;{0}\\&quot; == <br>   \\&quot;{1}\\&quot; ? {2}&quot;, arrayUsageAttr1-&gt;ToString(), listUsageAttr-&gt;ToString(), arrayUsageAttr1-&gt;Equals( listUsageAttr ) );\n         Console::WriteLine( &quot;<br>Compare an ID attribute instance to &quot;\n         &quot;another instance of the same attribute:&quot; );\n         Console::WriteLine( &quot;   \\&quot;{0}\\&quot; == <br>   \\&quot;{1}\\&quot; ? {2}&quot;, arrayIDAttr1-&gt;ToString(), arrayIDAttr2-&gt;ToString(), arrayIDAttr1-&gt;Equals( arrayIDAttr2 ) );\n         Console::WriteLine( &quot;<br>Compare an ID attribute to another ID attribute:&quot; );\n         Console::WriteLine( &quot;   \\&quot;{0}\\&quot; == <br>   \\&quot;{1}\\&quot; ? {2}&quot;, arrayIDAttr1-&gt;ToString(), listIDAttr-&gt;ToString(), arrayIDAttr1-&gt;Equals( listIDAttr ) );\n      }\n      else\n            Console::WriteLine( &quot;The parameters information could &quot;\n      &quot;not be retrieved for method {0}.&quot;, mInfo-&gt;Name );\n   }\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of Attribute::Equals( Object* ) &quot;\n   &quot;generates the following output.&quot; );\n   NDP_UE_CPP::CompareAttributes();\n}\n\n/*\nThis example of Attribute::Equals( Object* ) generates the following output.\n\nCompare a usage attribute instance to another instance of the same attribute:\n   &quot;NDP_UE_CPP.ArgumentUsageAttribute:Must pass an array here.&quot; ==\n   &quot;NDP_UE_CPP.ArgumentUsageAttribute:Must pass an array here.&quot; ? True\n\nCompare a usage attribute to another usage attribute:\n   &quot;NDP_UE_CPP.ArgumentUsageAttribute:Must pass an array here.&quot; ==\n   &quot;NDP_UE_CPP.ArgumentUsageAttribute:Can pass param list or array here.&quot; ? False\n\nCompare an ID attribute instance to another instance of the same attribute:\n   &quot;NDP_UE_CPP.ArgumentIDAttribute.28db2434-1031-469a-9a13-babeb9be9e2c&quot; ==\n   &quot;NDP_UE_CPP.ArgumentIDAttribute.1140dcb9-7341-4ba0-b2de-e9d8f0955216&quot; ? False\n\nCompare an ID attribute to another ID attribute:\n   &quot;NDP_UE_CPP.ArgumentIDAttribute.28db2434-1031-469a-9a13-babeb9be9e2c&quot; ==\n   &quot;NDP_UE_CPP.ArgumentIDAttribute.7f983425-5ea9-4c90-b536-bd6229fdfe63&quot; ? False\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Attribute.Equals#1\">&#39; Example for the Attribute.Equals( Object ) method.\nImports System\nImports System.Reflection\nImports Microsoft.VisualBasic\n\nNamespace NDP_UE_VB\n\n    &#39; Define a custom parameter attribute that takes a single message argument.\n    &lt;AttributeUsage(AttributeTargets.Parameter)&gt;  _\n    Public Class ArgumentUsageAttribute\n        Inherits Attribute\n           \n        &#39; This is the attribute constructor.\n        Public Sub New(UsageMsg As String)\n            Me.usageMsg = UsageMsg\n        End Sub &#39; New\n\n        &#39; usageMsg is storage for the attribute message.\n        Protected usageMsg As String\n           \n        &#39; Override ToString() to append the message to what the base generates.\n        Public Overrides Function ToString() As String\n            Return MyBase.ToString() + &quot;:&quot; + usageMsg\n        End Function &#39; ToString\n    End Class &#39; ArgumentUsageAttribute\n\n    &#39; Define a custom parameter attribute that generates a GUID for each instance.\n    &lt;AttributeUsage(AttributeTargets.Parameter)&gt;  _\n    Public Class ArgumentIDAttribute\n        Inherits Attribute\n           \n        &#39; This is the attribute constructor, which generates the GUID.\n        Public Sub New()\n            Me.GUIDinstance = Guid.NewGuid()\n        End Sub &#39; New\n\n        &#39; instanceGUID is storage for the generated GUID.\n        Protected GUIDinstance As Guid\n           \n        &#39; Override ToString() to append the GUID to what the base generates.\n        Public Overrides Function ToString() As String\n            Return MyBase.ToString() + &quot;.&quot; + GUIDinstance.ToString()\n        End Function &#39; ToString\n    End Class &#39; ArgumentIDAttribute\n\n    Public Class TestClass\n           \n        &#39; Assign an ArgumentID attribute to each parameter.\n        &#39; Assign an ArgumentUsage attribute to each parameter.\n        Public Sub TestMethod( _\n            &lt;ArgumentID(), ArgumentUsage(&quot;Must pass an array here.&quot;)&gt; _\n            strArray() As String, _\n            &lt;ArgumentID(), ArgumentUsage(&quot;Can pass param list or array here.&quot;)&gt; _\n            ParamArray strList() As String)\n        End Sub &#39; TestMethod\n    End Class &#39; TestClass\n\n    Module AttributeEqualsDemo\n       \n        &#39; Create Attribute objects and compare them.\n        Sub CompareAttributes()\n\n            &#39; Get the class type, and then get the MethodInfo object \n            &#39; for TestMethod to access its metadata.\n            Dim clsType As Type = GetType(TestClass)\n            Dim mInfo As MethodInfo = clsType.GetMethod(&quot;TestMethod&quot;)\n              \n            &#39; There will be two elements in pInfoArray, one for each parameter.\n            Dim pInfoArray As ParameterInfo() = mInfo.GetParameters()\n            If Not (pInfoArray Is Nothing) Then\n\n                &#39; Create an instance of the argument usage attribute on strArray.\n                Dim arrayUsageAttr1 As ArgumentUsageAttribute = _\n                    Attribute.GetCustomAttribute(pInfoArray(0), _\n                        GetType(ArgumentUsageAttribute))\n                 \n                &#39; Create another instance of the argument usage attribute \n                &#39; on strArray.\n                Dim arrayUsageAttr2 As ArgumentUsageAttribute = _\n                    Attribute.GetCustomAttribute(pInfoArray(0), _\n                        GetType(ArgumentUsageAttribute))\n                 \n                &#39; Create an instance of the argument usage attribute on strList.\n                Dim listUsageAttr As ArgumentUsageAttribute = _\n                    Attribute.GetCustomAttribute(pInfoArray(1), _\n                        GetType(ArgumentUsageAttribute))\n                 \n                &#39; Create an instance of the argument ID attribute on strArray.\n                Dim arrayIDAttr1 As ArgumentIDAttribute = _\n                    Attribute.GetCustomAttribute(pInfoArray(0), _\n                        GetType(ArgumentIDAttribute))\n                 \n                &#39; Create another instance of the argument ID attribute on strArray.\n                Dim arrayIDAttr2 As ArgumentIDAttribute = _\n                    Attribute.GetCustomAttribute(pInfoArray(0), _\n                        GetType(ArgumentIDAttribute))\n                \n                &#39; Create an instance of the argument ID attribute on strList.\n                Dim listIDAttr As ArgumentIDAttribute = _\n                    Attribute.GetCustomAttribute(pInfoArray(1), _\n                        GetType(ArgumentIDAttribute))\n                 \n                &#39; Compare various pairs of attributes for equality.\n                Console.WriteLine(vbCrLf &amp; &quot;Compare a usage attribute instance &quot; &amp; _\n                    &quot;to another instance of the same attribute:&quot;)\n                Console.WriteLine(&quot;   &quot;&quot;{0}&quot;&quot; = &quot; &amp; vbCrLf &amp; &quot;   &quot;&quot;{1}&quot;&quot; ? {2}&quot;, _\n                    arrayUsageAttr1.ToString(), arrayUsageAttr2.ToString(), _\n                    arrayUsageAttr1.Equals(arrayUsageAttr2))\n                 \n                Console.WriteLine(vbCrLf &amp; _\n                    &quot;Compare a usage attribute to another usage attribute:&quot;)\n                Console.WriteLine(&quot;   &quot;&quot;{0}&quot;&quot; = &quot; &amp; vbCrLf &amp; &quot;   &quot;&quot;{1}&quot;&quot; ? {2}&quot;, _\n                    arrayUsageAttr1.ToString(), listUsageAttr.ToString(), _\n                    arrayUsageAttr1.Equals(listUsageAttr))\n                 \n                Console.WriteLine(vbCrLf &amp; &quot;Compare an ID attribute instance &quot; &amp; _\n                    &quot;to another instance of the same attribute:&quot;)\n                Console.WriteLine(&quot;   &quot;&quot;{0}&quot;&quot; = &quot; &amp; vbCrLf &amp; &quot;   &quot;&quot;{1}&quot;&quot; ? {2}&quot;, _\n                    arrayIDAttr1.ToString(), arrayIDAttr2.ToString(), _\n                    arrayIDAttr1.Equals(arrayIDAttr2))\n                 \n                Console.WriteLine(vbCrLf &amp; _\n                    &quot;Compare an ID attribute to another ID attribute:&quot;)\n                Console.WriteLine(&quot;   &quot;&quot;{0}&quot;&quot; = &quot; &amp; vbCrLf &amp; &quot;   &quot;&quot;{1}&quot;&quot; ? {2}&quot;, _\n                    arrayIDAttr1.ToString(), listIDAttr.ToString(), _\n                    arrayIDAttr1.Equals(listIDAttr))\n            Else\n                Console.WriteLine(&quot;The parameters information could &quot; &amp; _\n                    &quot;not be retrieved for method {0}.&quot;, mInfo.Name)\n            End If\n        End Sub &#39; CompareAttributes\n\n        Sub Main()\n            Console.WriteLine(&quot;This example of Attribute.Equals( Object ) &quot; &amp; _\n                &quot;generates the following output.&quot; )\n\n            CompareAttributes( )\n              \n        End Sub &#39; Main\n    End Module &#39; AttributeEqualsDemo\nEnd Namespace &#39; NDP_UE_VB\n\n&#39; This example of Attribute.Equals( Object ) generates the following output.\n&#39; \n&#39; Compare a usage attribute instance to another instance of the same attribute:\n&#39;    &quot;NDP_UE_VB.ArgumentUsageAttribute:Must pass an array here.&quot; =\n&#39;    &quot;NDP_UE_VB.ArgumentUsageAttribute:Must pass an array here.&quot; ? True\n&#39; \n&#39; Compare a usage attribute to another usage attribute:\n&#39;    &quot;NDP_UE_VB.ArgumentUsageAttribute:Must pass an array here.&quot; =\n&#39;    &quot;NDP_UE_VB.ArgumentUsageAttribute:Can pass param list or array here.&quot; ? False\n&#39; \n&#39; Compare an ID attribute instance to another instance of the same attribute:\n&#39;    &quot;NDP_UE_VB.ArgumentIDAttribute.aa2c2346-ca87-40d6-afb7-5e3bc1637351&quot; =\n&#39;    &quot;NDP_UE_VB.ArgumentIDAttribute.4192c26c-9a7b-4a74-97fc-6c3dfbc2cdfe&quot; ? False\n&#39; \n&#39; Compare an ID attribute to another ID attribute:\n&#39;    &quot;NDP_UE_VB.ArgumentIDAttribute.aa2c2346-ca87-40d6-afb7-5e3bc1637351&quot; =\n&#39;    &quot;NDP_UE_VB.ArgumentIDAttribute.237a7337-15f1-469b-a5ce-7503def917b2&quot; ? False\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Attribute_GetCustomAttribute_System_Reflection_Assembly_System_Type_\">\r\n    \r\n            <a id=\"System_Attribute_GetCustomAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttribute(Assembly,Type)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves a custom attribute applied to a specified assembly. Parameters specify the assembly and the type of the custom attribute to search for.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Attribute GetCustomAttribute (System.Reflection.Assembly element, Type attributeType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object derived from the <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> class that describes a reusable collection of modules.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type, or a base type, of the custom attribute to search for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a></div>\r\n                  </div>\r\n                  <p>A reference to the single custom attribute of type <code>attributeType</code> that is applied to <code>element</code>, or <code>null</code> if there is no such attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>element</code> or <code>attributeType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>attributeType</code> is not derived from <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.ambiguousmatchexception\" data-linktype=\"relative-path\">AmbiguousMatchException</a></div>\r\n                  </div>\r\n                  <p>More than one of the requested attributes was found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a> method if you expect more than one value to be returned, or <a class=\"xref\" href=\"system.reflection.ambiguousmatchexception\" data-linktype=\"relative-path\">AmbiguousMatchException</a> will be thrown.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework version 2.0, this method returns security attributes if the attributes are stored in the new metadata format. Assemblies compiled with version 2.0 or later use the new format. Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format. See <a href=\"http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5\" data-linktype=\"external\">Emitting Declarative Security Attributes</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example illustrates the use of the <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_\" data-linktype=\"relative-path\">GetCustomAttribute</a> method taking an <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> as a parameter.  </p>\n<pre><code class=\"lang-cs\" name=\"IsDefined#1\">using System;\nusing System.Reflection;\n\n// Add an AssemblyDescription attribute\n[assembly: AssemblyDescription(&quot;A sample description&quot;)]\nnamespace IsDef1CS\n{\n    public class DemoClass\n    {\n        static void Main(string[] args)\n        {\n            // Get the class type to access its metadata.\n            Type clsType = typeof(DemoClass);\n            // Get the assembly object.\n            Assembly assy = clsType.Assembly;\n            // Store the assembly&#39;s name.\n            String assyName = assy.GetName().Name;\n            // See if the Assembly Description is defined.\n            bool isdef = Attribute.IsDefined(assy, \n                typeof(AssemblyDescriptionAttribute));\n            if (isdef)\n            {\n                // Affirm that the attribute is defined.\n                Console.WriteLine(&quot;The AssemblyDescription attribute &quot; +\n                    &quot;is defined for assembly {0}.&quot;, assyName);\n                // Get the description attribute itself.\n                AssemblyDescriptionAttribute adAttr = \n                    (AssemblyDescriptionAttribute)Attribute.GetCustomAttribute(\n                    assy, typeof(AssemblyDescriptionAttribute));\n                // Display the description.\n                if (adAttr != null)\n                    Console.WriteLine(&quot;The description is \\&quot;{0}\\&quot;.&quot;, \n                        adAttr.Description);\n                else\n                    Console.WriteLine(&quot;The description could not &quot; +\n                        &quot;be retrieved.&quot;);            \n            }\n            else\n                Console.WriteLine(&quot;The AssemblyDescription attribute is not &quot; +\n                    &quot;defined for assembly {0}.&quot;, assyName);\n        }\n    }\n}\n\n/*\n * Output:\n * The AssemblyDescription attribute is defined for assembly IsDef1CS.\n * The description is &quot;A sample description&quot;.\n */\n</code></pre><pre><code class=\"lang-cpp\" name=\"IsDefined#1\">using namespace System;\nusing namespace System::Reflection;\n\n// Add an AssemblyDescription attribute\n[assembly:AssemblyDescription(&quot;A sample description&quot;)];\nnamespace IsDef1CS\n{\n   ref class DemoClass\n   {\n   public:\n      static void Main()\n      {\n         \n         // Get the class type to access its metadata.\n         Type^ clsType = DemoClass::typeid;\n         \n         // Get the assembly object.\n         Assembly^ assy = clsType-&gt;Assembly;\n         \n         // Store the assembly&#39;s name.\n         String^ assyName = assy-&gt;GetName()-&gt;Name;\n         \n         //Type assyType = assy.GetType();\n         // See if the Assembly Description is defined.\n         bool isdef = Attribute::IsDefined( assy, AssemblyDescriptionAttribute::typeid );\n         if ( isdef )\n         {\n            \n            // Affirm that the attribute is defined.\n            Console::WriteLine( &quot;The AssemblyDescription attribute &quot;\n            &quot;is defined for assembly {0}.&quot;, assyName );\n            \n            // Get the description attribute itself.\n            AssemblyDescriptionAttribute^ adAttr = dynamic_cast&lt;AssemblyDescriptionAttribute^&gt;(Attribute::GetCustomAttribute( assy, AssemblyDescriptionAttribute::typeid ));\n            \n            // Display the description.\n            if ( adAttr != nullptr )\n                        Console::WriteLine( &quot;The description is \\&quot;{0}\\&quot;.&quot;, adAttr-&gt;Description );\n            else\n                        Console::WriteLine( &quot;The description could not &quot;\n            &quot;be retrieved.&quot; );\n         }\n         else\n                  Console::WriteLine( &quot;The AssemblyDescription attribute is not &quot;\n         &quot;defined for assembly {0}.&quot;, assyName );\n      }\n\n   };\n\n}\n\n\n/*\n * Output:\n * The AssemblyDescription attributeis defined for assembly IsDef1CS.\n * The description is &quot;A sample description&quot;.\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"IsDefined#1\">Imports System\nImports System.Reflection\nImports Microsoft.VisualBasic\n\n&#39; Add an AssemblyDescription attribute.\n&lt;Assembly: AssemblyDescription(&quot;A sample description&quot;)&gt; \n\nModule DemoModule\n    Sub Main()\n        &#39; Get the assembly for this module.\n        Dim assy As System.Reflection.Assembly = GetType(DemoModule).Assembly\n        &#39; Store the assembly name.\n        Dim assyName As String = assy.GetName().Name\n        &#39; See if the AssemblyDescription attribute is defined.\n        If Attribute.IsDefined(assy, GetType(AssemblyDescriptionAttribute)) _\n            Then\n            &#39; Affirm that the attribute is defined. Assume the filename of\n            &#39; this code example is &quot;IsDef1VB&quot;.\n            Console.WriteLine(&quot;The AssemblyDescription attribute is &quot; &amp; _\n                &quot;defined for assembly {0}.&quot;, assyName)\n            &#39; Get the description attribute itself.\n            Dim attr As Attribute = Attribute.GetCustomAttribute( _\n                assy, GetType(AssemblyDescriptionAttribute))\n            &#39; Display the description.\n            If Not attr Is Nothing And _\n                TypeOf attr Is AssemblyDescriptionAttribute Then\n                Dim adAttr As AssemblyDescriptionAttribute = _\n                    CType(attr, AssemblyDescriptionAttribute)\n                Console.WriteLine(&quot;The description is &quot; &amp; _\n                    Chr(34) &amp; &quot;{0}&quot; &amp; Chr(34) &amp; &quot;.&quot;, adAttr.Description)\n            Else\n                Console.WriteLine(&quot;The description could not be retrieved.&quot;)\n            End If\n        Else\n            Console.WriteLine(&quot;The AssemblyDescription attribute is not &quot; &amp; _\n                              &quot;defined for assembly {0}.&quot;, assyName)\n        End If\n    End Sub\nEnd Module\n\n&#39; Output:\n&#39; The AssemblyDescription attribute is defined for assembly IsDef1VB.\n&#39; The description is &quot;A sample description&quot;.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Attribute_GetCustomAttribute_System_Reflection_MemberInfo_System_Type_\">\r\n    \r\n            <a id=\"System_Attribute_GetCustomAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttribute(MemberInfo,Type)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves a custom attribute applied to a member of a type. Parameters specify the member, and the type of the custom attribute to search for.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Attribute GetCustomAttribute (System.Reflection.MemberInfo element, Type attributeType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object derived from the <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> class that describes a constructor, event, field, method, or property member of a class.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type, or a base type, of the custom attribute to search for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a></div>\r\n                  </div>\r\n                  <p>A reference to the single custom attribute of type <code>attributeType</code> that is applied to <code>element</code>, or <code>null</code> if there is no such attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>element</code> or <code>attributeType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>attributeType</code> is not derived from <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>element</code> is not a constructor, method, property, event, type, or field.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.ambiguousmatchexception\" data-linktype=\"relative-path\">AmbiguousMatchException</a></div>\r\n                  </div>\r\n                  <p>More than one of the requested attributes was found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a></div>\r\n                  </div>\r\n                  <p>A custom attribute type cannot be loaded.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A match is determined in the same way described in the Return Value section of <a class=\"xref\" href=\"system.type#System_Type_IsAssignableFrom_\" data-linktype=\"relative-path\">IsAssignableFrom</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework version 2.0, this method returns security attributes on types, methods, and constructors if the attributes are stored in the new metadata format. Assemblies compiled with version 2.0 or later use the new format. Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format. See <a href=\"http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5\" data-linktype=\"external\">Emitting Declarative Security Attributes</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example illustrates the use of the <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_\" data-linktype=\"relative-path\">GetCustomAttribute</a> method taking a <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> as a parameter.  </p>\n<pre><code class=\"lang-cs\" name=\"IsDefined#4\">using System;\nusing System.Reflection;\n\nnamespace IsDef4CS \n{\n    public class TestClass \n    {\n        // Assign the Obsolete attribute to a method.\n        [Obsolete(&quot;This method is obsolete. Use Method2 instead.&quot;)]\n        public void Method1()\n        {}\n        public void Method2()\n        {}\n    }\n\n    public class DemoClass \n    {\n        static void Main(string[] args) \n        {\n            // Get the class type to access its metadata.\n            Type clsType = typeof(TestClass);\n            // Get the MethodInfo object for Method1.\n            MethodInfo mInfo = clsType.GetMethod(&quot;Method1&quot;);\n            // See if the Obsolete attribute is defined for this method.\n            bool isDef = Attribute.IsDefined(mInfo, typeof(ObsoleteAttribute));\n            // Display the result.\n            Console.WriteLine(&quot;The Obsolete Attribute {0} defined for {1} of class {2}.&quot;,\n                isDef ? &quot;is&quot; : &quot;is not&quot;, mInfo.Name, clsType.Name);\n            // If it&#39;s defined, display the attribute&#39;s message.\n            if (isDef) \n            {\n                ObsoleteAttribute obsAttr = \n                                 (ObsoleteAttribute)Attribute.GetCustomAttribute( \n                                                    mInfo, typeof(ObsoleteAttribute));\n                if (obsAttr != null)\n                    Console.WriteLine(&quot;The message is: \\&quot;{0}\\&quot;.&quot;,\n                        obsAttr.Message);\n                else\n                    Console.WriteLine(&quot;The message could not be retrieved.&quot;);\n            }\n        }\n    }\n}\n\n/*\n * Output:\n * The Obsolete Attribute is defined for Method1 of class TestClass.\n * The message is: &quot;This method is obsolete. Use Method2 instead.&quot;.\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"IsDefined#4\">Imports System\nImports System.Reflection\n\nModule DemoModule\n\n    Public Class TestClass\n        &#39; Assign the Obsolete attribute to a method.\n        &lt;Obsolete(&quot;This method is obsolete. Use Method2() instead.&quot;)&gt; _\n        Public Sub Method1()\n        End Sub\n\n        Public Sub Method2()\n        End Sub\n    End Class\n\n    Sub Main()\n        &#39; Get the class type to access its metadata.\n        Dim clsType As Type = GetType(TestClass)\n        &#39; Get the MethodInfo object for Method1.\n        Dim mInfo As MethodInfo = clsType.GetMethod(&quot;Method1&quot;)\n        &#39; See if the Obsolete attribute is defined for this method.\n        Dim isDef As Boolean = Attribute.IsDefined(mInfo, _\n            GetType(ObsoleteAttribute))\n        Dim strDef As String\n        If isDef = True Then\n            strDef = &quot;is&quot;\n        Else\n            strDef = &quot;is not&quot;\n        End If\n        &#39; Display the results.\n        Console.WriteLine(&quot;The Obsolete attribute {0} defined for &quot; &amp; _\n            &quot;method {1} of class {2}.&quot;, strDef, mInfo.Name, clsType.Name)\n        &#39; If it&#39;s defined, display the attribute&#39;s message.\n        If isDef = True Then\n            Dim attr As Attribute = Attribute.GetCustomAttribute(mInfo, _\n                GetType(ObsoleteAttribute))\n            If Not attr Is Nothing And TypeOf attr Is ObsoleteAttribute Then\n                Dim obsAttr As ObsoleteAttribute = _\n                    CType(attr, ObsoleteAttribute)\n                Console.WriteLine(&quot;The message is: &quot;&quot;{0}&quot;&quot;&quot;, obsAttr.Message)\n            Else\n                Console.WriteLine(&quot;The message could not be retrieved.&quot;)\n            End If\n        End If\n    End Sub\nEnd Module\n\n&#39; Output:\n&#39; The Obsolete attribute is defined for method Method1 of class TestClass.\n&#39; The message is: &quot;This method is obsolete. Use Method2() instead.&quot;\n</code></pre><pre><code class=\"lang-cpp\" name=\"IsDefined#4\">using namespace System;\nusing namespace System::Reflection;\n\nnamespace IsDef4CS\n{\n   public ref class TestClass\n   {\n   public:\n\n      // Assign the Obsolete attribute to a method.\n\n      [Obsolete(&quot;This method is obsolete. Use Method2 instead.&quot;)]\n      void Method1(){}\n\n      void Method2(){}\n\n   };\n\n   ref class DemoClass\n   {\n   public:\n      static void Main()\n      {\n         \n         // Get the class type to access its metadata.\n         Type^ clsType = TestClass::typeid;\n         \n         // Get the MethodInfo object for Method1.\n         MethodInfo^ mInfo = clsType-&gt;GetMethod( &quot;Method1&quot; );\n         \n         // See if the Obsolete attribute is defined for this method.\n         bool isDef = Attribute::IsDefined( mInfo, ObsoleteAttribute::typeid );\n         \n         // Display the result.\n         Console::WriteLine( &quot;The Obsolete Attribute {0} defined for {1} of class {2}.&quot;, isDef ? (String^)&quot;is&quot; : &quot;is not&quot;, mInfo-&gt;Name, clsType-&gt;Name );\n         \n         // If it&#39;s defined, display the attribute&#39;s message.\n         if ( isDef )\n         {\n            ObsoleteAttribute^ obsAttr = dynamic_cast&lt;ObsoleteAttribute^&gt;(Attribute::GetCustomAttribute( mInfo, ObsoleteAttribute::typeid ));\n            if ( obsAttr != nullptr )\n                        Console::WriteLine( &quot;The message is: \\&quot;{0}\\&quot;.&quot;, obsAttr-&gt;Message );\n            else\n                        Console::WriteLine( &quot;The message could not be retrieved.&quot; );\n         }\n      }\n\n   };\n\n}\n\n\n/*\n * Output:\n * The Obsolete Attribute is defined for Method1 of class TestClass.\n * The message is: &quot;This method is obsolete. Use Method2 instead.&quot;.\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Attribute_GetCustomAttribute_System_Reflection_Module_System_Type_\">\r\n    \r\n            <a id=\"System_Attribute_GetCustomAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttribute(Module,Type)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves a custom attribute applied to a module. Parameters specify the module, and the type of the custom attribute to search for.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Attribute GetCustomAttribute (System.Reflection.Module element, Type attributeType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object derived from the <a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a> class that describes a portable executable file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type, or a base type, of the custom attribute to search for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a></div>\r\n                  </div>\r\n                  <p>A reference to the single custom attribute of type <code>attributeType</code> that is applied to <code>element</code>, or <code>null</code> if there is no such attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>element</code> or <code>attributeType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>attributeType</code> is not derived from <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.ambiguousmatchexception\" data-linktype=\"relative-path\">AmbiguousMatchException</a></div>\r\n                  </div>\r\n                  <p>More than one of the requested attributes was found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example illustrates the use of the <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_\" data-linktype=\"relative-path\">GetCustomAttribute</a> method taking a <a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a> as a parameter.  </p>\n<pre><code class=\"lang-cs\" name=\"IsDefined#2\">using System;\nusing System.Diagnostics;\n\n// Add the Debuggable attribute to the module.\n[module:Debuggable(true, false)]\nnamespace IsDef2CS\n{\n    public class DemoClass\n    {\n        static void Main(string[] args)\n        {\n            // Get the class type to access its metadata.\n            Type clsType = typeof(DemoClass);\n            // See if the Debuggable attribute is defined for this module.\n            bool isDef = Attribute.IsDefined(clsType.Module, \n                typeof(DebuggableAttribute));\n            // Display the result.\n            Console.WriteLine(&quot;The Debuggable attribute {0} &quot; +\n                &quot;defined for Module {1}.&quot;,\n                isDef ? &quot;is&quot; : &quot;is not&quot;,\n                clsType.Module.Name);\n            // If the attribute is defined, display the JIT settings.\n            if (isDef)\n            {\n                // Retrieve the attribute itself.\n                DebuggableAttribute dbgAttr = (DebuggableAttribute)\n                    Attribute.GetCustomAttribute(clsType.Module, \n                    typeof(DebuggableAttribute));\n                if (dbgAttr != null)\n                {\n                    Console.WriteLine(&quot;JITTrackingEnabled is {0}.&quot;,\n                        dbgAttr.IsJITTrackingEnabled);\n                    Console.WriteLine(&quot;JITOptimizerDisabled is {0}.&quot;,\n                        dbgAttr.IsJITOptimizerDisabled);\n                }\n                else\n                    Console.WriteLine(&quot;The Debuggable attribute &quot; +\n                        &quot;could not be retrieved.&quot;);\n            }\n        }\n    }\n}\n\n/*\n * Output:\n * The Debuggable attribute is defined for Module IsDef2CS.exe.\n * JITTrackingEnabled is True.\n * JITOptimizerDisabled is False.\n */\n</code></pre><pre><code class=\"lang-cpp\" name=\"IsDefined#2\">using namespace System;\nusing namespace System::Diagnostics;\n\n// Add the Debuggable attribute to the module.\n[module:Debuggable(true,false)];\nnamespace IsDef2CS\n{\n   ref class DemoClass\n   {\n   public:\n      static void Main()\n      {\n         \n         // Get the class type to access its metadata.\n         Type^ clsType = DemoClass::typeid;\n         \n         // See if the Debuggable attribute is defined for this module.\n         bool isDef = Attribute::IsDefined( clsType-&gt;Module, DebuggableAttribute::typeid );\n         \n         // Display the result.\n         Console::WriteLine( &quot;The Debuggable attribute {0} &quot;\n         &quot;defined for Module {1}.&quot;, isDef ? (String^)&quot;is&quot; : &quot;is not&quot;, clsType-&gt;Module-&gt;Name );\n         \n         // If the attribute is defined, display the JIT settings.\n         if ( isDef )\n         {\n            \n            // Retrieve the attribute itself.\n            DebuggableAttribute^ dbgAttr = dynamic_cast&lt;DebuggableAttribute^&gt;(Attribute::GetCustomAttribute( clsType-&gt;Module, DebuggableAttribute::typeid ));\n            if ( dbgAttr != nullptr )\n            {\n               Console::WriteLine( &quot;JITTrackingEnabled is {0}.&quot;, dbgAttr-&gt;IsJITTrackingEnabled );\n               Console::WriteLine( &quot;JITOptimizerDisabled is {0}.&quot;, dbgAttr-&gt;IsJITOptimizerDisabled );\n            }\n            else\n                        Console::WriteLine( &quot;The Debuggable attribute &quot;\n            &quot;could not be retrieved.&quot; );\n         }\n      }\n\n   };\n\n}\n\n\n/*\n * Output:\n * The Debuggable attribute is defined for Module IsDef2CS.exe.\n * JITTrackingEnabled is True.\n * JITOptimizerDisabled is False.\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"IsDefined#2\">Imports System\nImports System.Reflection\nImports System.Diagnostics\n\n&#39; Add the Debuggable attribute to the module.\n&lt;Module: Debuggable(True, False)&gt; \n\nModule DemoModule\n    Sub Main()\n        &#39; Get the module type information to access its metadata.\n        Dim modType As Type = GetType(DemoModule)\n        &#39; See if the Debuggable attribute is defined.\n        Dim isDef As Boolean = Attribute.IsDefined(modType.Module, _\n                               GetType(DebuggableAttribute))\n        Dim strDef As String\n        If isDef = True Then\n            strDef = &quot;is&quot;\n        Else\n            strDef = &quot;is not&quot;\n        End If\n        &#39; Display the result\n        Console.WriteLine(&quot;The debuggable attribute {0} defined for &quot; &amp; _\n                          &quot;module {1}.&quot;, strDef, modType.Name)\n        &#39; If the attribute is defined, display the JIT settings.\n        If isDef = True Then\n            &#39; Retrieve the attribute itself.\n            Dim attr As Attribute = _\n                Attribute.GetCustomAttribute(modType.Module, _\n                GetType(DebuggableAttribute))\n            If Not attr Is Nothing And TypeOf attr Is DebuggableAttribute Then\n                Dim dbgAttr As DebuggableAttribute = _\n                    CType(attr, DebuggableAttribute)\n                Console.WriteLine(&quot;JITTrackingEnabled is {0}.&quot;, _\n                    dbgAttr.IsJITTrackingEnabled.ToString())\n                Console.WriteLine(&quot;JITOptimizerDisabled is {0}.&quot;, _\n                    dbgAttr.IsJITOptimizerDisabled.ToString())\n            Else\n                Console.WriteLine(&quot;The Debuggable attribute could &quot; &amp; _\n                                  &quot;not be retrieved.&quot;)\n            End If\n        End If\n    End Sub\nEnd Module\n\n&#39; Output:\n&#39; The debuggable attribute is defined for module DemoModule.\n&#39; JITTrackingEnabled is True.\n&#39; JITOptimizerDisabled is False.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Attribute_GetCustomAttribute_System_Reflection_ParameterInfo_System_Type_\">\r\n    \r\n            <a id=\"System_Attribute_GetCustomAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttribute(ParameterInfo,Type)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves a custom attribute applied to a method parameter. Parameters specify the method parameter, and the type of the custom attribute to search for.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Attribute GetCustomAttribute (System.Reflection.ParameterInfo element, Type attributeType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object derived from the <a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a> class that describes a parameter of a member of a class.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type, or a base type, of the custom attribute to search for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a></div>\r\n                  </div>\r\n                  <p>A reference to the single custom attribute of type <code>attributeType</code> that is applied to <code>element</code>, or <code>null</code> if there is no such attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>element</code> or <code>attributeType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>attributeType</code> is not derived from <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.ambiguousmatchexception\" data-linktype=\"relative-path\">AmbiguousMatchException</a></div>\r\n                  </div>\r\n                  <p>More than one of the requested attributes was found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a></div>\r\n                  </div>\r\n                  <p>A custom attribute type cannot be loaded.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>element</code> represents a parameter in a method of a derived type, the return value includes the inheritable custom attributes applied to the same parameter in the overridden base methods.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example defines a custom parameter <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a> class and applies the custom attribute to a method in a derived class and the base of the derived class. The example shows the use of the <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_\" data-linktype=\"relative-path\">GetCustomAttribute</a> method to return the attributes.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Attribute.GetCustomAttribute#1\">// Example for the Attribute::GetCustomAttribute( ParameterInfo*, Type* ) \n// method.\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Reflection;\n\nnamespace NDP_UE_CPP\n{\n\n   // Define a custom parameter attribute that takes a single message argument.\n\n   [AttributeUsage(AttributeTargets::Parameter)]\n   public ref class ArgumentUsageAttribute: public Attribute\n   {\n   protected:\n\n      // usageMsg is storage for the attribute message.\n      String^ usageMsg;\n\n   public:\n\n      // This is the attribute constructor.\n      ArgumentUsageAttribute( String^ UsageMsg )\n      {\n         this-&gt;usageMsg = UsageMsg;\n      }\n\n\n      property String^ Message \n      {\n         // This is the Message property for the attribute.\n         String^ get()\n         {\n            return usageMsg;\n         }\n\n         void set( String^ value )\n         {\n            this-&gt;usageMsg = value;\n         }\n      }\n   };\n\n   public ref class BaseClass\n   {\n   public:\n\n      // Assign an ArgumentUsage attribute to the strArray parameter.\n      // Assign a ParamArray attribute to strList.\n      virtual void TestMethod( [ArgumentUsage(&quot;Must pass an array here.&quot;)]array&lt;String^&gt;^strArray,\n                               ...array&lt;String^&gt;^strList ){}\n   };\n\n   public ref class DerivedClass: public BaseClass\n   {\n   public:\n\n      // Assign an ArgumentUsage attributes to the strList parameter.\n      virtual void TestMethod( array&lt;String^&gt;^strArray, [ArgumentUsage(\n      &quot;Can pass a parameter list or array here.&quot;)]array&lt;String^&gt;^strList ) override {}\n   };\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of Attribute::GetCustomAttribute( Param&quot;\n   &quot;eterInfo*, Type* )<br>generates the following output.&quot; );\n\n   // Get the class type, and then get the MethodInfo object \n   // for TestMethod to access its metadata.\n   Type^ clsType = NDP_UE_CPP::DerivedClass::typeid;\n   MethodInfo^ mInfo = clsType-&gt;GetMethod( &quot;TestMethod&quot; );\n\n   // Iterate through the ParameterInfo array for the method parameters.\n   array&lt;ParameterInfo^&gt;^pInfoArray = mInfo-&gt;GetParameters();\n   if ( pInfoArray != nullptr )\n   {\n      // This implements foreach( ParameterInfo* paramInfo in pInfoArray ).\n      IEnumerator^ myEnum = pInfoArray-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         ParameterInfo^ paramInfo = safe_cast&lt;ParameterInfo^&gt;(myEnum-&gt;Current);\n\n         // See if the ParamArray attribute is defined.\n         bool isDef = Attribute::IsDefined( paramInfo, ParamArrayAttribute::typeid );\n         if ( isDef )\n                  Console::WriteLine( &quot;<br>The ParamArray attribute is defined for <br>&quot;\n         &quot;parameter {0} of method {1}.&quot;, paramInfo-&gt;Name, mInfo-&gt;Name );\n\n         // See if ParamUsageAttribute is defined.  \n         // If so, display a message.\n         NDP_UE_CPP::ArgumentUsageAttribute^ usageAttr = static_cast&lt;NDP_UE_CPP::ArgumentUsageAttribute^&gt;(Attribute::GetCustomAttribute( paramInfo, NDP_UE_CPP::ArgumentUsageAttribute::typeid ));\n         if ( usageAttr != nullptr )\n         {\n            Console::WriteLine( &quot;<br>The ArgumentUsage attribute is defined for <br>&quot;\n            &quot;parameter {0} of method {1}.&quot;, paramInfo-&gt;Name, mInfo-&gt;Name );\n            Console::WriteLine( &quot;<br>    The usage &quot;\n            &quot;message for {0} is:<br>    \\&quot;{1}\\&quot;.&quot;, paramInfo-&gt;Name, usageAttr-&gt;Message );\n         }\n      }\n   }\n   else\n      Console::WriteLine( &quot;The parameters information could &quot;\n   &quot;not be retrieved for method {0}.&quot;, mInfo-&gt;Name );\n}\n\n/*\nThis example of Attribute::GetCustomAttribute( ParameterInfo*, Type* )\ngenerates the following output.\n\nThe ArgumentUsage attribute is defined for\nparameter strArray of method TestMethod.\n\n    The usage message for strArray is:\n    &quot;Must pass an array here.&quot;.\n\nThe ParamArray attribute is defined for\nparameter strList of method TestMethod.\n\nThe ArgumentUsage attribute is defined for\nparameter strList of method TestMethod.\n\n    The usage message for strList is:\n    &quot;Can pass a parameter list or array here.&quot;.\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Attribute.GetCustomAttribute#1\">&#39; Example for the Attribute.GetCustomAttribute( ParameterInfo, Type ) method.\nImports System\nImports System.Reflection\nImports Microsoft.VisualBasic\n\nNamespace NDP_UE_VB\n\n    &#39; Define a custom parameter attribute that takes a single message argument.\n    &lt;AttributeUsage(AttributeTargets.Parameter)&gt;  _\n    Public Class ArgumentUsageAttribute\n        Inherits Attribute\n           \n        &#39; This is the attribute constructor.\n        Public Sub New(UsageMsg As String)\n            Me.usageMsg = UsageMsg\n        End Sub &#39; New\n\n        &#39; usageMsg is storage for the attribute message.\n        Protected usageMsg As String\n           \n        &#39; This is the Message property for the attribute.\n        Public Property Message() As String\n            Get\n                Return usageMsg\n            End Get\n            Set\n                usageMsg = value\n            End Set\n        End Property\n    End Class &#39; ArgumentUsageAttribute \n\n    Public Class BaseClass\n       \n        &#39; Assign an ArgumentUsage attribute to the strArray parameter.\n        &#39; Assign a ParamArray attribute to strList using the ParamArray keyword.\n        Public Overridable Sub TestMethod( _\n            &lt;ArgumentUsage(&quot;Must pass an array here.&quot;)&gt; _\n            strArray() As String, _\n            ParamArray strList() As String)\n        End Sub &#39; TestMethod\n    End Class &#39; BaseClass\n\n    Public Class DerivedClass\n        Inherits BaseClass\n           \n        &#39; Assign an ArgumentUsage attribute to the strList parameter.\n        &#39; Assign a ParamArray attribute to strList using the ParamArray keyword.\n        Public Overrides Sub TestMethod( _\n            strArray() As String, _\n            &lt;ArgumentUsage(&quot;Can pass a parameter list or array here.&quot;)&gt; _\n            ParamArray strList() As String)\n        End Sub &#39; TestMethod\n    End Class &#39; DerivedClass\n\n    Module CustomParamDemo\n       \n        Sub Main()\n            Console.WriteLine( _\n                &quot;This example of Attribute.GetCustomAttribute&quot; &amp; _\n                &quot;( ParameterInfo, Type )&quot; &amp; vbCrLf &amp; _\n                &quot;generates the following output.&quot;)\n              \n            &#39; Get the class type, and then get the MethodInfo object \n            &#39; for TestMethod to access its metadata.\n            Dim clsType As Type = GetType(DerivedClass)\n            Dim mInfo As MethodInfo = clsType.GetMethod(&quot;TestMethod&quot;)\n              \n            &#39; Iterate through the ParameterInfo array for the method parameters.\n            Dim pInfoArray As ParameterInfo() = mInfo.GetParameters()\n            If Not (pInfoArray Is Nothing) Then\n                Dim paramInfo As ParameterInfo\n                For Each paramInfo In  pInfoArray\n\n                    &#39; See if the ParamArray attribute is defined.\n                    Dim isDef As Boolean = _\n                        Attribute.IsDefined(paramInfo, _\n                            GetType(ParamArrayAttribute))\n\n                    If isDef Then\n                        Console.WriteLine( vbCrLf &amp; _\n                            &quot;The ParamArray attribute is defined for &quot; &amp; _\n                            vbCrLf &amp; &quot;parameter {0} of method {1}.&quot;, _\n                            paramInfo.Name, mInfo.Name)\n                    End If\n                    \n                    &#39; See if ParamUsageAttribute is defined.  \n                    &#39; If so, display a message.\n                    Dim usageAttr As ArgumentUsageAttribute = _\n                        Attribute.GetCustomAttribute(paramInfo, _\n                            GetType(ArgumentUsageAttribute))\n\n                    If Not (usageAttr Is Nothing) Then\n                        Console.WriteLine( vbCrLf &amp; &quot;The &quot; &amp; _\n                            &quot;ArgumentUsage attribute is defined for &quot; &amp; _\n                            vbCrLf &amp; &quot;parameter {0} of method {1}.&quot;, _\n                            paramInfo.Name, mInfo.Name)\n                        Console.WriteLine( vbCrLf &amp; _\n                            &quot;    The usage message for {0} is: &quot; &amp; _\n                            vbCrLf &amp; &quot;    &quot;&quot;{1}&quot;&quot;.&quot;, _\n                            paramInfo.Name, usageAttr.Message)\n                    End If\n                Next paramInfo\n            Else\n                Console.WriteLine( _\n                    &quot;The parameters information could &quot; &amp; _\n                    &quot;not be retrieved for method {0}.&quot;, mInfo.Name)\n            End If\n        End Sub &#39; Main\n\n    End Module &#39; DemoClass\nEnd Namespace &#39; NDP_UE_VB\n\n&#39; This example of Attribute.GetCustomAttribute( ParameterInfo, Type )\n&#39; generates the following output.\n&#39; \n&#39; The ArgumentUsage attribute is defined for\n&#39; parameter strArray of method TestMethod.\n&#39; \n&#39;     The usage message for strArray is:\n&#39;     &quot;Must pass an array here.&quot;.\n&#39; \n&#39; The ParamArray attribute is defined for\n&#39; parameter strList of method TestMethod.\n&#39; \n&#39; The ArgumentUsage attribute is defined for\n&#39; parameter strList of method TestMethod.\n&#39; \n&#39;     The usage message for strList is:\n&#39;     &quot;Can pass a parameter list or array here.&quot;.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Attribute.GetCustomAttribute#1\">// Example for the Attribute.GetCustomAttribute( ParameterInfo, Type ) method.\nusing System;\nusing System.Reflection;\n\nnamespace NDP_UE_CS \n{\n    // Define a custom parameter attribute that takes a single message argument.\n    [AttributeUsage( AttributeTargets.Parameter )]\n    public class ArgumentUsageAttribute : Attribute\n    {\n        // This is the attribute constructor.\n        public ArgumentUsageAttribute( string UsageMsg )\n        {\n            this.usageMsg = UsageMsg;\n        }\n\n        // usageMsg is storage for the attribute message.\n        protected string usageMsg;\n\n        // This is the Message property for the attribute.\n        public string Message\n        {\n            get { return usageMsg; }\n            set { usageMsg = value; }\n        }\n    }\n\n    public class BaseClass \n    {\n        // Assign an ArgumentUsage attribute to the strArray parameter.\n        // Assign a ParamArray attribute to strList using the params keyword.\n        public virtual void TestMethod(\n            [ArgumentUsage(&quot;Must pass an array here.&quot;)]\n            String[] strArray,\n            params String[] strList)\n        { }\n    }\n\n    public class DerivedClass : BaseClass\n    {\n        // Assign an ArgumentUsage attribute to the strList parameter.\n        // Assign a ParamArray attribute to strList using the params keyword.\n        public override void TestMethod(\n            String[] strArray,\n            [ArgumentUsage(&quot;Can pass a parameter list or array here.&quot;)]\n            params String[] strList)\n        { }\n    }\n\n    class CustomParamDemo \n    {\n        static void Main( ) \n        {\n            Console.WriteLine( \n                &quot;This example of Attribute.GetCustomAttribute( Param&quot; +\n                &quot;eterInfo, Type )<br>generates the following output.&quot; );\n\n            // Get the class type, and then get the MethodInfo object \n            // for TestMethod to access its metadata.\n            Type clsType = typeof( DerivedClass );\n            MethodInfo mInfo = clsType.GetMethod(&quot;TestMethod&quot;);\n\n            // Iterate through the ParameterInfo array for the method parameters.\n            ParameterInfo[] pInfoArray = mInfo.GetParameters();\n            if (pInfoArray != null) \n            {\n                foreach( ParameterInfo paramInfo in pInfoArray )\n                {\n                    // See if the ParamArray attribute is defined.\n                    bool isDef = Attribute.IsDefined( \n                        paramInfo, typeof(ParamArrayAttribute));\n\n                    if( isDef )\n                        Console.WriteLine( \n                            &quot;<br>The ParamArray attribute is defined &quot; +\n                            &quot;for <br>parameter {0} of method {1}.&quot;,\n                            paramInfo.Name, mInfo.Name);\n\n                    // See if ParamUsageAttribute is defined.  \n                    // If so, display a message.\n                    ArgumentUsageAttribute usageAttr = (ArgumentUsageAttribute)\n                        Attribute.GetCustomAttribute( \n                            paramInfo, typeof(ArgumentUsageAttribute) );\n\n                    if( usageAttr != null )\n                    {\n                        Console.WriteLine( \n                            &quot;<br>The ArgumentUsage attribute is defined &quot; +\n                            &quot;for <br>parameter {0} of method {1}.&quot;,\n                            paramInfo.Name, mInfo.Name );\n\n                        Console.WriteLine( &quot;<br>    The usage &quot; +\n                            &quot;message for {0} is:<br>    \\&quot;{1}\\&quot;.&quot;,\n                            paramInfo.Name, usageAttr.Message);\n                    }\n                }\n            }\n            else\n                Console.WriteLine( \n                    &quot;The parameters information could not &quot; +\n                    &quot;be retrieved for method {0}.&quot;, mInfo.Name);\n        }\n    }\n}\n\n/*\nThis example of Attribute.GetCustomAttribute( ParameterInfo, Type )\ngenerates the following output.\n\nThe ArgumentUsage attribute is defined for\nparameter strArray of method TestMethod.\n\n    The usage message for strArray is:\n    &quot;Must pass an array here.&quot;.\n\nThe ParamArray attribute is defined for\nparameter strList of method TestMethod.\n\nThe ArgumentUsage attribute is defined for\nparameter strList of method TestMethod.\n\n    The usage message for strList is:\n    &quot;Can pass a parameter list or array here.&quot;.\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Attribute_GetCustomAttribute_System_Reflection_Assembly_System_Type_System_Boolean_\">\r\n    \r\n            <a id=\"System_Attribute_GetCustomAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttribute(Assembly,Type,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves a custom attribute applied to an assembly. Parameters specify the assembly, the type of the custom attribute to search for, and an ignored search option.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Attribute GetCustomAttribute (System.Reflection.Assembly element, Type attributeType, bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object derived from the <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> class that describes a reusable collection of modules.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type, or a base type, of the custom attribute to search for.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored, and does not affect the operation of this method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a></div>\r\n                  </div>\r\n                  <p>A reference to the single custom attribute of type <code>attributeType</code> that is applied to <code>element</code>, or <code>null</code> if there is no such attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>element</code> or <code>attributeType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>attributeType</code> is not derived from <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.ambiguousmatchexception\" data-linktype=\"relative-path\">AmbiguousMatchException</a></div>\r\n                  </div>\r\n                  <p>More than one of the requested attributes was found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework version 2.0, this method returns security attributes if the attributes are stored in the new metadata format. Assemblies compiled with version 2.0 or later use the new format. Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format. See <a href=\"http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5\" data-linktype=\"external\">Emitting Declarative Security Attributes</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example illustrates the use of the <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_\" data-linktype=\"relative-path\">GetCustomAttribute</a> method taking an <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> as a parameter.  </p>\n<pre><code class=\"lang-cs\" name=\"IsDefined#1\">using System;\nusing System.Reflection;\n\n// Add an AssemblyDescription attribute\n[assembly: AssemblyDescription(&quot;A sample description&quot;)]\nnamespace IsDef1CS\n{\n    public class DemoClass\n    {\n        static void Main(string[] args)\n        {\n            // Get the class type to access its metadata.\n            Type clsType = typeof(DemoClass);\n            // Get the assembly object.\n            Assembly assy = clsType.Assembly;\n            // Store the assembly&#39;s name.\n            String assyName = assy.GetName().Name;\n            // See if the Assembly Description is defined.\n            bool isdef = Attribute.IsDefined(assy, \n                typeof(AssemblyDescriptionAttribute));\n            if (isdef)\n            {\n                // Affirm that the attribute is defined.\n                Console.WriteLine(&quot;The AssemblyDescription attribute &quot; +\n                    &quot;is defined for assembly {0}.&quot;, assyName);\n                // Get the description attribute itself.\n                AssemblyDescriptionAttribute adAttr = \n                    (AssemblyDescriptionAttribute)Attribute.GetCustomAttribute(\n                    assy, typeof(AssemblyDescriptionAttribute));\n                // Display the description.\n                if (adAttr != null)\n                    Console.WriteLine(&quot;The description is \\&quot;{0}\\&quot;.&quot;, \n                        adAttr.Description);\n                else\n                    Console.WriteLine(&quot;The description could not &quot; +\n                        &quot;be retrieved.&quot;);            \n            }\n            else\n                Console.WriteLine(&quot;The AssemblyDescription attribute is not &quot; +\n                    &quot;defined for assembly {0}.&quot;, assyName);\n        }\n    }\n}\n\n/*\n * Output:\n * The AssemblyDescription attribute is defined for assembly IsDef1CS.\n * The description is &quot;A sample description&quot;.\n */\n</code></pre><pre><code class=\"lang-cpp\" name=\"IsDefined#1\">using namespace System;\nusing namespace System::Reflection;\n\n// Add an AssemblyDescription attribute\n[assembly:AssemblyDescription(&quot;A sample description&quot;)];\nnamespace IsDef1CS\n{\n   ref class DemoClass\n   {\n   public:\n      static void Main()\n      {\n         \n         // Get the class type to access its metadata.\n         Type^ clsType = DemoClass::typeid;\n         \n         // Get the assembly object.\n         Assembly^ assy = clsType-&gt;Assembly;\n         \n         // Store the assembly&#39;s name.\n         String^ assyName = assy-&gt;GetName()-&gt;Name;\n         \n         //Type assyType = assy.GetType();\n         // See if the Assembly Description is defined.\n         bool isdef = Attribute::IsDefined( assy, AssemblyDescriptionAttribute::typeid );\n         if ( isdef )\n         {\n            \n            // Affirm that the attribute is defined.\n            Console::WriteLine( &quot;The AssemblyDescription attribute &quot;\n            &quot;is defined for assembly {0}.&quot;, assyName );\n            \n            // Get the description attribute itself.\n            AssemblyDescriptionAttribute^ adAttr = dynamic_cast&lt;AssemblyDescriptionAttribute^&gt;(Attribute::GetCustomAttribute( assy, AssemblyDescriptionAttribute::typeid ));\n            \n            // Display the description.\n            if ( adAttr != nullptr )\n                        Console::WriteLine( &quot;The description is \\&quot;{0}\\&quot;.&quot;, adAttr-&gt;Description );\n            else\n                        Console::WriteLine( &quot;The description could not &quot;\n            &quot;be retrieved.&quot; );\n         }\n         else\n                  Console::WriteLine( &quot;The AssemblyDescription attribute is not &quot;\n         &quot;defined for assembly {0}.&quot;, assyName );\n      }\n\n   };\n\n}\n\n\n/*\n * Output:\n * The AssemblyDescription attributeis defined for assembly IsDef1CS.\n * The description is &quot;A sample description&quot;.\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"IsDefined#1\">Imports System\nImports System.Reflection\nImports Microsoft.VisualBasic\n\n&#39; Add an AssemblyDescription attribute.\n&lt;Assembly: AssemblyDescription(&quot;A sample description&quot;)&gt; \n\nModule DemoModule\n    Sub Main()\n        &#39; Get the assembly for this module.\n        Dim assy As System.Reflection.Assembly = GetType(DemoModule).Assembly\n        &#39; Store the assembly name.\n        Dim assyName As String = assy.GetName().Name\n        &#39; See if the AssemblyDescription attribute is defined.\n        If Attribute.IsDefined(assy, GetType(AssemblyDescriptionAttribute)) _\n            Then\n            &#39; Affirm that the attribute is defined. Assume the filename of\n            &#39; this code example is &quot;IsDef1VB&quot;.\n            Console.WriteLine(&quot;The AssemblyDescription attribute is &quot; &amp; _\n                &quot;defined for assembly {0}.&quot;, assyName)\n            &#39; Get the description attribute itself.\n            Dim attr As Attribute = Attribute.GetCustomAttribute( _\n                assy, GetType(AssemblyDescriptionAttribute))\n            &#39; Display the description.\n            If Not attr Is Nothing And _\n                TypeOf attr Is AssemblyDescriptionAttribute Then\n                Dim adAttr As AssemblyDescriptionAttribute = _\n                    CType(attr, AssemblyDescriptionAttribute)\n                Console.WriteLine(&quot;The description is &quot; &amp; _\n                    Chr(34) &amp; &quot;{0}&quot; &amp; Chr(34) &amp; &quot;.&quot;, adAttr.Description)\n            Else\n                Console.WriteLine(&quot;The description could not be retrieved.&quot;)\n            End If\n        Else\n            Console.WriteLine(&quot;The AssemblyDescription attribute is not &quot; &amp; _\n                              &quot;defined for assembly {0}.&quot;, assyName)\n        End If\n    End Sub\nEnd Module\n\n&#39; Output:\n&#39; The AssemblyDescription attribute is defined for assembly IsDef1VB.\n&#39; The description is &quot;A sample description&quot;.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Attribute_GetCustomAttribute_System_Reflection_MemberInfo_System_Type_System_Boolean_\">\r\n    \r\n            <a id=\"System_Attribute_GetCustomAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttribute(MemberInfo,Type,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves a custom attribute applied to a member of a type. Parameters specify the member, the type of the custom attribute to search for, and whether to search ancestors of the member.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Attribute GetCustomAttribute (System.Reflection.MemberInfo element, Type attributeType, bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object derived from the <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> class that describes a constructor, event, field, method, or property member of a class.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type, or a base type, of the custom attribute to search for.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>If <code>true</code>, specifies to also search the ancestors of <code>element</code> for custom attributes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a></div>\r\n                  </div>\r\n                  <p>A reference to the single custom attribute of type <code>attributeType</code> that is applied to <code>element</code>, or <code>null</code> if there is no such attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>element</code> or <code>attributeType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>attributeType</code> is not derived from <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>element</code> is not a constructor, method, property, event, type, or field.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.ambiguousmatchexception\" data-linktype=\"relative-path\">AmbiguousMatchException</a></div>\r\n                  </div>\r\n                  <p>More than one of the requested attributes was found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a></div>\r\n                  </div>\r\n                  <p>A custom attribute type cannot be loaded.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework version 2.0, this method returns security attributes on types, methods, and constructors if the attributes are stored in the new metadata format. Assemblies compiled with version 2.0 or later use the new format. Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format. See <a href=\"http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5\" data-linktype=\"external\">Emitting Declarative Security Attributes</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example illustrates the use of the <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_\" data-linktype=\"relative-path\">GetCustomAttribute</a> method taking a <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> as a parameter.  </p>\n<pre><code class=\"lang-cs\" name=\"IsDefined#4\">using System;\nusing System.Reflection;\n\nnamespace IsDef4CS \n{\n    public class TestClass \n    {\n        // Assign the Obsolete attribute to a method.\n        [Obsolete(&quot;This method is obsolete. Use Method2 instead.&quot;)]\n        public void Method1()\n        {}\n        public void Method2()\n        {}\n    }\n\n    public class DemoClass \n    {\n        static void Main(string[] args) \n        {\n            // Get the class type to access its metadata.\n            Type clsType = typeof(TestClass);\n            // Get the MethodInfo object for Method1.\n            MethodInfo mInfo = clsType.GetMethod(&quot;Method1&quot;);\n            // See if the Obsolete attribute is defined for this method.\n            bool isDef = Attribute.IsDefined(mInfo, typeof(ObsoleteAttribute));\n            // Display the result.\n            Console.WriteLine(&quot;The Obsolete Attribute {0} defined for {1} of class {2}.&quot;,\n                isDef ? &quot;is&quot; : &quot;is not&quot;, mInfo.Name, clsType.Name);\n            // If it&#39;s defined, display the attribute&#39;s message.\n            if (isDef) \n            {\n                ObsoleteAttribute obsAttr = \n                                 (ObsoleteAttribute)Attribute.GetCustomAttribute( \n                                                    mInfo, typeof(ObsoleteAttribute));\n                if (obsAttr != null)\n                    Console.WriteLine(&quot;The message is: \\&quot;{0}\\&quot;.&quot;,\n                        obsAttr.Message);\n                else\n                    Console.WriteLine(&quot;The message could not be retrieved.&quot;);\n            }\n        }\n    }\n}\n\n/*\n * Output:\n * The Obsolete Attribute is defined for Method1 of class TestClass.\n * The message is: &quot;This method is obsolete. Use Method2 instead.&quot;.\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"IsDefined#4\">Imports System\nImports System.Reflection\n\nModule DemoModule\n\n    Public Class TestClass\n        &#39; Assign the Obsolete attribute to a method.\n        &lt;Obsolete(&quot;This method is obsolete. Use Method2() instead.&quot;)&gt; _\n        Public Sub Method1()\n        End Sub\n\n        Public Sub Method2()\n        End Sub\n    End Class\n\n    Sub Main()\n        &#39; Get the class type to access its metadata.\n        Dim clsType As Type = GetType(TestClass)\n        &#39; Get the MethodInfo object for Method1.\n        Dim mInfo As MethodInfo = clsType.GetMethod(&quot;Method1&quot;)\n        &#39; See if the Obsolete attribute is defined for this method.\n        Dim isDef As Boolean = Attribute.IsDefined(mInfo, _\n            GetType(ObsoleteAttribute))\n        Dim strDef As String\n        If isDef = True Then\n            strDef = &quot;is&quot;\n        Else\n            strDef = &quot;is not&quot;\n        End If\n        &#39; Display the results.\n        Console.WriteLine(&quot;The Obsolete attribute {0} defined for &quot; &amp; _\n            &quot;method {1} of class {2}.&quot;, strDef, mInfo.Name, clsType.Name)\n        &#39; If it&#39;s defined, display the attribute&#39;s message.\n        If isDef = True Then\n            Dim attr As Attribute = Attribute.GetCustomAttribute(mInfo, _\n                GetType(ObsoleteAttribute))\n            If Not attr Is Nothing And TypeOf attr Is ObsoleteAttribute Then\n                Dim obsAttr As ObsoleteAttribute = _\n                    CType(attr, ObsoleteAttribute)\n                Console.WriteLine(&quot;The message is: &quot;&quot;{0}&quot;&quot;&quot;, obsAttr.Message)\n            Else\n                Console.WriteLine(&quot;The message could not be retrieved.&quot;)\n            End If\n        End If\n    End Sub\nEnd Module\n\n&#39; Output:\n&#39; The Obsolete attribute is defined for method Method1 of class TestClass.\n&#39; The message is: &quot;This method is obsolete. Use Method2() instead.&quot;\n</code></pre><pre><code class=\"lang-cpp\" name=\"IsDefined#4\">using namespace System;\nusing namespace System::Reflection;\n\nnamespace IsDef4CS\n{\n   public ref class TestClass\n   {\n   public:\n\n      // Assign the Obsolete attribute to a method.\n\n      [Obsolete(&quot;This method is obsolete. Use Method2 instead.&quot;)]\n      void Method1(){}\n\n      void Method2(){}\n\n   };\n\n   ref class DemoClass\n   {\n   public:\n      static void Main()\n      {\n         \n         // Get the class type to access its metadata.\n         Type^ clsType = TestClass::typeid;\n         \n         // Get the MethodInfo object for Method1.\n         MethodInfo^ mInfo = clsType-&gt;GetMethod( &quot;Method1&quot; );\n         \n         // See if the Obsolete attribute is defined for this method.\n         bool isDef = Attribute::IsDefined( mInfo, ObsoleteAttribute::typeid );\n         \n         // Display the result.\n         Console::WriteLine( &quot;The Obsolete Attribute {0} defined for {1} of class {2}.&quot;, isDef ? (String^)&quot;is&quot; : &quot;is not&quot;, mInfo-&gt;Name, clsType-&gt;Name );\n         \n         // If it&#39;s defined, display the attribute&#39;s message.\n         if ( isDef )\n         {\n            ObsoleteAttribute^ obsAttr = dynamic_cast&lt;ObsoleteAttribute^&gt;(Attribute::GetCustomAttribute( mInfo, ObsoleteAttribute::typeid ));\n            if ( obsAttr != nullptr )\n                        Console::WriteLine( &quot;The message is: \\&quot;{0}\\&quot;.&quot;, obsAttr-&gt;Message );\n            else\n                        Console::WriteLine( &quot;The message could not be retrieved.&quot; );\n         }\n      }\n\n   };\n\n}\n\n\n/*\n * Output:\n * The Obsolete Attribute is defined for Method1 of class TestClass.\n * The message is: &quot;This method is obsolete. Use Method2 instead.&quot;.\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Attribute_GetCustomAttribute_System_Reflection_Module_System_Type_System_Boolean_\">\r\n    \r\n            <a id=\"System_Attribute_GetCustomAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttribute(Module,Type,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves a custom attribute applied to a module. Parameters specify the module, the type of the custom attribute to search for, and an ignored search option.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Attribute GetCustomAttribute (System.Reflection.Module element, Type attributeType, bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object derived from the <a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a> class that describes a portable executable file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type, or a base type, of the custom attribute to search for.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored, and does not affect the operation of this method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a></div>\r\n                  </div>\r\n                  <p>A reference to the single custom attribute of type <code>attributeType</code> that is applied to <code>element</code>, or <code>null</code> if there is no such attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>element</code> or <code>attributeType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>attributeType</code> is not derived from <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.ambiguousmatchexception\" data-linktype=\"relative-path\">AmbiguousMatchException</a></div>\r\n                  </div>\r\n                  <p>More than one of the requested attributes was found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example illustrates the use of the <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_\" data-linktype=\"relative-path\">GetCustomAttribute</a> method taking a <a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a> as a parameter.  </p>\n<pre><code class=\"lang-cs\" name=\"IsDefined#2\">using System;\nusing System.Diagnostics;\n\n// Add the Debuggable attribute to the module.\n[module:Debuggable(true, false)]\nnamespace IsDef2CS\n{\n    public class DemoClass\n    {\n        static void Main(string[] args)\n        {\n            // Get the class type to access its metadata.\n            Type clsType = typeof(DemoClass);\n            // See if the Debuggable attribute is defined for this module.\n            bool isDef = Attribute.IsDefined(clsType.Module, \n                typeof(DebuggableAttribute));\n            // Display the result.\n            Console.WriteLine(&quot;The Debuggable attribute {0} &quot; +\n                &quot;defined for Module {1}.&quot;,\n                isDef ? &quot;is&quot; : &quot;is not&quot;,\n                clsType.Module.Name);\n            // If the attribute is defined, display the JIT settings.\n            if (isDef)\n            {\n                // Retrieve the attribute itself.\n                DebuggableAttribute dbgAttr = (DebuggableAttribute)\n                    Attribute.GetCustomAttribute(clsType.Module, \n                    typeof(DebuggableAttribute));\n                if (dbgAttr != null)\n                {\n                    Console.WriteLine(&quot;JITTrackingEnabled is {0}.&quot;,\n                        dbgAttr.IsJITTrackingEnabled);\n                    Console.WriteLine(&quot;JITOptimizerDisabled is {0}.&quot;,\n                        dbgAttr.IsJITOptimizerDisabled);\n                }\n                else\n                    Console.WriteLine(&quot;The Debuggable attribute &quot; +\n                        &quot;could not be retrieved.&quot;);\n            }\n        }\n    }\n}\n\n/*\n * Output:\n * The Debuggable attribute is defined for Module IsDef2CS.exe.\n * JITTrackingEnabled is True.\n * JITOptimizerDisabled is False.\n */\n</code></pre><pre><code class=\"lang-cpp\" name=\"IsDefined#2\">using namespace System;\nusing namespace System::Diagnostics;\n\n// Add the Debuggable attribute to the module.\n[module:Debuggable(true,false)];\nnamespace IsDef2CS\n{\n   ref class DemoClass\n   {\n   public:\n      static void Main()\n      {\n         \n         // Get the class type to access its metadata.\n         Type^ clsType = DemoClass::typeid;\n         \n         // See if the Debuggable attribute is defined for this module.\n         bool isDef = Attribute::IsDefined( clsType-&gt;Module, DebuggableAttribute::typeid );\n         \n         // Display the result.\n         Console::WriteLine( &quot;The Debuggable attribute {0} &quot;\n         &quot;defined for Module {1}.&quot;, isDef ? (String^)&quot;is&quot; : &quot;is not&quot;, clsType-&gt;Module-&gt;Name );\n         \n         // If the attribute is defined, display the JIT settings.\n         if ( isDef )\n         {\n            \n            // Retrieve the attribute itself.\n            DebuggableAttribute^ dbgAttr = dynamic_cast&lt;DebuggableAttribute^&gt;(Attribute::GetCustomAttribute( clsType-&gt;Module, DebuggableAttribute::typeid ));\n            if ( dbgAttr != nullptr )\n            {\n               Console::WriteLine( &quot;JITTrackingEnabled is {0}.&quot;, dbgAttr-&gt;IsJITTrackingEnabled );\n               Console::WriteLine( &quot;JITOptimizerDisabled is {0}.&quot;, dbgAttr-&gt;IsJITOptimizerDisabled );\n            }\n            else\n                        Console::WriteLine( &quot;The Debuggable attribute &quot;\n            &quot;could not be retrieved.&quot; );\n         }\n      }\n\n   };\n\n}\n\n\n/*\n * Output:\n * The Debuggable attribute is defined for Module IsDef2CS.exe.\n * JITTrackingEnabled is True.\n * JITOptimizerDisabled is False.\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"IsDefined#2\">Imports System\nImports System.Reflection\nImports System.Diagnostics\n\n&#39; Add the Debuggable attribute to the module.\n&lt;Module: Debuggable(True, False)&gt; \n\nModule DemoModule\n    Sub Main()\n        &#39; Get the module type information to access its metadata.\n        Dim modType As Type = GetType(DemoModule)\n        &#39; See if the Debuggable attribute is defined.\n        Dim isDef As Boolean = Attribute.IsDefined(modType.Module, _\n                               GetType(DebuggableAttribute))\n        Dim strDef As String\n        If isDef = True Then\n            strDef = &quot;is&quot;\n        Else\n            strDef = &quot;is not&quot;\n        End If\n        &#39; Display the result\n        Console.WriteLine(&quot;The debuggable attribute {0} defined for &quot; &amp; _\n                          &quot;module {1}.&quot;, strDef, modType.Name)\n        &#39; If the attribute is defined, display the JIT settings.\n        If isDef = True Then\n            &#39; Retrieve the attribute itself.\n            Dim attr As Attribute = _\n                Attribute.GetCustomAttribute(modType.Module, _\n                GetType(DebuggableAttribute))\n            If Not attr Is Nothing And TypeOf attr Is DebuggableAttribute Then\n                Dim dbgAttr As DebuggableAttribute = _\n                    CType(attr, DebuggableAttribute)\n                Console.WriteLine(&quot;JITTrackingEnabled is {0}.&quot;, _\n                    dbgAttr.IsJITTrackingEnabled.ToString())\n                Console.WriteLine(&quot;JITOptimizerDisabled is {0}.&quot;, _\n                    dbgAttr.IsJITOptimizerDisabled.ToString())\n            Else\n                Console.WriteLine(&quot;The Debuggable attribute could &quot; &amp; _\n                                  &quot;not be retrieved.&quot;)\n            End If\n        End If\n    End Sub\nEnd Module\n\n&#39; Output:\n&#39; The debuggable attribute is defined for module DemoModule.\n&#39; JITTrackingEnabled is True.\n&#39; JITOptimizerDisabled is False.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Attribute_GetCustomAttribute_System_Reflection_ParameterInfo_System_Type_System_Boolean_\">\r\n    \r\n            <a id=\"System_Attribute_GetCustomAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttribute(ParameterInfo,Type,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves a custom attribute applied to a method parameter. Parameters specify the method parameter, the type of the custom attribute to search for, and whether to search ancestors of the method parameter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Attribute GetCustomAttribute (System.Reflection.ParameterInfo element, Type attributeType, bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object derived from the <a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a> class that describes a parameter of a member of a class.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type, or a base type, of the custom attribute to search for.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>If <code>true</code>, specifies to also search the ancestors of <code>element</code> for custom attributes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a></div>\r\n                  </div>\r\n                  <p>A reference to the single custom attribute of type <code>attributeType</code> that is applied to <code>element</code>, or <code>null</code> if there is no such attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>element</code> or <code>attributeType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>attributeType</code> is not derived from <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.ambiguousmatchexception\" data-linktype=\"relative-path\">AmbiguousMatchException</a></div>\r\n                  </div>\r\n                  <p>More than one of the requested attributes was found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a></div>\r\n                  </div>\r\n                  <p>A custom attribute type cannot be loaded.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>element</code> represents a parameter in a method of a derived type, the return value includes the inheritable custom attributes applied to the same parameter in the overridden base methods.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example defines a custom parameter <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a> class and applies the custom attribute to a method in a derived class and the base of the derived class. The example shows the use of the <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_\" data-linktype=\"relative-path\">GetCustomAttribute</a> method to return the attributes.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Attribute.GetCustomAttribute#3\">// Example for the Attribute::GetCustomAttribute( ParameterInfo*, Type*, bool ) \n// method.\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Reflection;\n\nnamespace NDP_UE_CPP\n{\n   // Define a custom parameter attribute that takes a single message argument.\n\n   [AttributeUsage(AttributeTargets::Parameter)]\n   public ref class ArgumentUsageAttribute: public Attribute\n   {\n   protected:\n\n      // usageMsg is storage for the attribute message.\n      String^ usageMsg;\n\n   public:\n\n      // This is the attribute constructor.\n      ArgumentUsageAttribute( String^ UsageMsg )\n      {\n         this-&gt;usageMsg = UsageMsg;\n      }\n\n      property String^ Message \n      {\n         // This is the Message property for the attribute.\n         String^ get()\n         {\n            return usageMsg;\n         }\n\n         void set( String^ value )\n         {\n            this-&gt;usageMsg = value;\n         }\n      }\n   };\n\n   public ref class BaseClass\n   {\n   public:\n\n      // Assign an ArgumentUsage attribute to the strArray parameter.\n      // Assign a ParamArray attribute to strList.\n      virtual void TestMethod( [ArgumentUsage(&quot;Must pass an array here.&quot;)]array&lt;String^&gt;^strArray,\n                               ...array&lt;String^&gt;^strList ){}\n   };\n\n   public ref class DerivedClass: public BaseClass\n   {\n   public:\n\n      // Assign an ArgumentUsage attributes to the strList parameter.\n      virtual void TestMethod( array&lt;String^&gt;^strArray, [ArgumentUsage(\n      &quot;Can pass a parameter list or array here.&quot;)]array&lt;String^&gt;^strList ) override {}\n\n   };\n\n   void DisplayParameterAttributes( MethodInfo^ mInfo, array&lt;ParameterInfo^&gt;^pInfoArray, bool includeInherited )\n   {\n      Console::WriteLine( &quot;<br>Parameter attribute information for method \\&quot;{0}&quot;\n      &quot;\\&quot;<br>includes inheritance from base class: {1}.&quot;, mInfo-&gt;Name, includeInherited ? (String^)&quot;Yes&quot; : &quot;No&quot; );\n      \n      // This implements foreach( ParameterInfo* paramInfo in pInfoArray ).\n      IEnumerator^ myEnum = pInfoArray-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         ParameterInfo^ paramInfo = safe_cast&lt;ParameterInfo^&gt;(myEnum-&gt;Current);\n\n         // See if the ParamArray attribute is defined.\n         bool isDef = Attribute::IsDefined( paramInfo, ParamArrayAttribute::typeid );\n         if ( isDef )\n                  Console::WriteLine( &quot;<br>    The ParamArray attribute is defined &quot;\n         &quot;for <br>    parameter {0} of method {1}.&quot;, paramInfo-&gt;Name, mInfo-&gt;Name );\n\n         // See if ParamUsageAttribute is defined.  \n         // If so, display a message.\n         ArgumentUsageAttribute^ usageAttr = static_cast&lt;ArgumentUsageAttribute^&gt;(Attribute::GetCustomAttribute( paramInfo, ArgumentUsageAttribute::typeid, includeInherited ));\n         if ( usageAttr != nullptr )\n         {\n            Console::WriteLine( &quot;<br>    The ArgumentUsage attribute is defined &quot;\n            &quot;for <br>    parameter {0} of method {1}.&quot;, paramInfo-&gt;Name, mInfo-&gt;Name );\n            Console::WriteLine( &quot;<br>        The usage &quot;\n            &quot;message for {0} is:<br>        \\&quot;{1}\\&quot;.&quot;, paramInfo-&gt;Name, usageAttr-&gt;Message );\n         }\n      }\n   }\n\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of Attribute::GetCustomAttribute( ParameterInfo*, &quot;\n   &quot;Type*, bool )<br>generates the following output.&quot; );\n\n   // Get the class type, and then get the MethodInfo object \n   // for TestMethod to access its metadata.\n   Type^ clsType = NDP_UE_CPP::DerivedClass::typeid;\n   MethodInfo^ mInfo = clsType-&gt;GetMethod(  &quot;TestMethod&quot; );\n\n   // Iterate through the ParameterInfo array for the method parameters.\n   array&lt;ParameterInfo^&gt;^pInfoArray = mInfo-&gt;GetParameters();\n   if ( pInfoArray != nullptr )\n   {\n      NDP_UE_CPP::DisplayParameterAttributes( mInfo, pInfoArray, false );\n      NDP_UE_CPP::DisplayParameterAttributes( mInfo, pInfoArray, true );\n   }\n   else\n      Console::WriteLine( &quot;The parameters information could &quot;\n   &quot;not be retrieved for method {0}.&quot;, mInfo-&gt;Name );\n}\n\n/*\nThis example of Attribute::GetCustomAttribute( ParameterInfo*, Type*, bool )\ngenerates the following output.\n\nParameter attribute information for method &quot;TestMethod&quot;\nincludes inheritance from base class: No.\n\n    The ParamArray attribute is defined for\n    parameter strList of method TestMethod.\n\n    The ArgumentUsage attribute is defined for\n    parameter strList of method TestMethod.\n\n        The usage message for strList is:\n        &quot;Can pass a parameter list or array here.&quot;.\n\nParameter attribute information for method &quot;TestMethod&quot;\nincludes inheritance from base class: Yes.\n\n    The ArgumentUsage attribute is defined for\n    parameter strArray of method TestMethod.\n\n        The usage message for strArray is:\n        &quot;Must pass an array here.&quot;.\n\n    The ParamArray attribute is defined for\n    parameter strList of method TestMethod.\n\n    The ArgumentUsage attribute is defined for\n    parameter strList of method TestMethod.\n\n        The usage message for strList is:\n        &quot;Can pass a parameter list or array here.&quot;.\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Attribute.GetCustomAttribute#3\">// Example for the Attribute.GetCustomAttribute( ParameterInfo, Type, Boolean ) \n// method.\nusing System;\nusing System.Reflection;\n\nnamespace NDP_UE_CS \n{\n    // Define a custom parameter attribute that takes a single message argument.\n    [AttributeUsage( AttributeTargets.Parameter )]\n    public class ArgumentUsageAttribute : Attribute\n    {\n        // This is the attribute constructor.\n        public ArgumentUsageAttribute( string UsageMsg )\n        {\n            this.usageMsg = UsageMsg;\n        }\n\n        // usageMsg is storage for the attribute message.\n        protected string usageMsg;\n\n        // This is the Message property for the attribute.\n        public string Message\n        {\n            get { return usageMsg; }\n            set { usageMsg = value; }\n        }\n    }\n\n    public class BaseClass \n    {\n        // Assign an ArgumentUsage attribute to the strArray parameter.\n        // Assign a ParamArray attribute to strList using the params keyword.\n        public virtual void TestMethod(\n            [ArgumentUsage(&quot;Must pass an array here.&quot;)]\n            String[] strArray,\n            params String[] strList)\n        { }\n    }\n\n    public class DerivedClass : BaseClass\n    {\n        // Assign an ArgumentUsage attribute to the strList parameter.\n        // Assign a ParamArray attribute to strList using the params keyword.\n        public override void TestMethod(\n            String[] strArray,\n            [ArgumentUsage(&quot;Can pass a parameter list or array here.&quot;)]\n            params String[] strList)\n        { }\n    }\n\n    class CustomParamDemo \n    {\n        static void Main( ) \n        {\n            Console.WriteLine( \n                &quot;This example of Attribute.GetCustomAttribute( Parameter&quot; +\n                &quot;Info, Type, Boolean )<br>generates the following output.&quot; );\n\n            // Get the class type, and then get the MethodInfo object \n            // for TestMethod to access its metadata.\n            Type clsType = typeof(DerivedClass);\n            MethodInfo mInfo = clsType.GetMethod(&quot;TestMethod&quot;);\n\n            // Iterate through the ParameterInfo array for the method parameters.\n            ParameterInfo[] pInfoArray = mInfo.GetParameters();\n            if (pInfoArray != null) \n            {\n                DisplayParameterAttributes( mInfo, pInfoArray, false );\n                DisplayParameterAttributes( mInfo, pInfoArray, true );\n            }\n            else\n                Console.WriteLine(&quot;The parameters information could &quot; +\n                    &quot;not be retrieved for method {0}.&quot;, mInfo.Name);\n        }\n\n        static void DisplayParameterAttributes( MethodInfo mInfo,\n            ParameterInfo[] pInfoArray, bool includeInherited )\n        {\n            Console.WriteLine( \n                &quot;<br>Parameter attribute information for method \\&quot;&quot; +\n                &quot;{0}\\&quot;<br>includes inheritance from base class: {1}.&quot;, \n                mInfo.Name, includeInherited ? &quot;Yes&quot; : &quot;No&quot; );\n\n            // Display the attribute information for the parameters.\n            foreach( ParameterInfo paramInfo in pInfoArray )\n            {\n                // See if the ParamArray attribute is defined.\n                bool isDef = Attribute.IsDefined( paramInfo, \n                    typeof(ParamArrayAttribute));\n\n                if( isDef )\n                    Console.WriteLine(\n                        &quot;<br>    The ParamArray attribute is defined &quot; +\n                        &quot;for <br>    parameter {0} of method {1}.&quot;,\n                        paramInfo.Name, mInfo.Name);\n\n                // See if ParamUsageAttribute is defined.  \n                // If so, display a message.\n                ArgumentUsageAttribute usageAttr = (ArgumentUsageAttribute)\n                    Attribute.GetCustomAttribute( paramInfo, \n                        typeof(ArgumentUsageAttribute),\n                        includeInherited );\n\n                if( usageAttr != null )\n                {\n                    Console.WriteLine( \n                        &quot;<br>    The ArgumentUsage attribute is def&quot; +\n                        &quot;ined for <br>    parameter {0} of method {1}.&quot;,\n                        paramInfo.Name, mInfo.Name );\n\n                    Console.WriteLine( &quot;<br>        The usage &quot; +\n                        &quot;message for {0} is:<br>        \\&quot;{1}\\&quot;.&quot;,\n                        paramInfo.Name, usageAttr.Message);\n                }\n            }\n        }\n    }\n}\n\n/*\nThis example of Attribute.GetCustomAttribute( ParameterInfo, Type, Boolean )\ngenerates the following output.\n\nParameter attribute information for method &quot;TestMethod&quot;\nincludes inheritance from base class: No.\n\n    The ParamArray attribute is defined for\n    parameter strList of method TestMethod.\n\n    The ArgumentUsage attribute is defined for\n    parameter strList of method TestMethod.\n\n        The usage message for strList is:\n        &quot;Can pass a parameter list or array here.&quot;.\n\nParameter attribute information for method &quot;TestMethod&quot;\nincludes inheritance from base class: Yes.\n\n    The ArgumentUsage attribute is defined for\n    parameter strArray of method TestMethod.\n\n        The usage message for strArray is:\n        &quot;Must pass an array here.&quot;.\n\n    The ParamArray attribute is defined for\n    parameter strList of method TestMethod.\n\n    The ArgumentUsage attribute is defined for\n    parameter strList of method TestMethod.\n\n        The usage message for strList is:\n        &quot;Can pass a parameter list or array here.&quot;.\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Attribute.GetCustomAttribute#3\">&#39; Example for the Attribute.GetCustomAttribute( ParameterInfo, Type, Boolean ) \n&#39; method.\nImports System\nImports System.Reflection\nImports Microsoft.VisualBasic\n\nNamespace NDP_UE_VB\n\n    &#39; Define a custom parameter attribute that takes a single message argument.\n    &lt;AttributeUsage(AttributeTargets.Parameter)&gt;  _\n    Public Class ArgumentUsageAttribute\n        Inherits Attribute\n           \n        &#39; This is the attribute constructor.\n        Public Sub New(UsageMsg As String)\n            Me.usageMsg = UsageMsg\n        End Sub &#39; New\n\n        &#39; usageMsg is storage for the attribute message.\n        Protected usageMsg As String\n           \n        &#39; This is the Message property for the attribute.\n        Public Property Message() As String\n            Get\n                Return usageMsg\n            End Get\n            Set\n                usageMsg = value\n            End Set\n        End Property\n    End Class &#39; ArgumentUsageAttribute \n\n    Public Class BaseClass\n       \n        &#39; Assign an ArgumentUsage attribute to the strArray parameter.\n        &#39; Assign a ParamArray attribute to the strList parameter.\n        Public Overridable Sub TestMethod( _\n            &lt;ArgumentUsage(&quot;Must pass an array here.&quot;)&gt; _\n            strArray() As String, _\n            ParamArray strList() As String)\n        End Sub &#39; TestMethod\n    End Class &#39; BaseClass\n\n    Public Class DerivedClass\n        Inherits BaseClass\n           \n        &#39; Assign an ArgumentUsage attribute to the strList parameter.\n        &#39; Assign a ParamArray attribute to the strList parameter.\n        Public Overrides Sub TestMethod( _\n            strArray() As String, _\n            &lt;ArgumentUsage(&quot;Can pass a parameter list or array here.&quot;)&gt; _\n            ParamArray strList() As String)\n        End Sub &#39; TestMethod\n    End Class &#39; DerivedClass\n\n    Class DemoClass\n           \n        Shared Sub DisplayParameterAttributes(mInfo As MethodInfo, _\n            pInfoArray() As ParameterInfo, includeInherited As Boolean)\n\n            Console.WriteLine( vbCrLf &amp; _\n                &quot;Parameter attribute information for method &quot;&quot;{0}&quot;&quot;&quot; &amp; _\n                vbCrLf &amp; &quot;includes inheritance from the base class: {1}.&quot;, _\n                mInfo.Name, IIf(includeInherited, &quot;Yes&quot;, &quot;No&quot;))\n              \n            &#39; Display attribute information for the parameters.\n            Dim paramInfo As ParameterInfo\n            For Each paramInfo In  pInfoArray\n\n                &#39; See if the ParamArray attribute is defined.\n                Dim isDef As Boolean = _\n                    Attribute.IsDefined(paramInfo, GetType(ParamArrayAttribute))\n\n                If isDef Then\n                    Console.WriteLine( vbCrLf &amp; &quot;    The &quot; &amp; _\n                        &quot;ParamArray attribute is defined for &quot; &amp; _\n                        vbCrLf &amp; &quot;    parameter {0} of method {1}.&quot;, _\n                        paramInfo.Name, mInfo.Name)\n                End If\n                 \n                &#39; See if ParamUsageAttribute is defined.  \n                &#39; If so, display a message.\n                Dim usageAttr As ArgumentUsageAttribute = _\n                    Attribute.GetCustomAttribute(paramInfo, _\n                        GetType(ArgumentUsageAttribute), _\n                        includeInherited)\n\n                If Not (usageAttr Is Nothing) Then\n                    Console.WriteLine( vbCrLf &amp; &quot;    The &quot; &amp; _\n                        &quot;ArgumentUsage attribute is defined for &quot; &amp; _\n                        vbCrLf &amp; &quot;    parameter {0} of method {1}.&quot;, _\n                        paramInfo.Name, mInfo.Name)\n                    Console.WriteLine( vbCrLf &amp; _\n                        &quot;        The usage message for {0} is: &quot; &amp; _\n                        vbCrLf &amp; &quot;        &quot;&quot;{1}&quot;&quot;.&quot;, _\n                        paramInfo.Name, usageAttr.Message)\n                End If\n            Next paramInfo\n        End Sub &#39; DisplayParameterAttributes\n       \n        Public Shared Sub Main()\n            Console.WriteLine( _\n                &quot;This example of Attribute.GetCustomAttribute&quot; &amp; _\n                &quot;( ParameterInfo, Type, Boolean )&quot; &amp; vbCrLf &amp; _\n                &quot;generates the following output.&quot; )\n              \n            &#39; Get the class type, and then get the MethodInfo object \n            &#39; for TestMethod to access its metadata.\n            Dim clsType As Type = GetType(DerivedClass)\n            Dim mInfo As MethodInfo = clsType.GetMethod(&quot;TestMethod&quot;)\n              \n            &#39; Iterate through the ParameterInfo array for the method parameters.\n            Dim pInfoArray As ParameterInfo() = mInfo.GetParameters()\n            If Not (pInfoArray Is Nothing) Then\n\n                DisplayParameterAttributes(mInfo, pInfoArray, False)\n                DisplayParameterAttributes(mInfo, pInfoArray, True)\n            Else\n                Console.WriteLine( _\n                    &quot;The parameters information could &quot; &amp; _\n                    &quot;not be retrieved for method {0}.&quot;, mInfo.Name)\n            End If\n        End Sub &#39; Main\n\n    End Class &#39; DemoClass\nEnd Namespace &#39; NDP_UE_VB\n\n&#39; This example of Attribute.GetCustomAttribute( ParameterInfo, Type, Boolean )\n&#39; generates the following output.\n&#39; \n&#39; Parameter attribute information for method &quot;TestMethod&quot;\n&#39; includes inheritance from the base class: No.\n&#39; \n&#39;     The ParamArray attribute is defined for\n&#39;     parameter strList of method TestMethod.\n&#39; \n&#39;     The ArgumentUsage attribute is defined for\n&#39;     parameter strList of method TestMethod.\n&#39; \n&#39;         The usage message for strList is:\n&#39;         &quot;Can pass a parameter list or array here.&quot;.\n&#39; \n&#39; Parameter attribute information for method &quot;TestMethod&quot;\n&#39; includes inheritance from the base class: Yes.\n&#39; \n&#39;     The ArgumentUsage attribute is defined for\n&#39;     parameter strArray of method TestMethod.\n&#39; \n&#39;         The usage message for strArray is:\n&#39;         &quot;Must pass an array here.&quot;.\n&#39; \n&#39;     The ParamArray attribute is defined for\n&#39;     parameter strList of method TestMethod.\n&#39; \n&#39;     The ArgumentUsage attribute is defined for\n&#39;     parameter strList of method TestMethod.\n&#39; \n&#39;         The usage message for strList is:\n&#39;         &quot;Can pass a parameter list or array here.&quot;.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Attribute_GetCustomAttributes_System_Reflection_Assembly_\">\r\n    \r\n            <a id=\"System_Attribute_GetCustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributes(Assembly)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves an array of the custom attributes applied to an assembly. A parameter specifies the assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Attribute[] GetCustomAttributes (System.Reflection.Assembly element);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object derived from the <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> class that describes a reusable collection of modules.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a>[]</div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a> array that contains the custom attributes applied to <code>element</code>, or an empty array if no such custom attributes exist.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>element</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework version 2.0, this method returns security attributes if the attributes are stored in the new metadata format. Assemblies compiled with version 2.0 or later use the new format. Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format. See <a href=\"http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5\" data-linktype=\"external\">Emitting Declarative Security Attributes</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example retrieves the custom attributes found in the current assembly.  </p>\n<pre><code class=\"lang-cpp\" name=\"GetCustomAttributes#1\">using namespace System;\nusing namespace System::Reflection;\n\n[assembly:AssemblyTitle(&quot;CustAttrs1CPP&quot;)];\n[assembly:AssemblyDescription(&quot;GetCustomAttributes() Demo&quot;)];\n[assembly:AssemblyCompany(&quot;Microsoft&quot;)];\n\nref class Example\n{};\n\nstatic void main()\n{\n    Type^ clsType = Example::typeid;\n\n    // Get the Assembly type to access its metadata.\n    Assembly^ assy = clsType-&gt;Assembly;\n\n    // Iterate through the attributes for the assembly.\n    System::Collections::IEnumerator^ myEnum = Attribute::GetCustomAttributes( assy )-&gt;GetEnumerator();\n    while ( myEnum-&gt;MoveNext() )\n    {\n       Attribute^ attr = safe_cast&lt;Attribute^&gt;(myEnum-&gt;Current);\n\n       // Check for the AssemblyTitle attribute.\n       if ( attr-&gt;GetType() == AssemblyTitleAttribute::typeid )\n          Console::WriteLine( &quot;Assembly title is \\&quot;{0}\\&quot;.&quot;, (dynamic_cast&lt;AssemblyTitleAttribute^&gt;(attr))-&gt;Title );\n          // Check for the AssemblyDescription attribute.\n       else\n          // Check for the AssemblyDescription attribute.\n          if ( attr-&gt;GetType() == AssemblyDescriptionAttribute::typeid )\n             Console::WriteLine( &quot;Assembly description is \\&quot;{0}\\&quot;.&quot;, (dynamic_cast&lt;AssemblyDescriptionAttribute^&gt;(attr))-&gt;Description );\n          // Check for the AssemblyCompany attribute.\n          else if ( attr-&gt;GetType() == AssemblyCompanyAttribute::typeid )\n             Console::WriteLine( &quot;Assembly company is {0}.&quot;, (dynamic_cast&lt;AssemblyCompanyAttribute^&gt;(attr))-&gt;Company );\n    }\n}\n// The example displays the following output:\n//     Assembly description is &quot;GetCustomAttributes() Demo&quot;.\n//     Assembly company is Microsoft.\n//     Assembly title is &quot;CustAttrs1CPP&quot;.\n</code></pre><pre><code class=\"lang-cs\" name=\"GetCustomAttributes#1\">using System;\nusing System.Reflection;\n\n[assembly: AssemblyTitle(&quot;CustAttrs1CS&quot;)]\n[assembly: AssemblyDescription(&quot;GetCustomAttributes() Demo&quot;)]\n[assembly: AssemblyCompany(&quot;Microsoft&quot;)]\n\nclass Example {\n    static void Main() {\n        // Get the Assembly object to access its metadata.\n        Assembly assy = typeof(Example).Assembly;\n\n        // Iterate through the attributes for the assembly.\n        foreach(Attribute attr in Attribute.GetCustomAttributes(assy)) {\n            // Check for the AssemblyTitle attribute.\n            if (attr.GetType() == typeof(AssemblyTitleAttribute))\n                Console.WriteLine(&quot;Assembly title is \\&quot;{0}\\&quot;.&quot;,\n                    ((AssemblyTitleAttribute)attr).Title);\n\n            // Check for the AssemblyDescription attribute.\n            else if (attr.GetType() == \n                typeof(AssemblyDescriptionAttribute))\n                Console.WriteLine(&quot;Assembly description is \\&quot;{0}\\&quot;.&quot;,\n                    ((AssemblyDescriptionAttribute)attr).Description);\n\n            // Check for the AssemblyCompany attribute.\n            else if (attr.GetType() == typeof(AssemblyCompanyAttribute))\n                Console.WriteLine(&quot;Assembly company is {0}.&quot;,\n                    ((AssemblyCompanyAttribute)attr).Company);\n        }\n   }\n}\n// The example displays the following output:\n//     Assembly title is &quot;CustAttrs1CS&quot;.\n//     Assembly description is &quot;GetCustomAttributes() Demo&quot;.\n//     Assembly company is Microsoft.\n</code></pre><pre><code class=\"lang-vb\" name=\"GetCustomAttributes#1\">Imports System.Reflection\n\n&lt;Assembly: AssemblyTitle(&quot;CustAttrs1VB&quot;)&gt; \n&lt;Assembly: AssemblyDescription(&quot;GetCustomAttributes() Demo&quot;)&gt; \n&lt;Assembly: AssemblyCompany(&quot;Microsoft&quot;)&gt; \n\nModule Example\n    Sub Main()\n        &#39; Get the Assembly type to access its metadata.\n        Dim assy As Reflection.Assembly = GetType(Example).Assembly\n\n        &#39; Iterate through all the attributes for the assembly.\n        For Each attr As Attribute In Attribute.GetCustomAttributes(assy)\n            &#39; Check for the AssemblyTitle attribute.\n            If TypeOf attr Is AssemblyTitleAttribute Then\n                &#39; Convert the attribute to access its data.\n                Dim attrTitle As AssemblyTitleAttribute = _\n                    CType(attr, AssemblyTitleAttribute)\n                Console.WriteLine(&quot;Assembly title is &quot;&quot;{0}&quot;&quot;.&quot;, _\n                    attrTitle.Title)\n\n            &#39; Check for the AssemblyDescription attribute.\n            ElseIf TypeOf attr Is AssemblyDescriptionAttribute Then\n                &#39; Convert the attribute to access its data.\n                Dim attrDesc As AssemblyDescriptionAttribute = _\n                    CType(attr, AssemblyDescriptionAttribute)\n                Console.WriteLine(&quot;Assembly description is &quot;&quot;{0}&quot;&quot;.&quot;, _\n                    attrDesc.Description)\n\n            &#39; Check for the AssemblyCompany attribute.\n            ElseIf TypeOf attr Is AssemblyCompanyAttribute Then\n                &#39; Convert the attribute to access its data.\n                Dim attrComp As AssemblyCompanyAttribute = _\n                    CType(attr, AssemblyCompanyAttribute)\n                Console.WriteLine(&quot;Assembly company is {0}.&quot;, _\n                    attrComp.Company)\n            End If\n        Next\n    End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;     Assembly company is Microsoft.\n&#39;     Assembly description is &quot;GetCustomAttributes() Demo&quot;.\n&#39;     Assembly title is &quot;CustAttrs1VB&quot;.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Attribute_GetCustomAttributes_System_Reflection_MemberInfo_\">\r\n    \r\n            <a id=\"System_Attribute_GetCustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributes(MemberInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves an array of the custom attributes applied to a member of a type. A parameter specifies the member.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Attribute[] GetCustomAttributes (System.Reflection.MemberInfo element);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object derived from the <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> class that describes a constructor, event, field, method, or property member of a class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a>[]</div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a> array that contains the custom attributes applied to <code>element</code>, or an empty array if no such custom attributes exist.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>element</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>element</code> is not a constructor, method, property, event, type, or field.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a></div>\r\n                  </div>\r\n                  <p>A custom attribute type cannot be loaded.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The return value contains the custom attributes for ancestors of <code>element</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework version 2.0, this method returns security attributes on methods, constructors, and types if the attributes are stored in the new metadata format. Assemblies compiled with version 2.0 or later use the new format. Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format. See <a href=\"http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5\" data-linktype=\"external\">Emitting Declarative Security Attributes</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_\" data-linktype=\"relative-path\">GetCustomAttribute</a>, taking a <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> as a parameter.  </p>\n<pre><code class=\"lang-cpp\" name=\"GetCustomAttributes#4\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Security;\nusing namespace System::Runtime::InteropServices;\n\nnamespace CustAttrs4CS\n{\n   // Create a class for Win32 imported unmanaged functions.\n   public ref class Win32\n   {\n   public:\n\n      [DllImport(&quot;user32.dll&quot;, CharSet = CharSet::Unicode)]\n      static int MessageBox( int hWnd, String^ text, String^ caption, UInt32 type );\n   };\n\n   public ref class AClass\n   {\n   public:\n\n      // Add some attributes to the Win32CallMethod.\n\n      [Obsolete(&quot;This method is obsolete. Use managed MsgBox instead.&quot;)]\n      void Win32CallMethod()\n      {\n         Win32::MessageBox( 0, &quot;This is an unmanaged call.&quot;, &quot;Be Careful!&quot;, 0 );\n      }\n\n   };\n\n   ref class DemoClass\n   {\n   public:\n      static void Main()\n      {\n         // Get the Class type to access its metadata.\n         Type^ clsType = AClass::typeid;\n\n         // Get the type information for the Win32CallMethod.\n         MethodInfo^ mInfo = clsType-&gt;GetMethod( &quot;Win32CallMethod&quot; );\n         if ( mInfo != nullptr )\n         {\n            // Iterate through all the attributes for the method.\n            System::Collections::IEnumerator^ myEnum3 = Attribute::GetCustomAttributes( mInfo )-&gt;GetEnumerator();\n            while ( myEnum3-&gt;MoveNext() )\n            {\n               Attribute^ attr = safe_cast&lt;Attribute^&gt;(myEnum3-&gt;Current);\n\n               // Check for the Obsolete attribute.\n               if ( attr-&gt;GetType() == ObsoleteAttribute::typeid )\n               {\n                  Console::WriteLine( &quot;Method {0} is obsolete. &quot;\n                  &quot;The message is:&quot;, mInfo-&gt;Name );\n                  Console::WriteLine( (dynamic_cast&lt;ObsoleteAttribute^&gt;(attr))-&gt;Message );\n               }\n               // Check for the SuppressUnmanagedCodeSecurity attribute.\n               else\n\n               // Check for the SuppressUnmanagedCodeSecurity attribute.\n               if ( attr-&gt;GetType() == SuppressUnmanagedCodeSecurityAttribute::typeid )\n               {\n                  Console::WriteLine( &quot;This method calls unmanaged code &quot;\n                  &quot;with no security check.&quot; );\n                  Console::WriteLine( &quot;Please do not use unless absolutely necessary.&quot; );\n                  AClass^ myCls = gcnew AClass;\n                  myCls-&gt;Win32CallMethod();\n               }\n            }\n         }\n      }\n   };\n}\n\n\n/*\n * Output:\n * Method Win32CallMethod is obsolete. The message is:\n * This method is obsolete. Use managed MsgBox instead.\n * This method calls unmanaged code with no security check.\n * Please do not use unless absolutely necessary.\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"GetCustomAttributes#4\">using System;\nusing System.Reflection;\nusing System.Security;\nusing System.Runtime.InteropServices;\n\nnamespace CustAttrs4CS\n{\n\n    // Define an enumeration of Win32 unmanaged types\n    public enum UnmanagedType\n    {\n        User,\n        GDI,\n        Kernel,\n        Shell,\n        Networking,\n        Multimedia\n    }\n\n    // Define the Unmanaged attribute.\n    public class UnmanagedAttribute : Attribute\n    {\n        // Storage for the UnmanagedType value.\n        protected UnmanagedType thisType;\n\n        // Set the unmanaged type in the constructor.\n        public UnmanagedAttribute(UnmanagedType type)\n        {\n            thisType = type;\n        }\n\n        // Define a property to get and set the UnmanagedType value.\n        public UnmanagedType Win32Type\n        {\n            get { return thisType; }\n            set { thisType = Win32Type; }\n        }\n    }\n\n    // Create a class for an imported Win32 unmanaged function.\n    public class Win32 {\n        [DllImport(&quot;user32.dll&quot;, CharSet = CharSet.Unicode)]\n        public static extern int MessageBox(int hWnd, String text,\n            String caption, uint type);\n    }\n\n    public class AClass {\n        // Add some attributes to Win32CallMethod.\n        [Obsolete(&quot;This method is obsolete. Use managed MsgBox instead.&quot;)]\n        [Unmanaged(UnmanagedType.User)]\n        public void Win32CallMethod()\n        {\n            Win32.MessageBox(0, &quot;This is an unmanaged call.&quot;, &quot;Caution!&quot;, 0);\n        }\n    }\n\n    class DemoClass {\n        static void Main(string[] args)\n            {\n            // Get the AClass type to access its metadata.\n            Type clsType = typeof(AClass);\n            // Get the type information for Win32CallMethod.\n            MethodInfo mInfo = clsType.GetMethod(&quot;Win32CallMethod&quot;);\n            if (mInfo != null)\n            {\n                // Iterate through all the attributes of the method.\n                foreach(Attribute attr in\n                    Attribute.GetCustomAttributes(mInfo)) {\n                    // Check for the Obsolete attribute.\n                    if (attr.GetType() == typeof(ObsoleteAttribute))\n                    {\n                        Console.WriteLine(&quot;Method {0} is obsolete. &quot; +\n                            &quot;The message is:&quot;,\n                            mInfo.Name);\n                        Console.WriteLine(&quot;  \\&quot;{0}\\&quot;&quot;,\n                            ((ObsoleteAttribute)attr).Message);\n                    }\n\n                    // Check for the Unmanaged attribute.\n                    else if (attr.GetType() == typeof(UnmanagedAttribute))\n                    {\n                        Console.WriteLine(\n                            &quot;This method calls unmanaged code.&quot;);\n                        Console.WriteLine(\n                            String.Format(&quot;The Unmanaged attribute type is {0}.&quot;,\n                                          ((UnmanagedAttribute)attr).Win32Type));\n                        AClass myCls = new AClass();\n                        myCls.Win32CallMethod();\n                    }\n                }\n            }\n        }\n    }\n}\n\n/*\n\nThis code example produces the following results.\n\nFirst, the compilation yields the warning, &quot;...This method is\nobsolete. Use managed MsgBox instead.&quot;\nSecond, execution yields a message box with a title of &quot;Caution!&quot;\nand message text of &quot;This is an unmanaged call.&quot;\nThird, the following text is displayed in the console window:\n\nMethod Win32CallMethod is obsolete. The message is:\n  &quot;This method is obsolete. Use managed MsgBox instead.&quot;\nThis method calls unmanaged code.\nThe Unmanaged attribute type is User.\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"GetCustomAttributes#4\">Imports System\nImports System.Reflection\nImports System.Security\nImports System.Runtime.InteropServices\n\n&#39; Define an enumeration of Win32 unmanaged types\nPublic Enum UnmanagedType\n    User\n    GDI\n    Kernel\n    Shell\n    Networking\n    Multimedia\nEnd Enum &#39;UnmanagedType\n\n&#39; Define the Unmanaged attribute.\nPublic Class UnmanagedAttribute \n             Inherits Attribute\n\n    &#39; Storage for the UnmanagedType value.\n    Protected thisType As UnmanagedType\n    \n    &#39; Set the unmanaged type in the constructor.\n    Public Sub New(ByVal type As UnmanagedType) \n        thisType = type\n    End Sub &#39;New\n    \n    &#39; Define a property to get and set the UnmanagedType value.\n    Public Property Win32Type() As UnmanagedType \n        Get\n            Return thisType\n        End Get\n        Set\n            thisType = Win32Type\n        End Set\n    End Property\nEnd Class &#39;UnmanagedAttribute \n\n&#39; Create a class for an imported Win32 unmanaged function.\nPublic Class Win32\n    &lt;DllImport(&quot;user32.dll&quot;, CharSet:=CharSet.Unicode)&gt; _\n    Public Shared Function MessageBox(ByVal hWnd As Integer, _\n                                      ByVal Text As String, _\n                                      ByVal caption As String, _\n                                      ByVal type As Integer) As Integer\n    End Function &#39;MessageBox\nEnd Class &#39;Win32\n\nPublic Class AClass\n    &#39; Add some attributes to Win32CallMethod.\n    &lt;Obsolete(&quot;This method is obsolete. Use managed MsgBox instead.&quot;), _\n     Unmanaged(UnmanagedType.User)&gt;  _\n    Public Sub Win32CallMethod() \n        Win32.MessageBox(0, &quot;This is an unmanaged call.&quot;, &quot;Caution!&quot;, 0)    \n    End Sub &#39;Win32CallMethod\nEnd Class &#39;AClass\n\nClass DemoClass\n    Shared Sub Main(ByVal args() As String) \n        &#39; Get the AClass type to access its metadata.\n        Dim clsType As Type = GetType(AClass)\n        &#39; Get the type information for Win32CallMethod.\n        Dim mInfo As MethodInfo = clsType.GetMethod(&quot;Win32CallMethod&quot;)\n        If Not (mInfo Is Nothing) Then\n            &#39; Iterate through all the attributes of the method.\n            Dim attr As Attribute\n            For Each attr In  Attribute.GetCustomAttributes(mInfo)\n                &#39; Check for the Obsolete attribute.\n                If attr.GetType().Equals(GetType(ObsoleteAttribute)) Then\n                    Console.WriteLine(&quot;Method {0} is obsolete. The message is:&quot;, mInfo.Name)\n                    Console.WriteLine(&quot;  &quot;&quot;{0}&quot;&quot;&quot;, CType(attr, ObsoleteAttribute).Message)\n                &#39; Check for the Unmanaged attribute.\n                ElseIf attr.GetType().Equals(GetType(UnmanagedAttribute)) Then\n                    Console.WriteLine(&quot;This method calls unmanaged code.&quot;)\n                    Console.WriteLine( _\n                            String.Format(&quot;The Unmanaged attribute type is {0}.&quot;, _\n                            CType(attr, UnmanagedAttribute).Win32Type))\n                    Dim myCls As New AClass()\n                    myCls.Win32CallMethod()\n                End If\n            Next attr\n        End If\n    End Sub &#39;Main\nEnd Class &#39;DemoClass\n\n&#39;\n&#39;This code example produces the following results. \n&#39;\n&#39;First, the compilation yields the warning, &quot;...This method is \n&#39;obsolete. Use managed MsgBox instead.&quot;\n&#39;Second, execution yields a message box with a title of &quot;Caution!&quot; \n&#39;and message text of &quot;This is an unmanaged call.&quot; \n&#39;Third, the following text is displayed in the console window:\n&#39;\n&#39;Method Win32CallMethod is obsolete. The message is:\n&#39;  &quot;This method is obsolete. Use managed MsgBox instead.&quot;\n&#39;This method calls unmanaged code.\n&#39;The Unmanaged attribute type is User.\n&#39; \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Attribute_GetCustomAttributes_System_Reflection_Module_\">\r\n    \r\n            <a id=\"System_Attribute_GetCustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributes(Module)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves an array of the custom attributes applied to a module. A parameter specifies the module.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Attribute[] GetCustomAttributes (System.Reflection.Module element);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object derived from the <a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a> class that describes a portable executable file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a>[]</div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a> array that contains the custom attributes applied to <code>element</code>, or an empty array if no such custom attributes exist.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>element</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a>, taking a <a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a> as a parameter.  </p>\n<pre><code class=\"lang-cpp\" name=\"GetCustomAttributes#2\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::ComponentModel;\n\n// Assign some attributes to the module.\n// Set the module&#39;s CLSCompliant attribute to false\n// The CLSCompliant attribute is applicable for /target:module.\n[module:Description(&quot;A sample description&quot;)];\n[module:CLSCompliant(false)];\nnamespace CustAttrs2CS\n{\n   ref class DemoClass\n   {\n   public:\n      static void Main()\n      {\n         Type^ clsType = DemoClass::typeid;\n\n         // Get the Module type to access its metadata.\n         Module^ module = clsType-&gt;Module;\n\n         // Iterate through all the attributes for the module.\n         System::Collections::IEnumerator^ myEnum1 = Attribute::GetCustomAttributes( module )-&gt;GetEnumerator();\n         while ( myEnum1-&gt;MoveNext() )\n         {\n            Attribute^ attr = safe_cast&lt;Attribute^&gt;(myEnum1-&gt;Current);\n\n            // Check for the Description attribute.\n            if ( attr-&gt;GetType() == DescriptionAttribute::typeid )\n                        Console::WriteLine( &quot;Module {0} has the description \\&quot;{1}\\&quot;.&quot;, module-&gt;Name, (dynamic_cast&lt;DescriptionAttribute^&gt;(attr))-&gt;Description );\n            // Check for the CLSCompliant attribute.\n            else\n\n            // Check for the CLSCompliant attribute.\n            if ( attr-&gt;GetType() == CLSCompliantAttribute::typeid )\n                        Console::WriteLine( &quot;Module {0} {1} CLSCompliant.&quot;, module-&gt;Name, (dynamic_cast&lt;CLSCompliantAttribute^&gt;(attr))-&gt;IsCompliant ? (String^)&quot;is&quot; : &quot;is not&quot; );\n         }\n      }\n   };\n}\n\n\n/*\n * Output:\n * Module CustAttrs2CS.exe is not CLSCompliant.\n * Module CustAttrs2CS.exe has the description &quot;A sample description&quot;.\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"GetCustomAttributes#2\">using System;\nusing System.Reflection;\nusing System.ComponentModel;\n\n// Assign some attributes to the module.\n[module:Description(&quot;A sample description&quot;)]\n\n// Set the module&#39;s CLSCompliant attribute to false\n// The CLSCompliant attribute is applicable for /target:module.\n[module:CLSCompliant(false)]\n\nnamespace CustAttrs2CS {\n    class DemoClass {\n        static void Main(string[] args) {\n            Type clsType = typeof(DemoClass);\n            // Get the Module type to access its metadata.\n            Module module = clsType.Module;\n\n            // Iterate through all the attributes for the module.\n            foreach(Attribute attr in Attribute.GetCustomAttributes(module)) {\n                // Check for the Description attribute.\n                if (attr.GetType() == typeof(DescriptionAttribute))\n                    Console.WriteLine(&quot;Module {0} has the description &quot; +\n                        &quot;\\&quot;{1}\\&quot;.&quot;, module.Name, \n                        ((DescriptionAttribute)attr).Description);\n                // Check for the CLSCompliant attribute.\n                else if (attr.GetType() == typeof(CLSCompliantAttribute))\n                    Console.WriteLine(&quot;Module {0} {1} CLSCompliant.&quot;,\n                        module.Name,\n                        ((CLSCompliantAttribute)attr).IsCompliant ? \n                            &quot;is&quot; : &quot;is not&quot;);\n            }\n        }\n    }\n}\n\n/*\n * Output:\n * Module CustAttrs2CS.exe is not CLSCompliant.\n * Module CustAttrs2CS.exe has the description &quot;A sample description&quot;.\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"GetCustomAttributes#2\">Imports System\nImports System.Reflection\nImports System.ComponentModel\n\n&#39; Give the Module some attributes.\n&lt;Module: Description(&quot;A sample description&quot;)&gt; \n\n&#39; Make the CLSCompliant attribute False.\n&#39; The CLSCompliant attribute is applicable for /target:module.\n&lt;Module: CLSCompliant(False)&gt; \n\nModule DemoModule\n\n    Sub Main()\n        &#39; Get the Module type to access its metadata.\n        Dim modType As Reflection.Module = GetType(DemoModule).Module\n        Dim attr As Attribute\n        &#39; Iterate through all the attributes for the module.\n        For Each attr In Attribute.GetCustomAttributes(modType)\n            &#39; Check for the Description attribute.\n            If TypeOf attr Is DescriptionAttribute Then\n                &#39; Convert the attribute to access its data.\n                Dim descAttr As DescriptionAttribute = _\n                    CType(attr, DescriptionAttribute)\n                Console.WriteLine(&quot;Module {0} has the description &quot;&quot;{1}&quot;&quot;.&quot;, _\n                    modType.Name, descAttr.Description)\n\n            &#39; Check for the CLSCompliant attribute.\n            ElseIf TypeOf attr Is CLSCompliantAttribute Then\n                &#39; Convert the attribute to access its data.\n                Dim CLSCompAttr As CLSCompliantAttribute = _\n                    CType(attr, CLSCompliantAttribute)\n                Dim strCompliant As String\n                If CLSCompAttr.IsCompliant Then\n                    strCompliant = &quot;is&quot;\n                Else\n                    strCompliant = &quot;is not&quot;\n                End If\n                Console.WriteLine(&quot;Module {0} {1} CLSCompliant.&quot;, _\n                    modType.Name, strCompliant)\n            End If\n        Next\n    End Sub\nEnd Module\n\n&#39; Output:\n&#39; Module CustAttrs2VB.exe has the description &quot;A sample description&quot;.\n&#39; Module CustAttrs2VB.exe is not CLSCompliant.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Attribute_GetCustomAttributes_System_Reflection_ParameterInfo_\">\r\n    \r\n            <a id=\"System_Attribute_GetCustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributes(ParameterInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves an array of the custom attributes applied to a method parameter. A parameter specifies the method parameter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Attribute[] GetCustomAttributes (System.Reflection.ParameterInfo element);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object derived from the <a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a> class that describes a parameter of a member of a class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a>[]</div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a> array that contains the custom attributes applied to <code>element</code>, or an empty array if no such custom attributes exist.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>element</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a></div>\r\n                  </div>\r\n                  <p>A custom attribute type cannot be loaded.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>element</code> represents a parameter in a method of a derived type, the return value includes the inheritable custom attributes applied to the same parameter in the overridden base methods.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a>, taking a <a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a> as a parameter.  </p>\n<pre><code class=\"lang-cpp\" name=\"GetCustomAttributes#5\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::ComponentModel;\n\nnamespace CustAttrs5CS\n{\n   public ref class AClass\n   {\n   public:\n      void ParamArrayAndDesc(\n         // Add ParamArray and Description attributes.\n         [Description(&quot;This argument is a ParamArray&quot;)]\n         array&lt;Int32&gt;^args )\n      {}\n   };\n\n   ref class DemoClass\n   {\n   public:\n      static void Main()\n      {\n         // Get the Class type to access its metadata.\n         Type^ clsType = AClass::typeid;\n\n         // Get the type information for the method.\n         MethodInfo^ mInfo = clsType-&gt;GetMethod( &quot;ParamArrayAndDesc&quot; );\n         if ( mInfo != nullptr )\n         {\n            // Get the parameter information.\n            array&lt;ParameterInfo^&gt;^pInfo = mInfo-&gt;GetParameters();\n            if ( pInfo != nullptr )\n            {\n               // Iterate through all the attributes for the parameter.\n               System::Collections::IEnumerator^ myEnum4 = Attribute::GetCustomAttributes( pInfo[ 0 ] )-&gt;GetEnumerator();\n               while ( myEnum4-&gt;MoveNext() )\n               {\n                  Attribute^ attr = safe_cast&lt;Attribute^&gt;(myEnum4-&gt;Current);\n\n                  // Check for the ParamArray attribute.\n                  if ( attr-&gt;GetType() == ParamArrayAttribute::typeid )\n                                    Console::WriteLine( &quot;Parameter {0} for method {1} &quot;\n                  &quot;has the ParamArray attribute.&quot;, pInfo[ 0 ]-&gt;Name, mInfo-&gt;Name );\n                  // Check for the Description attribute.\n                  else\n\n                  // Check for the Description attribute.\n                  if ( attr-&gt;GetType() == DescriptionAttribute::typeid )\n                  {\n                     Console::WriteLine( &quot;Parameter {0} for method {1} &quot;\n                     &quot;has a description attribute.&quot;, pInfo[ 0 ]-&gt;Name, mInfo-&gt;Name );\n                     Console::WriteLine( &quot;The description is: \\&quot;{0}\\&quot;&quot;, (dynamic_cast&lt;DescriptionAttribute^&gt;(attr))-&gt;Description );\n                  }\n               }\n            }\n         }\n      }\n   };\n}\n\n/*\n * Output:\n * Parameter args for method ParamArrayAndDesc has a description attribute.\n * The description is: &quot;This argument is a ParamArray&quot;\n * Parameter args for method ParamArrayAndDesc has the ParamArray attribute.\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"GetCustomAttributes#5\">using System;\nusing System.Reflection;\nusing System.ComponentModel;\n\nnamespace CustAttrs5CS {\n    public class AClass {\n        public void ParamArrayAndDesc(\n            // Add ParamArray (with the keyword) and Description attributes.\n            [Description(&quot;This argument is a ParamArray&quot;)]\n            params int[] args)\n        {}\n    }\n\n    class DemoClass {\n        static void Main(string[] args) {\n            // Get the Class type to access its metadata.\n            Type clsType = typeof(AClass);\n            // Get the type information for the method.\n            MethodInfo mInfo = clsType.GetMethod(&quot;ParamArrayAndDesc&quot;);\n            if (mInfo != null) {\n                // Get the parameter information.\n                ParameterInfo[] pInfo = mInfo.GetParameters();\n                if (pInfo != null) {\n                    // Iterate through all the attributes for the parameter.\n                    foreach(Attribute attr in \n                        Attribute.GetCustomAttributes(pInfo[0])) {\n                        // Check for the ParamArray attribute.\n                        if (attr.GetType() == typeof(ParamArrayAttribute))\n                            Console.WriteLine(&quot;Parameter {0} for method {1} &quot; +\n                                &quot;has the ParamArray attribute.&quot;,\n                                pInfo[0].Name, mInfo.Name);\n                        // Check for the Description attribute.\n                        else if (attr.GetType() == \n                            typeof(DescriptionAttribute)) {\n                            Console.WriteLine(&quot;Parameter {0} for method {1} &quot; +\n                                &quot;has a description attribute.&quot;,\n                                pInfo[0].Name, mInfo.Name);\n                            Console.WriteLine(&quot;The description is: \\&quot;{0}\\&quot;&quot;,\n                                ((DescriptionAttribute)attr).Description);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n/*\n * Output:\n * Parameter args for method ParamArrayAndDesc has a description attribute.\n * The description is: &quot;This argument is a ParamArray&quot;\n * Parameter args for method ParamArrayAndDesc has the ParamArray attribute.\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"GetCustomAttributes#5\">Imports System\nImports System.Reflection\nImports System.ComponentModel\n\nModule DemoModule\n    Public Class AClass\n        &#39; Add Description and ParamArray (with the keyword) attributes.\n        Public Sub ParamArrayAndDesc( _\n            &lt;Description(&quot;This argument is a ParamArray&quot;)&gt; _\n            ByVal ParamArray args() As Integer)\n        End Sub\n    End Class\n\n    Sub Main()\n        &#39; Get the Class type to access its metadata.\n        Dim clsType As Type = GetType(AClass)\n        &#39; Get the type information for the method.\n        Dim mInfo As MethodInfo = clsType.GetMethod(&quot;ParamArrayAndDesc&quot;)\n        &#39; Get the Parameter information for the method.\n        Dim pInfo() As ParameterInfo = mInfo.GetParameters()\n        Dim attr As Attribute\n        &#39; Iterate through each attribute of the parameter.\n        For Each attr In Attribute.GetCustomAttributes(pInfo(0))\n            &#39; Check for the ParamArray attribute.\n            If TypeOf attr Is ParamArrayAttribute Then\n                &#39; Convert the attribute to access its data.\n                Dim paAttr As ParamArrayAttribute = _\n                    CType(attr, ParamArrayAttribute)\n                Console.WriteLine(&quot;Parameter {0} has the &quot; + _\n                    &quot;ParamArray attribute.&quot;, pInfo(0).Name)\n            &#39; Check for the Description attribute.\n            ElseIf TypeOf attr Is DescriptionAttribute Then\n                &#39; Convert the attribute to access its data.\n                Dim descAttr As DescriptionAttribute = _\n                    CType(attr, DescriptionAttribute)\n                Console.WriteLine(&quot;Parameter {0} has a description &quot; + _\n                    &quot;attribute. The description is:&quot;, pInfo(0).Name)\n                Console.WriteLine(descAttr.Description)\n            End If\n        Next\n    End Sub\nEnd Module\n\n&#39; Output:\n&#39; Parameter args has a description attribute. The description is:\n&#39; This argument is a ParamArray\n&#39; Parameter args has the ParamArray attribute.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Attribute_GetCustomAttributes_System_Reflection_Assembly_System_Boolean_\">\r\n    \r\n            <a id=\"System_Attribute_GetCustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributes(Assembly,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves an array of the custom attributes applied to an assembly. Parameters specify the assembly, and an ignored search option.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Attribute[] GetCustomAttributes (System.Reflection.Assembly element, bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object derived from the <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> class that describes a reusable collection of modules.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored, and does not affect the operation of this method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a>[]</div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a> array that contains the custom attributes applied to <code>element</code>, or an empty array if no such custom attributes exist.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>element</code> or <code>attributeType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework version 2.0, this method returns security attributes if the attributes are stored in the new metadata format. Assemblies compiled with version 2.0 or later use the new format. Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format. See <a href=\"http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5\" data-linktype=\"external\">Emitting Declarative Security Attributes</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a>, taking an <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> as a parameter.  </p>\n<pre><code class=\"lang-cpp\" name=\"GetCustomAttributes#1\">using namespace System;\nusing namespace System::Reflection;\n\n[assembly:AssemblyTitle(&quot;CustAttrs1CPP&quot;)];\n[assembly:AssemblyDescription(&quot;GetCustomAttributes() Demo&quot;)];\n[assembly:AssemblyCompany(&quot;Microsoft&quot;)];\n\nref class Example\n{};\n\nstatic void main()\n{\n    Type^ clsType = Example::typeid;\n\n    // Get the Assembly type to access its metadata.\n    Assembly^ assy = clsType-&gt;Assembly;\n\n    // Iterate through the attributes for the assembly.\n    System::Collections::IEnumerator^ myEnum = Attribute::GetCustomAttributes( assy )-&gt;GetEnumerator();\n    while ( myEnum-&gt;MoveNext() )\n    {\n       Attribute^ attr = safe_cast&lt;Attribute^&gt;(myEnum-&gt;Current);\n\n       // Check for the AssemblyTitle attribute.\n       if ( attr-&gt;GetType() == AssemblyTitleAttribute::typeid )\n          Console::WriteLine( &quot;Assembly title is \\&quot;{0}\\&quot;.&quot;, (dynamic_cast&lt;AssemblyTitleAttribute^&gt;(attr))-&gt;Title );\n          // Check for the AssemblyDescription attribute.\n       else\n          // Check for the AssemblyDescription attribute.\n          if ( attr-&gt;GetType() == AssemblyDescriptionAttribute::typeid )\n             Console::WriteLine( &quot;Assembly description is \\&quot;{0}\\&quot;.&quot;, (dynamic_cast&lt;AssemblyDescriptionAttribute^&gt;(attr))-&gt;Description );\n          // Check for the AssemblyCompany attribute.\n          else if ( attr-&gt;GetType() == AssemblyCompanyAttribute::typeid )\n             Console::WriteLine( &quot;Assembly company is {0}.&quot;, (dynamic_cast&lt;AssemblyCompanyAttribute^&gt;(attr))-&gt;Company );\n    }\n}\n// The example displays the following output:\n//     Assembly description is &quot;GetCustomAttributes() Demo&quot;.\n//     Assembly company is Microsoft.\n//     Assembly title is &quot;CustAttrs1CPP&quot;.\n</code></pre><pre><code class=\"lang-cs\" name=\"GetCustomAttributes#1\">using System;\nusing System.Reflection;\n\n[assembly: AssemblyTitle(&quot;CustAttrs1CS&quot;)]\n[assembly: AssemblyDescription(&quot;GetCustomAttributes() Demo&quot;)]\n[assembly: AssemblyCompany(&quot;Microsoft&quot;)]\n\nclass Example {\n    static void Main() {\n        // Get the Assembly object to access its metadata.\n        Assembly assy = typeof(Example).Assembly;\n\n        // Iterate through the attributes for the assembly.\n        foreach(Attribute attr in Attribute.GetCustomAttributes(assy)) {\n            // Check for the AssemblyTitle attribute.\n            if (attr.GetType() == typeof(AssemblyTitleAttribute))\n                Console.WriteLine(&quot;Assembly title is \\&quot;{0}\\&quot;.&quot;,\n                    ((AssemblyTitleAttribute)attr).Title);\n\n            // Check for the AssemblyDescription attribute.\n            else if (attr.GetType() == \n                typeof(AssemblyDescriptionAttribute))\n                Console.WriteLine(&quot;Assembly description is \\&quot;{0}\\&quot;.&quot;,\n                    ((AssemblyDescriptionAttribute)attr).Description);\n\n            // Check for the AssemblyCompany attribute.\n            else if (attr.GetType() == typeof(AssemblyCompanyAttribute))\n                Console.WriteLine(&quot;Assembly company is {0}.&quot;,\n                    ((AssemblyCompanyAttribute)attr).Company);\n        }\n   }\n}\n// The example displays the following output:\n//     Assembly title is &quot;CustAttrs1CS&quot;.\n//     Assembly description is &quot;GetCustomAttributes() Demo&quot;.\n//     Assembly company is Microsoft.\n</code></pre><pre><code class=\"lang-vb\" name=\"GetCustomAttributes#1\">Imports System.Reflection\n\n&lt;Assembly: AssemblyTitle(&quot;CustAttrs1VB&quot;)&gt; \n&lt;Assembly: AssemblyDescription(&quot;GetCustomAttributes() Demo&quot;)&gt; \n&lt;Assembly: AssemblyCompany(&quot;Microsoft&quot;)&gt; \n\nModule Example\n    Sub Main()\n        &#39; Get the Assembly type to access its metadata.\n        Dim assy As Reflection.Assembly = GetType(Example).Assembly\n\n        &#39; Iterate through all the attributes for the assembly.\n        For Each attr As Attribute In Attribute.GetCustomAttributes(assy)\n            &#39; Check for the AssemblyTitle attribute.\n            If TypeOf attr Is AssemblyTitleAttribute Then\n                &#39; Convert the attribute to access its data.\n                Dim attrTitle As AssemblyTitleAttribute = _\n                    CType(attr, AssemblyTitleAttribute)\n                Console.WriteLine(&quot;Assembly title is &quot;&quot;{0}&quot;&quot;.&quot;, _\n                    attrTitle.Title)\n\n            &#39; Check for the AssemblyDescription attribute.\n            ElseIf TypeOf attr Is AssemblyDescriptionAttribute Then\n                &#39; Convert the attribute to access its data.\n                Dim attrDesc As AssemblyDescriptionAttribute = _\n                    CType(attr, AssemblyDescriptionAttribute)\n                Console.WriteLine(&quot;Assembly description is &quot;&quot;{0}&quot;&quot;.&quot;, _\n                    attrDesc.Description)\n\n            &#39; Check for the AssemblyCompany attribute.\n            ElseIf TypeOf attr Is AssemblyCompanyAttribute Then\n                &#39; Convert the attribute to access its data.\n                Dim attrComp As AssemblyCompanyAttribute = _\n                    CType(attr, AssemblyCompanyAttribute)\n                Console.WriteLine(&quot;Assembly company is {0}.&quot;, _\n                    attrComp.Company)\n            End If\n        Next\n    End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;     Assembly company is Microsoft.\n&#39;     Assembly description is &quot;GetCustomAttributes() Demo&quot;.\n&#39;     Assembly title is &quot;CustAttrs1VB&quot;.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Attribute_GetCustomAttributes_System_Reflection_Assembly_System_Type_\">\r\n    \r\n            <a id=\"System_Attribute_GetCustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributes(Assembly,Type)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves an array of the custom attributes applied to an assembly. Parameters specify the assembly, and the type of the custom attribute to search for.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Attribute[] GetCustomAttributes (System.Reflection.Assembly element, Type attributeType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object derived from the <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> class that describes a reusable collection of modules.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type, or a base type, of the custom attribute to search for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a>[]</div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a> array that contains the custom attributes of type <code>attributeType</code> applied to <code>element</code>, or an empty array if no such custom attributes exist.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>element</code> or <code>attributeType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>attributeType</code> is not derived from <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework version 2.0, this method returns security attributes if the attributes are stored in the new metadata format. Assemblies compiled with version 2.0 or later use the new format. Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format. See <a href=\"http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5\" data-linktype=\"external\">Emitting Declarative Security Attributes</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a>, taking an <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> as a parameter.  </p>\n<pre><code class=\"lang-cpp\" name=\"GetCustomAttributes#1\">using namespace System;\nusing namespace System::Reflection;\n\n[assembly:AssemblyTitle(&quot;CustAttrs1CPP&quot;)];\n[assembly:AssemblyDescription(&quot;GetCustomAttributes() Demo&quot;)];\n[assembly:AssemblyCompany(&quot;Microsoft&quot;)];\n\nref class Example\n{};\n\nstatic void main()\n{\n    Type^ clsType = Example::typeid;\n\n    // Get the Assembly type to access its metadata.\n    Assembly^ assy = clsType-&gt;Assembly;\n\n    // Iterate through the attributes for the assembly.\n    System::Collections::IEnumerator^ myEnum = Attribute::GetCustomAttributes( assy )-&gt;GetEnumerator();\n    while ( myEnum-&gt;MoveNext() )\n    {\n       Attribute^ attr = safe_cast&lt;Attribute^&gt;(myEnum-&gt;Current);\n\n       // Check for the AssemblyTitle attribute.\n       if ( attr-&gt;GetType() == AssemblyTitleAttribute::typeid )\n          Console::WriteLine( &quot;Assembly title is \\&quot;{0}\\&quot;.&quot;, (dynamic_cast&lt;AssemblyTitleAttribute^&gt;(attr))-&gt;Title );\n          // Check for the AssemblyDescription attribute.\n       else\n          // Check for the AssemblyDescription attribute.\n          if ( attr-&gt;GetType() == AssemblyDescriptionAttribute::typeid )\n             Console::WriteLine( &quot;Assembly description is \\&quot;{0}\\&quot;.&quot;, (dynamic_cast&lt;AssemblyDescriptionAttribute^&gt;(attr))-&gt;Description );\n          // Check for the AssemblyCompany attribute.\n          else if ( attr-&gt;GetType() == AssemblyCompanyAttribute::typeid )\n             Console::WriteLine( &quot;Assembly company is {0}.&quot;, (dynamic_cast&lt;AssemblyCompanyAttribute^&gt;(attr))-&gt;Company );\n    }\n}\n// The example displays the following output:\n//     Assembly description is &quot;GetCustomAttributes() Demo&quot;.\n//     Assembly company is Microsoft.\n//     Assembly title is &quot;CustAttrs1CPP&quot;.\n</code></pre><pre><code class=\"lang-cs\" name=\"GetCustomAttributes#1\">using System;\nusing System.Reflection;\n\n[assembly: AssemblyTitle(&quot;CustAttrs1CS&quot;)]\n[assembly: AssemblyDescription(&quot;GetCustomAttributes() Demo&quot;)]\n[assembly: AssemblyCompany(&quot;Microsoft&quot;)]\n\nclass Example {\n    static void Main() {\n        // Get the Assembly object to access its metadata.\n        Assembly assy = typeof(Example).Assembly;\n\n        // Iterate through the attributes for the assembly.\n        foreach(Attribute attr in Attribute.GetCustomAttributes(assy)) {\n            // Check for the AssemblyTitle attribute.\n            if (attr.GetType() == typeof(AssemblyTitleAttribute))\n                Console.WriteLine(&quot;Assembly title is \\&quot;{0}\\&quot;.&quot;,\n                    ((AssemblyTitleAttribute)attr).Title);\n\n            // Check for the AssemblyDescription attribute.\n            else if (attr.GetType() == \n                typeof(AssemblyDescriptionAttribute))\n                Console.WriteLine(&quot;Assembly description is \\&quot;{0}\\&quot;.&quot;,\n                    ((AssemblyDescriptionAttribute)attr).Description);\n\n            // Check for the AssemblyCompany attribute.\n            else if (attr.GetType() == typeof(AssemblyCompanyAttribute))\n                Console.WriteLine(&quot;Assembly company is {0}.&quot;,\n                    ((AssemblyCompanyAttribute)attr).Company);\n        }\n   }\n}\n// The example displays the following output:\n//     Assembly title is &quot;CustAttrs1CS&quot;.\n//     Assembly description is &quot;GetCustomAttributes() Demo&quot;.\n//     Assembly company is Microsoft.\n</code></pre><pre><code class=\"lang-vb\" name=\"GetCustomAttributes#1\">Imports System.Reflection\n\n&lt;Assembly: AssemblyTitle(&quot;CustAttrs1VB&quot;)&gt; \n&lt;Assembly: AssemblyDescription(&quot;GetCustomAttributes() Demo&quot;)&gt; \n&lt;Assembly: AssemblyCompany(&quot;Microsoft&quot;)&gt; \n\nModule Example\n    Sub Main()\n        &#39; Get the Assembly type to access its metadata.\n        Dim assy As Reflection.Assembly = GetType(Example).Assembly\n\n        &#39; Iterate through all the attributes for the assembly.\n        For Each attr As Attribute In Attribute.GetCustomAttributes(assy)\n            &#39; Check for the AssemblyTitle attribute.\n            If TypeOf attr Is AssemblyTitleAttribute Then\n                &#39; Convert the attribute to access its data.\n                Dim attrTitle As AssemblyTitleAttribute = _\n                    CType(attr, AssemblyTitleAttribute)\n                Console.WriteLine(&quot;Assembly title is &quot;&quot;{0}&quot;&quot;.&quot;, _\n                    attrTitle.Title)\n\n            &#39; Check for the AssemblyDescription attribute.\n            ElseIf TypeOf attr Is AssemblyDescriptionAttribute Then\n                &#39; Convert the attribute to access its data.\n                Dim attrDesc As AssemblyDescriptionAttribute = _\n                    CType(attr, AssemblyDescriptionAttribute)\n                Console.WriteLine(&quot;Assembly description is &quot;&quot;{0}&quot;&quot;.&quot;, _\n                    attrDesc.Description)\n\n            &#39; Check for the AssemblyCompany attribute.\n            ElseIf TypeOf attr Is AssemblyCompanyAttribute Then\n                &#39; Convert the attribute to access its data.\n                Dim attrComp As AssemblyCompanyAttribute = _\n                    CType(attr, AssemblyCompanyAttribute)\n                Console.WriteLine(&quot;Assembly company is {0}.&quot;, _\n                    attrComp.Company)\n            End If\n        Next\n    End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;     Assembly company is Microsoft.\n&#39;     Assembly description is &quot;GetCustomAttributes() Demo&quot;.\n&#39;     Assembly title is &quot;CustAttrs1VB&quot;.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Attribute_GetCustomAttributes_System_Reflection_MemberInfo_System_Boolean_\">\r\n    \r\n            <a id=\"System_Attribute_GetCustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributes(MemberInfo,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves an array of the custom attributes applied to a member of a type. Parameters specify the member, the type of the custom attribute to search for, and whether to search ancestors of the member.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Attribute[] GetCustomAttributes (System.Reflection.MemberInfo element, bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object derived from the <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> class that describes a constructor, event, field, method, or property member of a class.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>If <code>true</code>, specifies to also search the ancestors of <code>element</code> for custom attributes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a>[]</div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a> array that contains the custom attributes applied to <code>element</code>, or an empty array if no such custom attributes exist.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>element</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>element</code> is not a constructor, method, property, event, type, or field.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a></div>\r\n                  </div>\r\n                  <p>A custom attribute type cannot be loaded.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The return value contains the custom attributes for ancestors of <code>element</code> if <code>inherit</code> is <code>true</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework version 2.0, this method returns security attributes on methods, constructors, and types if the attributes are stored in the new metadata format. Assemblies compiled with version 2.0 or later use the new format. Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format. See <a href=\"http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5\" data-linktype=\"external\">Emitting Declarative Security Attributes</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a>, taking a <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> as a parameter.  </p>\n<pre><code class=\"lang-cpp\" name=\"GetCustomAttributes#4\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Security;\nusing namespace System::Runtime::InteropServices;\n\nnamespace CustAttrs4CS\n{\n   // Create a class for Win32 imported unmanaged functions.\n   public ref class Win32\n   {\n   public:\n\n      [DllImport(&quot;user32.dll&quot;, CharSet = CharSet::Unicode)]\n      static int MessageBox( int hWnd, String^ text, String^ caption, UInt32 type );\n   };\n\n   public ref class AClass\n   {\n   public:\n\n      // Add some attributes to the Win32CallMethod.\n\n      [Obsolete(&quot;This method is obsolete. Use managed MsgBox instead.&quot;)]\n      void Win32CallMethod()\n      {\n         Win32::MessageBox( 0, &quot;This is an unmanaged call.&quot;, &quot;Be Careful!&quot;, 0 );\n      }\n\n   };\n\n   ref class DemoClass\n   {\n   public:\n      static void Main()\n      {\n         // Get the Class type to access its metadata.\n         Type^ clsType = AClass::typeid;\n\n         // Get the type information for the Win32CallMethod.\n         MethodInfo^ mInfo = clsType-&gt;GetMethod( &quot;Win32CallMethod&quot; );\n         if ( mInfo != nullptr )\n         {\n            // Iterate through all the attributes for the method.\n            System::Collections::IEnumerator^ myEnum3 = Attribute::GetCustomAttributes( mInfo )-&gt;GetEnumerator();\n            while ( myEnum3-&gt;MoveNext() )\n            {\n               Attribute^ attr = safe_cast&lt;Attribute^&gt;(myEnum3-&gt;Current);\n\n               // Check for the Obsolete attribute.\n               if ( attr-&gt;GetType() == ObsoleteAttribute::typeid )\n               {\n                  Console::WriteLine( &quot;Method {0} is obsolete. &quot;\n                  &quot;The message is:&quot;, mInfo-&gt;Name );\n                  Console::WriteLine( (dynamic_cast&lt;ObsoleteAttribute^&gt;(attr))-&gt;Message );\n               }\n               // Check for the SuppressUnmanagedCodeSecurity attribute.\n               else\n\n               // Check for the SuppressUnmanagedCodeSecurity attribute.\n               if ( attr-&gt;GetType() == SuppressUnmanagedCodeSecurityAttribute::typeid )\n               {\n                  Console::WriteLine( &quot;This method calls unmanaged code &quot;\n                  &quot;with no security check.&quot; );\n                  Console::WriteLine( &quot;Please do not use unless absolutely necessary.&quot; );\n                  AClass^ myCls = gcnew AClass;\n                  myCls-&gt;Win32CallMethod();\n               }\n            }\n         }\n      }\n   };\n}\n\n\n/*\n * Output:\n * Method Win32CallMethod is obsolete. The message is:\n * This method is obsolete. Use managed MsgBox instead.\n * This method calls unmanaged code with no security check.\n * Please do not use unless absolutely necessary.\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"GetCustomAttributes#4\">using System;\nusing System.Reflection;\nusing System.Security;\nusing System.Runtime.InteropServices;\n\nnamespace CustAttrs4CS\n{\n\n    // Define an enumeration of Win32 unmanaged types\n    public enum UnmanagedType\n    {\n        User,\n        GDI,\n        Kernel,\n        Shell,\n        Networking,\n        Multimedia\n    }\n\n    // Define the Unmanaged attribute.\n    public class UnmanagedAttribute : Attribute\n    {\n        // Storage for the UnmanagedType value.\n        protected UnmanagedType thisType;\n\n        // Set the unmanaged type in the constructor.\n        public UnmanagedAttribute(UnmanagedType type)\n        {\n            thisType = type;\n        }\n\n        // Define a property to get and set the UnmanagedType value.\n        public UnmanagedType Win32Type\n        {\n            get { return thisType; }\n            set { thisType = Win32Type; }\n        }\n    }\n\n    // Create a class for an imported Win32 unmanaged function.\n    public class Win32 {\n        [DllImport(&quot;user32.dll&quot;, CharSet = CharSet.Unicode)]\n        public static extern int MessageBox(int hWnd, String text,\n            String caption, uint type);\n    }\n\n    public class AClass {\n        // Add some attributes to Win32CallMethod.\n        [Obsolete(&quot;This method is obsolete. Use managed MsgBox instead.&quot;)]\n        [Unmanaged(UnmanagedType.User)]\n        public void Win32CallMethod()\n        {\n            Win32.MessageBox(0, &quot;This is an unmanaged call.&quot;, &quot;Caution!&quot;, 0);\n        }\n    }\n\n    class DemoClass {\n        static void Main(string[] args)\n            {\n            // Get the AClass type to access its metadata.\n            Type clsType = typeof(AClass);\n            // Get the type information for Win32CallMethod.\n            MethodInfo mInfo = clsType.GetMethod(&quot;Win32CallMethod&quot;);\n            if (mInfo != null)\n            {\n                // Iterate through all the attributes of the method.\n                foreach(Attribute attr in\n                    Attribute.GetCustomAttributes(mInfo)) {\n                    // Check for the Obsolete attribute.\n                    if (attr.GetType() == typeof(ObsoleteAttribute))\n                    {\n                        Console.WriteLine(&quot;Method {0} is obsolete. &quot; +\n                            &quot;The message is:&quot;,\n                            mInfo.Name);\n                        Console.WriteLine(&quot;  \\&quot;{0}\\&quot;&quot;,\n                            ((ObsoleteAttribute)attr).Message);\n                    }\n\n                    // Check for the Unmanaged attribute.\n                    else if (attr.GetType() == typeof(UnmanagedAttribute))\n                    {\n                        Console.WriteLine(\n                            &quot;This method calls unmanaged code.&quot;);\n                        Console.WriteLine(\n                            String.Format(&quot;The Unmanaged attribute type is {0}.&quot;,\n                                          ((UnmanagedAttribute)attr).Win32Type));\n                        AClass myCls = new AClass();\n                        myCls.Win32CallMethod();\n                    }\n                }\n            }\n        }\n    }\n}\n\n/*\n\nThis code example produces the following results.\n\nFirst, the compilation yields the warning, &quot;...This method is\nobsolete. Use managed MsgBox instead.&quot;\nSecond, execution yields a message box with a title of &quot;Caution!&quot;\nand message text of &quot;This is an unmanaged call.&quot;\nThird, the following text is displayed in the console window:\n\nMethod Win32CallMethod is obsolete. The message is:\n  &quot;This method is obsolete. Use managed MsgBox instead.&quot;\nThis method calls unmanaged code.\nThe Unmanaged attribute type is User.\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"GetCustomAttributes#4\">Imports System\nImports System.Reflection\nImports System.Security\nImports System.Runtime.InteropServices\n\n&#39; Define an enumeration of Win32 unmanaged types\nPublic Enum UnmanagedType\n    User\n    GDI\n    Kernel\n    Shell\n    Networking\n    Multimedia\nEnd Enum &#39;UnmanagedType\n\n&#39; Define the Unmanaged attribute.\nPublic Class UnmanagedAttribute \n             Inherits Attribute\n\n    &#39; Storage for the UnmanagedType value.\n    Protected thisType As UnmanagedType\n    \n    &#39; Set the unmanaged type in the constructor.\n    Public Sub New(ByVal type As UnmanagedType) \n        thisType = type\n    End Sub &#39;New\n    \n    &#39; Define a property to get and set the UnmanagedType value.\n    Public Property Win32Type() As UnmanagedType \n        Get\n            Return thisType\n        End Get\n        Set\n            thisType = Win32Type\n        End Set\n    End Property\nEnd Class &#39;UnmanagedAttribute \n\n&#39; Create a class for an imported Win32 unmanaged function.\nPublic Class Win32\n    &lt;DllImport(&quot;user32.dll&quot;, CharSet:=CharSet.Unicode)&gt; _\n    Public Shared Function MessageBox(ByVal hWnd As Integer, _\n                                      ByVal Text As String, _\n                                      ByVal caption As String, _\n                                      ByVal type As Integer) As Integer\n    End Function &#39;MessageBox\nEnd Class &#39;Win32\n\nPublic Class AClass\n    &#39; Add some attributes to Win32CallMethod.\n    &lt;Obsolete(&quot;This method is obsolete. Use managed MsgBox instead.&quot;), _\n     Unmanaged(UnmanagedType.User)&gt;  _\n    Public Sub Win32CallMethod() \n        Win32.MessageBox(0, &quot;This is an unmanaged call.&quot;, &quot;Caution!&quot;, 0)    \n    End Sub &#39;Win32CallMethod\nEnd Class &#39;AClass\n\nClass DemoClass\n    Shared Sub Main(ByVal args() As String) \n        &#39; Get the AClass type to access its metadata.\n        Dim clsType As Type = GetType(AClass)\n        &#39; Get the type information for Win32CallMethod.\n        Dim mInfo As MethodInfo = clsType.GetMethod(&quot;Win32CallMethod&quot;)\n        If Not (mInfo Is Nothing) Then\n            &#39; Iterate through all the attributes of the method.\n            Dim attr As Attribute\n            For Each attr In  Attribute.GetCustomAttributes(mInfo)\n                &#39; Check for the Obsolete attribute.\n                If attr.GetType().Equals(GetType(ObsoleteAttribute)) Then\n                    Console.WriteLine(&quot;Method {0} is obsolete. The message is:&quot;, mInfo.Name)\n                    Console.WriteLine(&quot;  &quot;&quot;{0}&quot;&quot;&quot;, CType(attr, ObsoleteAttribute).Message)\n                &#39; Check for the Unmanaged attribute.\n                ElseIf attr.GetType().Equals(GetType(UnmanagedAttribute)) Then\n                    Console.WriteLine(&quot;This method calls unmanaged code.&quot;)\n                    Console.WriteLine( _\n                            String.Format(&quot;The Unmanaged attribute type is {0}.&quot;, _\n                            CType(attr, UnmanagedAttribute).Win32Type))\n                    Dim myCls As New AClass()\n                    myCls.Win32CallMethod()\n                End If\n            Next attr\n        End If\n    End Sub &#39;Main\nEnd Class &#39;DemoClass\n\n&#39;\n&#39;This code example produces the following results. \n&#39;\n&#39;First, the compilation yields the warning, &quot;...This method is \n&#39;obsolete. Use managed MsgBox instead.&quot;\n&#39;Second, execution yields a message box with a title of &quot;Caution!&quot; \n&#39;and message text of &quot;This is an unmanaged call.&quot; \n&#39;Third, the following text is displayed in the console window:\n&#39;\n&#39;Method Win32CallMethod is obsolete. The message is:\n&#39;  &quot;This method is obsolete. Use managed MsgBox instead.&quot;\n&#39;This method calls unmanaged code.\n&#39;The Unmanaged attribute type is User.\n&#39; \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Attribute_GetCustomAttributes_System_Reflection_MemberInfo_System_Type_\">\r\n    \r\n            <a id=\"System_Attribute_GetCustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributes(MemberInfo,Type)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves an array of the custom attributes applied to a member of a type. Parameters specify the member, and the type of the custom attribute to search for.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Attribute[] GetCustomAttributes (System.Reflection.MemberInfo element, Type type);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object derived from the <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> class that describes a constructor, event, field, method, or property member of a class.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type, or a base type, of the custom attribute to search for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a>[]</div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a> array that contains the custom attributes of type <code>type</code> applied to <code>element</code>, or an empty array if no such custom attributes exist.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>element</code> or <code>type</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>type</code> is not derived from <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>element</code> is not a constructor, method, property, event, type, or field.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a></div>\r\n                  </div>\r\n                  <p>A custom attribute type cannot be loaded.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The return value contains the custom attributes for ancestors of <code>element</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework version 2.0, this method returns security attributes on methods, constructors, and types if the attributes are stored in the new metadata format. Assemblies compiled with version 2.0 or later use the new format. Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format. See <a href=\"http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5\" data-linktype=\"external\">Emitting Declarative Security Attributes</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_\" data-linktype=\"relative-path\">GetCustomAttribute</a>, taking a <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> as a parameter.  </p>\n<pre><code class=\"lang-cpp\" name=\"GetCustomAttributes#4\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Security;\nusing namespace System::Runtime::InteropServices;\n\nnamespace CustAttrs4CS\n{\n   // Create a class for Win32 imported unmanaged functions.\n   public ref class Win32\n   {\n   public:\n\n      [DllImport(&quot;user32.dll&quot;, CharSet = CharSet::Unicode)]\n      static int MessageBox( int hWnd, String^ text, String^ caption, UInt32 type );\n   };\n\n   public ref class AClass\n   {\n   public:\n\n      // Add some attributes to the Win32CallMethod.\n\n      [Obsolete(&quot;This method is obsolete. Use managed MsgBox instead.&quot;)]\n      void Win32CallMethod()\n      {\n         Win32::MessageBox( 0, &quot;This is an unmanaged call.&quot;, &quot;Be Careful!&quot;, 0 );\n      }\n\n   };\n\n   ref class DemoClass\n   {\n   public:\n      static void Main()\n      {\n         // Get the Class type to access its metadata.\n         Type^ clsType = AClass::typeid;\n\n         // Get the type information for the Win32CallMethod.\n         MethodInfo^ mInfo = clsType-&gt;GetMethod( &quot;Win32CallMethod&quot; );\n         if ( mInfo != nullptr )\n         {\n            // Iterate through all the attributes for the method.\n            System::Collections::IEnumerator^ myEnum3 = Attribute::GetCustomAttributes( mInfo )-&gt;GetEnumerator();\n            while ( myEnum3-&gt;MoveNext() )\n            {\n               Attribute^ attr = safe_cast&lt;Attribute^&gt;(myEnum3-&gt;Current);\n\n               // Check for the Obsolete attribute.\n               if ( attr-&gt;GetType() == ObsoleteAttribute::typeid )\n               {\n                  Console::WriteLine( &quot;Method {0} is obsolete. &quot;\n                  &quot;The message is:&quot;, mInfo-&gt;Name );\n                  Console::WriteLine( (dynamic_cast&lt;ObsoleteAttribute^&gt;(attr))-&gt;Message );\n               }\n               // Check for the SuppressUnmanagedCodeSecurity attribute.\n               else\n\n               // Check for the SuppressUnmanagedCodeSecurity attribute.\n               if ( attr-&gt;GetType() == SuppressUnmanagedCodeSecurityAttribute::typeid )\n               {\n                  Console::WriteLine( &quot;This method calls unmanaged code &quot;\n                  &quot;with no security check.&quot; );\n                  Console::WriteLine( &quot;Please do not use unless absolutely necessary.&quot; );\n                  AClass^ myCls = gcnew AClass;\n                  myCls-&gt;Win32CallMethod();\n               }\n            }\n         }\n      }\n   };\n}\n\n\n/*\n * Output:\n * Method Win32CallMethod is obsolete. The message is:\n * This method is obsolete. Use managed MsgBox instead.\n * This method calls unmanaged code with no security check.\n * Please do not use unless absolutely necessary.\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"GetCustomAttributes#4\">using System;\nusing System.Reflection;\nusing System.Security;\nusing System.Runtime.InteropServices;\n\nnamespace CustAttrs4CS\n{\n\n    // Define an enumeration of Win32 unmanaged types\n    public enum UnmanagedType\n    {\n        User,\n        GDI,\n        Kernel,\n        Shell,\n        Networking,\n        Multimedia\n    }\n\n    // Define the Unmanaged attribute.\n    public class UnmanagedAttribute : Attribute\n    {\n        // Storage for the UnmanagedType value.\n        protected UnmanagedType thisType;\n\n        // Set the unmanaged type in the constructor.\n        public UnmanagedAttribute(UnmanagedType type)\n        {\n            thisType = type;\n        }\n\n        // Define a property to get and set the UnmanagedType value.\n        public UnmanagedType Win32Type\n        {\n            get { return thisType; }\n            set { thisType = Win32Type; }\n        }\n    }\n\n    // Create a class for an imported Win32 unmanaged function.\n    public class Win32 {\n        [DllImport(&quot;user32.dll&quot;, CharSet = CharSet.Unicode)]\n        public static extern int MessageBox(int hWnd, String text,\n            String caption, uint type);\n    }\n\n    public class AClass {\n        // Add some attributes to Win32CallMethod.\n        [Obsolete(&quot;This method is obsolete. Use managed MsgBox instead.&quot;)]\n        [Unmanaged(UnmanagedType.User)]\n        public void Win32CallMethod()\n        {\n            Win32.MessageBox(0, &quot;This is an unmanaged call.&quot;, &quot;Caution!&quot;, 0);\n        }\n    }\n\n    class DemoClass {\n        static void Main(string[] args)\n            {\n            // Get the AClass type to access its metadata.\n            Type clsType = typeof(AClass);\n            // Get the type information for Win32CallMethod.\n            MethodInfo mInfo = clsType.GetMethod(&quot;Win32CallMethod&quot;);\n            if (mInfo != null)\n            {\n                // Iterate through all the attributes of the method.\n                foreach(Attribute attr in\n                    Attribute.GetCustomAttributes(mInfo)) {\n                    // Check for the Obsolete attribute.\n                    if (attr.GetType() == typeof(ObsoleteAttribute))\n                    {\n                        Console.WriteLine(&quot;Method {0} is obsolete. &quot; +\n                            &quot;The message is:&quot;,\n                            mInfo.Name);\n                        Console.WriteLine(&quot;  \\&quot;{0}\\&quot;&quot;,\n                            ((ObsoleteAttribute)attr).Message);\n                    }\n\n                    // Check for the Unmanaged attribute.\n                    else if (attr.GetType() == typeof(UnmanagedAttribute))\n                    {\n                        Console.WriteLine(\n                            &quot;This method calls unmanaged code.&quot;);\n                        Console.WriteLine(\n                            String.Format(&quot;The Unmanaged attribute type is {0}.&quot;,\n                                          ((UnmanagedAttribute)attr).Win32Type));\n                        AClass myCls = new AClass();\n                        myCls.Win32CallMethod();\n                    }\n                }\n            }\n        }\n    }\n}\n\n/*\n\nThis code example produces the following results.\n\nFirst, the compilation yields the warning, &quot;...This method is\nobsolete. Use managed MsgBox instead.&quot;\nSecond, execution yields a message box with a title of &quot;Caution!&quot;\nand message text of &quot;This is an unmanaged call.&quot;\nThird, the following text is displayed in the console window:\n\nMethod Win32CallMethod is obsolete. The message is:\n  &quot;This method is obsolete. Use managed MsgBox instead.&quot;\nThis method calls unmanaged code.\nThe Unmanaged attribute type is User.\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"GetCustomAttributes#4\">Imports System\nImports System.Reflection\nImports System.Security\nImports System.Runtime.InteropServices\n\n&#39; Define an enumeration of Win32 unmanaged types\nPublic Enum UnmanagedType\n    User\n    GDI\n    Kernel\n    Shell\n    Networking\n    Multimedia\nEnd Enum &#39;UnmanagedType\n\n&#39; Define the Unmanaged attribute.\nPublic Class UnmanagedAttribute \n             Inherits Attribute\n\n    &#39; Storage for the UnmanagedType value.\n    Protected thisType As UnmanagedType\n    \n    &#39; Set the unmanaged type in the constructor.\n    Public Sub New(ByVal type As UnmanagedType) \n        thisType = type\n    End Sub &#39;New\n    \n    &#39; Define a property to get and set the UnmanagedType value.\n    Public Property Win32Type() As UnmanagedType \n        Get\n            Return thisType\n        End Get\n        Set\n            thisType = Win32Type\n        End Set\n    End Property\nEnd Class &#39;UnmanagedAttribute \n\n&#39; Create a class for an imported Win32 unmanaged function.\nPublic Class Win32\n    &lt;DllImport(&quot;user32.dll&quot;, CharSet:=CharSet.Unicode)&gt; _\n    Public Shared Function MessageBox(ByVal hWnd As Integer, _\n                                      ByVal Text As String, _\n                                      ByVal caption As String, _\n                                      ByVal type As Integer) As Integer\n    End Function &#39;MessageBox\nEnd Class &#39;Win32\n\nPublic Class AClass\n    &#39; Add some attributes to Win32CallMethod.\n    &lt;Obsolete(&quot;This method is obsolete. Use managed MsgBox instead.&quot;), _\n     Unmanaged(UnmanagedType.User)&gt;  _\n    Public Sub Win32CallMethod() \n        Win32.MessageBox(0, &quot;This is an unmanaged call.&quot;, &quot;Caution!&quot;, 0)    \n    End Sub &#39;Win32CallMethod\nEnd Class &#39;AClass\n\nClass DemoClass\n    Shared Sub Main(ByVal args() As String) \n        &#39; Get the AClass type to access its metadata.\n        Dim clsType As Type = GetType(AClass)\n        &#39; Get the type information for Win32CallMethod.\n        Dim mInfo As MethodInfo = clsType.GetMethod(&quot;Win32CallMethod&quot;)\n        If Not (mInfo Is Nothing) Then\n            &#39; Iterate through all the attributes of the method.\n            Dim attr As Attribute\n            For Each attr In  Attribute.GetCustomAttributes(mInfo)\n                &#39; Check for the Obsolete attribute.\n                If attr.GetType().Equals(GetType(ObsoleteAttribute)) Then\n                    Console.WriteLine(&quot;Method {0} is obsolete. The message is:&quot;, mInfo.Name)\n                    Console.WriteLine(&quot;  &quot;&quot;{0}&quot;&quot;&quot;, CType(attr, ObsoleteAttribute).Message)\n                &#39; Check for the Unmanaged attribute.\n                ElseIf attr.GetType().Equals(GetType(UnmanagedAttribute)) Then\n                    Console.WriteLine(&quot;This method calls unmanaged code.&quot;)\n                    Console.WriteLine( _\n                            String.Format(&quot;The Unmanaged attribute type is {0}.&quot;, _\n                            CType(attr, UnmanagedAttribute).Win32Type))\n                    Dim myCls As New AClass()\n                    myCls.Win32CallMethod()\n                End If\n            Next attr\n        End If\n    End Sub &#39;Main\nEnd Class &#39;DemoClass\n\n&#39;\n&#39;This code example produces the following results. \n&#39;\n&#39;First, the compilation yields the warning, &quot;...This method is \n&#39;obsolete. Use managed MsgBox instead.&quot;\n&#39;Second, execution yields a message box with a title of &quot;Caution!&quot; \n&#39;and message text of &quot;This is an unmanaged call.&quot; \n&#39;Third, the following text is displayed in the console window:\n&#39;\n&#39;Method Win32CallMethod is obsolete. The message is:\n&#39;  &quot;This method is obsolete. Use managed MsgBox instead.&quot;\n&#39;This method calls unmanaged code.\n&#39;The Unmanaged attribute type is User.\n&#39; \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Attribute_GetCustomAttributes_System_Reflection_Module_System_Boolean_\">\r\n    \r\n            <a id=\"System_Attribute_GetCustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributes(Module,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves an array of the custom attributes applied to a module. Parameters specify the module, and an ignored search option.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Attribute[] GetCustomAttributes (System.Reflection.Module element, bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object derived from the <a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a> class that describes a portable executable file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored, and does not affect the operation of this method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a>[]</div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a> array that contains the custom attributes applied to <code>element</code>, or an empty array if no such custom attributes exist.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>element</code> or <code>attributeType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The return value contains the custom attributes for ancestors of <code>element</code> if <code>inherit</code> is <code>true</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a>, taking a <a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a> as a parameter.  </p>\n<pre><code class=\"lang-cpp\" name=\"GetCustomAttributes#2\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::ComponentModel;\n\n// Assign some attributes to the module.\n// Set the module&#39;s CLSCompliant attribute to false\n// The CLSCompliant attribute is applicable for /target:module.\n[module:Description(&quot;A sample description&quot;)];\n[module:CLSCompliant(false)];\nnamespace CustAttrs2CS\n{\n   ref class DemoClass\n   {\n   public:\n      static void Main()\n      {\n         Type^ clsType = DemoClass::typeid;\n\n         // Get the Module type to access its metadata.\n         Module^ module = clsType-&gt;Module;\n\n         // Iterate through all the attributes for the module.\n         System::Collections::IEnumerator^ myEnum1 = Attribute::GetCustomAttributes( module )-&gt;GetEnumerator();\n         while ( myEnum1-&gt;MoveNext() )\n         {\n            Attribute^ attr = safe_cast&lt;Attribute^&gt;(myEnum1-&gt;Current);\n\n            // Check for the Description attribute.\n            if ( attr-&gt;GetType() == DescriptionAttribute::typeid )\n                        Console::WriteLine( &quot;Module {0} has the description \\&quot;{1}\\&quot;.&quot;, module-&gt;Name, (dynamic_cast&lt;DescriptionAttribute^&gt;(attr))-&gt;Description );\n            // Check for the CLSCompliant attribute.\n            else\n\n            // Check for the CLSCompliant attribute.\n            if ( attr-&gt;GetType() == CLSCompliantAttribute::typeid )\n                        Console::WriteLine( &quot;Module {0} {1} CLSCompliant.&quot;, module-&gt;Name, (dynamic_cast&lt;CLSCompliantAttribute^&gt;(attr))-&gt;IsCompliant ? (String^)&quot;is&quot; : &quot;is not&quot; );\n         }\n      }\n   };\n}\n\n\n/*\n * Output:\n * Module CustAttrs2CS.exe is not CLSCompliant.\n * Module CustAttrs2CS.exe has the description &quot;A sample description&quot;.\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"GetCustomAttributes#2\">using System;\nusing System.Reflection;\nusing System.ComponentModel;\n\n// Assign some attributes to the module.\n[module:Description(&quot;A sample description&quot;)]\n\n// Set the module&#39;s CLSCompliant attribute to false\n// The CLSCompliant attribute is applicable for /target:module.\n[module:CLSCompliant(false)]\n\nnamespace CustAttrs2CS {\n    class DemoClass {\n        static void Main(string[] args) {\n            Type clsType = typeof(DemoClass);\n            // Get the Module type to access its metadata.\n            Module module = clsType.Module;\n\n            // Iterate through all the attributes for the module.\n            foreach(Attribute attr in Attribute.GetCustomAttributes(module)) {\n                // Check for the Description attribute.\n                if (attr.GetType() == typeof(DescriptionAttribute))\n                    Console.WriteLine(&quot;Module {0} has the description &quot; +\n                        &quot;\\&quot;{1}\\&quot;.&quot;, module.Name, \n                        ((DescriptionAttribute)attr).Description);\n                // Check for the CLSCompliant attribute.\n                else if (attr.GetType() == typeof(CLSCompliantAttribute))\n                    Console.WriteLine(&quot;Module {0} {1} CLSCompliant.&quot;,\n                        module.Name,\n                        ((CLSCompliantAttribute)attr).IsCompliant ? \n                            &quot;is&quot; : &quot;is not&quot;);\n            }\n        }\n    }\n}\n\n/*\n * Output:\n * Module CustAttrs2CS.exe is not CLSCompliant.\n * Module CustAttrs2CS.exe has the description &quot;A sample description&quot;.\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"GetCustomAttributes#2\">Imports System\nImports System.Reflection\nImports System.ComponentModel\n\n&#39; Give the Module some attributes.\n&lt;Module: Description(&quot;A sample description&quot;)&gt; \n\n&#39; Make the CLSCompliant attribute False.\n&#39; The CLSCompliant attribute is applicable for /target:module.\n&lt;Module: CLSCompliant(False)&gt; \n\nModule DemoModule\n\n    Sub Main()\n        &#39; Get the Module type to access its metadata.\n        Dim modType As Reflection.Module = GetType(DemoModule).Module\n        Dim attr As Attribute\n        &#39; Iterate through all the attributes for the module.\n        For Each attr In Attribute.GetCustomAttributes(modType)\n            &#39; Check for the Description attribute.\n            If TypeOf attr Is DescriptionAttribute Then\n                &#39; Convert the attribute to access its data.\n                Dim descAttr As DescriptionAttribute = _\n                    CType(attr, DescriptionAttribute)\n                Console.WriteLine(&quot;Module {0} has the description &quot;&quot;{1}&quot;&quot;.&quot;, _\n                    modType.Name, descAttr.Description)\n\n            &#39; Check for the CLSCompliant attribute.\n            ElseIf TypeOf attr Is CLSCompliantAttribute Then\n                &#39; Convert the attribute to access its data.\n                Dim CLSCompAttr As CLSCompliantAttribute = _\n                    CType(attr, CLSCompliantAttribute)\n                Dim strCompliant As String\n                If CLSCompAttr.IsCompliant Then\n                    strCompliant = &quot;is&quot;\n                Else\n                    strCompliant = &quot;is not&quot;\n                End If\n                Console.WriteLine(&quot;Module {0} {1} CLSCompliant.&quot;, _\n                    modType.Name, strCompliant)\n            End If\n        Next\n    End Sub\nEnd Module\n\n&#39; Output:\n&#39; Module CustAttrs2VB.exe has the description &quot;A sample description&quot;.\n&#39; Module CustAttrs2VB.exe is not CLSCompliant.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Attribute_GetCustomAttributes_System_Reflection_Module_System_Type_\">\r\n    \r\n            <a id=\"System_Attribute_GetCustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributes(Module,Type)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves an array of the custom attributes applied to a module. Parameters specify the module, and the type of the custom attribute to search for.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Attribute[] GetCustomAttributes (System.Reflection.Module element, Type attributeType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object derived from the <a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a> class that describes a portable executable file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type, or a base type, of the custom attribute to search for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a>[]</div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a> array that contains the custom attributes of type <code>attributeType</code> applied to <code>element</code>, or an empty array if no such custom attributes exist.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>element</code> or <code>attributeType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>attributeType</code> is not derived from <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a>, taking a <a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a> as a parameter.  </p>\n<pre><code class=\"lang-cpp\" name=\"GetCustomAttributes#2\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::ComponentModel;\n\n// Assign some attributes to the module.\n// Set the module&#39;s CLSCompliant attribute to false\n// The CLSCompliant attribute is applicable for /target:module.\n[module:Description(&quot;A sample description&quot;)];\n[module:CLSCompliant(false)];\nnamespace CustAttrs2CS\n{\n   ref class DemoClass\n   {\n   public:\n      static void Main()\n      {\n         Type^ clsType = DemoClass::typeid;\n\n         // Get the Module type to access its metadata.\n         Module^ module = clsType-&gt;Module;\n\n         // Iterate through all the attributes for the module.\n         System::Collections::IEnumerator^ myEnum1 = Attribute::GetCustomAttributes( module )-&gt;GetEnumerator();\n         while ( myEnum1-&gt;MoveNext() )\n         {\n            Attribute^ attr = safe_cast&lt;Attribute^&gt;(myEnum1-&gt;Current);\n\n            // Check for the Description attribute.\n            if ( attr-&gt;GetType() == DescriptionAttribute::typeid )\n                        Console::WriteLine( &quot;Module {0} has the description \\&quot;{1}\\&quot;.&quot;, module-&gt;Name, (dynamic_cast&lt;DescriptionAttribute^&gt;(attr))-&gt;Description );\n            // Check for the CLSCompliant attribute.\n            else\n\n            // Check for the CLSCompliant attribute.\n            if ( attr-&gt;GetType() == CLSCompliantAttribute::typeid )\n                        Console::WriteLine( &quot;Module {0} {1} CLSCompliant.&quot;, module-&gt;Name, (dynamic_cast&lt;CLSCompliantAttribute^&gt;(attr))-&gt;IsCompliant ? (String^)&quot;is&quot; : &quot;is not&quot; );\n         }\n      }\n   };\n}\n\n\n/*\n * Output:\n * Module CustAttrs2CS.exe is not CLSCompliant.\n * Module CustAttrs2CS.exe has the description &quot;A sample description&quot;.\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"GetCustomAttributes#2\">using System;\nusing System.Reflection;\nusing System.ComponentModel;\n\n// Assign some attributes to the module.\n[module:Description(&quot;A sample description&quot;)]\n\n// Set the module&#39;s CLSCompliant attribute to false\n// The CLSCompliant attribute is applicable for /target:module.\n[module:CLSCompliant(false)]\n\nnamespace CustAttrs2CS {\n    class DemoClass {\n        static void Main(string[] args) {\n            Type clsType = typeof(DemoClass);\n            // Get the Module type to access its metadata.\n            Module module = clsType.Module;\n\n            // Iterate through all the attributes for the module.\n            foreach(Attribute attr in Attribute.GetCustomAttributes(module)) {\n                // Check for the Description attribute.\n                if (attr.GetType() == typeof(DescriptionAttribute))\n                    Console.WriteLine(&quot;Module {0} has the description &quot; +\n                        &quot;\\&quot;{1}\\&quot;.&quot;, module.Name, \n                        ((DescriptionAttribute)attr).Description);\n                // Check for the CLSCompliant attribute.\n                else if (attr.GetType() == typeof(CLSCompliantAttribute))\n                    Console.WriteLine(&quot;Module {0} {1} CLSCompliant.&quot;,\n                        module.Name,\n                        ((CLSCompliantAttribute)attr).IsCompliant ? \n                            &quot;is&quot; : &quot;is not&quot;);\n            }\n        }\n    }\n}\n\n/*\n * Output:\n * Module CustAttrs2CS.exe is not CLSCompliant.\n * Module CustAttrs2CS.exe has the description &quot;A sample description&quot;.\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"GetCustomAttributes#2\">Imports System\nImports System.Reflection\nImports System.ComponentModel\n\n&#39; Give the Module some attributes.\n&lt;Module: Description(&quot;A sample description&quot;)&gt; \n\n&#39; Make the CLSCompliant attribute False.\n&#39; The CLSCompliant attribute is applicable for /target:module.\n&lt;Module: CLSCompliant(False)&gt; \n\nModule DemoModule\n\n    Sub Main()\n        &#39; Get the Module type to access its metadata.\n        Dim modType As Reflection.Module = GetType(DemoModule).Module\n        Dim attr As Attribute\n        &#39; Iterate through all the attributes for the module.\n        For Each attr In Attribute.GetCustomAttributes(modType)\n            &#39; Check for the Description attribute.\n            If TypeOf attr Is DescriptionAttribute Then\n                &#39; Convert the attribute to access its data.\n                Dim descAttr As DescriptionAttribute = _\n                    CType(attr, DescriptionAttribute)\n                Console.WriteLine(&quot;Module {0} has the description &quot;&quot;{1}&quot;&quot;.&quot;, _\n                    modType.Name, descAttr.Description)\n\n            &#39; Check for the CLSCompliant attribute.\n            ElseIf TypeOf attr Is CLSCompliantAttribute Then\n                &#39; Convert the attribute to access its data.\n                Dim CLSCompAttr As CLSCompliantAttribute = _\n                    CType(attr, CLSCompliantAttribute)\n                Dim strCompliant As String\n                If CLSCompAttr.IsCompliant Then\n                    strCompliant = &quot;is&quot;\n                Else\n                    strCompliant = &quot;is not&quot;\n                End If\n                Console.WriteLine(&quot;Module {0} {1} CLSCompliant.&quot;, _\n                    modType.Name, strCompliant)\n            End If\n        Next\n    End Sub\nEnd Module\n\n&#39; Output:\n&#39; Module CustAttrs2VB.exe has the description &quot;A sample description&quot;.\n&#39; Module CustAttrs2VB.exe is not CLSCompliant.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Attribute_GetCustomAttributes_System_Reflection_ParameterInfo_System_Boolean_\">\r\n    \r\n            <a id=\"System_Attribute_GetCustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributes(ParameterInfo,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves an array of the custom attributes applied to a method parameter. Parameters specify the method parameter, and whether to search ancestors of the method parameter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Attribute[] GetCustomAttributes (System.Reflection.ParameterInfo element, bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object derived from the <a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a> class that describes a parameter of a member of a class.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>If <code>true</code>, specifies to also search the ancestors of <code>element</code> for custom attributes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a>[]</div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a> array that contains the custom attributes applied to <code>element</code>, or an empty array if no such custom attributes exist.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Reflection.ParameterInfo.Member*</span> property of <code>element</code> is `null.```</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>element</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a></div>\r\n                  </div>\r\n                  <p>A custom attribute type cannot be loaded.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>element</code> represents a parameter in a method of a derived type, the return value includes the inheritable custom attributes applied to the same parameter in the overridden base methods.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a>, taking a <a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a> as a parameter.  </p>\n<pre><code class=\"lang-cpp\" name=\"GetCustomAttributes#5\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::ComponentModel;\n\nnamespace CustAttrs5CS\n{\n   public ref class AClass\n   {\n   public:\n      void ParamArrayAndDesc(\n         // Add ParamArray and Description attributes.\n         [Description(&quot;This argument is a ParamArray&quot;)]\n         array&lt;Int32&gt;^args )\n      {}\n   };\n\n   ref class DemoClass\n   {\n   public:\n      static void Main()\n      {\n         // Get the Class type to access its metadata.\n         Type^ clsType = AClass::typeid;\n\n         // Get the type information for the method.\n         MethodInfo^ mInfo = clsType-&gt;GetMethod( &quot;ParamArrayAndDesc&quot; );\n         if ( mInfo != nullptr )\n         {\n            // Get the parameter information.\n            array&lt;ParameterInfo^&gt;^pInfo = mInfo-&gt;GetParameters();\n            if ( pInfo != nullptr )\n            {\n               // Iterate through all the attributes for the parameter.\n               System::Collections::IEnumerator^ myEnum4 = Attribute::GetCustomAttributes( pInfo[ 0 ] )-&gt;GetEnumerator();\n               while ( myEnum4-&gt;MoveNext() )\n               {\n                  Attribute^ attr = safe_cast&lt;Attribute^&gt;(myEnum4-&gt;Current);\n\n                  // Check for the ParamArray attribute.\n                  if ( attr-&gt;GetType() == ParamArrayAttribute::typeid )\n                                    Console::WriteLine( &quot;Parameter {0} for method {1} &quot;\n                  &quot;has the ParamArray attribute.&quot;, pInfo[ 0 ]-&gt;Name, mInfo-&gt;Name );\n                  // Check for the Description attribute.\n                  else\n\n                  // Check for the Description attribute.\n                  if ( attr-&gt;GetType() == DescriptionAttribute::typeid )\n                  {\n                     Console::WriteLine( &quot;Parameter {0} for method {1} &quot;\n                     &quot;has a description attribute.&quot;, pInfo[ 0 ]-&gt;Name, mInfo-&gt;Name );\n                     Console::WriteLine( &quot;The description is: \\&quot;{0}\\&quot;&quot;, (dynamic_cast&lt;DescriptionAttribute^&gt;(attr))-&gt;Description );\n                  }\n               }\n            }\n         }\n      }\n   };\n}\n\n/*\n * Output:\n * Parameter args for method ParamArrayAndDesc has a description attribute.\n * The description is: &quot;This argument is a ParamArray&quot;\n * Parameter args for method ParamArrayAndDesc has the ParamArray attribute.\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"GetCustomAttributes#5\">using System;\nusing System.Reflection;\nusing System.ComponentModel;\n\nnamespace CustAttrs5CS {\n    public class AClass {\n        public void ParamArrayAndDesc(\n            // Add ParamArray (with the keyword) and Description attributes.\n            [Description(&quot;This argument is a ParamArray&quot;)]\n            params int[] args)\n        {}\n    }\n\n    class DemoClass {\n        static void Main(string[] args) {\n            // Get the Class type to access its metadata.\n            Type clsType = typeof(AClass);\n            // Get the type information for the method.\n            MethodInfo mInfo = clsType.GetMethod(&quot;ParamArrayAndDesc&quot;);\n            if (mInfo != null) {\n                // Get the parameter information.\n                ParameterInfo[] pInfo = mInfo.GetParameters();\n                if (pInfo != null) {\n                    // Iterate through all the attributes for the parameter.\n                    foreach(Attribute attr in \n                        Attribute.GetCustomAttributes(pInfo[0])) {\n                        // Check for the ParamArray attribute.\n                        if (attr.GetType() == typeof(ParamArrayAttribute))\n                            Console.WriteLine(&quot;Parameter {0} for method {1} &quot; +\n                                &quot;has the ParamArray attribute.&quot;,\n                                pInfo[0].Name, mInfo.Name);\n                        // Check for the Description attribute.\n                        else if (attr.GetType() == \n                            typeof(DescriptionAttribute)) {\n                            Console.WriteLine(&quot;Parameter {0} for method {1} &quot; +\n                                &quot;has a description attribute.&quot;,\n                                pInfo[0].Name, mInfo.Name);\n                            Console.WriteLine(&quot;The description is: \\&quot;{0}\\&quot;&quot;,\n                                ((DescriptionAttribute)attr).Description);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n/*\n * Output:\n * Parameter args for method ParamArrayAndDesc has a description attribute.\n * The description is: &quot;This argument is a ParamArray&quot;\n * Parameter args for method ParamArrayAndDesc has the ParamArray attribute.\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"GetCustomAttributes#5\">Imports System\nImports System.Reflection\nImports System.ComponentModel\n\nModule DemoModule\n    Public Class AClass\n        &#39; Add Description and ParamArray (with the keyword) attributes.\n        Public Sub ParamArrayAndDesc( _\n            &lt;Description(&quot;This argument is a ParamArray&quot;)&gt; _\n            ByVal ParamArray args() As Integer)\n        End Sub\n    End Class\n\n    Sub Main()\n        &#39; Get the Class type to access its metadata.\n        Dim clsType As Type = GetType(AClass)\n        &#39; Get the type information for the method.\n        Dim mInfo As MethodInfo = clsType.GetMethod(&quot;ParamArrayAndDesc&quot;)\n        &#39; Get the Parameter information for the method.\n        Dim pInfo() As ParameterInfo = mInfo.GetParameters()\n        Dim attr As Attribute\n        &#39; Iterate through each attribute of the parameter.\n        For Each attr In Attribute.GetCustomAttributes(pInfo(0))\n            &#39; Check for the ParamArray attribute.\n            If TypeOf attr Is ParamArrayAttribute Then\n                &#39; Convert the attribute to access its data.\n                Dim paAttr As ParamArrayAttribute = _\n                    CType(attr, ParamArrayAttribute)\n                Console.WriteLine(&quot;Parameter {0} has the &quot; + _\n                    &quot;ParamArray attribute.&quot;, pInfo(0).Name)\n            &#39; Check for the Description attribute.\n            ElseIf TypeOf attr Is DescriptionAttribute Then\n                &#39; Convert the attribute to access its data.\n                Dim descAttr As DescriptionAttribute = _\n                    CType(attr, DescriptionAttribute)\n                Console.WriteLine(&quot;Parameter {0} has a description &quot; + _\n                    &quot;attribute. The description is:&quot;, pInfo(0).Name)\n                Console.WriteLine(descAttr.Description)\n            End If\n        Next\n    End Sub\nEnd Module\n\n&#39; Output:\n&#39; Parameter args has a description attribute. The description is:\n&#39; This argument is a ParamArray\n&#39; Parameter args has the ParamArray attribute.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Attribute_GetCustomAttributes_System_Reflection_ParameterInfo_System_Type_\">\r\n    \r\n            <a id=\"System_Attribute_GetCustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributes(ParameterInfo,Type)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves an array of the custom attributes applied to a method parameter. Parameters specify the method parameter, and the type of the custom attribute to search for.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Attribute[] GetCustomAttributes (System.Reflection.ParameterInfo element, Type attributeType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object derived from the <a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a> class that describes a parameter of a member of a class.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type, or a base type, of the custom attribute to search for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a>[]</div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a> array that contains the custom attributes of type <code>attributeType</code> applied to <code>element</code>, or an empty array if no such custom attributes exist.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>element</code> or <code>attributeType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>attributeType</code> is not derived from <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a></div>\r\n                  </div>\r\n                  <p>A custom attribute type cannot be loaded.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>element</code> represents a parameter in a method of a derived type, the return value includes the inheritable custom attributes applied to the same parameter in the overridden base methods.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a>, taking a <a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a> as a parameter.  </p>\n<pre><code class=\"lang-cpp\" name=\"GetCustomAttributes#5\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::ComponentModel;\n\nnamespace CustAttrs5CS\n{\n   public ref class AClass\n   {\n   public:\n      void ParamArrayAndDesc(\n         // Add ParamArray and Description attributes.\n         [Description(&quot;This argument is a ParamArray&quot;)]\n         array&lt;Int32&gt;^args )\n      {}\n   };\n\n   ref class DemoClass\n   {\n   public:\n      static void Main()\n      {\n         // Get the Class type to access its metadata.\n         Type^ clsType = AClass::typeid;\n\n         // Get the type information for the method.\n         MethodInfo^ mInfo = clsType-&gt;GetMethod( &quot;ParamArrayAndDesc&quot; );\n         if ( mInfo != nullptr )\n         {\n            // Get the parameter information.\n            array&lt;ParameterInfo^&gt;^pInfo = mInfo-&gt;GetParameters();\n            if ( pInfo != nullptr )\n            {\n               // Iterate through all the attributes for the parameter.\n               System::Collections::IEnumerator^ myEnum4 = Attribute::GetCustomAttributes( pInfo[ 0 ] )-&gt;GetEnumerator();\n               while ( myEnum4-&gt;MoveNext() )\n               {\n                  Attribute^ attr = safe_cast&lt;Attribute^&gt;(myEnum4-&gt;Current);\n\n                  // Check for the ParamArray attribute.\n                  if ( attr-&gt;GetType() == ParamArrayAttribute::typeid )\n                                    Console::WriteLine( &quot;Parameter {0} for method {1} &quot;\n                  &quot;has the ParamArray attribute.&quot;, pInfo[ 0 ]-&gt;Name, mInfo-&gt;Name );\n                  // Check for the Description attribute.\n                  else\n\n                  // Check for the Description attribute.\n                  if ( attr-&gt;GetType() == DescriptionAttribute::typeid )\n                  {\n                     Console::WriteLine( &quot;Parameter {0} for method {1} &quot;\n                     &quot;has a description attribute.&quot;, pInfo[ 0 ]-&gt;Name, mInfo-&gt;Name );\n                     Console::WriteLine( &quot;The description is: \\&quot;{0}\\&quot;&quot;, (dynamic_cast&lt;DescriptionAttribute^&gt;(attr))-&gt;Description );\n                  }\n               }\n            }\n         }\n      }\n   };\n}\n\n/*\n * Output:\n * Parameter args for method ParamArrayAndDesc has a description attribute.\n * The description is: &quot;This argument is a ParamArray&quot;\n * Parameter args for method ParamArrayAndDesc has the ParamArray attribute.\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"GetCustomAttributes#5\">using System;\nusing System.Reflection;\nusing System.ComponentModel;\n\nnamespace CustAttrs5CS {\n    public class AClass {\n        public void ParamArrayAndDesc(\n            // Add ParamArray (with the keyword) and Description attributes.\n            [Description(&quot;This argument is a ParamArray&quot;)]\n            params int[] args)\n        {}\n    }\n\n    class DemoClass {\n        static void Main(string[] args) {\n            // Get the Class type to access its metadata.\n            Type clsType = typeof(AClass);\n            // Get the type information for the method.\n            MethodInfo mInfo = clsType.GetMethod(&quot;ParamArrayAndDesc&quot;);\n            if (mInfo != null) {\n                // Get the parameter information.\n                ParameterInfo[] pInfo = mInfo.GetParameters();\n                if (pInfo != null) {\n                    // Iterate through all the attributes for the parameter.\n                    foreach(Attribute attr in \n                        Attribute.GetCustomAttributes(pInfo[0])) {\n                        // Check for the ParamArray attribute.\n                        if (attr.GetType() == typeof(ParamArrayAttribute))\n                            Console.WriteLine(&quot;Parameter {0} for method {1} &quot; +\n                                &quot;has the ParamArray attribute.&quot;,\n                                pInfo[0].Name, mInfo.Name);\n                        // Check for the Description attribute.\n                        else if (attr.GetType() == \n                            typeof(DescriptionAttribute)) {\n                            Console.WriteLine(&quot;Parameter {0} for method {1} &quot; +\n                                &quot;has a description attribute.&quot;,\n                                pInfo[0].Name, mInfo.Name);\n                            Console.WriteLine(&quot;The description is: \\&quot;{0}\\&quot;&quot;,\n                                ((DescriptionAttribute)attr).Description);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n/*\n * Output:\n * Parameter args for method ParamArrayAndDesc has a description attribute.\n * The description is: &quot;This argument is a ParamArray&quot;\n * Parameter args for method ParamArrayAndDesc has the ParamArray attribute.\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"GetCustomAttributes#5\">Imports System\nImports System.Reflection\nImports System.ComponentModel\n\nModule DemoModule\n    Public Class AClass\n        &#39; Add Description and ParamArray (with the keyword) attributes.\n        Public Sub ParamArrayAndDesc( _\n            &lt;Description(&quot;This argument is a ParamArray&quot;)&gt; _\n            ByVal ParamArray args() As Integer)\n        End Sub\n    End Class\n\n    Sub Main()\n        &#39; Get the Class type to access its metadata.\n        Dim clsType As Type = GetType(AClass)\n        &#39; Get the type information for the method.\n        Dim mInfo As MethodInfo = clsType.GetMethod(&quot;ParamArrayAndDesc&quot;)\n        &#39; Get the Parameter information for the method.\n        Dim pInfo() As ParameterInfo = mInfo.GetParameters()\n        Dim attr As Attribute\n        &#39; Iterate through each attribute of the parameter.\n        For Each attr In Attribute.GetCustomAttributes(pInfo(0))\n            &#39; Check for the ParamArray attribute.\n            If TypeOf attr Is ParamArrayAttribute Then\n                &#39; Convert the attribute to access its data.\n                Dim paAttr As ParamArrayAttribute = _\n                    CType(attr, ParamArrayAttribute)\n                Console.WriteLine(&quot;Parameter {0} has the &quot; + _\n                    &quot;ParamArray attribute.&quot;, pInfo(0).Name)\n            &#39; Check for the Description attribute.\n            ElseIf TypeOf attr Is DescriptionAttribute Then\n                &#39; Convert the attribute to access its data.\n                Dim descAttr As DescriptionAttribute = _\n                    CType(attr, DescriptionAttribute)\n                Console.WriteLine(&quot;Parameter {0} has a description &quot; + _\n                    &quot;attribute. The description is:&quot;, pInfo(0).Name)\n                Console.WriteLine(descAttr.Description)\n            End If\n        Next\n    End Sub\nEnd Module\n\n&#39; Output:\n&#39; Parameter args has a description attribute. The description is:\n&#39; This argument is a ParamArray\n&#39; Parameter args has the ParamArray attribute.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Attribute_GetCustomAttributes_System_Reflection_Assembly_System_Type_System_Boolean_\">\r\n    \r\n            <a id=\"System_Attribute_GetCustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributes(Assembly,Type,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves an array of the custom attributes applied to an assembly. Parameters specify the assembly, the type of the custom attribute to search for, and an ignored search option.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Attribute[] GetCustomAttributes (System.Reflection.Assembly element, Type attributeType, bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object derived from the <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> class that describes a reusable collection of modules.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type, or a base type, of the custom attribute to search for.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored, and does not affect the operation of this method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a>[]</div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a> array that contains the custom attributes of type <code>attributeType</code> applied to <code>element</code>, or an empty array if no such custom attributes exist.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>element</code> or <code>attributeType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>attributeType</code> is not derived from <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework version 2.0, this method returns security attributes if the attributes are stored in the new metadata format. Assemblies compiled with version 2.0 or later use the new format. Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format. See <a href=\"http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5\" data-linktype=\"external\">Emitting Declarative Security Attributes</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a>, taking an <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> as a parameter.  </p>\n<pre><code class=\"lang-cpp\" name=\"GetCustomAttributes#1\">using namespace System;\nusing namespace System::Reflection;\n\n[assembly:AssemblyTitle(&quot;CustAttrs1CPP&quot;)];\n[assembly:AssemblyDescription(&quot;GetCustomAttributes() Demo&quot;)];\n[assembly:AssemblyCompany(&quot;Microsoft&quot;)];\n\nref class Example\n{};\n\nstatic void main()\n{\n    Type^ clsType = Example::typeid;\n\n    // Get the Assembly type to access its metadata.\n    Assembly^ assy = clsType-&gt;Assembly;\n\n    // Iterate through the attributes for the assembly.\n    System::Collections::IEnumerator^ myEnum = Attribute::GetCustomAttributes( assy )-&gt;GetEnumerator();\n    while ( myEnum-&gt;MoveNext() )\n    {\n       Attribute^ attr = safe_cast&lt;Attribute^&gt;(myEnum-&gt;Current);\n\n       // Check for the AssemblyTitle attribute.\n       if ( attr-&gt;GetType() == AssemblyTitleAttribute::typeid )\n          Console::WriteLine( &quot;Assembly title is \\&quot;{0}\\&quot;.&quot;, (dynamic_cast&lt;AssemblyTitleAttribute^&gt;(attr))-&gt;Title );\n          // Check for the AssemblyDescription attribute.\n       else\n          // Check for the AssemblyDescription attribute.\n          if ( attr-&gt;GetType() == AssemblyDescriptionAttribute::typeid )\n             Console::WriteLine( &quot;Assembly description is \\&quot;{0}\\&quot;.&quot;, (dynamic_cast&lt;AssemblyDescriptionAttribute^&gt;(attr))-&gt;Description );\n          // Check for the AssemblyCompany attribute.\n          else if ( attr-&gt;GetType() == AssemblyCompanyAttribute::typeid )\n             Console::WriteLine( &quot;Assembly company is {0}.&quot;, (dynamic_cast&lt;AssemblyCompanyAttribute^&gt;(attr))-&gt;Company );\n    }\n}\n// The example displays the following output:\n//     Assembly description is &quot;GetCustomAttributes() Demo&quot;.\n//     Assembly company is Microsoft.\n//     Assembly title is &quot;CustAttrs1CPP&quot;.\n</code></pre><pre><code class=\"lang-cs\" name=\"GetCustomAttributes#1\">using System;\nusing System.Reflection;\n\n[assembly: AssemblyTitle(&quot;CustAttrs1CS&quot;)]\n[assembly: AssemblyDescription(&quot;GetCustomAttributes() Demo&quot;)]\n[assembly: AssemblyCompany(&quot;Microsoft&quot;)]\n\nclass Example {\n    static void Main() {\n        // Get the Assembly object to access its metadata.\n        Assembly assy = typeof(Example).Assembly;\n\n        // Iterate through the attributes for the assembly.\n        foreach(Attribute attr in Attribute.GetCustomAttributes(assy)) {\n            // Check for the AssemblyTitle attribute.\n            if (attr.GetType() == typeof(AssemblyTitleAttribute))\n                Console.WriteLine(&quot;Assembly title is \\&quot;{0}\\&quot;.&quot;,\n                    ((AssemblyTitleAttribute)attr).Title);\n\n            // Check for the AssemblyDescription attribute.\n            else if (attr.GetType() == \n                typeof(AssemblyDescriptionAttribute))\n                Console.WriteLine(&quot;Assembly description is \\&quot;{0}\\&quot;.&quot;,\n                    ((AssemblyDescriptionAttribute)attr).Description);\n\n            // Check for the AssemblyCompany attribute.\n            else if (attr.GetType() == typeof(AssemblyCompanyAttribute))\n                Console.WriteLine(&quot;Assembly company is {0}.&quot;,\n                    ((AssemblyCompanyAttribute)attr).Company);\n        }\n   }\n}\n// The example displays the following output:\n//     Assembly title is &quot;CustAttrs1CS&quot;.\n//     Assembly description is &quot;GetCustomAttributes() Demo&quot;.\n//     Assembly company is Microsoft.\n</code></pre><pre><code class=\"lang-vb\" name=\"GetCustomAttributes#1\">Imports System.Reflection\n\n&lt;Assembly: AssemblyTitle(&quot;CustAttrs1VB&quot;)&gt; \n&lt;Assembly: AssemblyDescription(&quot;GetCustomAttributes() Demo&quot;)&gt; \n&lt;Assembly: AssemblyCompany(&quot;Microsoft&quot;)&gt; \n\nModule Example\n    Sub Main()\n        &#39; Get the Assembly type to access its metadata.\n        Dim assy As Reflection.Assembly = GetType(Example).Assembly\n\n        &#39; Iterate through all the attributes for the assembly.\n        For Each attr As Attribute In Attribute.GetCustomAttributes(assy)\n            &#39; Check for the AssemblyTitle attribute.\n            If TypeOf attr Is AssemblyTitleAttribute Then\n                &#39; Convert the attribute to access its data.\n                Dim attrTitle As AssemblyTitleAttribute = _\n                    CType(attr, AssemblyTitleAttribute)\n                Console.WriteLine(&quot;Assembly title is &quot;&quot;{0}&quot;&quot;.&quot;, _\n                    attrTitle.Title)\n\n            &#39; Check for the AssemblyDescription attribute.\n            ElseIf TypeOf attr Is AssemblyDescriptionAttribute Then\n                &#39; Convert the attribute to access its data.\n                Dim attrDesc As AssemblyDescriptionAttribute = _\n                    CType(attr, AssemblyDescriptionAttribute)\n                Console.WriteLine(&quot;Assembly description is &quot;&quot;{0}&quot;&quot;.&quot;, _\n                    attrDesc.Description)\n\n            &#39; Check for the AssemblyCompany attribute.\n            ElseIf TypeOf attr Is AssemblyCompanyAttribute Then\n                &#39; Convert the attribute to access its data.\n                Dim attrComp As AssemblyCompanyAttribute = _\n                    CType(attr, AssemblyCompanyAttribute)\n                Console.WriteLine(&quot;Assembly company is {0}.&quot;, _\n                    attrComp.Company)\n            End If\n        Next\n    End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;     Assembly company is Microsoft.\n&#39;     Assembly description is &quot;GetCustomAttributes() Demo&quot;.\n&#39;     Assembly title is &quot;CustAttrs1VB&quot;.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Attribute_GetCustomAttributes_System_Reflection_MemberInfo_System_Type_System_Boolean_\">\r\n    \r\n            <a id=\"System_Attribute_GetCustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributes(MemberInfo,Type,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves an array of the custom attributes applied to a member of a type. Parameters specify the member, the type of the custom attribute to search for, and whether to search ancestors of the member.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Attribute[] GetCustomAttributes (System.Reflection.MemberInfo element, Type type, bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object derived from the <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> class that describes a constructor, event, field, method, or property member of a class.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type, or a base type, of the custom attribute to search for.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>If <code>true</code>, specifies to also search the ancestors of <code>element</code> for custom attributes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a>[]</div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a> array that contains the custom attributes of type <code>type</code> applied to <code>element</code>, or an empty array if no such custom attributes exist.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>element</code> or <code>type</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>type</code> is not derived from <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>element</code> is not a constructor, method, property, event, type, or field.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a></div>\r\n                  </div>\r\n                  <p>A custom attribute type cannot be loaded.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The return value contains the custom attributes for ancestors of <code>element</code> if <code>inherit</code> is <code>true</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework version 2.0, this method returns security attributes on methods, constructors, and types if the attributes are stored in the new metadata format. Assemblies compiled with version 2.0 or later use the new format. Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format. See <a href=\"http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5\" data-linktype=\"external\">Emitting Declarative Security Attributes</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a>, taking a <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> as a parameter.  </p>\n<pre><code class=\"lang-cpp\" name=\"GetCustomAttributes#4\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Security;\nusing namespace System::Runtime::InteropServices;\n\nnamespace CustAttrs4CS\n{\n   // Create a class for Win32 imported unmanaged functions.\n   public ref class Win32\n   {\n   public:\n\n      [DllImport(&quot;user32.dll&quot;, CharSet = CharSet::Unicode)]\n      static int MessageBox( int hWnd, String^ text, String^ caption, UInt32 type );\n   };\n\n   public ref class AClass\n   {\n   public:\n\n      // Add some attributes to the Win32CallMethod.\n\n      [Obsolete(&quot;This method is obsolete. Use managed MsgBox instead.&quot;)]\n      void Win32CallMethod()\n      {\n         Win32::MessageBox( 0, &quot;This is an unmanaged call.&quot;, &quot;Be Careful!&quot;, 0 );\n      }\n\n   };\n\n   ref class DemoClass\n   {\n   public:\n      static void Main()\n      {\n         // Get the Class type to access its metadata.\n         Type^ clsType = AClass::typeid;\n\n         // Get the type information for the Win32CallMethod.\n         MethodInfo^ mInfo = clsType-&gt;GetMethod( &quot;Win32CallMethod&quot; );\n         if ( mInfo != nullptr )\n         {\n            // Iterate through all the attributes for the method.\n            System::Collections::IEnumerator^ myEnum3 = Attribute::GetCustomAttributes( mInfo )-&gt;GetEnumerator();\n            while ( myEnum3-&gt;MoveNext() )\n            {\n               Attribute^ attr = safe_cast&lt;Attribute^&gt;(myEnum3-&gt;Current);\n\n               // Check for the Obsolete attribute.\n               if ( attr-&gt;GetType() == ObsoleteAttribute::typeid )\n               {\n                  Console::WriteLine( &quot;Method {0} is obsolete. &quot;\n                  &quot;The message is:&quot;, mInfo-&gt;Name );\n                  Console::WriteLine( (dynamic_cast&lt;ObsoleteAttribute^&gt;(attr))-&gt;Message );\n               }\n               // Check for the SuppressUnmanagedCodeSecurity attribute.\n               else\n\n               // Check for the SuppressUnmanagedCodeSecurity attribute.\n               if ( attr-&gt;GetType() == SuppressUnmanagedCodeSecurityAttribute::typeid )\n               {\n                  Console::WriteLine( &quot;This method calls unmanaged code &quot;\n                  &quot;with no security check.&quot; );\n                  Console::WriteLine( &quot;Please do not use unless absolutely necessary.&quot; );\n                  AClass^ myCls = gcnew AClass;\n                  myCls-&gt;Win32CallMethod();\n               }\n            }\n         }\n      }\n   };\n}\n\n\n/*\n * Output:\n * Method Win32CallMethod is obsolete. The message is:\n * This method is obsolete. Use managed MsgBox instead.\n * This method calls unmanaged code with no security check.\n * Please do not use unless absolutely necessary.\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"GetCustomAttributes#4\">using System;\nusing System.Reflection;\nusing System.Security;\nusing System.Runtime.InteropServices;\n\nnamespace CustAttrs4CS\n{\n\n    // Define an enumeration of Win32 unmanaged types\n    public enum UnmanagedType\n    {\n        User,\n        GDI,\n        Kernel,\n        Shell,\n        Networking,\n        Multimedia\n    }\n\n    // Define the Unmanaged attribute.\n    public class UnmanagedAttribute : Attribute\n    {\n        // Storage for the UnmanagedType value.\n        protected UnmanagedType thisType;\n\n        // Set the unmanaged type in the constructor.\n        public UnmanagedAttribute(UnmanagedType type)\n        {\n            thisType = type;\n        }\n\n        // Define a property to get and set the UnmanagedType value.\n        public UnmanagedType Win32Type\n        {\n            get { return thisType; }\n            set { thisType = Win32Type; }\n        }\n    }\n\n    // Create a class for an imported Win32 unmanaged function.\n    public class Win32 {\n        [DllImport(&quot;user32.dll&quot;, CharSet = CharSet.Unicode)]\n        public static extern int MessageBox(int hWnd, String text,\n            String caption, uint type);\n    }\n\n    public class AClass {\n        // Add some attributes to Win32CallMethod.\n        [Obsolete(&quot;This method is obsolete. Use managed MsgBox instead.&quot;)]\n        [Unmanaged(UnmanagedType.User)]\n        public void Win32CallMethod()\n        {\n            Win32.MessageBox(0, &quot;This is an unmanaged call.&quot;, &quot;Caution!&quot;, 0);\n        }\n    }\n\n    class DemoClass {\n        static void Main(string[] args)\n            {\n            // Get the AClass type to access its metadata.\n            Type clsType = typeof(AClass);\n            // Get the type information for Win32CallMethod.\n            MethodInfo mInfo = clsType.GetMethod(&quot;Win32CallMethod&quot;);\n            if (mInfo != null)\n            {\n                // Iterate through all the attributes of the method.\n                foreach(Attribute attr in\n                    Attribute.GetCustomAttributes(mInfo)) {\n                    // Check for the Obsolete attribute.\n                    if (attr.GetType() == typeof(ObsoleteAttribute))\n                    {\n                        Console.WriteLine(&quot;Method {0} is obsolete. &quot; +\n                            &quot;The message is:&quot;,\n                            mInfo.Name);\n                        Console.WriteLine(&quot;  \\&quot;{0}\\&quot;&quot;,\n                            ((ObsoleteAttribute)attr).Message);\n                    }\n\n                    // Check for the Unmanaged attribute.\n                    else if (attr.GetType() == typeof(UnmanagedAttribute))\n                    {\n                        Console.WriteLine(\n                            &quot;This method calls unmanaged code.&quot;);\n                        Console.WriteLine(\n                            String.Format(&quot;The Unmanaged attribute type is {0}.&quot;,\n                                          ((UnmanagedAttribute)attr).Win32Type));\n                        AClass myCls = new AClass();\n                        myCls.Win32CallMethod();\n                    }\n                }\n            }\n        }\n    }\n}\n\n/*\n\nThis code example produces the following results.\n\nFirst, the compilation yields the warning, &quot;...This method is\nobsolete. Use managed MsgBox instead.&quot;\nSecond, execution yields a message box with a title of &quot;Caution!&quot;\nand message text of &quot;This is an unmanaged call.&quot;\nThird, the following text is displayed in the console window:\n\nMethod Win32CallMethod is obsolete. The message is:\n  &quot;This method is obsolete. Use managed MsgBox instead.&quot;\nThis method calls unmanaged code.\nThe Unmanaged attribute type is User.\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"GetCustomAttributes#4\">Imports System\nImports System.Reflection\nImports System.Security\nImports System.Runtime.InteropServices\n\n&#39; Define an enumeration of Win32 unmanaged types\nPublic Enum UnmanagedType\n    User\n    GDI\n    Kernel\n    Shell\n    Networking\n    Multimedia\nEnd Enum &#39;UnmanagedType\n\n&#39; Define the Unmanaged attribute.\nPublic Class UnmanagedAttribute \n             Inherits Attribute\n\n    &#39; Storage for the UnmanagedType value.\n    Protected thisType As UnmanagedType\n    \n    &#39; Set the unmanaged type in the constructor.\n    Public Sub New(ByVal type As UnmanagedType) \n        thisType = type\n    End Sub &#39;New\n    \n    &#39; Define a property to get and set the UnmanagedType value.\n    Public Property Win32Type() As UnmanagedType \n        Get\n            Return thisType\n        End Get\n        Set\n            thisType = Win32Type\n        End Set\n    End Property\nEnd Class &#39;UnmanagedAttribute \n\n&#39; Create a class for an imported Win32 unmanaged function.\nPublic Class Win32\n    &lt;DllImport(&quot;user32.dll&quot;, CharSet:=CharSet.Unicode)&gt; _\n    Public Shared Function MessageBox(ByVal hWnd As Integer, _\n                                      ByVal Text As String, _\n                                      ByVal caption As String, _\n                                      ByVal type As Integer) As Integer\n    End Function &#39;MessageBox\nEnd Class &#39;Win32\n\nPublic Class AClass\n    &#39; Add some attributes to Win32CallMethod.\n    &lt;Obsolete(&quot;This method is obsolete. Use managed MsgBox instead.&quot;), _\n     Unmanaged(UnmanagedType.User)&gt;  _\n    Public Sub Win32CallMethod() \n        Win32.MessageBox(0, &quot;This is an unmanaged call.&quot;, &quot;Caution!&quot;, 0)    \n    End Sub &#39;Win32CallMethod\nEnd Class &#39;AClass\n\nClass DemoClass\n    Shared Sub Main(ByVal args() As String) \n        &#39; Get the AClass type to access its metadata.\n        Dim clsType As Type = GetType(AClass)\n        &#39; Get the type information for Win32CallMethod.\n        Dim mInfo As MethodInfo = clsType.GetMethod(&quot;Win32CallMethod&quot;)\n        If Not (mInfo Is Nothing) Then\n            &#39; Iterate through all the attributes of the method.\n            Dim attr As Attribute\n            For Each attr In  Attribute.GetCustomAttributes(mInfo)\n                &#39; Check for the Obsolete attribute.\n                If attr.GetType().Equals(GetType(ObsoleteAttribute)) Then\n                    Console.WriteLine(&quot;Method {0} is obsolete. The message is:&quot;, mInfo.Name)\n                    Console.WriteLine(&quot;  &quot;&quot;{0}&quot;&quot;&quot;, CType(attr, ObsoleteAttribute).Message)\n                &#39; Check for the Unmanaged attribute.\n                ElseIf attr.GetType().Equals(GetType(UnmanagedAttribute)) Then\n                    Console.WriteLine(&quot;This method calls unmanaged code.&quot;)\n                    Console.WriteLine( _\n                            String.Format(&quot;The Unmanaged attribute type is {0}.&quot;, _\n                            CType(attr, UnmanagedAttribute).Win32Type))\n                    Dim myCls As New AClass()\n                    myCls.Win32CallMethod()\n                End If\n            Next attr\n        End If\n    End Sub &#39;Main\nEnd Class &#39;DemoClass\n\n&#39;\n&#39;This code example produces the following results. \n&#39;\n&#39;First, the compilation yields the warning, &quot;...This method is \n&#39;obsolete. Use managed MsgBox instead.&quot;\n&#39;Second, execution yields a message box with a title of &quot;Caution!&quot; \n&#39;and message text of &quot;This is an unmanaged call.&quot; \n&#39;Third, the following text is displayed in the console window:\n&#39;\n&#39;Method Win32CallMethod is obsolete. The message is:\n&#39;  &quot;This method is obsolete. Use managed MsgBox instead.&quot;\n&#39;This method calls unmanaged code.\n&#39;The Unmanaged attribute type is User.\n&#39; \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Attribute_GetCustomAttributes_System_Reflection_Module_System_Type_System_Boolean_\">\r\n    \r\n            <a id=\"System_Attribute_GetCustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributes(Module,Type,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves an array of the custom attributes applied to a module. Parameters specify the module, the type of the custom attribute to search for, and an ignored search option.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Attribute[] GetCustomAttributes (System.Reflection.Module element, Type attributeType, bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object derived from the <a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a> class that describes a portable executable file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type, or a base type, of the custom attribute to search for.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored, and does not affect the operation of this method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a>[]</div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a> array that contains the custom attributes of type <code>attributeType</code> applied to <code>element</code>, or an empty array if no such custom attributes exist.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>element</code> or <code>attributeType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>attributeType</code> is not derived from <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The return value contains the custom attributes for ancestors of <code>element</code> if <code>inherit</code> is <code>true</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a>, taking a <a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a> as a parameter.  </p>\n<pre><code class=\"lang-cpp\" name=\"GetCustomAttributes#2\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::ComponentModel;\n\n// Assign some attributes to the module.\n// Set the module&#39;s CLSCompliant attribute to false\n// The CLSCompliant attribute is applicable for /target:module.\n[module:Description(&quot;A sample description&quot;)];\n[module:CLSCompliant(false)];\nnamespace CustAttrs2CS\n{\n   ref class DemoClass\n   {\n   public:\n      static void Main()\n      {\n         Type^ clsType = DemoClass::typeid;\n\n         // Get the Module type to access its metadata.\n         Module^ module = clsType-&gt;Module;\n\n         // Iterate through all the attributes for the module.\n         System::Collections::IEnumerator^ myEnum1 = Attribute::GetCustomAttributes( module )-&gt;GetEnumerator();\n         while ( myEnum1-&gt;MoveNext() )\n         {\n            Attribute^ attr = safe_cast&lt;Attribute^&gt;(myEnum1-&gt;Current);\n\n            // Check for the Description attribute.\n            if ( attr-&gt;GetType() == DescriptionAttribute::typeid )\n                        Console::WriteLine( &quot;Module {0} has the description \\&quot;{1}\\&quot;.&quot;, module-&gt;Name, (dynamic_cast&lt;DescriptionAttribute^&gt;(attr))-&gt;Description );\n            // Check for the CLSCompliant attribute.\n            else\n\n            // Check for the CLSCompliant attribute.\n            if ( attr-&gt;GetType() == CLSCompliantAttribute::typeid )\n                        Console::WriteLine( &quot;Module {0} {1} CLSCompliant.&quot;, module-&gt;Name, (dynamic_cast&lt;CLSCompliantAttribute^&gt;(attr))-&gt;IsCompliant ? (String^)&quot;is&quot; : &quot;is not&quot; );\n         }\n      }\n   };\n}\n\n\n/*\n * Output:\n * Module CustAttrs2CS.exe is not CLSCompliant.\n * Module CustAttrs2CS.exe has the description &quot;A sample description&quot;.\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"GetCustomAttributes#2\">using System;\nusing System.Reflection;\nusing System.ComponentModel;\n\n// Assign some attributes to the module.\n[module:Description(&quot;A sample description&quot;)]\n\n// Set the module&#39;s CLSCompliant attribute to false\n// The CLSCompliant attribute is applicable for /target:module.\n[module:CLSCompliant(false)]\n\nnamespace CustAttrs2CS {\n    class DemoClass {\n        static void Main(string[] args) {\n            Type clsType = typeof(DemoClass);\n            // Get the Module type to access its metadata.\n            Module module = clsType.Module;\n\n            // Iterate through all the attributes for the module.\n            foreach(Attribute attr in Attribute.GetCustomAttributes(module)) {\n                // Check for the Description attribute.\n                if (attr.GetType() == typeof(DescriptionAttribute))\n                    Console.WriteLine(&quot;Module {0} has the description &quot; +\n                        &quot;\\&quot;{1}\\&quot;.&quot;, module.Name, \n                        ((DescriptionAttribute)attr).Description);\n                // Check for the CLSCompliant attribute.\n                else if (attr.GetType() == typeof(CLSCompliantAttribute))\n                    Console.WriteLine(&quot;Module {0} {1} CLSCompliant.&quot;,\n                        module.Name,\n                        ((CLSCompliantAttribute)attr).IsCompliant ? \n                            &quot;is&quot; : &quot;is not&quot;);\n            }\n        }\n    }\n}\n\n/*\n * Output:\n * Module CustAttrs2CS.exe is not CLSCompliant.\n * Module CustAttrs2CS.exe has the description &quot;A sample description&quot;.\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"GetCustomAttributes#2\">Imports System\nImports System.Reflection\nImports System.ComponentModel\n\n&#39; Give the Module some attributes.\n&lt;Module: Description(&quot;A sample description&quot;)&gt; \n\n&#39; Make the CLSCompliant attribute False.\n&#39; The CLSCompliant attribute is applicable for /target:module.\n&lt;Module: CLSCompliant(False)&gt; \n\nModule DemoModule\n\n    Sub Main()\n        &#39; Get the Module type to access its metadata.\n        Dim modType As Reflection.Module = GetType(DemoModule).Module\n        Dim attr As Attribute\n        &#39; Iterate through all the attributes for the module.\n        For Each attr In Attribute.GetCustomAttributes(modType)\n            &#39; Check for the Description attribute.\n            If TypeOf attr Is DescriptionAttribute Then\n                &#39; Convert the attribute to access its data.\n                Dim descAttr As DescriptionAttribute = _\n                    CType(attr, DescriptionAttribute)\n                Console.WriteLine(&quot;Module {0} has the description &quot;&quot;{1}&quot;&quot;.&quot;, _\n                    modType.Name, descAttr.Description)\n\n            &#39; Check for the CLSCompliant attribute.\n            ElseIf TypeOf attr Is CLSCompliantAttribute Then\n                &#39; Convert the attribute to access its data.\n                Dim CLSCompAttr As CLSCompliantAttribute = _\n                    CType(attr, CLSCompliantAttribute)\n                Dim strCompliant As String\n                If CLSCompAttr.IsCompliant Then\n                    strCompliant = &quot;is&quot;\n                Else\n                    strCompliant = &quot;is not&quot;\n                End If\n                Console.WriteLine(&quot;Module {0} {1} CLSCompliant.&quot;, _\n                    modType.Name, strCompliant)\n            End If\n        Next\n    End Sub\nEnd Module\n\n&#39; Output:\n&#39; Module CustAttrs2VB.exe has the description &quot;A sample description&quot;.\n&#39; Module CustAttrs2VB.exe is not CLSCompliant.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Attribute_GetCustomAttributes_System_Reflection_ParameterInfo_System_Type_System_Boolean_\">\r\n    \r\n            <a id=\"System_Attribute_GetCustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributes(ParameterInfo,Type,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves an array of the custom attributes applied to a method parameter. Parameters specify the method parameter, the type of the custom attribute to search for, and whether to search ancestors of the method parameter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Attribute[] GetCustomAttributes (System.Reflection.ParameterInfo element, Type attributeType, bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object derived from the <a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a> class that describes a parameter of a member of a class.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type, or a base type, of the custom attribute to search for.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>If <code>true</code>, specifies to also search the ancestors of <code>element</code> for custom attributes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a>[]</div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a> array that contains the custom attributes of type <code>attributeType</code> applied to <code>element</code>, or an empty array if no such custom attributes exist.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>element</code> or <code>attributeType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>attributeType</code> is not derived from <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a></div>\r\n                  </div>\r\n                  <p>A custom attribute type cannot be loaded.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>element</code> represents a parameter in a method of a derived type, the return value includes the inheritable custom attributes applied to the same parameter in the overridden base methods.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a>, taking a <a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a> as a parameter.  </p>\n<pre><code class=\"lang-cpp\" name=\"GetCustomAttributes#5\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::ComponentModel;\n\nnamespace CustAttrs5CS\n{\n   public ref class AClass\n   {\n   public:\n      void ParamArrayAndDesc(\n         // Add ParamArray and Description attributes.\n         [Description(&quot;This argument is a ParamArray&quot;)]\n         array&lt;Int32&gt;^args )\n      {}\n   };\n\n   ref class DemoClass\n   {\n   public:\n      static void Main()\n      {\n         // Get the Class type to access its metadata.\n         Type^ clsType = AClass::typeid;\n\n         // Get the type information for the method.\n         MethodInfo^ mInfo = clsType-&gt;GetMethod( &quot;ParamArrayAndDesc&quot; );\n         if ( mInfo != nullptr )\n         {\n            // Get the parameter information.\n            array&lt;ParameterInfo^&gt;^pInfo = mInfo-&gt;GetParameters();\n            if ( pInfo != nullptr )\n            {\n               // Iterate through all the attributes for the parameter.\n               System::Collections::IEnumerator^ myEnum4 = Attribute::GetCustomAttributes( pInfo[ 0 ] )-&gt;GetEnumerator();\n               while ( myEnum4-&gt;MoveNext() )\n               {\n                  Attribute^ attr = safe_cast&lt;Attribute^&gt;(myEnum4-&gt;Current);\n\n                  // Check for the ParamArray attribute.\n                  if ( attr-&gt;GetType() == ParamArrayAttribute::typeid )\n                                    Console::WriteLine( &quot;Parameter {0} for method {1} &quot;\n                  &quot;has the ParamArray attribute.&quot;, pInfo[ 0 ]-&gt;Name, mInfo-&gt;Name );\n                  // Check for the Description attribute.\n                  else\n\n                  // Check for the Description attribute.\n                  if ( attr-&gt;GetType() == DescriptionAttribute::typeid )\n                  {\n                     Console::WriteLine( &quot;Parameter {0} for method {1} &quot;\n                     &quot;has a description attribute.&quot;, pInfo[ 0 ]-&gt;Name, mInfo-&gt;Name );\n                     Console::WriteLine( &quot;The description is: \\&quot;{0}\\&quot;&quot;, (dynamic_cast&lt;DescriptionAttribute^&gt;(attr))-&gt;Description );\n                  }\n               }\n            }\n         }\n      }\n   };\n}\n\n/*\n * Output:\n * Parameter args for method ParamArrayAndDesc has a description attribute.\n * The description is: &quot;This argument is a ParamArray&quot;\n * Parameter args for method ParamArrayAndDesc has the ParamArray attribute.\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"GetCustomAttributes#5\">using System;\nusing System.Reflection;\nusing System.ComponentModel;\n\nnamespace CustAttrs5CS {\n    public class AClass {\n        public void ParamArrayAndDesc(\n            // Add ParamArray (with the keyword) and Description attributes.\n            [Description(&quot;This argument is a ParamArray&quot;)]\n            params int[] args)\n        {}\n    }\n\n    class DemoClass {\n        static void Main(string[] args) {\n            // Get the Class type to access its metadata.\n            Type clsType = typeof(AClass);\n            // Get the type information for the method.\n            MethodInfo mInfo = clsType.GetMethod(&quot;ParamArrayAndDesc&quot;);\n            if (mInfo != null) {\n                // Get the parameter information.\n                ParameterInfo[] pInfo = mInfo.GetParameters();\n                if (pInfo != null) {\n                    // Iterate through all the attributes for the parameter.\n                    foreach(Attribute attr in \n                        Attribute.GetCustomAttributes(pInfo[0])) {\n                        // Check for the ParamArray attribute.\n                        if (attr.GetType() == typeof(ParamArrayAttribute))\n                            Console.WriteLine(&quot;Parameter {0} for method {1} &quot; +\n                                &quot;has the ParamArray attribute.&quot;,\n                                pInfo[0].Name, mInfo.Name);\n                        // Check for the Description attribute.\n                        else if (attr.GetType() == \n                            typeof(DescriptionAttribute)) {\n                            Console.WriteLine(&quot;Parameter {0} for method {1} &quot; +\n                                &quot;has a description attribute.&quot;,\n                                pInfo[0].Name, mInfo.Name);\n                            Console.WriteLine(&quot;The description is: \\&quot;{0}\\&quot;&quot;,\n                                ((DescriptionAttribute)attr).Description);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n/*\n * Output:\n * Parameter args for method ParamArrayAndDesc has a description attribute.\n * The description is: &quot;This argument is a ParamArray&quot;\n * Parameter args for method ParamArrayAndDesc has the ParamArray attribute.\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"GetCustomAttributes#5\">Imports System\nImports System.Reflection\nImports System.ComponentModel\n\nModule DemoModule\n    Public Class AClass\n        &#39; Add Description and ParamArray (with the keyword) attributes.\n        Public Sub ParamArrayAndDesc( _\n            &lt;Description(&quot;This argument is a ParamArray&quot;)&gt; _\n            ByVal ParamArray args() As Integer)\n        End Sub\n    End Class\n\n    Sub Main()\n        &#39; Get the Class type to access its metadata.\n        Dim clsType As Type = GetType(AClass)\n        &#39; Get the type information for the method.\n        Dim mInfo As MethodInfo = clsType.GetMethod(&quot;ParamArrayAndDesc&quot;)\n        &#39; Get the Parameter information for the method.\n        Dim pInfo() As ParameterInfo = mInfo.GetParameters()\n        Dim attr As Attribute\n        &#39; Iterate through each attribute of the parameter.\n        For Each attr In Attribute.GetCustomAttributes(pInfo(0))\n            &#39; Check for the ParamArray attribute.\n            If TypeOf attr Is ParamArrayAttribute Then\n                &#39; Convert the attribute to access its data.\n                Dim paAttr As ParamArrayAttribute = _\n                    CType(attr, ParamArrayAttribute)\n                Console.WriteLine(&quot;Parameter {0} has the &quot; + _\n                    &quot;ParamArray attribute.&quot;, pInfo(0).Name)\n            &#39; Check for the Description attribute.\n            ElseIf TypeOf attr Is DescriptionAttribute Then\n                &#39; Convert the attribute to access its data.\n                Dim descAttr As DescriptionAttribute = _\n                    CType(attr, DescriptionAttribute)\n                Console.WriteLine(&quot;Parameter {0} has a description &quot; + _\n                    &quot;attribute. The description is:&quot;, pInfo(0).Name)\n                Console.WriteLine(descAttr.Description)\n            End If\n        Next\n    End Sub\nEnd Module\n\n&#39; Output:\n&#39; Parameter args has a description attribute. The description is:\n&#39; This argument is a ParamArray\n&#39; Parameter args has the ParamArray attribute.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Attribute_GetHashCode\">\r\n    \r\n            <a id=\"System_Attribute_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the hash code for this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer hash code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example illustrates the use of GetHashCode in the context of <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"GetHashCode#1\">using System;\nusing System.Reflection;\nusing System.Collections.Generic;\n\n// A custom attribute to allow two authors per method.\npublic class AuthorsAttribute : Attribute \n{\n   protected string _authorName1;\n   protected string _authorName2;\n\n   public AuthorsAttribute(string name1, string name2) \n   {\n      _authorName1 = name1;\n      _authorName2 = name2;\n   }\n\n\n   public string AuthorName1 \n   {\n      get { return _authorName1; }\n      set { _authorName1 = value; }\n   }\n\n   public string AuthorName2 \n   {\n      get { return _authorName2; }\n      set { _authorName2 = value; }\n   }\n\n   // Use the hash code of the string objects and xor them together.\n   public override int GetHashCode() \n   {\n      return _authorName1.GetHashCode() ^ _authorName2.GetHashCode();\n   }\n}\n\n// Provide the author names for each method of the class.\npublic class TestClass \n{\n  [Authors(&quot;Immanuel Kant&quot;, &quot;Lao Tzu&quot;)]\n  public void Method1()\n  {}\n\n  [Authors(&quot;Jean-Paul Sartre&quot;, &quot;Friedrich Nietzsche&quot;)]\n  public void Method2()\n  {}\n\n  [Authors(&quot;Immanuel Kant&quot;, &quot;Lao Tzu&quot;)]\n  public void Method3()\n  {}\n\n  [Authors(&quot;Jean-Paul Sartre&quot;, &quot;Friedrich Nietzsche&quot;)]\n  public void Method4()\n  {}\n\n  [Authors(&quot;Immanuel Kant&quot;, &quot;Friedrich Nietzsche&quot;)]\n  public void Method5()\n  {}\n}\n\nclass Example\n{\n   static void Main() \n   {\n      // Get the class type to access its metadata.\n      Type clsType = typeof(TestClass);\n\n      // Store author information in a list of tuples.\n      var authorsInfo = new List&lt;Tuple&lt;String, AuthorsAttribute&gt;&gt;(); \n\n      // Iterate through all the methods of the class.\n      foreach(var method in clsType.GetMethods()) \n      {\n          // Get the Authors attribute for the method if it exists.\n          AuthorsAttribute authAttr = \n              (AuthorsAttribute)Attribute.GetCustomAttribute(\n              method, typeof(AuthorsAttribute));\n          if (authAttr != null) \n             // Add the information to the author list.\n             authorsInfo.Add(Tuple.Create(clsType.Name + &quot;.&quot; + method.Name,\n                                             authAttr));\n      }\n\n      // Iterate through the list\n      bool[] listed = new bool[authorsInfo.Count]; \n      Console.WriteLine(&quot;Method authors:<br>&quot;);\n\n      for (int ctr = 0; ctr &lt; authorsInfo.Count; ctr++) {\n         var authorInfo = authorsInfo[ctr];\n         if (!listed[ctr]) {\n             Console.WriteLine(&quot;{0} and {1}&quot;, authorInfo.Item2.AuthorName1,\n                                              authorInfo.Item2.AuthorName2);\n             listed[ctr] = true;\n             Console.WriteLine(&quot;   {0}&quot;, authorInfo.Item1);\n             for (int ctr2 = ctr + 1; ctr2 &lt; authorsInfo.Count; ctr2++) {\n                 if (!listed[ctr2]) \n                    if (authorInfo.Item2.Equals(authorsInfo[ctr2].Item2)) {\n                       Console.WriteLine(&quot;   {0}&quot;, authorsInfo[ctr2].Item1);\n                       listed[ctr2] = true;  \n                    }\n            }  \n         }   \n      }\n   }\n}\n// The example displays the following output:\n//       Method authors:\n//       \n//       Immanuel Kant and Lao Tzu\n//          TestClass.Method1\n//          TestClass.Method3\n//       Jean-Paul Sartre and Friedrich Nietzsche\n//          TestClass.Method2\n//          TestClass.Method4\n//       Immanuel Kant and Friedrich Nietzsche\n//          TestClass.Method5\n</code></pre><pre><code class=\"lang-vb\" name=\"GetHashCode#1\">Imports System.Reflection\nImports System.Collections.Generic\n\n&#39; A custom attribute to allow two authors per method.\n&lt;AttributeUsage(AttributeTargets.Method)&gt; _\nPublic Class AuthorsAttribute : Inherits Attribute\n   Protected _authorName1 As String\n   Protected _authorName2 As String\n\n   Public Sub New(name1 As String, name2 As String)\n      _authorName1 = name1\n      _authorName2 = name2\n   End Sub\n\n   Public Property AuthorName1() As String\n      Get\n          Return _authorName1\n      End Get\n      Set\n          _authorName1 = AuthorName1\n      End Set\n   End Property\n\n   Public Property AuthorName2() As String\n      Get\n          Return _authorName2\n      End Get\n      Set\n          _authorName2 = AuthorName2\n      End Set\n   End Property\n\n   Public Overrides Function Equals(obj As Object) As Boolean\n      Dim auth As AuthorsAttribute = TryCast(obj, AuthorsAttribute)\n      If auth Is Nothing Then Return False\n      \n      If (_authorName1 = auth._authorName1 And _authorName2 = auth._authorName2) Or\n         (_authorName1 = auth._authorName2 And _authorName2 = auth._authorName1)\n         Return True\n      Else\n         Return False\n      End If \n   End Function\n\n   &#39; Use the hash code of the string objects and Xor them together.\n   Public Overrides Function GetHashCode() As Integer\n      Return _authorName1.GetHashCode() Xor _authorName2.GetHashCode()\n   End Function\nEnd Class\n\n&#39; Provide the author names for each method of the class.\nPublic Class TestClass\n   &lt;Authors(&quot;Immanuel Kant&quot;, &quot;Lao Tzu&quot;)&gt; _\n   Public Sub Method1()\n   End Sub\n\n   &lt;Authors(&quot;Jean-Paul Sartre&quot;, &quot;Friedrich Nietzsche&quot;)&gt; _\n   Public Sub Method2()\n   End Sub\n\n   &lt;Authors(&quot;Immanuel Kant&quot;, &quot;Lao Tzu&quot;)&gt; _\n   Public Sub Method3()\n   End Sub\n\n   &lt;Authors(&quot;Jean-Paul Sartre&quot;, &quot;Friedrich Nietzsche&quot;)&gt; _\n   Public Sub Method4()\n   End Sub\n\n   &lt;Authors(&quot;Immanuel Kant&quot;, &quot;Friedrich Nietzsche&quot;)&gt; _\n   Public Sub Method5()\n   End Sub\nEnd Class\n\nPublic Module Example\n    Sub Main()\n        &#39; Get the TestClass type to access its metadata.\n        Dim clsType As Type = GetType(TestClass)\n        \n        &#39; Store author information in a list of tuples.\n        Dim authorsInfo As New List(Of Tuple(Of String, AuthorsAttribute)) \n        &#39; Iterate through all the methods of the class.\n        For Each method In clsType.GetMethods()\n            &#39; Get the authors attribute information \n            Dim authAttr As AuthorsAttribute = CType(Attribute.GetCustomAttribute(method, GetType(AuthorsAttribute)),\n                                                     AuthorsAttribute)\n            If authAttr IsNot Nothing Then\n                &#39; Add the information to the author list.\n                authorsInfo.Add(Tuple.Create(clsType.Name + &quot;.&quot; + method.Name,\n                                             authAttr))\n            End If\n        Next\n\n        &#39; Iterate through the list.\n        Dim listed(authorsInfo.Count - 1) As Boolean \n        Console.WriteLine(&quot;Method authors:&quot;)\n        Console.WriteLine()\n        For ctr As Integer = 0 To authorsInfo.Count - 1\n           Dim authorInfo = authorsInfo(ctr)\n           If Not listed(ctr)\n              Console.WriteLine(&quot;{0} and {1}&quot;, authorInfo.Item2.AuthorName1,\n                                               authorInfo.Item2.AuthorName2)\n              listed(ctr) = True\n              Console.WriteLine(&quot;   {0}&quot;, authorInfo.Item1)\n              For ctr2 As Integer = ctr + 1 To authorsInfo.Count - 1\n                 If Not listed(ctr2) \n                    If authorInfo.Item2.Equals(authorsInfo(ctr2).Item2) Then\n                       Console.WriteLine(&quot;   {0}&quot;, authorsInfo(ctr2).Item1)\n                       listed(ctr2) = true  \n                    End if\n                 End If \n              Next  \n           End If   \n        Next\n    End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Method Authors:\n&#39;\n&#39;       Immanuel Kant and Lao Tzu\n&#39;          TestClass.Method1\n&#39;          TestClass.Method3\n&#39;       Jean-Paul Sartre and Friedrich Nietzsche\n&#39;          TestClass.Method2\n&#39;          TestClass.Method4\n&#39;       Immanuel Kant and Friedrich Nietzsche\n&#39;          TestClass.Method5\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Attribute_IsDefaultAttribute\">\r\n    \r\n            <a id=\"System_Attribute_IsDefaultAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsDefaultAttribute()</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, indicates whether the value of this instance is the default value for the derived class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool IsDefaultAttribute ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if this instance is the default attribute for the class; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default implementation of this class returns <code>false</code>, and must be implemented in the derived class to be useful to that class.  </p>\n<p> The implementation of this method in a derived class compares the value of this instance to a standard default value, then returns a Boolean value that indicates whether the value of this instance is equal to the standard value. The standard value is typically coded as a constant in the implementation, or stored programmatically in a field used by the implementation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example illustrates the use of IsDefaultAttribute.  </p>\n<pre><code class=\"lang-cs\" name=\"IsDefaultAttribute#1\">using System;\nusing System.Reflection;\n\nnamespace DefAttrCS \n{\n    // An enumeration of animals. Start at 1 (0 = uninitialized).\n    public enum Animal \n    {\n        // Pets.\n        Dog = 1,\n        Cat,\n        Bird,\n    }\n\n    // A custom attribute to allow a target to have a pet.\n    public class AnimalTypeAttribute : Attribute \n    {\n        // The constructor is called when the attribute is set.\n        public AnimalTypeAttribute(Animal pet) \n        {\n            thePet = pet;\n        }\n\n        // Provide a default constructor and make Dog the default.\n        public AnimalTypeAttribute() \n        {\n            thePet = Animal.Dog;\n        }\n\n        // Keep a variable internally ...\n        protected Animal thePet;\n\n        // .. and show a copy to the outside world.\n        public Animal Pet \n        {\n            get { return thePet; }\n            set { thePet = Pet; }\n        }\n\n        // Override IsDefaultAttribute to return the correct response.\n        public override bool IsDefaultAttribute() \n        {\n            if (thePet == Animal.Dog)\n                return true;\n\n            return false;\n        }\n    }\n\n    public class TestClass \n    {\n        // Use the default constructor.\n        [AnimalType]\n        public void Method1()\n        {}\n    }\n\n    class DemoClass \n    {\n        static void Main(string[] args) \n        {\n            // Get the class type to access its metadata.\n            Type clsType = typeof(TestClass);\n            // Get type information for the method.\n            MethodInfo mInfo = clsType.GetMethod(&quot;Method1&quot;);\n            // Get the AnimalType attribute for the method.\n            AnimalTypeAttribute atAttr = \n                (AnimalTypeAttribute)Attribute.GetCustomAttribute(mInfo,\n                typeof(AnimalTypeAttribute));\n            // Check to see if the default attribute is applied.\n            Console.WriteLine(&quot;The attribute {0} for method {1} in class {2}&quot;,\n                atAttr.Pet, mInfo.Name, clsType.Name); \n            Console.WriteLine(&quot;{0} the default for the AnimalType attribute.&quot;, \n                atAttr.IsDefaultAttribute() ? &quot;is&quot; : &quot;is not&quot;);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"IsDefaultAttribute#1\">Imports System\nImports System.Reflection\n\nModule DemoModule\n\n    &#39; An enumeration of animals. Start at 1 (0 = uninitialized).\n    Enum Animal\n        &#39; Pets\n        Dog = 1\n        Cat\n        Bird\n    End Enum\n\n    &#39; Visual Basic requires that the AttributeUsage be specified.\n    &#39; A custom attribute to allow a target to have a pet.\n    &lt;AttributeUsage(AttributeTargets.Method)&gt; _\n    Public Class AnimalTypeAttribute\n        Inherits Attribute\n\n        &#39; The constructor is called when the attribute is set.\n        Public Sub New(ByVal animal As Animal)\n            Me.thePet = animal\n        End Sub\n\n        &#39; Provide a default constructor and make Dog the default.\n        Public Sub New()\n            thePet = Animal.Dog\n        End Sub\n\n        &#39; Keep a variable internally ...\n        Protected thePet As Animal\n\n        &#39; .. and show a copy to the outside world.\n        Public Property Pet() As Animal\n            Get\n                Return thePet\n            End Get\n            Set(ByVal Value As Animal)\n                thePet = Value\n            End Set\n        End Property\n\n        &#39; Override IsDefaultAttribute to return the correct response.\n        Public Overrides Function IsDefaultAttribute() As Boolean\n            If thePet = Animal.Dog Then\n                Return True\n            Else\n                Return False\n            End If\n        End Function\n\n    End Class\n\n    Public Class TestClass\n        &#39; Use the default constructor.\n        &lt;AnimalType()&gt; _\n        Public Sub Method1()\n        End Sub\n\n    End Class\n\n    Sub Main()\n        &#39; Get the class type to access its metadata.\n        Dim clsType As Type = GetType(TestClass)\n        &#39; Get type information for the method.\n        Dim mInfo As MethodInfo = clsType.GetMethod(&quot;Method1&quot;)\n        &#39; Get the AnimalType attribute for the method.\n        Dim attr As Attribute = Attribute.GetCustomAttribute(mInfo, _\n            GetType(AnimalTypeAttribute))\n        If Not attr Is Nothing And TypeOf attr Is AnimalTypeAttribute Then\n            &#39; Convert the attribute to the required type.\n            Dim atAttr As AnimalTypeAttribute = _\n                CType(attr, AnimalTypeAttribute)\n            Dim strDef As String\n            &#39; Check to see if the default attribute is applied.\n            If atAttr.IsDefaultAttribute() Then\n                strDef = &quot;is&quot;\n            Else\n                strDef = &quot;is not&quot;\n            End If\n            &#39; Display the result.\n            Console.WriteLine(&quot;The attribute {0} for method {1} &quot; &amp; _\n                    &quot;in class {2}&quot;, atAttr.Pet.ToString(), mInfo.Name, _\n                    clsType.Name)\n            Console.WriteLine(&quot;{0} the default for the AnimalType &quot; &amp; _\n                    &quot;attribute.&quot;, strDef)\n        End If\n    End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cpp\" name=\"IsDefaultAttribute#1\">using namespace System;\nusing namespace System::Reflection;\n\n// An enumeration of animals. Start at 1 (0 = uninitialized).\npublic enum class Animal\n{\n   // Pets.\n   Dog = 1,\n   Cat, Bird\n};\n\n\n// A custom attribute to allow a target to have a pet.\npublic ref class AnimalTypeAttribute: public Attribute\n{\npublic:\n\n   // The constructor is called when the attribute is set.\n   AnimalTypeAttribute( Animal pet )\n   {\n      thePet = pet;\n   }\n\n   // Provide a default constructor and make Dog the default.\n   AnimalTypeAttribute()\n   {\n      thePet = Animal::Dog;\n   }\n\nprotected:\n\n   // Keep a variable internally ...\n   Animal thePet;\n\npublic:\n\n   property Animal Pet \n   {\n      // .. and show a copy to the outside world.\n      Animal get()\n      {\n         return thePet;\n      }\n      void set( Animal value )\n      {\n         thePet = value;\n      }\n\n   }\n\n   // Override IsDefaultAttribute to return the correct response.\n   virtual bool IsDefaultAttribute() override\n   {\n      return thePet == Animal::Dog;\n   }\n};\n\npublic ref class TestClass\n{\npublic:\n\n   // Use the default constructor.\n\n   [AnimalType]\n   void Method1(){}\n};\n\nint main()\n{\n   // Get the class type to access its metadata.\n   Type^ clsType = TestClass::typeid;\n\n   // Get type information for the method.\n   MethodInfo^ mInfo = clsType-&gt;GetMethod( &quot;Method1&quot; );\n\n   // Get the AnimalType attribute for the method.\n   AnimalTypeAttribute^ atAttr = dynamic_cast&lt;AnimalTypeAttribute^&gt;(Attribute::GetCustomAttribute( mInfo, AnimalTypeAttribute::typeid ));\n\n   // Check to see if the default attribute is applied.\n   Console::WriteLine( &quot;The attribute {0} for method {1} in class {2}&quot;, atAttr-&gt;Pet, mInfo-&gt;Name, clsType-&gt;Name );\n   Console::WriteLine( &quot;{0} the default for the AnimalType attribute.&quot;, atAttr-&gt;IsDefaultAttribute() ? (String^)&quot;is&quot; : &quot;is not&quot; );\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Attribute_IsDefined_System_Reflection_Assembly_System_Type_\">\r\n    \r\n            <a id=\"System_Attribute_IsDefined_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsDefined(Assembly,Type)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether any custom attributes are applied to an assembly. Parameters specify the assembly, and the type of the custom attribute to search for.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsDefined (System.Reflection.Assembly element, Type attributeType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object derived from the <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> class that describes a reusable collection of modules.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type, or a base type, of the custom attribute to search for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if a custom attribute of type <code>attributeType</code> is applied to <code>element</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>element</code> or <code>attributeType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>attributeType</code> is not derived from <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework version 2.0, this method returns <code>true</code> if the assembly has security attributes stored in the new metadata format. Assemblies compiled with version 2.0 or later use the new format. Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format. See <a href=\"http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5\" data-linktype=\"external\">Emitting Declarative Security Attributes</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example illustrates the use of <a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_\" data-linktype=\"relative-path\">IsDefined</a>, taking an <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> as a parameter.  </p>\n<pre><code class=\"lang-cs\" name=\"IsDefined#1\">using System;\nusing System.Reflection;\n\n// Add an AssemblyDescription attribute\n[assembly: AssemblyDescription(&quot;A sample description&quot;)]\nnamespace IsDef1CS\n{\n    public class DemoClass\n    {\n        static void Main(string[] args)\n        {\n            // Get the class type to access its metadata.\n            Type clsType = typeof(DemoClass);\n            // Get the assembly object.\n            Assembly assy = clsType.Assembly;\n            // Store the assembly&#39;s name.\n            String assyName = assy.GetName().Name;\n            // See if the Assembly Description is defined.\n            bool isdef = Attribute.IsDefined(assy, \n                typeof(AssemblyDescriptionAttribute));\n            if (isdef)\n            {\n                // Affirm that the attribute is defined.\n                Console.WriteLine(&quot;The AssemblyDescription attribute &quot; +\n                    &quot;is defined for assembly {0}.&quot;, assyName);\n                // Get the description attribute itself.\n                AssemblyDescriptionAttribute adAttr = \n                    (AssemblyDescriptionAttribute)Attribute.GetCustomAttribute(\n                    assy, typeof(AssemblyDescriptionAttribute));\n                // Display the description.\n                if (adAttr != null)\n                    Console.WriteLine(&quot;The description is \\&quot;{0}\\&quot;.&quot;, \n                        adAttr.Description);\n                else\n                    Console.WriteLine(&quot;The description could not &quot; +\n                        &quot;be retrieved.&quot;);            \n            }\n            else\n                Console.WriteLine(&quot;The AssemblyDescription attribute is not &quot; +\n                    &quot;defined for assembly {0}.&quot;, assyName);\n        }\n    }\n}\n\n/*\n * Output:\n * The AssemblyDescription attribute is defined for assembly IsDef1CS.\n * The description is &quot;A sample description&quot;.\n */\n</code></pre><pre><code class=\"lang-cpp\" name=\"IsDefined#1\">using namespace System;\nusing namespace System::Reflection;\n\n// Add an AssemblyDescription attribute\n[assembly:AssemblyDescription(&quot;A sample description&quot;)];\nnamespace IsDef1CS\n{\n   ref class DemoClass\n   {\n   public:\n      static void Main()\n      {\n         \n         // Get the class type to access its metadata.\n         Type^ clsType = DemoClass::typeid;\n         \n         // Get the assembly object.\n         Assembly^ assy = clsType-&gt;Assembly;\n         \n         // Store the assembly&#39;s name.\n         String^ assyName = assy-&gt;GetName()-&gt;Name;\n         \n         //Type assyType = assy.GetType();\n         // See if the Assembly Description is defined.\n         bool isdef = Attribute::IsDefined( assy, AssemblyDescriptionAttribute::typeid );\n         if ( isdef )\n         {\n            \n            // Affirm that the attribute is defined.\n            Console::WriteLine( &quot;The AssemblyDescription attribute &quot;\n            &quot;is defined for assembly {0}.&quot;, assyName );\n            \n            // Get the description attribute itself.\n            AssemblyDescriptionAttribute^ adAttr = dynamic_cast&lt;AssemblyDescriptionAttribute^&gt;(Attribute::GetCustomAttribute( assy, AssemblyDescriptionAttribute::typeid ));\n            \n            // Display the description.\n            if ( adAttr != nullptr )\n                        Console::WriteLine( &quot;The description is \\&quot;{0}\\&quot;.&quot;, adAttr-&gt;Description );\n            else\n                        Console::WriteLine( &quot;The description could not &quot;\n            &quot;be retrieved.&quot; );\n         }\n         else\n                  Console::WriteLine( &quot;The AssemblyDescription attribute is not &quot;\n         &quot;defined for assembly {0}.&quot;, assyName );\n      }\n\n   };\n\n}\n\n\n/*\n * Output:\n * The AssemblyDescription attributeis defined for assembly IsDef1CS.\n * The description is &quot;A sample description&quot;.\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"IsDefined#1\">Imports System\nImports System.Reflection\nImports Microsoft.VisualBasic\n\n&#39; Add an AssemblyDescription attribute.\n&lt;Assembly: AssemblyDescription(&quot;A sample description&quot;)&gt; \n\nModule DemoModule\n    Sub Main()\n        &#39; Get the assembly for this module.\n        Dim assy As System.Reflection.Assembly = GetType(DemoModule).Assembly\n        &#39; Store the assembly name.\n        Dim assyName As String = assy.GetName().Name\n        &#39; See if the AssemblyDescription attribute is defined.\n        If Attribute.IsDefined(assy, GetType(AssemblyDescriptionAttribute)) _\n            Then\n            &#39; Affirm that the attribute is defined. Assume the filename of\n            &#39; this code example is &quot;IsDef1VB&quot;.\n            Console.WriteLine(&quot;The AssemblyDescription attribute is &quot; &amp; _\n                &quot;defined for assembly {0}.&quot;, assyName)\n            &#39; Get the description attribute itself.\n            Dim attr As Attribute = Attribute.GetCustomAttribute( _\n                assy, GetType(AssemblyDescriptionAttribute))\n            &#39; Display the description.\n            If Not attr Is Nothing And _\n                TypeOf attr Is AssemblyDescriptionAttribute Then\n                Dim adAttr As AssemblyDescriptionAttribute = _\n                    CType(attr, AssemblyDescriptionAttribute)\n                Console.WriteLine(&quot;The description is &quot; &amp; _\n                    Chr(34) &amp; &quot;{0}&quot; &amp; Chr(34) &amp; &quot;.&quot;, adAttr.Description)\n            Else\n                Console.WriteLine(&quot;The description could not be retrieved.&quot;)\n            End If\n        Else\n            Console.WriteLine(&quot;The AssemblyDescription attribute is not &quot; &amp; _\n                              &quot;defined for assembly {0}.&quot;, assyName)\n        End If\n    End Sub\nEnd Module\n\n&#39; Output:\n&#39; The AssemblyDescription attribute is defined for assembly IsDef1VB.\n&#39; The description is &quot;A sample description&quot;.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Attribute_IsDefined_System_Reflection_MemberInfo_System_Type_\">\r\n    \r\n            <a id=\"System_Attribute_IsDefined_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsDefined(MemberInfo,Type)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether any custom attributes are applied to a member of a type. Parameters specify the member, and the type of the custom attribute to search for.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsDefined (System.Reflection.MemberInfo element, Type attributeType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object derived from the <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> class that describes a constructor, event, field, method, type, or property member of a class.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type, or a base type, of the custom attribute to search for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if a custom attribute of type <code>attributeType</code> is applied to <code>element</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>element</code> or <code>attributeType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>attributeType</code> is not derived from <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>element</code> is not a constructor, method, property, event, type, or field.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ancestors of <code>element</code> are searched for custom attributes.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework version 2.0, this method returns <code>true</code> if a type, method, or constructor has security attributes stored in the new metadata format. Assemblies compiled with version 2.0 or later use the new format. Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format. See <a href=\"http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5\" data-linktype=\"external\">Emitting Declarative Security Attributes</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example illustrates the use of <a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_\" data-linktype=\"relative-path\">IsDefined</a>, taking a <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> as a parameter.  </p>\n<pre><code class=\"lang-cs\" name=\"IsDefined#4\">using System;\nusing System.Reflection;\n\nnamespace IsDef4CS \n{\n    public class TestClass \n    {\n        // Assign the Obsolete attribute to a method.\n        [Obsolete(&quot;This method is obsolete. Use Method2 instead.&quot;)]\n        public void Method1()\n        {}\n        public void Method2()\n        {}\n    }\n\n    public class DemoClass \n    {\n        static void Main(string[] args) \n        {\n            // Get the class type to access its metadata.\n            Type clsType = typeof(TestClass);\n            // Get the MethodInfo object for Method1.\n            MethodInfo mInfo = clsType.GetMethod(&quot;Method1&quot;);\n            // See if the Obsolete attribute is defined for this method.\n            bool isDef = Attribute.IsDefined(mInfo, typeof(ObsoleteAttribute));\n            // Display the result.\n            Console.WriteLine(&quot;The Obsolete Attribute {0} defined for {1} of class {2}.&quot;,\n                isDef ? &quot;is&quot; : &quot;is not&quot;, mInfo.Name, clsType.Name);\n            // If it&#39;s defined, display the attribute&#39;s message.\n            if (isDef) \n            {\n                ObsoleteAttribute obsAttr = \n                                 (ObsoleteAttribute)Attribute.GetCustomAttribute( \n                                                    mInfo, typeof(ObsoleteAttribute));\n                if (obsAttr != null)\n                    Console.WriteLine(&quot;The message is: \\&quot;{0}\\&quot;.&quot;,\n                        obsAttr.Message);\n                else\n                    Console.WriteLine(&quot;The message could not be retrieved.&quot;);\n            }\n        }\n    }\n}\n\n/*\n * Output:\n * The Obsolete Attribute is defined for Method1 of class TestClass.\n * The message is: &quot;This method is obsolete. Use Method2 instead.&quot;.\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"IsDefined#4\">Imports System\nImports System.Reflection\n\nModule DemoModule\n\n    Public Class TestClass\n        &#39; Assign the Obsolete attribute to a method.\n        &lt;Obsolete(&quot;This method is obsolete. Use Method2() instead.&quot;)&gt; _\n        Public Sub Method1()\n        End Sub\n\n        Public Sub Method2()\n        End Sub\n    End Class\n\n    Sub Main()\n        &#39; Get the class type to access its metadata.\n        Dim clsType As Type = GetType(TestClass)\n        &#39; Get the MethodInfo object for Method1.\n        Dim mInfo As MethodInfo = clsType.GetMethod(&quot;Method1&quot;)\n        &#39; See if the Obsolete attribute is defined for this method.\n        Dim isDef As Boolean = Attribute.IsDefined(mInfo, _\n            GetType(ObsoleteAttribute))\n        Dim strDef As String\n        If isDef = True Then\n            strDef = &quot;is&quot;\n        Else\n            strDef = &quot;is not&quot;\n        End If\n        &#39; Display the results.\n        Console.WriteLine(&quot;The Obsolete attribute {0} defined for &quot; &amp; _\n            &quot;method {1} of class {2}.&quot;, strDef, mInfo.Name, clsType.Name)\n        &#39; If it&#39;s defined, display the attribute&#39;s message.\n        If isDef = True Then\n            Dim attr As Attribute = Attribute.GetCustomAttribute(mInfo, _\n                GetType(ObsoleteAttribute))\n            If Not attr Is Nothing And TypeOf attr Is ObsoleteAttribute Then\n                Dim obsAttr As ObsoleteAttribute = _\n                    CType(attr, ObsoleteAttribute)\n                Console.WriteLine(&quot;The message is: &quot;&quot;{0}&quot;&quot;&quot;, obsAttr.Message)\n            Else\n                Console.WriteLine(&quot;The message could not be retrieved.&quot;)\n            End If\n        End If\n    End Sub\nEnd Module\n\n&#39; Output:\n&#39; The Obsolete attribute is defined for method Method1 of class TestClass.\n&#39; The message is: &quot;This method is obsolete. Use Method2() instead.&quot;\n</code></pre><pre><code class=\"lang-cpp\" name=\"IsDefined#4\">using namespace System;\nusing namespace System::Reflection;\n\nnamespace IsDef4CS\n{\n   public ref class TestClass\n   {\n   public:\n\n      // Assign the Obsolete attribute to a method.\n\n      [Obsolete(&quot;This method is obsolete. Use Method2 instead.&quot;)]\n      void Method1(){}\n\n      void Method2(){}\n\n   };\n\n   ref class DemoClass\n   {\n   public:\n      static void Main()\n      {\n         \n         // Get the class type to access its metadata.\n         Type^ clsType = TestClass::typeid;\n         \n         // Get the MethodInfo object for Method1.\n         MethodInfo^ mInfo = clsType-&gt;GetMethod( &quot;Method1&quot; );\n         \n         // See if the Obsolete attribute is defined for this method.\n         bool isDef = Attribute::IsDefined( mInfo, ObsoleteAttribute::typeid );\n         \n         // Display the result.\n         Console::WriteLine( &quot;The Obsolete Attribute {0} defined for {1} of class {2}.&quot;, isDef ? (String^)&quot;is&quot; : &quot;is not&quot;, mInfo-&gt;Name, clsType-&gt;Name );\n         \n         // If it&#39;s defined, display the attribute&#39;s message.\n         if ( isDef )\n         {\n            ObsoleteAttribute^ obsAttr = dynamic_cast&lt;ObsoleteAttribute^&gt;(Attribute::GetCustomAttribute( mInfo, ObsoleteAttribute::typeid ));\n            if ( obsAttr != nullptr )\n                        Console::WriteLine( &quot;The message is: \\&quot;{0}\\&quot;.&quot;, obsAttr-&gt;Message );\n            else\n                        Console::WriteLine( &quot;The message could not be retrieved.&quot; );\n         }\n      }\n\n   };\n\n}\n\n\n/*\n * Output:\n * The Obsolete Attribute is defined for Method1 of class TestClass.\n * The message is: &quot;This method is obsolete. Use Method2 instead.&quot;.\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Attribute_IsDefined_System_Reflection_Module_System_Type_\">\r\n    \r\n            <a id=\"System_Attribute_IsDefined_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsDefined(Module,Type)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether any custom attributes of a specified type are applied to a module. Parameters specify the module, and the type of the custom attribute to search for.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsDefined (System.Reflection.Module element, Type attributeType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object derived from the <a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a> class that describes a portable executable file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type, or a base type, of the custom attribute to search for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if a custom attribute of type <code>attributeType</code> is applied to <code>element</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>element</code> or <code>attributeType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>attributeType</code> is not derived from <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ancestors of <code>element</code> are not searched for custom attributes.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example illustrates the use of <a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_\" data-linktype=\"relative-path\">IsDefined</a>, taking a <a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a> as a parameter.  </p>\n<pre><code class=\"lang-cs\" name=\"IsDefined#2\">using System;\nusing System.Diagnostics;\n\n// Add the Debuggable attribute to the module.\n[module:Debuggable(true, false)]\nnamespace IsDef2CS\n{\n    public class DemoClass\n    {\n        static void Main(string[] args)\n        {\n            // Get the class type to access its metadata.\n            Type clsType = typeof(DemoClass);\n            // See if the Debuggable attribute is defined for this module.\n            bool isDef = Attribute.IsDefined(clsType.Module, \n                typeof(DebuggableAttribute));\n            // Display the result.\n            Console.WriteLine(&quot;The Debuggable attribute {0} &quot; +\n                &quot;defined for Module {1}.&quot;,\n                isDef ? &quot;is&quot; : &quot;is not&quot;,\n                clsType.Module.Name);\n            // If the attribute is defined, display the JIT settings.\n            if (isDef)\n            {\n                // Retrieve the attribute itself.\n                DebuggableAttribute dbgAttr = (DebuggableAttribute)\n                    Attribute.GetCustomAttribute(clsType.Module, \n                    typeof(DebuggableAttribute));\n                if (dbgAttr != null)\n                {\n                    Console.WriteLine(&quot;JITTrackingEnabled is {0}.&quot;,\n                        dbgAttr.IsJITTrackingEnabled);\n                    Console.WriteLine(&quot;JITOptimizerDisabled is {0}.&quot;,\n                        dbgAttr.IsJITOptimizerDisabled);\n                }\n                else\n                    Console.WriteLine(&quot;The Debuggable attribute &quot; +\n                        &quot;could not be retrieved.&quot;);\n            }\n        }\n    }\n}\n\n/*\n * Output:\n * The Debuggable attribute is defined for Module IsDef2CS.exe.\n * JITTrackingEnabled is True.\n * JITOptimizerDisabled is False.\n */\n</code></pre><pre><code class=\"lang-cpp\" name=\"IsDefined#2\">using namespace System;\nusing namespace System::Diagnostics;\n\n// Add the Debuggable attribute to the module.\n[module:Debuggable(true,false)];\nnamespace IsDef2CS\n{\n   ref class DemoClass\n   {\n   public:\n      static void Main()\n      {\n         \n         // Get the class type to access its metadata.\n         Type^ clsType = DemoClass::typeid;\n         \n         // See if the Debuggable attribute is defined for this module.\n         bool isDef = Attribute::IsDefined( clsType-&gt;Module, DebuggableAttribute::typeid );\n         \n         // Display the result.\n         Console::WriteLine( &quot;The Debuggable attribute {0} &quot;\n         &quot;defined for Module {1}.&quot;, isDef ? (String^)&quot;is&quot; : &quot;is not&quot;, clsType-&gt;Module-&gt;Name );\n         \n         // If the attribute is defined, display the JIT settings.\n         if ( isDef )\n         {\n            \n            // Retrieve the attribute itself.\n            DebuggableAttribute^ dbgAttr = dynamic_cast&lt;DebuggableAttribute^&gt;(Attribute::GetCustomAttribute( clsType-&gt;Module, DebuggableAttribute::typeid ));\n            if ( dbgAttr != nullptr )\n            {\n               Console::WriteLine( &quot;JITTrackingEnabled is {0}.&quot;, dbgAttr-&gt;IsJITTrackingEnabled );\n               Console::WriteLine( &quot;JITOptimizerDisabled is {0}.&quot;, dbgAttr-&gt;IsJITOptimizerDisabled );\n            }\n            else\n                        Console::WriteLine( &quot;The Debuggable attribute &quot;\n            &quot;could not be retrieved.&quot; );\n         }\n      }\n\n   };\n\n}\n\n\n/*\n * Output:\n * The Debuggable attribute is defined for Module IsDef2CS.exe.\n * JITTrackingEnabled is True.\n * JITOptimizerDisabled is False.\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"IsDefined#2\">Imports System\nImports System.Reflection\nImports System.Diagnostics\n\n&#39; Add the Debuggable attribute to the module.\n&lt;Module: Debuggable(True, False)&gt; \n\nModule DemoModule\n    Sub Main()\n        &#39; Get the module type information to access its metadata.\n        Dim modType As Type = GetType(DemoModule)\n        &#39; See if the Debuggable attribute is defined.\n        Dim isDef As Boolean = Attribute.IsDefined(modType.Module, _\n                               GetType(DebuggableAttribute))\n        Dim strDef As String\n        If isDef = True Then\n            strDef = &quot;is&quot;\n        Else\n            strDef = &quot;is not&quot;\n        End If\n        &#39; Display the result\n        Console.WriteLine(&quot;The debuggable attribute {0} defined for &quot; &amp; _\n                          &quot;module {1}.&quot;, strDef, modType.Name)\n        &#39; If the attribute is defined, display the JIT settings.\n        If isDef = True Then\n            &#39; Retrieve the attribute itself.\n            Dim attr As Attribute = _\n                Attribute.GetCustomAttribute(modType.Module, _\n                GetType(DebuggableAttribute))\n            If Not attr Is Nothing And TypeOf attr Is DebuggableAttribute Then\n                Dim dbgAttr As DebuggableAttribute = _\n                    CType(attr, DebuggableAttribute)\n                Console.WriteLine(&quot;JITTrackingEnabled is {0}.&quot;, _\n                    dbgAttr.IsJITTrackingEnabled.ToString())\n                Console.WriteLine(&quot;JITOptimizerDisabled is {0}.&quot;, _\n                    dbgAttr.IsJITOptimizerDisabled.ToString())\n            Else\n                Console.WriteLine(&quot;The Debuggable attribute could &quot; &amp; _\n                                  &quot;not be retrieved.&quot;)\n            End If\n        End If\n    End Sub\nEnd Module\n\n&#39; Output:\n&#39; The debuggable attribute is defined for module DemoModule.\n&#39; JITTrackingEnabled is True.\n&#39; JITOptimizerDisabled is False.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Attribute_IsDefined_System_Reflection_ParameterInfo_System_Type_\">\r\n    \r\n            <a id=\"System_Attribute_IsDefined_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsDefined(ParameterInfo,Type)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether any custom attributes are applied to a method parameter. Parameters specify the method parameter, and the type of the custom attribute to search for.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsDefined (System.Reflection.ParameterInfo element, Type attributeType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object derived from the <a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a> class that describes a parameter of a member of a class.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type, or a base type, of the custom attribute to search for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if a custom attribute of type <code>attributeType</code> is applied to <code>element</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>element</code> or <code>attributeType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>attributeType</code> is not derived from <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ancestors of <code>element</code> are searched for custom attributes.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example illustrates the use of <a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_\" data-linktype=\"relative-path\">IsDefined</a>, taking a <a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a> as a parameter.  </p>\n<pre><code class=\"lang-cpp\" name=\"IsDefined#5\">using namespace System;\nusing namespace System::Reflection;\n\nnamespace IsDef5CS\n{\n   public ref class TestClass\n   {\n   public:\n\n      // Assign a ParamArray attribute to the parameter using the keyword.\n      void Method1(... array&lt;String^&gt;^args ){}\n\n   };\n\n   ref class DemoClass\n   {\n   public:\n      static void Main()\n      {\n         \n         // Get the class type to access its metadata.\n         Type^ clsType = TestClass::typeid;\n         \n         // Get the MethodInfo object for Method1.\n         MethodInfo^ mInfo = clsType-&gt;GetMethod( &quot;Method1&quot; );\n         \n         // Get the ParameterInfo array for the method parameters.\n         array&lt;ParameterInfo^&gt;^pInfo = mInfo-&gt;GetParameters();\n         if ( pInfo != nullptr )\n         {\n            \n            // See if the ParamArray attribute is defined.\n            bool isDef = Attribute::IsDefined( pInfo[ 0 ], ParamArrayAttribute::typeid );\n            \n            // Display the result.\n            Console::WriteLine( &quot;The ParamArray attribute {0} defined for &quot;\n            &quot;parameter {1} of method {2}.&quot;, isDef ? (String^)&quot;is&quot; : &quot;is not&quot;, pInfo[ 0 ]-&gt;Name, mInfo-&gt;Name );\n         }\n         else\n                  Console::WriteLine( &quot;The parameters information could &quot;\n         &quot;not be retrieved for method {0}.&quot;, mInfo-&gt;Name );\n      }\n\n   };\n\n}\n\n/*\n * Output:\n * The ParamArray attribute is defined for parameter args of method Method1.\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"IsDefined#5\">Imports System\nImports System.Reflection\n\nModule DemoModule\n    Public Class TestClass\n        &#39; Assign a ParamArray attribute to the parameter using the keyword.\n        Public Sub Method1(ByVal ParamArray args As String())\n        End Sub\n    End Class\n\n    Sub Main()\n        &#39; Get the class type to access its metadata.\n        Dim clsType As Type = GetType(TestClass)\n        &#39; Get the MethodInfo object for Method1.\n        Dim mInfo As MethodInfo = clsType.GetMethod(&quot;Method1&quot;)\n        &#39; Get the ParameterInfo array for the method parameters.\n        Dim pInfo() As ParameterInfo = mInfo.GetParameters()\n        If Not pInfo(0) Is Nothing Then\n            &#39; See if the ParamArray attribute is defined.\n            Dim isDef As Boolean = Attribute.IsDefined(pInfo(0), _\n                                   GetType(ParamArrayAttribute))\n            Dim strDef As String\n            If isDef = True Then\n                strDef = &quot;is&quot;\n            Else\n                strDef = &quot;is not&quot;\n            End If\n            &#39; Display the result.\n            Console.WriteLine(&quot;The ParamArray attribute {0} defined &quot; &amp; _\n                              &quot;for parameter {1} of method {2}.&quot;, _\n                              strDef, pInfo(0).Name, mInfo.Name)\n        Else\n            Console.WriteLine(&quot;Could not retrieve parameter information &quot; &amp; _\n                              &quot;for method {0}.&quot;, mInfo.Name)\n        End If\n    End Sub\nEnd Module\n\n&#39; Output:\n&#39; The ParamArray attribute is defined for parameter args of method Method1.\n</code></pre><pre><code class=\"lang-cs\" name=\"IsDefined#5\">using System;\nusing System.Reflection;\n\nnamespace IsDef5CS \n{\n    public class TestClass \n    {\n        // Assign a ParamArray attribute to the parameter using the keyword.\n        public void Method1(params String[] args)\n        {}\n    }\n\n    public class DemoClass \n    {\n        static void Main(string[] args) \n        {\n            // Get the class type to access its metadata.\n            Type clsType = typeof(TestClass);\n            // Get the MethodInfo object for Method1.\n            MethodInfo mInfo = clsType.GetMethod(&quot;Method1&quot;);\n            // Get the ParameterInfo array for the method parameters.\n            ParameterInfo[] pInfo = mInfo.GetParameters();\n            if (pInfo != null) \n            {\n                // See if the ParamArray attribute is defined.\n                bool isDef = Attribute.IsDefined(pInfo[0], \n                                                 typeof(ParamArrayAttribute));\n                // Display the result.\n                Console.WriteLine(&quot;The ParamArray attribute {0} defined for &quot; +\n                                  &quot;parameter {1} of method {2}.&quot;,\n                                  isDef ? &quot;is&quot; : &quot;is not&quot;,\n                                  pInfo[0].Name, \n                                  mInfo.Name);\n            }\n            else\n                Console.WriteLine(&quot;The parameters information could &quot; +\n                            &quot;not be retrieved for method {0}.&quot;, mInfo.Name);\n        }\n    }\n}\n\n/*\n * Output:\n * The ParamArray attribute is defined for parameter args of method Method1.\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Attribute_IsDefined_System_Reflection_Assembly_System_Type_System_Boolean_\">\r\n    \r\n            <a id=\"System_Attribute_IsDefined_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsDefined(Assembly,Type,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether any custom attributes are applied to an assembly. Parameters specify the assembly, the type of the custom attribute to search for, and an ignored search option.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsDefined (System.Reflection.Assembly element, Type attributeType, bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object derived from the <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> class that describes a reusable collection of modules.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type, or a base type, of the custom attribute to search for.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored, and does not affect the operation of this method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if a custom attribute of type <code>attributeType</code> is applied to <code>element</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>element</code> or <code>attributeType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>attributeType</code> is not derived from <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework version 2.0, this method returns <code>true</code> if the assembly has security attributes stored in the new metadata format. Assemblies compiled with version 2.0 or later use the new format. Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format. See <a href=\"http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5\" data-linktype=\"external\">Emitting Declarative Security Attributes</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example illustrates the use of <a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_\" data-linktype=\"relative-path\">IsDefined</a>, taking an <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> as a parameter.  </p>\n<pre><code class=\"lang-cs\" name=\"IsDefined#1\">using System;\nusing System.Reflection;\n\n// Add an AssemblyDescription attribute\n[assembly: AssemblyDescription(&quot;A sample description&quot;)]\nnamespace IsDef1CS\n{\n    public class DemoClass\n    {\n        static void Main(string[] args)\n        {\n            // Get the class type to access its metadata.\n            Type clsType = typeof(DemoClass);\n            // Get the assembly object.\n            Assembly assy = clsType.Assembly;\n            // Store the assembly&#39;s name.\n            String assyName = assy.GetName().Name;\n            // See if the Assembly Description is defined.\n            bool isdef = Attribute.IsDefined(assy, \n                typeof(AssemblyDescriptionAttribute));\n            if (isdef)\n            {\n                // Affirm that the attribute is defined.\n                Console.WriteLine(&quot;The AssemblyDescription attribute &quot; +\n                    &quot;is defined for assembly {0}.&quot;, assyName);\n                // Get the description attribute itself.\n                AssemblyDescriptionAttribute adAttr = \n                    (AssemblyDescriptionAttribute)Attribute.GetCustomAttribute(\n                    assy, typeof(AssemblyDescriptionAttribute));\n                // Display the description.\n                if (adAttr != null)\n                    Console.WriteLine(&quot;The description is \\&quot;{0}\\&quot;.&quot;, \n                        adAttr.Description);\n                else\n                    Console.WriteLine(&quot;The description could not &quot; +\n                        &quot;be retrieved.&quot;);            \n            }\n            else\n                Console.WriteLine(&quot;The AssemblyDescription attribute is not &quot; +\n                    &quot;defined for assembly {0}.&quot;, assyName);\n        }\n    }\n}\n\n/*\n * Output:\n * The AssemblyDescription attribute is defined for assembly IsDef1CS.\n * The description is &quot;A sample description&quot;.\n */\n</code></pre><pre><code class=\"lang-cpp\" name=\"IsDefined#1\">using namespace System;\nusing namespace System::Reflection;\n\n// Add an AssemblyDescription attribute\n[assembly:AssemblyDescription(&quot;A sample description&quot;)];\nnamespace IsDef1CS\n{\n   ref class DemoClass\n   {\n   public:\n      static void Main()\n      {\n         \n         // Get the class type to access its metadata.\n         Type^ clsType = DemoClass::typeid;\n         \n         // Get the assembly object.\n         Assembly^ assy = clsType-&gt;Assembly;\n         \n         // Store the assembly&#39;s name.\n         String^ assyName = assy-&gt;GetName()-&gt;Name;\n         \n         //Type assyType = assy.GetType();\n         // See if the Assembly Description is defined.\n         bool isdef = Attribute::IsDefined( assy, AssemblyDescriptionAttribute::typeid );\n         if ( isdef )\n         {\n            \n            // Affirm that the attribute is defined.\n            Console::WriteLine( &quot;The AssemblyDescription attribute &quot;\n            &quot;is defined for assembly {0}.&quot;, assyName );\n            \n            // Get the description attribute itself.\n            AssemblyDescriptionAttribute^ adAttr = dynamic_cast&lt;AssemblyDescriptionAttribute^&gt;(Attribute::GetCustomAttribute( assy, AssemblyDescriptionAttribute::typeid ));\n            \n            // Display the description.\n            if ( adAttr != nullptr )\n                        Console::WriteLine( &quot;The description is \\&quot;{0}\\&quot;.&quot;, adAttr-&gt;Description );\n            else\n                        Console::WriteLine( &quot;The description could not &quot;\n            &quot;be retrieved.&quot; );\n         }\n         else\n                  Console::WriteLine( &quot;The AssemblyDescription attribute is not &quot;\n         &quot;defined for assembly {0}.&quot;, assyName );\n      }\n\n   };\n\n}\n\n\n/*\n * Output:\n * The AssemblyDescription attributeis defined for assembly IsDef1CS.\n * The description is &quot;A sample description&quot;.\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"IsDefined#1\">Imports System\nImports System.Reflection\nImports Microsoft.VisualBasic\n\n&#39; Add an AssemblyDescription attribute.\n&lt;Assembly: AssemblyDescription(&quot;A sample description&quot;)&gt; \n\nModule DemoModule\n    Sub Main()\n        &#39; Get the assembly for this module.\n        Dim assy As System.Reflection.Assembly = GetType(DemoModule).Assembly\n        &#39; Store the assembly name.\n        Dim assyName As String = assy.GetName().Name\n        &#39; See if the AssemblyDescription attribute is defined.\n        If Attribute.IsDefined(assy, GetType(AssemblyDescriptionAttribute)) _\n            Then\n            &#39; Affirm that the attribute is defined. Assume the filename of\n            &#39; this code example is &quot;IsDef1VB&quot;.\n            Console.WriteLine(&quot;The AssemblyDescription attribute is &quot; &amp; _\n                &quot;defined for assembly {0}.&quot;, assyName)\n            &#39; Get the description attribute itself.\n            Dim attr As Attribute = Attribute.GetCustomAttribute( _\n                assy, GetType(AssemblyDescriptionAttribute))\n            &#39; Display the description.\n            If Not attr Is Nothing And _\n                TypeOf attr Is AssemblyDescriptionAttribute Then\n                Dim adAttr As AssemblyDescriptionAttribute = _\n                    CType(attr, AssemblyDescriptionAttribute)\n                Console.WriteLine(&quot;The description is &quot; &amp; _\n                    Chr(34) &amp; &quot;{0}&quot; &amp; Chr(34) &amp; &quot;.&quot;, adAttr.Description)\n            Else\n                Console.WriteLine(&quot;The description could not be retrieved.&quot;)\n            End If\n        Else\n            Console.WriteLine(&quot;The AssemblyDescription attribute is not &quot; &amp; _\n                              &quot;defined for assembly {0}.&quot;, assyName)\n        End If\n    End Sub\nEnd Module\n\n&#39; Output:\n&#39; The AssemblyDescription attribute is defined for assembly IsDef1VB.\n&#39; The description is &quot;A sample description&quot;.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Attribute_IsDefined_System_Reflection_MemberInfo_System_Type_System_Boolean_\">\r\n    \r\n            <a id=\"System_Attribute_IsDefined_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsDefined(MemberInfo,Type,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether any custom attributes are applied to a member of a type. Parameters specify the member, the type of the custom attribute to search for, and whether to search ancestors of the member.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsDefined (System.Reflection.MemberInfo element, Type attributeType, bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object derived from the <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> class that describes a constructor, event, field, method, type, or property member of a class.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type, or a base type, of the custom attribute to search for.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>If <code>true</code>, specifies to also search the ancestors of <code>element</code> for custom attributes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if a custom attribute of type <code>attributeType</code> is applied to <code>element</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>element</code> or <code>attributeType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>attributeType</code> is not derived from <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>element</code> is not a constructor, method, property, event, type, or field.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework version 2.0, this method returns <code>true</code> if a type, method, or constructor has security attributes stored in the new metadata format. Assemblies compiled with version 2.0 or later use the new format. Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format. See <a href=\"http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5\" data-linktype=\"external\">Emitting Declarative Security Attributes</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example illustrates the use of <a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_\" data-linktype=\"relative-path\">IsDefined</a>, taking a <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> as a parameter.  </p>\n<pre><code class=\"lang-cs\" name=\"IsDefined#4\">using System;\nusing System.Reflection;\n\nnamespace IsDef4CS \n{\n    public class TestClass \n    {\n        // Assign the Obsolete attribute to a method.\n        [Obsolete(&quot;This method is obsolete. Use Method2 instead.&quot;)]\n        public void Method1()\n        {}\n        public void Method2()\n        {}\n    }\n\n    public class DemoClass \n    {\n        static void Main(string[] args) \n        {\n            // Get the class type to access its metadata.\n            Type clsType = typeof(TestClass);\n            // Get the MethodInfo object for Method1.\n            MethodInfo mInfo = clsType.GetMethod(&quot;Method1&quot;);\n            // See if the Obsolete attribute is defined for this method.\n            bool isDef = Attribute.IsDefined(mInfo, typeof(ObsoleteAttribute));\n            // Display the result.\n            Console.WriteLine(&quot;The Obsolete Attribute {0} defined for {1} of class {2}.&quot;,\n                isDef ? &quot;is&quot; : &quot;is not&quot;, mInfo.Name, clsType.Name);\n            // If it&#39;s defined, display the attribute&#39;s message.\n            if (isDef) \n            {\n                ObsoleteAttribute obsAttr = \n                                 (ObsoleteAttribute)Attribute.GetCustomAttribute( \n                                                    mInfo, typeof(ObsoleteAttribute));\n                if (obsAttr != null)\n                    Console.WriteLine(&quot;The message is: \\&quot;{0}\\&quot;.&quot;,\n                        obsAttr.Message);\n                else\n                    Console.WriteLine(&quot;The message could not be retrieved.&quot;);\n            }\n        }\n    }\n}\n\n/*\n * Output:\n * The Obsolete Attribute is defined for Method1 of class TestClass.\n * The message is: &quot;This method is obsolete. Use Method2 instead.&quot;.\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"IsDefined#4\">Imports System\nImports System.Reflection\n\nModule DemoModule\n\n    Public Class TestClass\n        &#39; Assign the Obsolete attribute to a method.\n        &lt;Obsolete(&quot;This method is obsolete. Use Method2() instead.&quot;)&gt; _\n        Public Sub Method1()\n        End Sub\n\n        Public Sub Method2()\n        End Sub\n    End Class\n\n    Sub Main()\n        &#39; Get the class type to access its metadata.\n        Dim clsType As Type = GetType(TestClass)\n        &#39; Get the MethodInfo object for Method1.\n        Dim mInfo As MethodInfo = clsType.GetMethod(&quot;Method1&quot;)\n        &#39; See if the Obsolete attribute is defined for this method.\n        Dim isDef As Boolean = Attribute.IsDefined(mInfo, _\n            GetType(ObsoleteAttribute))\n        Dim strDef As String\n        If isDef = True Then\n            strDef = &quot;is&quot;\n        Else\n            strDef = &quot;is not&quot;\n        End If\n        &#39; Display the results.\n        Console.WriteLine(&quot;The Obsolete attribute {0} defined for &quot; &amp; _\n            &quot;method {1} of class {2}.&quot;, strDef, mInfo.Name, clsType.Name)\n        &#39; If it&#39;s defined, display the attribute&#39;s message.\n        If isDef = True Then\n            Dim attr As Attribute = Attribute.GetCustomAttribute(mInfo, _\n                GetType(ObsoleteAttribute))\n            If Not attr Is Nothing And TypeOf attr Is ObsoleteAttribute Then\n                Dim obsAttr As ObsoleteAttribute = _\n                    CType(attr, ObsoleteAttribute)\n                Console.WriteLine(&quot;The message is: &quot;&quot;{0}&quot;&quot;&quot;, obsAttr.Message)\n            Else\n                Console.WriteLine(&quot;The message could not be retrieved.&quot;)\n            End If\n        End If\n    End Sub\nEnd Module\n\n&#39; Output:\n&#39; The Obsolete attribute is defined for method Method1 of class TestClass.\n&#39; The message is: &quot;This method is obsolete. Use Method2() instead.&quot;\n</code></pre><pre><code class=\"lang-cpp\" name=\"IsDefined#4\">using namespace System;\nusing namespace System::Reflection;\n\nnamespace IsDef4CS\n{\n   public ref class TestClass\n   {\n   public:\n\n      // Assign the Obsolete attribute to a method.\n\n      [Obsolete(&quot;This method is obsolete. Use Method2 instead.&quot;)]\n      void Method1(){}\n\n      void Method2(){}\n\n   };\n\n   ref class DemoClass\n   {\n   public:\n      static void Main()\n      {\n         \n         // Get the class type to access its metadata.\n         Type^ clsType = TestClass::typeid;\n         \n         // Get the MethodInfo object for Method1.\n         MethodInfo^ mInfo = clsType-&gt;GetMethod( &quot;Method1&quot; );\n         \n         // See if the Obsolete attribute is defined for this method.\n         bool isDef = Attribute::IsDefined( mInfo, ObsoleteAttribute::typeid );\n         \n         // Display the result.\n         Console::WriteLine( &quot;The Obsolete Attribute {0} defined for {1} of class {2}.&quot;, isDef ? (String^)&quot;is&quot; : &quot;is not&quot;, mInfo-&gt;Name, clsType-&gt;Name );\n         \n         // If it&#39;s defined, display the attribute&#39;s message.\n         if ( isDef )\n         {\n            ObsoleteAttribute^ obsAttr = dynamic_cast&lt;ObsoleteAttribute^&gt;(Attribute::GetCustomAttribute( mInfo, ObsoleteAttribute::typeid ));\n            if ( obsAttr != nullptr )\n                        Console::WriteLine( &quot;The message is: \\&quot;{0}\\&quot;.&quot;, obsAttr-&gt;Message );\n            else\n                        Console::WriteLine( &quot;The message could not be retrieved.&quot; );\n         }\n      }\n\n   };\n\n}\n\n\n/*\n * Output:\n * The Obsolete Attribute is defined for Method1 of class TestClass.\n * The message is: &quot;This method is obsolete. Use Method2 instead.&quot;.\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Attribute_IsDefined_System_Reflection_Module_System_Type_System_Boolean_\">\r\n    \r\n            <a id=\"System_Attribute_IsDefined_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsDefined(Module,Type,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether any custom attributes are applied to a module. Parameters specify the module, the type of the custom attribute to search for, and an ignored search option.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsDefined (System.Reflection.Module element, Type attributeType, bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object derived from the <a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a> class that describes a portable executable file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type, or a base type, of the custom attribute to search for.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored, and does not affect the operation of this method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if a custom attribute of type <code>attributeType</code> is applied to <code>element</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>element</code> or <code>attributeType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>attributeType</code> is not derived from <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method ignores the <code>inherit</code> parameter and does not search the ancestors of <code>element</code> for custom attributes.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example illustrates the use of <a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_\" data-linktype=\"relative-path\">IsDefined</a>, taking a <a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a> as a parameter.  </p>\n<pre><code class=\"lang-cs\" name=\"IsDefined#2\">using System;\nusing System.Diagnostics;\n\n// Add the Debuggable attribute to the module.\n[module:Debuggable(true, false)]\nnamespace IsDef2CS\n{\n    public class DemoClass\n    {\n        static void Main(string[] args)\n        {\n            // Get the class type to access its metadata.\n            Type clsType = typeof(DemoClass);\n            // See if the Debuggable attribute is defined for this module.\n            bool isDef = Attribute.IsDefined(clsType.Module, \n                typeof(DebuggableAttribute));\n            // Display the result.\n            Console.WriteLine(&quot;The Debuggable attribute {0} &quot; +\n                &quot;defined for Module {1}.&quot;,\n                isDef ? &quot;is&quot; : &quot;is not&quot;,\n                clsType.Module.Name);\n            // If the attribute is defined, display the JIT settings.\n            if (isDef)\n            {\n                // Retrieve the attribute itself.\n                DebuggableAttribute dbgAttr = (DebuggableAttribute)\n                    Attribute.GetCustomAttribute(clsType.Module, \n                    typeof(DebuggableAttribute));\n                if (dbgAttr != null)\n                {\n                    Console.WriteLine(&quot;JITTrackingEnabled is {0}.&quot;,\n                        dbgAttr.IsJITTrackingEnabled);\n                    Console.WriteLine(&quot;JITOptimizerDisabled is {0}.&quot;,\n                        dbgAttr.IsJITOptimizerDisabled);\n                }\n                else\n                    Console.WriteLine(&quot;The Debuggable attribute &quot; +\n                        &quot;could not be retrieved.&quot;);\n            }\n        }\n    }\n}\n\n/*\n * Output:\n * The Debuggable attribute is defined for Module IsDef2CS.exe.\n * JITTrackingEnabled is True.\n * JITOptimizerDisabled is False.\n */\n</code></pre><pre><code class=\"lang-cpp\" name=\"IsDefined#2\">using namespace System;\nusing namespace System::Diagnostics;\n\n// Add the Debuggable attribute to the module.\n[module:Debuggable(true,false)];\nnamespace IsDef2CS\n{\n   ref class DemoClass\n   {\n   public:\n      static void Main()\n      {\n         \n         // Get the class type to access its metadata.\n         Type^ clsType = DemoClass::typeid;\n         \n         // See if the Debuggable attribute is defined for this module.\n         bool isDef = Attribute::IsDefined( clsType-&gt;Module, DebuggableAttribute::typeid );\n         \n         // Display the result.\n         Console::WriteLine( &quot;The Debuggable attribute {0} &quot;\n         &quot;defined for Module {1}.&quot;, isDef ? (String^)&quot;is&quot; : &quot;is not&quot;, clsType-&gt;Module-&gt;Name );\n         \n         // If the attribute is defined, display the JIT settings.\n         if ( isDef )\n         {\n            \n            // Retrieve the attribute itself.\n            DebuggableAttribute^ dbgAttr = dynamic_cast&lt;DebuggableAttribute^&gt;(Attribute::GetCustomAttribute( clsType-&gt;Module, DebuggableAttribute::typeid ));\n            if ( dbgAttr != nullptr )\n            {\n               Console::WriteLine( &quot;JITTrackingEnabled is {0}.&quot;, dbgAttr-&gt;IsJITTrackingEnabled );\n               Console::WriteLine( &quot;JITOptimizerDisabled is {0}.&quot;, dbgAttr-&gt;IsJITOptimizerDisabled );\n            }\n            else\n                        Console::WriteLine( &quot;The Debuggable attribute &quot;\n            &quot;could not be retrieved.&quot; );\n         }\n      }\n\n   };\n\n}\n\n\n/*\n * Output:\n * The Debuggable attribute is defined for Module IsDef2CS.exe.\n * JITTrackingEnabled is True.\n * JITOptimizerDisabled is False.\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"IsDefined#2\">Imports System\nImports System.Reflection\nImports System.Diagnostics\n\n&#39; Add the Debuggable attribute to the module.\n&lt;Module: Debuggable(True, False)&gt; \n\nModule DemoModule\n    Sub Main()\n        &#39; Get the module type information to access its metadata.\n        Dim modType As Type = GetType(DemoModule)\n        &#39; See if the Debuggable attribute is defined.\n        Dim isDef As Boolean = Attribute.IsDefined(modType.Module, _\n                               GetType(DebuggableAttribute))\n        Dim strDef As String\n        If isDef = True Then\n            strDef = &quot;is&quot;\n        Else\n            strDef = &quot;is not&quot;\n        End If\n        &#39; Display the result\n        Console.WriteLine(&quot;The debuggable attribute {0} defined for &quot; &amp; _\n                          &quot;module {1}.&quot;, strDef, modType.Name)\n        &#39; If the attribute is defined, display the JIT settings.\n        If isDef = True Then\n            &#39; Retrieve the attribute itself.\n            Dim attr As Attribute = _\n                Attribute.GetCustomAttribute(modType.Module, _\n                GetType(DebuggableAttribute))\n            If Not attr Is Nothing And TypeOf attr Is DebuggableAttribute Then\n                Dim dbgAttr As DebuggableAttribute = _\n                    CType(attr, DebuggableAttribute)\n                Console.WriteLine(&quot;JITTrackingEnabled is {0}.&quot;, _\n                    dbgAttr.IsJITTrackingEnabled.ToString())\n                Console.WriteLine(&quot;JITOptimizerDisabled is {0}.&quot;, _\n                    dbgAttr.IsJITOptimizerDisabled.ToString())\n            Else\n                Console.WriteLine(&quot;The Debuggable attribute could &quot; &amp; _\n                                  &quot;not be retrieved.&quot;)\n            End If\n        End If\n    End Sub\nEnd Module\n\n&#39; Output:\n&#39; The debuggable attribute is defined for module DemoModule.\n&#39; JITTrackingEnabled is True.\n&#39; JITOptimizerDisabled is False.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Attribute_IsDefined_System_Reflection_ParameterInfo_System_Type_System_Boolean_\">\r\n    \r\n            <a id=\"System_Attribute_IsDefined_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsDefined(ParameterInfo,Type,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether any custom attributes are applied to a method parameter. Parameters specify the method parameter, the type of the custom attribute to search for, and whether to search ancestors of the method parameter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsDefined (System.Reflection.ParameterInfo element, Type attributeType, bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object derived from the <a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a> class that describes a parameter of a member of a class.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type, or a base type, of the custom attribute to search for.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>If <code>true</code>, specifies to also search the ancestors of <code>element</code> for custom attributes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if a custom attribute of type <code>attributeType</code> is applied to <code>element</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>element</code> or <code>attributeType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>attributeType</code> is not derived from <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.executionengineexception\" data-linktype=\"relative-path\">ExecutionEngineException</a></div>\r\n                  </div>\r\n                  <p><code>element</code> is not a method, constructor, or type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example illustrates the use of <a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_\" data-linktype=\"relative-path\">IsDefined</a>, taking a <a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a> as a parameter.  </p>\n<pre><code class=\"lang-cpp\" name=\"IsDefined#5\">using namespace System;\nusing namespace System::Reflection;\n\nnamespace IsDef5CS\n{\n   public ref class TestClass\n   {\n   public:\n\n      // Assign a ParamArray attribute to the parameter using the keyword.\n      void Method1(... array&lt;String^&gt;^args ){}\n\n   };\n\n   ref class DemoClass\n   {\n   public:\n      static void Main()\n      {\n         \n         // Get the class type to access its metadata.\n         Type^ clsType = TestClass::typeid;\n         \n         // Get the MethodInfo object for Method1.\n         MethodInfo^ mInfo = clsType-&gt;GetMethod( &quot;Method1&quot; );\n         \n         // Get the ParameterInfo array for the method parameters.\n         array&lt;ParameterInfo^&gt;^pInfo = mInfo-&gt;GetParameters();\n         if ( pInfo != nullptr )\n         {\n            \n            // See if the ParamArray attribute is defined.\n            bool isDef = Attribute::IsDefined( pInfo[ 0 ], ParamArrayAttribute::typeid );\n            \n            // Display the result.\n            Console::WriteLine( &quot;The ParamArray attribute {0} defined for &quot;\n            &quot;parameter {1} of method {2}.&quot;, isDef ? (String^)&quot;is&quot; : &quot;is not&quot;, pInfo[ 0 ]-&gt;Name, mInfo-&gt;Name );\n         }\n         else\n                  Console::WriteLine( &quot;The parameters information could &quot;\n         &quot;not be retrieved for method {0}.&quot;, mInfo-&gt;Name );\n      }\n\n   };\n\n}\n\n/*\n * Output:\n * The ParamArray attribute is defined for parameter args of method Method1.\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"IsDefined#5\">Imports System\nImports System.Reflection\n\nModule DemoModule\n    Public Class TestClass\n        &#39; Assign a ParamArray attribute to the parameter using the keyword.\n        Public Sub Method1(ByVal ParamArray args As String())\n        End Sub\n    End Class\n\n    Sub Main()\n        &#39; Get the class type to access its metadata.\n        Dim clsType As Type = GetType(TestClass)\n        &#39; Get the MethodInfo object for Method1.\n        Dim mInfo As MethodInfo = clsType.GetMethod(&quot;Method1&quot;)\n        &#39; Get the ParameterInfo array for the method parameters.\n        Dim pInfo() As ParameterInfo = mInfo.GetParameters()\n        If Not pInfo(0) Is Nothing Then\n            &#39; See if the ParamArray attribute is defined.\n            Dim isDef As Boolean = Attribute.IsDefined(pInfo(0), _\n                                   GetType(ParamArrayAttribute))\n            Dim strDef As String\n            If isDef = True Then\n                strDef = &quot;is&quot;\n            Else\n                strDef = &quot;is not&quot;\n            End If\n            &#39; Display the result.\n            Console.WriteLine(&quot;The ParamArray attribute {0} defined &quot; &amp; _\n                              &quot;for parameter {1} of method {2}.&quot;, _\n                              strDef, pInfo(0).Name, mInfo.Name)\n        Else\n            Console.WriteLine(&quot;Could not retrieve parameter information &quot; &amp; _\n                              &quot;for method {0}.&quot;, mInfo.Name)\n        End If\n    End Sub\nEnd Module\n\n&#39; Output:\n&#39; The ParamArray attribute is defined for parameter args of method Method1.\n</code></pre><pre><code class=\"lang-cs\" name=\"IsDefined#5\">using System;\nusing System.Reflection;\n\nnamespace IsDef5CS \n{\n    public class TestClass \n    {\n        // Assign a ParamArray attribute to the parameter using the keyword.\n        public void Method1(params String[] args)\n        {}\n    }\n\n    public class DemoClass \n    {\n        static void Main(string[] args) \n        {\n            // Get the class type to access its metadata.\n            Type clsType = typeof(TestClass);\n            // Get the MethodInfo object for Method1.\n            MethodInfo mInfo = clsType.GetMethod(&quot;Method1&quot;);\n            // Get the ParameterInfo array for the method parameters.\n            ParameterInfo[] pInfo = mInfo.GetParameters();\n            if (pInfo != null) \n            {\n                // See if the ParamArray attribute is defined.\n                bool isDef = Attribute.IsDefined(pInfo[0], \n                                                 typeof(ParamArrayAttribute));\n                // Display the result.\n                Console.WriteLine(&quot;The ParamArray attribute {0} defined for &quot; +\n                                  &quot;parameter {1} of method {2}.&quot;,\n                                  isDef ? &quot;is&quot; : &quot;is not&quot;,\n                                  pInfo[0].Name, \n                                  mInfo.Name);\n            }\n            else\n                Console.WriteLine(&quot;The parameters information could &quot; +\n                            &quot;not be retrieved for method {0}.&quot;, mInfo.Name);\n        }\n    }\n}\n\n/*\n * Output:\n * The ParamArray attribute is defined for parameter args of method Method1.\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Attribute_Match_System_Object_\">\r\n    \r\n            <a id=\"System_Attribute_Match_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Match(Object)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, returns a value that indicates whether this instance equals a specified object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool Match (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to compare with this instance of <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if this instance equals <code>obj</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method determines if one <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a> equals another. Its default implementation is the same as <a class=\"xref\" href=\"system.attribute#System_Attribute_Equals_\" data-linktype=\"relative-path\">Equals</a>, which performs a value and reference comparison. Override this method to implement support for attribute values, such as flags or bit fields, that consist of components that are meaningful in themselves.  </p>\n<p> For example, consider an attribute whose value is a binary field divided into a bit field of flags. Two instances of this attribute have one flag in set in common while all the other flags differ. The <a class=\"xref\" href=\"system.attribute#System_Attribute_Equals_\" data-linktype=\"relative-path\">Equals</a> method cannot determine that the two instances have the same flag set, but the Match method can.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example illustrates the use of Match in the context of <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"Match#1\">using System;\nusing System.Reflection;\n\n// A custom attribute to allow 2 authors per method.\n[AttributeUsage(AttributeTargets.Method)]\npublic class AuthorsAttribute : Attribute \n{\n\tprotected string _authorName1;\n\tprotected string _authorName2;\n\n\tpublic AuthorsAttribute(string name1, string name2) \n    {\n\t\t_authorName1 = name1;\n\t\t_authorName2 = name2;\n\t}\n\n\tpublic string AuthorName1 \n    {\n\t\tget { return _authorName1; }\n\t\tset { _authorName1 = value; }\n\t}\n\n\tpublic string AuthorName2 \n    {\n\t\tget { return _authorName2; }\n\t\tset { _authorName2 = value; }\n\t}\n\n\n    public override bool Equals(Object obj)\n    {\n      AuthorsAttribute auth = obj as AuthorsAttribute;\n      if (auth == null) return false;\n\n      return ((_authorName1 == auth.AuthorName1 &amp; \n              _authorName2 == auth.AuthorName2) |\n              (_authorName1 == auth.AuthorName2 &amp;\n              _authorName2 == auth.AuthorName1));\n   }\n\n\t// Use the hash code of the string objects and xor them together.\n\tpublic override int GetHashCode() \n    {\n\t\treturn _authorName1.GetHashCode() ^ _authorName2.GetHashCode();\n\t}\n\n\t// Determine if the object is a match to this one.\n\tpublic override bool Match(object obj) \n    {\n\t\t// Obviously a match.\n\t\tif (obj == this)\n\t\t\treturn true;\n\n\t\t// Obviously we&#39;re not null, so no.\n\t\tif (obj == null)\n\t\t\treturn false;\n\n\t\tAuthorsAttribute authObj = obj as AuthorsAttribute;\n\t\tif (authObj != null)  \n            // Check for identical order.\n            if ((_authorName1 == authObj._authorName1) &amp;\n                (_authorName2 == authObj._authorName2))\n                return true;\n            // Check for reversed order.\n            else if ((_authorName1 == authObj._authorName2) &amp;\n                (_authorName2 == authObj._authorName1))\n                return true;\n            else\n                return false;\n        else\n    \t\treturn false;\n\t}\n}\n\n// Add some authors to methods of a class.\npublic class TestClass1 {\n\t[Authors(&quot;William Shakespeare&quot;, &quot;Herman Melville&quot;)]\n\tpublic void Method1()\n\t{}\n\n\t[Authors(&quot;Leo Tolstoy&quot;, &quot;John Milton&quot;)]\n\tpublic void Method2()\n\t{}\n}\n\n// Add authors to a second class&#39;s methods.\npublic class TestClass2 {\n\t[Authors(&quot;William Shakespeare&quot;, &quot;Herman Melville&quot;)]\n\tpublic void Method1()\n\t{}\n\n\t[Authors(&quot;Leo Tolstoy&quot;, &quot;John Milton&quot;)]\n\tpublic void Method2()\n\t{}\n\n\t[Authors(&quot;William Shakespeare&quot;, &quot;John Milton&quot;)]\n\tpublic void Method3()\n\t{}\n\n   [Authors(&quot;John Milton&quot;, &quot;Leo Tolstoy&quot;)]\n   public void Method4()\n   {}\n}\n\nclass DemoClass {\n\tstatic void Main(string[] args) {\n\t\t// Get the type for both classes to access their metadata.\n\t\tType clsType1 = typeof(TestClass1);\n\t\tType clsType2 = typeof(TestClass2);\n\n\t\t// Iterate through each method of the first class.\n\t\tforeach(var method in clsType1.GetMethods()) {\n\t\t\t// Check each method for the Authors attribute.\n\t\t\tAuthorsAttribute authAttr1 = (AuthorsAttribute)\n\t\t\t\tAttribute.GetCustomAttribute(method, \n\t\t\t\ttypeof(AuthorsAttribute));\n\t\t\tif (authAttr1 != null) {\n\t\t\t\t// Display the authors.\n\t\t\t\tConsole.WriteLine(&quot;{0}.{1} was authored by {2} and {3}.&quot;, \n                                  clsType1.Name, method.Name, authAttr1.AuthorName1, \n                                  authAttr1.AuthorName2);\n\t\t\t\t// Iterate through each method of the second class.\n\t\t\t\tforeach(var method2 in clsType2.GetMethods()) {\n\t\t\t\t\t// Check each method for the Authors attribute.\n\t\t\t\t\tAuthorsAttribute authAttr2 = (AuthorsAttribute)\n\t\t\t\t\t\tAttribute.GetCustomAttribute(method2, \n\t\t\t\t\t\ttypeof(AuthorsAttribute));\n\t\t\t\t\t// Compare with the authors in the first class.\n\t\t\t\t\tif (authAttr2 != null &amp;&amp; authAttr2.Match(authAttr1))\n\t\t\t\t\t\tConsole.WriteLine(&quot;{0}.{1} was also authored by the same team.&quot;, \n                                       clsType2.Name, method2.Name);\n\t\t\t\t}\n\t\t\t\tConsole.WriteLine();\n\t\t\t}\n\t\t}\n\t}\n}\n// The example displays the following output:\n//    TestClass1.Method1 was authored by William Shakespeare and Herman Melville.\n//    TestClass2.Method1 was also authored by the same team.\n//    \n//    TestClass1.Method2 was authored by Leo Tolstoy and John Milton.\n//    TestClass2.Method2 was also authored by the same team.\n//    TestClass2.Method4 was also authored by the same team.\n</code></pre><pre><code class=\"lang-vb\" name=\"Match#1\">Imports System.Reflection\n\n&#39; A custom attribute to allow 2 authors per method.\n&lt;AttributeUsage(AttributeTargets.Method)&gt; _\nPublic Class AuthorsAttribute : Inherits Attribute\n   Protected _authorName1 As String\n   Protected _authorName2 As String\n   \n   Public Sub New(name1 As String, name2 As String)\n      _authorName1 = name1\n      _authorName2 = name2\n   End Sub\n   \n   Public Property AuthorName1() As String\n      Get\n         Return _authorName1\n      End Get\n      Set\n         _authorName1 = value\n      End Set\n   End Property\n   \n   Public Property AuthorName2() As String\n      Get\n         Return _authorName2\n      End Get\n      Set\n         _authorName2 = value\n      End Set\n   End Property\n   \n   Public Overrides Function Equals(obj As Object) As Boolean\n      Dim auth As AuthorsAttribute = TryCast(obj, AuthorsAttribute)\n      If auth Is Nothing Then Return False\n\n      Return (_authorName1 = obj.AuthorName1 And \n              _authorName2 = obj.AuthorName2) Or\n              (_authorName1 = obj.AuthorName2 And\n              _authorName2 = obj.AuthorName1)\n   End Function\n   \n   &#39; Use the hash code of the string objects and xor them together.\n   Public Overrides Function GetHashCode() As Integer\n      Return _authorName1.GetHashCode() XOr _authorName2.GetHashCode()\n   End Function\n   \n   &#39; Determine if the object is a match to this one.\n   Public Overrides Function Match(ByVal obj As Object) As Boolean\n      &#39; Obviously a match.\n      If obj Is Me Then\n         Return True\n      End If\n   \n      &#39; Obviously we&#39;re not nothing, so no.\n      If obj Is Nothing Then\n         Return False\n      End If\n   \n      Dim authObj As AuthorsAttribute = TryCast(obj, AuthorsAttribute)\n      If authObj IsNot Nothing Then\n         &#39; Check for identical order.\n         If _authorName1 = authObj._authorName1 And\n            _authorName2 = authObj._authorName2 Then\n            Return True\n         &#39; Check for reversed order.\n         Else If _authorName1 = authObj._authorName2 And\n            _authorName2 = authObj._authorName1 Then\n            Return True\n         Else\n            Return False\n         End If\n      Else\n         Return False\n      End If\n   End Function\nEnd Class\n\n&#39; Add some authors to methods of a class.\nPublic Class TestClass1\n   &lt;Authors(&quot;William Shakespeare&quot;, &quot;Herman Melville&quot;)&gt; _\n   Public Sub Method1()\n   End Sub\n\n   &lt;Authors(&quot;Leo Tolstoy&quot;, &quot;John Milton&quot;)&gt; _\n   Public Sub Method2()\n   End Sub\nEnd Class\n\n&#39; Add authors to a second class&#39;s methods.\nPublic Class TestClass2\n   &lt;Authors(&quot;William Shakespeare&quot;, &quot;Herman Melville&quot;)&gt; _\n   Public Sub Method1()\n   End Sub\n\n   &lt;Authors(&quot;Leo Tolstoy&quot;, &quot;John Milton&quot;)&gt; _\n   Public Sub Method2()\n   End Sub\n\n   &lt;Authors(&quot;Francis Bacon&quot;, &quot;Miguel Cervantes&quot;)&gt; _\n   Public Sub Method3()\n   End Sub\n   \n   &lt;Authors(&quot;John Milton&quot;, &quot;Leo Tolstoy&quot;)&gt; _\n   Public Sub Method4()\n   End Sub\nEnd Class\n\nPublic Module Example\n   Sub Main()\n      &#39; Get the Type object for both classes.\n      Dim clsType1 As Type = GetType(TestClass1)\n      Dim clsType2 As Type = GetType(TestClass2)\n\n      &#39; Iterate through each method of the first class.\n      For Each method In clsType1.GetMethods()\n         &#39; Check each method for the Authors attribute.\n         Dim attr1 As AuthorsAttribute = CType(Attribute.GetCustomAttribute(method, \n                                  GetType(AuthorsAttribute)), AuthorsAttribute)\n         If attr1 IsNot Nothing Then\n            Dim authAttr1 As AuthorsAttribute = \n                             CType(attr1, AuthorsAttribute)\n            &#39; Display the authors.\n            Console.WriteLine(&quot;{0}.{1} was authored by {2} and {3}.&quot;, \n                              clsType1.Name, method.Name, authAttr1.AuthorName1, \n                              authAttr1.AuthorName2)\n            &#39; Iterate through each method of the second class.\n            For Each method2 In clsType2.GetMethods()\n               &#39; Check each method for the Authors attribute.\n               Dim attr2 As AuthorsAttribute = CType(Attribute.GetCustomAttribute( \n                                        method2, GetType(AuthorsAttribute)), \n                                        AuthorsAttribute)\n               If attr2 IsNot Nothing Then\n                  Dim authAttr2 As AuthorsAttribute = _\n                                CType(attr2, AuthorsAttribute)\n                  &#39; Compare with the authors in the first class.\n                  If authAttr2.Match(authAttr1) = True Then\n                     Console.WriteLine(&quot;{0}.{1} was also authored by the same team.&quot;, \n                                       clsType2.Name, method2.Name)\n                  End If\n               End If\n            Next\n            Console.WriteLine()\n         End If\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    TestClass1.Method1 was authored by William Shakespeare and Herman Melville.\n&#39;    TestClass2.Method1 was also authored by the same team.\n&#39;    \n&#39;    TestClass1.Method2 was authored by Leo Tolstoy and John Milton.\n&#39;    TestClass2.Method2 was also authored by the same team.\n&#39;    TestClass2.Method4 was also authored by the same team.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Attribute_System_Runtime_InteropServices__Attribute_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Attribute_System_Runtime_InteropServices__Attribute_GetIDsOfNames_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_Attribute.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Maps a set of names to a corresponding set of dispatch identifiers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _Attribute.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>riid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Reserved for future use. Must be IID_NULL.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgszNames</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Passed-in array of names to be mapped.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cNames</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Count of the names to be mapped.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lcid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The locale context in which to interpret the names.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgDispId</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Caller-allocated array that receives the IDs corresponding to the names.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Late-bound access using the COM <code>IDispatch</code> interface is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetIDsOfNames</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Attribute_System_Runtime_InteropServices__Attribute_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Attribute_System_Runtime_InteropServices__Attribute_GetTypeInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_Attribute.GetTypeInfo(UInt32,UInt32,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the type information for an object, which can be used to get the type information for an interface.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _Attribute.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>iTInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type information to return.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lcid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The locale identifier for the type information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ppTInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Receives a pointer to the requested type information object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Late-bound access using the COM <code>IDispatch</code> interface is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetTypeInfo</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Attribute_System_Runtime_InteropServices__Attribute_GetTypeInfoCount_System_UInt32__\">\r\n    \r\n            <a id=\"System_Attribute_System_Runtime_InteropServices__Attribute_GetTypeInfoCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_Attribute.GetTypeInfoCount(UInt32)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _Attribute.GetTypeInfoCount (out uint pcTInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pcTInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Points to a location that receives the number of type information interfaces provided by the object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Late-bound access using the COM <code>IDispatch</code> interface is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetTypeInfoCount</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Attribute_System_Runtime_InteropServices__Attribute_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Attribute_System_Runtime_InteropServices__Attribute_Invoke_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_Attribute.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Provides access to properties and methods exposed by an object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _Attribute.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dispIdMember</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Identifies the member.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>riid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Reserved for future use. Must be IID_NULL.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lcid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The locale context in which to interpret arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>wFlags</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Flags describing the context of the call.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pDispParams</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pVarResult</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Pointer to the location where the result is to be stored.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pExcepInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Pointer to a structure that contains exception information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>puArgErr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the first argument that has an error.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Late-bound access using the COM <code>IDispatch</code> interface is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::Invoke</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Attribute.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Attribute.yml\">\r\n<meta name=\"APIName\" content=\"System.Attribute\">\r\n<meta name=\"APIName\" content=\"System.Attribute..ctor\">\r\n<meta name=\"APIName\" content=\"System.Attribute.Equals\">\r\n<meta name=\"APIName\" content=\"System.Attribute.GetCustomAttribute\">\r\n<meta name=\"APIName\" content=\"System.Attribute.GetCustomAttributes\">\r\n<meta name=\"APIName\" content=\"System.Attribute.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Attribute.IsDefaultAttribute\">\r\n<meta name=\"APIName\" content=\"System.Attribute.IsDefined\">\r\n<meta name=\"APIName\" content=\"System.Attribute.Match\">\r\n<meta name=\"APIName\" content=\"System.Attribute._Attribute.GetIDsOfNames\">\r\n<meta name=\"APIName\" content=\"System.Attribute._Attribute.GetTypeInfo\">\r\n<meta name=\"APIName\" content=\"System.Attribute._Attribute.GetTypeInfoCount\">\r\n<meta name=\"APIName\" content=\"System.Attribute._Attribute.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Attribute.TypeId\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"d93f705a-e166-ca07-91fb-bb80e5d76eec\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\o2y0\\s\\fulldocset\\xml\\System\\Attribute.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the base class for custom attributes.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Attribute\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Attribute.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Attribute.yml","open_to_public_contributors":true,"api_name":["System.Attribute","System.Attribute..ctor","System.Attribute.Equals","System.Attribute.GetCustomAttribute","System.Attribute.GetCustomAttributes","System.Attribute.GetHashCode","System.Attribute.IsDefaultAttribute","System.Attribute.IsDefined","System.Attribute.Match","System.Attribute._Attribute.GetIDsOfNames","System.Attribute._Attribute.GetTypeInfo","System.Attribute._Attribute.GetTypeInfoCount","System.Attribute._Attribute.Invoke","System.Attribute.TypeId"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Attribute","System::Attribute","System.Attribute.#ctor","System::Attribute::#ctor","System.Attribute.Equals","System::Attribute::Equals","System.Attribute.GetCustomAttribute","System::Attribute::GetCustomAttribute","System.Attribute.GetCustomAttributes","System::Attribute::GetCustomAttributes","System.Attribute.GetHashCode","System::Attribute::GetHashCode","System.Attribute.IsDefaultAttribute","System::Attribute::IsDefaultAttribute","System.Attribute.IsDefined","System::Attribute::IsDefined","System.Attribute.Match","System::Attribute::Match","System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames","System::Attribute::System#Runtime#InteropServices#_Attribute#GetIDsOfNames","System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo","System::Attribute::System#Runtime#InteropServices#_Attribute#GetTypeInfo","System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount","System::Attribute::System#Runtime#InteropServices#_Attribute#GetTypeInfoCount","System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke","System::Attribute::System#Runtime#InteropServices#_Attribute#Invoke","System.Attribute.TypeId","System::Attribute::TypeId"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"d93f705a-e166-ca07-91fb-bb80e5d76eec","original_ecmaxml_local_path":"W:\\o2y0\\s\\fulldocset\\xml\\System\\Attribute.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/Attribute.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Attribute class | Microsoft Docs","_op_ogTitle":"Attribute class","description":"Represents the base class for custom attributes.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.Attribute","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.attribute","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.attribute","fileRelativePath":"System.Attribute.html"},"themesRelativePathToOutputRoot":"_themes/"}