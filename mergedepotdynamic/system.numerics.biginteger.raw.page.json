{"content":"\r\n<div style=\"display:none\">\r\n\t\r\n</div>\r\n\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">BigInteger</span>\r\n      Struct\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents an arbitrarily large signed integer.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public struct BigInteger : IComparable, IComparable&lt;System.Numerics.BigInteger&gt;, IEquatable&lt;System.Numerics.BigInteger&gt;, IFormattable</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div>\r\n  \t\t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">System.ValueType</a></span></div>\r\n  \t\t\t<span class=\"lang-csharp\">BigInteger</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The BigInteger type is an immutable type that represents an arbitrarily large integer whose value in theory has no upper or lower bounds. The members of the BigInteger type closely parallel those of other integral types (the <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>, <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a>, <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>, <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>, <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>, <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a>, <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a>, and <a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a> types). This type differs from the other integral types in the .NET Framework, which have a range indicated by their <code>MinValue</code> and <code>MaxValue</code> properties.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Because the BigInteger type is immutable (see <a href=\"#mutability\" data-linktype=\"self-bookmark\">Mutability and the BigInteger Structure</a>) and because it has no upper or lower bounds, an <a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a> can be thrown for any operation that causes a BigInteger value to grow too large.  </p>\n</div>\n<h2 id=\"instantiating-a-biginteger-object\">Instantiating a BigInteger Object</h2>\n<p> You can instantiate a BigInteger object in several ways:  </p>\n<ul>\n<li><p>You can use the <code>new</code> keyword and provide any integral or floating-point value as a parameter to the BigInteger constructor. (Floating-point values are truncated before they are assigned to the BigInteger.) The following example illustrates how to use the <code>new</code> keyword to instantiate BigInteger values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Class#1\">      BigInteger bigIntFromDouble = new BigInteger(179032.6541);\n      Console.WriteLine(bigIntFromDouble);\n      BigInteger bigIntFromInt64 = new BigInteger(934157136952);\n      Console.WriteLine(bigIntFromInt64);\n      // The example displays the following output:\n      //   179032\n      //   934157136952\t\t\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Class#1\">      Dim bigIntFromDouble As New BigInteger(179032.6541)\n      Console.WriteLine(bigIntFromDouble)\n      Dim bigIntFromInt64 As New BigInteger(934157136952)\n      Console.WriteLine(bigIntFromInt64)\n      &#39; The example displays the following output:\n      &#39;   179032\n      &#39;   934157136952\t\t\n</code></pre></li>\n<li><p>You can declare a BigInteger variable and assign it a value just as you would any numeric type, as long as that value is an integral type. The following example uses assignment to create a BigInteger value from an <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Class#2\">      long longValue = 6315489358112;      \n      BigInteger assignedFromLong = longValue;\n      Console.WriteLine(assignedFromLong);\n      // The example displays the following output:\n      //   6315489358112\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Class#2\">      Dim longValue As Long = 6315489358112      \n      Dim assignedFromLong As BigInteger = longValue\n      Console.WriteLine(assignedFromLong)\n      &#39; The example displays the following output:\n      &#39;   6315489358112\n</code></pre></li>\n<li><p>You can assign a decimal or floating-point value to a BigInteger object if you cast the value or convert it first. The following example explicitly casts (in C#) or converts (in Visual Basic) a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> and a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value to a BigInteger.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Class#3\">      BigInteger assignedFromDouble = (BigInteger) 179032.6541;\n      Console.WriteLine(assignedFromDouble);   \n      BigInteger assignedFromDecimal = (BigInteger) 64312.65m;      \n      Console.WriteLine(assignedFromDecimal);\n      // The example displays the following output:\n      //   179032\n      //   64312      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Class#3\">      Dim assignedFromDouble As BigInteger = CType(179032.6541, BigInteger)\n      Console.WriteLine(assignedFromDouble)   \n      Dim assignedFromDecimal As BigInteger = CType(64312.65d, BigInteger)      \n      Console.WriteLine(assignedFromDecimal)\n      &#39; The example displays the following output:\n      &#39;   179032\n      &#39;   64312      \n</code></pre><p>These methods enable you to instantiate a BigInteger object whose value is in the range of one of the existing numeric types only. You can instantiate a BigInteger object whose value can exceed the range of the existing numeric types in one of three ways:  </p>\n</li>\n<li><p>You can use the <code>new</code> keyword and provide a byte array of any size to the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger__ctor_\" data-linktype=\"relative-path\">BigInteger</a> constructor. For example:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Class#4\">      byte[] byteArray = { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0};\n      BigInteger newBigInt = new BigInteger(byteArray);\n      Console.WriteLine(&quot;The value of newBigInt is {0} (or 0x{0:x}).&quot;, newBigInt);    \n      // The example displays the following output:\n      //   The value of newBigInt is 4759477275222530853130 (or 0x102030405060708090a).\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Class#4\">      Dim byteArray() As Byte = { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0}\n      Dim newBigInt As New BigInteger(byteArray)\n      Console.WriteLine(&quot;The value of newBigInt is {0} (or 0x{0:x}).&quot;, newBigInt)    \n      &#39; The example displays the following output:\n      &#39;   The value of newBigInt is 4759477275222530853130 (or 0x102030405060708090a).\n</code></pre></li>\n<li><p>You can call the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Parse_\" data-linktype=\"relative-path\">Parse</a> or <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_TryParse_\" data-linktype=\"relative-path\">TryParse</a> methods to convert the string representation of a number to a BigInteger. For example:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Class#5\">      string positiveString = &quot;91389681247993671255432112000000&quot;;\n      string negativeString = &quot;-90315837410896312071002088037140000&quot;;\n      BigInteger posBigInt = 0;\n      BigInteger negBigInt = 0;\n\n      try {\n         posBigInt = BigInteger.Parse(positiveString);\n         Console.WriteLine(posBigInt);\n      }\n      catch (FormatException)\n      {\n         Console.WriteLine(&quot;Unable to convert the string &#39;{0}&#39; to a BigInteger value.&quot;, \n                           positiveString);\n      }\n\n      if (BigInteger.TryParse(negativeString, out negBigInt))\n        Console.WriteLine(negBigInt);\n      else\n         Console.WriteLine(&quot;Unable to convert the string &#39;{0}&#39; to a BigInteger value.&quot;, \n                            negativeString);\n\n      // The example displays the following output:\n      //   9.1389681247993671255432112E+31\n      //   -9.0315837410896312071002088037E+34\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Class#5\">      Dim positiveString As String = &quot;91389681247993671255432112000000&quot;\n      Dim negativeString As string = &quot;-90315837410896312071002088037140000&quot;\n      Dim posBigInt As BigInteger = 0\n      Dim negBigInt As BigInteger = 0\n\n      Try\n         posBigInt = BigInteger.Parse(positiveString)\n         Console.WriteLine(posBigInt)\n      Catch e As FormatException\n         Console.WriteLine(&quot;Unable to convert the string &#39;{0}&#39; to a BigInteger value.&quot;, _\n                           positiveString)\n      End Try\n\n      If BigInteger.TryParse(negativeString, negBigInt) Then\n        Console.WriteLine(negBigInt)\n      Else\n         Console.WriteLine(&quot;Unable to convert the string &#39;{0}&#39; to a BigInteger value.&quot;, _\n                            negativeString)\n      End If         \n      &#39; The example displays the following output:\n      &#39;   9.1389681247993671255432112E+31\n      &#39;   -9.0315837410896312071002088037E+34\n</code></pre></li>\n<li><p>You can call a <code>static</code> (<code>Shared</code> in Visual Basic) BigInteger method that performs some operation on a numeric expression and returns a calculated BigInteger result. The following example does this by cubing <a class=\"xref\" href=\"system.uint64#System_UInt64_MaxValue\" data-linktype=\"relative-path\">System.UInt64.MaxValue</a> and assigning the result to a BigInteger.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Class#6\">      BigInteger number = BigInteger.Pow(UInt64.MaxValue, 3);\n      Console.WriteLine(number);\n      // The example displays the following output:\n      //    6277101735386680762814942322444851025767571854389858533375\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Class#6\">      Dim number As BigInteger = BigInteger.Pow(UInt64.MaxValue, 3)\n      Console.WriteLine(number)\n      &#39; The example displays the following output:\n        &#39; 6277101735386680762814942322444851025767571854389858533375\n</code></pre><p>The uninitialized value of a BigInteger is <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Zero_\" data-linktype=\"relative-path\">Zero</a>.  </p>\n</li>\n</ul>\n<h2 id=\"performing-operations-on-biginteger-values\">Performing Operations on BigInteger Values</h2>\n<p> You can use a BigInteger instance as you would use any other integral type. BigInteger overloads the standard numeric operators to enable you to perform basic mathematical operations such as addition, subtraction, division, multiplication, subtraction, negation, and unary negation. You can also use the standard numeric operators to compare two BigInteger values with each other. Like the other integral types, BigInteger also supports the bitwise <code>And</code>, <code>Or</code>, <code>XOr</code>, left shift, and right shift operators. For languages that do not support custom operators, the BigInteger structure also provides equivalent methods for performing mathematical operations. These include <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Add_\" data-linktype=\"relative-path\">Add</a>, <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Divide_\" data-linktype=\"relative-path\">Divide</a>, <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Multiply_\" data-linktype=\"relative-path\">Multiply</a>, <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Negate_\" data-linktype=\"relative-path\">Negate</a>, <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Subtract_\" data-linktype=\"relative-path\">Subtract</a>, and several others.  </p>\n<p> Many members of the BigInteger structure correspond directly to members of the other integral types. In addition, BigInteger adds members such as the following:  </p>\n<ul>\n<li><p><a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Sign_\" data-linktype=\"relative-path\">Sign</a>, which returns a value that indicates the sign of a BigInteger value.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Abs_\" data-linktype=\"relative-path\">Abs</a>, which returns the absolute value of a BigInteger value.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_DivRem_\" data-linktype=\"relative-path\">DivRem</a>, which returns both the quotient and remainder of a division operation.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_GreatestCommonDivisor_\" data-linktype=\"relative-path\">GreatestCommonDivisor</a>, which returns the greatest common divisor of two BigInteger values.  </p>\n<p>Many of these additional members correspond to the members of the <a class=\"xref\" href=\"system.math\" data-linktype=\"relative-path\">Math</a> class, which provides the functionality to work with the primitive numeric types.  </p>\n</li>\n</ul>\n<p><a name=\"mutability\"></a>   </p>\n<h2 id=\"mutability-and-the-biginteger-structure\">Mutability and the BigInteger Structure</h2>\n<p> The following example instantiates a BigInteger object and then increments its value by one.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Class.Mutability#1\">      BigInteger number = BigInteger.Multiply(Int64.MaxValue, 3);\n      number++;\n      Console.WriteLine(number);\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Class.Mutability#1\">      Dim number As BigInteger = BigInteger.Multiply(Int64.MaxValue, 3)\n      number += 1\n      Console.WriteLine(number)\n</code></pre><p> Although this example appears to modify the value of the existing object, this is not the case. BigInteger objects are immutable, which means that internally, the common language runtime actually creates a new BigInteger object and assigns it a value one greater than its previous value. This new object is then returned to the caller.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The other numeric types in the .NET Framework are also immutable. However, because the BigInteger type has no upper or lower bounds, its values can grow extremely large and have a measurable impact on performance.  </p>\n</div>\n<p> Although this process is transparent to the caller, it does incur a performance penalty. In some cases, especially when repeated operations are performed in a loop on very large BigInteger values, that performance penalty can be significant. For example, in the following example, an operation is performed repetitively up to a million times, and a BigInteger value is incremented by one every time the operation succeeds.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Class.Mutability#12\">      BigInteger number = Int64.MaxValue ^ 5;\n      int repetitions = 1000000;\n      // Perform some repetitive operation 1 million times.\n      for (int ctr = 0; ctr &lt;= repetitions; ctr++)\n      {\n         // Perform some operation. If it fails, exit the loop.\n         if (! SomeOperationSucceeds()) break;\n         // The following code executes if the operation succeeds.\n         number++;\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Class.Mutability#12\">      Dim number As BigInteger = Int64.MaxValue ^ 5\n      Dim repetitions As Integer = 1000000\n      &#39; Perform some repetitive operation 1 million times.\n      For ctr As Integer = 0 To repetitions\n         &#39; Perform some operation. If it fails, exit the loop.\n         If Not SomeOperationSucceeds() Then Exit For\n         &#39; The following code executes if the operation succeeds.\n         number += 1\n      Next\n</code></pre><p> In such a case, you can improve performance by performing all intermediate assignments to an <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> variable. The final value of the variable can then be assigned to the BigInteger object when the loop exits. The following example provides an illustration.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Class.Mutability#3\">      BigInteger number = Int64.MaxValue ^ 5;\n      int repetitions = 1000000;\n      int actualRepetitions = 0;\n      // Perform some repetitive operation 1 million times.\n      for (int ctr = 0; ctr &lt;= repetitions; ctr++)\n      {\n         // Perform some operation. If it fails, exit the loop.\n         if (! SomeOperationSucceeds()) break;\n         // The following code executes if the operation succeeds.\n         actualRepetitions++;\n      }\n      number += actualRepetitions;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Class.Mutability#3\">      Dim number As BigInteger = Int64.MaxValue ^ 5\n      Dim repetitions As Integer = 1000000\n      Dim actualRepetitions As Integer = 0\n      &#39; Perform some repetitive operation 1 million times.\n      For ctr As Integer = 0 To repetitions\n         &#39; Perform some operation. If it fails, exit the loop.\n         If Not SomeOperationSucceeds() Then Exit For\n         &#39; The following code executes if the operation succeeds.\n         actualRepetitions += 1\n      Next\n      number += actualRepetitions\n</code></pre><h2 id=\"working-with-byte-arrays-and-hexadecimal-strings\">Working with Byte Arrays and Hexadecimal Strings</h2>\n<p> If you convert BigInteger values to byte arrays, or if you convert byte arrays to BigInteger values, you must consider the order of bytes. The BigInteger structure expects the individual bytes in a byte array to appear in little-endian order (that is, the lower-order bytes of the value precede the higher-order bytes). You can round-trip a BigInteger value by calling the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_ToByteArray_\" data-linktype=\"relative-path\">ToByteArray</a> method and then passing the resulting byte array to the [BigInteger(Byte&lt;xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29&gt; constructor, as the following example shows.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Class.ByteAndHex#1\">      BigInteger number = BigInteger.Pow(Int64.MaxValue, 2);     \n      Console.WriteLine(number);\n      \n      // Write the BigInteger value to a byte array.\n      byte[] bytes = number.ToByteArray();\n      \n      // Display the byte array.\n      foreach (byte byteValue in bytes)\n         Console.Write(&quot;0x{0:X2} &quot;, byteValue);\n      Console.WriteLine();\n\n      // Restore the BigInteger value from a Byte array.\n      BigInteger newNumber = new BigInteger(bytes);\n      Console.WriteLine(newNumber);\n      // The example displays the following output:\n      //    8.5070591730234615847396907784E+37\n      //    0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0x3F\n      //    \n      //    8.5070591730234615847396907784E+37\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Class.ByteAndHex#1\">      Dim number As BigInteger = BigInteger.Pow(Int64.MaxValue, 2)     \n      Console.WriteLine(number)\n      \n      &#39; Write the BigInteger value to a byte array.\n      Dim bytes() As Byte = number.ToByteArray()\n\n      &#39; Display the byte array.\n      For Each byteValue As Byte In bytes\n         Console.Write(&quot;0x{0:X2} &quot;, byteValue)\n      Next   \n      Console.WriteLine()\n\n      &#39; Restore the BigInteger value from a Byte array.\n      Dim newNumber As BigInteger = New BigInteger(bytes)\n      Console.WriteLine(newNumber)               \n      &#39; The example displays the following output:\n      &#39;    8.5070591730234615847396907784E+37\n      &#39;    0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0x3F\n      &#39;    \n      &#39;    8.5070591730234615847396907784E+37\n</code></pre><p> To instantiate a BigInteger value from a byte array that represents a value of some other integral type, you can pass the integral value to the <a class=\"xref\" href=\"system.bitconverter#System_BitConverter_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method, and then pass the resulting byte array to the [BigInteger(Byte&lt;xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29&gt; constructor. The following example instantiates a BigInteger value from a byte array that represents an <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a> value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Class.ByteAndHex#2\">      short originalValue = 30000;\n      Console.WriteLine(originalValue);\n      \n      // Convert the Int16 value to a byte array.\n      byte[] bytes = BitConverter.GetBytes(originalValue);\n\n      // Display the byte array.\n      foreach (byte byteValue in bytes)\n         Console.Write(&quot;0x{0} &quot;, byteValue.ToString(&quot;X2&quot;));\n      Console.WriteLine();\n\n      // Pass byte array to the BigInteger constructor.\n      BigInteger number = new BigInteger(bytes);\n      Console.WriteLine(number);\n      // The example displays the following output:\n      //       30000\n      //       0x30 0x75\n      //       30000\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Class.ByteAndHex#2\">      Dim originalValue As Short = 30000\n      Console.WriteLine(originalValue)\n      \n      &#39; Convert the Int16 value to a byte array.\n      Dim bytes() As Byte = BitConverter.GetBytes(originalValue)\n\n      &#39; Display the byte array.\n      For Each byteValue As Byte In bytes\n         Console.Write(&quot;0x{0} &quot;, byteValue.ToString(&quot;X2&quot;))\n      Next    \n      Console.WriteLine() \n\n      &#39; Pass byte array to the BigInteger constructor.\n      Dim number As BigInteger = New BigInteger(bytes)\n      Console.WriteLine(number)\n      &#39; The example displays the following output:\n      &#39;       30000\n      &#39;       0x30 0x75\n      &#39;       30000\n</code></pre><p> The BigInteger structure assumes that negative values are stored by using two&#39;s complement representation. Because the BigInteger structure represents a numeric value with no fixed length, the [BigInteger(Byte&lt;xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29&gt; constructor always interprets the most significant bit of the last byte in the array as a sign bit. To prevent the [BigInteger(Byte&lt;xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29&gt; constructor from confusing the two&#39;s complement representation of a negative value with the sign and magnitude representation of a positive value, positive values in which the most significant bit of the last byte in the byte array would ordinarily be set should include an additional byte whose value is 0. For example, 0xC0 0xBD 0xF0 0xFF is the little-endian hexadecimal representation of either -1,000,000 or 4,293,967,296. Because the most significant bit of the last byte in this array is on, the value of the byte array would be interpreted by the [BigInteger(Byte&lt;xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29&gt; constructor as -1,000,000. To instantiate a BigInteger whose value is positive, a byte array whose elements are 0xC0 0xBD 0xF0 0xFF 0x00 must be passed to the constructor. The following example illustrates this.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Class.ByteAndHex#3\">      int negativeNumber = -1000000;\n      uint positiveNumber = 4293967296;\n      \n      byte[] negativeBytes = BitConverter.GetBytes(negativeNumber); \n      BigInteger negativeBigInt = new BigInteger(negativeBytes);\n      Console.WriteLine(negativeBigInt.ToString(&quot;N0&quot;));\n      \n      byte[] tempPosBytes = BitConverter.GetBytes(positiveNumber);\n      byte[] positiveBytes = new byte[tempPosBytes.Length + 1];\n      Array.Copy(tempPosBytes, positiveBytes, tempPosBytes.Length);\n      BigInteger positiveBigInt = new BigInteger(positiveBytes);\n      Console.WriteLine(positiveBigInt.ToString(&quot;N0&quot;)); \n      // The example displays the following output:\n      //    -1,000,000\n      //    4,293,967,296      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Class.ByteAndHex#3\">      Dim negativeNumber As Integer = -1000000\n      Dim positiveNumber As UInteger = 4293967296\n      \n      Dim negativeBytes() As Byte = BitConverter.GetBytes(negativeNumber) \n      Dim negativeBigInt As New BigInteger(negativeBytes)\n      Console.WriteLine(negativeBigInt.ToString(&quot;N0&quot;))\n      \n      Dim tempPosBytes() As Byte = BitConverter.GetBytes(positiveNumber)\n      Dim positiveBytes(tempposBytes.Length) As Byte\n      Array.Copy(tempPosBytes, positiveBytes, tempPosBytes.Length)\n      Dim positiveBigInt As New BigInteger(positiveBytes)\n      Console.WriteLine(positiveBigInt.ToString(&quot;N0&quot;)) \n      &#39; The example displays the following output:\n      &#39;    -1,000,000\n      &#39;    4,293,967,296      \n</code></pre><p> Byte arrays created by the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_ToByteArray_\" data-linktype=\"relative-path\">ToByteArray</a> method from positive values include this extra zero-value byte. Therefore, the BigInteger structure can successfully round-trip values by assigning them to, and then restoring them from, byte arrays, as the following example shows.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Class.ByteAndHex#4\">      BigInteger positiveValue = 15777216;\n      BigInteger negativeValue  = -1000000;\n      \n      Console.WriteLine(&quot;Positive value: &quot; + positiveValue.ToString(&quot;N0&quot;));\n      byte[] bytes = positiveValue.ToByteArray();\n\n      foreach (byte byteValue in bytes)\n         Console.Write(&quot;{0:X2} &quot;, byteValue);\n      Console.WriteLine();\n      positiveValue = new BigInteger(bytes);\n      Console.WriteLine(&quot;Restored positive value: &quot; + positiveValue.ToString(&quot;N0&quot;));\n      \n      Console.WriteLine();\n         \n      Console.WriteLine(&quot;Negative value: &quot; + negativeValue.ToString(&quot;N0&quot;));\n      bytes = negativeValue.ToByteArray();\n      foreach (byte byteValue in bytes)\n         Console.Write(&quot;{0:X2} &quot;, byteValue);\n      Console.WriteLine();\n      negativeValue = new BigInteger(bytes);\n      Console.WriteLine(&quot;Restored negative value: &quot; + negativeValue.ToString(&quot;N0&quot;));\n      // The example displays the following output:\n      //       Positive value: 15,777,216\n      //       C0 BD F0 00\n      //       Restored positive value: 15,777,216\n      //       \n      //       Negative value: -1,000,000\n      //       C0 BD F0\n      //       Restored negative value: -1,000,000\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Class.ByteAndHex#4\">      Dim positiveValue As BigInteger = 15777216\n      Dim negativeValue As BigInteger = -1000000\n      \n      Console.WriteLine(&quot;Positive value: &quot; + positiveValue.ToString(&quot;N0&quot;))\n      Dim bytes() As Byte = positiveValue.ToByteArray()\n      For Each byteValue As Byte In bytes\n         Console.Write(&quot;{0:X2} &quot;, byteValue)\n      Next\n      Console.WriteLine()\n      positiveValue = New BigInteger(bytes)\n      Console.WriteLine(&quot;Restored positive value: &quot; + positiveValue.ToString(&quot;N0&quot;))\n      \n      Console.WriteLine()\n         \n      Console.WriteLIne(&quot;Negative value: &quot; + negativeValue.ToString(&quot;N0&quot;))\n      bytes = negativeValue.ToByteArray()\n      For Each byteValue As Byte In bytes\n         Console.Write(&quot;{0:X2} &quot;, byteValue)\n      Next\n      Console.WriteLine()\n      negativeValue = New BigInteger(bytes)\n      Console.WriteLine(&quot;Restored negative value: &quot; + negativeValue.ToString(&quot;N0&quot;))\n      &#39; The example displays the following output:\n      &#39;       Positive value: 15,777,216\n      &#39;       C0 BD F0 00\n      &#39;       Restored positive value: 15,777,216\n      &#39;       \n      &#39;       Negative value: -1,000,000\n      &#39;       C0 BD F0\n      &#39;       Restored negative value: -1,000,000\n</code></pre><p> However, you may need to add this additional zero-value byte to byte arrays that are created dynamically by the developer or that are returned by methods that convert unsigned integers to byte arrays (such as <a class=\"xref\" href=\"system.bitconverter#System_BitConverter_GetBytes_System_UInt16_\" data-linktype=\"relative-path\">System.BitConverter.GetBytes(UInt16)</a>, <a class=\"xref\" href=\"system.bitconverter#System_BitConverter_GetBytes_System_UInt32_\" data-linktype=\"relative-path\">System.BitConverter.GetBytes(UInt32)</a>, and <a class=\"xref\" href=\"system.bitconverter#System_BitConverter_GetBytes_System_UInt64_\" data-linktype=\"relative-path\">System.BitConverter.GetBytes(UInt64)</a>).  </p>\n<p> When parsing a hexadecimal string, the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Parse_System_String_System_Globalization_NumberStyles_\" data-linktype=\"relative-path\">System.Numerics.BigInteger.Parse(String,NumberStyles)</a> and <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Parse_System_String_System_Globalization_NumberStyles_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Numerics.BigInteger.Parse(String,NumberStyles,IFormatProvider)</a> methods assume that if the most significant bit of the first byte in the string is set, or if the first hexadecimal digit of the string represents the lower four bits of a byte value, the value is represented by using two&#39;s complement representation. For example, both &quot;FF01&quot; and &quot;F01&quot; represent the decimal value -255. To differentiate positive from negative values, positive values should include a leading zero. The relevant overloads of the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_ToString_\" data-linktype=\"relative-path\">ToString</a> method, when they are passed the &quot;X&quot; format string, add a leading zero to the returned hexadecimal string for positive values. This makes it possible to round-trip BigInteger values by using the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_ToString_\" data-linktype=\"relative-path\">ToString</a> and <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Parse_\" data-linktype=\"relative-path\">Parse</a> methods, as the following example shows.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Class.ByteAndHex#5\">      BigInteger negativeNumber = -1000000;\n      BigInteger positiveNumber  = 15777216;\n      \n      string negativeHex = negativeNumber.ToString(&quot;X&quot;);\n      string positiveHex = positiveNumber.ToString(&quot;X&quot;);\n      \n      BigInteger negativeNumber2, positiveNumber2;  \n      negativeNumber2 = BigInteger.Parse(negativeHex, \n                                         NumberStyles.HexNumber);\n      positiveNumber2 = BigInteger.Parse(positiveHex,\n                                         NumberStyles.HexNumber);\n\n      Console.WriteLine(&quot;Converted {0:N0} to {1} back to {2:N0}.&quot;, \n                         negativeNumber, negativeHex, negativeNumber2);                                         \n      Console.WriteLine(&quot;Converted {0:N0} to {1} back to {2:N0}.&quot;, \n                         positiveNumber, positiveHex, positiveNumber2);                                         \n      // The example displays the following output:\n      //       Converted -1,000,000 to F0BDC0 back to -1,000,000.\n      //       Converted 15,777,216 to 0F0BDC0 back to 15,777,216.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Class.ByteAndHex#5\">      Dim negativeNumber As BigInteger = -1000000\n      Dim positiveNumber As BigInteger = 15777216\n      \n      Dim negativeHex As String = negativeNumber.ToString(&quot;X&quot;)\n      Dim positiveHex As string = positiveNumber.ToString(&quot;X&quot;)\n      \n      Dim negativeNumber2, positiveNumber2 As BigInteger \n      negativeNumber2 = BigInteger.Parse(negativeHex, \n                                         NumberStyles.HexNumber)\n      positiveNumber2 = BigInteger.Parse(positiveHex,\n                                         NumberStyles.HexNumber)\n\n      Console.WriteLine(&quot;Converted {0:N0} to {1} back to {2:N0}.&quot;, \n                         negativeNumber, negativeHex, negativeNumber2)                                         \n      Console.WriteLine(&quot;Converted {0:N0} to {1} back to {2:N0}.&quot;, \n                         positiveNumber, positiveHex, positiveNumber2)                                         \n      &#39; The example displays the following output:\n      &#39;       Converted -1,000,000 to F0BDC0 back to -1,000,000.\n      &#39;       Converted 15,777,216 to 0F0BDC0 back to 15,777,216.\n</code></pre><p> However, the hexadecimal strings created by calling the <code>ToString</code> methods of the other integral types or the overloads of the <a class=\"xref\" href=\"system.convert#System_Convert_ToString_\" data-linktype=\"relative-path\">ToString</a> method that include a <code>toBase</code> parameter do not indicate the sign of the value or the source data type from which the hexadecimal string was derived. Successfully instantiating a BigInteger value from such a string requires some additional logic. The following example provides one possible implementation.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Class.ByteAndHex#6\">Imports System.Globalization\nImports System.Numerics\n\nPublic Structure HexValue\n   Public Sign As Integer\n   Public Value As String\nEnd Structure\n   \nModule Example\n   Public Sub Main()\n      Dim positiveNumber As UInteger = 4039543321\n      Dim negativeNumber As Integer = -255423975\n\n      &#39; Convert the numbers to hex strings.\n      Dim hexValue1, hexValue2 As HexValue\n      hexValue1.Value = positiveNumber.ToString(&quot;X&quot;)\n      hexValue1.Sign = Math.Sign(positiveNumber)\n      \n      hexValue2.Value = Convert.ToString(negativeNumber, 16)\n      hexValue2.Sign = Math.Sign(negativeNumber)\n      \n      &#39; Round-trip the hexadecimal values to BigInteger values.\n      Dim hexString As String\n      Dim positiveBigInt, negativeBigInt As BigInteger\n      \n      hexString = CStr(IIf(hexValue1.Sign = 1, &quot;0&quot;, &quot;&quot;)) + hexValue1.Value\n      positiveBigInt = BigInteger.Parse(hexString, NumberStyles.HexNumber)      \n      Console.WriteLine(&quot;Converted {0} to {1} and back to {2}.&quot;, \n                        positiveNumber, hexValue1.Value, positiveBigInt)\n\n      hexString = CStr(IIf(hexValue2.Sign = 1, &quot;0&quot;, &quot;&quot;)) + hexValue2.Value\n      negativeBigInt = BigInteger.Parse(hexString, NumberStyles.HexNumber)      \n      Console.WriteLine(&quot;Converted {0} to {1} and back to {2}.&quot;, \n                        negativeNumber, hexValue2.Value, negativeBigInt)\n\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Converted 4039543321 to F0C68A19 and back to 4039543321.\n&#39;       Converted -255423975 to f0c68a19 and back to -255423975.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Class.ByteAndHex#6\">using System;\nusing System.Globalization;\nusing System.Numerics;\n\npublic struct HexValue\n{\n   public int Sign;\n   public string Value;\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      uint positiveNumber = 4039543321;\n      int negativeNumber = -255423975;\n\n      // Convert the numbers to hex strings.\n      HexValue hexValue1, hexValue2;\n      hexValue1.Value = positiveNumber.ToString(&quot;X&quot;);\n      hexValue1.Sign = Math.Sign(positiveNumber);\n      \n      hexValue2.Value = Convert.ToString(negativeNumber, 16);\n      hexValue2.Sign = Math.Sign(negativeNumber);\n      \n      // Round-trip the hexadecimal values to BigInteger values.\n      string hexString;\n      BigInteger positiveBigInt, negativeBigInt;\n      \n      hexString = (hexValue1.Sign == 1 ? &quot;0&quot; : &quot;&quot;) + hexValue1.Value;\n      positiveBigInt = BigInteger.Parse(hexString, NumberStyles.HexNumber);      \n      Console.WriteLine(&quot;Converted {0} to {1} and back to {2}.&quot;, \n                        positiveNumber, hexValue1.Value, positiveBigInt);\n\n      hexString = (hexValue2.Sign == 1 ? &quot;0&quot; : &quot;&quot;) + hexValue2.Value;\n      negativeBigInt = BigInteger.Parse(hexString, NumberStyles.HexNumber);      \n      Console.WriteLine(&quot;Converted {0} to {1} and back to {2}.&quot;, \n                        negativeNumber, hexValue2.Value, negativeBigInt);\n   }\n}\n// The example displays the following output:\n//       Converted 4039543321 to F0C68A19 and back to 4039543321.\n//       Converted -255423975 to f0c68a19 and back to -255423975.\n</code></pre>\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger__ctor_System_Byte___\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">BigInteger(Byte[])</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> structure using the values in a byte array.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public BigInteger (byte[] value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An array of byte values in little-endian order.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>value</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The individual bytes in the <code>value</code> array should be in little-endian order, from lowest-order byte to highest-order byte. For example, the numeric value 1,000,000,000,000 is represented as shown in the following table:  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Hexadecimal string</td>\n<td>E8D4A51000</td>\n</tr>\n<tr>\n<td>Byte array (lowest index first)</td>\n<td>00 10 A5 D4 E8 00</td>\n</tr>\n</tbody>\n</table>\n<p> Most methods that convert numeric values to byte arrays, such as <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_ToByteArray_\" data-linktype=\"relative-path\">ToByteArray</a> and <a class=\"xref\" href=\"system.bitconverter#System_BitConverter_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a>, return byte arrays in little-endian order.  </p>\n<p> The constructor expects positive values in the byte array to use sign-and-magnitude representation, and negative values to use two&#39;s complement representation. In other words, if the highest-order bit of the highest-order byte in <code>value</code> is set, the resulting <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value is negative. Depending on the source of the byte array, this may cause a positive value to be misinterpreted as a negative value. Byte arrays are typically generated in the following ways:  </p>\n<ul>\n<li><p>By calling the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_ToByteArray_\" data-linktype=\"relative-path\">ToByteArray</a> method. Because this method returns a byte array with the highest-order bit of the highest-order byte in the array set to zero for positive values, there is no chance of misinterpreting a positive value as negative. Unmodified byte arrays created by the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_ToByteArray_\" data-linktype=\"relative-path\">ToByteArray</a> method always successfully round-trip when they are passed to the BigInteger constructor.  </p>\n</li>\n<li><p>By calling the <a class=\"xref\" href=\"system.bitconverter#System_BitConverter_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method and passing it a signed integer as a parameter. Because signed integers handle both sign-and-magnitude representation and two&#39;s complement representation, there is no chance of misinterpreting a positive value as negative.  </p>\n</li>\n<li><p>By calling the <a class=\"xref\" href=\"system.bitconverter#System_BitConverter_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method and passing it an unsigned integer as a parameter. Because unsigned integers are represented by their magnitude only, positive values can be misinterpreted as negative values. To prevent this misinterpretation, you can add a zero-byte value to the end of the array. The example in the next section provides an illustration.  </p>\n</li>\n<li><p>By creating a byte array either dynamically or statically without necessarily calling any of the previous methods, or by modifying an existing byte array. To prevent positive values from being misinterpreted as negative values, you can add a zero-byte value to the end of the array.  </p>\n<p>If <code>value</code> is an empty <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> array, the new <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> object is initialized to a value of <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Zero_\" data-linktype=\"relative-path\">Zero</a>. If <code>value</code> is <code>null</code>, the constructor throws an <a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a>.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger__ctor_System_Decimal_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">BigInteger(Decimal)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> structure using a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public BigInteger (decimal value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A decimal number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The result of calling this constructor is identical to explicitly assigning a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value to a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> variable.  </p>\n<p> Calling this constructor can cause data loss; any fractional part of <code>value</code> is truncated when instantiating a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger__ctor_System_Double_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">BigInteger(Double)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> structure using a double-precision floating-point value.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public BigInteger (double value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A double-precision floating-point value.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The value of <code>value</code> is <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>.  </p>\n<p> -or-  </p>\n<p> The value of <code>value</code> is <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>.  </p>\n<p> -or-  </p>\n<p> The value of <code>value</code> is <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Any fractional part of the <code>value</code> parameter is truncated when instantiating a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> object.  </p>\n<p> Because of the lack of precision of the <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> data type, calling this constructor can cause data loss.  </p>\n<p> The <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value that results from calling this constructor is identical to the value that results from explicitly assigning a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> value to a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger__ctor_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">BigInteger(Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> structure using a 32-bit signed integer value.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public BigInteger (int value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A 32-bit signed integer.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>There is no loss of precision when instantiating a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> object by using this constructor.  </p>\n<p> The <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value that results from calling this constructor is identical to the value that results from assigning an <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> value to a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> structure does not include constructors with a parameter of type <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>, <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a>, <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>, or <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a>. However, the <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> type supports the implicit conversion of 8-bit and 16-bit signed and unsigned integers to signed 32-bit integers. As a result, this constructor is called if <code>value</code> is any one of these four integral types.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger__ctor_System_Int64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">BigInteger(Int64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> structure using a 64-bit signed integer value.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public BigInteger (long value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A 64-bit signed integer.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>There is no loss of precision when instantiating a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> object by using this constructor.  </p>\n<p> The <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value that results from calling this constructor is identical to the value that results from assigning an <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> value to a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger__ctor_System_Single_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">BigInteger(Single)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> structure using a single-precision floating-point value.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public BigInteger (float value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A single-precision floating-point value.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The value of <code>value</code> is <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>.  </p>\n<p> -or-  </p>\n<p> The value of <code>value</code> is <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>.  </p>\n<p> -or-  </p>\n<p> The value of <code>value</code> is <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Any fractional part of the <code>value</code> parameter is truncated when instantiating a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> object.  </p>\n<p> Because of the lack of precision of the <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> data type, calling this constructor can result in data loss.  </p>\n<p> The <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value that results from calling this constructor is identical to the value that results from explicitly assigning a <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value to a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger__ctor_System_UInt32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">BigInteger(UInt32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> structure using an unsigned 32-bit integer value.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public BigInteger (uint value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An unsigned 32-bit integer value.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>There is no loss of precision when instantiating a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> using this constructor.  </p>\n<p> The <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value that results from calling this constructor is identical to the value that results from assigning a <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a> value to a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger__ctor_System_UInt64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">BigInteger(UInt64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> structure with an unsigned 64-bit integer value.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public BigInteger (ulong value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An unsigned 64-bit integer.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>There is no loss of precision when instantiating a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> using this constructor.  </p>\n<p> The <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value that results from calling this constructor is identical to the value that results from assigning a <a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a> value to a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_IsEven\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsEven</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Indicates whether the value of the current <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> object is an even number.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsEven { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the value of the <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> object is an even number; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This property is a convenience feature that indicates whether a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value is evenly divisible by two. It is equivalent to the following expression:  </p>\n<p> [C#]  </p>\n<pre><code>value % 2 == 0;  \n</code></pre><p> [Visual Basic]  </p>\n<pre><code>value Mod 2 = 0  \n</code></pre><p> If the value of the current <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> object is <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Zero_\" data-linktype=\"relative-path\">Zero</a>, the property returns <code>true</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_IsOne\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsOne</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Indicates whether the value of the current <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> object is <span class=\"xref\">stem.Numerics.BigInteger.One*</span>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsOne { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the value of the <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> object is <span class=\"xref\">stem.Numerics.BigInteger.One*</span>; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This property offers significantly better performance than other comparisons with one, such as <code>thisBigInteger.Equals(BigInteger.One)</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_IsPowerOfTwo\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsPowerOfTwo</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Indicates whether the value of the current <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> object is a power of two.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsPowerOfTwo { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the value of the <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> object is a power of two; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This property determines whether a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value has a single non-zero bit set. This means that it returns <code>true</code> if the value of the current <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> object is 1 (that is, 2<sup>0</sup>) or any greater power of two. It returns <code>false</code> if the value of the current <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> object is 0.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_IsZero\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsZero</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Indicates whether the value of the current <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> object is <span class=\"xref\">stem.Numerics.BigInteger.Zero*</span>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsZero { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the value of the <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> object is <span class=\"xref\">stem.Numerics.BigInteger.Zero*</span>; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This property offers significantly better performance than <code>BigInteger.Equals(BigInteger.Zero)</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_MinusOne\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">MinusOne</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that represents the number negative one (-1).</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Numerics.BigInteger MinusOne { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An integer whose value is negative one (-1).</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The MinusOne property is used to compare a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value to -1 or to assign -1 to a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_One\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">One</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that represents the number one (1).</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Numerics.BigInteger One { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object whose value is one (1).</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The One property is usually used to compare a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value to 1 or to assign 1 to a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_Sign\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Sign</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a number that indicates the sign (negative, positive, or zero) of the current <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int Sign { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A number that indicates the sign of the <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> object, as shown in the following table.  </p>\n <table><thead><tr><th> Number<br>\n </th><th> Description<br>\n </th></tr></thead><tbody><tr><td> -1<br>\n </td><td> The value of this object is negative.<br>\n </td></tr><tr><td> 0<br>\n </td><td> The value of this object is 0 (zero).<br>\n </td></tr><tr><td> 1<br>\n </td><td> The value of this object is positive.<br>\n </td></tr></tbody></table>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Sign property is equivalent to the <a class=\"xref\" href=\"system.math#System_Math_Sign_\" data-linktype=\"relative-path\">Sign</a> method for the primitive numeric types.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_Zero\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Zero</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that represents the number 0 (zero).</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Numerics.BigInteger Zero { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An integer whose value is 0 (zero).</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> object returned by this property provides a convenient source of a zero value for use in assignments and comparisons.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_Abs_System_Numerics_BigInteger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Abs(BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the absolute value of a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Numerics.BigInteger Abs (System.Numerics.BigInteger value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The absolute value of <code>value</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The absolute value of a number is that number without its sign, as shown in the following table.  </p>\n<table>\n<thead>\n<tr>\n<th><code>value</code> parameter</th>\n<th>Return value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>value</code> &gt;= 0</td>\n<td><code>value</code></td>\n</tr>\n<tr>\n<td><code>value</code> &lt; 0</td>\n<td><code>value</code> * -1</td>\n</tr>\n</tbody>\n</table>\n<p> The Abs method is equivalent to the <a class=\"xref\" href=\"system.math#System_Math_Abs_\" data-linktype=\"relative-path\">Abs</a> method for the primitive numeric types.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_Add_System_Numerics_BigInteger_System_Numerics_BigInteger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Add(BigInteger,BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Adds two <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values and returns the result.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Numerics.BigInteger Add (System.Numerics.BigInteger left, System.Numerics.BigInteger right);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>left</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first value to add.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>right</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second value to add.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The sum of <code>left</code> and <code>right</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Languages that do not support operator overloading or custom operators can use the Add method to perform addition using <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values.  </p>\n<p> The Add method is a useful substitute for the addition operator when instantiating a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> variable by assigning it a sum that results from addition, as shown in the following example.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.OperationMethods#2\">      // The statement:\n      //    BigInteger number = Int64.MaxValue + Int32.MaxValue;\n      // produces compiler error CS0220: The operation overflows at compile time in checked mode.\n      // The alternative:\n      BigInteger number = BigInteger.Add(Int64.MaxValue, Int32.MaxValue);\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.OperationMethods#2\">      &#39; The statement\n      &#39;    Dim number As BigInteger = Int64.MaxValue + Int32.MaxValue\n      &#39; produces compiler error BC30439: Constant expression not representable in type &#39;Long&#39;.\n      &#39; The alternative:\n      Dim number As BigInteger = BigInteger.Add(Int64.MaxValue, Int32.MaxValue)\n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_Compare_System_Numerics_BigInteger_System_Numerics_BigInteger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Compare(BigInteger,BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Compares two <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values and returns an integer that indicates whether the first value is less than, equal to, or greater than the second value.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static int Compare (System.Numerics.BigInteger left, System.Numerics.BigInteger right);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>left</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>right</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A signed integer that indicates the relative values of <code>left</code> and <code>right</code>, as shown in the following table.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Condition<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td><code>left</code> is less than <code>right</code>.<br>\n </td></tr><tr><td> Zero<br>\n </td><td><code>left</code> equals <code>right</code>.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td><code>left</code> is greater than <code>right</code>.<br>\n </td></tr></tbody></table>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Although the <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> type has no fixed range, comparisons of <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values are not characterized by the lack of precision that characterizes the comparison of floating-point numbers. The following example compares two <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values that differ by one and that each have 1,896 digits. The Compare method correctly reports that the two values are not equal.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Compare#1\">      BigInteger number1 = BigInteger.Pow(Int64.MaxValue, 100);\n      BigInteger number2 = number1 + 1;\n      string relation = &quot;&quot;;\n      switch (BigInteger.Compare(number1, number2))\n      {\n         case -1:\n            relation = &quot;&lt;&quot;;\n            break;\n         case 0:\n            relation = &quot;=&quot;;\n            break;\n         case 1:\n            relation = &quot;&gt;&quot;;\n            break;\n      }\n      Console.WriteLine(&quot;{0} {1} {2}&quot;, number1, relation, number2);\n      // The example displays the following output:\n      //    3.0829940252776347122742186219E+1896 &lt; 3.0829940252776347122742186219E+1896\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Compare#1\">      Dim number1 As BigInteger = BigInteger.Pow(Int64.MaxValue, 100)\n      Dim number2 As BigInteger = number1 + 1\n      Dim relation As String = &quot;&quot;\n      Select Case BigInteger.Compare(number1, number2)\n         Case -1\n            relation = &quot;&lt;&quot;\n         Case 0\n            relation = &quot;=&quot;\n         Case 1\n            relation = &quot;&gt;&quot;\n      End Select            \n      Console.WriteLine(&quot;{0} {1} {2}&quot;, number1, relation, number2)\n      &#39; The example displays the following output:\n      &#39;    3.0829940252776347122742186219E+1896 &lt; 3.0829940252776347122742186219E+1896\n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_CompareTo_System_Int64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CompareTo(Int64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Compares this instance to a signed 64-bit integer and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the signed 64-bit integer.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int CompareTo (long other);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>other</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The signed 64-bit integer to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A signed integer value that indicates the relationship of this instance to <code>other</code>, as shown in the following table.  </p>\n <table><thead><tr><th> Return value<br>\n </th><th> Description<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td> The current instance is less than <code>other</code>.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> The current instance equals <code>other</code>.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td> The current instance is greater than <code>other</code>.<br>\n </td></tr></tbody></table>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If <code>other</code> is a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>, <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a>, <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>, <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>, <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a>, or <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a> value, it is implicitly converted to an <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> value when the CompareTo method is called.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_CompareTo_System_Numerics_BigInteger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CompareTo(BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Compares this instance to a second <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int CompareTo (System.Numerics.BigInteger other);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>other</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The object to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A signed integer value that indicates the relationship of this instance to <code>other</code>, as shown in the following table.  </p>\n <table><thead><tr><th> Return value<br>\n </th><th> Description<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td> The current instance is less than <code>other</code>.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> The current instance equals <code>other</code>.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td> The current instance is greater than <code>other</code>.<br>\n </td></tr></tbody></table>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This overload of the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> method implements the <a class=\"xref\" href=\"system.icomparable-1#System_IComparable_1_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> method. It is used by generic collection objects to order the items in the collection.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_CompareTo_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CompareTo(Object)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int CompareTo (object obj);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>obj</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The object to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A signed integer that indicates the relationship of the current instance to the <code>obj</code> parameter, as shown in the following table.  </p>\n <table><thead><tr><th> Return value<br>\n </th><th> Description<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td> The current instance is less than <code>obj</code>.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> The current instance equals <code>obj</code>.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td> The current instance is greater than <code>obj</code>, or the <code>obj</code> parameter is <code>null</code>.<br>\n </td></tr></tbody></table>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>obj</code> is not a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This overload of the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> method implements the <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> method. It is used by non-generic collection objects to order the items in the collection.  </p>\n<p> The <code>obj</code> parameter must be one of the following:  </p>\n<ul>\n<li><p>An object whose run-time type is <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a>.  </p>\n</li>\n<li><p>An <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> variable whose value is <code>null</code>. If the value of the <code>obj</code> parameter is <code>null</code>, the method returns 1, which indicates that that the current instance is greater than <code>obj</code>.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_CompareTo_System_UInt64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CompareTo(UInt64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Compares this instance to an unsigned 64-bit integer and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the unsigned 64-bit integer.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int CompareTo (ulong other);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>other</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The unsigned 64-bit integer to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A signed integer that indicates the relative value of this instance and <code>other</code>, as shown in the following table.  </p>\n <table><thead><tr><th> Return value<br>\n </th><th> Description<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td> The current instance is less than <code>other</code>.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> The current instance equals <code>other</code>.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td> The current instance is greater than <code>other</code>.<br>\n </td></tr></tbody></table>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_Divide_System_Numerics_BigInteger_System_Numerics_BigInteger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Divide(BigInteger,BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Divides one <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value by another and returns the result.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Numerics.BigInteger Divide (System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>dividend</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value to be divided.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>divisor</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value to divide by.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The quotient of the division.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.dividebyzeroexception\" data-linktype=\"relative-path\">DivideByZeroException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>divisor</code> is 0 (zero).</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Divide method performs integer division; any remainder that results from the division is discarded. To perform integer division while preserving the remainder, call the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_DivRem_\" data-linktype=\"relative-path\">DivRem</a> method. To retrieve only the remainder, call the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Remainder_\" data-linktype=\"relative-path\">Remainder</a> method.  </p>\n<p> The Divide method can be used by languages that do not support operator overloading. Its behavior is identical to division using the division operator.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_DivRem_System_Numerics_BigInteger_System_Numerics_BigInteger_System_Numerics_BigInteger__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">DivRem(BigInteger,BigInteger,BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Divides one <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value by another, returns the result, and returns the remainder in an output parameter.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Numerics.BigInteger DivRem (System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor, out System.Numerics.BigInteger remainder);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>dividend</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value to be divided.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>divisor</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value to divide by.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>remainder</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>When this method returns, contains a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value that represents the remainder from the division. This parameter is passed uninitialized.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The quotient of the division.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.dividebyzeroexception\" data-linktype=\"relative-path\">DivideByZeroException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>divisor</code> is 0 (zero).</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method preserves both the quotient and the remainder that results from integer division. If you are not interested in the remainder, use the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Divide_\" data-linktype=\"relative-path\">Divide</a> method or the division operator; if you are only interested in the remainder, use the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Remainder_\" data-linktype=\"relative-path\">Remainder</a> method.  </p>\n<p> The sign of the returned <code>remainder</code> value is the same as the sign of the <code>dividend</code> parameter.  </p>\n<p> The behavior of the DivRem method is identical to that of the <a class=\"xref\" href=\"system.math#System_Math_DivRem_\" data-linktype=\"relative-path\">DivRem</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_Equals_System_Int64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Equals(Int64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether the current instance and a signed 64-bit integer have the same value.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool Equals (long other);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>other</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The signed 64-bit integer value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the signed 64-bit integer and the current instance have the same value; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If <code>other</code> is a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>, <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a>, <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>, <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>, <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a>, or <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a> value, it is implicitly converted to an <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> value when the method is called.  </p>\n<p> To determine the relationship between the two objects instead of just testing for equality, call the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_CompareTo_System_Int64_\" data-linktype=\"relative-path\">System.Numerics.BigInteger.CompareTo(Int64)</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_Equals_System_Numerics_BigInteger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Equals(BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether the current instance and a specified <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> object have the same value.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool Equals (System.Numerics.BigInteger other);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>other</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The object to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if this <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> object and <code>other</code> have the same value; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method implements the <a class=\"xref\" href=\"system.iequatable-1\" data-linktype=\"relative-path\">IEquatable&lt;T&gt;</a> interface and performs slightly better than <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a> because it does not have to convert the <code>other</code> parameter to a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> object.  </p>\n<p> To determine the relationship between the two <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> objects instead of just testing for equality, call the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_CompareTo_System_Numerics_BigInteger_\" data-linktype=\"relative-path\">System.Numerics.BigInteger.CompareTo(BigInteger)</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_Equals_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Equals(Object)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether the current instance and a specified object have the same value.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override bool Equals (object obj);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>obj</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The object to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the <code>obj</code> argument is a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> object, and its value is equal to the value of the current <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> instance; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If the <code>obj</code> argument is not a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value, the method returns <code>false</code>. The method returns <code>true</code> only if <code>obj</code> is a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> instance whose value is equal to the current instance.  </p>\n<p> To determine the relationship between the two objects instead of just testing for equality, call the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_CompareTo_System_Object_\" data-linktype=\"relative-path\">CompareTo(Object)</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_Equals_System_UInt64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Equals(UInt64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether the current instance and an unsigned 64-bit integer have the same value.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool Equals (ulong other);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>other</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The unsigned 64-bit integer to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the current instance and the unsigned 64-bit integer have the same value; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>To determine the relationship between the two objects instead of just testing for equality, call the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_CompareTo_System_UInt64_\" data-linktype=\"relative-path\">System.Numerics.BigInteger.CompareTo(UInt64)</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_GetHashCode\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetHashCode()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the hash code for the current <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override int GetHashCode ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A 32-bit signed integer hash code.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_GreatestCommonDivisor_System_Numerics_BigInteger_System_Numerics_BigInteger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GreatestCommonDivisor(BigInteger,BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Finds the greatest common divisor of two <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Numerics.BigInteger GreatestCommonDivisor (System.Numerics.BigInteger left, System.Numerics.BigInteger right);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>left</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first value.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>right</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second value.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The greatest common divisor of <code>left</code> and <code>right</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The greatest common divisor is the largest number into which the two <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values can be divided without returning a remainder.  </p>\n<p> If the <code>left</code> and <code>right</code> parameters are non-zero numbers, the method always returns at least a value of 1 because all numbers can be divided by 1. If either parameter is zero, the method returns the absolute value of the non-zero parameter. If both values are zero, the method returns zero.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Computing the greatest common divisor of very large values of <code>left</code> and <code>right</code> can be a very time-consuming operation.  </p>\n</div>\n<p> The value returned by the GreatestCommonDivisor method is always positive regardless of the sign of the <code>left</code> and <code>right</code> parameters.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_Log_System_Numerics_BigInteger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Log(BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the natural (base <code>e</code>) logarithm of a specified number.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static double Log (System.Numerics.BigInteger value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number whose logarithm is to be found.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The natural (base <code>e</code>) logarithm of <code>value</code>, as shown in the table in the Remarks section.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The natural log of <code>value</code> is out of range of the <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> data type.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>value</code> parameter is specified as a base 10 number.  </p>\n<p> The precise return value of this method depends on the sign of <code>value</code>, as the following table shows.  </p>\n<table>\n<thead>\n<tr>\n<th>Sign of <code>value</code> parameter</th>\n<th>Return value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Positive</td>\n<td>The natural logarithm of <code>value</code>; that is, ln <code>value</code>, or log e<code>value</code>.</td>\n</tr>\n<tr>\n<td>Zero</td>\n<td><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>.</td>\n</tr>\n<tr>\n<td>Negative</td>\n<td><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>.</td>\n</tr>\n</tbody>\n</table>\n<p> To calculate the base 10 logarithm of a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value, call the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Log10_\" data-linktype=\"relative-path\">Log10</a> method. To calculate the logarithm of a number in another base, call the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Log_System_Numerics_BigInteger_System_Double_\" data-linktype=\"relative-path\">Log(BigInteger,Double)</a> method.  </p>\n<p> You can find the square root of a number by calling the Log method along with the <a class=\"xref\" href=\"system.math#System_Math_Exp_\" data-linktype=\"relative-path\">Exp</a> method. Note that the result is <a class=\"xref\" href=\"system.double#System_Double_PositiveInfinity\" data-linktype=\"relative-path\">System.Double.PositiveInfinity</a> if the result is greater than <a class=\"xref\" href=\"system.double#System_Double_MaxValue\" data-linktype=\"relative-path\">System.Double.MaxValue</a>. The following example calculates the square root of each element in an array of <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Log#1\">Imports System.Numerics\n\nModule Example\n   Public Sub Main()\n      Dim values() As BigInteger = { 2, 100, BigInteger.Pow(1000, 100), \n                                     BigInteger.Pow(2, 64) }\n      For Each value In values                                    \n         Console.WriteLine(&quot;The square root of {0} is {1}&quot;, value, \n                           Math.Exp(BigInteger.Log(value) / 2))\n      Next                                     \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    The square root of 2 is 1.41421356237309\n&#39;    The square root of 100 is 10\n&#39;    The square root of 1000000000000000000000000000000000000000000000000000000000000\n&#39;    00000000000000000000000000000000000000000000000000000000000000000000000000000000\n&#39;    00000000000000000000000000000000000000000000000000000000000000000000000000000000\n&#39;    00000000000000000000000000000000000000000000000000000000000000000000000000000000\n&#39;     is 9.99999999999988E+149\n&#39;    The square root of 18446744073709551616 is 4294967296\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Log#1\">using System;\nusing System.Numerics;\n\npublic class Example\n{\n   public static void Main()\n   {\n      BigInteger[] values = { 2, 100, BigInteger.Pow(1000, 100), \n                              BigInteger.Pow(2, 64) };\n      foreach (var value in values)                                    \n         Console.WriteLine(&quot;The square root of {0} is {1}&quot;, value, \n                           Math.Exp(BigInteger.Log(value) / 2));\n   }\n}\n// The example displays the following output:\n//    The square root of 2 is 1.41421356237309\n//    The square root of 100 is 10\n//    The square root of 1000000000000000000000000000000000000000000000000000000000000\n//    00000000000000000000000000000000000000000000000000000000000000000000000000000000\n//    00000000000000000000000000000000000000000000000000000000000000000000000000000000\n//    00000000000000000000000000000000000000000000000000000000000000000000000000000000\n//     is 9.99999999999988E+149\n//    The square root of 18446744073709551616 is 4294967296\n</code></pre><p> This method corresponds to the <a class=\"xref\" href=\"system.math#System_Math_Log_System_Double_\" data-linktype=\"relative-path\">System.Math.Log(Double)</a> method for the primitive numeric types.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_Log_System_Numerics_BigInteger_System_Double_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Log(BigInteger,Double)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the logarithm of a specified number in a specified base.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static double Log (System.Numerics.BigInteger value, double baseValue);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A number whose logarithm is to be found.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>baseValue</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The base of the logarithm.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The base <code>baseValue</code> logarithm of <code>value</code>, as shown in the table in the Remarks section.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The log of <code>value</code> is out of range of the <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> data type.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>value</code> and <code>baseValue</code> parameters are specified as base 10 numbers.  </p>\n<p> The precise return value of the method depends on the sign of <code>value</code> and on the sign and value of <code>baseValue</code>, as the following table shows.  </p>\n<table>\n<thead>\n<tr>\n<th><code>value</code> parameter</th>\n<th><code>baseValue</code> parameter</th>\n<th>Return value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>value</code> &gt; 0</td>\n<td>(0 &lt; <code>baseValue</code> &lt; 1) -or-(<code>baseValue</code> &gt; 1)</td>\n<td>logbaseValue(<code>value</code>)</td>\n</tr>\n<tr>\n<td><code>value</code> &lt; 0</td>\n<td>(any value)</td>\n<td><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">System.Double</a></td>\n</tr>\n<tr>\n<td>(any value)</td>\n<td><code>baseValue</code> &lt; 0</td>\n<td><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">System.Double</a></td>\n</tr>\n<tr>\n<td><code>value</code> != 1</td>\n<td><code>baseValue</code> = 0</td>\n<td><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">System.Double</a></td>\n</tr>\n<tr>\n<td><code>value</code> != 1</td>\n<td><code>baseValue</code> = <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">System.Double</a></td>\n<td><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">System.Double</a></td>\n</tr>\n<tr>\n<td>(any value)</td>\n<td><code>baseValue</code> = <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">System.Double</a></td>\n<td><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">System.Double</a></td>\n</tr>\n<tr>\n<td>(any value)</td>\n<td><code>baseValue</code> = 1</td>\n<td><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">System.Double</a></td>\n</tr>\n<tr>\n<td><code>value</code> = 0</td>\n<td>0 &lt; <code>baseValue</code> &lt; 1</td>\n<td><a class=\"xref\" href=\"system.double#System_Double_PositiveInfinity\" data-linktype=\"relative-path\">System.Double.PositiveInfinity</a></td>\n</tr>\n<tr>\n<td><code>value</code> = 0</td>\n<td><code>baseValue</code> &gt; 1</td>\n<td><a class=\"xref\" href=\"system.double#System_Double_PositiveInfinity\" data-linktype=\"relative-path\">System.Double.PositiveInfinity</a></td>\n</tr>\n<tr>\n<td><code>value</code> = 1</td>\n<td><code>baseValue</code> = 0</td>\n<td>0</td>\n</tr>\n<tr>\n<td><code>value</code> = 1</td>\n<td><code>baseValue</code> = <a class=\"xref\" href=\"system.double#System_Double_PositiveInfinity\" data-linktype=\"relative-path\">System.Double.PositiveInfinity</a></td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<p> To calculate the base 10 logarithm of a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value, call the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Log10_\" data-linktype=\"relative-path\">Log10</a> method. To calculate the natural logarithm of a number, call the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Log_System_Numerics_BigInteger_\" data-linktype=\"relative-path\">Log(BigInteger)</a> method.  </p>\n<p> This method corresponds to the <a class=\"xref\" href=\"system.math#System_Math_Log_\" data-linktype=\"relative-path\">Log</a> method for the primitive numeric types.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_Log10_System_Numerics_BigInteger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Log10(BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the base 10 logarithm of a specified number.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static double Log10 (System.Numerics.BigInteger value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A number whose logarithm is to be found.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The base 10 logarithm of <code>value</code>, as shown in the table in the Remarks section.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The base 10 log of <code>value</code> is out of range of the <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> data type.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>value</code> parameter is specified as a base 10 number.  </p>\n<p> The precise return value of the method depends on the sign of <code>value</code>, as the following table shows.  </p>\n<table>\n<thead>\n<tr>\n<th>Sign of value parameter</th>\n<th>Return value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Positive</td>\n<td>The base 10 log of <code>value</code>; that is, log10<code>value</code>.</td>\n</tr>\n<tr>\n<td>Zero</td>\n<td><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">System.Double</a>.</td>\n</tr>\n<tr>\n<td>Negative</td>\n<td><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">System.Double</a>.</td>\n</tr>\n</tbody>\n</table>\n<p> To calculate the natural logarithm of a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value, call the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Log_System_Numerics_BigInteger_\" data-linktype=\"relative-path\">System.Numerics.BigInteger.Log(BigInteger)</a> method. To calculate the logarithm of a number in another base, call the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Log_System_Numerics_BigInteger_System_Double_\" data-linktype=\"relative-path\">System.Numerics.BigInteger.Log(BigInteger,Double)</a> method.  </p>\n<p> This method corresponds to the <a class=\"xref\" href=\"system.math#System_Math_Log10_\" data-linktype=\"relative-path\">Log10</a> method for the primitive numeric types.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_Max_System_Numerics_BigInteger_System_Numerics_BigInteger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Max(BigInteger,BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the larger of two <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Numerics.BigInteger Max (System.Numerics.BigInteger left, System.Numerics.BigInteger right);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>left</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>right</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <code>left</code> or <code>right</code> parameter, whichever is larger.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method corresponds to the <a class=\"xref\" href=\"system.math#System_Math_Max_\" data-linktype=\"relative-path\">Max</a> method for primitive numeric types.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_Min_System_Numerics_BigInteger_System_Numerics_BigInteger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Min(BigInteger,BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the smaller of two <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Numerics.BigInteger Min (System.Numerics.BigInteger left, System.Numerics.BigInteger right);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>left</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>right</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <code>left</code> or <code>right</code> parameter, whichever is smaller.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method corresponds to the <a class=\"xref\" href=\"system.math#System_Math_Min_\" data-linktype=\"relative-path\">Min</a> method for primitive numeric types.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_ModPow_System_Numerics_BigInteger_System_Numerics_BigInteger_System_Numerics_BigInteger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ModPow(BigInteger,BigInteger,BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Performs modulus division on a number raised to the power of another number.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Numerics.BigInteger ModPow (System.Numerics.BigInteger value, System.Numerics.BigInteger exponent, System.Numerics.BigInteger modulus);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number to raise to the <code>exponent</code> power.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>exponent</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The exponent to raise <code>value</code> by.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>modulus</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number by which to divide <code>value</code> raised to the <code>exponent</code> power.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The remainder after dividing <code>value</code><sup>exponent</sup> by <code>modulus</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.dividebyzeroexception\" data-linktype=\"relative-path\">DivideByZeroException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>modulus</code> is zero.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>exponent</code> is negative.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The ModPow method evaluates the following expression:  </p>\n<p> (baseValue ^ exponent) Mod modulus  </p>\n<p> To perform exponentiation on <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values without modulus division, use the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Pow_\" data-linktype=\"relative-path\">Pow</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_Multiply_System_Numerics_BigInteger_System_Numerics_BigInteger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Multiply(BigInteger,BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the product of two <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Numerics.BigInteger Multiply (System.Numerics.BigInteger left, System.Numerics.BigInteger right);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>left</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first number to multiply.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>right</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second number to multiply.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The product of the <code>left</code> and <code>right</code> parameters.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Multiply method is implemented for languages that do not support operator overloading. Its behavior is identical to multiplication using the multiplication operator. In addition, the Multiply method is a useful substitute for the multiplication operator when instantiating a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> variable by assigning it a product that results from multiplication, as shown in the following example.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.OperationMethods#1\">      // The statement\n      //    BigInteger number = Int64.MaxValue * 3;\n      // produces compiler error CS0220: The operation overflows at compile time in checked mode.\n      // The alternative:\n      BigInteger number = BigInteger.Multiply(Int64.MaxValue, 3);\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.OperationMethods#1\">      &#39; The statement\n      &#39;    Dim number As BigInteger = Int64.MaxValue * 3\n      &#39; produces compiler error BC30439: Constant expression not representable in type &#39;Long&#39;.\n      &#39; The alternative:\n      Dim number As BigInteger = BigInteger.Multiply(Int64.MaxValue, 3)\n</code></pre><p> If necessary, this method automatically performs implicit conversion of other integral types to <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> objects. This is illustrated in the example in the next section, where the Multiply method is passed two <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_Negate_System_Numerics_BigInteger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Negate(BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Negates a specified <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Numerics.BigInteger Negate (System.Numerics.BigInteger value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value to negate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The result of the <code>value</code> parameter multiplied by negative one (-1).</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Negation obtains the additive inverse of a number. The additive inverse of a number is a number that produces a value of zero when it is added to the original number.  </p>\n<p> The Negate method is implemented for languages that do not support custom operators. Its behavior is identical to negation using the unary negation operator. In addition, the Negate method is a useful substitute for the negation operator when instantiating a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> variable, as shown in the following example.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.OperationMethods#4\">      // The statement\n      //    BigInteger number = -Int64.MinValue;\n      // produces compiler error CS0220: The operation overflows at compile time in checked mode.\n      // The alternative:\n      BigInteger number = BigInteger.Negate(Int64.MinValue);     \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.OperationMethods#4\">      &#39; The statement\n      &#39;    Dim number As BigInteger = -Int64.MinValue\n      &#39; produces compiler error BC30439: Constant expression not representable in type &#39;Long&#39;.\n      &#39; The alternative:\n      Dim number As BigInteger = BigInteger.Negate(Int64.MinValue)\n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_Parse_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Parse(String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Converts the string representation of a number to its <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> equivalent.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Numerics.BigInteger Parse (string value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A string that contains the number to convert.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A value that is equivalent to the number specified in the <code>value</code> parameter.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>value</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>value</code> is not in the correct format.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>value</code> parameter should be the string representation of a number in the following form.  </p>\n<p> [<em>ws</em>][<em>sign</em>]<em>digits</em>[<em>ws</em>]  </p>\n<p> Elements in square brackets ([ and ]) are optional. The following table describes each element.  </p>\n<table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>ws</em></td>\n<td>Optional white space.</td>\n</tr>\n<tr>\n<td><em>sign</em></td>\n<td>An optional sign. Valid sign characters are determined by the <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NegativeSign_\" data-linktype=\"relative-path\">NegativeSign</a> and <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_PositiveSign_\" data-linktype=\"relative-path\">PositiveSign</a> properties of the current culture.</td>\n</tr>\n<tr>\n<td><em>digits</em></td>\n<td>A sequence of digits ranging from 0 to 9. Any leading zeros are ignored.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"NOTE\"><h5>Note</h5><p> The string specified by the <code>value</code> parameter is interpreted by using the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> style. It cannot contain any group separators or decimal separator, and it cannot have a decimal portion.  </p>\n</div>\n<p> The <code>value</code> parameter is parsed by using the formatting information in a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">System.Globalization.NumberFormatInfo</a> object that is initialized for the current system culture. For more information, see <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrentInfo_\" data-linktype=\"relative-path\">CurrentInfo</a>. To parse a string by using the formatting information of a specific culture, use the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Parse_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">Parse(String,IFormatProvider)</a> method.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> If you use the Parse method to round-trip the string representation of a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value that was output by the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_ToString_\" data-linktype=\"relative-path\">ToString</a> method, you should use the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_ToString_System_String_\" data-linktype=\"relative-path\">System.Numerics.BigInteger.ToString(String)</a> method with the &quot;R&quot; format specifier to generate the string representation of the <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value. Otherwise, the string representation of the <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> preserves only the 50 most significant digits of the original value, and data may be lost when you use the Parse method to restore the <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_Parse_System_String_System_Globalization_NumberStyles_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Parse(String,NumberStyles)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Converts the string representation of a number in a specified style to its <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> equivalent.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Numerics.BigInteger Parse (string value, System.Globalization.NumberStyles style);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A string that contains a number to convert.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>style</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A bitwise combination of the enumeration values that specify the permitted format of <code>value</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A value that is equivalent to the number specified in the <code>value</code> parameter.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>style</code> is not a <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> value.  </p>\n<p> -or-  </p>\n<p> <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> or <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> flag along with another value.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>value</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>value</code> does not comply with the input pattern specified by <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>style</code> parameter defines the style elements (such as white space, the positive or negative sign symbol, the group separator symbol, or the decimal point symbol) that are allowed in the <code>value</code> parameter for the parse operation to succeed. <code>styles</code> must be a combination of bit flags from the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> enumeration. The <code>style</code> parameter makes this method overload useful when <code>value</code> contains the string representation of a hexadecimal value, when the number system (decimal or hexadecimal) represented by <code>value</code> is known only at run time, or when you want to disallow white space or a sign symbol in <code>value</code>.  </p>\n<p> Depending on the value of <code>style</code>, the <code>value</code> parameter may include the following elements:  </p>\n<p> [<em>ws</em>][<em>$</em>][<em>sign</em>][<em>digits</em>,]<em>digits</em>[.<em>fractional_digits</em>][E[<em>sign</em>]<em>exponential_digits</em>][<em>ws</em>]  </p>\n<p> If <code>style</code> includes <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a>, the <code>value</code> parameter may contain the following elements:  </p>\n<p> [<em>ws</em>]<em>hexdigits</em>[<em>ws</em>]  </p>\n<p> Elements in square brackets ([ and ]) are optional. The following table describes each element.  </p>\n<table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>ws</em></td>\n<td>Optional white space. White space can appear at the start of <code>value</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag, and it can appear at the end of <code>value</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>$</em></td>\n<td>A culture-specific currency symbol. Its position in the string is defined by the <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrencyNegativePattern_\" data-linktype=\"relative-path\">CurrencyNegativePattern</a> and <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrencyPositivePattern_\" data-linktype=\"relative-path\">CurrencyPositivePattern</a> properties of the current culture. The current culture&#39;s currency symbol can appear in <code>value</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>sign</em></td>\n<td>An optional sign. The sign can appear at the start of <code>value</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag, and it can appear at the end of <code>value</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag. Parentheses can be used in <code>value</code> to indicate a negative value if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>digits</em><br><br> <em>fractional_digits</em><br><br> <em>exponential_digits</em></td>\n<td>A sequence of digits from 0 through 9. For <em>fractional_digits</em>, only the digit 0 is valid.</td>\n</tr>\n<tr>\n<td><em>,</em></td>\n<td>A culture-specific group separator symbol. The current culture&#39;s group separator can appear in <code>value</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>.</em></td>\n<td>A culture-specific decimal point symbol. The current culture&#39;s decimal point symbol can appear in <code>value</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag. Only the digit 0 can appear as a fractional digit for the parse operation to succeed; if <em>fractional_digits</em> includes any other digit, a <a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a> is thrown.</td>\n</tr>\n<tr>\n<td>E</td>\n<td>The &quot;e&quot; or &quot;E&quot; character, which indicates that the value is represented in exponential (scientific) notation. The <code>value</code> parameter can represent a number in exponential notation if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>hexdigits</em></td>\n<td>A sequence of hexadecimal digits from 0 through f, or 0 through F.</td>\n</tr>\n</tbody>\n</table>\n<p> A string with digits only (which corresponds to the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> style) always parses successfully. Most of the remaining <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> members control elements that may be present, but are not required to be present, in the input string. The following table indicates how individual <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> members affect the elements that may be present in <code>value</code>.  </p>\n<table>\n<thead>\n<tr>\n<th><code>NumberStyles</code> value</th>\n<th>Elements permitted in <code>value</code> in addition to digits</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>digits</em> element only.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The decimal point (.) and <em>fractional-digits</em> elements.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The &quot;e&quot; or &quot;E&quot; character, which indicates exponential notation, along with <em>exponential_digits</em>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>ws</em> element at the start of <code>value</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>ws</em> element at the end of <code>value</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>sign</em> element at the start of <code>value</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>sign</em> element at the end of <code>value</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>sign</em> element in the form of parentheses enclosing the numeric value.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The group separator (,) element.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The currency ($) element.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>All elements. However, <code>value</code> cannot represent a hexadecimal number or a number in exponential notation.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>ws</em> element at the start or end of <code>value</code>, <em>sign</em> at the start of <code>value</code>, and the decimal point (<em>.</em>) symbol. The <code>value</code> parameter can also use exponential notation.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <code>ws</code>, <code>sign</code>, group separator (<em>,</em>), and decimal point (<em>.</em>) elements.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>All elements. However, <code>value</code> cannot represent a hexadecimal number.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> If you use the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Parse_\" data-linktype=\"relative-path\">Parse</a> method to round-trip the string representation of a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value that was output by the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_ToString_\" data-linktype=\"relative-path\">ToString</a> method, you should use the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_ToString_System_String_\" data-linktype=\"relative-path\">System.Numerics.BigInteger.ToString(String)</a> method with the &quot;R&quot; format specifier to generate the string representation of the <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value. Otherwise, the string representation of the <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Parse_\" data-linktype=\"relative-path\">Parse</a> method to restore the <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value.  </p>\n</div>\n<p> Unlike the other <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> values, which allow for, but do not require, the presence of particular style elements in <code>value</code>, the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> style value means that the individual numeric characters in <code>value</code> are always interpreted as hexadecimal characters. Valid hexadecimal characters are 0-9, A-F, and a-f. The only other flags that can be combined with the <code>style</code> parameter are <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> and <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a>. (The <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> enumeration includes a composite number style, <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a>, that includes both white-space flags.)  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If <code>value</code> is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as <code>0x</code> or <code>&amp;h</code>) that differentiates it as a hexadecimal number. This causes the conversion to fail.  </p>\n</div>\n<p> If <code>value</code> is a hexadecimal string, the Parse method interprets <code>value</code> as a negative number stored by using two&#39;s complement representation if its first two hexadecimal digits are greater than or equal to <code>0x80</code>. In other words, the method interprets the highest-order bit of the first byte in <code>value</code> as the sign bit. To make sure that a hexadecimal string is correctly interpreted as a positive number, the first digit in <code>value</code> must have a value of zero. For example, the method interprets <code>0x80</code> as a negative value, but it interprets either <code>0x080</code> or <code>0x0080</code> as a positive value. The following example illustrates the difference between hexadecimal strings that represent negative and positive values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Parse#3\">using System;\nusing System.Globalization;\nusing System.Numerics;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string[] hexStrings = { &quot;80&quot;, &quot;E293&quot;, &quot;F9A2FF&quot;, &quot;FFFFFFFF&quot;, \n                              &quot;080&quot;, &quot;0E293&quot;, &quot;0F9A2FF&quot;, &quot;0FFFFFFFF&quot;,  \n                              &quot;0080&quot;, &quot;00E293&quot;, &quot;00F9A2FF&quot;, &quot;00FFFFFFFF&quot; };\n      foreach (string hexString in hexStrings)\n      {\n         BigInteger number = BigInteger.Parse(hexString, NumberStyles.AllowHexSpecifier);\n         Console.WriteLine(&quot;Converted 0x{0} to {1}.&quot;, hexString, number);\n      }         \n   }\n}\n// The example displays the following output:\n//       Converted 0x80 to -128.\n//       Converted 0xE293 to -7533.\n//       Converted 0xF9A2FF to -417025.\n//       Converted 0xFFFFFFFF to -1.\n//       Converted 0x080 to 128.\n//       Converted 0x0E293 to 58003.\n//       Converted 0x0F9A2FF to 16360191.\n//       Converted 0x0FFFFFFFF to 4294967295.\n//       Converted 0x0080 to 128.\n//       Converted 0x00E293 to 58003.\n//       Converted 0x00F9A2FF to 16360191.\n//       Converted 0x00FFFFFFFF to 4294967295.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Parse#3\">Imports System.Globalization\nImports System.Numerics\n\nModule Example\n   Public Sub Main()\n      Dim hexStrings() As String = { &quot;80&quot;, &quot;E293&quot;, &quot;F9A2FF&quot;, &quot;FFFFFFFF&quot;, \n                                     &quot;080&quot;, &quot;0E293&quot;, &quot;0F9A2FF&quot;, &quot;0FFFFFFFF&quot;,  \n                                     &quot;0080&quot;, &quot;00E293&quot;, &quot;00F9A2FF&quot;, &quot;00FFFFFFFF&quot; }\n      For Each hexString As String In hexStrings\n         Dim number As BigInteger = BigInteger.Parse(hexString, NumberStyles.AllowHexSpecifier)\n         Console.WriteLine(&quot;Converted 0x{0} to {1}.&quot;, hexString, number)\n      Next         \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Converted 0x80 to -128.\n&#39;       Converted 0xE293 to -7533.\n&#39;       Converted 0xF9A2FF to -417025.\n&#39;       Converted 0xFFFFFFFF to -1.\n&#39;       Converted 0x080 to 128.\n&#39;       Converted 0x0E293 to 58003.\n&#39;       Converted 0x0F9A2FF to 16360191.\n&#39;       Converted 0x0FFFFFFFF to 4294967295.\n&#39;       Converted 0x0080 to 128.\n&#39;       Converted 0x00E293 to 58003.\n&#39;       Converted 0x00F9A2FF to 16360191.\n&#39;       Converted 0x00FFFFFFFF to 4294967295.\n</code></pre><p> The <code>value</code> parameter is parsed by using the formatting information in a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that is initialized for the current system culture. To specify the culture whose formatting information is used for the parse operation, call the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Parse_System_String_System_Globalization_NumberStyles_System_IFormatProvider_\" data-linktype=\"relative-path\">Parse(String,NumberStyles,IFormatProvider)</a> overload.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_Parse_System_String_System_IFormatProvider_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Parse(String,IFormatProvider)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Converts the string representation of a number in a specified culture-specific format to its <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> equivalent.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Numerics.BigInteger Parse (string value, IFormatProvider provider);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A string that contains a number to convert.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>provider</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object that provides culture-specific formatting information about <code>value</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A value that is equivalent to the number specified in the <code>value</code> parameter.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>value</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>value</code> is not in the correct format.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>value</code> parameter should be the string representation of a number in the following form:  </p>\n<p> [<em>ws</em>][<em>sign</em>]<em>digits</em>[<em>ws</em>]  </p>\n<p> Elements in square brackets ([ and ]) are optional. The following table describes each element.  </p>\n<table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>ws</em></td>\n<td>Optional white space.</td>\n</tr>\n<tr>\n<td><em>sign</em></td>\n<td>An optional sign. Valid sign characters are determined by the <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NegativeSign_\" data-linktype=\"relative-path\">NegativeSign</a> and <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_PositiveSign_\" data-linktype=\"relative-path\">PositiveSign</a> properties of the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that is returned by the <code>provider</code> object&#39;s <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method.</td>\n</tr>\n<tr>\n<td><em>digits</em></td>\n<td>A sequence of digits ranging from 0 to 9. Any leading zeros are ignored.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"NOTE\"><h5>Note</h5><p> The string specified by the <code>value</code> parameter is interpreted using the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> style. It cannot contain any group separators or decimal separator, and it cannot have a decimal portion.  </p>\n</div>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> If you use the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Parse_\" data-linktype=\"relative-path\">Parse</a> method to round-trip the string representation of a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value that was output by the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_ToString_\" data-linktype=\"relative-path\">ToString</a> method, you should use the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_ToString_System_String_\" data-linktype=\"relative-path\">System.Numerics.BigInteger.ToString(String)</a> method with the &quot;R&quot; format specifier to generate the string representation of the <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value. Otherwise, the string representation of the <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Parse_\" data-linktype=\"relative-path\">Parse</a> method to restore the <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value.  </p>\n</div>\n<p> The <code>provider</code> parameter is an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation whose <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method returns a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that provides culture-specific formatting information. When the Parse method is invoked, it calls the <code>provider</code> parameter&#39;s <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method and passes it a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> type. The <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method then returns the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that provides information about the format of the <code>value</code> parameter. There are three ways to use the <code>provider</code> parameter to supply custom formatting information to the parse operation:  </p>\n<ul>\n<li><p>You can pass a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents the culture that supplies formatting information. Its <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method returns the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that provides numeric formatting information for that culture.  </p>\n</li>\n<li><p>You can pass the actual <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that provides numeric formatting information. (Its implementation of <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> just returns itself.)  </p>\n</li>\n<li><p>You can pass a custom object that implements <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a>. Its <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method instantiates and returns the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that provides formatting information.  </p>\n<p>If <code>provider</code> is <code>null</code>, the formatting of <code>value</code> is interpreted based on the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object of the current culture.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_Parse_System_String_System_Globalization_NumberStyles_System_IFormatProvider_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Parse(String,NumberStyles,IFormatProvider)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Converts the string representation of a number in a specified style and culture-specific format to its <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> equivalent.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Numerics.BigInteger Parse (string value, System.Globalization.NumberStyles style, IFormatProvider provider);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A string that contains a number to convert.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>style</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A bitwise combination of the enumeration values that specify the permitted format of <code>value</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>provider</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object that provides culture-specific formatting information about <code>value</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A value that is equivalent to the number specified in the <code>value</code> parameter.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>style</code> is not a <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> value.  </p>\n<p> -or-  </p>\n<p> <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> or <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> flag along with another value.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>value</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>value</code> does not comply with the input pattern specified by <code>style</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>style</code> parameter defines the style elements (such as white space, the positive or negative sign symbol, the group separator symbol, or the decimal point symbol) that are allowed in the <code>value</code> parameter for the parse operation to succeed. <code>styles</code> must be a combination of bit flags from the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> enumeration. The <code>style</code> parameter makes this method overload useful when <code>value</code> contains the string representation of a hexadecimal value, when the number system (decimal or hexadecimal) represented by <code>value</code> is known only at run time, or when you want to disallow white space or a sign symbol in <code>value</code>.  </p>\n<p> Depending on the value of <code>style</code>, the <code>value</code> parameter may include the following elements:  </p>\n<p> [<em>ws</em>][<em>$</em>][<em>sign</em>][<em>digits</em>,]<em>digits</em>[<em>.fractional_digits</em>][E[<em>sign</em>]<em>exponential_digits</em>][<em>ws</em>]  </p>\n<p> If <code>style</code> includes <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a>, the <code>value</code> parameter may include the following elements:  </p>\n<p> [<em>ws</em>]<em>hexdigits</em>[<em>ws</em>]  </p>\n<p> Elements in square brackets ([ and ]) are optional. The following table describes each element.  </p>\n<table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>ws</em></td>\n<td>Optional white space. White space can appear at the start of <code>value</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag, and it can appear at the end of <code>value</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>$</em></td>\n<td>A culture-specific currency symbol. Its position in the string is defined by the <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrencyNegativePattern_\" data-linktype=\"relative-path\">CurrencyNegativePattern</a> and <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrencyPositivePattern_\" data-linktype=\"relative-path\">CurrencyPositivePattern</a> properties of the culture indicated by the <code>provider</code> parameter. The current culture&#39;s currency symbol can appear in <code>value</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>sign</em></td>\n<td>An optional sign. The sign can appear at the start of <code>value</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag, and it can appear at the end of <code>value</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag. Parentheses can be used in <code>value</code> to indicate a negative value if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>digits</em><br><br> <em>fractional_digits</em><br><br> <em>exponential_digits</em></td>\n<td>A sequence of digits from 0 through 9. For <em>fractional_digits</em>, only the digit 0 is valid.</td>\n</tr>\n<tr>\n<td><em>,</em></td>\n<td>A culture-specific group separator symbol. The group separator symbol of the culture specified by <code>provider</code> can appear in <code>value</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>.</em></td>\n<td>A culture-specific decimal point symbol. The decimal point symbol of the culture designated by <code>provider</code> can appear in <code>value</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag. Only the digit 0 can appear as a fractional digit for the parse operation to succeed; if <em>fractional_digits</em> includes any other digit, a <a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a> is thrown.</td>\n</tr>\n<tr>\n<td>E</td>\n<td>The &quot;e&quot; or &quot;E&quot; character, which indicates that the value is represented in exponential (scientific) notation. The <code>value</code> parameter can represent a number in exponential notation if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>hexdigits</em></td>\n<td>A sequence of hexadecimal digits from 0 through f, or 0 through F.</td>\n</tr>\n</tbody>\n</table>\n<p> A string with digits only (which corresponds to the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> style) always parses successfully. Most of the remaining <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> members control elements that may be present, but are not required to be present, in the input string. The following table indicates how individual <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> members affect the elements that may be present in <code>value</code>.  </p>\n<table>\n<thead>\n<tr>\n<th>NumberStyles value</th>\n<th>Elements permitted in value in addition to digits</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>digits</em> element only.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The decimal point (.) and <em>fractional-digits</em> elements.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The &quot;e&quot; or &quot;E&quot; character, which indicates exponential notation. along with <em>exponential_digits</em>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>ws</em> element at the start of <code>value</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>ws</em> element at the end of <code>value</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>sign</em> element at the start of <code>value</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>sign</em> element at the end of <code>value</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>sign</em> element in the form of parentheses enclosing the numeric value.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The group separator (,) element.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The currency ($) element.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>All elements. However, <code>value</code> cannot represent a hexadecimal number or a number in exponential notation.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>ws</em> element at the start or end of <code>value</code>, <em>sign</em> at the start of <code>value</code>, and the decimal point (.) symbol. The <code>value</code> parameter can also use exponential notation.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <code>ws</code>, <code>sign</code>, group separator (,), and decimal point (.) elements.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>All elements. However, <code>value</code> cannot represent a hexadecimal number.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> If you use the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Parse_\" data-linktype=\"relative-path\">Parse</a> method to round-trip the string representation of a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value that was output by the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_ToString_\" data-linktype=\"relative-path\">ToString</a> method, you should use the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_ToString_System_String_\" data-linktype=\"relative-path\">System.Numerics.BigInteger.ToString(String)</a> method with the &quot;R&quot; format specifier to generate the string representation of the <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value. Otherwise, the string representation of the <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Parse_\" data-linktype=\"relative-path\">Parse</a> method to restore the <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value.  </p>\n</div>\n<p> Unlike the other <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> values, which allow for but do not require the presence of particular style elements in <code>value</code>, the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> style value means that the individual numeric characters in <code>value</code> are always interpreted as hexadecimal characters. Valid hexadecimal characters are 0-9, A-F, and a-f. The only other flags that can be combined with the <code>style</code> parameter are <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> and <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a>. (The <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> enumeration includes a composite number style, <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a>, that includes both white-space flags.)  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If <code>value</code> is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as <code>0x</code> or <code>&amp;h</code>) that differentiates it as a hexadecimal number. This causes the conversion to fail.  </p>\n</div>\n<p> If <code>value</code> is a hexadecimal string, the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Parse_System_String_System_Globalization_NumberStyles_\" data-linktype=\"relative-path\">Parse(String,NumberStyles)</a> method interprets <code>value</code> as a negative number stored by using two&#39;s complement representation if its first two hexadecimal digits are greater than or equal to <code>0x80</code>. In other words, the method interprets the highest-order bit of the first byte in <code>value</code> as the sign bit. To make sure that a hexadecimal string is correctly interpreted as a positive number, the first digit in <code>value</code> must have a value of zero. For example, the method interprets <code>0x80</code> as a negative value, but it interprets either <code>0x080</code> or <code>0x0080</code> as a positive value. The following example illustrates the difference between hexadecimal strings that represent negative and positive values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Parse#3\">using System;\nusing System.Globalization;\nusing System.Numerics;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string[] hexStrings = { &quot;80&quot;, &quot;E293&quot;, &quot;F9A2FF&quot;, &quot;FFFFFFFF&quot;, \n                              &quot;080&quot;, &quot;0E293&quot;, &quot;0F9A2FF&quot;, &quot;0FFFFFFFF&quot;,  \n                              &quot;0080&quot;, &quot;00E293&quot;, &quot;00F9A2FF&quot;, &quot;00FFFFFFFF&quot; };\n      foreach (string hexString in hexStrings)\n      {\n         BigInteger number = BigInteger.Parse(hexString, NumberStyles.AllowHexSpecifier);\n         Console.WriteLine(&quot;Converted 0x{0} to {1}.&quot;, hexString, number);\n      }         \n   }\n}\n// The example displays the following output:\n//       Converted 0x80 to -128.\n//       Converted 0xE293 to -7533.\n//       Converted 0xF9A2FF to -417025.\n//       Converted 0xFFFFFFFF to -1.\n//       Converted 0x080 to 128.\n//       Converted 0x0E293 to 58003.\n//       Converted 0x0F9A2FF to 16360191.\n//       Converted 0x0FFFFFFFF to 4294967295.\n//       Converted 0x0080 to 128.\n//       Converted 0x00E293 to 58003.\n//       Converted 0x00F9A2FF to 16360191.\n//       Converted 0x00FFFFFFFF to 4294967295.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Parse#3\">Imports System.Globalization\nImports System.Numerics\n\nModule Example\n   Public Sub Main()\n      Dim hexStrings() As String = { &quot;80&quot;, &quot;E293&quot;, &quot;F9A2FF&quot;, &quot;FFFFFFFF&quot;, \n                                     &quot;080&quot;, &quot;0E293&quot;, &quot;0F9A2FF&quot;, &quot;0FFFFFFFF&quot;,  \n                                     &quot;0080&quot;, &quot;00E293&quot;, &quot;00F9A2FF&quot;, &quot;00FFFFFFFF&quot; }\n      For Each hexString As String In hexStrings\n         Dim number As BigInteger = BigInteger.Parse(hexString, NumberStyles.AllowHexSpecifier)\n         Console.WriteLine(&quot;Converted 0x{0} to {1}.&quot;, hexString, number)\n      Next         \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Converted 0x80 to -128.\n&#39;       Converted 0xE293 to -7533.\n&#39;       Converted 0xF9A2FF to -417025.\n&#39;       Converted 0xFFFFFFFF to -1.\n&#39;       Converted 0x080 to 128.\n&#39;       Converted 0x0E293 to 58003.\n&#39;       Converted 0x0F9A2FF to 16360191.\n&#39;       Converted 0x0FFFFFFFF to 4294967295.\n&#39;       Converted 0x0080 to 128.\n&#39;       Converted 0x00E293 to 58003.\n&#39;       Converted 0x00F9A2FF to 16360191.\n&#39;       Converted 0x00FFFFFFFF to 4294967295.\n</code></pre><p> The <code>provider</code> parameter is an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation. Its <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method returns a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that provides culture-specific information about the format of <code>value</code>. Typically, <code>provider</code> can be any one of the following:  </p>\n<ul>\n<li><p>A <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents the culture that provides numeric formatting information. Its <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method returns the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that provides numeric formatting information.  </p>\n</li>\n<li><p>A <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that provides formatting information. (Its implementation of <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> just returns itself.)  </p>\n</li>\n<li><p>A custom object that implements <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> and uses the <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method to instantiate and return the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that provides formatting information.  </p>\n<p>If <code>provider</code> is <code>null</code>, the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object for the current culture is used.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_Pow_System_Numerics_BigInteger_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Pow(BigInteger,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Raises a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value to the power of a specified value.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Numerics.BigInteger Pow (System.Numerics.BigInteger value, int exponent);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number to raise to the <code>exponent</code> power.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>exponent</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The exponent to raise <code>value</code> by.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The result of raising <code>value</code> to the <code>exponent</code> power.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The value of the <code>exponent</code> parameter is negative.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Pow method returns 1 if the value of the exponent parameter is 0, or if the values of both the <code>value</code> and <code>exponent</code> parameters are 0. If <code>exponent</code> is 1, the Pow method returns <code>value</code>. If <code>value</code> is negative, the method returns a negative result.  </p>\n<p> This method corresponds to the <a class=\"xref\" href=\"system.math#System_Math_Pow_\" data-linktype=\"relative-path\">Pow</a> method for primitive numeric types.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_Remainder_System_Numerics_BigInteger_System_Numerics_BigInteger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Remainder(BigInteger,BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Performs integer division on two <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values and returns the remainder.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Numerics.BigInteger Remainder (System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>dividend</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value to be divided.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>divisor</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value to divide by.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The remainder after dividing <code>dividend</code> by <code>divisor</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.dividebyzeroexception\" data-linktype=\"relative-path\">DivideByZeroException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>divisor</code> is 0 (zero).</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The sign of the remainder is the sign of the <code>dividend</code> parameter.  </p>\n<p> The Remainder method is implemented for languages that do not support custom operators. Its behavior is identical to division using the modulus operator.  </p>\n<p> If necessary, the method automatically performs implicit conversion of other integral types to <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> objects before it performs the modulus operation.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_Subtract_System_Numerics_BigInteger_System_Numerics_BigInteger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Subtract(BigInteger,BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Subtracts one <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value from another and returns the result.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Numerics.BigInteger Subtract (System.Numerics.BigInteger left, System.Numerics.BigInteger right);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>left</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value to subtract from (the minuend).</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>right</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value to subtract (the subtrahend).</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The result of subtracting <code>right</code> from <code>left</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Languages that do not support custom operators can use the Subtract method to perform subtraction using <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values.  </p>\n<p> The Subtract method is a useful substitute for the subtraction operator when instantiating a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> variable by assigning it the difference that results from subtraction, as shown in the following example.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.OperationMethods#3\">      // The statement\n      //    BigInteger number = Int64.MinValue - Int64.MaxValue;\n      // produces compiler error CS0220: The operation overflows at compile time in checked mode.\n      // The alternative:\n      BigInteger number = BigInteger.Subtract(Int64.MinValue, Int64.MaxValue);     \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.OperationMethods#3\">      &#39; The statement\n      &#39;    Dim number As BigInteger = Int64.MinValue - Int64.MaxValue\n      &#39; produces compiler error BC30439: Constant expression not representable in type &#39;Long&#39;.\n      &#39; The alternative:\n      Dim number As BigInteger = BigInteger.Subtract(Int64.MinValue, Int64.MaxValue)\n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_ToByteArray\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ToByteArray()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Converts a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value to a byte array.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public byte[] ToByteArray ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value of the current <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> object converted to an array of bytes.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The individual bytes in the array returned by this method appear in little-endian order. That is, the lower-order bytes of the value precede the higher-order bytes. The first byte of the array reflects the first eight bits of the <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value, the second byte reflects the next eight bits, and so on. For example, the value 1024, or 0x0400, is stored as the following array of two bytes:  </p>\n<table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Byte value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>0x00</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0x04</td>\n</tr>\n</tbody>\n</table>\n<p> Negative values are written to the array using two&#39;s complement representation in the most compact form possible. For example, -1 is represented as a single byte whose value is <code>0xFF</code> instead of as an array with multiple elements, such as <code>0xFF</code>, <code>0xFF</code> or <code>0xFF</code>, <code>0xFF</code>, <code>0xFF</code>, <code>0xFF</code>.  </p>\n<p> Because two&#39;s complement representation always interprets the highest-order bit of the last byte in the array (the byte at position <a class=\"xref\" href=\"system.array#System_Array_Length_\" data-linktype=\"relative-path\">Length</a><code>- 1</code>) as the sign bit, the method returns a byte array with an extra element whose value is zero to disambiguate positive values that could otherwise be interpreted as having their sign bits set. For example, the value 120 or <code>0x78</code> is represented as a single-byte array: <code>0x78</code>. However, 128, or <code>0x80</code>, is represented as a two-byte array: <code>0x80</code>, <code>0x00</code>.  </p>\n<p> You can round-trip a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value by storing it to a byte array and then restoring it using the [BigInteger(Byte&lt;xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29&gt; constructor.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> If your code modifies the value of individual bytes in the array returned by this method before it restores the value, you must make sure that you do not unintentionally change the sign bit. For example, if your modifications increase a positive value so that the highest-order bit in the last element of the byte array becomes set, you can add a new byte whose value is zero to the end of the array.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_ToString\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ToString()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Converts the numeric value of the current <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> object to its equivalent string representation.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override string ToString ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string representation of the current <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The ToString method formats a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value in the &quot;R&quot;, or round-trip, format of the current culture. If you want to specify a different format or culture, use the other overloads of the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_ToString_\" data-linktype=\"relative-path\">ToString</a> method, as follows:  </p>\n<table>\n<thead>\n<tr>\n<th>To use format</th>\n<th>For culture</th>\n<th>Use the overload</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Round-trip (&quot;R&quot;) format</td>\n<td>A specific culture</td>\n<td><a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_ToString_\" data-linktype=\"relative-path\">ToString</a></td>\n</tr>\n<tr>\n<td>A specific format</td>\n<td>Default (current) culture</td>\n<td><a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_ToString_System_String_\" data-linktype=\"relative-path\">ToString(String)</a></td>\n</tr>\n<tr>\n<td>A specific format</td>\n<td>A specific culture</td>\n<td><a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_ToString_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">ToString(String,IFormatProvider)</a></td>\n</tr>\n</tbody>\n</table>\n<p> The string representation of the <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value includes a negative sign if its value is negative, and a sequence of digits ranging from 0 to 9 without leading zeros. The negative sign is defined by the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object for the current culture.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_ToString_System_IFormatProvider_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ToString(IFormatProvider)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Converts the numeric value of the current <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> object to its equivalent string representation by using the specified culture-specific formatting information.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string ToString (IFormatProvider provider);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>provider</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object that supplies culture-specific formatting information.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string representation of the current <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value in the format specified by the <code>provider</code> parameter.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The ToString method formats a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value in the &quot;R&quot;, or round-trip, format by using the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object of a specified culture. If you want to specify a different format or the current culture, use the other overloads of the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_ToString_\" data-linktype=\"relative-path\">ToString</a> method, as follows:  </p>\n<table>\n<thead>\n<tr>\n<th>To use format</th>\n<th>For culture</th>\n<th>Use the overload</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Round-trip (&quot;R&quot;) format</td>\n<td>Default (current) culture</td>\n<td><a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_ToString\" data-linktype=\"relative-path\">ToString()</a></td>\n</tr>\n<tr>\n<td>A specific format</td>\n<td>Default (current) culture</td>\n<td><a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_ToString_System_String_\" data-linktype=\"relative-path\">ToString(String)</a></td>\n</tr>\n<tr>\n<td>A specific format</td>\n<td>A specific culture</td>\n<td><a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_ToString_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">ToString(String,IFormatProvider)</a></td>\n</tr>\n</tbody>\n</table>\n<p> The <code>provider</code> parameter is an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation. Its <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method returns a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that provides culture-specific information about the format of the string returned by this method. If <code>provider</code> is <code>null</code>, the <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value is formatted using the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object of the current culture. The only property of the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that controls the string representation of the <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value using the general format specifier is <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NegativeSign_\" data-linktype=\"relative-path\">NegativeSign</a>, which defines the character that represents the negative sign.  </p>\n<p> The <code>provider</code> parameter can be one of the following:  </p>\n<ul>\n<li><p>A <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents the culture that supplies formatting information.  </p>\n</li>\n<li><p>The <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that supplies formatting information.  </p>\n</li>\n<li><p>A custom object that implements <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a>. Its <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method returns the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that supplies formatting information.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_ToString_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ToString(String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Converts the numeric value of the current <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> object to its equivalent string representation by using the specified format.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string ToString (string format);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>format</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A standard or custom numeric format string.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string representation of the current <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value in the format specified by the <code>format</code> parameter.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>format</code> is not a valid format string.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The ToString method formats a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value in a specified format by using a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that represents the conventions of the current culture. If you want to use the &quot;R&quot;, or round-trip, format or specify a different culture, use the other overloads of the ToString method, as follows:  </p>\n<table>\n<thead>\n<tr>\n<th>To use format</th>\n<th>For culture</th>\n<th>Use the overload</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Round-trip (&quot;R&quot;) format</td>\n<td>Default (current) culture</td>\n<td><a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_ToString\" data-linktype=\"relative-path\">ToString()</a></td>\n</tr>\n<tr>\n<td>Round-trip (&quot;R&quot;) format</td>\n<td>A specific culture</td>\n<td><a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_ToString_System_IFormatProvider_\" data-linktype=\"relative-path\">ToString(IFormatProvider)</a></td>\n</tr>\n<tr>\n<td>A specific format</td>\n<td>A specific culture</td>\n<td><a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_ToString_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">ToString(String,IFormatProvider)</a></td>\n</tr>\n</tbody>\n</table>\n<p> The <code>format</code> parameter can be any valid <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">standard numeric string</a>, or any combination of <a href=\"../Topic/Custom%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">custom numeric format strings</a>. If <code>format</code> is equal to <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a> or is <code>null</code>, the return value of the current <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> object is formatted with the round-trip format specifier (&quot;R&quot;). If <code>format</code> is any other value, the method throws a <a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a>.  </p>\n<p> The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:  </p>\n<ul>\n<li><p>For more information about numeric format specifiers, see <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Numeric Format Strings</a> and <a href=\"../Topic/Custom%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Numeric Format Strings</a>.  </p>\n</li>\n<li><p>For more information about support for formatting in the .NET Framework, see <a href=\"../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Formatting Types</a>.  </p>\n<p>The format of the returned string is determined by the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object for the current culture. Depending on the <code>format</code> parameter, this object controls symbols such as the negative sign, the group separator, and the decimal point symbol in the output string. To provide formatting information for cultures other than the current culture, call the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_ToString_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">ToString(String,IFormatProvider)</a> overload.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_ToString_System_String_System_IFormatProvider_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ToString(String,IFormatProvider)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Converts the numeric value of the current <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> object to its equivalent string representation by using the specified format and culture-specific format information.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string ToString (string format, IFormatProvider provider);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>format</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A standard or custom numeric format string.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>provider</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object that supplies culture-specific formatting information.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string representation of the current <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value as specified by the <code>format</code> and <code>provider</code> parameters.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>format</code> is not a valid format string.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The ToString method formats a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value in a specified format by using the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object of a specified culture. If you want to use the round-trip format or default culture settings, use the other overloads of the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_ToString_\" data-linktype=\"relative-path\">ToString</a> method, as follows:  </p>\n<table>\n<thead>\n<tr>\n<th>To use format</th>\n<th>For culture</th>\n<th>Use the overload</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Round-trip (&quot;R&quot;) format</td>\n<td>Default (current) culture</td>\n<td><a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_ToString\" data-linktype=\"relative-path\">ToString()</a></td>\n</tr>\n<tr>\n<td>Round-trip (&quot;R&quot;) format</td>\n<td>A specific culture</td>\n<td><a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_ToString_System_IFormatProvider_\" data-linktype=\"relative-path\">ToString(IFormatProvider)</a></td>\n</tr>\n<tr>\n<td>A specific format</td>\n<td>Default (current) culture</td>\n<td><a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_ToString_System_String_\" data-linktype=\"relative-path\">ToString(String)</a></td>\n</tr>\n</tbody>\n</table>\n<p> The <code>format</code> parameter can be any valid  <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">standard numeric string</a>, or any combination of <a href=\"../Topic/Custom%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">custom numeric format strings</a>. If <code>format</code> is equal to <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a> or is <code>null</code>, the return value of the current <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> object is formatted with the round-trip format specifier (&quot;R&quot;). If <code>format</code> is any other value, the method throws a <a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a>.  </p>\n<p> The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:  </p>\n<ul>\n<li><p>For more information about numeric format specifiers, see <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Numeric Format Strings</a> and <a href=\"../Topic/Custom%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Numeric Format Strings</a>.  </p>\n</li>\n<li><p>For more information about support for formatting in the .NET Framework, see <a href=\"../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Formatting Types</a>.  </p>\n<p>The <code>provider</code> parameter is an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation. Its <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method returns a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that provides culture-specific information about the format of the string returned by this method. When the ToString method is invoked, it calls the <code>provider</code> parameter&#39;s <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method and passes it a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> type. The <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method then returns the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that provides information for formatting the <code>value</code> parameter, such as the negative sign symbol, the group separator symbol, or the decimal point symbol. There are three ways to use the <code>provider</code> parameter to supply formatting information to the ToString method:  </p>\n</li>\n<li><p>You can pass a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents the culture that supplies formatting information. Its <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method returns the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that provides numeric formatting information for that culture.  </p>\n</li>\n<li><p>You can pass the actual <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that provides numeric formatting information. (Its implementation of <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> just returns itself.)  </p>\n</li>\n<li><p>You can pass a custom object that implements <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a>. Its <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method instantiates and returns the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that provides formatting information.  </p>\n<p>If <code>provider</code> is <code>null</code>, the formatting of the returned string is based on the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object of the current culture.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_TryParse_System_String_System_Numerics_BigInteger__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TryParse(String,BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Tries to convert the string representation of a number to its <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> equivalent, and returns a value that indicates whether the conversion succeeded.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool TryParse (string value, out System.Numerics.BigInteger result);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string representation of a number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>result</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>When this method returns, contains the <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> equivalent to the number that is contained in <code>value</code>, or zero (0) if the conversion fails. The conversion fails if the <code>value</code> parameter is <code>null</code> or is not of the correct format. This parameter is passed uninitialized.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>value</code> was converted successfully; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>value</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The TryParse method is like the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Parse_System_String_\" data-linktype=\"relative-path\">Parse(String)</a> method, except that it does not throw an exception if the conversion fails. This method eliminates the need to use exception handling to test for a <a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a> if <code>value</code> is invalid and cannot be successfully parsed.  </p>\n<p> The <code>value</code> parameter should be the string representation of a decimal number in the following form:  </p>\n<p> [<em>ws</em>][<em>sign</em>]<em>digits</em>[<em>ws</em>]  </p>\n<p> Elements in square brackets ([ and ]) are optional. The following table describes each element.  </p>\n<table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>ws</em></td>\n<td>Optional white space.</td>\n</tr>\n<tr>\n<td><em>sign</em></td>\n<td>An optional sign. Valid sign characters are determined by the <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NegativeSign_\" data-linktype=\"relative-path\">NegativeSign</a> and <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_PositiveSign_\" data-linktype=\"relative-path\">PositiveSign</a> properties of the current culture.</td>\n</tr>\n<tr>\n<td><em>digits</em></td>\n<td>A sequence of decimal digits ranging from 0 to 9.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"NOTE\"><h5>Note</h5><p> The string specified by the <code>value</code> parameter cannot contain any group separators or decimal separator, and it cannot have a decimal portion.  </p>\n</div>\n<p> The <code>value</code> parameter is interpreted by using the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> style. In addition to the decimal digits, only leading and trailing spaces with a leading sign are allowed. To explicitly define the style elements with the culture-specific formatting information that can be present in <code>value</code>, call the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_TryParse_System_String_System_Globalization_NumberStyles_System_IFormatProvider_System_Numerics_BigInteger__\" data-linktype=\"relative-path\">TryParse(String,NumberStyles,IFormatProvider,BigInteger)</a> method.  </p>\n<p> The <code>value</code> parameter is parsed by using the formatting information in a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object for the current culture. For more information, see <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrentInfo_\" data-linktype=\"relative-path\">CurrentInfo</a>.  </p>\n<p> This overload interprets all digits in the <code>value</code> parameter as decimal digits. To parse the string representation of a hexadecimal number, call the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_TryParse_System_String_System_Globalization_NumberStyles_System_IFormatProvider_System_Numerics_BigInteger__\" data-linktype=\"relative-path\">TryParse(String,NumberStyles,IFormatProvider,BigInteger)</a> overload instead.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_TryParse_System_String_System_Globalization_NumberStyles_System_IFormatProvider_System_Numerics_BigInteger__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TryParse(String,NumberStyles,IFormatProvider,BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Tries to convert the string representation of a number in a specified style and culture-specific format to its <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> equivalent, and returns a value that indicates whether the conversion succeeded.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool TryParse (string value, System.Globalization.NumberStyles style, IFormatProvider provider, out System.Numerics.BigInteger result);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string representation of a number. The string is interpreted using the style specified by <code>style</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>style</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A bitwise combination of enumeration values that indicates the style elements that can be present in <code>value</code>. A typical value to specify is <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>provider</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object that supplies culture-specific formatting information about <code>value</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>result</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>When this method returns, contains the <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> equivalent to the number that is contained in <code>value</code>, or <span class=\"xref\">stem.Numerics.BigInteger.Zero*</span> if the conversion failed. The conversion fails if the <code>value</code> parameter is <code>null</code> or is not in a format that is compliant with <code>style</code>. This parameter is passed uninitialized.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the <code>value</code> parameter was converted successfully; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>style</code> is not a <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> value.  </p>\n<p> -or-  </p>\n<p> <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> or <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> flag along with another value.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The TryParse method is like the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Parse_System_String_System_Globalization_NumberStyles_System_IFormatProvider_\" data-linktype=\"relative-path\">Parse(String,NumberStyles,IFormatProvider)</a> method, except that it does not throw an exception if the conversion fails. This method eliminates the need to use exception handling to test for a <a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a> if <code>value</code> is invalid and cannot be parsed successfully.  </p>\n<p> The <code>style</code> parameter defines the style elements (such as white space or a positive or negative sign) that are allowed in the <code>value</code> parameter for the parse operation to succeed. It must be a combination of bit flags from the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> enumeration. Depending on the value of <code>style</code>, the <code>value</code> parameter may include the following elements:  </p>\n<p> [<em>ws</em>][<em>$</em>][<em>sign</em>][<em>digits</em>,]<em>digits</em>[.<em>fractional_digits</em>][E[<em>sign</em>]<em>exponential_digits</em>][<em>ws</em>]  </p>\n<p> If the <code>style</code> parameter includes <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a>, the <code>value</code> parameter may include the following elements:  </p>\n<p> [<em>ws</em>]<em>hexdigits</em>[<em>ws</em>]  </p>\n<p> Elements in square brackets ([ and ]) are optional. The following table describes each element.  </p>\n<table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>ws</em></td>\n<td>Optional white space. White space can appear at the start of <code>value</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag, or at the end of <code>value</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>$</em></td>\n<td>A culture-specific currency symbol. Its position in the string is defined by the <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrencyPositivePattern_\" data-linktype=\"relative-path\">CurrencyPositivePattern</a> property of the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object returned by the <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method of the <code>provider</code> parameter. The currency symbol can appear in <code>value</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>sign</em></td>\n<td>An optional sign. The sign can appear at the start of <code>value</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag, and it can appear at the end of <code>value</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag. Parentheses can be used in <code>value</code> to indicate a negative value if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>digits</em></td>\n<td>A sequence of digits from 0 through 9.</td>\n</tr>\n<tr>\n<td><em>,</em></td>\n<td>A culture-specific group separator. The group separator of the culture specified by <code>provider</code> can appear in <code>value</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>.</em></td>\n<td>A culture-specific decimal point symbol. The decimal point symbol of the culture specified by <code>provider</code> can appear in <code>value</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>fractional_digits</em></td>\n<td>One or more occurrences of the digit 0. Fractional digits can appear in <code>value</code> only if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td>E</td>\n<td>The &quot;e&quot; or &quot;E&quot; character, which indicates that the value is represented in exponential (scientific) notation. The <code>value</code> parameter can represent a number in exponential notation if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>exponential_digits</em></td>\n<td>A sequence of digits from 0 through 9. The <code>value</code> parameter can represent a number in exponential notation if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>hexdigits</em></td>\n<td>A sequence of hexadecimal digits from 0 through f, or 0 through F.</td>\n</tr>\n</tbody>\n</table>\n<p> A string with decimal digits only (which corresponds to the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag) always parses successfully. Most of the remaining <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> members control elements that may be present, but are not required to be present, in this input string. The following table indicates how individual <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> members affect the elements that may be present in <code>value</code>.  </p>\n<table>\n<thead>\n<tr>\n<th>Non-composite <code>NumberStyles</code> values</th>\n<th>Elements permitted in value in addition to digits</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>Decimal digits only.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The decimal point (<em>.</em>) and <em>fractional_digits</em> elements. However, <em>fractional_digits</em> must consist of only one or more 0 digits, or the method returns <code>false</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The &quot;e&quot; or &quot;E&quot; character, which indicates exponential notation, along with <em>exponential_digits</em>. If <code>value</code> represents a number in exponential notation, it cannot have a non-zero, fractional component.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>ws</em> element at the start of <code>value</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>ws</em> element at the end of <code>value</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>sign</em> element before <em>digits</em>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>sign</em> element after <em>digits</em>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>sign</em> element in the form of parentheses enclosing the numeric value.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The group separator (<em>,</em>) element.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The currency (<em>$</em>) element.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>All elements. However, <code>value</code> cannot represent a hexadecimal number or a number in exponential notation.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>ws</em> element at the start or end of <code>value</code>, <em>sign</em> at the start of <code>value</code>, and the decimal point (<em>.</em>) symbol. The <code>value</code> parameter can also use exponential notation.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>ws</em>, <em>sign</em>, group separator (<em>,</em>), and decimal point (<em>.</em>) elements.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>All elements. However, <code>value</code> cannot represent a hexadecimal number.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> If you use the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_TryParse_\" data-linktype=\"relative-path\">TryParse</a> method to round-trip the string representation of a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value that was output by the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_ToString_\" data-linktype=\"relative-path\">ToString</a> method, you should use the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_ToString_System_String_\" data-linktype=\"relative-path\">System.Numerics.BigInteger.ToString(String)</a> method with the &quot;R&quot; format specifier to generate the string representation of the <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value. Otherwise, the string representation of the <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_TryParse_\" data-linktype=\"relative-path\">TryParse</a> method to restore the <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value.  </p>\n</div>\n<p> If the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag is used, <code>value</code> must be a hexadecimal value. The only other flags that can be present in <code>style</code> are <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> and <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a>. (The <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> enumeration has a composite style, <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a>, that includes both white-space flags.)  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If <code>value</code> is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as <code>0x</code> or <code>&amp;h</code>) that differentiates it as a hexadecimal number. This causes the conversion to fail.  </p>\n</div>\n<p> If <code>value</code> is a hexadecimal string, the TryParse method interprets <code>value</code> as a negative number stored by using two&#39;s complement representation if its first two hexadecimal digits are greater than or equal to <code>0x80</code>. In other words, the method interprets the highest-order bit of the first byte in <code>value</code> as the sign bit. To make sure that a hexadecimal string is correctly interpreted as a positive number, the first digit in <code>value</code> must have a value of zero. For example, the method interprets <code>0x80</code> as a negative value, but it interprets either <code>0x080</code> or <code>0x0080</code> as a positive value. The following example illustrates the difference between hexadecimal strings that represent negative and positive values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.TryParse#1\">using System;\nusing System.Globalization;\nusing System.Numerics;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string[] hexStrings = { &quot;80&quot;, &quot;E293&quot;, &quot;F9A2FF&quot;, &quot;FFFFFFFF&quot;, \n                              &quot;080&quot;, &quot;0E293&quot;, &quot;0F9A2FF&quot;, &quot;0FFFFFFFF&quot;,  \n                              &quot;0080&quot;, &quot;00E293&quot;, &quot;00F9A2FF&quot;, &quot;00FFFFFFFF&quot; };\n      BigInteger number = BigInteger.Zero;\n                              \n      foreach (string hexString in hexStrings)\n      {\n         if (BigInteger.TryParse(hexString, NumberStyles.AllowHexSpecifier,\n                                 null, out number))\n            Console.WriteLine(&quot;Converted 0x{0} to {1}.&quot;, hexString, number);\n         else\n            Console.WriteLine(&quot;Cannot convert &#39;{0}&#39; to a BigInteger.&quot;, hexString);\n      }\n   }\n}\n// The example displays the following output:\n//       Converted 0x80 to -128.\n//       Converted 0xE293 to -7533.\n//       Converted 0xF9A2FF to -417025.\n//       Converted 0xFFFFFFFF to -1.\n//       Converted 0x080 to 128.\n//       Converted 0x0E293 to 58003.\n//       Converted 0x0F9A2FF to 16360191.\n//       Converted 0x0FFFFFFFF to 4294967295.\n//       Converted 0x0080 to 128.\n//       Converted 0x00E293 to 58003.\n//       Converted 0x00F9A2FF to 16360191.\n//       Converted 0x00FFFFFFFF to 4294967295.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.TryParse#1\">Imports System.Globalization\nImports System.Numerics\n\nModule Example\n   Public Sub Main()\n      Dim hexStrings() As String = { &quot;80&quot;, &quot;E293&quot;, &quot;F9A2FF&quot;, &quot;FFFFFFFF&quot;, \n                                     &quot;080&quot;, &quot;0E293&quot;, &quot;0F9A2FF&quot;, &quot;0FFFFFFFF&quot;,  \n                                     &quot;0080&quot;, &quot;00E293&quot;, &quot;00F9A2FF&quot;, &quot;00FFFFFFFF&quot; }\n      Dim number As BigInteger = BigInteger.Zero\n      \n      For Each hexString As String In hexStrings\n         If BigInteger.TryParse(hexString, NumberStyles.AllowHexSpecifier, \n                                Nothing, number) Then\n            Console.WriteLine(&quot;Converted 0x{0} to {1}.&quot;, hexString, number)\n         Else\n            Console.WriteLine(&quot;Cannot convert &#39;{0}&#39; to a BigInteger.&quot;, hexString)\n         End If\n      Next         \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Converted 0x80 to -128.\n&#39;       Converted 0xE293 to -7533.\n&#39;       Converted 0xF9A2FF to -417025.\n&#39;       Converted 0xFFFFFFFF to -1.\n&#39;       Converted 0x080 to 128.\n&#39;       Converted 0x0E293 to 58003.\n&#39;       Converted 0x0F9A2FF to 16360191.\n&#39;       Converted 0x0FFFFFFFF to 4294967295.\n&#39;       Converted 0x0080 to 128.\n&#39;       Converted 0x00E293 to 58003.\n&#39;       Converted 0x00F9A2FF to 16360191.\n&#39;       Converted 0x00FFFFFFFF to 4294967295.\n</code></pre><p> The <code>provider</code> parameter is an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation. Its <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method returns a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that provides culture-specific information about the format of <code>value</code>. The <code>provider</code> parameter can be any one of the following:  </p>\n<ul>\n<li><p>A <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents the culture that supplies formatting information. Its <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method returns the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that provides numeric formatting information for that culture.  </p>\n</li>\n<li><p>A <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that provides numeric formatting information. (Its implementation of <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> just returns itself.)  </p>\n</li>\n<li><p>A custom object that implements <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a>. Its <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method instantiates and returns the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that provides formatting information.  </p>\n<p>If <code>provider</code> is <code>null</code>, the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object for the current culture is used.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Operators\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_Addition_System_Numerics_BigInteger_System_Numerics_BigInteger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Addition(BigInteger,BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Adds the values of two specified <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> objects.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Numerics.BigInteger op_Addition (System.Numerics.BigInteger left, System.Numerics.BigInteger right);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>left</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first value to add.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>right</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second value to add.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The sum of <code>left</code> and <code>right</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Addition method defines the addition operation for <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numeric.BigInteger.Class#12\">      Dim num1 As BigInteger = 1000456321\n      Dim num2 As BigInteger = 90329434\n      Dim sum As BigInteger = num1 + num2\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Numeric.BigInteger.Class#12\">      BigInteger num1 = 1000456321;\n      BigInteger num2 = 90329434;\n      BigInteger sum = num1 + num2;\n</code></pre><p> Languages that do not support custom operators can call the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Add_\" data-linktype=\"relative-path\">Add</a> method instead.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_BitwiseAnd_System_Numerics_BigInteger_System_Numerics_BigInteger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_BitwiseAnd(BigInteger,BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Performs a bitwise <code>And</code> operation on two <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Numerics.BigInteger op_BitwiseAnd (System.Numerics.BigInteger left, System.Numerics.BigInteger right);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>left</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first value.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>right</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second value.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The result of the bitwise <code>And</code> operation.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The BitwiseAnd method defines the bitwise <code>And</code> operation for <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values. The bitwise <code>And</code> operation sets a result bit only if the corresponding bits in <code>left</code> and <code>right</code> are also set, as shown in the following table.  </p>\n<table>\n<thead>\n<tr>\n<th>Bit in <code>left</code></th>\n<th>Bit in <code>right</code></th>\n<th>Bit in result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<p> The BitwiseAnd method enables code such as the following:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Operators#1\">      BigInteger number1 = BigInteger.Add(Int64.MaxValue, Int32.MaxValue);\n      BigInteger number2 = BigInteger.Pow(Byte.MaxValue, 10);\n      BigInteger result = number1 &amp; number2;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Operators#1\">      Dim number1 As BigInteger = BigInteger.Add(Int64.MaxValue, Int32.MaxValue)\n      Dim number2 As BigInteger = BigInteger.Pow(Byte.MaxValue, 10)\n      Dim result As BigInteger = number1 And number2\n</code></pre><p> The BitwiseAnd method performs the bitwise <code>And</code> operation on two <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values as if they were both in two&#39;s complement representation with virtual sign extension.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_BitwiseOr_System_Numerics_BigInteger_System_Numerics_BigInteger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_BitwiseOr(BigInteger,BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Performs a bitwise <code>Or</code> operation on two <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Numerics.BigInteger op_BitwiseOr (System.Numerics.BigInteger left, System.Numerics.BigInteger right);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>left</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first value.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>right</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second value.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The result of the bitwise <code>Or</code> operation.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The BitwiseOr method defines the bitwise <code>Or</code> operation for <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values. The bitwise <code>Or</code> operation sets a result bit only if either or both of the corresponding bits in <code>left</code> and <code>right</code> are set, as shown in the following table.  </p>\n<table>\n<thead>\n<tr>\n<th>Bit in <code>left</code></th>\n<th>Bit in <code>right</code></th>\n<th>Bit in result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<p> The BitwiseOr method enables code such as the following:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Operators#2\">      BigInteger number1  = BigInteger.Parse(&quot;10343901200000000000&quot;);\n      BigInteger number2  = Byte.MaxValue;\n      BigInteger result  = number1 | number2;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Operators#2\">      Dim number1 As BigInteger = BigInteger.Parse(&quot;10343901200000000000&quot;)\n      Dim number2 As BigInteger = Byte.MaxValue\n      Dim result As BigInteger = number1 Or number2\n</code></pre><p> The BitwiseOr method performs the bitwise <code>Or</code> operation on two <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values as if they were both in two&#39;s complement representation with virtual sign extension.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_Decrement_System_Numerics_BigInteger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Decrement(BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Decrements a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value by 1.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Numerics.BigInteger op_Decrement (System.Numerics.BigInteger value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value to decrement.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value of the <code>value</code> parameter decremented by 1.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Decrement method defines the decrement operation for <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numeric.BigInteger.Class#17\">      BigInteger number = 93843112;\n      Console.WriteLine(--number);               // Displays 93843111\n</code></pre><p> Languages that do not support custom operators can call the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Subtract_\" data-linktype=\"relative-path\">Subtract</a> method instead. For example:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Operators#3\">      BigInteger number1 = BigInteger.Pow(Int32.MaxValue, 2);\n      number1 = BigInteger.Subtract(number1, BigInteger.One);\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Operators#3\">      Dim number1 As BigInteger = BigInteger.Pow(Int32.MaxValue, 2)\n      number1 = BigInteger.Subtract(number1, BigInteger.One)\n</code></pre><p> Because <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> objects are immutable, the Decrement operator creates a new <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> object whose value is one less than the <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> object represented by <code>value</code>. This means that repeated calls to Decrement may be expensive.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_Division_System_Numerics_BigInteger_System_Numerics_BigInteger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Division(BigInteger,BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Divides a specified <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value by another specified <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value by using integer division.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Numerics.BigInteger op_Division (System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>dividend</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value to be divided.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>divisor</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value to divide by.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The integral result of the division.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.dividebyzeroexception\" data-linktype=\"relative-path\">DivideByZeroException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>divisor</code> is 0 (zero).</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Division method defines the division operation for <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numeric.BigInteger.Class#13\">      Dim num1 As BigInteger = 100045632194\n      Dim num2 As BigInteger = 90329434\n      Dim quotient As BigInteger = num1 / num2\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Numeric.BigInteger.Class#13\">      BigInteger num1 = 100045632194;\n      BigInteger num2 = 90329434;\n      BigInteger quotient = num1 / num2;\n</code></pre><p> Languages that do not support custom operators and operator overloading can call the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Divide_\" data-linktype=\"relative-path\">Divide</a> method instead.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_Equality_System_Int64_System_Numerics_BigInteger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Equality(Int64,BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether a signed long integer value and a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value are equal.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool op_Equality (long left, System.Numerics.BigInteger right);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>left</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>right</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the <code>left</code> and <code>right</code> parameters have the same value; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Equality method defines the equality comparison operation for <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Operators#4\">      BigInteger bigNumber = BigInteger.Pow(2, 63);\n      long number = Int64.MaxValue;\n      if (number == bigNumber)\n      {\n         // Do something...\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Operators#4\">      Dim bigNumber As BigInteger = BigInteger.Pow(2, 63)\n      Dim number As Long = Int64.MaxValue\n      If number = bigNumber Then\n         &#39; Do something...\n      End If   \n</code></pre><p> Languages that do not support custom operators can call the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Equals_System_Int64_\" data-linktype=\"relative-path\">System.Numerics.BigInteger.Equals(Int64)</a> instance method instead.  </p>\n<p> If <code>left</code> is a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>, <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a>, <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>, <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>, <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a>, or <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a> value, it is implicitly converted to an <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> value when the operation is performed.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_Equality_System_Numerics_BigInteger_System_Int64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Equality(BigInteger,Int64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value and a signed long integer value are equal.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool op_Equality (System.Numerics.BigInteger left, long right);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>left</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>right</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the <code>left</code> and <code>right</code> parameters have the same value; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Equality method defines the equality comparison operation for <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Operators#5\">      BigInteger bigNumber = BigInteger.Pow(2, 63);\n      long number = Int64.MaxValue;\n      if (bigNumber == number)\n      {\n         // Do something...\n      }   \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Operators#5\">      Dim bigNumber As BigInteger = BigInteger.Pow(2, 63)\n      Dim number As Long = Int64.MaxValue\n      If bigNumber = number Then\n         &#39; Do something...\n      End If   \n</code></pre><p> Languages that do not support custom operators can call the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Equals_System_Int64_\" data-linktype=\"relative-path\">System.Numerics.BigInteger.Equals(Int64)</a> instance method instead.  </p>\n<p> If <code>right</code> is a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>, <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a>, <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>, <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>, <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a>, or <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a> value, it is implicitly converted to an <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> value when the operation is performed.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_Equality_System_Numerics_BigInteger_System_Numerics_BigInteger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Equality(BigInteger,BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether the values of two <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> objects are equal.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool op_Equality (System.Numerics.BigInteger left, System.Numerics.BigInteger right);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>left</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>right</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the <code>left</code> and <code>right</code> parameters have the same value; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Equality method defines the operation of the equality operator for <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numeric.BigInteger.Class#19\">      Dim number1 As BigInteger = 945834723\n      Dim number2 As BigInteger = 345145625\n      Dim number3 As BigInteger = 945834723 \n      Console.WriteLine(number1 = number2)                  &#39; Displays False\n      Console.WriteLine(number1 = number3)                  &#39; Displays True\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Numeric.BigInteger.Class#19\">      BigInteger number1 = 945834723;\n      BigInteger number2 = 345145625;\n      BigInteger number3 = 945834723; \n      Console.WriteLine(number1 == number2);             // Displays False\n      Console.WriteLine(number1 == number3);             // Displays True\n</code></pre><p> Languages that do not support custom operators can call the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Equals_System_Numerics_BigInteger_\" data-linktype=\"relative-path\">System.Numerics.BigInteger.Equals(BigInteger)</a> instance method instead.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_Equality_System_Numerics_BigInteger_System_UInt64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Equality(BigInteger,UInt64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value and an unsigned long integer value are equal.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool op_Equality (System.Numerics.BigInteger left, ulong right);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>left</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>right</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the <code>left</code> and <code>right</code> parameters have the same value; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Equality method defines the equality comparison operation for <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Operators#6\">      BigInteger bigNumber = BigInteger.Pow(2, 63) - BigInteger.One;\n      ulong uNumber = Int64.MaxValue &amp; 0x7FFFFFFFFFFFFFFF;\n      if (bigNumber == uNumber)\n      {\n         // Do something...\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Operators#6\">      Dim bigNumber As BigInteger = BigInteger.Pow(2, 63) - BigInteger.One\n      Dim uNumber As ULong = CULng(Int64.MaxValue And CULng(&amp;h7FFFFFFFFFFFFFFF))\n      If bigNumber = uNumber Then\n         &#39; Do something...\n      End If\n</code></pre><p> Languages that do not support custom operators can call the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Equals_System_UInt64_\" data-linktype=\"relative-path\">System.Numerics.BigInteger.Equals(UInt64)</a> instance method instead.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_Equality_System_UInt64_System_Numerics_BigInteger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Equality(UInt64,BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether an unsigned long integer value and a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value are equal.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool op_Equality (ulong left, System.Numerics.BigInteger right);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>left</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>right</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the <code>left</code> and <code>right</code> parameters have the same value; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Equality method defines the equality comparison operation for <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Operators#7\">      BigInteger bigNumber = BigInteger.Pow(2, 63) - BigInteger.One;\n      ulong uNumber = Int64.MaxValue &amp; 0x7FFFFFFFFFFFFFFF;\n      if (uNumber == bigNumber)\n      {\n         // Do something...\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Operators#7\">      Dim bigNumber As BigInteger = BigInteger.Pow(2, 63) - BigInteger.One\n      Dim uNumber As ULong = CULng(Int64.MaxValue And CULng(&amp;h7FFFFFFFFFFFFFFF))\n      If uNumber = bigNumber Then\n         &#39; Do something...\n      End If\n</code></pre><p> Languages that do not support custom operators can call the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Equals_System_UInt64_\" data-linktype=\"relative-path\">System.Numerics.BigInteger.Equals(UInt64)</a> instance method instead.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_ExclusiveOr_System_Numerics_BigInteger_System_Numerics_BigInteger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_ExclusiveOr(BigInteger,BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Performs a bitwise exclusive <code>Or</code> (<code>XOr</code>) operation on two <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Numerics.BigInteger op_ExclusiveOr (System.Numerics.BigInteger left, System.Numerics.BigInteger right);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>left</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first value.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>right</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second value.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The result of the bitwise <code>Or</code> operation.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The result of a bitwise exclusive <code>Or</code> operation is <code>true</code> if the values of the two bits are different; otherwise, it is <code>false</code>. The following table illustrates the exclusive <code>Or</code> operation.  </p>\n<table>\n<thead>\n<tr>\n<th>Bit x in <code>left</code></th>\n<th>Bit x in <code>right</code></th>\n<th>Return value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<p> The ExclusiveOr method enables code such as the following:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Operators#8\">      BigInteger number1 = BigInteger.Pow(2, 127);\n      BigInteger number2 = BigInteger.Multiply(163, 124);\n      BigInteger result = number1 ^ number2;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Operators#8\">      Dim number1 As BigInteger = BigInteger.Pow(2, 127)\n      Dim number2 As BigInteger = BigInteger.Multiply(163, 124)\n      Dim result As BigInteger = number1 XOr number2\n</code></pre><p> The ExclusiveOr method performs the bitwise exclusive <code>Or</code> operation on two <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values as if they were both in two&#39;s complement representation with virtual sign extension.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_Explicit_System_Decimal_to_System_Numerics_BigInteger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Explicit(Decimal)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Numerics.BigInteger op_Explicit (decimal value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_Explicit_System_Double_to_System_Numerics_BigInteger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Explicit(Double)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Numerics.BigInteger op_Explicit (double value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_Explicit_System_Numerics_BigInteger_to_System_Byte_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Explicit(BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static byte op_Explicit (System.Numerics.BigInteger value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_Explicit_System_Numerics_BigInteger_to_System_Decimal_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Explicit(BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static decimal op_Explicit (System.Numerics.BigInteger value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_Explicit_System_Numerics_BigInteger_to_System_Double_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Explicit(BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static double op_Explicit (System.Numerics.BigInteger value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_Explicit_System_Numerics_BigInteger_to_System_Int16_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Explicit(BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static short op_Explicit (System.Numerics.BigInteger value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_Explicit_System_Numerics_BigInteger_to_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Explicit(BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static int op_Explicit (System.Numerics.BigInteger value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_Explicit_System_Numerics_BigInteger_to_System_Int64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Explicit(BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static long op_Explicit (System.Numerics.BigInteger value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_Explicit_System_Numerics_BigInteger_to_System_SByte_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Explicit(BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static sbyte op_Explicit (System.Numerics.BigInteger value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_Explicit_System_Numerics_BigInteger_to_System_Single_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Explicit(BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static float op_Explicit (System.Numerics.BigInteger value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_Explicit_System_Numerics_BigInteger_to_System_UInt16_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Explicit(BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static ushort op_Explicit (System.Numerics.BigInteger value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_Explicit_System_Numerics_BigInteger_to_System_UInt32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Explicit(BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static uint op_Explicit (System.Numerics.BigInteger value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_Explicit_System_Numerics_BigInteger_to_System_UInt64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Explicit(BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static ulong op_Explicit (System.Numerics.BigInteger value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_Explicit_System_Single_to_System_Numerics_BigInteger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Explicit(Single)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Numerics.BigInteger op_Explicit (float value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_GreaterThan_System_Int64_System_Numerics_BigInteger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_GreaterThan(Int64,BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether a 64-bit signed integer is greater than a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool op_GreaterThan (long left, System.Numerics.BigInteger right);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>left</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>right</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>left</code> is greater than <code>right</code>; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The GreaterThan method defines the operation of the greater than operator for <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Operators#9\">      BigInteger bigNumber = BigInteger.Pow(Int32.MaxValue, 4);\n      long number = Int64.MaxValue;\n      if (number &gt; bigNumber) {\n         // Do something;\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Operators#9\">      Dim bigNumber As BigInteger = BigInteger.Pow(Int32.MaxValue, 4)\n      Dim number As Long = Int64.MaxValue\n      If number &gt; bigNumber Then\n         &#39; Do something\n      End If\n</code></pre><p> Languages that do not support custom operators can call the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_CompareTo_System_Int64_\" data-linktype=\"relative-path\">System.Numerics.BigInteger.CompareTo(Int64)</a> instance method instead. Some languages can also call the GreaterThan method directly, as the following example shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Operators#10\">      Dim bigNumber As BigInteger = BigInteger.Pow(Int32.MaxValue, 4)\n      Dim number As Long = Int64.MaxValue\n      If BigInteger.op_GreaterThan(number,bigNumber) Then\n         &#39; Do something\n      End If\n</code></pre><p> If <code>left</code> is a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>, <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a>, <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>, <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>, <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a>, or <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a> value, it is implicitly converted to an <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> value when the operation is performed.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_GreaterThan_System_Numerics_BigInteger_System_Int64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_GreaterThan(BigInteger,Int64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> is greater than a 64-bit signed integer value.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool op_GreaterThan (System.Numerics.BigInteger left, long right);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>left</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>right</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>left</code> is greater than <code>right</code>; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_op_GreaterThan_\" data-linktype=\"relative-path\">op_GreaterThan</a> method defines the operation of the greater than operator for <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Operators#11\">      BigInteger bigNumber = BigInteger.Pow(Int32.MaxValue, 4);\n      long number = Int64.MaxValue;\n      if (bigNumber &gt; number) {\n         // Do something;\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Operators#11\">      Dim bigNumber As BigInteger = BigInteger.Pow(Int32.MaxValue, 4)\n      Dim number As Long = Int64.MaxValue\n      If bigNumber &gt; Number Then\n         &#39; Do something\n      End If\n</code></pre><p> Languages that do not support custom operators can call the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_CompareTo_System_Int64_\" data-linktype=\"relative-path\">System.Numerics.BigInteger.CompareTo(Int64)</a> method instead. Some languages can also call the GreaterThan method directly, as the following example shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Operators#12\">      Dim bigNumber As BigInteger = BigInteger.Pow(Int32.MaxValue, 4)\n      Dim number As Long = Int64.MaxValue\n      If BigInteger.op_GreaterThan(bigNumber,number) Then\n         &#39; Do something\n      End If\n</code></pre><p> If <code>right</code> is a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>, <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a>, <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>, <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>, <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a>, or <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a> value, it is implicitly converted to an <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> value when the operation is performed.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_GreaterThan_System_Numerics_BigInteger_System_Numerics_BigInteger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_GreaterThan(BigInteger,BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value is greater than another <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool op_GreaterThan (System.Numerics.BigInteger left, System.Numerics.BigInteger right);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>left</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>right</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>left</code> is greater than <code>right</code>; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The GreaterThan method defines the operation of the greater than operator for <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numeric.BigInteger.Class#20\">      Dim number1 As BigInteger = 945834723\n      Dim number2 As BigInteger = 345145625\n      Dim number3 As BigInteger = 945834724 \n      Console.WriteLine(number1 &gt; number2)                  &#39; Displays True\n      Console.WriteLine(number1 &gt; number3)                  &#39; Displays False\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Numeric.BigInteger.Class#20\">      BigInteger number1 = 945834723;\n      BigInteger number2 = 345145625;\n      BigInteger number3 = 945834724;\n      Console.WriteLine(number1 &gt; number2);              // Displays True\n      Console.WriteLine(number1 &gt; number3);              // Displays False\n</code></pre><p> Languages that do not support custom operators can call the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Compare_System_Numerics_BigInteger_System_Numerics_BigInteger_\" data-linktype=\"relative-path\">System.Numerics.BigInteger.Compare(BigInteger,BigInteger)</a> method instead. They can also call the GreaterThan method directly, as the following example shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numeric.BigInteger.Class#21\">      Dim numberA As BigInteger = 945834723\n      Dim numberB As BigInteger = 345145625\n      Dim numberC As BigInteger = 945834724 \n      Console.WriteLine(BigInteger.op_GreaterThan(numberA, numberB))    &#39; Displays True\n      Console.WriteLine(BigInteger.op_GreaterThan(numberA, numberC))    &#39; Displays False\n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_GreaterThan_System_Numerics_BigInteger_System_UInt64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_GreaterThan(BigInteger,UInt64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value is greater than a 64-bit unsigned integer.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool op_GreaterThan (System.Numerics.BigInteger left, ulong right);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>left</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>right</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>left</code> is greater than <code>right</code>; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_op_GreaterThan_\" data-linktype=\"relative-path\">op_GreaterThan</a> method defines the operation of the greater than operator for <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Operators#13\">      BigInteger bigNumber = BigInteger.Pow(Int32.MaxValue, 2);\n      ulong number = UInt64.MaxValue;\n      if (bigNumber &gt; number) {\n         // Do something\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Operators#13\">      Dim bigNumber As BigInteger = BigInteger.Pow(Int32.MaxValue, 2)\n      Dim number As ULong = UInt64.MaxValue\n      If bigNumber &gt; number Then\n         &#39; Do something\n      End If\n</code></pre><p> Languages that do not support custom operators can call the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_CompareTo_System_UInt64_\" data-linktype=\"relative-path\">System.Numerics.BigInteger.CompareTo(UInt64)</a> method instead. Some languages can also call the GreaterThan method directly, as the following example shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Operators#14\">      Dim bigNumber As BigInteger = BigInteger.Pow(Int32.MaxValue, 2)\n      Dim number As ULong = UInt64.MaxValue\n      If BigInteger.op_GreaterThan(bigNumber, number) Then\n         &#39; Do something\n      End If\n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_GreaterThan_System_UInt64_System_Numerics_BigInteger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_GreaterThan(UInt64,BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value is greater than a 64-bit unsigned integer.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool op_GreaterThan (ulong left, System.Numerics.BigInteger right);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>left</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>right</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>left</code> is greater than <code>right</code>; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The GreaterThan method defines the operation of the greater than operator for <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Operators#15\">      BigInteger bigNumber = BigInteger.Pow(Int32.MaxValue, 2);\n      ulong number = UInt64.MaxValue;\n      if (number &gt; bigNumber) {\n         // Do something\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Operators#15\">      Dim bigNumber As BigInteger = BigInteger.Pow(Int32.MaxValue, 2)\n      Dim number As ULong = UInt64.MaxValue\n      If number &gt; bigNumber Then\n         &#39; Do something\n      End If\n</code></pre><p> Languages that do not support custom operators can call the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_CompareTo_System_UInt64_\" data-linktype=\"relative-path\">System.Numerics.BigInteger.CompareTo(UInt64)</a> method instead. Some languages can also call the GreaterThan method directly, as the following example shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Operators#16\">      Dim bigNumber As BigInteger = BigInteger.Pow(Int32.MaxValue, 2)\n      Dim number As ULong = UInt64.MaxValue\n      If BigInteger.op_GreaterThan(number, bigNumber) Then\n         &#39; Do something\n      End If\n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_GreaterThanOrEqual_System_Int64_System_Numerics_BigInteger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_GreaterThanOrEqual(Int64,BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether a 64-bit signed integer is greater than or equal to a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool op_GreaterThanOrEqual (long left, System.Numerics.BigInteger right);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>left</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>right</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>left</code> is greater than <code>right</code>; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_op_GreaterThanOrEqual_\" data-linktype=\"relative-path\">op_GreaterThanOrEqual</a> method defines the operation of the greater than or equal to operator for <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Operators#17\">      BigInteger bigNumber = BigInteger.Pow(Int32.MaxValue, 4);\n      long number = Int64.MaxValue;\n      if (number &gt;= bigNumber) {\n         // Do something;\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Operators#17\">      Dim bigNumber As BigInteger = BigInteger.Pow(Int32.MaxValue, 4)\n      Dim number As Long = Int64.MaxValue\n      If number &gt;= bigNumber Then\n         &#39; Do something\n      End If\n</code></pre><p> Languages that do not support custom operators can call the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_CompareTo_System_Int64_\" data-linktype=\"relative-path\">System.Numerics.BigInteger.CompareTo(Int64)</a> method instead. Some languages can also call the GreaterThanOrEqual method directly, as the following example shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Operators#18\">      Dim bigNumber As BigInteger = BigInteger.Pow(Int32.MaxValue, 4)\n      Dim number As Long = Int64.MaxValue\n      If BigInteger.op_GreaterThanOrEqual(number,bigNumber) Then\n         &#39; Do something\n      End If\n</code></pre><p> If <code>left</code> is a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>, <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a>, <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>, <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>, <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a>, or <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a> value, it is implicitly converted to an <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> value when the operation is performed.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_GreaterThanOrEqual_System_Numerics_BigInteger_System_Int64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_GreaterThanOrEqual(BigInteger,Int64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value is greater than or equal to a 64-bit signed integer value.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool op_GreaterThanOrEqual (System.Numerics.BigInteger left, long right);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>left</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>right</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>left</code> is greater than <code>right</code>; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_op_GreaterThanOrEqual_\" data-linktype=\"relative-path\">op_GreaterThanOrEqual</a> method defines the operation of the greater than or equal to operator for <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Operators#19\">      BigInteger bigNumber = BigInteger.Pow(Int32.MaxValue, 4);\n      long number = Int64.MaxValue;\n      if (bigNumber &gt;= number) {\n         // Do something;\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Operators#19\">      Dim bigNumber As BigInteger = BigInteger.Pow(Int32.MaxValue, 4)\n      Dim number As Long = Int64.MaxValue\n      If bigNumber &gt;= number Then\n         &#39; Do something\n      End If\n</code></pre><p> Languages that do not support custom operators can call the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_CompareTo_System_Int64_\" data-linktype=\"relative-path\">System.Numerics.BigInteger.CompareTo(Int64)</a> method instead. Some languages can also call the GreaterThanOrEqual method directly, as the following example shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Operators#20\">      Dim bigNumber As BigInteger = BigInteger.Pow(Int32.MaxValue, 4)\n      Dim number As Long = Int64.MaxValue\n      If BigInteger.op_GreaterThanOrEqual(bigNumber,number) Then\n         &#39; Do something\n      End If\n</code></pre><p> If <code>right</code> is a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>, <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a>, <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>, <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>, <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a>, or <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a> value, it is implicitly converted to an <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> value when the operation is performed.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_GreaterThanOrEqual_System_Numerics_BigInteger_System_Numerics_BigInteger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_GreaterThanOrEqual(BigInteger,BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value is greater than or equal to another <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool op_GreaterThanOrEqual (System.Numerics.BigInteger left, System.Numerics.BigInteger right);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>left</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>right</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>left</code> is greater than <code>right</code>; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The GreaterThanOrEqual method defines the operation of the greater than or equal to operator for <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numeric.BigInteger.Class#22\">      Dim number1 As BigInteger = 945834723\n      Dim number2 As BigInteger = 345145625\n      Dim number3 As BigInteger = 945834724 \n      Dim number4 As BigInteger = 945834723\n      Console.WriteLine(number1 &gt;= number2)                 &#39; Displays True\n      Console.WriteLine(number1 &gt;= number3)                 &#39; Displays False\n      Console.WriteLine(number1 &gt;= number4)                 &#39; Displays True\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Numeric.BigInteger.Class#22\">      BigInteger number1 = 945834723;\n      BigInteger number2 = 345145625;\n      BigInteger number3 = 945834724;\n      BigInteger number4 = 945834723;\n      Console.WriteLine(number1 &gt;= number2);             // Displays True\n      Console.WriteLine(number1 &gt;= number3);             // Displays False\n      Console.WriteLine(number1 &gt;= number4);             // Displays True\n</code></pre><p> Languages that do not support custom operators can call the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Compare_\" data-linktype=\"relative-path\">Compare</a> method instead. Some languages can also call the GreaterThanOrEqual method directly, as the following example shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numeric.BigInteger.Class#23\">      Dim numberA As BigInteger = 945834723\n      Dim numberB As BigInteger = 345145625\n      Dim numberC As BigInteger = 945834724 \n      Dim numberD As BigInteger = 945834723\n      Console.WriteLine( _\n              BigInteger.op_GreaterThanOrEqual(numberA, numberB))    &#39; Displays True\n      Console.WriteLine( _\n              BigInteger.op_GreaterThanOrEqual(numberA, numberC))    &#39; Displays False\n      Console.WriteLine( _\n              BigInteger.op_GreaterThanOrEqual(numberA, numberD))    &#39; Displays True       \n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_GreaterThanOrEqual_System_Numerics_BigInteger_System_UInt64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_GreaterThanOrEqual(BigInteger,UInt64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value is greater than or equal to a 64-bit unsigned integer value.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool op_GreaterThanOrEqual (System.Numerics.BigInteger left, ulong right);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>left</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>right</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>left</code> is greater than <code>right</code>; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_op_GreaterThanOrEqual_\" data-linktype=\"relative-path\">op_GreaterThanOrEqual</a> method defines the operation of the greater than or equal to operator for <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Operators#21\">      BigInteger bigNumber = BigInteger.Pow(Int32.MaxValue, 2);\n      ulong number = UInt64.MaxValue;\n      if (bigNumber &gt;= number) {\n         // Do something\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Operators#21\">      Dim bigNumber As BigInteger = BigInteger.Pow(Int32.MaxValue, 2)\n      Dim number As ULong = UInt64.MaxValue\n      If bigNumber &gt;= number Then\n         &#39; Do something\n      End If\n</code></pre><p> Languages that do not support custom operators can call the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_CompareTo_System_UInt64_\" data-linktype=\"relative-path\">System.Numerics.BigInteger.CompareTo(UInt64)</a> method instead. Some languages can also call the GreaterThanOrEqual method directly, as the following example shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Operators#22\">      Dim bigNumber As BigInteger = BigInteger.Pow(Int32.MaxValue, 2)\n      Dim number As ULong = UInt64.MaxValue\n      If BigInteger.op_GreaterThanOrEqual(bigNumber, number) Then\n         &#39; Do something\n      End If\n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_GreaterThanOrEqual_System_UInt64_System_Numerics_BigInteger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_GreaterThanOrEqual(UInt64,BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether a 64-bit unsigned integer is greater than or equal to a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool op_GreaterThanOrEqual (ulong left, System.Numerics.BigInteger right);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>left</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>right</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>left</code> is greater than <code>right</code>; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_op_GreaterThanOrEqual_\" data-linktype=\"relative-path\">op_GreaterThanOrEqual</a> method defines the operation of the greater than or equal to operator for <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Operators#23\">      BigInteger bigNumber = BigInteger.Pow(Int32.MaxValue, 2);\n      ulong number = UInt64.MaxValue;\n      if (number &gt;= bigNumber) {\n         // Do something\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Operators#23\">      Dim bigNumber As BigInteger = BigInteger.Pow(Int32.MaxValue, 2)\n      Dim number As ULong = UInt64.MaxValue\n      If number &gt;= bigNumber Then\n         &#39; Do something\n      End If\n</code></pre><p> Languages that do not support custom operators can call the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_CompareTo_System_UInt64_\" data-linktype=\"relative-path\">System.Numerics.BigInteger.CompareTo(UInt64)</a> method instead. Some languages can also call the GreaterThanOrEqual method directly, as the following example shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Operators#24\">      Dim bigNumber As BigInteger = BigInteger.Pow(Int32.MaxValue, 2)\n      Dim number As ULong = UInt64.MaxValue\n      If BigInteger.op_GreaterThanOrEqual(number, bigNumber) Then\n         &#39; Do something\n      End If\n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_Implicit_System_Byte_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Implicit(Byte)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Numerics.BigInteger op_Implicit (byte value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_Implicit_System_Int16_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Implicit(Int16)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Numerics.BigInteger op_Implicit (short value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_Implicit_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Implicit(Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Numerics.BigInteger op_Implicit (int value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_Implicit_System_Int64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Implicit(Int64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Numerics.BigInteger op_Implicit (long value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_Implicit_System_SByte_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Implicit(SByte)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Numerics.BigInteger op_Implicit (sbyte value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_Implicit_System_UInt16_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Implicit(UInt16)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Numerics.BigInteger op_Implicit (ushort value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_Implicit_System_UInt32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Implicit(UInt32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Numerics.BigInteger op_Implicit (uint value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_Implicit_System_UInt64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Implicit(UInt64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Numerics.BigInteger op_Implicit (ulong value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_Increment_System_Numerics_BigInteger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Increment(BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Increments a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value by 1.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Numerics.BigInteger op_Increment (System.Numerics.BigInteger value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value to increment.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value of the <code>value</code> parameter incremented by 1.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Increment method defines the increment operation for <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numeric.BigInteger.Class#24\">      BigInteger number = 93843112;\n      Console.WriteLine(++number);               // Displays 93843113\n</code></pre><p> Some languages (such as Visual Basic) that lack an increment operator or do not support operator overloading can call the Increment method directly, as the following example shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numeric.BigInteger.Class#25\">      Dim number As BigInteger = 93843112\n      Console.WriteLine(BigInteger.op_Increment(number))    &#39; Displays 93843113\n</code></pre><p> Because <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> objects are immutable, the Increment operator creates a new <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> object whose value is one more than the <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> object represented by <code>value</code>. Therefore, repeated calls to Increment may be expensive.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_Inequality_System_Int64_System_Numerics_BigInteger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Inequality(Int64,BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether a 64-bit signed integer and a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value are not equal.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool op_Inequality (long left, System.Numerics.BigInteger right);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>left</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>right</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>left</code> and <code>right</code> are not equal; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Inequality method defines the operation of the inequality operator for <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Operators#25\">      BigInteger bigNumber = BigInteger.Pow(2, 63);\n      long number = Int64.MaxValue;\n      if (number != bigNumber)\n      {\n         // Do something...\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Operators#25\">      Dim bigNumber As BigInteger = BigInteger.Pow(2, 63)\n      Dim number As Long = Int64.MaxValue\n      If number &lt;&gt; bigNumber Then\n         &#39; Do something...\n      End If   \n</code></pre><p> Languages that do not support custom operators can test for inequality by using one of the following techniques:  </p>\n<ul>\n<li><p>Calling the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_CompareTo_System_Int64_\" data-linktype=\"relative-path\">System.Numerics.BigInteger.CompareTo(Int64)</a> instance method, which indicates the relationship between a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> and a signed long integer value.  </p>\n</li>\n<li><p>Calling the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Equals_System_Int64_\" data-linktype=\"relative-path\">System.Numerics.BigInteger.Equals(Int64)</a> instance method and reversing its value.  </p>\n<p>If <code>left</code> is a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>, <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a>, <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>, <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>, <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a>, or <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a> value, it is implicitly converted to an <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> value when the operation is performed.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_Inequality_System_Numerics_BigInteger_System_Int64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Inequality(BigInteger,Int64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value and a 64-bit signed integer are not equal.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool op_Inequality (System.Numerics.BigInteger left, long right);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>left</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>right</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>left</code> and <code>right</code> are not equal; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_op_Inequality_\" data-linktype=\"relative-path\">op_Inequality</a> method defines the operation of the inequality operator for <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Operators#26\">      BigInteger bigNumber = BigInteger.Pow(2, 63);\n      long number = Int64.MaxValue;\n      if (bigNumber != number)\n      {\n         // Do something...\n      }   \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Operators#26\">      Dim bigNumber As BigInteger = BigInteger.Pow(2, 63)\n      Dim number As Long = Int64.MaxValue\n      If bigNumber &lt;&gt; number Then\n         &#39; Do something...\n      End If   \n</code></pre><p> Languages that do not support custom operators can test for inequality by using one of the following techniques:  </p>\n<ul>\n<li><p>Calling the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_CompareTo_System_Int64_\" data-linktype=\"relative-path\">System.Numerics.BigInteger.CompareTo(Int64)</a> method, which indicates the relationship between a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> and a signed long integer value.  </p>\n</li>\n<li><p>Calling the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Equals_System_Int64_\" data-linktype=\"relative-path\">System.Numerics.BigInteger.Equals(Int64)</a> method and reversing its value.  </p>\n<p>If <code>right</code> is a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>, <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a>, <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>, <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>, <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a>, or <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a> value, it is implicitly converted to an <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> value when the operation is performed.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_Inequality_System_Numerics_BigInteger_System_Numerics_BigInteger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Inequality(BigInteger,BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether two <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> objects have different values.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool op_Inequality (System.Numerics.BigInteger left, System.Numerics.BigInteger right);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>left</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>right</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>left</code> and <code>right</code> are not equal; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_op_Inequality_\" data-linktype=\"relative-path\">op_Inequality</a> method defines the operation of the inequality operator for <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numeric.BigInteger.Class#26\">      Dim number1 As BigInteger = 945834723\n      Dim number2 As BigInteger = 345145625\n      Dim number3 As BigInteger = 945834723 \n      Console.WriteLine(number1 &lt;&gt; number2)                  &#39; Displays True\n      Console.WriteLine(number1 &lt;&gt; number3)                  &#39; Displays False\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Numeric.BigInteger.Class#26\">      BigInteger number1 = 945834723;\n      BigInteger number2 = 345145625;\n      BigInteger number3 = 945834723; \n      Console.WriteLine(number1 != number2);             // Displays True\n      Console.WriteLine(number1 != number3);             // Displays False\n</code></pre><p> Languages that do not support custom operators can test for inequality by using one of the following techniques:  </p>\n<ul>\n<li><p>Calling the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Compare_\" data-linktype=\"relative-path\">Compare</a> method, which indicates the relationship between two <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> objects.  </p>\n</li>\n<li><p>Calling the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Equals_System_Numerics_BigInteger_\" data-linktype=\"relative-path\">System.Numerics.BigInteger.Equals(BigInteger)</a> method and reversing its value.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_Inequality_System_Numerics_BigInteger_System_UInt64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Inequality(BigInteger,UInt64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value and a 64-bit unsigned integer are not equal.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool op_Inequality (System.Numerics.BigInteger left, ulong right);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>left</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>right</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>left</code> and <code>right</code> are not equal; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_op_Inequality_\" data-linktype=\"relative-path\">op_Inequality</a> method defines the operation of the inequality operator for <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Operators#27\">      BigInteger bigNumber = BigInteger.Pow(2, 63) - BigInteger.One;\n      ulong uNumber = Int64.MaxValue &amp; 0x7FFFFFFFFFFFFFFF;\n      if (bigNumber != uNumber)\n      {\n         // Do something...\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Operators#27\">      Dim bigNumber As BigInteger = BigInteger.Pow(2, 63) - BigInteger.One\n      Dim uNumber As ULong = CULng(Int64.MaxValue And CULng(&amp;h7FFFFFFFFFFFFFFF))\n      If bigNumber &lt;&gt; uNumber Then\n         &#39; Do something...\n      End If\n</code></pre><p> Languages that do not support custom operators can test for inequality by using one of the following techniques:  </p>\n<ul>\n<li><p>Calling the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_CompareTo_System_UInt64_\" data-linktype=\"relative-path\">System.Numerics.BigInteger.CompareTo(UInt64)</a> method, which indicates the relationship between a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> and an unsigned long integer value.  </p>\n</li>\n<li><p>Calling the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Equals_System_UInt64_\" data-linktype=\"relative-path\">System.Numerics.BigInteger.Equals(UInt64)</a> method and reversing its value.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_Inequality_System_UInt64_System_Numerics_BigInteger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Inequality(UInt64,BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether a 64-bit unsigned integer and a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value are not equal.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool op_Inequality (ulong left, System.Numerics.BigInteger right);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>left</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>right</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>left</code> and <code>right</code> are not equal; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_op_Inequality_\" data-linktype=\"relative-path\">op_Inequality</a> method defines the operation of the inequality operator for <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Operators#28\">      BigInteger bigNumber = BigInteger.Pow(2, 63) - BigInteger.One;\n      ulong uNumber = Int64.MaxValue &amp; 0x7FFFFFFFFFFFFFFF;\n      if (uNumber != bigNumber)\n      {\n         // Do something...\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Operators#28\">      Dim bigNumber As BigInteger = BigInteger.Pow(2, 63) - BigInteger.One\n      Dim uNumber As ULong = CULng(Int64.MaxValue And CULng(&amp;h7FFFFFFFFFFFFFFF))\n      If uNumber &lt;&gt; bigNumber Then\n         &#39; Do something...\n      End If\n</code></pre><p> Languages that do not support custom operators can test for inequality by using one of the following techniques:  </p>\n<ul>\n<li><p>Calling the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_CompareTo_System_UInt64_\" data-linktype=\"relative-path\">System.Numerics.BigInteger.CompareTo(UInt64)</a> method, which indicates the relationship between a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> and an unsigned long integer value.  </p>\n</li>\n<li><p>Calling the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Equals_System_UInt64_\" data-linktype=\"relative-path\">System.Numerics.BigInteger.Equals(UInt64)</a> method and reversing its value.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_LeftShift_System_Numerics_BigInteger_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_LeftShift(BigInteger,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Shifts a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value a specified number of bits to the left.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Numerics.BigInteger op_LeftShift (System.Numerics.BigInteger value, int shift);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value whose bits are to be shifted.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>shift</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of bits to shift <code>value</code> to the left.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A value that has been shifted to the left by the specified number of bits.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The LeftShift method defines the operation of the bitwise left-shift operator for <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Operators#29\">      BigInteger number = BigInteger.Parse(&quot;-9047321678449816249999312055&quot;);\n      Console.WriteLine(&quot;Shifting {0} left by:&quot;, number);\n      for (int ctr = 0; ctr &lt;= 16; ctr++)\n      {\n         BigInteger newNumber = number &lt;&lt; ctr;\n         Console.WriteLine(&quot; {0,2} bits: {1,35} {2,30}&quot;, \n                           ctr, newNumber, newNumber.ToString(&quot;X&quot;));\n      }\n      // The example displays the following output:\n      //    Shifting -9047321678449816249999312055 left by:\n      //      0 bits:       -9047321678449816249999312055       E2C43B1D0D6F07D2CC1FBB49\n      //      1 bits:      -18094643356899632499998624110       C588763A1ADE0FA5983F7692\n      //      2 bits:      -36189286713799264999997248220       8B10EC7435BC1F4B307EED24\n      //      3 bits:      -72378573427598529999994496440      F1621D8E86B783E9660FDDA48\n      //      4 bits: -1.4475714685519705999998899288E+29      E2C43B1D0D6F07D2CC1FBB490\n      //      5 bits: -2.8951429371039411999997798576E+29      C588763A1ADE0FA5983F76920\n      //      6 bits: -5.7902858742078823999995597152E+29      8B10EC7435BC1F4B307EED240\n      //      7 bits:  -1.158057174841576479999911943E+30     F1621D8E86B783E9660FDDA480\n      //      8 bits: -2.3161143496831529599998238861E+30     E2C43B1D0D6F07D2CC1FBB4900\n      //      9 bits: -4.6322286993663059199996477722E+30     C588763A1ADE0FA5983F769200\n      //     10 bits: -9.2644573987326118399992955443E+30     8B10EC7435BC1F4B307EED2400\n      //     11 bits: -1.8528914797465223679998591089E+31    F1621D8E86B783E9660FDDA4800\n      //     12 bits: -3.7057829594930447359997182177E+31    E2C43B1D0D6F07D2CC1FBB49000\n      //     13 bits: -7.4115659189860894719994364355E+31    C588763A1ADE0FA5983F7692000\n      //     14 bits: -1.4823131837972178943998872871E+32    8B10EC7435BC1F4B307EED24000\n      //     15 bits: -2.9646263675944357887997745742E+32   F1621D8E86B783E9660FDDA48000\n      //     16 bits: -5.9292527351888715775995491484E+32   E2C43B1D0D6F07D2CC1FBB490000      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Operators#29\">      Dim number As BigInteger = BigInteger.Parse(&quot;-9047321678449816249999312055&quot;)\n      Console.WriteLine(&quot;Shifting {0} left by:&quot;, number)\n      For ctr As Integer = 0 To 16\n         Dim newNumber As BigInteger = number &lt;&lt; ctr\n         Console.WriteLine(&quot; {0,2} bits: {1,35} {2,30}&quot;, ctr, newNumber, newNumber.ToString(&quot;X&quot;))\n      Next\n      &#39; The example displays the following output:\n      &#39;    Shifting -9047321678449816249999312055 left by:\n      &#39;      0 bits:       -9047321678449816249999312055       E2C43B1D0D6F07D2CC1FBB49\n      &#39;      1 bits:      -18094643356899632499998624110       C588763A1ADE0FA5983F7692\n      &#39;      2 bits:      -36189286713799264999997248220       8B10EC7435BC1F4B307EED24\n      &#39;      3 bits:      -72378573427598529999994496440      F1621D8E86B783E9660FDDA48\n      &#39;      4 bits: -1.4475714685519705999998899288E+29      E2C43B1D0D6F07D2CC1FBB490\n      &#39;      5 bits: -2.8951429371039411999997798576E+29      C588763A1ADE0FA5983F76920\n      &#39;      6 bits: -5.7902858742078823999995597152E+29      8B10EC7435BC1F4B307EED240\n      &#39;      7 bits:  -1.158057174841576479999911943E+30     F1621D8E86B783E9660FDDA480\n      &#39;      8 bits: -2.3161143496831529599998238861E+30     E2C43B1D0D6F07D2CC1FBB4900\n      &#39;      9 bits: -4.6322286993663059199996477722E+30     C588763A1ADE0FA5983F769200\n      &#39;     10 bits: -9.2644573987326118399992955443E+30     8B10EC7435BC1F4B307EED2400\n      &#39;     11 bits: -1.8528914797465223679998591089E+31    F1621D8E86B783E9660FDDA4800\n      &#39;     12 bits: -3.7057829594930447359997182177E+31    E2C43B1D0D6F07D2CC1FBB49000\n      &#39;     13 bits: -7.4115659189860894719994364355E+31    C588763A1ADE0FA5983F7692000\n      &#39;     14 bits: -1.4823131837972178943998872871E+32    8B10EC7435BC1F4B307EED24000\n      &#39;     15 bits: -2.9646263675944357887997745742E+32   F1621D8E86B783E9660FDDA48000\n      &#39;     16 bits: -5.9292527351888715775995491484E+32   E2C43B1D0D6F07D2CC1FBB490000      \n</code></pre><div class=\"NOTE\"><h5>Note</h5><p> Unlike the bitwise left-shift operation with integer primitives, the LeftShift method preserves the sign of the original <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value.  </p>\n</div>\n<p> Languages that do not support custom operators can perform a bitwise left-shift operation by multiplying <code>value</code> by <code>BigInteger.Pow(2,``shift``)</code>. The following example shows that the results are identical to the results of using this operator.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Operators#30\">      BigInteger number = BigInteger.Parse(&quot;-9047321678449816249999312055&quot;);\n      Console.WriteLine(&quot;Shifting {0} left by:&quot;, number);\n      for (int ctr = 0; ctr &lt;= 16; ctr++)\n      {\n         BigInteger newNumber = BigInteger.Multiply(number, BigInteger.Pow(2, ctr));\n         Console.WriteLine(&quot; {0,2} bits: {1,35} {2,30}&quot;, \n                           ctr, newNumber, newNumber.ToString(&quot;X&quot;));\n      }\n      // The example displays the following output:\n      //    Shifting -9047321678449816249999312055 left by:\n      //      0 bits:       -9047321678449816249999312055       E2C43B1D0D6F07D2CC1FBB49\n      //      1 bits:      -18094643356899632499998624110       C588763A1ADE0FA5983F7692\n      //      2 bits:      -36189286713799264999997248220       8B10EC7435BC1F4B307EED24\n      //      3 bits:      -72378573427598529999994496440      F1621D8E86B783E9660FDDA48\n      //      4 bits: -1.4475714685519705999998899288E+29      E2C43B1D0D6F07D2CC1FBB490\n      //      5 bits: -2.8951429371039411999997798576E+29      C588763A1ADE0FA5983F76920\n      //      6 bits: -5.7902858742078823999995597152E+29      8B10EC7435BC1F4B307EED240\n      //      7 bits:  -1.158057174841576479999911943E+30     F1621D8E86B783E9660FDDA480\n      //      8 bits: -2.3161143496831529599998238861E+30     E2C43B1D0D6F07D2CC1FBB4900\n      //      9 bits: -4.6322286993663059199996477722E+30     C588763A1ADE0FA5983F769200\n      //     10 bits: -9.2644573987326118399992955443E+30     8B10EC7435BC1F4B307EED2400\n      //     11 bits: -1.8528914797465223679998591089E+31    F1621D8E86B783E9660FDDA4800\n      //     12 bits: -3.7057829594930447359997182177E+31    E2C43B1D0D6F07D2CC1FBB49000\n      //     13 bits: -7.4115659189860894719994364355E+31    C588763A1ADE0FA5983F7692000\n      //     14 bits: -1.4823131837972178943998872871E+32    8B10EC7435BC1F4B307EED24000\n      //     15 bits: -2.9646263675944357887997745742E+32   F1621D8E86B783E9660FDDA48000\n      //     16 bits: -5.9292527351888715775995491484E+32   E2C43B1D0D6F07D2CC1FBB490000      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Operators#30\">      Dim number As BigInteger = BigInteger.Parse(&quot;-9047321678449816249999312055&quot;)\n      Console.WriteLine(&quot;Shifting {0} left by:&quot;, number)\n      For ctr As Integer = 0 To 16\n         Dim newNumber As BigInteger = BigInteger.Multiply(number, BigInteger.Pow(2, ctr))\n         Console.WriteLine(&quot; {0,2} bits: {1,35} {2,30}&quot;, \n                           ctr, newNumber, newNumber.ToString(&quot;X&quot;))\n      Next\n      &#39; The example displays the following output:\n      &#39;    Shifting -9047321678449816249999312055 left by:\n      &#39;      0 bits:       -9047321678449816249999312055       E2C43B1D0D6F07D2CC1FBB49\n      &#39;      1 bits:      -18094643356899632499998624110       C588763A1ADE0FA5983F7692\n      &#39;      2 bits:      -36189286713799264999997248220       8B10EC7435BC1F4B307EED24\n      &#39;      3 bits:      -72378573427598529999994496440      F1621D8E86B783E9660FDDA48\n      &#39;      4 bits: -1.4475714685519705999998899288E+29      E2C43B1D0D6F07D2CC1FBB490\n      &#39;      5 bits: -2.8951429371039411999997798576E+29      C588763A1ADE0FA5983F76920\n      &#39;      6 bits: -5.7902858742078823999995597152E+29      8B10EC7435BC1F4B307EED240\n      &#39;      7 bits:  -1.158057174841576479999911943E+30     F1621D8E86B783E9660FDDA480\n      &#39;      8 bits: -2.3161143496831529599998238861E+30     E2C43B1D0D6F07D2CC1FBB4900\n      &#39;      9 bits: -4.6322286993663059199996477722E+30     C588763A1ADE0FA5983F769200\n      &#39;     10 bits: -9.2644573987326118399992955443E+30     8B10EC7435BC1F4B307EED2400\n      &#39;     11 bits: -1.8528914797465223679998591089E+31    F1621D8E86B783E9660FDDA4800\n      &#39;     12 bits: -3.7057829594930447359997182177E+31    E2C43B1D0D6F07D2CC1FBB49000\n      &#39;     13 bits: -7.4115659189860894719994364355E+31    C588763A1ADE0FA5983F7692000\n      &#39;     14 bits: -1.4823131837972178943998872871E+32    8B10EC7435BC1F4B307EED24000\n      &#39;     15 bits: -2.9646263675944357887997745742E+32   F1621D8E86B783E9660FDDA48000\n      &#39;     16 bits: -5.9292527351888715775995491484E+32   E2C43B1D0D6F07D2CC1FBB490000      \n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_LessThan_System_Int64_System_Numerics_BigInteger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_LessThan(Int64,BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether a 64-bit signed integer is less than a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool op_LessThan (long left, System.Numerics.BigInteger right);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>left</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>right</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>left</code> is less than <code>right</code>; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The LessThan method defines the operation of the less than operator for <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Operators#31\">      BigInteger number = BigInteger.Parse(&quot;9801324316220166912&quot;);\n      if (Int64.MaxValue &lt; number)\n      {\n         // Do something.\n      }\n      else\n      {\n         // Do something else.\n      }      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Operators#31\">      Dim number As BigInteger = BigInteger.Parse(&quot;9801324316220166912&quot;)\n      If Int64.MaxValue &lt; number Then\n         &#39; Do something.\n      Else\n         &#39; Do something else.\n      End If      \n</code></pre><p> Languages that do not support custom operators can call the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_CompareTo_System_Int64_\" data-linktype=\"relative-path\">System.Numerics.BigInteger.CompareTo(Int64)</a> method instead. Some languages can also call the LessThan method directly, as the following example shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Operators#32\">      Dim number As BigInteger = BigInteger.Parse(&quot;9801324316220166912&quot;)\n      If BigInteger.op_LessThan(Int64.MaxValue, number) Then\n         &#39; Do something.\n      Else\n         &#39; Do something else.\n      End If      \n</code></pre><p> If <code>left</code> is a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>, <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a>, <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>, <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>, <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a>, or <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a> value, it is implicitly converted to an <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> value when the operation is performed.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_LessThan_System_Numerics_BigInteger_System_Int64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_LessThan(BigInteger,Int64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value is less than a 64-bit signed integer.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool op_LessThan (System.Numerics.BigInteger left, long right);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>left</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>right</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>left</code> is less than <code>right</code>; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_op_LessThan_\" data-linktype=\"relative-path\">op_LessThan</a> method defines the operation of the less than operator for <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Operators#33\">      BigInteger number = BigInteger.Parse(&quot;9801324316220166912&quot;);\n      if (number &lt; Int64.MaxValue)\n      {\n         // Do something.\n      }\n      else\n      {\n         // Do something else.\n      }      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Operators#33\">      Dim number As BigInteger = BigInteger.Parse(&quot;9801324316220166912&quot;)\n      If number &lt; Int64.MaxValue Then\n         &#39; Do something.\n      Else\n         &#39; Do something else.\n      End If      \n</code></pre><p> Languages that do not support custom operators can call the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_CompareTo_System_Int64_\" data-linktype=\"relative-path\">System.Numerics.BigInteger.CompareTo(Int64)</a> method instead. Some languages can also call the LessThan method directly, as the following example shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Operators#34\">      Dim number As BigInteger = BigInteger.Parse(&quot;9801324316220166912&quot;)\n      If BigInteger.op_LessThan(number, Int64.MaxValue) Then\n         &#39; Do something.\n      Else\n         &#39; Do something else.\n      End If      \n</code></pre><p> If <code>right</code> is a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>, <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a>, <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>, <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>, <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a>, or <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a> value, it is implicitly converted to an <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> value when the operation is performed.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_LessThan_System_Numerics_BigInteger_System_Numerics_BigInteger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_LessThan(BigInteger,BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value is less than another <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool op_LessThan (System.Numerics.BigInteger left, System.Numerics.BigInteger right);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>left</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>right</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>left</code> is less than <code>right</code>; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_op_LessThan_\" data-linktype=\"relative-path\">op_LessThan</a> method defines the operation of the less than operator for <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numeric.BigInteger.Class#27\">      Dim number1 As BigInteger = 945834723\n      Dim number2 As BigInteger = 345145625\n      Dim number3 As BigInteger = 945834724 \n      Console.WriteLine(number1 &lt; number2)                  &#39; Displays False\n      Console.WriteLine(number1 &lt; number3)                  &#39; Displays True\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Numeric.BigInteger.Class#27\">      BigInteger number1 = 945834723;\n      BigInteger number2 = 345145625;\n      BigInteger number3 = 945834724;\n      Console.WriteLine(number1 &lt; number2);              // Displays False\n      Console.WriteLine(number1 &lt; number3);              // Displays True\n</code></pre><p> Languages that do not support custom operators can call the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Compare_\" data-linktype=\"relative-path\">Compare</a> method instead. Some languages can also call the LessThan method directly, as the following example shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numeric.BigInteger.Class#28\">      Dim numberA As BigInteger = 945834723\n      Dim numberB As BigInteger = 345145625\n      Dim numberC As BigInteger = 945834724 \n      Console.WriteLine(BigInteger.op_LessThan(numberA, numberB))    &#39; Displays False\n      Console.WriteLine(BigInteger.op_LessThan(numberA, numberC))    &#39; Displays True\n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_LessThan_System_Numerics_BigInteger_System_UInt64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_LessThan(BigInteger,UInt64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value is less than a 64-bit unsigned integer.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool op_LessThan (System.Numerics.BigInteger left, ulong right);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>left</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>right</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>left</code> is less than <code>right</code>; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_op_LessThan_\" data-linktype=\"relative-path\">op_LessThan</a> method defines the operation of the less than operator for <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Operators#35\">      BigInteger number = BigInteger.Parse(&quot;19801324316220166912&quot;);\n      if (number &lt; UInt64.MaxValue)\n      {\n         // Do something.\n      }\n      else\n      {\n         // Do something else.\n      }      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Operators#35\">      Dim number As BigInteger = BigInteger.Parse(&quot;19801324316220166912&quot;)\n      If number &lt; UInt64.MaxValue Then\n         &#39; Do something.\n      Else\n         &#39; Do something else.\n      End If      \n</code></pre><p> Languages that do not support custom operators can call the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_CompareTo_System_UInt64_\" data-linktype=\"relative-path\">System.Numerics.BigInteger.CompareTo(UInt64)</a> method instead. They can also call the LessThan method directly, as the following example shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Operators#36\">      Dim number As BigInteger = BigInteger.Parse(&quot;19801324316220166912&quot;)\n      If BigInteger.op_LessThan(number, UInt64.MaxValue) Then\n         &#39; Do something.\n      Else\n         &#39; Do something else.\n      End If      \n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_LessThan_System_UInt64_System_Numerics_BigInteger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_LessThan(UInt64,BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether a 64-bit unsigned integer is less than a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool op_LessThan (ulong left, System.Numerics.BigInteger right);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>left</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>right</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>left</code> is less than <code>right</code>; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_op_LessThan_\" data-linktype=\"relative-path\">op_LessThan</a> method defines the operation of the less than operator for <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Operators#37\">      BigInteger number = BigInteger.Parse(&quot;9801324316220166912&quot;);\n      if (UInt64.MaxValue &lt; number)\n      {\n         // Do something.\n      }\n      else\n      {\n         // Do something else.\n      }      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Operators#37\">      Dim number As BigInteger = BigInteger.Parse(&quot;9801324316220166912&quot;)\n      If UInt64.MaxValue &lt; number Then\n         &#39; Do something.\n      Else\n         &#39; Do something else.\n      End If      \n</code></pre><p> Languages that do not support custom operators can call the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_CompareTo_System_UInt64_\" data-linktype=\"relative-path\">System.Numerics.BigInteger.CompareTo(UInt64)</a> method instead. They can also call the LessThan method directly, as the following example shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Operators#38\">      Dim number As BigInteger = BigInteger.Parse(&quot;9801324316220166912&quot;)\n      If BigInteger.op_LessThan(UInt64.MaxValue, number) Then\n         &#39; Do something.\n      Else\n         &#39; Do something else.\n      End If      \n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_LessThanOrEqual_System_Int64_System_Numerics_BigInteger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_LessThanOrEqual(Int64,BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether a 64-bit signed integer is less than or equal to a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool op_LessThanOrEqual (long left, System.Numerics.BigInteger right);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>left</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>right</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>left</code> is less than or equal to <code>right</code>; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The LessThanOrEqual method defines the operation of the less than or equal to operator for <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Operators#39\">      BigInteger number = BigInteger.Parse(&quot;9801324316220166912&quot;);\n      if (Int64.MaxValue &lt;= number)\n      {\n         // Do something.\n      }\n      else\n      {\n         // Do something else.\n      }      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Operators#39\">      Dim number As BigInteger = BigInteger.Parse(&quot;9801324316220166912&quot;)\n      If Int64.MaxValue &lt;= number Then\n         &#39; Do something.\n      Else\n         &#39; Do something else.\n      End If      \n</code></pre><p> Languages that do not support custom operators can call the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_CompareTo_System_Int64_\" data-linktype=\"relative-path\">System.Numerics.BigInteger.CompareTo(Int64)</a> method instead. They can also call the LessThanOrEqual method directly, as the following example shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Operators#40\">      Dim number As BigInteger = BigInteger.Parse(&quot;9801324316220166912&quot;)\n      If BigInteger.op_LessThanOrEqual(Int64.MaxValue, number) Then\n         &#39; Do something.\n      Else\n         &#39; Do something else.\n      End If      \n</code></pre><p> If <code>left</code> is a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>, <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a>, <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>, <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>, <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a>, or <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a> value, it is implicitly converted to an <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> value when the operation is performed.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_LessThanOrEqual_System_Numerics_BigInteger_System_Int64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_LessThanOrEqual(BigInteger,Int64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value is less than or equal to a 64-bit signed integer.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool op_LessThanOrEqual (System.Numerics.BigInteger left, long right);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>left</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>right</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>left</code> is less than or equal to <code>right</code>; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_op_LessThanOrEqual_\" data-linktype=\"relative-path\">op_LessThanOrEqual</a> method defines the operation of the less than or equal to operator for <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Operators#41\">      BigInteger number = BigInteger.Parse(&quot;9801324316220166912&quot;);\n      if (number &lt;= Int64.MaxValue)\n      {\n         // Do something.\n      }\n      else\n      {\n         // Do something else.\n      }      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Operators#41\">      Dim number As BigInteger = BigInteger.Parse(&quot;9801324316220166912&quot;)\n      If number &lt;= Int64.MaxValue Then\n         &#39; Do something.\n      Else\n         &#39; Do something else.\n      End If      \n</code></pre><p> Languages that do not support custom operators can call the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_CompareTo_System_Int64_\" data-linktype=\"relative-path\">System.Numerics.BigInteger.CompareTo(Int64)</a> method instead. They can also call the LessThanOrEqual method directly, as the following example shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Operators#42\">      Dim number As BigInteger = BigInteger.Parse(&quot;9801324316220166912&quot;)\n      If BigInteger.op_LessThanOrEqual(number, Int64.MaxValue) Then\n         &#39; Do something.\n      Else\n         &#39; Do something else.\n      End If      \n</code></pre><p> If <code>right</code> is a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>, <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a>, <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>, <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>, <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a>, or <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a> value, it is implicitly converted to an <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> value when the operation is performed.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_LessThanOrEqual_System_Numerics_BigInteger_System_Numerics_BigInteger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_LessThanOrEqual(BigInteger,BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value is less than or equal to another <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool op_LessThanOrEqual (System.Numerics.BigInteger left, System.Numerics.BigInteger right);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>left</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>right</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>left</code> is less than or equal to <code>right</code>; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_op_LessThanOrEqual_\" data-linktype=\"relative-path\">op_LessThanOrEqual</a> method defines the operation of the less than or equal to operator for <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numeric.BigInteger.Class#29\">      Dim number1 As BigInteger = 945834723\n      Dim number2 As BigInteger = 345145625\n      Dim number3 As BigInteger = 945834724 \n      Dim number4 As BigInteger = 945834723\n      Console.WriteLine(number1 &lt;= number2)                 &#39; Displays False\n      Console.WriteLine(number1 &lt;= number3)                 &#39; Displays True\n      Console.WriteLine(number1 &lt;= number4)                 &#39; Displays True\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Numeric.BigInteger.Class#29\">      BigInteger number1 = 945834723;\n      BigInteger number2 = 345145625;\n      BigInteger number3 = 945834724;\n      BigInteger number4 = 945834723;\n      Console.WriteLine(number1 &lt;= number2);             // Displays False\n      Console.WriteLine(number1 &lt;= number3);             // Displays True\n      Console.WriteLine(number1 &lt;= number4);             // Displays True\n</code></pre><p> Languages that do not support custom operators can call the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Compare_\" data-linktype=\"relative-path\">Compare</a> method instead. They can also call the LessThanOrEqual method directly, as the following example shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numeric.BigInteger.Class#30\">      Dim numberA As BigInteger = 945834723\n      Dim numberB As BigInteger = 345145625\n      Dim numberC As BigInteger = 945834724 \n      Dim numberD As BigInteger = 945834723\n      Console.WriteLine( _\n              BigInteger.op_LessThanOrEqual(numberA, numberB))    &#39; Displays False\n      Console.WriteLine( _\n              BigInteger.op_LessThanOrEqual(numberA, numberC))    &#39; Displays True\n      Console.WriteLine( _\n              BigInteger.op_LessThanOrEqual(numberA, numberD))    &#39; Displays True       \n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_LessThanOrEqual_System_Numerics_BigInteger_System_UInt64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_LessThanOrEqual(BigInteger,UInt64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value is less than or equal to a 64-bit unsigned integer.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool op_LessThanOrEqual (System.Numerics.BigInteger left, ulong right);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>left</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>right</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>left</code> is less than or equal to <code>right</code>; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_op_LessThanOrEqual_\" data-linktype=\"relative-path\">op_LessThanOrEqual</a> method defines the operation of the less than or equal to operator for <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Operators#43\">      BigInteger number = BigInteger.Parse(&quot;19801324316220166912&quot;);\n      if (number &lt;= UInt64.MaxValue)\n      {\n         // Do something.\n      }\n      else\n      {\n         // Do something else.\n      }      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Operators#43\">      Dim number As BigInteger = BigInteger.Parse(&quot;19801324316220166912&quot;)\n      If number &lt;= UInt64.MaxValue Then\n         &#39; Do something.\n      Else\n         &#39; Do something else.\n      End If      \n</code></pre><p> Languages that do not support custom operators can call the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_CompareTo_System_UInt64_\" data-linktype=\"relative-path\">System.Numerics.BigInteger.CompareTo(UInt64)</a> method instead. They can also call the LessThanOrEqual method directly, as the following example shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Operators#44\">      Dim number As BigInteger = BigInteger.Parse(&quot;19801324316220166912&quot;)\n      If BigInteger.op_LessThanOrEqual(number, UInt64.MaxValue) Then\n         &#39; Do something.\n      Else\n         &#39; Do something else.\n      End If      \n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_LessThanOrEqual_System_UInt64_System_Numerics_BigInteger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_LessThanOrEqual(UInt64,BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether a 64-bit unsigned integer is less than or equal to a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool op_LessThanOrEqual (ulong left, System.Numerics.BigInteger right);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>left</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>right</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second value to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>left</code> is less than or equal to <code>right</code>; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_op_LessThanOrEqual_\" data-linktype=\"relative-path\">op_LessThanOrEqual</a> method defines the operation of the less than or equal to operator for <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Operators#45\">      BigInteger number = BigInteger.Parse(&quot;9801324316220166912&quot;);\n      if (UInt64.MaxValue &lt;= number)\n      {\n         // Do something.\n      }\n      else\n      {\n         // Do something else.\n      }      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Operators#45\">      Dim number As BigInteger = BigInteger.Parse(&quot;9801324316220166912&quot;)\n      If UInt64.MaxValue &lt;= number Then\n         &#39; Do something.\n      Else\n         &#39; Do something else.\n      End If      \n</code></pre><p> Languages that do not support custom operators can call the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_CompareTo_System_UInt64_\" data-linktype=\"relative-path\">System.Numerics.BigInteger.CompareTo(UInt64)</a> method instead. They can also call the LessThanOrEqual method directly, as the following example shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Operators#46\">      Dim number As BigInteger = BigInteger.Parse(&quot;9801324316220166912&quot;)\n      If BigInteger.op_LessThanOrEqual(UInt64.MaxValue, number) Then\n         &#39; Do something.\n      Else\n         &#39; Do something else.\n      End If      \n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_Modulus_System_Numerics_BigInteger_System_Numerics_BigInteger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Modulus(BigInteger,BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the remainder that results from division with two specified <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Numerics.BigInteger op_Modulus (System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>dividend</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value to be divided.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>divisor</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value to divide by.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The remainder that results from the division.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.dividebyzeroexception\" data-linktype=\"relative-path\">DivideByZeroException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>divisor</code> is 0 (zero).</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Modulus method defines the operation of the modulus operator for <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numeric.BigInteger.Class#31\">      Dim num1 As BigInteger = 100045632194\n      Dim num2 As BigInteger = 90329434\n      Dim remainder As BigInteger = num1 Mod num2\n      Console.WriteLine(remainder)                 &#39; Displays  50948756 \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Numeric.BigInteger.Class#31\">      BigInteger num1 = 100045632194;\n      BigInteger num2 = 90329434;\n      BigInteger remainder = num1 % num2;\n      Console.WriteLine(remainder);           // Displays 50948756\n</code></pre><p> Languages that do not support custom operators can call the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Remainder_\" data-linktype=\"relative-path\">Remainder</a> method instead.  </p>\n<p> The sign of the value returned by the modulus operation depends on the sign of <code>dividend</code>: If <code>dividend</code> is positive, the modulus operation returns a positive result; if it is negative, the modulus operation returns a negative result. The behavior of the modulus operation with <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values is identical to the modulus operation with other integral types.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_Multiply_System_Numerics_BigInteger_System_Numerics_BigInteger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Multiply(BigInteger,BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Multiplies two specified <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Numerics.BigInteger op_Multiply (System.Numerics.BigInteger left, System.Numerics.BigInteger right);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>left</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first value to multiply.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>right</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second value to multiply.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The product of <code>left</code> and <code>right</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Multiply method defines the operation of the multiplication operator for <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numeric.BigInteger.Class#11\">      Dim num1 As BigInteger = 1000456321\n      Dim num2 As BigInteger = 90329434\n      Dim result As BigInteger = num1 * num2\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Numeric.BigInteger.Class#11\">      BigInteger num1 = 1000456321;\n      BigInteger num2 = 90329434;\n      BigInteger result = num1 * num2;\n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_OnesComplement_System_Numerics_BigInteger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_OnesComplement(BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the bitwise one&#39;s complement of a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Numerics.BigInteger op_OnesComplement (System.Numerics.BigInteger value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An integer value.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The bitwise one&#39;s complement of <code>value</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The OnesComplement method defines the operation of the bitwise one&#39;s complement operator for <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values. The bitwise one&#39;s complement operator reverses each bit in a numeric value. That is, bits in <code>value</code> that are 0 are set to 1 in the result, and bits that are 1 are set to 0 in the result. The OnesComplement method enables code such as the following:  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.OnesComplement#1\">Imports System.Numerics\n\nModule Example\n   Public Sub Main()\n      Dim value, complement As bigInteger\n      \n      value = BigInteger.Multiply(BigInteger.One, 9)\n      complement = Not value\n      \n      Console.WriteLine(&quot;{0,5} -- {1,-32}&quot;, value, DisplayInBinary(value))\n      Console.WriteLine(&quot;{0,5} -- {1,-32}&quot;, complement, DisplayInBinary(complement))\n      Console.WriteLine()\n   \n      value = BigInteger.MinusOne * SByte.MaxValue\n      complement = BigInteger.op_OnesComplement(value)\n      \n      Console.WriteLine(&quot;{0,5} -- {1,-32}&quot;, value, DisplayInBinary(value))\n      Console.WriteLine(&quot;{0,5} -- {1,-32}&quot;, complement, DisplayInBinary(complement))\n      Console.WriteLine()\n   End Sub\n\n   Private Function DisplayInBinary(number As BigInteger) As String\n      Dim bytes() As Byte = number.ToByteArray()  \n      Dim binaryString As String = String.Empty\n      For Each byteValue As Byte In bytes\n         Dim byteString As String = Convert.ToString(byteValue, 2).Trim()\n         binaryString += byteString.Insert(0, New String(&quot;0&quot;c, 8 - byteString.Length))\n      Next\n      Return binaryString    \n   End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;           9 -- 00001001\n&#39;         -10 -- 11110110\n&#39;       \n&#39;        -127 -- 10000001\n&#39;         126 -- 01111110\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.OnesComplement#1\">using System;\nusing System.Numerics;\n\npublic class Example\n{\n   public static void Main()\n   {\n      BigInteger value, complement;\n      \n      value = BigInteger.Multiply(BigInteger.One, 9);\n      complement = ~value;\n      \n      Console.WriteLine(&quot;{0,5} -- {1,-32}&quot;, value, DisplayInBinary(value));\n      Console.WriteLine(&quot;{0,5} -- {1,-32}\\n&quot;, complement, DisplayInBinary(complement));\n   \n      value = BigInteger.MinusOne * SByte.MaxValue;\n      complement = ~value;\n      \n      Console.WriteLine(&quot;{0,5} -- {1,-32}&quot;, value, DisplayInBinary(value));\n      Console.WriteLine(&quot;{0,5} -- {1,-32}\\n&quot;, complement, DisplayInBinary(complement));\n   } \n\n   private static string DisplayInBinary(BigInteger number)\n   {\n      byte[] bytes = number.ToByteArray();  \n      string binaryString = string.Empty;\n      foreach (byte byteValue in bytes)\n      {\n         string byteString = Convert.ToString(byteValue, 2).Trim();\n         binaryString += byteString.Insert(0, new string(&#39;0&#39;, 8 - byteString.Length));\n      }\n      return binaryString;    \n   }\n}\n// The example displays the following output:\n//           9 -- 00001001\n//         -10 -- 11110110\n//       \n//        -127 -- 10000001\n//         126 -- 01111110\n</code></pre><p> Languages that do not support custom operators may be able to call the OnesComplement method directly to perform a bitwise one&#39;s complement operation. For example:  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.OnesComplement#2\">Imports System.Numerics\n\nModule Example\n   Public Sub Main()\n      Dim value, complement As bigInteger\n      \n      value = BigInteger.Multiply(BigInteger.One, 9)\n      complement = BigInteger.op_OnesComplement(value)\n      \n      Console.WriteLine(&quot;{0,5} -- {1,-32}&quot;, value, DisplayInBinary(value))\n      Console.WriteLine(&quot;{0,5} -- {1,-32}&quot;, complement, DisplayInBinary(complement))\n      Console.WriteLine()\n   \n      value = BigInteger.MinusOne * SByte.MaxValue\n      complement = BigInteger.op_OnesComplement(value)\n      \n      Console.WriteLine(&quot;{0,5} -- {1,-32}&quot;, value, DisplayInBinary(value))\n      Console.WriteLine(&quot;{0,5} -- {1,-32}&quot;, complement, DisplayInBinary(complement))\n      Console.WriteLine()\n   End Sub\n\n   Private Function DisplayInBinary(number As BigInteger) As String\n      Dim bytes() As Byte = number.ToByteArray()  \n      Dim binaryString As String = String.Empty\n      For Each byteValue As Byte In bytes\n         Dim byteString As String = Convert.ToString(byteValue, 2).Trim()\n         binaryString += byteString.Insert(0, New String(&quot;0&quot;c, 8 - byteString.Length))\n      Next\n      Return binaryString    \n   End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;           9 -- 00001001\n&#39;         -10 -- 11110110\n&#39;       \n&#39;        -127 -- 10000001\n&#39;         126 -- 01111110\n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_RightShift_System_Numerics_BigInteger_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_RightShift(BigInteger,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Shifts a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value a specified number of bits to the right.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Numerics.BigInteger op_RightShift (System.Numerics.BigInteger value, int shift);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value whose bits are to be shifted.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>shift</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of bits to shift <code>value</code> to the right.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A value that has been shifted to the right by the specified number of bits.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The RightShift method defines the operation of the bitwise right-shift operator for <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Operators#47\">      var number = BigInteger.Parse(&quot;-9047321678449816249999312055&quot;);\n      Console.WriteLine(&quot;Shifting {0} right by:&quot;, number);\n      for (int ctr = 0; ctr &lt;= 16; ctr++) {\n         BigInteger newNumber = number &gt;&gt; ctr;\n         Console.WriteLine(&quot; {0,2} bits: {1,35} {2,30}&quot;, ctr, newNumber, newNumber.ToString(&quot;X&quot;));\n      }\n      // The example displays the following output:\n      //    Shifting -9047321678449816249999312055 right by:\n      //      0 bits:       -9047321678449816249999312055       E2C43B1D0D6F07D2CC1FBB49\n      //      1 bits:       -4523660839224908124999656028       F1621D8E86B783E9660FDDA4\n      //      2 bits:       -2261830419612454062499828014        8B10EC7435BC1F4B307EED2\n      //      3 bits:       -1130915209806227031249914007        C588763A1ADE0FA5983F769\n      //      4 bits:        -565457604903113515624957004        E2C43B1D0D6F07D2CC1FBB4\n      //      5 bits:        -282728802451556757812478502        F1621D8E86B783E9660FDDA\n      //      6 bits:        -141364401225778378906239251         8B10EC7435BC1F4B307EED\n      //      7 bits:         -70682200612889189453119626         C588763A1ADE0FA5983F76\n      //      8 bits:         -35341100306444594726559813         E2C43B1D0D6F07D2CC1FBB\n      //      9 bits:         -17670550153222297363279907         F1621D8E86B783E9660FDD\n      //     10 bits:          -8835275076611148681639954          8B10EC7435BC1F4B307EE\n      //     11 bits:          -4417637538305574340819977          C588763A1ADE0FA5983F7\n      //     12 bits:          -2208818769152787170409989          E2C43B1D0D6F07D2CC1FB\n      //     13 bits:          -1104409384576393585204995          F1621D8E86B783E9660FD\n      //     14 bits:           -552204692288196792602498           8B10EC7435BC1F4B307E\n      //     15 bits:           -276102346144098396301249           C588763A1ADE0FA5983F\n      //     16 bits:           -138051173072049198150625           E2C43B1D0D6F07D2CC1F\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Operators#47\">      Dim number As BigInteger = BigInteger.Parse(&quot;-9047321678449816249999312055&quot;)\n      Console.WriteLine(&quot;Shifting {0} right by:&quot;, number)\n      For ctr As Integer = 0 To 16\n         Dim newNumber As BigInteger = number &gt;&gt; ctr\n         Console.WriteLine(&quot; {0,2} bits: {1,35} {2,30}&quot;, ctr, newNumber, newNumber.ToString(&quot;X&quot;))\n      Next\n      &#39; The example displays the following output:\n      &#39;    Shifting -9047321678449816249999312055 right by:\n      &#39;      0 bits:       -9047321678449816249999312055       E2C43B1D0D6F07D2CC1FBB49\n      &#39;      1 bits:       -4523660839224908124999656028       F1621D8E86B783E9660FDDA4\n      &#39;      2 bits:       -2261830419612454062499828014        8B10EC7435BC1F4B307EED2\n      &#39;      3 bits:       -1130915209806227031249914007        C588763A1ADE0FA5983F769\n      &#39;      4 bits:        -565457604903113515624957004        E2C43B1D0D6F07D2CC1FBB4\n      &#39;      5 bits:        -282728802451556757812478502        F1621D8E86B783E9660FDDA\n      &#39;      6 bits:        -141364401225778378906239251         8B10EC7435BC1F4B307EED\n      &#39;      7 bits:         -70682200612889189453119626         C588763A1ADE0FA5983F76\n      &#39;      8 bits:         -35341100306444594726559813         E2C43B1D0D6F07D2CC1FBB\n      &#39;      9 bits:         -17670550153222297363279907         F1621D8E86B783E9660FDD\n      &#39;     10 bits:          -8835275076611148681639954          8B10EC7435BC1F4B307EE\n      &#39;     11 bits:          -4417637538305574340819977          C588763A1ADE0FA5983F7\n      &#39;     12 bits:          -2208818769152787170409989          E2C43B1D0D6F07D2CC1FB\n      &#39;     13 bits:          -1104409384576393585204995          F1621D8E86B783E9660FD\n      &#39;     14 bits:           -552204692288196792602498           8B10EC7435BC1F4B307E\n      &#39;     15 bits:           -276102346144098396301249           C588763A1ADE0FA5983F\n      &#39;     16 bits:           -138051173072049198150625           E2C43B1D0D6F07D2CC1F\n</code></pre><p> Languages that do not support custom operators can perform a bitwise right-shift operation by dividing <code>value</code> by <code>BigInteger.Pow(2,``shift``)</code> and subtracting 1 times <code>shift</code> for negative values. The following example shows that the results are identical to the results of using this operator.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.BigInteger.Operators#48\">      var number = BigInteger.Parse(&quot;-9047321678449816249999312055&quot;);\n      Console.WriteLine(&quot;Shifting {0} right by:&quot;, number);\n      for (int ctr = 0; ctr &lt;= 16; ctr++) {\n         BigInteger newNumber = BigInteger.Divide(number, BigInteger.Pow(2, ctr));\n         if (newNumber * ctr &lt; 0)\n            newNumber--;\n         \n         Console.WriteLine(&quot; {0,2} bits: {1,35} {2,30}&quot;, \n                           ctr, newNumber, newNumber.ToString(&quot;X&quot;));\n      }\n      // The example displays the following output:\n      //      0 bits:       -9047321678449816249999312055       E2C43B1D0D6F07D2CC1FBB49\n      //      1 bits:       -4523660839224908124999656028       F1621D8E86B783E9660FDDA4\n      //      2 bits:       -2261830419612454062499828014        8B10EC7435BC1F4B307EED2\n      //      3 bits:       -1130915209806227031249914007        C588763A1ADE0FA5983F769\n      //      4 bits:        -565457604903113515624957004        E2C43B1D0D6F07D2CC1FBB4\n      //      5 bits:        -282728802451556757812478502        F1621D8E86B783E9660FDDA\n      //      6 bits:        -141364401225778378906239251         8B10EC7435BC1F4B307EED\n      //      7 bits:         -70682200612889189453119626         C588763A1ADE0FA5983F76\n      //      8 bits:         -35341100306444594726559813         E2C43B1D0D6F07D2CC1FBB\n      //      9 bits:         -17670550153222297363279907         F1621D8E86B783E9660FDD\n      //     10 bits:          -8835275076611148681639954          8B10EC7435BC1F4B307EE\n      //     11 bits:          -4417637538305574340819977          C588763A1ADE0FA5983F7\n      //     12 bits:          -2208818769152787170409989          E2C43B1D0D6F07D2CC1FB\n      //     13 bits:          -1104409384576393585204995          F1621D8E86B783E9660FD\n      //     14 bits:           -552204692288196792602498           8B10EC7435BC1F4B307E\n      //     15 bits:           -276102346144098396301249           C588763A1ADE0FA5983F\n      //     16 bits:           -138051173072049198150625           E2C43B1D0D6F07D2CC1F\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.BigInteger.Operators#48\">      Dim number As BigInteger = BigInteger.Parse(&quot;-9047321678449816249999312055&quot;)\n      Console.WriteLine(&quot;Shifting {0} right by:&quot;, number)\n      For ctr As Integer = 0 To 16\n         Dim newNumber As BigInteger = BigInteger.Divide(number, BigInteger.Pow(2, ctr))\n         If newNumber * ctr &lt; 0 Then newNumber = newNumber - 1\n         Console.WriteLine(&quot; {0,2} bits: {1,35} {2,30}&quot;, \n                           ctr, newNumber, newNumber.ToString(&quot;X&quot;))\n      Next\n      &#39; The example displays the following output:\n      &#39;      0 bits:       -9047321678449816249999312055       E2C43B1D0D6F07D2CC1FBB49\n      &#39;      1 bits:       -4523660839224908124999656028       F1621D8E86B783E9660FDDA4\n      &#39;      2 bits:       -2261830419612454062499828014        8B10EC7435BC1F4B307EED2\n      &#39;      3 bits:       -1130915209806227031249914007        C588763A1ADE0FA5983F769\n      &#39;      4 bits:        -565457604903113515624957004        E2C43B1D0D6F07D2CC1FBB4\n      &#39;      5 bits:        -282728802451556757812478502        F1621D8E86B783E9660FDDA\n      &#39;      6 bits:        -141364401225778378906239251         8B10EC7435BC1F4B307EED\n      &#39;      7 bits:         -70682200612889189453119626         C588763A1ADE0FA5983F76\n      &#39;      8 bits:         -35341100306444594726559813         E2C43B1D0D6F07D2CC1FBB\n      &#39;      9 bits:         -17670550153222297363279907         F1621D8E86B783E9660FDD\n      &#39;     10 bits:          -8835275076611148681639954          8B10EC7435BC1F4B307EE\n      &#39;     11 bits:          -4417637538305574340819977          C588763A1ADE0FA5983F7\n      &#39;     12 bits:          -2208818769152787170409989          E2C43B1D0D6F07D2CC1FB\n      &#39;     13 bits:          -1104409384576393585204995          F1621D8E86B783E9660FD\n      &#39;     14 bits:           -552204692288196792602498           8B10EC7435BC1F4B307E\n      &#39;     15 bits:           -276102346144098396301249           C588763A1ADE0FA5983F\n      &#39;     16 bits:           -138051173072049198150625           E2C43B1D0D6F07D2CC1F\n</code></pre><p> If <code>shift</code> is greater than or equal to the number of bits in a positive <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value, the result of the right-shift operation is <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Zero_\" data-linktype=\"relative-path\">Zero</a>. If <code>shift</code> is greater than the number of bits in a negative <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value, the result of the right-shift operation is <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_MinusOne_\" data-linktype=\"relative-path\">MinusOne</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_Subtraction_System_Numerics_BigInteger_System_Numerics_BigInteger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Subtraction(BigInteger,BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Subtracts a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value from another <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Numerics.BigInteger op_Subtraction (System.Numerics.BigInteger left, System.Numerics.BigInteger right);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>left</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value to subtract from (the minuend).</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>right</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value to subtract (the subtrahend).</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The result of subtracting <code>right</code> from <code>left</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Subtraction method defines the operation of the subtraction operator for <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numeric.BigInteger.Class#14\">      Dim num1 As BigInteger = 100045632194\n      Dim num2 As BigInteger = 90329434\n      Dim result As BigInteger = num1 - num2\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Numeric.BigInteger.Class#14\">      BigInteger num1 = 100045632194;\n      BigInteger num2 = 90329434;\n      BigInteger result = num1 - num2;\n</code></pre><p> Languages that do not support custom operators can call the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Subtract_\" data-linktype=\"relative-path\">Subtract</a> method instead.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_UnaryNegation_System_Numerics_BigInteger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_UnaryNegation(BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Negates a specified BigInteger value.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Numerics.BigInteger op_UnaryNegation (System.Numerics.BigInteger value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value to negate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The result of the <code>value</code> parameter multiplied by negative one (-1).</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The UnaryNegation method defines the operation of the unary negation operator (or the additive inverse operator) for <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values. The operation produces a value that results in 0 (zero) when it is added to the original number. Languages that do not support custom operators can call the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_Negate_\" data-linktype=\"relative-path\">Negate</a> method instead.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Numerics_BigInteger_op_UnaryPlus_System_Numerics_BigInteger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_UnaryPlus(BigInteger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the value of the <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> operand. (The sign of the operand is unchanged.)</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Numerics.BigInteger op_UnaryPlus (System.Numerics.BigInteger value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An integer value.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value of the <code>value</code> operand.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The UnaryPlus method defines the operation of the unary positive operator for <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> values.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Numerics.BigInteger.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Numerics.BigInteger.yml\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger..ctor\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.Abs\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.Add\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.Compare\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.CompareTo\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.Divide\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.DivRem\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.Equals\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.GreatestCommonDivisor\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.IsEven\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.IsOne\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.IsPowerOfTwo\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.IsZero\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.Log\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.Log10\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.Max\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.Min\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.MinusOne\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.ModPow\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.Multiply\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.Negate\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.One\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.op_Addition\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.op_op_Addition\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.op_BitwiseAnd\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.op_op_BitwiseAnd\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.op_BitwiseOr\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.op_op_BitwiseOr\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.op_Decrement\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.op_op_Decrement\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.op_Division\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.op_op_Division\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.op_Equality\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.op_op_Equality\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.op_ExclusiveOr\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.op_op_ExclusiveOr\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.op_Explicit\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.op_op_Explicit\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.op_GreaterThan\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.op_op_GreaterThan\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.op_GreaterThanOrEqual\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.op_op_GreaterThanOrEqual\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.op_Implicit\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.op_op_Implicit\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.op_Increment\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.op_op_Increment\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.op_op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.op_LeftShift\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.op_op_LeftShift\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.op_LessThan\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.op_op_LessThan\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.op_LessThanOrEqual\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.op_op_LessThanOrEqual\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.op_Modulus\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.op_op_Modulus\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.op_Multiply\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.op_op_Multiply\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.op_OnesComplement\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.op_op_OnesComplement\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.op_RightShift\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.op_op_RightShift\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.op_Subtraction\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.op_op_Subtraction\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.op_UnaryNegation\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.op_op_UnaryNegation\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.op_UnaryPlus\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.op_op_UnaryPlus\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.Parse\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.Pow\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.Remainder\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.Sign\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.Subtract\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.ToByteArray\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.ToString\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.TryParse\">\r\n<meta name=\"APIName\" content=\"System.Numerics.BigInteger.Zero\">\r\n<meta name=\"APILocation\" content=\"System.Numerics.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"ca3e6603-cdeb-276d-6f69-b72f4277696a\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents an arbitrarily large signed integer.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Numerics/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Numerics.BigInteger\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Numerics.BigInteger.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Numerics.BigInteger.yml","open_to_public_contributors":true,"api_name":["System.Numerics.BigInteger","System.Numerics.BigInteger..ctor","System.Numerics.BigInteger.Abs","System.Numerics.BigInteger.Add","System.Numerics.BigInteger.Compare","System.Numerics.BigInteger.CompareTo","System.Numerics.BigInteger.Divide","System.Numerics.BigInteger.DivRem","System.Numerics.BigInteger.Equals","System.Numerics.BigInteger.GetHashCode","System.Numerics.BigInteger.GreatestCommonDivisor","System.Numerics.BigInteger.IsEven","System.Numerics.BigInteger.IsOne","System.Numerics.BigInteger.IsPowerOfTwo","System.Numerics.BigInteger.IsZero","System.Numerics.BigInteger.Log","System.Numerics.BigInteger.Log10","System.Numerics.BigInteger.Max","System.Numerics.BigInteger.Min","System.Numerics.BigInteger.MinusOne","System.Numerics.BigInteger.ModPow","System.Numerics.BigInteger.Multiply","System.Numerics.BigInteger.Negate","System.Numerics.BigInteger.One","System.Numerics.BigInteger.op_Addition","System.Numerics.BigInteger.op_op_Addition","System.Numerics.BigInteger.op_BitwiseAnd","System.Numerics.BigInteger.op_op_BitwiseAnd","System.Numerics.BigInteger.op_BitwiseOr","System.Numerics.BigInteger.op_op_BitwiseOr","System.Numerics.BigInteger.op_Decrement","System.Numerics.BigInteger.op_op_Decrement","System.Numerics.BigInteger.op_Division","System.Numerics.BigInteger.op_op_Division","System.Numerics.BigInteger.op_Equality","System.Numerics.BigInteger.op_op_Equality","System.Numerics.BigInteger.op_ExclusiveOr","System.Numerics.BigInteger.op_op_ExclusiveOr","System.Numerics.BigInteger.op_Explicit","System.Numerics.BigInteger.op_op_Explicit","System.Numerics.BigInteger.op_GreaterThan","System.Numerics.BigInteger.op_op_GreaterThan","System.Numerics.BigInteger.op_GreaterThanOrEqual","System.Numerics.BigInteger.op_op_GreaterThanOrEqual","System.Numerics.BigInteger.op_Implicit","System.Numerics.BigInteger.op_op_Implicit","System.Numerics.BigInteger.op_Increment","System.Numerics.BigInteger.op_op_Increment","System.Numerics.BigInteger.op_Inequality","System.Numerics.BigInteger.op_op_Inequality","System.Numerics.BigInteger.op_LeftShift","System.Numerics.BigInteger.op_op_LeftShift","System.Numerics.BigInteger.op_LessThan","System.Numerics.BigInteger.op_op_LessThan","System.Numerics.BigInteger.op_LessThanOrEqual","System.Numerics.BigInteger.op_op_LessThanOrEqual","System.Numerics.BigInteger.op_Modulus","System.Numerics.BigInteger.op_op_Modulus","System.Numerics.BigInteger.op_Multiply","System.Numerics.BigInteger.op_op_Multiply","System.Numerics.BigInteger.op_OnesComplement","System.Numerics.BigInteger.op_op_OnesComplement","System.Numerics.BigInteger.op_RightShift","System.Numerics.BigInteger.op_op_RightShift","System.Numerics.BigInteger.op_Subtraction","System.Numerics.BigInteger.op_op_Subtraction","System.Numerics.BigInteger.op_UnaryNegation","System.Numerics.BigInteger.op_op_UnaryNegation","System.Numerics.BigInteger.op_UnaryPlus","System.Numerics.BigInteger.op_op_UnaryPlus","System.Numerics.BigInteger.Parse","System.Numerics.BigInteger.Pow","System.Numerics.BigInteger.Remainder","System.Numerics.BigInteger.Sign","System.Numerics.BigInteger.Subtract","System.Numerics.BigInteger.ToByteArray","System.Numerics.BigInteger.ToString","System.Numerics.BigInteger.TryParse","System.Numerics.BigInteger.Zero"],"api_location":["System.Numerics.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Numerics.BigInteger","System::Numerics::BigInteger","System.Numerics.BigInteger.#ctor","System::Numerics::BigInteger::#ctor","System.Numerics.BigInteger.Abs","System::Numerics::BigInteger::Abs","System.Numerics.BigInteger.Add","System::Numerics::BigInteger::Add","System.Numerics.BigInteger.Compare","System::Numerics::BigInteger::Compare","System.Numerics.BigInteger.CompareTo","System::Numerics::BigInteger::CompareTo","System.Numerics.BigInteger.Divide","System::Numerics::BigInteger::Divide","System.Numerics.BigInteger.DivRem","System::Numerics::BigInteger::DivRem","System.Numerics.BigInteger.Equals","System::Numerics::BigInteger::Equals","System.Numerics.BigInteger.GetHashCode","System::Numerics::BigInteger::GetHashCode","System.Numerics.BigInteger.GreatestCommonDivisor","System::Numerics::BigInteger::GreatestCommonDivisor","System.Numerics.BigInteger.IsEven","System::Numerics::BigInteger::IsEven","System.Numerics.BigInteger.IsOne","System::Numerics::BigInteger::IsOne","System.Numerics.BigInteger.IsPowerOfTwo","System::Numerics::BigInteger::IsPowerOfTwo","System.Numerics.BigInteger.IsZero","System::Numerics::BigInteger::IsZero","System.Numerics.BigInteger.Log","System::Numerics::BigInteger::Log","System.Numerics.BigInteger.Log10","System::Numerics::BigInteger::Log10","System.Numerics.BigInteger.Max","System::Numerics::BigInteger::Max","System.Numerics.BigInteger.Min","System::Numerics::BigInteger::Min","System.Numerics.BigInteger.MinusOne","System::Numerics::BigInteger::MinusOne","System.Numerics.BigInteger.ModPow","System::Numerics::BigInteger::ModPow","System.Numerics.BigInteger.Multiply","System::Numerics::BigInteger::Multiply","System.Numerics.BigInteger.Negate","System::Numerics::BigInteger::Negate","System.Numerics.BigInteger.One","System::Numerics::BigInteger::One","System.Numerics.BigInteger.op_Addition","System::Numerics::BigInteger::op_Addition","System.Numerics.BigInteger.op_BitwiseAnd","System::Numerics::BigInteger::op_BitwiseAnd","System.Numerics.BigInteger.op_BitwiseOr","System::Numerics::BigInteger::op_BitwiseOr","System.Numerics.BigInteger.op_Decrement","System::Numerics::BigInteger::op_Decrement","System.Numerics.BigInteger.op_Division","System::Numerics::BigInteger::op_Division","System.Numerics.BigInteger.op_Equality","System::Numerics::BigInteger::op_Equality","System.Numerics.BigInteger.op_ExclusiveOr","System::Numerics::BigInteger::op_ExclusiveOr","System.Numerics.BigInteger.op_Explicit","System::Numerics::BigInteger::op_Explicit","System.Numerics.BigInteger.op_GreaterThan","System::Numerics::BigInteger::op_GreaterThan","System.Numerics.BigInteger.op_GreaterThanOrEqual","System::Numerics::BigInteger::op_GreaterThanOrEqual","System.Numerics.BigInteger.op_Implicit","System::Numerics::BigInteger::op_Implicit","System.Numerics.BigInteger.op_Increment","System::Numerics::BigInteger::op_Increment","System.Numerics.BigInteger.op_Inequality","System::Numerics::BigInteger::op_Inequality","System.Numerics.BigInteger.op_LeftShift","System::Numerics::BigInteger::op_LeftShift","System.Numerics.BigInteger.op_LessThan","System::Numerics::BigInteger::op_LessThan","System.Numerics.BigInteger.op_LessThanOrEqual","System::Numerics::BigInteger::op_LessThanOrEqual","System.Numerics.BigInteger.op_Modulus","System::Numerics::BigInteger::op_Modulus","System.Numerics.BigInteger.op_Multiply","System::Numerics::BigInteger::op_Multiply","System.Numerics.BigInteger.op_OnesComplement","System::Numerics::BigInteger::op_OnesComplement","System.Numerics.BigInteger.op_RightShift","System::Numerics::BigInteger::op_RightShift","System.Numerics.BigInteger.op_Subtraction","System::Numerics::BigInteger::op_Subtraction","System.Numerics.BigInteger.op_UnaryNegation","System::Numerics::BigInteger::op_UnaryNegation","System.Numerics.BigInteger.op_UnaryPlus","System::Numerics::BigInteger::op_UnaryPlus","System.Numerics.BigInteger.Parse","System::Numerics::BigInteger::Parse","System.Numerics.BigInteger.Pow","System::Numerics::BigInteger::Pow","System.Numerics.BigInteger.Remainder","System::Numerics::BigInteger::Remainder","System.Numerics.BigInteger.Sign","System::Numerics::BigInteger::Sign","System.Numerics.BigInteger.Subtract","System::Numerics::BigInteger::Subtract","System.Numerics.BigInteger.ToByteArray","System::Numerics::BigInteger::ToByteArray","System.Numerics.BigInteger.ToString","System::Numerics::BigInteger::ToString","System.Numerics.BigInteger.TryParse","System::Numerics::BigInteger::TryParse","System.Numerics.BigInteger.Zero","System::Numerics::BigInteger::Zero"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"ca3e6603-cdeb-276d-6f69-b72f4277696a","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Numerics/BigInteger.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"BigInteger struct | Microsoft Docs","_op_ogTitle":"BigInteger struct","description":"Represents an arbitrarily large signed integer.\n","toc_asset_id":"_splitted/System.Numerics/toc.json","toc_rel":"_splitted/System.Numerics/toc.json","source_url":"","ms.assetid":"System.Numerics.BigInteger","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.numerics.biginteger","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.numerics.biginteger","fileRelativePath":"System.Numerics.BigInteger.html"},"themesRelativePathToOutputRoot":"_themes/"}