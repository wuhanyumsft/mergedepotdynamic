{"content":"    \r\n    <h1 id=\"System_Threading_Tasks_TaskExtensions\">\r\n      <span class=\"lang-csharp\">TaskExtensions</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides a set of static (Shared in Visual Basic) methods for working with specific kinds of <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> instances.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static class TaskExtensions</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">TaskExtensions</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n    \r\n    \r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_TaskExtensions_Unwrap_System_Threading_Tasks_Task_System_Threading_Tasks_Task__\" data-linktype=\"self-bookmark\">Unwrap(Task&lt;Task&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a proxy <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> that represents the asynchronous operation of a <span class=\"xref\">stem.Threading.Tasks.TaskScheduler.TryExecuteTaskInline*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_TaskExtensions_Unwrap__1_System_Threading_Tasks_Task_System_Threading_Tasks_Task___0___\" data-linktype=\"self-bookmark\">Unwrap&lt;TResult&gt;(Task&lt;Task&lt;TResult&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a proxy <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> that represents the asynchronous operation of a <code>Task&lt;Task&lt;T&gt;&gt;</code> (C#) or <code>Task (Of Task(Of T))</code> (Visual Basic).</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_TaskExtensions_Unwrap_System_Threading_Tasks_Task_System_Threading_Tasks_Task__\">\r\n    \r\n            <a id=\"System_Threading_Tasks_TaskExtensions_Unwrap_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Unwrap(Task&lt;Task&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a proxy <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> that represents the asynchronous operation of a <span class=\"xref\">stem.Threading.Tasks.TaskScheduler.TryExecuteTaskInline*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.Task Unwrap (this System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt; task);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>task</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <code>Task&lt;Task&gt;</code> (C#) or <code>Task (Of Task)</code> (Visual Basic) to unwrap.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>A Task that represents the asynchronous operation of the provided <code>System.Threading.Tasks.Task(Of Task)</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The exception that is thrown if the <code>task</code> argument is null.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>It is often useful to be able to return a Task from a <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a>, where the inner Task represents work done as part of the outer <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a>. However, doing so results in a <code>Task&lt;Task&gt;</code> (C#) or <code>Task (Of Task)</code> (Visual Basic), which, if not dealt with carefully, could produce unexpected behavior. Unwrap solves this problem by creating a proxy Task that represents the entire asynchronous operation of such a task.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to unwrap a task:  </p>\n<pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.TaskExtensions#01\">Imports System.Threading\nImports System.Threading.Tasks\n\nModule UnwrapDemo\n    &#39; Demonstrated features:\n    &#39;   Task.Unwrap()\n    &#39;    Task.Factory.StartNew()\n    &#39;   Task.ContinueWith()\n    &#39; Expected results:\n    &#39; \tIndicates that continuation chains can be set up virtually instantaneously using Unwrap(), and then left to run on their own.\n    &#39;   The results of the RemoteIncrement(0) chain and the RemoteIncrement(4) chain may be intermixed with each other.\n    &#39;   The results of the sequence that starts with RemoteIncrement(4) are in strict order.\n    &#39; Documentation:\n    &#39;   http://msdn.microsoft.com/en-us/library/dd781129(VS.100).aspx\n    &#39; More information:\n    &#39;   http://blogs.msdn.com/pfxteam/archive/2009/11/04/9917581.aspx\n    &#39; Other notes:\n    &#39;   The combination of Task&lt;T&gt;, ContinueWith() and Unwrap() can be particularly useful for setting up a chain of long-running\n    &#39;   tasks where each task uses the results of its predecessor.\n\n    Sub Main()\n        &#39; Invoking individual tasks is straightforward\n        Dim t1 As Task(Of Integer) = RemoteIncrement(0)\n        Console.WriteLine(&quot;Started RemoteIncrement(0)&quot;)\n\n        &#39; Chain together the results of (simulated) remote operations.\n        &#39; The use of Unwrap() instead of .Result below prevents this thread from blocking while setting up this continuation chain.\n        &#39; RemoteIncrement() returns Task&lt;int&gt; so no unwrapping is needed for the first continuation.\n        &#39; ContinueWith() here returns Task&lt;Task&lt;int&gt;&gt;. Therefore unwrapping is needed.\n        &#39; and on it goes...\n        Dim t2 As Task(Of Integer) = RemoteIncrement(4).ContinueWith(Function(t) RemoteIncrement(t.Result)).Unwrap().ContinueWith(Function(t) RemoteIncrement(t.Result)).Unwrap().ContinueWith(Function(t) RemoteIncrement(t.Result)).Unwrap()\n        Console.WriteLine(&quot;Started RemoteIncrement(...(RemoteIncrement(RemoteIncrement(4))...)&quot;)\n\n        Try\n            t1.Wait()\n            Console.WriteLine(&quot;Finished RemoteIncrement(0)&quot; &amp; vbLf)\n\n            t2.Wait()\n            Console.WriteLine(&quot;Finished RemoteIncrement(...(RemoteIncrement(RemoteIncrement(4))...)&quot;)\n        Catch e As AggregateException\n            Console.WriteLine(&quot;A task has thrown the following (unexpected) exception:&quot; &amp; vbLf &amp; &quot;{0}&quot;, e)\n\n        End Try\n    End Sub\n\n    &#39; This method represents a remote API.\n    Function RemoteIncrement(ByVal n As Integer) As Task(Of Integer)\n        Return Task(Of Integer).Factory.StartNew(Function(obj)\n                                                     &#39; Simulate a slow operation\n                                                     Thread.Sleep(1 * 1000)\n\n                                                     Dim x As Integer = CInt(obj)\n                                                     Console.WriteLine(&quot;Thread={0}, Next={1}&quot;, Thread.CurrentThread.ManagedThreadId, System.Threading.Interlocked.Increment(x))\n                                                     Return x\n                                                 End Function, n)\n    End Function\n\n\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.TaskExtensions#01\">using System;\nusing System.Diagnostics;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nclass UnWrapDemo\n{\n     // Demonstrated features:\n        //\t\tTask.Unwrap()\n        // \t\tTask.Factory.StartNew()\n        //\t\tTask.ContinueWith()\n        // Expected results:\n        // \t\tIndicates that continuation chains can be set up virtually instantaneously using Unwrap(), and then left to run on their own.\n        //      The results of the RemoteIncrement(0) chain and the RemoteIncrement(4) chain may be intermixed with each other.\n        //\t\tThe results of the sequence that starts with RemoteIncrement(4) are in strict order.\n        // Documentation:\n        //\t\thttp://msdn.microsoft.com/en-us/library/dd781129(VS.100).aspx\n        // More information:\n        //\t\thttp://blogs.msdn.com/pfxteam/archive/2009/11/04/9917581.aspx\n        // Other notes:\n        //\t\tThe combination of Task&lt;T&gt;, ContinueWith() and Unwrap() can be particularly useful for setting up a chain of long-running\n        //      tasks where each task uses the results of its predecessor.\n        static void Main()\n        {\n            // Invoking individual tasks is straightforward\n            Task&lt;int&gt; t1 = RemoteIncrement(0);\n            Console.WriteLine(&quot;Started RemoteIncrement(0)&quot;);\n\n            // Chain together the results of (simulated) remote operations.\n            // The use of Unwrap() instead of .Result below prevents this thread from blocking while setting up this continuation chain.\n            Task&lt;int&gt; t2 = RemoteIncrement(4)\n                .ContinueWith(t =&gt; RemoteIncrement(t.Result))\t\t\t// RemoteIncrement() returns Task&lt;int&gt; so no unwrapping is needed for the first continuation.\n                .Unwrap().ContinueWith(t =&gt; RemoteIncrement(t.Result))\t// ContinueWith() returns Task&lt;Task&lt;int&gt;&gt;. Therefore unwrapping is needed.\n                .Unwrap().ContinueWith(t =&gt; RemoteIncrement(t.Result))\t// and on it goes...\n                .Unwrap();\n            Console.WriteLine(&quot;Started RemoteIncrement(...(RemoteIncrement(RemoteIncrement(4))...)&quot;);\n\n            try\n            {\n                t1.Wait();\n                Console.WriteLine(&quot;Finished RemoteIncrement(0)<br>&quot;);\n\n                t2.Wait();\n                Console.WriteLine(&quot;Finished RemoteIncrement(...(RemoteIncrement(RemoteIncrement(4))...)&quot;);\n            }\n            catch (AggregateException e)\n            {\n                Console.WriteLine(&quot;A task has thrown the following (unexpected) exception:<br>{0}&quot;, e);\n            }\n\n        }\n        // This method represents a remote API.\n        static Task&lt;int&gt; RemoteIncrement(int n)\n        {\n            return Task&lt;int&gt;.Factory.StartNew(\n                (obj) =&gt;\n                {\n                    // Simulate a slow operation\n                    Thread.Sleep(1 * 1000);\n\n                    int x = (int)obj;\n                    Console.WriteLine(&quot;Thread={0}, Next={1}&quot;, Thread.CurrentThread.ManagedThreadId, ++x);\n                    return x;\n                },\n                n);\n        }\n      \n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_TaskExtensions_Unwrap__1_System_Threading_Tasks_Task_System_Threading_Tasks_Task___0___\">\r\n    \r\n            <a id=\"System_Threading_Tasks_TaskExtensions_Unwrap_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Unwrap&lt;TResult&gt;(Task&lt;Task&lt;TResult&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a proxy <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> that represents the asynchronous operation of a <code>Task&lt;Task&lt;T&gt;&gt;</code> (C#) or <code>Task (Of Task(Of T))</code> (Visual Basic).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.Task&lt;TResult&gt; Unwrap&lt;TResult&gt; (this System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; task);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>task</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<span class=\"xref\">TResult</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <code>Task&lt;Task&lt;T&gt;&gt;</code> (C#) or <code>Task (Of Task(Of T))</code> (Visual Basic) to unwrap.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task<tresult></tresult></a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> that represents the asynchronous operation of the provided <code>Task&lt;Task&lt;T&gt;&gt;</code> (C#) or <code>Task (Of Task(Of T))</code> (Visual Basic).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The exception that is thrown if the <code>task</code> argument is null.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>It is often useful to be able to return a <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> from a <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>, where the inner <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> represents work done as part of the outer <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>. However, doing so results in a <code>Task&lt;Task&lt;T&gt;&gt;</code> (C#) or <code>Task (Of Task(Of T))</code> (Visual Basic), which, if not dealt with carefully, could produce unexpected behavior. Unwrap solves this problem by creating a proxy <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a> that represents the entire asynchronous operation of such a <code>Task&lt;Task&lt;T&gt;&gt;</code> (C#) or <code>Task (Of Task(Of T))</code> (Visual Basic).</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Threading.Tasks.TaskExtensions.yml\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.TaskExtensions\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.TaskExtensions.Unwrap\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.TaskExtensions.Unwrap&lt;TResult&gt;\">\r\n<meta name=\"APILocation\" content=\"System.Core.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-16 06:20 AM\">\r\n<meta name=\"document_id\" content=\"ed6fb08f-c324-fa1a-527e-0b6d15435f39\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides a set of static (Shared in Visual Basic) methods for working with specific kinds of  instances.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Threading.Tasks/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Threading.Tasks.TaskExtensions\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Threading.Tasks.TaskExtensions.yml","open_to_public_contributors":true,"api_name":["System.Threading.Tasks.TaskExtensions","System.Threading.Tasks.TaskExtensions.Unwrap","System.Threading.Tasks.TaskExtensions.Unwrap<TResult>"],"api_location":["System.Core.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Threading.Tasks.TaskExtensions","System::Threading::Tasks::TaskExtensions","System.Threading.Tasks.TaskExtensions.Unwrap","System::Threading::Tasks::TaskExtensions::Unwrap","System.Threading.Tasks.TaskExtensions.Unwrap``1","System::Threading::Tasks::TaskExtensions::Unwrap``1"],"dev_langs":["csharp"],"updated_at":"2017-03-16 06:20 AM","document_id":"ed6fb08f-c324-fa1a-527e-0b6d15435f39","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Threading.Tasks/TaskExtensions.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"TaskExtensions class | Microsoft Docs","_op_ogTitle":"TaskExtensions class","description":"Provides a set of static (Shared in Visual Basic) methods for working with specific kinds of  instances.\n","toc_asset_id":"_splitted/System.Threading.Tasks/toc.json","toc_rel":"_splitted/System.Threading.Tasks/toc.json","source_url":"","ms.assetid":"System.Threading.Tasks.TaskExtensions","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.threading.tasks.taskextensions","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.threading.tasks.taskextensions","fileRelativePath":"System.Threading.Tasks.TaskExtensions.html"},"themesRelativePathToOutputRoot":"_themes/"}