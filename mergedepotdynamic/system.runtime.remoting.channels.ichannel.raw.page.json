{"content":"    \r\n    <h1 id=\"System_Runtime_Remoting_Channels_IChannel\">\r\n      <span class=\"lang-csharp\">IChannel</span>\r\n        Interface\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides conduits for messages that cross remoting boundaries.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic interface IChannel</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Remoting boundaries can be <a class=\"xref\" href=\"system.runtime.remoting.contexts.context\" data-linktype=\"relative-path\">Context</a>s, <a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a>s, processes, or computers. An application can cross these boundaries only by using channels. These crossings can be inbound and outbound. A channel can listen on an endpoint for inbound messages, send to an endpoint for outbound messages, or both. This provides an extensibility point in the runtime to plug in a wide range protocols, even though the runtime might not be at the other end of the channel.  </p>\n<p> Run-time objects can be used to represent a wide and rich set of semantics and entities. The channel provides the extensibility point to convert the messages to and from the specific protocols. If there are runtimes at both ends of the channel, a virtual channel is created between the two ends, in order to connect the client and server sink chains on either side of the boundary.  </p>\n<p> The client part of the channel is located at the end of a client context sink chain. The server part of the channel is located at the start of the server context sink chain. Messages are delivered to the client channel using the <a class=\"xref\" href=\"system.runtime.remoting.messaging.imessagesink\" data-linktype=\"relative-path\">IMessageSink</a> interface, travel through the channel, and are then received by the server channel. The server channel delivers the message to the first server context sink.  </p>\n<p> Channels must expose the IChannel interface, which provides informational properties such as the <a class=\"xref\" href=\"system.runtime.remoting.channels.ichannel#System_Runtime_Remoting_Channels_IChannel_ChannelName_\" data-linktype=\"relative-path\">ChannelName</a> and <a class=\"xref\" href=\"system.runtime.remoting.channels.ichannel#System_Runtime_Remoting_Channels_IChannel_ChannelPriority_\" data-linktype=\"relative-path\">ChannelPriority</a> properties. Channels can be registered using the <a class=\"xref\" href=\"system.runtime.remoting.channels.channelservices#System_Runtime_Remoting_Channels_ChannelServices_RegisterChannel_\" data-linktype=\"relative-path\">RegisterChannel</a> method.</p>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_Channels_IChannel_ChannelName\" data-linktype=\"self-bookmark\">ChannelName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the name of the channel.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_Channels_IChannel_ChannelPriority\" data-linktype=\"self-bookmark\">ChannelPriority</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the priority of the channel.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_Channels_IChannel_Parse_System_String_System_String__\" data-linktype=\"self-bookmark\">Parse(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the object URI as an out parameter, and the URI of the current channel as the return value.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_Channels_IChannel_ChannelName\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_Channels_IChannel_ChannelName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ChannelName</div>        \r\n          </div>\r\n    \r\n            <p>Gets the name of the channel.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ChannelName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the channel.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The immediate caller does not have infrastructure permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cpp\" name=\"HttpServerChannel_Server_Client#2\">      int myPort = 8085;\n\n      // Creating the &#39;IDictionary&#39; to set the server object properties.\n      IDictionary^ myDictionary = gcnew Hashtable;\n      myDictionary[ &quot;name&quot; ] = &quot;MyServerChannel1&quot;;\n      myDictionary[ &quot;priority&quot; ] = 2;\n      myDictionary[ &quot;port&quot; ] = 8085;\n\n      // Set the properties along with the constructor.\n      HttpServerChannel^ myHttpServerChannel = gcnew HttpServerChannel( myDictionary,gcnew BinaryServerFormatterSinkProvider );\n\n      // Register the server channel.\n      ChannelServices::RegisterChannel( myHttpServerChannel );\n      RemotingConfiguration::RegisterWellKnownServiceType( MyHelloServer::typeid, &quot;SayHello&quot;, WellKnownObjectMode::SingleCall );\n      myHttpServerChannel-&gt;WantsToListen = true;\n\n      // Start listening on a specific port.\n      myHttpServerChannel-&gt;StartListening( myPort );\n\n      // Get the name of the channel.\n      Console::WriteLine( &quot;ChannelName : {0}&quot;, myHttpServerChannel-&gt;ChannelName );\n\n      // Get the channel priority.\n      Console::WriteLine( &quot;ChannelPriority : {0}&quot;, myHttpServerChannel-&gt;ChannelPriority );\n\n      // Get the schema of the channel.\n      Console::WriteLine( &quot;ChannelScheme : {0}&quot;, myHttpServerChannel-&gt;ChannelScheme );\n\n      // Get the channel URI.\n      Console::WriteLine( &quot;GetChannelUri : {0}&quot;, myHttpServerChannel-&gt;GetChannelUri() );\n\n      // Indicates whether &#39;IChannelReceiverHook&#39; wants to be hooked into the outside listener service.\n      Console::WriteLine( &quot;WantsToListen : {0}&quot;, myHttpServerChannel-&gt;WantsToListen );\n</code></pre><pre><code class=\"lang-cs\" name=\"HttpServerChannel_Server_Client#2\">         int myPort = 8085;\n         // Creating the &#39;IDictionary&#39; to set the server object properties.\n         IDictionary myDictionary = new Hashtable();\n         myDictionary[&quot;name&quot;] = &quot;MyServerChannel1&quot;;\n         myDictionary[&quot;priority&quot;] = 2;\n         myDictionary[&quot;port&quot;] = 8085;\n         // Set the properties along with the constructor.\n         HttpServerChannel myHttpServerChannel = new HttpServerChannel(myDictionary,\n                                             new BinaryServerFormatterSinkProvider());\n         // Register the server channel.\n         ChannelServices.RegisterChannel(myHttpServerChannel);\n         RemotingConfiguration.RegisterWellKnownServiceType(typeof(MyHelloServer), \n                                       &quot;SayHello&quot;, WellKnownObjectMode.SingleCall);  \n         myHttpServerChannel.WantsToListen = true;\n         // Start listening on a specific port.\n         myHttpServerChannel.StartListening((object)myPort);\n         // Get the name of the channel.\n         Console.WriteLine(&quot;ChannelName : &quot; + myHttpServerChannel.ChannelName);\n         // Get the channel priority.\n         Console.WriteLine(&quot;ChannelPriority : &quot; + myHttpServerChannel.ChannelPriority);\n         // Get the schema of the channel.\n         Console.WriteLine(&quot;ChannelScheme : &quot; + myHttpServerChannel.ChannelScheme);\n         // Get the channel URI.\n         Console.WriteLine(&quot;GetChannelUri : &quot; + myHttpServerChannel.GetChannelUri());\n         // Indicates whether &#39;IChannelReceiverHook&#39; wants to be hooked into the outside listener service.\n         Console.WriteLine(&quot;WantsToListen : &quot; + myHttpServerChannel.WantsToListen);\n</code></pre><pre><code class=\"lang-vb\" name=\"HttpServerChannel_Server_Client#2\">         Dim myPort As Integer = 8085\n         &#39; Creating the &#39;IDictionary&#39; to set the server object properties.\n         Dim myDictionary  As  New Hashtable()\n         myDictionary(&quot;name&quot;) = &quot;MyServerChannel1&quot;\n         myDictionary(&quot;priority&quot;) = 2\n         myDictionary(&quot;port&quot;) = 8085\n         &#39; Set the properties along with the constructor.\n         Dim myHttpServerChannel As New HttpServerChannel(myDictionary, _\n                 New BinaryServerFormatterSinkProvider())\n         &#39; Register the server channel.\n         ChannelServices.RegisterChannel(myHttpServerChannel)\n         RemotingConfiguration.RegisterWellKnownServiceType(GetType(MyHelloServer), _\n                 &quot;SayHello&quot;, WellKnownObjectMode.SingleCall)\n         myHttpServerChannel.WantsToListen = true\n         &#39; Start listening on a specific port.\n         myHttpServerChannel.StartListening(CType(myPort, Object))\n         &#39; Get the name of the channel.\n         Console.WriteLine(&quot;ChannelName : &quot; + myHttpServerChannel.ChannelName)\n         &#39; Get the channel priority.\n          Console.WriteLine(&quot;ChannelPriority : &quot; + myHttpServerChannel.ChannelPriority.ToString())\n         &#39; Get the schema of the channel.\n          Console.WriteLine(&quot;ChannelScheme : &quot; + myHttpServerChannel.ChannelScheme)\n         &#39; Get the channel URI.\n          Console.WriteLine(&quot;GetChannelUri : &quot; + myHttpServerChannel.GetChannelUri())\n         &#39; Indicates whether &#39;IChannelReceiverHook&#39; wants to be hooked into the outside listener service.\n         Console.WriteLine(&quot;WantsToListen : &quot; + myHttpServerChannel.WantsToListen.ToString())\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_Channels_IChannel_ChannelPriority\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_Channels_IChannel_ChannelPriority_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ChannelPriority</div>        \r\n          </div>\r\n    \r\n            <p>Gets the priority of the channel.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int ChannelPriority { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An integer that indicates the priority of the channel.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The immediate caller does not have infrastructure permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Higher numbers indicate higher priority, so a channel with priority of 50 has a higher priority than a channel with priority 25. The cross application domain channel has a priority of 100.  </p>\n<p> Client channels with higher priority are given the first chance to connect to a remote object specified by a URL or a particular channel data entry from a <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a>.  </p>\n<p> For server channels, the priority indicates the order in which their channel data will appear in a <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a>, which in turn affects the order in which clients will try to connect to the server object. If the server is listening on an HTTP channel with priority 50 and a TCP channel with priority 25 and the client has registered both an HTTP and TCP channel, then the client will use the HTTP channel to talk to the server.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"HttpServerChannel_Server_Client#5\">         // Creating the &#39;IDictionary&#39; to set the server object properties.\n         IDictionary myDictionary = new Hashtable();\n         myDictionary[&quot;name&quot;]=&quot;HttpClientChannel&quot;;\n         myDictionary[&quot;priority&quot;]=2;\n         // Set the properties along with the constructor.\n         HttpClientChannel myHttpClientChannel = \n               new HttpClientChannel(myDictionary,new BinaryClientFormatterSinkProvider());\n         // Register the server channel.\n         ChannelServices.RegisterChannel(myHttpClientChannel);\n         MyHelloServer myHelloServer1 = (MyHelloServer)Activator.GetObject(\n         typeof(MyHelloServer), &quot;http://localhost:8085/SayHello&quot;);\n         if (myHelloServer1 == null)\n            System.Console.WriteLine(&quot;Could not locate server&quot;);\n         else\n         {\n            Console.WriteLine(myHelloServer1.myHelloMethod(&quot;Client&quot;));\n            // Get the name of the channel.\n            Console.WriteLine(&quot;Channel Name :&quot;+myHttpClientChannel.ChannelName);\n            // Get the channel priority.\n            Console.WriteLine(&quot;ChannelPriority :&quot;+myHttpClientChannel.ChannelPriority.ToString());\n            string myString,myObjectURI1;\n            Console.WriteLine(&quot;Parse :&quot; + \n                myHttpClientChannel.Parse(&quot;http://localhost:8085/SayHello&quot;,out myString)+myString);\n            // Get the key count.\n            System.Console.WriteLine(&quot;Keys.Count : &quot; + myHttpClientChannel.Keys.Count);\n            // Get the channel message sink that delivers message to the specified url.\n            IMessageSink myIMessageSink = \n            myHttpClientChannel.CreateMessageSink(&quot;http://localhost:8085/NewEndPoint&quot;, \n                                                                            null,out myObjectURI1);\n            Console.WriteLine(&quot;The channel message sink that delivers the messages to the URL is : &quot;\n                                    +myIMessageSink.ToString());\n            Console.WriteLine(&quot;URI of the new channel message sink is: &quot; +myObjectURI1);\n         }\n</code></pre><pre><code class=\"lang-vb\" name=\"HttpServerChannel_Server_Client#5\">         &#39; Creating the &#39;IDictionary&#39; to set the server object properties.\n         Dim myDictionary As  New Hashtable()\n         myDictionary(&quot;name&quot;) = &quot;HttpClientChannel&quot;\n         myDictionary(&quot;priority&quot;) = 2\n         &#39; Set the properties along with the constructor.\n       Dim myHttpClientChannel As New _\n                 HttpClientChannel( myDictionary, New BinaryClientFormatterSinkProvider)\n         &#39; Register the server channel.\n         ChannelServices.RegisterChannel(myHttpClientChannel)\n         Dim myHelloServer1 As MyHelloServer = CType(Activator.GetObject(GetType(MyHelloServer), _\n                 &quot;http://localhost:8085/SayHello&quot;), MyHelloServer)\n         If myHelloServer1 Is Nothing Then\n            System.Console.WriteLine(&quot;Could not locate server&quot;)\n         Else\n            Console.WriteLine(myHelloServer1.myHelloMethod(&quot;Client&quot;))\n            &#39; Get the name of the channel.\n            Console.WriteLine(&quot;Channel Name :&quot; + myHttpClientChannel.ChannelName)\n            &#39; Get the channel priority.\n            Console.WriteLine(&quot;ChannelPriority :&quot; + myHttpClientChannel.ChannelPriority.ToString())\n            Dim myString, myObjectURI1 As String\n            Console.WriteLine(&quot;Parse :&quot; + _\n                 myHttpClientChannel.Parse(&quot;http://localhost:8085/SayHello&quot;, myString) + myString)\n            &#39; Get the key count.\n            System.Console.WriteLine(&quot;Keys.Count : &quot; + myHttpClientChannel.Keys.Count.ToString())\n            &#39; Get the channel message sink that delivers message to the specified url.\n            Dim myIMessageSink As IMessageSink =myHttpClientChannel.CreateMessageSink( _\n                 &quot;http://localhost:8085/NewEndPoint&quot;, Nothing, myObjectURI1)\n          Console.WriteLine(&quot;The channel message sink that delivers the messages to the URL is :&quot; + _\n                  CType(myIMessageSink, Object).ToString)\n          Console.WriteLine(&quot;URI of the new channel message sink is: &quot; + myObjectURI1)\n         End If \n</code></pre><pre><code class=\"lang-cpp\" name=\"HttpServerChannel_Server_Client#5\">      // Creating the &#39;IDictionary&#39; to set the server object properties.\n      IDictionary^ myDictionary = gcnew Hashtable;\n      myDictionary[ &quot;name&quot; ] = &quot;HttpClientChannel&quot;;\n      myDictionary[ &quot;priority&quot; ] = 2;\n\n      // Set the properties along with the constructor.\n      HttpClientChannel^ myHttpClientChannel = gcnew HttpClientChannel( myDictionary,gcnew BinaryClientFormatterSinkProvider );\n\n      // Register the server channel.\n      ChannelServices::RegisterChannel( myHttpClientChannel );\n      MyHelloServer ^ myHelloServer1 = dynamic_cast&lt;MyHelloServer^&gt;(Activator::GetObject( MyHelloServer::typeid, &quot;http://localhost:8085/SayHello&quot; ));\n      if ( myHelloServer1 == nullptr )\n            System::Console::WriteLine( &quot;Could not locate server&quot; );\n      else\n      {\n         Console::WriteLine( myHelloServer1-&gt;myHelloMethod( &quot;Client&quot; ) );\n\n         // Get the name of the channel.\n         Console::WriteLine( &quot;Channel Name :{0}&quot;, myHttpClientChannel-&gt;ChannelName );\n\n         // Get the channel priority.\n         Console::WriteLine( &quot;ChannelPriority :{0}&quot;, myHttpClientChannel-&gt;ChannelPriority );\n         String^ myString;\n         String^ myObjectURI1;\n         Console::WriteLine( &quot;Parse :{0}{1}&quot;, myHttpClientChannel-&gt;Parse( &quot;http://localhost:8085/SayHello&quot;,  myString ), myString );\n\n         // Get the key count.\n         System::Console::WriteLine( &quot;Keys-&gt;Count : {0}&quot;, myHttpClientChannel-&gt;Keys-&gt;Count );\n\n         // Get the channel message sink that delivers message to the specified url.\n         IMessageSink^ myIMessageSink = myHttpClientChannel-&gt;CreateMessageSink( &quot;http://localhost:8085/NewEndPoint&quot;, nullptr,  myObjectURI1 );\n         Console::WriteLine( &quot;The channel message sink that delivers the messages to the URL is : {0}&quot;, myIMessageSink );\n         Console::WriteLine( &quot;URI of the new channel message sink is: {0}&quot;, myObjectURI1 );\n      }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_Channels_IChannel_Parse_System_String_System_String__\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_Channels_IChannel_Parse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Parse(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the object URI as an out parameter, and the URI of the current channel as the return value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Parse (string url, out string objectURI);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>url</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The URL of the object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>objectURI</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>When this method returns, contains a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that holds the object URI. This parameter is passed uninitialized.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The URI of the current channel, or <code>null</code> if the URI does not belong to this channel.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The immediate caller does not have infrastructure permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"HttpServerChannel_Server_Client#5\">         // Creating the &#39;IDictionary&#39; to set the server object properties.\n         IDictionary myDictionary = new Hashtable();\n         myDictionary[&quot;name&quot;]=&quot;HttpClientChannel&quot;;\n         myDictionary[&quot;priority&quot;]=2;\n         // Set the properties along with the constructor.\n         HttpClientChannel myHttpClientChannel = \n               new HttpClientChannel(myDictionary,new BinaryClientFormatterSinkProvider());\n         // Register the server channel.\n         ChannelServices.RegisterChannel(myHttpClientChannel);\n         MyHelloServer myHelloServer1 = (MyHelloServer)Activator.GetObject(\n         typeof(MyHelloServer), &quot;http://localhost:8085/SayHello&quot;);\n         if (myHelloServer1 == null)\n            System.Console.WriteLine(&quot;Could not locate server&quot;);\n         else\n         {\n            Console.WriteLine(myHelloServer1.myHelloMethod(&quot;Client&quot;));\n            // Get the name of the channel.\n            Console.WriteLine(&quot;Channel Name :&quot;+myHttpClientChannel.ChannelName);\n            // Get the channel priority.\n            Console.WriteLine(&quot;ChannelPriority :&quot;+myHttpClientChannel.ChannelPriority.ToString());\n            string myString,myObjectURI1;\n            Console.WriteLine(&quot;Parse :&quot; + \n                myHttpClientChannel.Parse(&quot;http://localhost:8085/SayHello&quot;,out myString)+myString);\n            // Get the key count.\n            System.Console.WriteLine(&quot;Keys.Count : &quot; + myHttpClientChannel.Keys.Count);\n            // Get the channel message sink that delivers message to the specified url.\n            IMessageSink myIMessageSink = \n            myHttpClientChannel.CreateMessageSink(&quot;http://localhost:8085/NewEndPoint&quot;, \n                                                                            null,out myObjectURI1);\n            Console.WriteLine(&quot;The channel message sink that delivers the messages to the URL is : &quot;\n                                    +myIMessageSink.ToString());\n            Console.WriteLine(&quot;URI of the new channel message sink is: &quot; +myObjectURI1);\n         }\n</code></pre><pre><code class=\"lang-vb\" name=\"HttpServerChannel_Server_Client#5\">         &#39; Creating the &#39;IDictionary&#39; to set the server object properties.\n         Dim myDictionary As  New Hashtable()\n         myDictionary(&quot;name&quot;) = &quot;HttpClientChannel&quot;\n         myDictionary(&quot;priority&quot;) = 2\n         &#39; Set the properties along with the constructor.\n       Dim myHttpClientChannel As New _\n                 HttpClientChannel( myDictionary, New BinaryClientFormatterSinkProvider)\n         &#39; Register the server channel.\n         ChannelServices.RegisterChannel(myHttpClientChannel)\n         Dim myHelloServer1 As MyHelloServer = CType(Activator.GetObject(GetType(MyHelloServer), _\n                 &quot;http://localhost:8085/SayHello&quot;), MyHelloServer)\n         If myHelloServer1 Is Nothing Then\n            System.Console.WriteLine(&quot;Could not locate server&quot;)\n         Else\n            Console.WriteLine(myHelloServer1.myHelloMethod(&quot;Client&quot;))\n            &#39; Get the name of the channel.\n            Console.WriteLine(&quot;Channel Name :&quot; + myHttpClientChannel.ChannelName)\n            &#39; Get the channel priority.\n            Console.WriteLine(&quot;ChannelPriority :&quot; + myHttpClientChannel.ChannelPriority.ToString())\n            Dim myString, myObjectURI1 As String\n            Console.WriteLine(&quot;Parse :&quot; + _\n                 myHttpClientChannel.Parse(&quot;http://localhost:8085/SayHello&quot;, myString) + myString)\n            &#39; Get the key count.\n            System.Console.WriteLine(&quot;Keys.Count : &quot; + myHttpClientChannel.Keys.Count.ToString())\n            &#39; Get the channel message sink that delivers message to the specified url.\n            Dim myIMessageSink As IMessageSink =myHttpClientChannel.CreateMessageSink( _\n                 &quot;http://localhost:8085/NewEndPoint&quot;, Nothing, myObjectURI1)\n          Console.WriteLine(&quot;The channel message sink that delivers the messages to the URL is :&quot; + _\n                  CType(myIMessageSink, Object).ToString)\n          Console.WriteLine(&quot;URI of the new channel message sink is: &quot; + myObjectURI1)\n         End If \n</code></pre><pre><code class=\"lang-cpp\" name=\"HttpServerChannel_Server_Client#5\">      // Creating the &#39;IDictionary&#39; to set the server object properties.\n      IDictionary^ myDictionary = gcnew Hashtable;\n      myDictionary[ &quot;name&quot; ] = &quot;HttpClientChannel&quot;;\n      myDictionary[ &quot;priority&quot; ] = 2;\n\n      // Set the properties along with the constructor.\n      HttpClientChannel^ myHttpClientChannel = gcnew HttpClientChannel( myDictionary,gcnew BinaryClientFormatterSinkProvider );\n\n      // Register the server channel.\n      ChannelServices::RegisterChannel( myHttpClientChannel );\n      MyHelloServer ^ myHelloServer1 = dynamic_cast&lt;MyHelloServer^&gt;(Activator::GetObject( MyHelloServer::typeid, &quot;http://localhost:8085/SayHello&quot; ));\n      if ( myHelloServer1 == nullptr )\n            System::Console::WriteLine( &quot;Could not locate server&quot; );\n      else\n      {\n         Console::WriteLine( myHelloServer1-&gt;myHelloMethod( &quot;Client&quot; ) );\n\n         // Get the name of the channel.\n         Console::WriteLine( &quot;Channel Name :{0}&quot;, myHttpClientChannel-&gt;ChannelName );\n\n         // Get the channel priority.\n         Console::WriteLine( &quot;ChannelPriority :{0}&quot;, myHttpClientChannel-&gt;ChannelPriority );\n         String^ myString;\n         String^ myObjectURI1;\n         Console::WriteLine( &quot;Parse :{0}{1}&quot;, myHttpClientChannel-&gt;Parse( &quot;http://localhost:8085/SayHello&quot;,  myString ), myString );\n\n         // Get the key count.\n         System::Console::WriteLine( &quot;Keys-&gt;Count : {0}&quot;, myHttpClientChannel-&gt;Keys-&gt;Count );\n\n         // Get the channel message sink that delivers message to the specified url.\n         IMessageSink^ myIMessageSink = myHttpClientChannel-&gt;CreateMessageSink( &quot;http://localhost:8085/NewEndPoint&quot;, nullptr,  myObjectURI1 );\n         Console::WriteLine( &quot;The channel message sink that delivers the messages to the URL is : {0}&quot;, myIMessageSink );\n         Console::WriteLine( &quot;URI of the new channel message sink is: {0}&quot;, myObjectURI1 );\n      }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Runtime.Remoting.Channels.IChannel.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Runtime.Remoting.Channels.IChannel.yml\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Channels.IChannel\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Channels.IChannel.ChannelName\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Channels.IChannel.ChannelPriority\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Channels.IChannel.Parse\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"7cbe17da-7680-c77c-a63a-6e5f6376d56e\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides conduits for messages that cross remoting boundaries.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Runtime.Remoting.Channels/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Runtime.Remoting.Channels.IChannel\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Runtime.Remoting.Channels.IChannel.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Runtime.Remoting.Channels.IChannel.yml","open_to_public_contributors":true,"api_name":["System.Runtime.Remoting.Channels.IChannel","System.Runtime.Remoting.Channels.IChannel.ChannelName","System.Runtime.Remoting.Channels.IChannel.ChannelPriority","System.Runtime.Remoting.Channels.IChannel.Parse"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Runtime.Remoting.Channels.IChannel","System::Runtime::Remoting::Channels::IChannel","System.Runtime.Remoting.Channels.IChannel.ChannelName","System::Runtime::Remoting::Channels::IChannel::ChannelName","System.Runtime.Remoting.Channels.IChannel.ChannelPriority","System::Runtime::Remoting::Channels::IChannel::ChannelPriority","System.Runtime.Remoting.Channels.IChannel.Parse","System::Runtime::Remoting::Channels::IChannel::Parse"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"7cbe17da-7680-c77c-a63a-6e5f6376d56e","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Runtime.Remoting.Channels/IChannel.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IChannel interface | Microsoft Docs","_op_ogTitle":"IChannel interface","description":"Provides conduits for messages that cross remoting boundaries.\n","toc_asset_id":"_splitted/System.Runtime.Remoting.Channels/toc.json","toc_rel":"_splitted/System.Runtime.Remoting.Channels/toc.json","source_url":"","ms.assetid":"System.Runtime.Remoting.Channels.IChannel","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.runtime.remoting.channels.ichannel","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.runtime.remoting.channels.ichannel","fileRelativePath":"System.Runtime.Remoting.Channels.IChannel.html"},"themesRelativePathToOutputRoot":"_themes/"}