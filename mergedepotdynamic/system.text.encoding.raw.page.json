{"content":"    \r\n    <h1 id=\"System_Text_Encoding\">\r\n      <span class=\"lang-csharp\">Encoding</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a character encoding.  </p>\n<p> To browse the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/text/encoding.cs#3b6090c501893c25\" data-linktype=\"external\">Reference Source</a>.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic abstract class Encoding : ICloneable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Encoding</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <div class=\"NOTE\"><h5>Note</h5><p> To view the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/text/encoding.cs#3b6090c501893c25\" data-linktype=\"external\">Reference Source</a>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <a href=\"http://referencesource.microsoft.com/\" data-linktype=\"external\">instructions</a>.  </p>\n</div>\n<p> Encoding is the process of transforming a set of Unicode characters into a sequence of bytes. In contrast, decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters. For information about the Unicode Transformation Formats (UTFs) and other encodings supported by Encoding, see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a>.  </p>\n<p> Note that Encoding is intended to operate on Unicode characters instead of arbitrary binary data, such as byte arrays. If you must encode arbitrary binary data into text, you should use a protocol such as uuencode, which is implemented by methods such as <a class=\"xref\" href=\"system.convert#System_Convert_ToBase64CharArray_\" data-linktype=\"relative-path\">ToBase64CharArray</a>.  </p>\n<p> The .NET Framework provides the following implementations of the Encoding class to support current Unicode encodings and other encodings:  </p>\n<ul>\n<li><p><a class=\"xref\" href=\"system.text.asciiencoding\" data-linktype=\"relative-path\">ASCIIEncoding</a> encodes Unicode characters as single 7-bit ASCII characters. This encoding only supports character values between U+0000 and U+007F. Code page 20127. Also available through the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_ASCII_\" data-linktype=\"relative-path\">ASCII</a> property.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.text.utf7encoding\" data-linktype=\"relative-path\">UTF7Encoding</a> encodes Unicode characters using the UTF-7 encoding. This encoding supports all Unicode character values. Code page 65000. Also available through the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_UTF7_\" data-linktype=\"relative-path\">UTF7</a> property.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.text.utf8encoding\" data-linktype=\"relative-path\">UTF8Encoding</a> encodes Unicode characters using the UTF-8 encoding. This encoding supports all Unicode character values. Code page 65001. Also available through the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_UTF8_\" data-linktype=\"relative-path\">UTF8</a> property.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.text.unicodeencoding\" data-linktype=\"relative-path\">UnicodeEncoding</a> encodes Unicode characters using the UTF-16 encoding. Both little endian and big endian byte orders are supported. Also available through the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_Unicode_\" data-linktype=\"relative-path\">Unicode</a> property and the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_BigEndianUnicode_\" data-linktype=\"relative-path\">BigEndianUnicode</a> property.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a> encodes Unicode characters using the UTF-32 encoding. Both little endian (code page 12000) and big endian (code page 12001) byte orders are supported. Also available through the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_UTF32_\" data-linktype=\"relative-path\">UTF32</a> property.  </p>\n<p>The Encoding class is primarily intended to convert between different encodings and Unicode. Often one of the derived Unicode classes is the correct choice for your app.  </p>\n<p>Use the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncoding_\" data-linktype=\"relative-path\">GetEncoding</a> method to obtain other encodings, and call the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncodings_\" data-linktype=\"relative-path\">GetEncodings</a> method to get a list of all encodings.  </p>\n<p>The following table lists the encodings supported by the .NET Framework. It lists each encoding&#39;s code page number and the values of the encoding&#39;s <a class=\"xref\" href=\"system.text.encodinginfo#System_Text_EncodingInfo_Name_\" data-linktype=\"relative-path\">Name</a> and <a class=\"xref\" href=\"system.text.encodinginfo#System_Text_EncodingInfo_DisplayName_\" data-linktype=\"relative-path\">DisplayName</a> properties. An asterisk in the last column indicates that the code page is natively supported by the .NET Framework, regardless of the underlying platform. Note that code pages whose <a class=\"xref\" href=\"system.text.encodinginfo#System_Text_EncodingInfo_Name_\" data-linktype=\"relative-path\">Name</a> property corresponds to an international standard do not necessarily comply in full with that standard.  </p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Code page</th>\n<th>Name</th>\n<th>Display name</th>\n<th>.NET Framework support</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>37</td>\n<td>IBM037</td>\n<td>IBM EBCDIC (US-Canada)</td>\n<td></td>\n</tr>\n<tr>\n<td>437</td>\n<td>IBM437</td>\n<td>OEM United States</td>\n<td></td>\n</tr>\n<tr>\n<td>500</td>\n<td>IBM500</td>\n<td>IBM EBCDIC (International)</td>\n<td></td>\n</tr>\n<tr>\n<td>708</td>\n<td>ASMO-708</td>\n<td>Arabic (ASMO 708)</td>\n<td></td>\n</tr>\n<tr>\n<td>720</td>\n<td>DOS-720</td>\n<td>Arabic (DOS)</td>\n<td></td>\n</tr>\n<tr>\n<td>737</td>\n<td>ibm737</td>\n<td>Greek (DOS)</td>\n<td></td>\n</tr>\n<tr>\n<td>775</td>\n<td>ibm775</td>\n<td>Baltic (DOS)</td>\n<td></td>\n</tr>\n<tr>\n<td>850</td>\n<td>ibm850</td>\n<td>Western European (DOS)</td>\n<td></td>\n</tr>\n<tr>\n<td>852</td>\n<td>ibm852</td>\n<td>Central European (DOS)</td>\n<td></td>\n</tr>\n<tr>\n<td>855</td>\n<td>IBM855</td>\n<td>OEM Cyrillic</td>\n<td></td>\n</tr>\n<tr>\n<td>857</td>\n<td>ibm857</td>\n<td>Turkish (DOS)</td>\n<td></td>\n</tr>\n<tr>\n<td>858</td>\n<td>IBM00858</td>\n<td>OEM Multilingual Latin I</td>\n<td></td>\n</tr>\n<tr>\n<td>860</td>\n<td>IBM860</td>\n<td>Portuguese (DOS)</td>\n<td></td>\n</tr>\n<tr>\n<td>861</td>\n<td>ibm861</td>\n<td>Icelandic (DOS)</td>\n<td></td>\n</tr>\n<tr>\n<td>862</td>\n<td>DOS-862</td>\n<td>Hebrew (DOS)</td>\n<td></td>\n</tr>\n<tr>\n<td>863</td>\n<td>IBM863</td>\n<td>French Canadian (DOS)</td>\n<td></td>\n</tr>\n<tr>\n<td>864</td>\n<td>IBM864</td>\n<td>Arabic (864)</td>\n<td></td>\n</tr>\n<tr>\n<td>865</td>\n<td>IBM865</td>\n<td>Nordic (DOS)</td>\n<td></td>\n</tr>\n<tr>\n<td>866</td>\n<td>cp866</td>\n<td>Cyrillic (DOS)</td>\n<td></td>\n</tr>\n<tr>\n<td>869</td>\n<td>ibm869</td>\n<td>Greek, Modern (DOS)</td>\n<td></td>\n</tr>\n<tr>\n<td>870</td>\n<td>IBM870</td>\n<td>IBM EBCDIC (Multilingual Latin-2)</td>\n<td></td>\n</tr>\n<tr>\n<td>874</td>\n<td>windows-874</td>\n<td>Thai (Windows)</td>\n<td></td>\n</tr>\n<tr>\n<td>875</td>\n<td>cp875</td>\n<td>IBM EBCDIC (Greek Modern)</td>\n<td></td>\n</tr>\n<tr>\n<td>932</td>\n<td>shift_jis</td>\n<td>Japanese (Shift-JIS)</td>\n<td></td>\n</tr>\n<tr>\n<td>936</td>\n<td>gb2312</td>\n<td>Chinese Simplified (GB2312)</td>\n<td>✓</td>\n</tr>\n<tr>\n<td>949</td>\n<td>ks_c_5601-1987</td>\n<td>Korean</td>\n<td></td>\n</tr>\n<tr>\n<td>950</td>\n<td>big5</td>\n<td>Chinese Traditional (Big5)</td>\n<td></td>\n</tr>\n<tr>\n<td>1026</td>\n<td>IBM1026</td>\n<td>IBM EBCDIC (Turkish Latin-5)</td>\n<td></td>\n</tr>\n<tr>\n<td>1047</td>\n<td>IBM01047</td>\n<td>IBM Latin-1</td>\n<td></td>\n</tr>\n<tr>\n<td>1140</td>\n<td>IBM01140</td>\n<td>IBM EBCDIC (US-Canada-Euro)</td>\n<td></td>\n</tr>\n<tr>\n<td>1141</td>\n<td>IBM01141</td>\n<td>IBM EBCDIC (Germany-Euro)</td>\n<td></td>\n</tr>\n<tr>\n<td>1142</td>\n<td>IBM01142</td>\n<td>IBM EBCDIC (Denmark-Norway-Euro)</td>\n<td></td>\n</tr>\n<tr>\n<td>1143</td>\n<td>IBM01143</td>\n<td>IBM EBCDIC (Finland-Sweden-Euro)</td>\n<td></td>\n</tr>\n<tr>\n<td>1144</td>\n<td>IBM01144</td>\n<td>IBM EBCDIC (Italy-Euro)</td>\n<td></td>\n</tr>\n<tr>\n<td>1145</td>\n<td>IBM01145</td>\n<td>IBM EBCDIC (Spain-Euro)</td>\n<td></td>\n</tr>\n<tr>\n<td>1146</td>\n<td>IBM01146</td>\n<td>IBM EBCDIC (UK-Euro)</td>\n<td></td>\n</tr>\n<tr>\n<td>1147</td>\n<td>IBM01147</td>\n<td>IBM EBCDIC (France-Euro)</td>\n<td></td>\n</tr>\n<tr>\n<td>1148</td>\n<td>IBM01148</td>\n<td>IBM EBCDIC (International-Euro)</td>\n<td></td>\n</tr>\n<tr>\n<td>1149</td>\n<td>IBM01149</td>\n<td>IBM EBCDIC (Icelandic-Euro)</td>\n<td></td>\n</tr>\n<tr>\n<td>1200</td>\n<td>utf-16</td>\n<td>Unicode</td>\n<td>✓</td>\n</tr>\n<tr>\n<td>1201</td>\n<td>unicodeFFFE</td>\n<td>Unicode (Big endian)</td>\n<td>✓</td>\n</tr>\n<tr>\n<td>1250</td>\n<td>windows-1250</td>\n<td>Central European (Windows)</td>\n<td></td>\n</tr>\n<tr>\n<td>1251</td>\n<td>windows-1251</td>\n<td>Cyrillic (Windows)</td>\n<td></td>\n</tr>\n<tr>\n<td>1252</td>\n<td>Windows-1252</td>\n<td>Western European (Windows)</td>\n<td>✓</td>\n</tr>\n<tr>\n<td>1253</td>\n<td>windows-1253</td>\n<td>Greek (Windows)</td>\n<td></td>\n</tr>\n<tr>\n<td>1254</td>\n<td>windows-1254</td>\n<td>Turkish (Windows)</td>\n<td></td>\n</tr>\n<tr>\n<td>1255</td>\n<td>windows-1255</td>\n<td>Hebrew (Windows)</td>\n<td></td>\n</tr>\n<tr>\n<td>1256</td>\n<td>windows-1256</td>\n<td>Arabic (Windows)</td>\n<td></td>\n</tr>\n<tr>\n<td>1257</td>\n<td>windows-1257</td>\n<td>Baltic (Windows)</td>\n<td></td>\n</tr>\n<tr>\n<td>1258</td>\n<td>windows-1258</td>\n<td>Vietnamese (Windows)</td>\n<td></td>\n</tr>\n<tr>\n<td>1361</td>\n<td>Johab</td>\n<td>Korean (Johab)</td>\n<td></td>\n</tr>\n<tr>\n<td>10000</td>\n<td>macintosh</td>\n<td>Western European (Mac)</td>\n<td></td>\n</tr>\n<tr>\n<td>10001</td>\n<td>x-mac-japanese</td>\n<td>Japanese (Mac)</td>\n<td></td>\n</tr>\n<tr>\n<td>10002</td>\n<td>x-mac-chinesetrad</td>\n<td>Chinese Traditional (Mac)</td>\n<td></td>\n</tr>\n<tr>\n<td>10003</td>\n<td>x-mac-korean</td>\n<td>Korean (Mac)</td>\n<td>✓</td>\n</tr>\n<tr>\n<td>10004</td>\n<td>x-mac-arabic</td>\n<td>Arabic (Mac)</td>\n<td></td>\n</tr>\n<tr>\n<td>10005</td>\n<td>x-mac-hebrew</td>\n<td>Hebrew (Mac)</td>\n<td></td>\n</tr>\n<tr>\n<td>10006</td>\n<td>x-mac-greek</td>\n<td>Greek (Mac)</td>\n<td></td>\n</tr>\n<tr>\n<td>10007</td>\n<td>x-mac-cyrillic</td>\n<td>Cyrillic (Mac)</td>\n<td></td>\n</tr>\n<tr>\n<td>10008</td>\n<td>x-mac-chinesesimp</td>\n<td>Chinese Simplified (Mac)</td>\n<td>✓</td>\n</tr>\n<tr>\n<td>10010</td>\n<td>x-mac-romanian</td>\n<td>Romanian (Mac)</td>\n<td></td>\n</tr>\n<tr>\n<td>10017</td>\n<td>x-mac-ukrainian</td>\n<td>Ukrainian (Mac)</td>\n<td></td>\n</tr>\n<tr>\n<td>10021</td>\n<td>x-mac-thai</td>\n<td>Thai (Mac)</td>\n<td></td>\n</tr>\n<tr>\n<td>10029</td>\n<td>x-mac-ce</td>\n<td>Central European (Mac)</td>\n<td></td>\n</tr>\n<tr>\n<td>10079</td>\n<td>x-mac-icelandic</td>\n<td>Icelandic (Mac)</td>\n<td></td>\n</tr>\n<tr>\n<td>10081</td>\n<td>x-mac-turkish</td>\n<td>Turkish (Mac)</td>\n<td></td>\n</tr>\n<tr>\n<td>10082</td>\n<td>x-mac-croatian</td>\n<td>Croatian (Mac)</td>\n<td></td>\n</tr>\n<tr>\n<td>12000</td>\n<td>utf-32</td>\n<td>Unicode (UTF-32)</td>\n<td>✓</td>\n</tr>\n<tr>\n<td>12001</td>\n<td>utf-32BE</td>\n<td>Unicode (UTF-32 Big endian)</td>\n<td>✓</td>\n</tr>\n<tr>\n<td>20000</td>\n<td>x-Chinese-CNS</td>\n<td>Chinese Traditional (CNS)</td>\n<td></td>\n</tr>\n<tr>\n<td>20001</td>\n<td>x-cp20001</td>\n<td>TCA Taiwan</td>\n<td></td>\n</tr>\n<tr>\n<td>20002</td>\n<td>x-Chinese-Eten</td>\n<td>Chinese Traditional (Eten)</td>\n<td></td>\n</tr>\n<tr>\n<td>20003</td>\n<td>x-cp20003</td>\n<td>IBM5550 Taiwan</td>\n<td></td>\n</tr>\n<tr>\n<td>20004</td>\n<td>x-cp20004</td>\n<td>TeleText Taiwan</td>\n<td></td>\n</tr>\n<tr>\n<td>20005</td>\n<td>x-cp20005</td>\n<td>Wang Taiwan</td>\n<td></td>\n</tr>\n<tr>\n<td>20105</td>\n<td>x-IA5</td>\n<td>Western European (IA5)</td>\n<td></td>\n</tr>\n<tr>\n<td>20106</td>\n<td>x-IA5-German</td>\n<td>German (IA5)</td>\n<td></td>\n</tr>\n<tr>\n<td>20107</td>\n<td>x-IA5-Swedish</td>\n<td>Swedish (IA5)</td>\n<td></td>\n</tr>\n<tr>\n<td>20108</td>\n<td>x-IA5-Norwegian</td>\n<td>Norwegian (IA5)</td>\n<td></td>\n</tr>\n<tr>\n<td>20127</td>\n<td>us-ascii</td>\n<td>US-ASCII</td>\n<td>✓</td>\n</tr>\n<tr>\n<td>20261</td>\n<td>x-cp20261</td>\n<td>T.61</td>\n<td></td>\n</tr>\n<tr>\n<td>20269</td>\n<td>x-cp20269</td>\n<td>ISO-6937</td>\n<td></td>\n</tr>\n<tr>\n<td>20273</td>\n<td>IBM273</td>\n<td>IBM EBCDIC (Germany)</td>\n<td></td>\n</tr>\n<tr>\n<td>20277</td>\n<td>IBM277</td>\n<td>IBM EBCDIC (Denmark-Norway)</td>\n<td></td>\n</tr>\n<tr>\n<td>20278</td>\n<td>IBM278</td>\n<td>IBM EBCDIC (Finland-Sweden)</td>\n<td></td>\n</tr>\n<tr>\n<td>20280</td>\n<td>IBM280</td>\n<td>IBM EBCDIC (Italy)</td>\n<td></td>\n</tr>\n<tr>\n<td>20284</td>\n<td>IBM284</td>\n<td>IBM EBCDIC (Spain)</td>\n<td></td>\n</tr>\n<tr>\n<td>20285</td>\n<td>IBM285</td>\n<td>IBM EBCDIC (UK)</td>\n<td></td>\n</tr>\n<tr>\n<td>20290</td>\n<td>IBM290</td>\n<td>IBM EBCDIC (Japanese katakana)</td>\n<td></td>\n</tr>\n<tr>\n<td>20297</td>\n<td>IBM297</td>\n<td>IBM EBCDIC (France)</td>\n<td></td>\n</tr>\n<tr>\n<td>20420</td>\n<td>IBM420</td>\n<td>IBM EBCDIC (Arabic)</td>\n<td></td>\n</tr>\n<tr>\n<td>20423</td>\n<td>IBM423</td>\n<td>IBM EBCDIC (Greek)</td>\n<td></td>\n</tr>\n<tr>\n<td>20424</td>\n<td>IBM424</td>\n<td>IBM EBCDIC (Hebrew)</td>\n<td></td>\n</tr>\n<tr>\n<td>20833</td>\n<td>x-EBCDIC-KoreanExtended</td>\n<td>IBM EBCDIC (Korean Extended)</td>\n<td></td>\n</tr>\n<tr>\n<td>20838</td>\n<td>IBM-Thai</td>\n<td>IBM EBCDIC (Thai)</td>\n<td></td>\n</tr>\n<tr>\n<td>20866</td>\n<td>koi8-r</td>\n<td>Cyrillic (KOI8-R)</td>\n<td></td>\n</tr>\n<tr>\n<td>20871</td>\n<td>IBM871</td>\n<td>IBM EBCDIC (Icelandic)</td>\n<td></td>\n</tr>\n<tr>\n<td>20880</td>\n<td>IBM880</td>\n<td>IBM EBCDIC (Cyrillic Russian)</td>\n<td></td>\n</tr>\n<tr>\n<td>20905</td>\n<td>IBM905</td>\n<td>IBM EBCDIC (Turkish)</td>\n<td></td>\n</tr>\n<tr>\n<td>20924</td>\n<td>IBM00924</td>\n<td>IBM Latin-1</td>\n<td></td>\n</tr>\n<tr>\n<td>20932</td>\n<td>EUC-JP</td>\n<td>Japanese (JIS 0208-1990 and 0212-1990)</td>\n<td></td>\n</tr>\n<tr>\n<td>20936</td>\n<td>x-cp20936</td>\n<td>Chinese Simplified (GB2312-80)</td>\n<td>✓</td>\n</tr>\n<tr>\n<td>20949</td>\n<td>x-cp20949</td>\n<td>Korean Wansung</td>\n<td>✓</td>\n</tr>\n<tr>\n<td>21025</td>\n<td>cp1025</td>\n<td>IBM EBCDIC (Cyrillic Serbian-Bulgarian)</td>\n<td></td>\n</tr>\n<tr>\n<td>21866</td>\n<td>koi8-u</td>\n<td>Cyrillic (KOI8-U)</td>\n<td></td>\n</tr>\n<tr>\n<td>28591</td>\n<td>iso-8859-1</td>\n<td>Western European (ISO)</td>\n<td>✓</td>\n</tr>\n<tr>\n<td>28592</td>\n<td>iso-8859-2</td>\n<td>Central European (ISO)</td>\n<td></td>\n</tr>\n<tr>\n<td>28593</td>\n<td>iso-8859-3</td>\n<td>Latin 3 (ISO)</td>\n<td></td>\n</tr>\n<tr>\n<td>28594</td>\n<td>iso-8859-4</td>\n<td>Baltic (ISO)</td>\n<td></td>\n</tr>\n<tr>\n<td>28595</td>\n<td>iso-8859-5</td>\n<td>Cyrillic (ISO)</td>\n<td></td>\n</tr>\n<tr>\n<td>28596</td>\n<td>iso-8859-6</td>\n<td>Arabic (ISO)</td>\n<td></td>\n</tr>\n<tr>\n<td>28597</td>\n<td>iso-8859-7</td>\n<td>Greek (ISO)</td>\n<td></td>\n</tr>\n<tr>\n<td>28598</td>\n<td>iso-8859-8</td>\n<td>Hebrew (ISO-Visual)</td>\n<td>✓</td>\n</tr>\n<tr>\n<td>28599</td>\n<td>iso-8859-9</td>\n<td>Turkish (ISO)</td>\n<td></td>\n</tr>\n<tr>\n<td>28603</td>\n<td>iso-8859-13</td>\n<td>Estonian (ISO)</td>\n<td></td>\n</tr>\n<tr>\n<td>28605</td>\n<td>iso-8859-15</td>\n<td>Latin 9 (ISO)</td>\n<td></td>\n</tr>\n<tr>\n<td>29001</td>\n<td>x-Europa</td>\n<td>Europa</td>\n<td></td>\n</tr>\n<tr>\n<td>38598</td>\n<td>iso-8859-8-i</td>\n<td>Hebrew (ISO-Logical)</td>\n<td>✓</td>\n</tr>\n<tr>\n<td>50220</td>\n<td>iso-2022-jp</td>\n<td>Japanese (JIS)</td>\n<td>✓</td>\n</tr>\n<tr>\n<td>50221</td>\n<td>csISO2022JP</td>\n<td>Japanese (JIS-Allow 1 byte Kana)</td>\n<td>✓</td>\n</tr>\n<tr>\n<td>50222</td>\n<td>iso-2022-jp</td>\n<td>Japanese (JIS-Allow 1 byte Kana - SO/SI)</td>\n<td>✓</td>\n</tr>\n<tr>\n<td>50225</td>\n<td>iso-2022-kr</td>\n<td>Korean (ISO)</td>\n<td>✓</td>\n</tr>\n<tr>\n<td>50227</td>\n<td>x-cp50227</td>\n<td>Chinese Simplified (ISO-2022)</td>\n<td>✓</td>\n</tr>\n<tr>\n<td>51932</td>\n<td>euc-jp</td>\n<td>Japanese (EUC)</td>\n<td>✓</td>\n</tr>\n<tr>\n<td>51936</td>\n<td>EUC-CN</td>\n<td>Chinese Simplified (EUC)</td>\n<td>✓</td>\n</tr>\n<tr>\n<td>51949</td>\n<td>euc-kr</td>\n<td>Korean (EUC)</td>\n<td>✓</td>\n</tr>\n<tr>\n<td>52936</td>\n<td>hz-gb-2312</td>\n<td>Chinese Simplified (HZ)</td>\n<td>✓</td>\n</tr>\n<tr>\n<td>54936</td>\n<td>GB18030</td>\n<td>Chinese Simplified (GB18030)</td>\n<td>✓</td>\n</tr>\n<tr>\n<td>57002</td>\n<td>x-iscii-de</td>\n<td>ISCII Devanagari</td>\n<td>✓</td>\n</tr>\n<tr>\n<td>57003</td>\n<td>x-iscii-be</td>\n<td>ISCII Bengali</td>\n<td>✓</td>\n</tr>\n<tr>\n<td>57004</td>\n<td>x-iscii-ta</td>\n<td>ISCII Tamil</td>\n<td>✓</td>\n</tr>\n<tr>\n<td>57005</td>\n<td>x-iscii-te</td>\n<td>ISCII Telugu</td>\n<td>✓</td>\n</tr>\n<tr>\n<td>57006</td>\n<td>x-iscii-as</td>\n<td>ISCII Assamese</td>\n<td>✓</td>\n</tr>\n<tr>\n<td>57007</td>\n<td>x-iscii-or</td>\n<td>ISCII Oriya</td>\n<td>✓</td>\n</tr>\n<tr>\n<td>57008</td>\n<td>x-iscii-ka</td>\n<td>ISCII Kannada</td>\n<td>✓</td>\n</tr>\n<tr>\n<td>57009</td>\n<td>x-iscii-ma</td>\n<td>ISCII Malayalam</td>\n<td>✓</td>\n</tr>\n<tr>\n<td>57010</td>\n<td>x-iscii-gu</td>\n<td>ISCII Gujarati</td>\n<td>✓</td>\n</tr>\n<tr>\n<td>57011</td>\n<td>x-iscii-pa</td>\n<td>ISCII Punjabi</td>\n<td>✓</td>\n</tr>\n<tr>\n<td>65000</td>\n<td>utf-7</td>\n<td>Unicode (UTF-7)</td>\n<td>✓</td>\n</tr>\n<tr>\n<td>65001</td>\n<td>utf-8</td>\n<td>Unicode (UTF-8)</td>\n<td>✓</td>\n</tr>\n</tbody>\n</table>\n<p> The following example calls the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncoding_System_Int32_\" data-linktype=\"relative-path\">GetEncoding(Int32)</a> and <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncoding_System_String_\" data-linktype=\"relative-path\">GetEncoding(String)</a> methods to get the Greek (Windows) code page encoding. It compares the Encoding objects returned by the method calls to show that they are equal, and then maps displays the Unicode code point and the corresponding code page value for each character in the Greek alphabet.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.Encoding#1\">using System;\nusing System.Text;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Encoding enc = Encoding.GetEncoding(1253);\n      Encoding altEnc = Encoding.GetEncoding(&quot;windows-1253&quot;);\n      Console.WriteLine(&quot;{0} = Code Page {1}: {2}&quot;, enc.EncodingName,\n                        altEnc.CodePage, enc.Equals(altEnc));\n      string greekAlphabet = &quot;Α α Β β Γ γ Δ δ Ε ε Ζ ζ Η η &quot; +\n                             &quot;Θ θ Ι ι Κ κ Λ λ Μ μ Ν ν Ξ ξ &quot; +\n                             &quot;Ο ο Π π Ρ ρ Σ σ ς Τ τ Υ υ &quot; +\n                             &quot;Φ φ Χ χ Ψ ψ Ω ω&quot;;\n      Console.OutputEncoding = Encoding.UTF8;\n      byte[] bytes = enc.GetBytes(greekAlphabet);\n      Console.WriteLine(&quot;{0,-12} {1,20} {2,20:X2}&quot;, &quot;Character&quot;,\n                        &quot;Unicode Code Point&quot;, &quot;Code Page 1253&quot;);\n      for (int ctr = 0; ctr &lt; bytes.Length; ctr++) {\n         if (greekAlphabet[ctr].Equals(&#39; &#39;))\n            continue;\n\n         Console.WriteLine(&quot;{0,-12} {1,20} {2,20:X2}&quot;, greekAlphabet[ctr],\n                           GetCodePoint(greekAlphabet[ctr]), bytes[ctr]);\n      }\n   }\n\n   private static string GetCodePoint(char ch)\n   {\n      string retVal = &quot;u+&quot;;\n      byte[] bytes = Encoding.Unicode.GetBytes(ch.ToString());\n      for (int ctr = bytes.Length - 1; ctr &gt;= 0; ctr--)\n         retVal += bytes[ctr].ToString(&quot;X2&quot;);\n\n      return retVal;\n   }\n}\n// The example displays the following output:\n//       Character      Unicode Code Point       Code Page 1253\n//       Α                          u+0391                   C1\n//       α                          u+03B1                   E1\n//       Β                          u+0392                   C2\n//       β                          u+03B2                   E2\n//       Γ                          u+0393                   C3\n//       γ                          u+03B3                   E3\n//       Δ                          u+0394                   C4\n//       δ                          u+03B4                   E4\n//       Ε                          u+0395                   C5\n//       ε                          u+03B5                   E5\n//       Ζ                          u+0396                   C6\n//       ζ                          u+03B6                   E6\n//       Η                          u+0397                   C7\n//       η                          u+03B7                   E7\n//       Θ                          u+0398                   C8\n//       θ                          u+03B8                   E8\n//       Ι                          u+0399                   C9\n//       ι                          u+03B9                   E9\n//       Κ                          u+039A                   CA\n//       κ                          u+03BA                   EA\n//       Λ                          u+039B                   CB\n//       λ                          u+03BB                   EB\n//       Μ                          u+039C                   CC\n//       μ                          u+03BC                   EC\n//       Ν                          u+039D                   CD\n//       ν                          u+03BD                   ED\n//       Ξ                          u+039E                   CE\n//       ξ                          u+03BE                   EE\n//       Ο                          u+039F                   CF\n//       ο                          u+03BF                   EF\n//       Π                          u+03A0                   D0\n//       π                          u+03C0                   F0\n//       Ρ                          u+03A1                   D1\n//       ρ                          u+03C1                   F1\n//       Σ                          u+03A3                   D3\n//       σ                          u+03C3                   F3\n//       ς                          u+03C2                   F2\n//       Τ                          u+03A4                   D4\n//       τ                          u+03C4                   F4\n//       Υ                          u+03A5                   D5\n//       υ                          u+03C5                   F5\n//       Φ                          u+03A6                   D6\n//       φ                          u+03C6                   F6\n//       Χ                          u+03A7                   D7\n//       χ                          u+03C7                   F7\n//       Ψ                          u+03A8                   D8\n//       ψ                          u+03C8                   F8\n//       Ω                          u+03A9                   D9\n//       ω                          u+03C9                   F9\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.Encoding#1\">Imports System.Text\n\nModule Example\n   Public Sub Main()\n      Dim enc As Encoding = Encoding.GetEncoding(1253)\n      Dim altEnc As Encoding = Encoding.GetEncoding(&quot;windows-1253&quot;)\n      Console.WriteLine(&quot;{0} = Code Page {1}: {2}&quot;, enc.EncodingName,\n                        altEnc.CodePage, enc.Equals(altEnc))\n      Dim greekAlphabet As String = &quot;Α α Β β Γ γ Δ δ Ε ε Ζ ζ Η η &quot; +\n                                    &quot;Θ θ Ι ι Κ κ Λ λ Μ μ Ν ν Ξ ξ &quot; +\n                                    &quot;Ο ο Π π Ρ ρ Σ σ ς Τ τ Υ υ &quot; +\n                                    &quot;Φ φ Χ χ Ψ ψ Ω ω&quot;\n      Console.OutputEncoding = Encoding.UTF8\n      Dim bytes() As Byte = enc.GetBytes(greekAlphabet)\n      Console.WriteLine(&quot;{0,-12} {1,20} {2,20:X2}&quot;, &quot;Character&quot;,\n                        &quot;Unicode Code Point&quot;, &quot;Code Page 1253&quot;)\n      For ctr As Integer = 0 To bytes.Length - 1\n         If greekAlphabet(ctr).Equals(&quot; &quot;c) Then Continue For\n\n         Console.WriteLine(&quot;{0,-12} {1,20} {2,20:X2}&quot;, greekAlphabet(ctr),\n                           GetCodePoint(greekAlphabet(ctr)), bytes(ctr))\n      Next\n\n   End Sub\n   \n   Private Function GetCodePoint(ch As String) As String\n      Dim retVal As String = &quot;u+&quot;\n      Dim bytes() As Byte = Encoding.Unicode.GetBytes(ch)\n      For ctr As Integer = bytes.Length - 1 To 0 Step -1\n         retVal += bytes(ctr).ToString(&quot;X2&quot;)\n      Next\n      Return retVal\n   End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;    Character      Unicode Code Point       Code Page 1253\n&#39;    Α                          u+0391                   C1\n&#39;    α                          u+03B1                   E1\n&#39;    Β                          u+0392                   C2\n&#39;    β                          u+03B2                   E2\n&#39;    Γ                          u+0393                   C3\n&#39;    γ                          u+03B3                   E3\n&#39;    Δ                          u+0394                   C4\n&#39;    δ                          u+03B4                   E4\n&#39;    Ε                          u+0395                   C5\n&#39;    ε                          u+03B5                   E5\n&#39;    Ζ                          u+0396                   C6\n&#39;    ζ                          u+03B6                   E6\n&#39;    Η                          u+0397                   C7\n&#39;    η                          u+03B7                   E7\n&#39;    Θ                          u+0398                   C8\n&#39;    θ                          u+03B8                   E8\n&#39;    Ι                          u+0399                   C9\n&#39;    ι                          u+03B9                   E9\n&#39;    Κ                          u+039A                   CA\n&#39;    κ                          u+03BA                   EA\n&#39;    Λ                          u+039B                   CB\n&#39;    λ                          u+03BB                   EB\n&#39;    Μ                          u+039C                   CC\n&#39;    μ                          u+03BC                   EC\n&#39;    Ν                          u+039D                   CD\n&#39;    ν                          u+03BD                   ED\n&#39;    Ξ                          u+039E                   CE\n&#39;    ξ                          u+03BE                   EE\n&#39;    Ο                          u+039F                   CF\n&#39;    ο                          u+03BF                   EF\n&#39;    Π                          u+03A0                   D0\n&#39;    π                          u+03C0                   F0\n&#39;    Ρ                          u+03A1                   D1\n&#39;    ρ                          u+03C1                   F1\n&#39;    Σ                          u+03A3                   D3\n&#39;    σ                          u+03C3                   F3\n&#39;    ς                          u+03C2                   F2\n&#39;    Τ                          u+03A4                   D4\n&#39;    τ                          u+03C4                   F4\n&#39;    Υ                          u+03A5                   D5\n&#39;    υ                          u+03C5                   F5\n&#39;    Φ                          u+03A6                   D6\n&#39;    φ                          u+03C6                   F6\n&#39;    Χ                          u+03A7                   D7\n&#39;    χ                          u+03C7                   F7\n&#39;    Ψ                          u+03A8                   D8\n&#39;    ψ                          u+03C8                   F8\n&#39;    Ω                          u+03A9                   D9\n&#39;    ω                          u+03C9                   F9\n</code></pre><p> If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> or the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> provided by the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetDecoder_\" data-linktype=\"relative-path\">GetDecoder</a> method or the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncoder_\" data-linktype=\"relative-path\">GetEncoder</a> method, respectively, of a derived class.  </p>\n<p> The UTF-16 and the UTF-32 encoders can use the big endian byte order (most significant byte first) or the little endian byte order (least significant byte first). For example, the Latin Capital Letter A (U+0041) is serialized as follows (in hexadecimal):  </p>\n<ul>\n<li><p>UTF-16 big endian byte order: 00 41  </p>\n</li>\n<li><p>UTF-16 little endian byte order: 41 00  </p>\n</li>\n<li><p>UTF-32 big endian byte order: 00 00 00 41  </p>\n</li>\n<li><p>UTF-32 little endian byte order: 41 00 00 00  </p>\n<p>It is generally more efficient to store Unicode characters using the native byte order. For example, it is better to use the little endian byte order on little endian platforms, such as Intel computers.  </p>\n<p>The <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetPreamble_\" data-linktype=\"relative-path\">GetPreamble</a> method retrieves an array of bytes that includes the byte order mark (BOM). If this byte array is prefixed to an encoded stream, it helps the decoder to identify the encoding format used.  </p>\n<p>For more information on byte order and the byte order mark, see The Unicode Standard at the <a href=\"http://go.microsoft.com/fwlink/?LinkId=37123\" data-linktype=\"external\">Unicode home page</a>.  </p>\n<p>Note that the encoding classes allow errors to:  </p>\n</li>\n<li><p>Silently change to a &quot;?&quot; character.  </p>\n</li>\n<li><p>Use a &quot;best fit&quot; character.  </p>\n</li>\n<li><p>Change to an application-specific behavior through use of the <a class=\"xref\" href=\"system.text.encoderfallback\" data-linktype=\"relative-path\">EncoderFallback</a> and <a class=\"xref\" href=\"system.text.decoderfallback\" data-linktype=\"relative-path\">DecoderFallback</a> classes with the U+FFFD Unicode replacement character.  </p>\n<p>You should throw an exception on any data stream error. An app either uses a &quot;throwonerror&quot; flag when applicable or uses the <a class=\"xref\" href=\"system.text.encoderexceptionfallback\" data-linktype=\"relative-path\">EncoderExceptionFallback</a> and <a class=\"xref\" href=\"system.text.decoderexceptionfallback\" data-linktype=\"relative-path\">DecoderExceptionFallback</a> classes. Best fit fallback is often not recommended because it can cause data loss or confusion and is slower than simple character replacements. For ANSI encodings, the best fit behavior is the default.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding__ctor\" data-linktype=\"self-bookmark\">Encoding()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding__ctor_System_Int32_\" data-linktype=\"self-bookmark\">Encoding(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> class that corresponds to the specified code page.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding__ctor_System_Int32_System_Text_EncoderFallback_System_Text_DecoderFallback_\" data-linktype=\"self-bookmark\">Encoding(Int32,EncoderFallback,DecoderFallback)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> class that corresponds to the specified code page with the specified encoder and decoder fallback strategies.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_ASCII\" data-linktype=\"self-bookmark\">ASCII</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an encoding for the ASCII (7-bit) character set.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_BigEndianUnicode\" data-linktype=\"self-bookmark\">BigEndianUnicode</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an encoding for the UTF-16 format that uses the big endian byte order.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_BodyName\" data-linktype=\"self-bookmark\">BodyName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets a name for the current encoding that can be used with mail agent body tags.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_CodePage\" data-linktype=\"self-bookmark\">CodePage</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets the code page identifier of the current <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_DecoderFallback\" data-linktype=\"self-bookmark\">DecoderFallback</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.text.decoderfallback\" data-linktype=\"relative-path\">DecoderFallback</a> object for the current <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_Default\" data-linktype=\"self-bookmark\">Default</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an encoding for the operating system&#39;s current ANSI code page.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_EncoderFallback\" data-linktype=\"self-bookmark\">EncoderFallback</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.text.encoderfallback\" data-linktype=\"relative-path\">EncoderFallback</a> object for the current <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_EncodingName\" data-linktype=\"self-bookmark\">EncodingName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets the human-readable description of the current encoding.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_HeaderName\" data-linktype=\"self-bookmark\">HeaderName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets a name for the current encoding that can be used with mail agent header tags.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_IsBrowserDisplay\" data-linktype=\"self-bookmark\">IsBrowserDisplay</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets a value indicating whether the current encoding can be used by browser clients for displaying content.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_IsBrowserSave\" data-linktype=\"self-bookmark\">IsBrowserSave</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets a value indicating whether the current encoding can be used by browser clients for saving content.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_IsMailNewsDisplay\" data-linktype=\"self-bookmark\">IsMailNewsDisplay</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets a value indicating whether the current encoding can be used by mail and news clients for displaying content.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_IsMailNewsSave\" data-linktype=\"self-bookmark\">IsMailNewsSave</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets a value indicating whether the current encoding can be used by mail and news clients for saving content.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_IsReadOnly\" data-linktype=\"self-bookmark\">IsReadOnly</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets a value indicating whether the current encoding is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_IsSingleByte\" data-linktype=\"self-bookmark\">IsSingleByte</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets a value indicating whether the current encoding uses single-byte code points.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_Unicode\" data-linktype=\"self-bookmark\">Unicode</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an encoding for the UTF-16 format using the little endian byte order.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_UTF32\" data-linktype=\"self-bookmark\">UTF32</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an encoding for the UTF-32 format using the little endian byte order.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_UTF7\" data-linktype=\"self-bookmark\">UTF7</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an encoding for the UTF-7 format.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_UTF8\" data-linktype=\"self-bookmark\">UTF8</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an encoding for the UTF-8 format.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_WebName\" data-linktype=\"self-bookmark\">WebName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets the name registered with the Internet Assigned Numbers Authority (IANA) for the current encoding.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_WindowsCodePage\" data-linktype=\"self-bookmark\">WindowsCodePage</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets the Windows operating system code page that most closely corresponds to the current encoding.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_Clone\" data-linktype=\"self-bookmark\">Clone()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, creates a shallow copy of the current <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_Convert_System_Text_Encoding_System_Text_Encoding_System_Byte___\" data-linktype=\"self-bookmark\">Convert(Encoding,Encoding,Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts an entire byte array from one encoding to another.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_Convert_System_Text_Encoding_System_Text_Encoding_System_Byte___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Convert(Encoding,Encoding,Byte[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts a range of bytes in a byte array from one encoding to another.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the specified <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> is equal to the current instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_GetByteCount_System_Char___\" data-linktype=\"self-bookmark\">GetByteCount(Char[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, calculates the number of bytes produced by encoding all the characters in the specified character array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_GetByteCount_System_String_\" data-linktype=\"self-bookmark\">GetByteCount(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, calculates the number of bytes produced by encoding the characters in the specified string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_GetByteCount_System_Char__System_Int32_\" data-linktype=\"self-bookmark\">GetByteCount(Char*,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_GetByteCount_System_Char___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">GetByteCount(Char[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters from the specified character array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_GetBytes_System_Char___\" data-linktype=\"self-bookmark\">GetBytes(Char[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, encodes all the characters in the specified character array into a sequence of bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_GetBytes_System_String_\" data-linktype=\"self-bookmark\">GetBytes(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, encodes all the characters in the specified string into a sequence of bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_GetBytes_System_Char___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">GetBytes(Char[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, encodes a set of characters from the specified character array into a sequence of bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_GetBytes_System_Char__System_Int32_System_Byte__System_Int32_\" data-linktype=\"self-bookmark\">GetBytes(Char*,Int32,Byte*,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_GetBytes_System_Char___System_Int32_System_Int32_System_Byte___System_Int32_\" data-linktype=\"self-bookmark\">GetBytes(Char[],Int32,Int32,Byte[],Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, encodes a set of characters from the specified character array into the specified byte array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_GetBytes_System_String_System_Int32_System_Int32_System_Byte___System_Int32_\" data-linktype=\"self-bookmark\">GetBytes(String,Int32,Int32,Byte[],Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, encodes a set of characters from the specified string into the specified byte array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_GetCharCount_System_Byte___\" data-linktype=\"self-bookmark\">GetCharCount(Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, calculates the number of characters produced by decoding all the bytes in the specified byte array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_GetCharCount_System_Byte__System_Int32_\" data-linktype=\"self-bookmark\">GetCharCount(Byte*,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_GetCharCount_System_Byte___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">GetCharCount(Byte[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_GetChars_System_Byte___\" data-linktype=\"self-bookmark\">GetChars(Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, decodes all the bytes in the specified byte array into a set of characters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_GetChars_System_Byte___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">GetChars(Byte[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, decodes a sequence of bytes from the specified byte array into a set of characters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_GetChars_System_Byte__System_Int32_System_Char__System_Int32_\" data-linktype=\"self-bookmark\">GetChars(Byte*,Int32,Char*,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_GetChars_System_Byte___System_Int32_System_Int32_System_Char___System_Int32_\" data-linktype=\"self-bookmark\">GetChars(Byte[],Int32,Int32,Char[],Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, decodes a sequence of bytes from the specified byte array into the specified character array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_GetDecoder\" data-linktype=\"self-bookmark\">GetDecoder()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, obtains a decoder that converts an encoded sequence of bytes into a sequence of characters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_GetEncoder\" data-linktype=\"self-bookmark\">GetEncoder()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, obtains an encoder that converts a sequence of Unicode characters into an encoded sequence of bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_GetEncoding_System_Int32_\" data-linktype=\"self-bookmark\">GetEncoding(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the encoding associated with the specified code page identifier.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_GetEncoding_System_String_\" data-linktype=\"self-bookmark\">GetEncoding(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the encoding associated with the specified code page name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_GetEncoding_System_Int32_System_Text_EncoderFallback_System_Text_DecoderFallback_\" data-linktype=\"self-bookmark\">GetEncoding(Int32,EncoderFallback,DecoderFallback)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the encoding associated with the specified code page identifier. Parameters specify an error handler for characters that cannot be encoded and byte sequences that cannot be decoded.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_GetEncoding_System_String_System_Text_EncoderFallback_System_Text_DecoderFallback_\" data-linktype=\"self-bookmark\">GetEncoding(String,EncoderFallback,DecoderFallback)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the encoding associated with the specified code page name. Parameters specify an error handler for characters that cannot be encoded and byte sequences that cannot be decoded.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_GetEncodings\" data-linktype=\"self-bookmark\">GetEncodings()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an array that contains all encodings.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the hash code for the current instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_GetMaxByteCount_System_Int32_\" data-linktype=\"self-bookmark\">GetMaxByteCount(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, calculates the maximum number of bytes produced by encoding the specified number of characters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_GetMaxCharCount_System_Int32_\" data-linktype=\"self-bookmark\">GetMaxCharCount(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, calculates the maximum number of characters produced by decoding the specified number of bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_GetPreamble\" data-linktype=\"self-bookmark\">GetPreamble()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, returns a sequence of bytes that specifies the encoding used.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_GetString_System_Byte___\" data-linktype=\"self-bookmark\">GetString(Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, decodes all the bytes in the specified byte array into a string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_GetString_System_Byte__System_Int32_\" data-linktype=\"self-bookmark\">GetString(Byte*,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, decodes a specified number of bytes starting at a specified address into a string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_GetString_System_Byte___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">GetString(Byte[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, decodes a sequence of bytes from the specified byte array into a string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_IsAlwaysNormalized\" data-linktype=\"self-bookmark\">IsAlwaysNormalized()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the current encoding is always normalized, using the default normalization form.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_IsAlwaysNormalized_System_Text_NormalizationForm_\" data-linktype=\"self-bookmark\">IsAlwaysNormalized(NormalizationForm)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets a value indicating whether the current encoding is always normalized, using the specified normalization form.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoding_RegisterProvider_System_Text_EncodingProvider_\" data-linktype=\"self-bookmark\">RegisterProvider(EncodingProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Registers an encoding provider.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding__ctor\">\r\n    \r\n            <a id=\"System_Text_Encoding__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Encoding()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected Encoding ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Derived classes override this constructor.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding__ctor_System_Int32_\">\r\n    \r\n            <a id=\"System_Text_Encoding__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Encoding(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> class that corresponds to the specified code page.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected Encoding (int codePage);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>codePage</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The code page identifier of the preferred encoding.  </p>\n<p> -or-  </p>\n<p> 0, to use the default encoding.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>codePage</code> is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Derived classes override this constructor.  </p>\n<p> Calls to this constructor from a derived class create an <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> object that uses best-fit fallback for both encoding and decoding operations. Both the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_DecoderFallback_\" data-linktype=\"relative-path\">DecoderFallback</a> and <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_EncoderFallback_\" data-linktype=\"relative-path\">EncoderFallback</a> properties are read-only and cannot be modified. To control the fallback strategy for a class derived from <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a>, call the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding__ctor_System_Int32_System_Text_EncoderFallback_System_Text_DecoderFallback_\" data-linktype=\"relative-path\">Encoding(Int32,EncoderFallback,DecoderFallback)</a> constructor.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding__ctor_System_Int32_System_Text_EncoderFallback_System_Text_DecoderFallback_\">\r\n    \r\n            <a id=\"System_Text_Encoding__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Encoding(Int32,EncoderFallback,DecoderFallback)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> class that corresponds to the specified code page with the specified encoder and decoder fallback strategies.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected Encoding (int codePage, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>codePage</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The encoding code page identifier.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>encoderFallback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallback\" data-linktype=\"relative-path\">EncoderFallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that provides an error-handling procedure when a character cannot be encoded with the current encoding.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>decoderFallback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoderfallback\" data-linktype=\"relative-path\">DecoderFallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that provides an error-handling procedure when a byte sequence cannot be decoded with the current encoding.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>codePage</code> is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor is <code>protected</code>; derived classes override it.  </p>\n<p> You call this constructor from a derived class to control the fallback encoding and decoding strategies. The <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> class constructors create read-only encoding objects that don&#39;t allow encoder or decoder fallback to be set after the object is created.  </p>\n<p> If either <code>encoderFallback</code> or <code>decoderFallback</code> is null, best-fit fallback is used as the corresponding fallback strategy.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_ASCII\">\r\n    \r\n            <a id=\"System_Text_Encoding_ASCII_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ASCII</div>        \r\n          </div>\r\n    \r\n            <p>Gets an encoding for the ASCII (7-bit) character set.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Text.Encoding ASCII { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a></div>\r\n                  </div>\r\n                  <p>An  encoding for the ASCII (7-bit) character set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>ASCII characters are limited to the lowest 128 Unicode characters, from U+0000 to U+007F.  </p>\n<p> When selecting the ASCII encoding for your app, consider the following:  </p>\n<ul>\n<li><p>The ASCII encoding is usually appropriate for protocols that require ASCII.  </p>\n</li>\n<li><p>If you requires 8-bit encoding (which is sometimes incorrectly referred to as &quot;ASCII&quot;), the UTF-8 encoding is recommended over the ASCII encoding. For the characters 0-7F, the results are identical, but use of UTF-8 avoids data loss by allowing representation of all Unicode characters that are representable. Note that the ASCII encoding has an 8th bit ambiguity that can allow malicious use, but the UTF-8 encoding removes ambiguity about the 8th bit.  </p>\n</li>\n<li><p>Prior to the .NET Framework version 2.0, the .NET Framework allowed spoofing by ignoring the 8th bit. Beginning with the .NET Framework 2.0, non-ASCII code points fall back during decoding.  </p>\n<p>The <a class=\"xref\" href=\"system.text.asciiencoding\" data-linktype=\"relative-path\">ASCIIEncoding</a> object that is returned by this property might not have the appropriate behavior for your app. It uses replacement fallback to replace each string that it cannot encode and each byte that it cannot decode with a question mark (&quot;?&quot;) character. Instead, you can call the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncoding_System_String_System_Text_EncoderFallback_System_Text_DecoderFallback_\" data-linktype=\"relative-path\">GetEncoding(String,EncoderFallback,DecoderFallback)</a> method to instantiate an <a class=\"xref\" href=\"system.text.asciiencoding\" data-linktype=\"relative-path\">ASCIIEncoding</a> object whose fallback is either an <a class=\"xref\" href=\"system.text.encoderfallbackexception\" data-linktype=\"relative-path\">EncoderFallbackException</a> or a <a class=\"xref\" href=\"system.text.decoderfallbackexception\" data-linktype=\"relative-path\">DecoderFallbackException</a>, as the following example illustrates.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Text.Encoding.ASCII#1\">Imports System.Text\n\nModule Example\n   Public Sub Main()\n      Dim enc As Encoding = Encoding.GetEncoding(&quot;us-ascii&quot;, \n                                                 New EncoderExceptionFallback(),\n                                                 New DecoderExceptionFallback())\n      Dim value As String = String.Format(&quot;{0} {1} {2}&quot;, \n                            ChrW(&amp;h00C4), ChrW(&amp;h00F6), ChrW(&amp;h00AE))\n      \n      Try\n         Dim bytes() As Byte = enc.GetBytes(value)\n         For Each byt As Byte In bytes\n            Console.Write(&quot;{0:X2} &quot;, byt)\n         Next       \n         Console.WriteLine()\n         Dim value2 As String = enc.GetString(bytes)\n         Console.WriteLine(value2)\n      Catch e As EncoderFallbackException\n         Console.WriteLine(&quot;Unable to encode {0} at index {1}&quot;, \n                           If(e.IsUnknownSurrogate(), \n                              String.Format(&quot;U+{0:X4} U+{1:X4}&quot;, \n                                            Convert.ToUInt16(e.CharUnknownHigh),\n                                            Convert.ToUInt16(e.CharUnknownLow)),\n                              String.Format(&quot;U+{0:X4}&quot;, \n                                            Convert.ToUInt16(e.CharUnknown))),\n                           e.Index)\n      End Try\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Unable to encode U+00C4 at index 0\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.Encoding.ASCII#1\">using System;\nusing System.Text;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Encoding enc = Encoding.GetEncoding(&quot;us-ascii&quot;, \n                                          new EncoderExceptionFallback(),\n                                          new DecoderExceptionFallback());\n      string value = &quot;\\u00C4 \\u00F6 \\u00AE&quot;; \n      \n      try {\n         byte[] bytes= enc.GetBytes(value);\n         foreach (var byt in bytes)\n            Console.Write(&quot;{0:X2} &quot;, byt);\n         Console.WriteLine();\n\n         string value2 = enc.GetString(bytes);\n         Console.WriteLine(value2);\n      }\n      catch (EncoderFallbackException e) {\n         Console.WriteLine(&quot;Unable to encode {0} at index {1}&quot;, \n                           e.IsUnknownSurrogate() ? \n                              String.Format(&quot;U+{0:X4} U+{1:X4}&quot;, \n                                            Convert.ToUInt16(e.CharUnknownHigh),\n                                            Convert.ToUInt16(e.CharUnknownLow)) :\n                              String.Format(&quot;U+{0:X4}&quot;, \n                                            Convert.ToUInt16(e.CharUnknown)),\n                           e.Index);\n      }\n   }\n}\n// The example displays the following output:\n//        Unable to encode U+00C4 at index 0\n</code></pre></li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the effect of the ASCII encoding on characters that are outside the ASCII range.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.Encoding.ASCII Example#1\">using System;\nusing System.Text;\n\nclass EncodingExample \n{\n  public static void Main() \n  {\n      // Create an ASCII encoding.\n      Encoding ascii = Encoding.ASCII;\n  \n      // A Unicode string with two characters outside the ASCII code range.\n      String unicodeString =\n          &quot;This unicode string contains two characters &quot; +\n          &quot;with codes outside the ASCII code range, &quot; +\n          &quot;Pi (\\u03a0) and Sigma (\\u03a3).&quot;;\n      Console.WriteLine(&quot;Original string:&quot;);\n      Console.WriteLine(unicodeString);\n\n      // Save the positions of the special characters for later reference.\n      int indexOfPi = unicodeString.IndexOf(&#39;\\u03a0&#39;);\n      int indexOfSigma = unicodeString.IndexOf(&#39;\\u03a3&#39;);\n\n      // Encode the string.\n      Byte[] encodedBytes = ascii.GetBytes(unicodeString);\n      Console.WriteLine();\n      Console.WriteLine(&quot;Encoded bytes:&quot;);\n      foreach (Byte b in encodedBytes) \n      {\n          Console.Write(&quot;[{0}]&quot;, b);\n      }\n      Console.WriteLine();\n  \n      // Notice that the special characters have been replaced with\n      // the value 63, which is the ASCII character code for &#39;?&#39;.\n      Console.WriteLine();\n      Console.WriteLine(\n          &quot;Value at position of Pi character: {0}&quot;,\n          encodedBytes[indexOfPi]\n          );\n      Console.WriteLine(\n          &quot;Value at position of Sigma character: {0}&quot;,\n          encodedBytes[indexOfSigma]\n          );\n\n      // Decode bytes back to a string.\n      // Notice missing the Pi and Sigma characters.\n      String decodedString = ascii.GetString(encodedBytes);\n      Console.WriteLine();\n      Console.WriteLine(&quot;Decoded bytes:&quot;);\n      Console.WriteLine(decodedString);\n  }\n}\n/*\nThis code produces the following output.\n\nOriginal string:\nThis unicode string contains two characters with codes outside the ASCII code range, Pi (�) and Sigma (�).\n\nEncoded bytes:\n[84][104][105][115][32][117][110][105][99][111][100][101][32][115][116][114][105][110][103][32][99][111][110][116][97][105][110][115][32][116][119][111][32][99][104][97][114][97][99][116][101][114][115][32][119][105][116][104][32][99][111][100][101][115][32][111][117][116][115][105][100][101][32][116][104][101][32][65][83][67][73][73][32][99][111][100][101][32][114][97][110][103][101][44][32][80][105][32][40][63][41][32][97][110][100][32][83][105][103][109][97][32][40][63][41][46]\n\nValue at position of Pi character: 63\nValue at position of Sigma character: 63\n\nDecoded bytes:\nThis unicode string contains two characters with codes outside the ASCII code range, Pi (?) and Sigma (?).\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.Encoding.ASCII Example#1\">Imports System.Text\n\nClass EncodingExample\n  Public Shared Sub Main()\n      &#39; Create and ASCII encoding.\n      Dim ascii As Encoding = Encoding.ASCII\n\n      &#39; A Unicode string with two characters outside the ASCII code range.\n      Dim unicodeString As String = &quot;This unicode string contains two characters &quot; + &quot;with codes outside the ASCII code range, &quot; + &quot;Pi (&quot; &amp; ChrW(&amp;H03A0) &amp; &quot;) and Sigma (&quot; &amp; ChrW(&amp;H03A3) &amp; &quot;).&quot;\n      Console.WriteLine(&quot;Original string:&quot;)\n      Console.WriteLine(unicodeString)\n\n      &#39; Save the positions of the special characters for later reference.\n      Dim indexOfPi As Integer = unicodeString.IndexOf(ChrW(&amp;H03A0))\n      Dim indexOfSigma As Integer = unicodeString.IndexOf(ChrW(&amp;H03A3))\n\n      &#39; Encode the string.\n      Dim encodedBytes As Byte() = ascii.GetBytes(unicodeString)\n      Console.WriteLine()\n      Console.WriteLine(&quot;Encoded bytes:&quot;)\n      For Each b In encodedBytes\n          Console.Write(&quot;[{0}]&quot;, b)\n      Next b\n      Console.WriteLine()\n\n      &#39; Notice that the special characters have been replaced with\n      &#39; the value 63, which is the ASCII character code for &#39;?&#39;.\n      Console.WriteLine()\n      Console.WriteLine(&quot;Value at position of Pi character: {0}&quot;, encodedBytes(indexOfPi))\n      Console.WriteLine(&quot;Value at position of Sigma character: {0}&quot;, encodedBytes(indexOfSigma))\n\n      &#39; Decode bytes back to a string.\n      &#39; Notice missing Pi and Sigma characters.\n      Dim decodedString As String = ascii.GetString(encodedBytes)\n      Console.WriteLine()\n      Console.WriteLine(&quot;Decoded bytes:&quot;)\n      Console.WriteLine(decodedString)\n  End Sub\nEnd Class\n&#39;This code produces the following output.\n&#39;Original string:\n&#39;This unicode string contains two characters with codes outside &#39;the ASCII code range, Pi (&#227;) and Sigma (&#228;).\n&#39;\n&#39;Encoded bytes:\n&#39;[84][104][105][115][32][117][110][105][99][111][100][101][32]&#39;[115][116][114][105][110][103][32][99][111][110][116][97]&#39;[105][110][115][32][116][119][111][32][99][104][97][114][97]&#39;[99][116][101][114][115][32][119][105][116][104][32][99][111]&#39;[100][101][115][32][111][117][116][115][105][100][101][32]&#39;[116][104][101][32][65][83][67][73][73][32][99][111][100]&#39;[101][32][114][97][110][103][101][44][32][80][105][32][40]&#39;[63][41][32][97][110][100][32][83][105][103][109][97][32][40]&#39;[63][41][46]\n&#39;\n&#39;Value at position of Pi character: 63\n&#39;Value at position of Sigma character: 63\n&#39;\n&#39;Decoded bytes:\n&#39;This unicode string contains two characters with codes outside &#39;the ASCII code range, Pi (?) and Sigma (?).\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.Encoding.ASCII Example#1\">using namespace System;\nusing namespace System::Text;\nusing namespace System::Collections;\nint main()\n{\n   \n   // Create an ASCII encoding.\n   Encoding^ ascii = Encoding::ASCII;\n   \n   // A Unicode String* with two characters outside the ASCII code range.\n   String^ unicodeString = L&quot;This unicode string contains two characters with codes outside the ASCII code range, Pi (\\u03a0) and Sigma (\\u03a3).&quot;;\n   Console::WriteLine( &quot;Original string:&quot; );\n   Console::WriteLine( unicodeString );\n   \n   // Save the positions of the special characters for later reference.\n   int indexOfPi = unicodeString-&gt;IndexOf( L&#39;\\u03a0&#39; );\n   int indexOfSigma = unicodeString-&gt;IndexOf( L&#39;\\u03a3&#39; );\n   \n   // Encode the String*.\n   array&lt;Byte&gt;^encodedBytes = ascii-&gt;GetBytes( unicodeString );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Encoded bytes:&quot; );\n   IEnumerator^ myEnum = encodedBytes-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Byte b = safe_cast&lt;Byte&gt;(myEnum-&gt;Current);\n      Console::Write( &quot;[{0}]&quot;, b );\n   }\n\n   Console::WriteLine();\n   \n   // Notice that the special characters have been replaced with\n   // the value 63, which is the ASCII character code for &#39;?&#39;.\n   Console::WriteLine();\n   Console::WriteLine( &quot;Value at position of Pi character: {0}&quot;, encodedBytes[ indexOfPi ] );\n   Console::WriteLine( &quot;Value at position of Sigma character: {0}&quot;, encodedBytes[ indexOfSigma ] );\n   \n   // Decode bytes back to String*.\n   // Notice the missing Pi and Sigma characters.\n   String^ decodedString = ascii-&gt;GetString( encodedBytes );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Decoded bytes:&quot; );\n   Console::WriteLine( decodedString );\n}\n\n/*\nThis code produces the following output.\n\nOriginal string:\nThis unicode string contains two characters with codes outside the ASCII code range, Pi (�) and Sigma (�).\n\nEncoded bytes:\n[84][104][105][115][32][117][110][105][99][111][100][101][32][115][116][114][105][110][103][32][99][111][110][116][97][105][110][115][32][116][119][111][32][99][104][97][114][97][99][116][101][114][115][32][119][105][116][104][32][99][111][100][101][115][32][111][117][116][115][105][100][101][32][116][104][101][32][65][83][67][73][73][32][99][111][100][101][32][114][97][110][103][101][44][32][80][105][32][40][63][41][32][97][110][100][32][83][105][103][109][97][32][40][63][41][46]\n\nValue at position of Pi character: 63\nValue at position of Sigma character: 63\n\nDecoded bytes:\nThis unicode string contains two characters with codes outside the ASCII code range, Pi (?) and Sigma (?).\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_BigEndianUnicode\">\r\n    \r\n            <a id=\"System_Text_Encoding_BigEndianUnicode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BigEndianUnicode</div>        \r\n          </div>\r\n    \r\n            <p>Gets an encoding for the UTF-16 format that uses the big endian byte order.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Text.Encoding BigEndianUnicode { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a></div>\r\n                  </div>\r\n                  <p>An encoding object for the UTF-16 format that uses the big endian byte order.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.text.unicodeencoding\" data-linktype=\"relative-path\">UnicodeEncoding</a> object that is returned by this property may not have the appropriate behavior for your app. It uses replacement fallback to replace each string that it cannot encode and each byte that it cannot decode with a question mark (&quot;?&quot;) character. Instead, you can call the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding__ctor_System_Boolean_System_Boolean_System_Boolean_\" data-linktype=\"relative-path\">System.Text.UnicodeEncoding.UnicodeEncoding(Boolean,Boolean,Boolean)</a> constructor to instantiate a big endian <a class=\"xref\" href=\"system.text.unicodeencoding\" data-linktype=\"relative-path\">UnicodeEncoding</a> object whose fallback is either an <a class=\"xref\" href=\"system.text.encoderfallbackexception\" data-linktype=\"relative-path\">EncoderFallbackException</a> or a <a class=\"xref\" href=\"system.text.decoderfallbackexception\" data-linktype=\"relative-path\">DecoderFallbackException</a>, as the following example illustrates.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Text.Encoding.BigEndianUnicode#2\">Imports System.Text\n\nModule Example\n   Public Sub Main()\n      Dim bytes() As Byte = { &amp;h00, &amp;h20, &amp;hd8, &amp;h01, &amp;h00, &amp;h68, &amp;hA7, &amp;h00}\n      Dim enc As Encoding = New UnicodeEncoding(True, True, True)\n      \n      Try\n         Dim value As String = enc.GetString(bytes)\n         Console.WriteLine()\n         Console.WriteLine(&quot;&#39;{0}&#39;&quot;, value)\n      Catch e As DecoderFallbackException      \n         Console.WriteLine(&quot;Unable to decode {0} at index {1}&quot;, \n                           ShowBytes(e.BytesUnknown), e.Index)\n      End Try\n   End Sub\n   \n   Private Function ShowBytes(bytes As Byte()) As String\n      Dim returnString As String = Nothing\n      For Each byteValue In bytes\n         returnString += String.Format(&quot;0x{0:X2} &quot;, byteValue)\n      Next\n      Return returnString.Trim()\n   End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;       Unable to decode 0xD8 0x01 at index 4\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.Encoding.BigEndianUnicode#2\">using System;\nusing System.Text;\n\npublic class Example\n{\n   public static void Main()\n   {\n      byte[] bytes = { 0x00, 0x20, 0xd8, 0x01, 0x00, 0x68, 0xA7, 0x00 };\n      Encoding enc = new UnicodeEncoding(true, true, true);\n      \n      try {\n         string value = enc.GetString(bytes);\n         Console.WriteLine();\n         Console.WriteLine(&quot;&#39;{0}&#39;&quot;, value);\n      }\n      catch (DecoderFallbackException e) {      \n         Console.WriteLine(&quot;Unable to decode {0} at index {1}&quot;, \n                           ShowBytes(e.BytesUnknown), e.Index);\n      }\n   }\n\n   private static string ShowBytes(byte[] bytes) \n   {\n      string returnString = null;\n      foreach (var byteValue in bytes)\n         returnString += String.Format(&quot;0x{0:X2} &quot;, byteValue);\n\n      return returnString.Trim();\n   }\n}\n// The example displays the following output:\n//        Unable to decode 0xD8 0x01 at index 4\n</code></pre><p> The returned <a class=\"xref\" href=\"system.text.unicodeencoding\" data-linktype=\"relative-path\">UnicodeEncoding</a> object has <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_BodyName_\" data-linktype=\"relative-path\">BodyName</a>, <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_HeaderName_\" data-linktype=\"relative-path\">HeaderName</a>, and <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_WebName_\" data-linktype=\"relative-path\">WebName</a> properties, which yield the name &quot;unicodeFFFE&quot;. Although the UTF-16 big endian byte order mark is hexadecimal FEFF, the name &quot;unicodeFFFE&quot; was chosen because the byte order mark appears as hexadecimal FFFE on little endian Windows computers.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads a text file with a UTF-16 encoding using the big endian byte order.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Text.Encoding.BigEndianUnicode#1\">using namespace System;\nusing namespace System::IO;\nint main()\n{\n   \n   // Read a text file saved with Big Endian Unicode encoding.\n   System::Text::Encoding^ encoding = System::Text::Encoding::BigEndianUnicode;\n   StreamReader^ reader = gcnew StreamReader( &quot;TextFile.txt&quot;,encoding );\n   String^ line = reader-&gt;ReadLine();\n   while ( line != nullptr )\n   {\n      Console::WriteLine( line );\n      line = reader-&gt;ReadLine();\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.Encoding.BigEndianUnicode#1\">Imports System\nImports System.IO\n\nNamespace BigEndianExample\n   Public Class Class1\n      Public Overloads Shared Sub Main()\n         &#39; Read a text file saved with Big Endian Unicode encoding.\n         Dim encoding As System.Text.Encoding = System.Text.Encoding.BigEndianUnicode\n         Dim reader As New StreamReader(&quot;TextFile.txt&quot;, encoding)\n         Dim line As String = reader.ReadLine()\n         While Not (line Is Nothing)\n            Console.WriteLine(line)\n            line = reader.ReadLine()\n         End While\n      End Sub\n   End Class\nEnd Namespace\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.Encoding.BigEndianUnicode#1\">using System;\nusing System.IO;\n\nnamespace BigEndianExample\n{\n   public class Class1 \n   {\n      public static void Main(string[] args) \n      {\n         // Read a text file saved with Big Endian Unicode encoding.\n         System.Text.Encoding encoding = System.Text.Encoding.BigEndianUnicode;\n         StreamReader reader = new StreamReader(&quot;TextFile.txt&quot;, encoding);\n         string line = reader.ReadLine();\n         while (line != null) \n         {\n            Console.WriteLine(line);\n            line = reader.ReadLine();\n         }\n       }\n    }\n}\n</code></pre><p> The following example determines the number of bytes required to encode a character array, encodes the characters, and displays the resulting bytes.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Text.Encoding.GetBytes_CharArr#1\">Imports System\nImports System.Text\nImports Microsoft.VisualBasic\n\nPublic Class SamplesEncoding   \n\n   Public Shared Sub Main()\n\n      &#39; The characters to encode:\n      &#39;    Latin Small Letter Z (U+007A)\n      &#39;    Latin Small Letter A (U+0061)\n      &#39;    Combining Breve (U+0306)\n      &#39;    Latin Small Letter AE With Acute (U+01FD)\n      &#39;    Greek Small Letter Beta (U+03B2)\n      &#39;    a high-surrogate value (U+D8FF)\n      &#39;    a low-surrogate value (U+DCFF)\n      Dim myChars() As Char = {&quot;z&quot;c, &quot;a&quot;c, ChrW(&amp;H0306), ChrW(&amp;H01FD), ChrW(&amp;H03B2), ChrW(&amp;HD8FF), ChrW(&amp;HDCFF)}\n \n\n      &#39; Get different encodings.\n      Dim u7 As Encoding = Encoding.UTF7\n      Dim u8 As Encoding = Encoding.UTF8\n      Dim u16LE As Encoding = Encoding.Unicode\n      Dim u16BE As Encoding = Encoding.BigEndianUnicode\n      Dim u32 As Encoding = Encoding.UTF32\n\n      &#39; Encode the entire array, and print out the counts and the resulting bytes.\n      PrintCountsAndBytes(myChars, u7)\n      PrintCountsAndBytes(myChars, u8)\n      PrintCountsAndBytes(myChars, u16LE)\n      PrintCountsAndBytes(myChars, u16BE)\n      PrintCountsAndBytes(myChars, u32)\n\n   End Sub &#39;Main\n\n\n   Public Shared Sub PrintCountsAndBytes(chars() As Char, enc As Encoding)\n\n      &#39; Display the name of the encoding used.\n      Console.Write(&quot;{0,-30} :&quot;, enc.ToString())\n\n      &#39; Display the exact byte count.\n      Dim iBC As Integer = enc.GetByteCount(chars)\n      Console.Write(&quot; {0,-3}&quot;, iBC)\n\n      &#39; Display the maximum byte count.\n      Dim iMBC As Integer = enc.GetMaxByteCount(chars.Length)\n      Console.Write(&quot; {0,-3} :&quot;, iMBC)\n\n      &#39; Encode the array of chars.\n      Dim bytes As Byte() = enc.GetBytes(chars)\n\n      &#39; Display all the encoded bytes.\n      PrintHexBytes(bytes)\n\n   End Sub &#39;PrintCountsAndBytes\n\n\n   Public Shared Sub PrintHexBytes(bytes() As Byte)\n\n      If bytes Is Nothing OrElse bytes.Length = 0 Then\n         Console.WriteLine(&quot;&lt;none&gt;&quot;)\n      Else\n         Dim i As Integer\n         For i = 0 To bytes.Length - 1\n            Console.Write(&quot;{0:X2} &quot;, bytes(i))\n         Next i\n         Console.WriteLine()\n      End If\n\n   End Sub &#39;PrintHexBytes \n\nEnd Class &#39;SamplesEncoding\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;System.Text.UTF7Encoding       : 18  23  :7A 61 2B 41 77 59 42 2F 51 4F 79 32 50 2F 63 2F 77 2D\n&#39;System.Text.UTF8Encoding       : 12  24  :7A 61 CC 86 C7 BD CE B2 F1 8F B3 BF\n&#39;System.Text.UnicodeEncoding    : 14  16  :7A 00 61 00 06 03 FD 01 B2 03 FF D8 FF DC\n&#39;System.Text.UnicodeEncoding    : 14  16  :00 7A 00 61 03 06 01 FD 03 B2 D8 FF DC FF\n&#39;System.Text.UTF32Encoding      : 24  32  :7A 00 00 00 61 00 00 00 06 03 00 00 FD 01 00 00 B2 03 00 00 FF FC 04 00\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.Encoding.GetBytes_CharArr#1\">using System;\nusing System.Text;\n\npublic class SamplesEncoding  {\n\n   public static void Main()  {\n\n      // The characters to encode:\n      //    Latin Small Letter Z (U+007A)\n      //    Latin Small Letter A (U+0061)\n      //    Combining Breve (U+0306)\n      //    Latin Small Letter AE With Acute (U+01FD)\n      //    Greek Small Letter Beta (U+03B2)\n      //    a high-surrogate value (U+D8FF)\n      //    a low-surrogate value (U+DCFF)\n      char[] myChars = new char[] { &#39;z&#39;, &#39;a&#39;, &#39;\\u0306&#39;, &#39;\\u01FD&#39;, &#39;\\u03B2&#39;, &#39;\\uD8FF&#39;, &#39;\\uDCFF&#39; };\n\n      // Get different encodings.\n      Encoding  u7    = Encoding.UTF7;\n      Encoding  u8    = Encoding.UTF8;\n      Encoding  u16LE = Encoding.Unicode;\n      Encoding  u16BE = Encoding.BigEndianUnicode;\n      Encoding  u32   = Encoding.UTF32;\n\n      // Encode the entire array, and print out the counts and the resulting bytes.\n      PrintCountsAndBytes( myChars, u7 );\n      PrintCountsAndBytes( myChars, u8 );\n      PrintCountsAndBytes( myChars, u16LE );\n      PrintCountsAndBytes( myChars, u16BE );\n      PrintCountsAndBytes( myChars, u32 );\n\n   }\n\n\n   public static void PrintCountsAndBytes( char[] chars, Encoding enc )  {\n\n      // Display the name of the encoding used.\n      Console.Write( &quot;{0,-30} :&quot;, enc.ToString() );\n\n      // Display the exact byte count.\n      int iBC  = enc.GetByteCount( chars );\n      Console.Write( &quot; {0,-3}&quot;, iBC );\n\n      // Display the maximum byte count.\n      int iMBC = enc.GetMaxByteCount( chars.Length );\n      Console.Write( &quot; {0,-3} :&quot;, iMBC );\n\n      // Encode the array of chars.\n      byte[] bytes = enc.GetBytes( chars );\n\n      // Display all the encoded bytes.\n      PrintHexBytes( bytes );\n\n   }\n\n\n   public static void PrintHexBytes( byte[] bytes )  {\n\n      if (( bytes == null ) || ( bytes.Length == 0 ))\n         Console.WriteLine( &quot;&lt;none&gt;&quot; );\n      else  {\n         for ( int i = 0; i &lt; bytes.Length; i++ )\n            Console.Write( &quot;{0:X2} &quot;, bytes[i] );\n         Console.WriteLine();\n      }\n\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nSystem.Text.UTF7Encoding       : 18  23  :7A 61 2B 41 77 59 42 2F 51 4F 79 32 50 2F 63 2F 77 2D\nSystem.Text.UTF8Encoding       : 12  24  :7A 61 CC 86 C7 BD CE B2 F1 8F B3 BF\nSystem.Text.UnicodeEncoding    : 14  16  :7A 00 61 00 06 03 FD 01 B2 03 FF D8 FF DC\nSystem.Text.UnicodeEncoding    : 14  16  :00 7A 00 61 03 06 01 FD 03 B2 D8 FF DC FF\nSystem.Text.UTF32Encoding      : 24  32  :7A 00 00 00 61 00 00 00 06 03 00 00 FD 01 00 00 B2 03 00 00 FF FC 04 00\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.Encoding.GetBytes_CharArr#1\">using namespace System;\nusing namespace System::Text;\nvoid PrintCountsAndBytes( array&lt;Char&gt;^chars, Encoding^ enc );\nvoid PrintHexBytes( array&lt;Byte&gt;^bytes );\nint main()\n{\n   \n   // The characters to encode:\n   //    Latin Small Letter Z (U+007A)\n   //    Latin Small Letter A (U+0061)\n   //    Combining Breve (U+0306)\n   //    Latin Small Letter AE With Acute (U+01FD)\n   //    Greek Small Letter Beta (U+03B2)\n   //    a high-surrogate value (U+D8FF)\n   //    a low-surrogate value (U+DCFF)\n   array&lt;Char&gt;^myChars = gcnew array&lt;Char&gt;{\n      L&#39;z&#39;,&#39;a&#39;,L&#39;\\u0306&#39;,L&#39;\\u01FD&#39;,L&#39;\\u03B2&#39;,L&#39;\\xD8FF&#39;,L&#39;\\xDCFF&#39;\n   };\n   \n   // Get different encodings.\n   Encoding^ u7 = Encoding::UTF7;\n   Encoding^ u8 = Encoding::UTF8;\n   Encoding^ u16LE = Encoding::Unicode;\n   Encoding^ u16BE = Encoding::BigEndianUnicode;\n   Encoding^ u32 = Encoding::UTF32;\n   \n   // Encode the entire array, and print out the counts and the resulting bytes.\n   PrintCountsAndBytes( myChars, u7 );\n   PrintCountsAndBytes( myChars, u8 );\n   PrintCountsAndBytes( myChars, u16LE );\n   PrintCountsAndBytes( myChars, u16BE );\n   PrintCountsAndBytes( myChars, u32 );\n}\n\nvoid PrintCountsAndBytes( array&lt;Char&gt;^chars, Encoding^ enc )\n{\n   \n   // Display the name of the encoding used.\n   Console::Write( &quot;{0,-30} :&quot;, enc );\n   \n   // Display the exact byte count.\n   int iBC = enc-&gt;GetByteCount( chars );\n   Console::Write( &quot; {0,-3}&quot;, iBC );\n   \n   // Display the maximum byte count.\n   int iMBC = enc-&gt;GetMaxByteCount( chars-&gt;Length );\n   Console::Write( &quot; {0,-3} :&quot;, iMBC );\n   \n   // Encode the array of chars.\n   array&lt;Byte&gt;^bytes = enc-&gt;GetBytes( chars );\n   \n   // Display all the encoded bytes.\n   PrintHexBytes( bytes );\n}\n\nvoid PrintHexBytes( array&lt;Byte&gt;^bytes )\n{\n   if ( (bytes == nullptr) || (bytes-&gt;Length == 0) )\n      Console::WriteLine( &quot;&lt;none&gt;&quot; );\n   else\n   {\n      for ( int i = 0; i &lt; bytes-&gt;Length; i++ )\n         Console::Write( &quot;{0:X2} &quot;, bytes[ i ] );\n      Console::WriteLine();\n   }\n}\n\n/* \nThis code produces the following output.\n\nSystem.Text.UTF7Encoding       : 18  23  :7A 61 2B 41 77 59 42 2F 51 4F 79 32 50 2F 63 2F 77 2D\nSystem.Text.UTF8Encoding       : 12  24  :7A 61 CC 86 C7 BD CE B2 F1 8F B3 BF\nSystem.Text.UnicodeEncoding    : 14  16  :7A 00 61 00 06 03 FD 01 B2 03 FF D8 FF DC\nSystem.Text.UnicodeEncoding    : 14  16  :00 7A 00 61 03 06 01 FD 03 B2 D8 FF DC FF\nSystem.Text.UTF32Encoding      : 24  32  :7A 00 00 00 61 00 00 00 06 03 00 00 FD 01 00 00 B2 03 00 00 FF FC 04 00\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_BodyName\">\r\n    \r\n            <a id=\"System_Text_Encoding_BodyName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BodyName</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets a name for the current encoding that can be used with mail agent body tags.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string BodyName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A name for the current <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> that can be used with mail agent body tags.  </p>\n<p> -or-  </p>\n<p> An empty string (&quot;&quot;), if the current <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> cannot be used.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If you need an encoding for a body name, you should call <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncoding_\" data-linktype=\"relative-path\">GetEncoding</a> with the BodyName property. Often the method retrieves a different encoding from the test encoding furnished in the call. Generally only e-mail applications need to retrieve such an encoding; most other applications that need to describe an encoding should use its <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_WebName_\" data-linktype=\"relative-path\">WebName</a>.  </p>\n<p> In some cases, the value of the BodyName property corresponds to the international standard that defines that encoding. This doesn&#39;t mean that the implementation complies in full with that standard.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example retrieves the different names for each encoding and displays the encodings with one or more names that are different from <a class=\"xref\" href=\"system.text.encodinginfo#System_Text_EncodingInfo_Name_\" data-linktype=\"relative-path\">Name</a>. It displays <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_EncodingName_\" data-linktype=\"relative-path\">EncodingName</a> but does not compare against it.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.Encoding.Names#1\">using System;\nusing System.Text;\n\npublic class SamplesEncoding  {\n\n   public static void Main()  {\n\n      // Print the header.\n      Console.Write( &quot;Name               &quot; );\n      Console.Write( &quot;CodePage  &quot; );\n      Console.Write( &quot;BodyName           &quot; );\n      Console.Write( &quot;HeaderName         &quot; );\n      Console.Write( &quot;WebName            &quot; );\n      Console.WriteLine( &quot;Encoding.EncodingName&quot; );\n\n      // For every encoding, compare the name properties with EncodingInfo.Name.\n      // Display only the encodings that have one or more different names.\n      foreach( EncodingInfo ei in Encoding.GetEncodings() )  {\n         Encoding e = ei.GetEncoding();\n\n         if (( ei.Name != e.BodyName ) || ( ei.Name != e.HeaderName ) || ( ei.Name != e.WebName ))  {\n            Console.Write( &quot;{0,-18} &quot;, ei.Name );\n            Console.Write( &quot;{0,-9} &quot;,  e.CodePage );\n            Console.Write( &quot;{0,-18} &quot;, e.BodyName );\n            Console.Write( &quot;{0,-18} &quot;, e.HeaderName );\n            Console.Write( &quot;{0,-18} &quot;, e.WebName );\n            Console.WriteLine( &quot;{0} &quot;, e.EncodingName );\n         }\n\n      }\n\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nName               CodePage  BodyName           HeaderName         WebName            Encoding.EncodingName\nshift_jis          932       iso-2022-jp        iso-2022-jp        shift_jis          Japanese (Shift-JIS)\nwindows-1250       1250      iso-8859-2         windows-1250       windows-1250       Central European (Windows)\nwindows-1251       1251      koi8-r             windows-1251       windows-1251       Cyrillic (Windows)\nWindows-1252       1252      iso-8859-1         Windows-1252       Windows-1252       Western European (Windows)\nwindows-1253       1253      iso-8859-7         windows-1253       windows-1253       Greek (Windows)\nwindows-1254       1254      iso-8859-9         windows-1254       windows-1254       Turkish (Windows)\ncsISO2022JP        50221     iso-2022-jp        iso-2022-jp        csISO2022JP        Japanese (JIS-Allow 1 byte Kana)\niso-2022-kr        50225     iso-2022-kr        euc-kr             iso-2022-kr        Korean (ISO)\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.Encoding.Names#1\">using namespace System;\nusing namespace System::Text;\nint main()\n{\n   \n   // Print the header.\n   Console::Write( &quot;Name               &quot; );\n   Console::Write( &quot;CodePage  &quot; );\n   Console::Write( &quot;BodyName           &quot; );\n   Console::Write( &quot;HeaderName         &quot; );\n   Console::Write( &quot;WebName            &quot; );\n   Console::WriteLine( &quot;Encoding.EncodingName&quot; );\n   \n   // For every encoding, compare the name properties with EncodingInfo.Name.\n   // Display only the encodings that have one or more different names.\n   System::Collections::IEnumerator^ myEnum = Encoding::GetEncodings()-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      EncodingInfo ^ ei = safe_cast&lt;EncodingInfo ^&gt;(myEnum-&gt;Current);\n      Encoding^ e = ei-&gt;GetEncoding();\n      if (  !ei-&gt;Name-&gt;Equals( e-&gt;BodyName ) ||  !ei-&gt;Name-&gt;Equals( e-&gt;HeaderName ) ||  !ei-&gt;Name-&gt;Equals( e-&gt;WebName ) )\n      {\n         Console::Write( &quot;{0,-18} &quot;, ei-&gt;Name );\n         Console::Write( &quot;{0,-9} &quot;, e-&gt;CodePage );\n         Console::Write( &quot;{0,-18} &quot;, e-&gt;BodyName );\n         Console::Write( &quot;{0,-18} &quot;, e-&gt;HeaderName );\n         Console::Write( &quot;{0,-18} &quot;, e-&gt;WebName );\n         Console::WriteLine( &quot;{0} &quot;, e-&gt;EncodingName );\n      }\n   }\n}\n\n/* \nThis code produces the following output.\n\nName               CodePage  BodyName           HeaderName         WebName            Encoding.EncodingName\nshift_jis          932       iso-2022-jp        iso-2022-jp        shift_jis          Japanese (Shift-JIS)\nwindows-1250       1250      iso-8859-2         windows-1250       windows-1250       Central European (Windows)\nwindows-1251       1251      koi8-r             windows-1251       windows-1251       Cyrillic (Windows)\nWindows-1252       1252      iso-8859-1         Windows-1252       Windows-1252       Western European (Windows)\nwindows-1253       1253      iso-8859-7         windows-1253       windows-1253       Greek (Windows)\nwindows-1254       1254      iso-8859-9         windows-1254       windows-1254       Turkish (Windows)\ncsISO2022JP        50221     iso-2022-jp        iso-2022-jp        csISO2022JP        Japanese (JIS-Allow 1 byte Kana)\niso-2022-kr        50225     iso-2022-kr        euc-kr             iso-2022-kr        Korean (ISO)\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.Encoding.Names#1\">Imports System\nImports System.Text\n\nPublic Class SamplesEncoding   \n\n   Public Shared Sub Main()\n\n      &#39; Print the header.\n      Console.Write(&quot;Name               &quot;)\n      Console.Write(&quot;CodePage  &quot;)\n      Console.Write(&quot;BodyName           &quot;)\n      Console.Write(&quot;HeaderName         &quot;)\n      Console.Write(&quot;WebName            &quot;)\n      Console.WriteLine(&quot;Encoding.EncodingName&quot;)\n\n      &#39; For every encoding, compare the name properties with EncodingInfo.Name.\n      &#39; Display only the encodings that have one or more different names.\n      Dim ei As EncodingInfo\n      For Each ei In  Encoding.GetEncodings()\n         Dim e As Encoding = ei.GetEncoding()\n         \n         If ei.Name &lt;&gt; e.BodyName OrElse ei.Name &lt;&gt; e.HeaderName OrElse ei.Name &lt;&gt; e.WebName Then\n            Console.Write(&quot;{0,-18} &quot;, ei.Name)\n            Console.Write(&quot;{0,-9} &quot;,  e.CodePage)\n            Console.Write(&quot;{0,-18} &quot;, e.BodyName)\n            Console.Write(&quot;{0,-18} &quot;, e.HeaderName)\n            Console.Write(&quot;{0,-18} &quot;, e.WebName)\n            Console.WriteLine(&quot;{0} &quot;, e.EncodingName)\n         End If\n\n      Next ei \n\n   End Sub &#39;Main\n\nEnd Class &#39;SamplesEncoding \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Name               CodePage  BodyName           HeaderName         WebName            Encoding.EncodingName\n&#39;shift_jis          932       iso-2022-jp        iso-2022-jp        shift_jis          Japanese (Shift-JIS)\n&#39;windows-1250       1250      iso-8859-2         windows-1250       windows-1250       Central European (Windows)\n&#39;windows-1251       1251      koi8-r             windows-1251       windows-1251       Cyrillic (Windows)\n&#39;Windows-1252       1252      iso-8859-1         Windows-1252       Windows-1252       Western European (Windows)\n&#39;windows-1253       1253      iso-8859-7         windows-1253       windows-1253       Greek (Windows)\n&#39;windows-1254       1254      iso-8859-9         windows-1254       windows-1254       Turkish (Windows)\n&#39;csISO2022JP        50221     iso-2022-jp        iso-2022-jp        csISO2022JP        Japanese (JIS-Allow 1 byte Kana)\n&#39;iso-2022-kr        50225     iso-2022-kr        euc-kr             iso-2022-kr        Korean (ISO)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_CodePage\">\r\n    \r\n            <a id=\"System_Text_Encoding_CodePage_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CodePage</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets the code page identifier of the current <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int CodePage { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The code page identifier of the current <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example retrieves the different names for each encoding and displays the encodings with one or more names that are different from <a class=\"xref\" href=\"system.text.encodinginfo#System_Text_EncodingInfo_Name_\" data-linktype=\"relative-path\">Name</a>. It displays <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_EncodingName_\" data-linktype=\"relative-path\">EncodingName</a> but does not compare against it.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.Encoding.Names#1\">using System;\nusing System.Text;\n\npublic class SamplesEncoding  {\n\n   public static void Main()  {\n\n      // Print the header.\n      Console.Write( &quot;Name               &quot; );\n      Console.Write( &quot;CodePage  &quot; );\n      Console.Write( &quot;BodyName           &quot; );\n      Console.Write( &quot;HeaderName         &quot; );\n      Console.Write( &quot;WebName            &quot; );\n      Console.WriteLine( &quot;Encoding.EncodingName&quot; );\n\n      // For every encoding, compare the name properties with EncodingInfo.Name.\n      // Display only the encodings that have one or more different names.\n      foreach( EncodingInfo ei in Encoding.GetEncodings() )  {\n         Encoding e = ei.GetEncoding();\n\n         if (( ei.Name != e.BodyName ) || ( ei.Name != e.HeaderName ) || ( ei.Name != e.WebName ))  {\n            Console.Write( &quot;{0,-18} &quot;, ei.Name );\n            Console.Write( &quot;{0,-9} &quot;,  e.CodePage );\n            Console.Write( &quot;{0,-18} &quot;, e.BodyName );\n            Console.Write( &quot;{0,-18} &quot;, e.HeaderName );\n            Console.Write( &quot;{0,-18} &quot;, e.WebName );\n            Console.WriteLine( &quot;{0} &quot;, e.EncodingName );\n         }\n\n      }\n\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nName               CodePage  BodyName           HeaderName         WebName            Encoding.EncodingName\nshift_jis          932       iso-2022-jp        iso-2022-jp        shift_jis          Japanese (Shift-JIS)\nwindows-1250       1250      iso-8859-2         windows-1250       windows-1250       Central European (Windows)\nwindows-1251       1251      koi8-r             windows-1251       windows-1251       Cyrillic (Windows)\nWindows-1252       1252      iso-8859-1         Windows-1252       Windows-1252       Western European (Windows)\nwindows-1253       1253      iso-8859-7         windows-1253       windows-1253       Greek (Windows)\nwindows-1254       1254      iso-8859-9         windows-1254       windows-1254       Turkish (Windows)\ncsISO2022JP        50221     iso-2022-jp        iso-2022-jp        csISO2022JP        Japanese (JIS-Allow 1 byte Kana)\niso-2022-kr        50225     iso-2022-kr        euc-kr             iso-2022-kr        Korean (ISO)\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.Encoding.Names#1\">using namespace System;\nusing namespace System::Text;\nint main()\n{\n   \n   // Print the header.\n   Console::Write( &quot;Name               &quot; );\n   Console::Write( &quot;CodePage  &quot; );\n   Console::Write( &quot;BodyName           &quot; );\n   Console::Write( &quot;HeaderName         &quot; );\n   Console::Write( &quot;WebName            &quot; );\n   Console::WriteLine( &quot;Encoding.EncodingName&quot; );\n   \n   // For every encoding, compare the name properties with EncodingInfo.Name.\n   // Display only the encodings that have one or more different names.\n   System::Collections::IEnumerator^ myEnum = Encoding::GetEncodings()-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      EncodingInfo ^ ei = safe_cast&lt;EncodingInfo ^&gt;(myEnum-&gt;Current);\n      Encoding^ e = ei-&gt;GetEncoding();\n      if (  !ei-&gt;Name-&gt;Equals( e-&gt;BodyName ) ||  !ei-&gt;Name-&gt;Equals( e-&gt;HeaderName ) ||  !ei-&gt;Name-&gt;Equals( e-&gt;WebName ) )\n      {\n         Console::Write( &quot;{0,-18} &quot;, ei-&gt;Name );\n         Console::Write( &quot;{0,-9} &quot;, e-&gt;CodePage );\n         Console::Write( &quot;{0,-18} &quot;, e-&gt;BodyName );\n         Console::Write( &quot;{0,-18} &quot;, e-&gt;HeaderName );\n         Console::Write( &quot;{0,-18} &quot;, e-&gt;WebName );\n         Console::WriteLine( &quot;{0} &quot;, e-&gt;EncodingName );\n      }\n   }\n}\n\n/* \nThis code produces the following output.\n\nName               CodePage  BodyName           HeaderName         WebName            Encoding.EncodingName\nshift_jis          932       iso-2022-jp        iso-2022-jp        shift_jis          Japanese (Shift-JIS)\nwindows-1250       1250      iso-8859-2         windows-1250       windows-1250       Central European (Windows)\nwindows-1251       1251      koi8-r             windows-1251       windows-1251       Cyrillic (Windows)\nWindows-1252       1252      iso-8859-1         Windows-1252       Windows-1252       Western European (Windows)\nwindows-1253       1253      iso-8859-7         windows-1253       windows-1253       Greek (Windows)\nwindows-1254       1254      iso-8859-9         windows-1254       windows-1254       Turkish (Windows)\ncsISO2022JP        50221     iso-2022-jp        iso-2022-jp        csISO2022JP        Japanese (JIS-Allow 1 byte Kana)\niso-2022-kr        50225     iso-2022-kr        euc-kr             iso-2022-kr        Korean (ISO)\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.Encoding.Names#1\">Imports System\nImports System.Text\n\nPublic Class SamplesEncoding   \n\n   Public Shared Sub Main()\n\n      &#39; Print the header.\n      Console.Write(&quot;Name               &quot;)\n      Console.Write(&quot;CodePage  &quot;)\n      Console.Write(&quot;BodyName           &quot;)\n      Console.Write(&quot;HeaderName         &quot;)\n      Console.Write(&quot;WebName            &quot;)\n      Console.WriteLine(&quot;Encoding.EncodingName&quot;)\n\n      &#39; For every encoding, compare the name properties with EncodingInfo.Name.\n      &#39; Display only the encodings that have one or more different names.\n      Dim ei As EncodingInfo\n      For Each ei In  Encoding.GetEncodings()\n         Dim e As Encoding = ei.GetEncoding()\n         \n         If ei.Name &lt;&gt; e.BodyName OrElse ei.Name &lt;&gt; e.HeaderName OrElse ei.Name &lt;&gt; e.WebName Then\n            Console.Write(&quot;{0,-18} &quot;, ei.Name)\n            Console.Write(&quot;{0,-9} &quot;,  e.CodePage)\n            Console.Write(&quot;{0,-18} &quot;, e.BodyName)\n            Console.Write(&quot;{0,-18} &quot;, e.HeaderName)\n            Console.Write(&quot;{0,-18} &quot;, e.WebName)\n            Console.WriteLine(&quot;{0} &quot;, e.EncodingName)\n         End If\n\n      Next ei \n\n   End Sub &#39;Main\n\nEnd Class &#39;SamplesEncoding \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Name               CodePage  BodyName           HeaderName         WebName            Encoding.EncodingName\n&#39;shift_jis          932       iso-2022-jp        iso-2022-jp        shift_jis          Japanese (Shift-JIS)\n&#39;windows-1250       1250      iso-8859-2         windows-1250       windows-1250       Central European (Windows)\n&#39;windows-1251       1251      koi8-r             windows-1251       windows-1251       Cyrillic (Windows)\n&#39;Windows-1252       1252      iso-8859-1         Windows-1252       Windows-1252       Western European (Windows)\n&#39;windows-1253       1253      iso-8859-7         windows-1253       windows-1253       Greek (Windows)\n&#39;windows-1254       1254      iso-8859-9         windows-1254       windows-1254       Turkish (Windows)\n&#39;csISO2022JP        50221     iso-2022-jp        iso-2022-jp        csISO2022JP        Japanese (JIS-Allow 1 byte Kana)\n&#39;iso-2022-kr        50225     iso-2022-kr        euc-kr             iso-2022-kr        Korean (ISO)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_DecoderFallback\">\r\n    \r\n            <a id=\"System_Text_Encoding_DecoderFallback_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DecoderFallback</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.text.decoderfallback\" data-linktype=\"relative-path\">DecoderFallback</a> object for the current <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.DecoderFallback DecoderFallback { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoderfallback\" data-linktype=\"relative-path\">DecoderFallback</a></div>\r\n                  </div>\r\n                  <p>The decoder fallback object for the current <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The value in a set operation is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>A value cannot be assigned in a set operation because the current <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> object is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.text.decoderfallback\" data-linktype=\"relative-path\">DecoderFallback</a> object represents an error handler that is invoked when an encoded byte sequence cannot be decoded into a character. Any one of the following handler types is supported:  </p>\n<ul>\n<li><p>A best-fit fallback handler, which replaces bytes that cannot be decoded with some suitable replacement character.  </p>\n</li>\n<li><p>A replacement fallback handler, which replaces bytes that cannot be decoded with some arbitrary replacement character. The .NET Framework includes one replacement fallback handler, <a class=\"xref\" href=\"system.text.decoderfallback\" data-linktype=\"relative-path\">DecoderFallback</a>, which by default replaces bytes that cannot be decoded with a question mark (&quot;?&quot;) character.  </p>\n</li>\n<li><p>An exception fallback handler, which throws an exception when bytes cannot be decoded. The .NET Framework includes one exception fallback handler, <a class=\"xref\" href=\"system.text.decoderexceptionfallback\" data-linktype=\"relative-path\">DecoderExceptionFallback</a>, which throws a <a class=\"xref\" href=\"system.text.decoderfallbackexception\" data-linktype=\"relative-path\">DecoderFallbackException</a> when bytes cannot be decoded.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_Default\">\r\n    \r\n            <a id=\"System_Text_Encoding_Default_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Default</div>        \r\n          </div>\r\n    \r\n            <p>Gets an encoding for the operating system&#39;s current ANSI code page.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Text.Encoding Default { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a></div>\r\n                  </div>\r\n                  <p>An encoding for the operating system&#39;s current ANSI code page.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"WARNING\"><h5>Warning</h5><p> Different computers can use different encodings as the default, and the default encoding can even change on a single computer. Therefore, data streamed from one computer to another or even retrieved at different times on the same computer might be translated incorrectly. In addition, the encoding returned by the Default property uses best-fit fallback to map unsupported characters to characters supported by the code page. For these two reasons, using the default encoding is generally not recommended. To ensure that encoded bytes are decoded properly, you should use a Unicode encoding, such as <a class=\"xref\" href=\"system.text.utf8encoding\" data-linktype=\"relative-path\">UTF8Encoding</a> or <a class=\"xref\" href=\"system.text.unicodeencoding\" data-linktype=\"relative-path\">UnicodeEncoding</a>, with a preamble. Another option is to use a higher-level protocol to ensure that the same format is used for encoding and decoding.  </p>\n</div>\n<p> The system ANSI code page defined by Default covers the ASCII set of characters, but the encoding is different from the encoding for ASCII. Because all Default encodings lose data, you might use <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_UTF8_\" data-linktype=\"relative-path\">UTF8</a> instead. UTF-8 is often identical in the U+00 to U+7F range, but can encode other characters without loss.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_EncoderFallback\">\r\n    \r\n            <a id=\"System_Text_Encoding_EncoderFallback_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EncoderFallback</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.text.encoderfallback\" data-linktype=\"relative-path\">EncoderFallback</a> object for the current <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.EncoderFallback EncoderFallback { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallback\" data-linktype=\"relative-path\">EncoderFallback</a></div>\r\n                  </div>\r\n                  <p>The encoder fallback object for the current <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The value in a set operation is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>A value cannot be assigned in a set operation because the current <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> object is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.text.encoderfallback\" data-linktype=\"relative-path\">EncoderFallback</a> object represents an error handler that is invoked when a character cannot be converted into an encoded byte sequence. Any one of the following handler types is supported:  </p>\n<ul>\n<li><p>A best-fit fallback handler, which replaces characters that cannot be encoded with some suitable replacement character.  </p>\n</li>\n<li><p>A replacement fallback handler, which replaces characters that cannot be encoded with some arbitrary replacement character. The .NET Framework includes one replacement fallback handler, <a class=\"xref\" href=\"system.text.encoderfallback\" data-linktype=\"relative-path\">EncoderFallback</a>, which by default replaces characters that cannot be encoded with a question mark (&quot;?&quot;) character.  </p>\n</li>\n<li><p>An exception fallback handler, which throws an exception when characters cannot be encoded. The .NET Framework includes one exception fallback handler, <a class=\"xref\" href=\"system.text.encoderexceptionfallback\" data-linktype=\"relative-path\">EncoderExceptionFallback</a>, which throws an <a class=\"xref\" href=\"system.text.encoderfallbackexception\" data-linktype=\"relative-path\">EncoderFallbackException</a> when characters cannot be decoded.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_EncodingName\">\r\n    \r\n            <a id=\"System_Text_Encoding_EncodingName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EncodingName</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets the human-readable description of the current encoding.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string EncodingName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The human-readable description of the current <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The EncodingName property is intended for display. To find a name that can be passed to the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncoding_\" data-linktype=\"relative-path\">GetEncoding</a> method, use the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_WebName_\" data-linktype=\"relative-path\">WebName</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example retrieves the different names for each encoding and displays the encodings with one or more names that are different from <a class=\"xref\" href=\"system.text.encodinginfo#System_Text_EncodingInfo_Name_\" data-linktype=\"relative-path\">Name</a>. It displays EncodingName but does not compare against it.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.Encoding.Names#1\">using System;\nusing System.Text;\n\npublic class SamplesEncoding  {\n\n   public static void Main()  {\n\n      // Print the header.\n      Console.Write( &quot;Name               &quot; );\n      Console.Write( &quot;CodePage  &quot; );\n      Console.Write( &quot;BodyName           &quot; );\n      Console.Write( &quot;HeaderName         &quot; );\n      Console.Write( &quot;WebName            &quot; );\n      Console.WriteLine( &quot;Encoding.EncodingName&quot; );\n\n      // For every encoding, compare the name properties with EncodingInfo.Name.\n      // Display only the encodings that have one or more different names.\n      foreach( EncodingInfo ei in Encoding.GetEncodings() )  {\n         Encoding e = ei.GetEncoding();\n\n         if (( ei.Name != e.BodyName ) || ( ei.Name != e.HeaderName ) || ( ei.Name != e.WebName ))  {\n            Console.Write( &quot;{0,-18} &quot;, ei.Name );\n            Console.Write( &quot;{0,-9} &quot;,  e.CodePage );\n            Console.Write( &quot;{0,-18} &quot;, e.BodyName );\n            Console.Write( &quot;{0,-18} &quot;, e.HeaderName );\n            Console.Write( &quot;{0,-18} &quot;, e.WebName );\n            Console.WriteLine( &quot;{0} &quot;, e.EncodingName );\n         }\n\n      }\n\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nName               CodePage  BodyName           HeaderName         WebName            Encoding.EncodingName\nshift_jis          932       iso-2022-jp        iso-2022-jp        shift_jis          Japanese (Shift-JIS)\nwindows-1250       1250      iso-8859-2         windows-1250       windows-1250       Central European (Windows)\nwindows-1251       1251      koi8-r             windows-1251       windows-1251       Cyrillic (Windows)\nWindows-1252       1252      iso-8859-1         Windows-1252       Windows-1252       Western European (Windows)\nwindows-1253       1253      iso-8859-7         windows-1253       windows-1253       Greek (Windows)\nwindows-1254       1254      iso-8859-9         windows-1254       windows-1254       Turkish (Windows)\ncsISO2022JP        50221     iso-2022-jp        iso-2022-jp        csISO2022JP        Japanese (JIS-Allow 1 byte Kana)\niso-2022-kr        50225     iso-2022-kr        euc-kr             iso-2022-kr        Korean (ISO)\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.Encoding.Names#1\">using namespace System;\nusing namespace System::Text;\nint main()\n{\n   \n   // Print the header.\n   Console::Write( &quot;Name               &quot; );\n   Console::Write( &quot;CodePage  &quot; );\n   Console::Write( &quot;BodyName           &quot; );\n   Console::Write( &quot;HeaderName         &quot; );\n   Console::Write( &quot;WebName            &quot; );\n   Console::WriteLine( &quot;Encoding.EncodingName&quot; );\n   \n   // For every encoding, compare the name properties with EncodingInfo.Name.\n   // Display only the encodings that have one or more different names.\n   System::Collections::IEnumerator^ myEnum = Encoding::GetEncodings()-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      EncodingInfo ^ ei = safe_cast&lt;EncodingInfo ^&gt;(myEnum-&gt;Current);\n      Encoding^ e = ei-&gt;GetEncoding();\n      if (  !ei-&gt;Name-&gt;Equals( e-&gt;BodyName ) ||  !ei-&gt;Name-&gt;Equals( e-&gt;HeaderName ) ||  !ei-&gt;Name-&gt;Equals( e-&gt;WebName ) )\n      {\n         Console::Write( &quot;{0,-18} &quot;, ei-&gt;Name );\n         Console::Write( &quot;{0,-9} &quot;, e-&gt;CodePage );\n         Console::Write( &quot;{0,-18} &quot;, e-&gt;BodyName );\n         Console::Write( &quot;{0,-18} &quot;, e-&gt;HeaderName );\n         Console::Write( &quot;{0,-18} &quot;, e-&gt;WebName );\n         Console::WriteLine( &quot;{0} &quot;, e-&gt;EncodingName );\n      }\n   }\n}\n\n/* \nThis code produces the following output.\n\nName               CodePage  BodyName           HeaderName         WebName            Encoding.EncodingName\nshift_jis          932       iso-2022-jp        iso-2022-jp        shift_jis          Japanese (Shift-JIS)\nwindows-1250       1250      iso-8859-2         windows-1250       windows-1250       Central European (Windows)\nwindows-1251       1251      koi8-r             windows-1251       windows-1251       Cyrillic (Windows)\nWindows-1252       1252      iso-8859-1         Windows-1252       Windows-1252       Western European (Windows)\nwindows-1253       1253      iso-8859-7         windows-1253       windows-1253       Greek (Windows)\nwindows-1254       1254      iso-8859-9         windows-1254       windows-1254       Turkish (Windows)\ncsISO2022JP        50221     iso-2022-jp        iso-2022-jp        csISO2022JP        Japanese (JIS-Allow 1 byte Kana)\niso-2022-kr        50225     iso-2022-kr        euc-kr             iso-2022-kr        Korean (ISO)\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.Encoding.Names#1\">Imports System\nImports System.Text\n\nPublic Class SamplesEncoding   \n\n   Public Shared Sub Main()\n\n      &#39; Print the header.\n      Console.Write(&quot;Name               &quot;)\n      Console.Write(&quot;CodePage  &quot;)\n      Console.Write(&quot;BodyName           &quot;)\n      Console.Write(&quot;HeaderName         &quot;)\n      Console.Write(&quot;WebName            &quot;)\n      Console.WriteLine(&quot;Encoding.EncodingName&quot;)\n\n      &#39; For every encoding, compare the name properties with EncodingInfo.Name.\n      &#39; Display only the encodings that have one or more different names.\n      Dim ei As EncodingInfo\n      For Each ei In  Encoding.GetEncodings()\n         Dim e As Encoding = ei.GetEncoding()\n         \n         If ei.Name &lt;&gt; e.BodyName OrElse ei.Name &lt;&gt; e.HeaderName OrElse ei.Name &lt;&gt; e.WebName Then\n            Console.Write(&quot;{0,-18} &quot;, ei.Name)\n            Console.Write(&quot;{0,-9} &quot;,  e.CodePage)\n            Console.Write(&quot;{0,-18} &quot;, e.BodyName)\n            Console.Write(&quot;{0,-18} &quot;, e.HeaderName)\n            Console.Write(&quot;{0,-18} &quot;, e.WebName)\n            Console.WriteLine(&quot;{0} &quot;, e.EncodingName)\n         End If\n\n      Next ei \n\n   End Sub &#39;Main\n\nEnd Class &#39;SamplesEncoding \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Name               CodePage  BodyName           HeaderName         WebName            Encoding.EncodingName\n&#39;shift_jis          932       iso-2022-jp        iso-2022-jp        shift_jis          Japanese (Shift-JIS)\n&#39;windows-1250       1250      iso-8859-2         windows-1250       windows-1250       Central European (Windows)\n&#39;windows-1251       1251      koi8-r             windows-1251       windows-1251       Cyrillic (Windows)\n&#39;Windows-1252       1252      iso-8859-1         Windows-1252       Windows-1252       Western European (Windows)\n&#39;windows-1253       1253      iso-8859-7         windows-1253       windows-1253       Greek (Windows)\n&#39;windows-1254       1254      iso-8859-9         windows-1254       windows-1254       Turkish (Windows)\n&#39;csISO2022JP        50221     iso-2022-jp        iso-2022-jp        csISO2022JP        Japanese (JIS-Allow 1 byte Kana)\n&#39;iso-2022-kr        50225     iso-2022-kr        euc-kr             iso-2022-kr        Korean (ISO)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_HeaderName\">\r\n    \r\n            <a id=\"System_Text_Encoding_HeaderName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HeaderName</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets a name for the current encoding that can be used with mail agent header tags.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string HeaderName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A name for the current <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> to use with mail agent header tags.  </p>\n<p> -or-  </p>\n<p> An empty string (&quot;&quot;), if the current <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> cannot be used.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If you need an encoding for a header name, you should call the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncoding_\" data-linktype=\"relative-path\">GetEncoding</a> method with the HeaderName property. Often the method retrieves a different encoding from the test encoding furnished in the call. Generally only e-mail applications need to retrieve such an encoding.  </p>\n<p> In some cases, the value of the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_BodyName_\" data-linktype=\"relative-path\">BodyName</a> property corresponds to the international standard that defines that encoding. This doesn&#39;t mean that the implementation complies in full with that standard.  </p>\n<p> Note that <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_WebName_\" data-linktype=\"relative-path\">WebName</a> returns the name to use to describe an encoding. The HeaderName property defines a different encoding that might work better for an e-mail application, for example. However, use of the property to define the encoding is not recommended.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example retrieves the different names for each encoding and displays the encodings with one or more names that are different from <a class=\"xref\" href=\"system.text.encodinginfo#System_Text_EncodingInfo_Name_\" data-linktype=\"relative-path\">Name</a>. It displays <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_EncodingName_\" data-linktype=\"relative-path\">EncodingName</a> but does not compare against it.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.Encoding.Names#1\">using System;\nusing System.Text;\n\npublic class SamplesEncoding  {\n\n   public static void Main()  {\n\n      // Print the header.\n      Console.Write( &quot;Name               &quot; );\n      Console.Write( &quot;CodePage  &quot; );\n      Console.Write( &quot;BodyName           &quot; );\n      Console.Write( &quot;HeaderName         &quot; );\n      Console.Write( &quot;WebName            &quot; );\n      Console.WriteLine( &quot;Encoding.EncodingName&quot; );\n\n      // For every encoding, compare the name properties with EncodingInfo.Name.\n      // Display only the encodings that have one or more different names.\n      foreach( EncodingInfo ei in Encoding.GetEncodings() )  {\n         Encoding e = ei.GetEncoding();\n\n         if (( ei.Name != e.BodyName ) || ( ei.Name != e.HeaderName ) || ( ei.Name != e.WebName ))  {\n            Console.Write( &quot;{0,-18} &quot;, ei.Name );\n            Console.Write( &quot;{0,-9} &quot;,  e.CodePage );\n            Console.Write( &quot;{0,-18} &quot;, e.BodyName );\n            Console.Write( &quot;{0,-18} &quot;, e.HeaderName );\n            Console.Write( &quot;{0,-18} &quot;, e.WebName );\n            Console.WriteLine( &quot;{0} &quot;, e.EncodingName );\n         }\n\n      }\n\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nName               CodePage  BodyName           HeaderName         WebName            Encoding.EncodingName\nshift_jis          932       iso-2022-jp        iso-2022-jp        shift_jis          Japanese (Shift-JIS)\nwindows-1250       1250      iso-8859-2         windows-1250       windows-1250       Central European (Windows)\nwindows-1251       1251      koi8-r             windows-1251       windows-1251       Cyrillic (Windows)\nWindows-1252       1252      iso-8859-1         Windows-1252       Windows-1252       Western European (Windows)\nwindows-1253       1253      iso-8859-7         windows-1253       windows-1253       Greek (Windows)\nwindows-1254       1254      iso-8859-9         windows-1254       windows-1254       Turkish (Windows)\ncsISO2022JP        50221     iso-2022-jp        iso-2022-jp        csISO2022JP        Japanese (JIS-Allow 1 byte Kana)\niso-2022-kr        50225     iso-2022-kr        euc-kr             iso-2022-kr        Korean (ISO)\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.Encoding.Names#1\">using namespace System;\nusing namespace System::Text;\nint main()\n{\n   \n   // Print the header.\n   Console::Write( &quot;Name               &quot; );\n   Console::Write( &quot;CodePage  &quot; );\n   Console::Write( &quot;BodyName           &quot; );\n   Console::Write( &quot;HeaderName         &quot; );\n   Console::Write( &quot;WebName            &quot; );\n   Console::WriteLine( &quot;Encoding.EncodingName&quot; );\n   \n   // For every encoding, compare the name properties with EncodingInfo.Name.\n   // Display only the encodings that have one or more different names.\n   System::Collections::IEnumerator^ myEnum = Encoding::GetEncodings()-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      EncodingInfo ^ ei = safe_cast&lt;EncodingInfo ^&gt;(myEnum-&gt;Current);\n      Encoding^ e = ei-&gt;GetEncoding();\n      if (  !ei-&gt;Name-&gt;Equals( e-&gt;BodyName ) ||  !ei-&gt;Name-&gt;Equals( e-&gt;HeaderName ) ||  !ei-&gt;Name-&gt;Equals( e-&gt;WebName ) )\n      {\n         Console::Write( &quot;{0,-18} &quot;, ei-&gt;Name );\n         Console::Write( &quot;{0,-9} &quot;, e-&gt;CodePage );\n         Console::Write( &quot;{0,-18} &quot;, e-&gt;BodyName );\n         Console::Write( &quot;{0,-18} &quot;, e-&gt;HeaderName );\n         Console::Write( &quot;{0,-18} &quot;, e-&gt;WebName );\n         Console::WriteLine( &quot;{0} &quot;, e-&gt;EncodingName );\n      }\n   }\n}\n\n/* \nThis code produces the following output.\n\nName               CodePage  BodyName           HeaderName         WebName            Encoding.EncodingName\nshift_jis          932       iso-2022-jp        iso-2022-jp        shift_jis          Japanese (Shift-JIS)\nwindows-1250       1250      iso-8859-2         windows-1250       windows-1250       Central European (Windows)\nwindows-1251       1251      koi8-r             windows-1251       windows-1251       Cyrillic (Windows)\nWindows-1252       1252      iso-8859-1         Windows-1252       Windows-1252       Western European (Windows)\nwindows-1253       1253      iso-8859-7         windows-1253       windows-1253       Greek (Windows)\nwindows-1254       1254      iso-8859-9         windows-1254       windows-1254       Turkish (Windows)\ncsISO2022JP        50221     iso-2022-jp        iso-2022-jp        csISO2022JP        Japanese (JIS-Allow 1 byte Kana)\niso-2022-kr        50225     iso-2022-kr        euc-kr             iso-2022-kr        Korean (ISO)\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.Encoding.Names#1\">Imports System\nImports System.Text\n\nPublic Class SamplesEncoding   \n\n   Public Shared Sub Main()\n\n      &#39; Print the header.\n      Console.Write(&quot;Name               &quot;)\n      Console.Write(&quot;CodePage  &quot;)\n      Console.Write(&quot;BodyName           &quot;)\n      Console.Write(&quot;HeaderName         &quot;)\n      Console.Write(&quot;WebName            &quot;)\n      Console.WriteLine(&quot;Encoding.EncodingName&quot;)\n\n      &#39; For every encoding, compare the name properties with EncodingInfo.Name.\n      &#39; Display only the encodings that have one or more different names.\n      Dim ei As EncodingInfo\n      For Each ei In  Encoding.GetEncodings()\n         Dim e As Encoding = ei.GetEncoding()\n         \n         If ei.Name &lt;&gt; e.BodyName OrElse ei.Name &lt;&gt; e.HeaderName OrElse ei.Name &lt;&gt; e.WebName Then\n            Console.Write(&quot;{0,-18} &quot;, ei.Name)\n            Console.Write(&quot;{0,-9} &quot;,  e.CodePage)\n            Console.Write(&quot;{0,-18} &quot;, e.BodyName)\n            Console.Write(&quot;{0,-18} &quot;, e.HeaderName)\n            Console.Write(&quot;{0,-18} &quot;, e.WebName)\n            Console.WriteLine(&quot;{0} &quot;, e.EncodingName)\n         End If\n\n      Next ei \n\n   End Sub &#39;Main\n\nEnd Class &#39;SamplesEncoding \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Name               CodePage  BodyName           HeaderName         WebName            Encoding.EncodingName\n&#39;shift_jis          932       iso-2022-jp        iso-2022-jp        shift_jis          Japanese (Shift-JIS)\n&#39;windows-1250       1250      iso-8859-2         windows-1250       windows-1250       Central European (Windows)\n&#39;windows-1251       1251      koi8-r             windows-1251       windows-1251       Cyrillic (Windows)\n&#39;Windows-1252       1252      iso-8859-1         Windows-1252       Windows-1252       Western European (Windows)\n&#39;windows-1253       1253      iso-8859-7         windows-1253       windows-1253       Greek (Windows)\n&#39;windows-1254       1254      iso-8859-9         windows-1254       windows-1254       Turkish (Windows)\n&#39;csISO2022JP        50221     iso-2022-jp        iso-2022-jp        csISO2022JP        Japanese (JIS-Allow 1 byte Kana)\n&#39;iso-2022-kr        50225     iso-2022-kr        euc-kr             iso-2022-kr        Korean (ISO)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_IsBrowserDisplay\">\r\n    \r\n            <a id=\"System_Text_Encoding_IsBrowserDisplay_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsBrowserDisplay</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets a value indicating whether the current encoding can be used by browser clients for displaying content.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool IsBrowserDisplay { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> can be used by browser clients for displaying content; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example checks the values of the Boolean properties of each encoding.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.Encoding.IsProps#1\">using System;\nusing System.Text;\n\npublic class SamplesEncoding  {\n\n   public static void Main()  {\n\n      // Print the header.\n      Console.Write( &quot;CodePage identifier and name     &quot; );\n      Console.Write( &quot;BrDisp   BrSave   &quot; );\n      Console.Write( &quot;MNDisp   MNSave   &quot; );\n      Console.WriteLine( &quot;1-Byte   ReadOnly &quot; );\n\n      // For every encoding, get the property values.\n      foreach( EncodingInfo ei in Encoding.GetEncodings() )  {\n         Encoding e = ei.GetEncoding();\n\n         Console.Write( &quot;{0,-6} {1,-25} &quot;, ei.CodePage, ei.Name );\n         Console.Write( &quot;{0,-8} {1,-8} &quot;, e.IsBrowserDisplay, e.IsBrowserSave );\n         Console.Write( &quot;{0,-8} {1,-8} &quot;, e.IsMailNewsDisplay, e.IsMailNewsSave );\n         Console.WriteLine( &quot;{0,-8} {1,-8} &quot;, e.IsSingleByte, e.IsReadOnly );\n      }\n\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nCodePage identifier and name     BrDisp   BrSave   MNDisp   MNSave   1-Byte   ReadOnly \n37     IBM037                    False    False    False    False    True     True     \n437    IBM437                    False    False    False    False    True     True     \n500    IBM500                    False    False    False    False    True     True     \n708    ASMO-708                  True     True     False    False    True     True     \n720    DOS-720                   True     True     False    False    True     True     \n737    ibm737                    False    False    False    False    True     True     \n775    ibm775                    False    False    False    False    True     True     \n850    ibm850                    False    False    False    False    True     True     \n852    ibm852                    True     True     False    False    True     True     \n855    IBM855                    False    False    False    False    True     True     \n857    ibm857                    False    False    False    False    True     True     \n858    IBM00858                  False    False    False    False    True     True     \n860    IBM860                    False    False    False    False    True     True     \n861    ibm861                    False    False    False    False    True     True     \n862    DOS-862                   True     True     False    False    True     True     \n863    IBM863                    False    False    False    False    True     True     \n864    IBM864                    False    False    False    False    True     True     \n865    IBM865                    False    False    False    False    True     True     \n866    cp866                     True     True     False    False    True     True     \n869    ibm869                    False    False    False    False    True     True     \n870    IBM870                    False    False    False    False    True     True     \n874    windows-874               True     True     True     True     True     True     \n875    cp875                     False    False    False    False    True     True     \n932    shift_jis                 True     True     True     True     False    True     \n936    gb2312                    True     True     True     True     False    True     \n949    ks_c_5601-1987            True     True     True     True     False    True     \n950    big5                      True     True     True     True     False    True     \n1026   IBM1026                   False    False    False    False    True     True     \n1047   IBM01047                  False    False    False    False    True     True     \n1140   IBM01140                  False    False    False    False    True     True     \n1141   IBM01141                  False    False    False    False    True     True     \n1142   IBM01142                  False    False    False    False    True     True     \n1143   IBM01143                  False    False    False    False    True     True     \n1144   IBM01144                  False    False    False    False    True     True     \n1145   IBM01145                  False    False    False    False    True     True     \n1146   IBM01146                  False    False    False    False    True     True     \n1147   IBM01147                  False    False    False    False    True     True     \n1148   IBM01148                  False    False    False    False    True     True     \n1149   IBM01149                  False    False    False    False    True     True     \n1200   utf-16                    False    True     False    False    False    True     \n1201   unicodeFFFE               False    False    False    False    False    True     \n1250   windows-1250              True     True     True     True     True     True     \n1251   windows-1251              True     True     True     True     True     True     \n1252   Windows-1252              True     True     True     True     True     True     \n1253   windows-1253              True     True     True     True     True     True     \n1254   windows-1254              True     True     True     True     True     True     \n1255   windows-1255              True     True     True     True     True     True     \n1256   windows-1256              True     True     True     True     True     True     \n1257   windows-1257              True     True     True     True     True     True     \n1258   windows-1258              True     True     True     True     True     True     \n1361   Johab                     False    False    False    False    False    True     \n10000  macintosh                 False    False    False    False    True     True     \n10001  x-mac-japanese            False    False    False    False    False    True     \n10002  x-mac-chinesetrad         False    False    False    False    False    True     \n10003  x-mac-korean              False    False    False    False    False    True     \n10004  x-mac-arabic              False    False    False    False    True     True     \n10005  x-mac-hebrew              False    False    False    False    True     True     \n10006  x-mac-greek               False    False    False    False    True     True     \n10007  x-mac-cyrillic            False    False    False    False    True     True     \n10008  x-mac-chinesesimp         False    False    False    False    False    True     \n10010  x-mac-romanian            False    False    False    False    True     True     \n10017  x-mac-ukrainian           False    False    False    False    True     True     \n10021  x-mac-thai                False    False    False    False    True     True     \n10029  x-mac-ce                  False    False    False    False    True     True     \n10079  x-mac-icelandic           False    False    False    False    True     True     \n10081  x-mac-turkish             False    False    False    False    True     True     \n10082  x-mac-croatian            False    False    False    False    True     True     \n12000  utf-32                    False    False    False    False    False    True     \n12001  utf-32BE                  False    False    False    False    False    True     \n20000  x-Chinese-CNS             False    False    False    False    False    True     \n20001  x-cp20001                 False    False    False    False    False    True     \n20002  x-Chinese-Eten            False    False    False    False    False    True     \n20003  x-cp20003                 False    False    False    False    False    True     \n20004  x-cp20004                 False    False    False    False    False    True     \n20005  x-cp20005                 False    False    False    False    False    True     \n20105  x-IA5                     False    False    False    False    True     True     \n20106  x-IA5-German              False    False    False    False    True     True     \n20107  x-IA5-Swedish             False    False    False    False    True     True     \n20108  x-IA5-Norwegian           False    False    False    False    True     True     \n20127  us-ascii                  False    False    True     True     True     True     \n20261  x-cp20261                 False    False    False    False    False    True     \n20269  x-cp20269                 False    False    False    False    True     True     \n20273  IBM273                    False    False    False    False    True     True     \n20277  IBM277                    False    False    False    False    True     True     \n20278  IBM278                    False    False    False    False    True     True     \n20280  IBM280                    False    False    False    False    True     True     \n20284  IBM284                    False    False    False    False    True     True     \n20285  IBM285                    False    False    False    False    True     True     \n20290  IBM290                    False    False    False    False    True     True     \n20297  IBM297                    False    False    False    False    True     True     \n20420  IBM420                    False    False    False    False    True     True     \n20423  IBM423                    False    False    False    False    True     True     \n20424  IBM424                    False    False    False    False    True     True     \n20833  x-EBCDIC-KoreanExtended   False    False    False    False    True     True     \n20838  IBM-Thai                  False    False    False    False    True     True     \n20866  koi8-r                    True     True     True     True     True     True     \n20871  IBM871                    False    False    False    False    True     True     \n20880  IBM880                    False    False    False    False    True     True     \n20905  IBM905                    False    False    False    False    True     True     \n20924  IBM00924                  False    False    False    False    True     True     \n20932  EUC-JP                    False    False    False    False    False    True     \n20936  x-cp20936                 False    False    False    False    False    True     \n20949  x-cp20949                 False    False    False    False    False    True     \n21025  cp1025                    False    False    False    False    True     True     \n21866  koi8-u                    True     True     True     True     True     True     \n28591  iso-8859-1                True     True     True     True     True     True     \n28592  iso-8859-2                True     True     True     True     True     True     \n28593  iso-8859-3                False    False    True     True     True     True     \n28594  iso-8859-4                True     True     True     True     True     True     \n28595  iso-8859-5                True     True     True     True     True     True     \n28596  iso-8859-6                True     True     True     True     True     True     \n28597  iso-8859-7                True     True     True     True     True     True     \n28598  iso-8859-8                True     True     False    False    True     True     \n28599  iso-8859-9                True     True     True     True     True     True     \n28603  iso-8859-13               False    False    True     True     True     True     \n28605  iso-8859-15               False    True     True     True     True     True     \n29001  x-Europa                  False    False    False    False    True     True     \n38598  iso-8859-8-i              True     True     True     True     True     True     \n50220  iso-2022-jp               False    False    True     True     False    True     \n50221  csISO2022JP               False    True     True     True     False    True     \n50222  iso-2022-jp               False    False    False    False    False    True     \n50225  iso-2022-kr               False    False    True     False    False    True     \n50227  x-cp50227                 False    False    False    False    False    True     \n51932  euc-jp                    True     True     True     True     False    True     \n51936  EUC-CN                    False    False    False    False    False    True     \n51949  euc-kr                    False    False    True     True     False    True     \n52936  hz-gb-2312                True     True     True     True     False    True     \n54936  GB18030                   True     True     True     True     False    True     \n57002  x-iscii-de                False    False    False    False    False    True     \n57003  x-iscii-be                False    False    False    False    False    True     \n57004  x-iscii-ta                False    False    False    False    False    True     \n57005  x-iscii-te                False    False    False    False    False    True     \n57006  x-iscii-as                False    False    False    False    False    True     \n57007  x-iscii-or                False    False    False    False    False    True     \n57008  x-iscii-ka                False    False    False    False    False    True     \n57009  x-iscii-ma                False    False    False    False    False    True     \n57010  x-iscii-gu                False    False    False    False    False    True     \n57011  x-iscii-pa                False    False    False    False    False    True     \n65000  utf-7                     False    False    True     True     False    True     \n65001  utf-8                     True     True     True     True     False    True     \n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.Encoding.IsProps#1\">using namespace System;\nusing namespace System::Text;\nint main()\n{\n   \n   // Print the header.\n   Console::Write( &quot;CodePage identifier and name     &quot; );\n   Console::Write( &quot;BrDisp   BrSave   &quot; );\n   Console::Write( &quot;MNDisp   MNSave   &quot; );\n   Console::WriteLine( &quot;1-Byte   ReadOnly &quot; );\n   \n   // For every encoding, get the property values.\n   System::Collections::IEnumerator^ myEnum = Encoding::GetEncodings()-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      EncodingInfo ^ ei = safe_cast&lt;EncodingInfo ^&gt;(myEnum-&gt;Current);\n      Encoding^ e = ei-&gt;GetEncoding();\n      Console::Write( &quot;{0,-6} {1,-25} &quot;, ei-&gt;CodePage, ei-&gt;Name );\n      Console::Write( &quot;{0,-8} {1,-8} &quot;, e-&gt;IsBrowserDisplay, e-&gt;IsBrowserSave );\n      Console::Write( &quot;{0,-8} {1,-8} &quot;, e-&gt;IsMailNewsDisplay, e-&gt;IsMailNewsSave );\n      Console::WriteLine( &quot;{0,-8} {1,-8} &quot;, e-&gt;IsSingleByte, e-&gt;IsReadOnly );\n   }\n}\n\n/* \nThis code produces the following output.\n\nCodePage identifier and name     BrDisp   BrSave   MNDisp   MNSave   1-Byte   ReadOnly \n37     IBM037                    False    False    False    False    True     True     \n437    IBM437                    False    False    False    False    True     True     \n500    IBM500                    False    False    False    False    True     True     \n708    ASMO-708                  True     True     False    False    True     True     \n720    DOS-720                   True     True     False    False    True     True     \n737    ibm737                    False    False    False    False    True     True     \n775    ibm775                    False    False    False    False    True     True     \n850    ibm850                    False    False    False    False    True     True     \n852    ibm852                    True     True     False    False    True     True     \n855    IBM855                    False    False    False    False    True     True     \n857    ibm857                    False    False    False    False    True     True     \n858    IBM00858                  False    False    False    False    True     True     \n860    IBM860                    False    False    False    False    True     True     \n861    ibm861                    False    False    False    False    True     True     \n862    DOS-862                   True     True     False    False    True     True     \n863    IBM863                    False    False    False    False    True     True     \n864    IBM864                    False    False    False    False    True     True     \n865    IBM865                    False    False    False    False    True     True     \n866    cp866                     True     True     False    False    True     True     \n869    ibm869                    False    False    False    False    True     True     \n870    IBM870                    False    False    False    False    True     True     \n874    windows-874               True     True     True     True     True     True     \n875    cp875                     False    False    False    False    True     True     \n932    shift_jis                 True     True     True     True     False    True     \n936    gb2312                    True     True     True     True     False    True     \n949    ks_c_5601-1987            True     True     True     True     False    True     \n950    big5                      True     True     True     True     False    True     \n1026   IBM1026                   False    False    False    False    True     True     \n1047   IBM01047                  False    False    False    False    True     True     \n1140   IBM01140                  False    False    False    False    True     True     \n1141   IBM01141                  False    False    False    False    True     True     \n1142   IBM01142                  False    False    False    False    True     True     \n1143   IBM01143                  False    False    False    False    True     True     \n1144   IBM01144                  False    False    False    False    True     True     \n1145   IBM01145                  False    False    False    False    True     True     \n1146   IBM01146                  False    False    False    False    True     True     \n1147   IBM01147                  False    False    False    False    True     True     \n1148   IBM01148                  False    False    False    False    True     True     \n1149   IBM01149                  False    False    False    False    True     True     \n1200   utf-16                    False    True     False    False    False    True     \n1201   unicodeFFFE               False    False    False    False    False    True     \n1250   windows-1250              True     True     True     True     True     True     \n1251   windows-1251              True     True     True     True     True     True     \n1252   Windows-1252              True     True     True     True     True     True     \n1253   windows-1253              True     True     True     True     True     True     \n1254   windows-1254              True     True     True     True     True     True     \n1255   windows-1255              True     True     True     True     True     True     \n1256   windows-1256              True     True     True     True     True     True     \n1257   windows-1257              True     True     True     True     True     True     \n1258   windows-1258              True     True     True     True     True     True     \n1361   Johab                     False    False    False    False    False    True     \n10000  macintosh                 False    False    False    False    True     True     \n10001  x-mac-japanese            False    False    False    False    False    True     \n10002  x-mac-chinesetrad         False    False    False    False    False    True     \n10003  x-mac-korean              False    False    False    False    False    True     \n10004  x-mac-arabic              False    False    False    False    True     True     \n10005  x-mac-hebrew              False    False    False    False    True     True     \n10006  x-mac-greek               False    False    False    False    True     True     \n10007  x-mac-cyrillic            False    False    False    False    True     True     \n10008  x-mac-chinesesimp         False    False    False    False    False    True     \n10010  x-mac-romanian            False    False    False    False    True     True     \n10017  x-mac-ukrainian           False    False    False    False    True     True     \n10021  x-mac-thai                False    False    False    False    True     True     \n10029  x-mac-ce                  False    False    False    False    True     True     \n10079  x-mac-icelandic           False    False    False    False    True     True     \n10081  x-mac-turkish             False    False    False    False    True     True     \n10082  x-mac-croatian            False    False    False    False    True     True     \n12000  utf-32                    False    False    False    False    False    True     \n12001  utf-32BE                  False    False    False    False    False    True     \n20000  x-Chinese-CNS             False    False    False    False    False    True     \n20001  x-cp20001                 False    False    False    False    False    True     \n20002  x-Chinese-Eten            False    False    False    False    False    True     \n20003  x-cp20003                 False    False    False    False    False    True     \n20004  x-cp20004                 False    False    False    False    False    True     \n20005  x-cp20005                 False    False    False    False    False    True     \n20105  x-IA5                     False    False    False    False    True     True     \n20106  x-IA5-German              False    False    False    False    True     True     \n20107  x-IA5-Swedish             False    False    False    False    True     True     \n20108  x-IA5-Norwegian           False    False    False    False    True     True     \n20127  us-ascii                  False    False    True     True     True     True     \n20261  x-cp20261                 False    False    False    False    False    True     \n20269  x-cp20269                 False    False    False    False    True     True     \n20273  IBM273                    False    False    False    False    True     True     \n20277  IBM277                    False    False    False    False    True     True     \n20278  IBM278                    False    False    False    False    True     True     \n20280  IBM280                    False    False    False    False    True     True     \n20284  IBM284                    False    False    False    False    True     True     \n20285  IBM285                    False    False    False    False    True     True     \n20290  IBM290                    False    False    False    False    True     True     \n20297  IBM297                    False    False    False    False    True     True     \n20420  IBM420                    False    False    False    False    True     True     \n20423  IBM423                    False    False    False    False    True     True     \n20424  IBM424                    False    False    False    False    True     True     \n20833  x-EBCDIC-KoreanExtended   False    False    False    False    True     True     \n20838  IBM-Thai                  False    False    False    False    True     True     \n20866  koi8-r                    True     True     True     True     True     True     \n20871  IBM871                    False    False    False    False    True     True     \n20880  IBM880                    False    False    False    False    True     True     \n20905  IBM905                    False    False    False    False    True     True     \n20924  IBM00924                  False    False    False    False    True     True     \n20932  EUC-JP                    False    False    False    False    False    True     \n20936  x-cp20936                 False    False    False    False    False    True     \n20949  x-cp20949                 False    False    False    False    False    True     \n21025  cp1025                    False    False    False    False    True     True     \n21866  koi8-u                    True     True     True     True     True     True     \n28591  iso-8859-1                True     True     True     True     True     True     \n28592  iso-8859-2                True     True     True     True     True     True     \n28593  iso-8859-3                False    False    True     True     True     True     \n28594  iso-8859-4                True     True     True     True     True     True     \n28595  iso-8859-5                True     True     True     True     True     True     \n28596  iso-8859-6                True     True     True     True     True     True     \n28597  iso-8859-7                True     True     True     True     True     True     \n28598  iso-8859-8                True     True     False    False    True     True     \n28599  iso-8859-9                True     True     True     True     True     True     \n28603  iso-8859-13               False    False    True     True     True     True     \n28605  iso-8859-15               False    True     True     True     True     True     \n29001  x-Europa                  False    False    False    False    True     True     \n38598  iso-8859-8-i              True     True     True     True     True     True     \n50220  iso-2022-jp               False    False    True     True     False    True     \n50221  csISO2022JP               False    True     True     True     False    True     \n50222  iso-2022-jp               False    False    False    False    False    True     \n50225  iso-2022-kr               False    False    True     False    False    True     \n50227  x-cp50227                 False    False    False    False    False    True     \n51932  euc-jp                    True     True     True     True     False    True     \n51936  EUC-CN                    False    False    False    False    False    True     \n51949  euc-kr                    False    False    True     True     False    True     \n52936  hz-gb-2312                True     True     True     True     False    True     \n54936  GB18030                   True     True     True     True     False    True     \n57002  x-iscii-de                False    False    False    False    False    True     \n57003  x-iscii-be                False    False    False    False    False    True     \n57004  x-iscii-ta                False    False    False    False    False    True     \n57005  x-iscii-te                False    False    False    False    False    True     \n57006  x-iscii-as                False    False    False    False    False    True     \n57007  x-iscii-or                False    False    False    False    False    True     \n57008  x-iscii-ka                False    False    False    False    False    True     \n57009  x-iscii-ma                False    False    False    False    False    True     \n57010  x-iscii-gu                False    False    False    False    False    True     \n57011  x-iscii-pa                False    False    False    False    False    True     \n65000  utf-7                     False    False    True     True     False    True     \n65001  utf-8                     True     True     True     True     False    True     \n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.Encoding.IsProps#1\">Imports System\nImports System.Text\n\nPublic Class SamplesEncoding   \n\n   Public Shared Sub Main()\n\n      &#39; Print the header.\n      Console.Write(&quot;CodePage identifier and name     &quot;)\n      Console.Write(&quot;BrDisp   BrSave   &quot;)\n      Console.Write(&quot;MNDisp   MNSave   &quot;)\n      Console.WriteLine(&quot;1-Byte   ReadOnly &quot;)\n\n      &#39; For every encoding, get the property values.\n      Dim ei As EncodingInfo\n      For Each ei In  Encoding.GetEncodings()\n         Dim e As Encoding = ei.GetEncoding()\n         \n         Console.Write(&quot;{0,-6} {1,-25} &quot;, ei.CodePage, ei.Name)\n         Console.Write(&quot;{0,-8} {1,-8} &quot;, e.IsBrowserDisplay, e.IsBrowserSave)\n         Console.Write(&quot;{0,-8} {1,-8} &quot;, e.IsMailNewsDisplay, e.IsMailNewsSave)\n         Console.WriteLine(&quot;{0,-8} {1,-8} &quot;, e.IsSingleByte, e.IsReadOnly)\n      Next ei\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesEncoding\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;CodePage identifier and name     BrDisp   BrSave   MNDisp   MNSave   1-Byte   ReadOnly \n&#39;37     IBM037                    False    False    False    False    True     True     \n&#39;437    IBM437                    False    False    False    False    True     True     \n&#39;500    IBM500                    False    False    False    False    True     True     \n&#39;708    ASMO-708                  True     True     False    False    True     True     \n&#39;720    DOS-720                   True     True     False    False    True     True     \n&#39;737    ibm737                    False    False    False    False    True     True     \n&#39;775    ibm775                    False    False    False    False    True     True     \n&#39;850    ibm850                    False    False    False    False    True     True     \n&#39;852    ibm852                    True     True     False    False    True     True     \n&#39;855    IBM855                    False    False    False    False    True     True     \n&#39;857    ibm857                    False    False    False    False    True     True     \n&#39;858    IBM00858                  False    False    False    False    True     True     \n&#39;860    IBM860                    False    False    False    False    True     True     \n&#39;861    ibm861                    False    False    False    False    True     True     \n&#39;862    DOS-862                   True     True     False    False    True     True     \n&#39;863    IBM863                    False    False    False    False    True     True     \n&#39;864    IBM864                    False    False    False    False    True     True     \n&#39;865    IBM865                    False    False    False    False    True     True     \n&#39;866    cp866                     True     True     False    False    True     True     \n&#39;869    ibm869                    False    False    False    False    True     True     \n&#39;870    IBM870                    False    False    False    False    True     True     \n&#39;874    windows-874               True     True     True     True     True     True     \n&#39;875    cp875                     False    False    False    False    True     True     \n&#39;932    shift_jis                 True     True     True     True     False    True     \n&#39;936    gb2312                    True     True     True     True     False    True     \n&#39;949    ks_c_5601-1987            True     True     True     True     False    True     \n&#39;950    big5                      True     True     True     True     False    True     \n&#39;1026   IBM1026                   False    False    False    False    True     True     \n&#39;1047   IBM01047                  False    False    False    False    True     True     \n&#39;1140   IBM01140                  False    False    False    False    True     True     \n&#39;1141   IBM01141                  False    False    False    False    True     True     \n&#39;1142   IBM01142                  False    False    False    False    True     True     \n&#39;1143   IBM01143                  False    False    False    False    True     True     \n&#39;1144   IBM01144                  False    False    False    False    True     True     \n&#39;1145   IBM01145                  False    False    False    False    True     True     \n&#39;1146   IBM01146                  False    False    False    False    True     True     \n&#39;1147   IBM01147                  False    False    False    False    True     True     \n&#39;1148   IBM01148                  False    False    False    False    True     True     \n&#39;1149   IBM01149                  False    False    False    False    True     True     \n&#39;1200   utf-16                    False    True     False    False    False    True     \n&#39;1201   unicodeFFFE               False    False    False    False    False    True     \n&#39;1250   windows-1250              True     True     True     True     True     True     \n&#39;1251   windows-1251              True     True     True     True     True     True     \n&#39;1252   Windows-1252              True     True     True     True     True     True     \n&#39;1253   windows-1253              True     True     True     True     True     True     \n&#39;1254   windows-1254              True     True     True     True     True     True     \n&#39;1255   windows-1255              True     True     True     True     True     True     \n&#39;1256   windows-1256              True     True     True     True     True     True     \n&#39;1257   windows-1257              True     True     True     True     True     True     \n&#39;1258   windows-1258              True     True     True     True     True     True     \n&#39;1361   Johab                     False    False    False    False    False    True     \n&#39;10000  macintosh                 False    False    False    False    True     True     \n&#39;10001  x-mac-japanese            False    False    False    False    False    True     \n&#39;10002  x-mac-chinesetrad         False    False    False    False    False    True     \n&#39;10003  x-mac-korean              False    False    False    False    False    True     \n&#39;10004  x-mac-arabic              False    False    False    False    True     True     \n&#39;10005  x-mac-hebrew              False    False    False    False    True     True     \n&#39;10006  x-mac-greek               False    False    False    False    True     True     \n&#39;10007  x-mac-cyrillic            False    False    False    False    True     True     \n&#39;10008  x-mac-chinesesimp         False    False    False    False    False    True     \n&#39;10010  x-mac-romanian            False    False    False    False    True     True     \n&#39;10017  x-mac-ukrainian           False    False    False    False    True     True     \n&#39;10021  x-mac-thai                False    False    False    False    True     True     \n&#39;10029  x-mac-ce                  False    False    False    False    True     True     \n&#39;10079  x-mac-icelandic           False    False    False    False    True     True     \n&#39;10081  x-mac-turkish             False    False    False    False    True     True     \n&#39;10082  x-mac-croatian            False    False    False    False    True     True     \n&#39;12000  utf-32                    False    False    False    False    False    True     \n&#39;12001  utf-32BE                  False    False    False    False    False    True     \n&#39;20000  x-Chinese-CNS             False    False    False    False    False    True     \n&#39;20001  x-cp20001                 False    False    False    False    False    True     \n&#39;20002  x-Chinese-Eten            False    False    False    False    False    True     \n&#39;20003  x-cp20003                 False    False    False    False    False    True     \n&#39;20004  x-cp20004                 False    False    False    False    False    True     \n&#39;20005  x-cp20005                 False    False    False    False    False    True     \n&#39;20105  x-IA5                     False    False    False    False    True     True     \n&#39;20106  x-IA5-German              False    False    False    False    True     True     \n&#39;20107  x-IA5-Swedish             False    False    False    False    True     True     \n&#39;20108  x-IA5-Norwegian           False    False    False    False    True     True     \n&#39;20127  us-ascii                  False    False    True     True     True     True     \n&#39;20261  x-cp20261                 False    False    False    False    False    True     \n&#39;20269  x-cp20269                 False    False    False    False    True     True     \n&#39;20273  IBM273                    False    False    False    False    True     True     \n&#39;20277  IBM277                    False    False    False    False    True     True     \n&#39;20278  IBM278                    False    False    False    False    True     True     \n&#39;20280  IBM280                    False    False    False    False    True     True     \n&#39;20284  IBM284                    False    False    False    False    True     True     \n&#39;20285  IBM285                    False    False    False    False    True     True     \n&#39;20290  IBM290                    False    False    False    False    True     True     \n&#39;20297  IBM297                    False    False    False    False    True     True     \n&#39;20420  IBM420                    False    False    False    False    True     True     \n&#39;20423  IBM423                    False    False    False    False    True     True     \n&#39;20424  IBM424                    False    False    False    False    True     True     \n&#39;20833  x-EBCDIC-KoreanExtended   False    False    False    False    True     True     \n&#39;20838  IBM-Thai                  False    False    False    False    True     True     \n&#39;20866  koi8-r                    True     True     True     True     True     True     \n&#39;20871  IBM871                    False    False    False    False    True     True     \n&#39;20880  IBM880                    False    False    False    False    True     True     \n&#39;20905  IBM905                    False    False    False    False    True     True     \n&#39;20924  IBM00924                  False    False    False    False    True     True     \n&#39;20932  EUC-JP                    False    False    False    False    False    True     \n&#39;20936  x-cp20936                 False    False    False    False    False    True     \n&#39;20949  x-cp20949                 False    False    False    False    False    True     \n&#39;21025  cp1025                    False    False    False    False    True     True     \n&#39;21866  koi8-u                    True     True     True     True     True     True     \n&#39;28591  iso-8859-1                True     True     True     True     True     True     \n&#39;28592  iso-8859-2                True     True     True     True     True     True     \n&#39;28593  iso-8859-3                False    False    True     True     True     True     \n&#39;28594  iso-8859-4                True     True     True     True     True     True     \n&#39;28595  iso-8859-5                True     True     True     True     True     True     \n&#39;28596  iso-8859-6                True     True     True     True     True     True     \n&#39;28597  iso-8859-7                True     True     True     True     True     True     \n&#39;28598  iso-8859-8                True     True     False    False    True     True     \n&#39;28599  iso-8859-9                True     True     True     True     True     True     \n&#39;28603  iso-8859-13               False    False    True     True     True     True     \n&#39;28605  iso-8859-15               False    True     True     True     True     True     \n&#39;29001  x-Europa                  False    False    False    False    True     True     \n&#39;38598  iso-8859-8-i              True     True     True     True     True     True     \n&#39;50220  iso-2022-jp               False    False    True     True     False    True     \n&#39;50221  csISO2022JP               False    True     True     True     False    True     \n&#39;50222  iso-2022-jp               False    False    False    False    False    True     \n&#39;50225  iso-2022-kr               False    False    True     False    False    True     \n&#39;50227  x-cp50227                 False    False    False    False    False    True     \n&#39;51932  euc-jp                    True     True     True     True     False    True     \n&#39;51936  EUC-CN                    False    False    False    False    False    True     \n&#39;51949  euc-kr                    False    False    True     True     False    True     \n&#39;52936  hz-gb-2312                True     True     True     True     False    True     \n&#39;54936  GB18030                   True     True     True     True     False    True     \n&#39;57002  x-iscii-de                False    False    False    False    False    True     \n&#39;57003  x-iscii-be                False    False    False    False    False    True     \n&#39;57004  x-iscii-ta                False    False    False    False    False    True     \n&#39;57005  x-iscii-te                False    False    False    False    False    True     \n&#39;57006  x-iscii-as                False    False    False    False    False    True     \n&#39;57007  x-iscii-or                False    False    False    False    False    True     \n&#39;57008  x-iscii-ka                False    False    False    False    False    True     \n&#39;57009  x-iscii-ma                False    False    False    False    False    True     \n&#39;57010  x-iscii-gu                False    False    False    False    False    True     \n&#39;57011  x-iscii-pa                False    False    False    False    False    True     \n&#39;65000  utf-7                     False    False    True     True     False    True     \n&#39;65001  utf-8                     True     True     True     True     False    True     \n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_IsBrowserSave\">\r\n    \r\n            <a id=\"System_Text_Encoding_IsBrowserSave_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsBrowserSave</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets a value indicating whether the current encoding can be used by browser clients for saving content.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool IsBrowserSave { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> can be used by browser clients for saving content; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example checks the values of the Boolean properties of each encoding.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.Encoding.IsProps#1\">using System;\nusing System.Text;\n\npublic class SamplesEncoding  {\n\n   public static void Main()  {\n\n      // Print the header.\n      Console.Write( &quot;CodePage identifier and name     &quot; );\n      Console.Write( &quot;BrDisp   BrSave   &quot; );\n      Console.Write( &quot;MNDisp   MNSave   &quot; );\n      Console.WriteLine( &quot;1-Byte   ReadOnly &quot; );\n\n      // For every encoding, get the property values.\n      foreach( EncodingInfo ei in Encoding.GetEncodings() )  {\n         Encoding e = ei.GetEncoding();\n\n         Console.Write( &quot;{0,-6} {1,-25} &quot;, ei.CodePage, ei.Name );\n         Console.Write( &quot;{0,-8} {1,-8} &quot;, e.IsBrowserDisplay, e.IsBrowserSave );\n         Console.Write( &quot;{0,-8} {1,-8} &quot;, e.IsMailNewsDisplay, e.IsMailNewsSave );\n         Console.WriteLine( &quot;{0,-8} {1,-8} &quot;, e.IsSingleByte, e.IsReadOnly );\n      }\n\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nCodePage identifier and name     BrDisp   BrSave   MNDisp   MNSave   1-Byte   ReadOnly \n37     IBM037                    False    False    False    False    True     True     \n437    IBM437                    False    False    False    False    True     True     \n500    IBM500                    False    False    False    False    True     True     \n708    ASMO-708                  True     True     False    False    True     True     \n720    DOS-720                   True     True     False    False    True     True     \n737    ibm737                    False    False    False    False    True     True     \n775    ibm775                    False    False    False    False    True     True     \n850    ibm850                    False    False    False    False    True     True     \n852    ibm852                    True     True     False    False    True     True     \n855    IBM855                    False    False    False    False    True     True     \n857    ibm857                    False    False    False    False    True     True     \n858    IBM00858                  False    False    False    False    True     True     \n860    IBM860                    False    False    False    False    True     True     \n861    ibm861                    False    False    False    False    True     True     \n862    DOS-862                   True     True     False    False    True     True     \n863    IBM863                    False    False    False    False    True     True     \n864    IBM864                    False    False    False    False    True     True     \n865    IBM865                    False    False    False    False    True     True     \n866    cp866                     True     True     False    False    True     True     \n869    ibm869                    False    False    False    False    True     True     \n870    IBM870                    False    False    False    False    True     True     \n874    windows-874               True     True     True     True     True     True     \n875    cp875                     False    False    False    False    True     True     \n932    shift_jis                 True     True     True     True     False    True     \n936    gb2312                    True     True     True     True     False    True     \n949    ks_c_5601-1987            True     True     True     True     False    True     \n950    big5                      True     True     True     True     False    True     \n1026   IBM1026                   False    False    False    False    True     True     \n1047   IBM01047                  False    False    False    False    True     True     \n1140   IBM01140                  False    False    False    False    True     True     \n1141   IBM01141                  False    False    False    False    True     True     \n1142   IBM01142                  False    False    False    False    True     True     \n1143   IBM01143                  False    False    False    False    True     True     \n1144   IBM01144                  False    False    False    False    True     True     \n1145   IBM01145                  False    False    False    False    True     True     \n1146   IBM01146                  False    False    False    False    True     True     \n1147   IBM01147                  False    False    False    False    True     True     \n1148   IBM01148                  False    False    False    False    True     True     \n1149   IBM01149                  False    False    False    False    True     True     \n1200   utf-16                    False    True     False    False    False    True     \n1201   unicodeFFFE               False    False    False    False    False    True     \n1250   windows-1250              True     True     True     True     True     True     \n1251   windows-1251              True     True     True     True     True     True     \n1252   Windows-1252              True     True     True     True     True     True     \n1253   windows-1253              True     True     True     True     True     True     \n1254   windows-1254              True     True     True     True     True     True     \n1255   windows-1255              True     True     True     True     True     True     \n1256   windows-1256              True     True     True     True     True     True     \n1257   windows-1257              True     True     True     True     True     True     \n1258   windows-1258              True     True     True     True     True     True     \n1361   Johab                     False    False    False    False    False    True     \n10000  macintosh                 False    False    False    False    True     True     \n10001  x-mac-japanese            False    False    False    False    False    True     \n10002  x-mac-chinesetrad         False    False    False    False    False    True     \n10003  x-mac-korean              False    False    False    False    False    True     \n10004  x-mac-arabic              False    False    False    False    True     True     \n10005  x-mac-hebrew              False    False    False    False    True     True     \n10006  x-mac-greek               False    False    False    False    True     True     \n10007  x-mac-cyrillic            False    False    False    False    True     True     \n10008  x-mac-chinesesimp         False    False    False    False    False    True     \n10010  x-mac-romanian            False    False    False    False    True     True     \n10017  x-mac-ukrainian           False    False    False    False    True     True     \n10021  x-mac-thai                False    False    False    False    True     True     \n10029  x-mac-ce                  False    False    False    False    True     True     \n10079  x-mac-icelandic           False    False    False    False    True     True     \n10081  x-mac-turkish             False    False    False    False    True     True     \n10082  x-mac-croatian            False    False    False    False    True     True     \n12000  utf-32                    False    False    False    False    False    True     \n12001  utf-32BE                  False    False    False    False    False    True     \n20000  x-Chinese-CNS             False    False    False    False    False    True     \n20001  x-cp20001                 False    False    False    False    False    True     \n20002  x-Chinese-Eten            False    False    False    False    False    True     \n20003  x-cp20003                 False    False    False    False    False    True     \n20004  x-cp20004                 False    False    False    False    False    True     \n20005  x-cp20005                 False    False    False    False    False    True     \n20105  x-IA5                     False    False    False    False    True     True     \n20106  x-IA5-German              False    False    False    False    True     True     \n20107  x-IA5-Swedish             False    False    False    False    True     True     \n20108  x-IA5-Norwegian           False    False    False    False    True     True     \n20127  us-ascii                  False    False    True     True     True     True     \n20261  x-cp20261                 False    False    False    False    False    True     \n20269  x-cp20269                 False    False    False    False    True     True     \n20273  IBM273                    False    False    False    False    True     True     \n20277  IBM277                    False    False    False    False    True     True     \n20278  IBM278                    False    False    False    False    True     True     \n20280  IBM280                    False    False    False    False    True     True     \n20284  IBM284                    False    False    False    False    True     True     \n20285  IBM285                    False    False    False    False    True     True     \n20290  IBM290                    False    False    False    False    True     True     \n20297  IBM297                    False    False    False    False    True     True     \n20420  IBM420                    False    False    False    False    True     True     \n20423  IBM423                    False    False    False    False    True     True     \n20424  IBM424                    False    False    False    False    True     True     \n20833  x-EBCDIC-KoreanExtended   False    False    False    False    True     True     \n20838  IBM-Thai                  False    False    False    False    True     True     \n20866  koi8-r                    True     True     True     True     True     True     \n20871  IBM871                    False    False    False    False    True     True     \n20880  IBM880                    False    False    False    False    True     True     \n20905  IBM905                    False    False    False    False    True     True     \n20924  IBM00924                  False    False    False    False    True     True     \n20932  EUC-JP                    False    False    False    False    False    True     \n20936  x-cp20936                 False    False    False    False    False    True     \n20949  x-cp20949                 False    False    False    False    False    True     \n21025  cp1025                    False    False    False    False    True     True     \n21866  koi8-u                    True     True     True     True     True     True     \n28591  iso-8859-1                True     True     True     True     True     True     \n28592  iso-8859-2                True     True     True     True     True     True     \n28593  iso-8859-3                False    False    True     True     True     True     \n28594  iso-8859-4                True     True     True     True     True     True     \n28595  iso-8859-5                True     True     True     True     True     True     \n28596  iso-8859-6                True     True     True     True     True     True     \n28597  iso-8859-7                True     True     True     True     True     True     \n28598  iso-8859-8                True     True     False    False    True     True     \n28599  iso-8859-9                True     True     True     True     True     True     \n28603  iso-8859-13               False    False    True     True     True     True     \n28605  iso-8859-15               False    True     True     True     True     True     \n29001  x-Europa                  False    False    False    False    True     True     \n38598  iso-8859-8-i              True     True     True     True     True     True     \n50220  iso-2022-jp               False    False    True     True     False    True     \n50221  csISO2022JP               False    True     True     True     False    True     \n50222  iso-2022-jp               False    False    False    False    False    True     \n50225  iso-2022-kr               False    False    True     False    False    True     \n50227  x-cp50227                 False    False    False    False    False    True     \n51932  euc-jp                    True     True     True     True     False    True     \n51936  EUC-CN                    False    False    False    False    False    True     \n51949  euc-kr                    False    False    True     True     False    True     \n52936  hz-gb-2312                True     True     True     True     False    True     \n54936  GB18030                   True     True     True     True     False    True     \n57002  x-iscii-de                False    False    False    False    False    True     \n57003  x-iscii-be                False    False    False    False    False    True     \n57004  x-iscii-ta                False    False    False    False    False    True     \n57005  x-iscii-te                False    False    False    False    False    True     \n57006  x-iscii-as                False    False    False    False    False    True     \n57007  x-iscii-or                False    False    False    False    False    True     \n57008  x-iscii-ka                False    False    False    False    False    True     \n57009  x-iscii-ma                False    False    False    False    False    True     \n57010  x-iscii-gu                False    False    False    False    False    True     \n57011  x-iscii-pa                False    False    False    False    False    True     \n65000  utf-7                     False    False    True     True     False    True     \n65001  utf-8                     True     True     True     True     False    True     \n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.Encoding.IsProps#1\">using namespace System;\nusing namespace System::Text;\nint main()\n{\n   \n   // Print the header.\n   Console::Write( &quot;CodePage identifier and name     &quot; );\n   Console::Write( &quot;BrDisp   BrSave   &quot; );\n   Console::Write( &quot;MNDisp   MNSave   &quot; );\n   Console::WriteLine( &quot;1-Byte   ReadOnly &quot; );\n   \n   // For every encoding, get the property values.\n   System::Collections::IEnumerator^ myEnum = Encoding::GetEncodings()-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      EncodingInfo ^ ei = safe_cast&lt;EncodingInfo ^&gt;(myEnum-&gt;Current);\n      Encoding^ e = ei-&gt;GetEncoding();\n      Console::Write( &quot;{0,-6} {1,-25} &quot;, ei-&gt;CodePage, ei-&gt;Name );\n      Console::Write( &quot;{0,-8} {1,-8} &quot;, e-&gt;IsBrowserDisplay, e-&gt;IsBrowserSave );\n      Console::Write( &quot;{0,-8} {1,-8} &quot;, e-&gt;IsMailNewsDisplay, e-&gt;IsMailNewsSave );\n      Console::WriteLine( &quot;{0,-8} {1,-8} &quot;, e-&gt;IsSingleByte, e-&gt;IsReadOnly );\n   }\n}\n\n/* \nThis code produces the following output.\n\nCodePage identifier and name     BrDisp   BrSave   MNDisp   MNSave   1-Byte   ReadOnly \n37     IBM037                    False    False    False    False    True     True     \n437    IBM437                    False    False    False    False    True     True     \n500    IBM500                    False    False    False    False    True     True     \n708    ASMO-708                  True     True     False    False    True     True     \n720    DOS-720                   True     True     False    False    True     True     \n737    ibm737                    False    False    False    False    True     True     \n775    ibm775                    False    False    False    False    True     True     \n850    ibm850                    False    False    False    False    True     True     \n852    ibm852                    True     True     False    False    True     True     \n855    IBM855                    False    False    False    False    True     True     \n857    ibm857                    False    False    False    False    True     True     \n858    IBM00858                  False    False    False    False    True     True     \n860    IBM860                    False    False    False    False    True     True     \n861    ibm861                    False    False    False    False    True     True     \n862    DOS-862                   True     True     False    False    True     True     \n863    IBM863                    False    False    False    False    True     True     \n864    IBM864                    False    False    False    False    True     True     \n865    IBM865                    False    False    False    False    True     True     \n866    cp866                     True     True     False    False    True     True     \n869    ibm869                    False    False    False    False    True     True     \n870    IBM870                    False    False    False    False    True     True     \n874    windows-874               True     True     True     True     True     True     \n875    cp875                     False    False    False    False    True     True     \n932    shift_jis                 True     True     True     True     False    True     \n936    gb2312                    True     True     True     True     False    True     \n949    ks_c_5601-1987            True     True     True     True     False    True     \n950    big5                      True     True     True     True     False    True     \n1026   IBM1026                   False    False    False    False    True     True     \n1047   IBM01047                  False    False    False    False    True     True     \n1140   IBM01140                  False    False    False    False    True     True     \n1141   IBM01141                  False    False    False    False    True     True     \n1142   IBM01142                  False    False    False    False    True     True     \n1143   IBM01143                  False    False    False    False    True     True     \n1144   IBM01144                  False    False    False    False    True     True     \n1145   IBM01145                  False    False    False    False    True     True     \n1146   IBM01146                  False    False    False    False    True     True     \n1147   IBM01147                  False    False    False    False    True     True     \n1148   IBM01148                  False    False    False    False    True     True     \n1149   IBM01149                  False    False    False    False    True     True     \n1200   utf-16                    False    True     False    False    False    True     \n1201   unicodeFFFE               False    False    False    False    False    True     \n1250   windows-1250              True     True     True     True     True     True     \n1251   windows-1251              True     True     True     True     True     True     \n1252   Windows-1252              True     True     True     True     True     True     \n1253   windows-1253              True     True     True     True     True     True     \n1254   windows-1254              True     True     True     True     True     True     \n1255   windows-1255              True     True     True     True     True     True     \n1256   windows-1256              True     True     True     True     True     True     \n1257   windows-1257              True     True     True     True     True     True     \n1258   windows-1258              True     True     True     True     True     True     \n1361   Johab                     False    False    False    False    False    True     \n10000  macintosh                 False    False    False    False    True     True     \n10001  x-mac-japanese            False    False    False    False    False    True     \n10002  x-mac-chinesetrad         False    False    False    False    False    True     \n10003  x-mac-korean              False    False    False    False    False    True     \n10004  x-mac-arabic              False    False    False    False    True     True     \n10005  x-mac-hebrew              False    False    False    False    True     True     \n10006  x-mac-greek               False    False    False    False    True     True     \n10007  x-mac-cyrillic            False    False    False    False    True     True     \n10008  x-mac-chinesesimp         False    False    False    False    False    True     \n10010  x-mac-romanian            False    False    False    False    True     True     \n10017  x-mac-ukrainian           False    False    False    False    True     True     \n10021  x-mac-thai                False    False    False    False    True     True     \n10029  x-mac-ce                  False    False    False    False    True     True     \n10079  x-mac-icelandic           False    False    False    False    True     True     \n10081  x-mac-turkish             False    False    False    False    True     True     \n10082  x-mac-croatian            False    False    False    False    True     True     \n12000  utf-32                    False    False    False    False    False    True     \n12001  utf-32BE                  False    False    False    False    False    True     \n20000  x-Chinese-CNS             False    False    False    False    False    True     \n20001  x-cp20001                 False    False    False    False    False    True     \n20002  x-Chinese-Eten            False    False    False    False    False    True     \n20003  x-cp20003                 False    False    False    False    False    True     \n20004  x-cp20004                 False    False    False    False    False    True     \n20005  x-cp20005                 False    False    False    False    False    True     \n20105  x-IA5                     False    False    False    False    True     True     \n20106  x-IA5-German              False    False    False    False    True     True     \n20107  x-IA5-Swedish             False    False    False    False    True     True     \n20108  x-IA5-Norwegian           False    False    False    False    True     True     \n20127  us-ascii                  False    False    True     True     True     True     \n20261  x-cp20261                 False    False    False    False    False    True     \n20269  x-cp20269                 False    False    False    False    True     True     \n20273  IBM273                    False    False    False    False    True     True     \n20277  IBM277                    False    False    False    False    True     True     \n20278  IBM278                    False    False    False    False    True     True     \n20280  IBM280                    False    False    False    False    True     True     \n20284  IBM284                    False    False    False    False    True     True     \n20285  IBM285                    False    False    False    False    True     True     \n20290  IBM290                    False    False    False    False    True     True     \n20297  IBM297                    False    False    False    False    True     True     \n20420  IBM420                    False    False    False    False    True     True     \n20423  IBM423                    False    False    False    False    True     True     \n20424  IBM424                    False    False    False    False    True     True     \n20833  x-EBCDIC-KoreanExtended   False    False    False    False    True     True     \n20838  IBM-Thai                  False    False    False    False    True     True     \n20866  koi8-r                    True     True     True     True     True     True     \n20871  IBM871                    False    False    False    False    True     True     \n20880  IBM880                    False    False    False    False    True     True     \n20905  IBM905                    False    False    False    False    True     True     \n20924  IBM00924                  False    False    False    False    True     True     \n20932  EUC-JP                    False    False    False    False    False    True     \n20936  x-cp20936                 False    False    False    False    False    True     \n20949  x-cp20949                 False    False    False    False    False    True     \n21025  cp1025                    False    False    False    False    True     True     \n21866  koi8-u                    True     True     True     True     True     True     \n28591  iso-8859-1                True     True     True     True     True     True     \n28592  iso-8859-2                True     True     True     True     True     True     \n28593  iso-8859-3                False    False    True     True     True     True     \n28594  iso-8859-4                True     True     True     True     True     True     \n28595  iso-8859-5                True     True     True     True     True     True     \n28596  iso-8859-6                True     True     True     True     True     True     \n28597  iso-8859-7                True     True     True     True     True     True     \n28598  iso-8859-8                True     True     False    False    True     True     \n28599  iso-8859-9                True     True     True     True     True     True     \n28603  iso-8859-13               False    False    True     True     True     True     \n28605  iso-8859-15               False    True     True     True     True     True     \n29001  x-Europa                  False    False    False    False    True     True     \n38598  iso-8859-8-i              True     True     True     True     True     True     \n50220  iso-2022-jp               False    False    True     True     False    True     \n50221  csISO2022JP               False    True     True     True     False    True     \n50222  iso-2022-jp               False    False    False    False    False    True     \n50225  iso-2022-kr               False    False    True     False    False    True     \n50227  x-cp50227                 False    False    False    False    False    True     \n51932  euc-jp                    True     True     True     True     False    True     \n51936  EUC-CN                    False    False    False    False    False    True     \n51949  euc-kr                    False    False    True     True     False    True     \n52936  hz-gb-2312                True     True     True     True     False    True     \n54936  GB18030                   True     True     True     True     False    True     \n57002  x-iscii-de                False    False    False    False    False    True     \n57003  x-iscii-be                False    False    False    False    False    True     \n57004  x-iscii-ta                False    False    False    False    False    True     \n57005  x-iscii-te                False    False    False    False    False    True     \n57006  x-iscii-as                False    False    False    False    False    True     \n57007  x-iscii-or                False    False    False    False    False    True     \n57008  x-iscii-ka                False    False    False    False    False    True     \n57009  x-iscii-ma                False    False    False    False    False    True     \n57010  x-iscii-gu                False    False    False    False    False    True     \n57011  x-iscii-pa                False    False    False    False    False    True     \n65000  utf-7                     False    False    True     True     False    True     \n65001  utf-8                     True     True     True     True     False    True     \n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.Encoding.IsProps#1\">Imports System\nImports System.Text\n\nPublic Class SamplesEncoding   \n\n   Public Shared Sub Main()\n\n      &#39; Print the header.\n      Console.Write(&quot;CodePage identifier and name     &quot;)\n      Console.Write(&quot;BrDisp   BrSave   &quot;)\n      Console.Write(&quot;MNDisp   MNSave   &quot;)\n      Console.WriteLine(&quot;1-Byte   ReadOnly &quot;)\n\n      &#39; For every encoding, get the property values.\n      Dim ei As EncodingInfo\n      For Each ei In  Encoding.GetEncodings()\n         Dim e As Encoding = ei.GetEncoding()\n         \n         Console.Write(&quot;{0,-6} {1,-25} &quot;, ei.CodePage, ei.Name)\n         Console.Write(&quot;{0,-8} {1,-8} &quot;, e.IsBrowserDisplay, e.IsBrowserSave)\n         Console.Write(&quot;{0,-8} {1,-8} &quot;, e.IsMailNewsDisplay, e.IsMailNewsSave)\n         Console.WriteLine(&quot;{0,-8} {1,-8} &quot;, e.IsSingleByte, e.IsReadOnly)\n      Next ei\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesEncoding\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;CodePage identifier and name     BrDisp   BrSave   MNDisp   MNSave   1-Byte   ReadOnly \n&#39;37     IBM037                    False    False    False    False    True     True     \n&#39;437    IBM437                    False    False    False    False    True     True     \n&#39;500    IBM500                    False    False    False    False    True     True     \n&#39;708    ASMO-708                  True     True     False    False    True     True     \n&#39;720    DOS-720                   True     True     False    False    True     True     \n&#39;737    ibm737                    False    False    False    False    True     True     \n&#39;775    ibm775                    False    False    False    False    True     True     \n&#39;850    ibm850                    False    False    False    False    True     True     \n&#39;852    ibm852                    True     True     False    False    True     True     \n&#39;855    IBM855                    False    False    False    False    True     True     \n&#39;857    ibm857                    False    False    False    False    True     True     \n&#39;858    IBM00858                  False    False    False    False    True     True     \n&#39;860    IBM860                    False    False    False    False    True     True     \n&#39;861    ibm861                    False    False    False    False    True     True     \n&#39;862    DOS-862                   True     True     False    False    True     True     \n&#39;863    IBM863                    False    False    False    False    True     True     \n&#39;864    IBM864                    False    False    False    False    True     True     \n&#39;865    IBM865                    False    False    False    False    True     True     \n&#39;866    cp866                     True     True     False    False    True     True     \n&#39;869    ibm869                    False    False    False    False    True     True     \n&#39;870    IBM870                    False    False    False    False    True     True     \n&#39;874    windows-874               True     True     True     True     True     True     \n&#39;875    cp875                     False    False    False    False    True     True     \n&#39;932    shift_jis                 True     True     True     True     False    True     \n&#39;936    gb2312                    True     True     True     True     False    True     \n&#39;949    ks_c_5601-1987            True     True     True     True     False    True     \n&#39;950    big5                      True     True     True     True     False    True     \n&#39;1026   IBM1026                   False    False    False    False    True     True     \n&#39;1047   IBM01047                  False    False    False    False    True     True     \n&#39;1140   IBM01140                  False    False    False    False    True     True     \n&#39;1141   IBM01141                  False    False    False    False    True     True     \n&#39;1142   IBM01142                  False    False    False    False    True     True     \n&#39;1143   IBM01143                  False    False    False    False    True     True     \n&#39;1144   IBM01144                  False    False    False    False    True     True     \n&#39;1145   IBM01145                  False    False    False    False    True     True     \n&#39;1146   IBM01146                  False    False    False    False    True     True     \n&#39;1147   IBM01147                  False    False    False    False    True     True     \n&#39;1148   IBM01148                  False    False    False    False    True     True     \n&#39;1149   IBM01149                  False    False    False    False    True     True     \n&#39;1200   utf-16                    False    True     False    False    False    True     \n&#39;1201   unicodeFFFE               False    False    False    False    False    True     \n&#39;1250   windows-1250              True     True     True     True     True     True     \n&#39;1251   windows-1251              True     True     True     True     True     True     \n&#39;1252   Windows-1252              True     True     True     True     True     True     \n&#39;1253   windows-1253              True     True     True     True     True     True     \n&#39;1254   windows-1254              True     True     True     True     True     True     \n&#39;1255   windows-1255              True     True     True     True     True     True     \n&#39;1256   windows-1256              True     True     True     True     True     True     \n&#39;1257   windows-1257              True     True     True     True     True     True     \n&#39;1258   windows-1258              True     True     True     True     True     True     \n&#39;1361   Johab                     False    False    False    False    False    True     \n&#39;10000  macintosh                 False    False    False    False    True     True     \n&#39;10001  x-mac-japanese            False    False    False    False    False    True     \n&#39;10002  x-mac-chinesetrad         False    False    False    False    False    True     \n&#39;10003  x-mac-korean              False    False    False    False    False    True     \n&#39;10004  x-mac-arabic              False    False    False    False    True     True     \n&#39;10005  x-mac-hebrew              False    False    False    False    True     True     \n&#39;10006  x-mac-greek               False    False    False    False    True     True     \n&#39;10007  x-mac-cyrillic            False    False    False    False    True     True     \n&#39;10008  x-mac-chinesesimp         False    False    False    False    False    True     \n&#39;10010  x-mac-romanian            False    False    False    False    True     True     \n&#39;10017  x-mac-ukrainian           False    False    False    False    True     True     \n&#39;10021  x-mac-thai                False    False    False    False    True     True     \n&#39;10029  x-mac-ce                  False    False    False    False    True     True     \n&#39;10079  x-mac-icelandic           False    False    False    False    True     True     \n&#39;10081  x-mac-turkish             False    False    False    False    True     True     \n&#39;10082  x-mac-croatian            False    False    False    False    True     True     \n&#39;12000  utf-32                    False    False    False    False    False    True     \n&#39;12001  utf-32BE                  False    False    False    False    False    True     \n&#39;20000  x-Chinese-CNS             False    False    False    False    False    True     \n&#39;20001  x-cp20001                 False    False    False    False    False    True     \n&#39;20002  x-Chinese-Eten            False    False    False    False    False    True     \n&#39;20003  x-cp20003                 False    False    False    False    False    True     \n&#39;20004  x-cp20004                 False    False    False    False    False    True     \n&#39;20005  x-cp20005                 False    False    False    False    False    True     \n&#39;20105  x-IA5                     False    False    False    False    True     True     \n&#39;20106  x-IA5-German              False    False    False    False    True     True     \n&#39;20107  x-IA5-Swedish             False    False    False    False    True     True     \n&#39;20108  x-IA5-Norwegian           False    False    False    False    True     True     \n&#39;20127  us-ascii                  False    False    True     True     True     True     \n&#39;20261  x-cp20261                 False    False    False    False    False    True     \n&#39;20269  x-cp20269                 False    False    False    False    True     True     \n&#39;20273  IBM273                    False    False    False    False    True     True     \n&#39;20277  IBM277                    False    False    False    False    True     True     \n&#39;20278  IBM278                    False    False    False    False    True     True     \n&#39;20280  IBM280                    False    False    False    False    True     True     \n&#39;20284  IBM284                    False    False    False    False    True     True     \n&#39;20285  IBM285                    False    False    False    False    True     True     \n&#39;20290  IBM290                    False    False    False    False    True     True     \n&#39;20297  IBM297                    False    False    False    False    True     True     \n&#39;20420  IBM420                    False    False    False    False    True     True     \n&#39;20423  IBM423                    False    False    False    False    True     True     \n&#39;20424  IBM424                    False    False    False    False    True     True     \n&#39;20833  x-EBCDIC-KoreanExtended   False    False    False    False    True     True     \n&#39;20838  IBM-Thai                  False    False    False    False    True     True     \n&#39;20866  koi8-r                    True     True     True     True     True     True     \n&#39;20871  IBM871                    False    False    False    False    True     True     \n&#39;20880  IBM880                    False    False    False    False    True     True     \n&#39;20905  IBM905                    False    False    False    False    True     True     \n&#39;20924  IBM00924                  False    False    False    False    True     True     \n&#39;20932  EUC-JP                    False    False    False    False    False    True     \n&#39;20936  x-cp20936                 False    False    False    False    False    True     \n&#39;20949  x-cp20949                 False    False    False    False    False    True     \n&#39;21025  cp1025                    False    False    False    False    True     True     \n&#39;21866  koi8-u                    True     True     True     True     True     True     \n&#39;28591  iso-8859-1                True     True     True     True     True     True     \n&#39;28592  iso-8859-2                True     True     True     True     True     True     \n&#39;28593  iso-8859-3                False    False    True     True     True     True     \n&#39;28594  iso-8859-4                True     True     True     True     True     True     \n&#39;28595  iso-8859-5                True     True     True     True     True     True     \n&#39;28596  iso-8859-6                True     True     True     True     True     True     \n&#39;28597  iso-8859-7                True     True     True     True     True     True     \n&#39;28598  iso-8859-8                True     True     False    False    True     True     \n&#39;28599  iso-8859-9                True     True     True     True     True     True     \n&#39;28603  iso-8859-13               False    False    True     True     True     True     \n&#39;28605  iso-8859-15               False    True     True     True     True     True     \n&#39;29001  x-Europa                  False    False    False    False    True     True     \n&#39;38598  iso-8859-8-i              True     True     True     True     True     True     \n&#39;50220  iso-2022-jp               False    False    True     True     False    True     \n&#39;50221  csISO2022JP               False    True     True     True     False    True     \n&#39;50222  iso-2022-jp               False    False    False    False    False    True     \n&#39;50225  iso-2022-kr               False    False    True     False    False    True     \n&#39;50227  x-cp50227                 False    False    False    False    False    True     \n&#39;51932  euc-jp                    True     True     True     True     False    True     \n&#39;51936  EUC-CN                    False    False    False    False    False    True     \n&#39;51949  euc-kr                    False    False    True     True     False    True     \n&#39;52936  hz-gb-2312                True     True     True     True     False    True     \n&#39;54936  GB18030                   True     True     True     True     False    True     \n&#39;57002  x-iscii-de                False    False    False    False    False    True     \n&#39;57003  x-iscii-be                False    False    False    False    False    True     \n&#39;57004  x-iscii-ta                False    False    False    False    False    True     \n&#39;57005  x-iscii-te                False    False    False    False    False    True     \n&#39;57006  x-iscii-as                False    False    False    False    False    True     \n&#39;57007  x-iscii-or                False    False    False    False    False    True     \n&#39;57008  x-iscii-ka                False    False    False    False    False    True     \n&#39;57009  x-iscii-ma                False    False    False    False    False    True     \n&#39;57010  x-iscii-gu                False    False    False    False    False    True     \n&#39;57011  x-iscii-pa                False    False    False    False    False    True     \n&#39;65000  utf-7                     False    False    True     True     False    True     \n&#39;65001  utf-8                     True     True     True     True     False    True     \n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_IsMailNewsDisplay\">\r\n    \r\n            <a id=\"System_Text_Encoding_IsMailNewsDisplay_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsMailNewsDisplay</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets a value indicating whether the current encoding can be used by mail and news clients for displaying content.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool IsMailNewsDisplay { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> can be used by mail and news clients for displaying content; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example checks the values of the Boolean properties of each encoding.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.Encoding.IsProps#1\">using System;\nusing System.Text;\n\npublic class SamplesEncoding  {\n\n   public static void Main()  {\n\n      // Print the header.\n      Console.Write( &quot;CodePage identifier and name     &quot; );\n      Console.Write( &quot;BrDisp   BrSave   &quot; );\n      Console.Write( &quot;MNDisp   MNSave   &quot; );\n      Console.WriteLine( &quot;1-Byte   ReadOnly &quot; );\n\n      // For every encoding, get the property values.\n      foreach( EncodingInfo ei in Encoding.GetEncodings() )  {\n         Encoding e = ei.GetEncoding();\n\n         Console.Write( &quot;{0,-6} {1,-25} &quot;, ei.CodePage, ei.Name );\n         Console.Write( &quot;{0,-8} {1,-8} &quot;, e.IsBrowserDisplay, e.IsBrowserSave );\n         Console.Write( &quot;{0,-8} {1,-8} &quot;, e.IsMailNewsDisplay, e.IsMailNewsSave );\n         Console.WriteLine( &quot;{0,-8} {1,-8} &quot;, e.IsSingleByte, e.IsReadOnly );\n      }\n\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nCodePage identifier and name     BrDisp   BrSave   MNDisp   MNSave   1-Byte   ReadOnly \n37     IBM037                    False    False    False    False    True     True     \n437    IBM437                    False    False    False    False    True     True     \n500    IBM500                    False    False    False    False    True     True     \n708    ASMO-708                  True     True     False    False    True     True     \n720    DOS-720                   True     True     False    False    True     True     \n737    ibm737                    False    False    False    False    True     True     \n775    ibm775                    False    False    False    False    True     True     \n850    ibm850                    False    False    False    False    True     True     \n852    ibm852                    True     True     False    False    True     True     \n855    IBM855                    False    False    False    False    True     True     \n857    ibm857                    False    False    False    False    True     True     \n858    IBM00858                  False    False    False    False    True     True     \n860    IBM860                    False    False    False    False    True     True     \n861    ibm861                    False    False    False    False    True     True     \n862    DOS-862                   True     True     False    False    True     True     \n863    IBM863                    False    False    False    False    True     True     \n864    IBM864                    False    False    False    False    True     True     \n865    IBM865                    False    False    False    False    True     True     \n866    cp866                     True     True     False    False    True     True     \n869    ibm869                    False    False    False    False    True     True     \n870    IBM870                    False    False    False    False    True     True     \n874    windows-874               True     True     True     True     True     True     \n875    cp875                     False    False    False    False    True     True     \n932    shift_jis                 True     True     True     True     False    True     \n936    gb2312                    True     True     True     True     False    True     \n949    ks_c_5601-1987            True     True     True     True     False    True     \n950    big5                      True     True     True     True     False    True     \n1026   IBM1026                   False    False    False    False    True     True     \n1047   IBM01047                  False    False    False    False    True     True     \n1140   IBM01140                  False    False    False    False    True     True     \n1141   IBM01141                  False    False    False    False    True     True     \n1142   IBM01142                  False    False    False    False    True     True     \n1143   IBM01143                  False    False    False    False    True     True     \n1144   IBM01144                  False    False    False    False    True     True     \n1145   IBM01145                  False    False    False    False    True     True     \n1146   IBM01146                  False    False    False    False    True     True     \n1147   IBM01147                  False    False    False    False    True     True     \n1148   IBM01148                  False    False    False    False    True     True     \n1149   IBM01149                  False    False    False    False    True     True     \n1200   utf-16                    False    True     False    False    False    True     \n1201   unicodeFFFE               False    False    False    False    False    True     \n1250   windows-1250              True     True     True     True     True     True     \n1251   windows-1251              True     True     True     True     True     True     \n1252   Windows-1252              True     True     True     True     True     True     \n1253   windows-1253              True     True     True     True     True     True     \n1254   windows-1254              True     True     True     True     True     True     \n1255   windows-1255              True     True     True     True     True     True     \n1256   windows-1256              True     True     True     True     True     True     \n1257   windows-1257              True     True     True     True     True     True     \n1258   windows-1258              True     True     True     True     True     True     \n1361   Johab                     False    False    False    False    False    True     \n10000  macintosh                 False    False    False    False    True     True     \n10001  x-mac-japanese            False    False    False    False    False    True     \n10002  x-mac-chinesetrad         False    False    False    False    False    True     \n10003  x-mac-korean              False    False    False    False    False    True     \n10004  x-mac-arabic              False    False    False    False    True     True     \n10005  x-mac-hebrew              False    False    False    False    True     True     \n10006  x-mac-greek               False    False    False    False    True     True     \n10007  x-mac-cyrillic            False    False    False    False    True     True     \n10008  x-mac-chinesesimp         False    False    False    False    False    True     \n10010  x-mac-romanian            False    False    False    False    True     True     \n10017  x-mac-ukrainian           False    False    False    False    True     True     \n10021  x-mac-thai                False    False    False    False    True     True     \n10029  x-mac-ce                  False    False    False    False    True     True     \n10079  x-mac-icelandic           False    False    False    False    True     True     \n10081  x-mac-turkish             False    False    False    False    True     True     \n10082  x-mac-croatian            False    False    False    False    True     True     \n12000  utf-32                    False    False    False    False    False    True     \n12001  utf-32BE                  False    False    False    False    False    True     \n20000  x-Chinese-CNS             False    False    False    False    False    True     \n20001  x-cp20001                 False    False    False    False    False    True     \n20002  x-Chinese-Eten            False    False    False    False    False    True     \n20003  x-cp20003                 False    False    False    False    False    True     \n20004  x-cp20004                 False    False    False    False    False    True     \n20005  x-cp20005                 False    False    False    False    False    True     \n20105  x-IA5                     False    False    False    False    True     True     \n20106  x-IA5-German              False    False    False    False    True     True     \n20107  x-IA5-Swedish             False    False    False    False    True     True     \n20108  x-IA5-Norwegian           False    False    False    False    True     True     \n20127  us-ascii                  False    False    True     True     True     True     \n20261  x-cp20261                 False    False    False    False    False    True     \n20269  x-cp20269                 False    False    False    False    True     True     \n20273  IBM273                    False    False    False    False    True     True     \n20277  IBM277                    False    False    False    False    True     True     \n20278  IBM278                    False    False    False    False    True     True     \n20280  IBM280                    False    False    False    False    True     True     \n20284  IBM284                    False    False    False    False    True     True     \n20285  IBM285                    False    False    False    False    True     True     \n20290  IBM290                    False    False    False    False    True     True     \n20297  IBM297                    False    False    False    False    True     True     \n20420  IBM420                    False    False    False    False    True     True     \n20423  IBM423                    False    False    False    False    True     True     \n20424  IBM424                    False    False    False    False    True     True     \n20833  x-EBCDIC-KoreanExtended   False    False    False    False    True     True     \n20838  IBM-Thai                  False    False    False    False    True     True     \n20866  koi8-r                    True     True     True     True     True     True     \n20871  IBM871                    False    False    False    False    True     True     \n20880  IBM880                    False    False    False    False    True     True     \n20905  IBM905                    False    False    False    False    True     True     \n20924  IBM00924                  False    False    False    False    True     True     \n20932  EUC-JP                    False    False    False    False    False    True     \n20936  x-cp20936                 False    False    False    False    False    True     \n20949  x-cp20949                 False    False    False    False    False    True     \n21025  cp1025                    False    False    False    False    True     True     \n21866  koi8-u                    True     True     True     True     True     True     \n28591  iso-8859-1                True     True     True     True     True     True     \n28592  iso-8859-2                True     True     True     True     True     True     \n28593  iso-8859-3                False    False    True     True     True     True     \n28594  iso-8859-4                True     True     True     True     True     True     \n28595  iso-8859-5                True     True     True     True     True     True     \n28596  iso-8859-6                True     True     True     True     True     True     \n28597  iso-8859-7                True     True     True     True     True     True     \n28598  iso-8859-8                True     True     False    False    True     True     \n28599  iso-8859-9                True     True     True     True     True     True     \n28603  iso-8859-13               False    False    True     True     True     True     \n28605  iso-8859-15               False    True     True     True     True     True     \n29001  x-Europa                  False    False    False    False    True     True     \n38598  iso-8859-8-i              True     True     True     True     True     True     \n50220  iso-2022-jp               False    False    True     True     False    True     \n50221  csISO2022JP               False    True     True     True     False    True     \n50222  iso-2022-jp               False    False    False    False    False    True     \n50225  iso-2022-kr               False    False    True     False    False    True     \n50227  x-cp50227                 False    False    False    False    False    True     \n51932  euc-jp                    True     True     True     True     False    True     \n51936  EUC-CN                    False    False    False    False    False    True     \n51949  euc-kr                    False    False    True     True     False    True     \n52936  hz-gb-2312                True     True     True     True     False    True     \n54936  GB18030                   True     True     True     True     False    True     \n57002  x-iscii-de                False    False    False    False    False    True     \n57003  x-iscii-be                False    False    False    False    False    True     \n57004  x-iscii-ta                False    False    False    False    False    True     \n57005  x-iscii-te                False    False    False    False    False    True     \n57006  x-iscii-as                False    False    False    False    False    True     \n57007  x-iscii-or                False    False    False    False    False    True     \n57008  x-iscii-ka                False    False    False    False    False    True     \n57009  x-iscii-ma                False    False    False    False    False    True     \n57010  x-iscii-gu                False    False    False    False    False    True     \n57011  x-iscii-pa                False    False    False    False    False    True     \n65000  utf-7                     False    False    True     True     False    True     \n65001  utf-8                     True     True     True     True     False    True     \n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.Encoding.IsProps#1\">using namespace System;\nusing namespace System::Text;\nint main()\n{\n   \n   // Print the header.\n   Console::Write( &quot;CodePage identifier and name     &quot; );\n   Console::Write( &quot;BrDisp   BrSave   &quot; );\n   Console::Write( &quot;MNDisp   MNSave   &quot; );\n   Console::WriteLine( &quot;1-Byte   ReadOnly &quot; );\n   \n   // For every encoding, get the property values.\n   System::Collections::IEnumerator^ myEnum = Encoding::GetEncodings()-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      EncodingInfo ^ ei = safe_cast&lt;EncodingInfo ^&gt;(myEnum-&gt;Current);\n      Encoding^ e = ei-&gt;GetEncoding();\n      Console::Write( &quot;{0,-6} {1,-25} &quot;, ei-&gt;CodePage, ei-&gt;Name );\n      Console::Write( &quot;{0,-8} {1,-8} &quot;, e-&gt;IsBrowserDisplay, e-&gt;IsBrowserSave );\n      Console::Write( &quot;{0,-8} {1,-8} &quot;, e-&gt;IsMailNewsDisplay, e-&gt;IsMailNewsSave );\n      Console::WriteLine( &quot;{0,-8} {1,-8} &quot;, e-&gt;IsSingleByte, e-&gt;IsReadOnly );\n   }\n}\n\n/* \nThis code produces the following output.\n\nCodePage identifier and name     BrDisp   BrSave   MNDisp   MNSave   1-Byte   ReadOnly \n37     IBM037                    False    False    False    False    True     True     \n437    IBM437                    False    False    False    False    True     True     \n500    IBM500                    False    False    False    False    True     True     \n708    ASMO-708                  True     True     False    False    True     True     \n720    DOS-720                   True     True     False    False    True     True     \n737    ibm737                    False    False    False    False    True     True     \n775    ibm775                    False    False    False    False    True     True     \n850    ibm850                    False    False    False    False    True     True     \n852    ibm852                    True     True     False    False    True     True     \n855    IBM855                    False    False    False    False    True     True     \n857    ibm857                    False    False    False    False    True     True     \n858    IBM00858                  False    False    False    False    True     True     \n860    IBM860                    False    False    False    False    True     True     \n861    ibm861                    False    False    False    False    True     True     \n862    DOS-862                   True     True     False    False    True     True     \n863    IBM863                    False    False    False    False    True     True     \n864    IBM864                    False    False    False    False    True     True     \n865    IBM865                    False    False    False    False    True     True     \n866    cp866                     True     True     False    False    True     True     \n869    ibm869                    False    False    False    False    True     True     \n870    IBM870                    False    False    False    False    True     True     \n874    windows-874               True     True     True     True     True     True     \n875    cp875                     False    False    False    False    True     True     \n932    shift_jis                 True     True     True     True     False    True     \n936    gb2312                    True     True     True     True     False    True     \n949    ks_c_5601-1987            True     True     True     True     False    True     \n950    big5                      True     True     True     True     False    True     \n1026   IBM1026                   False    False    False    False    True     True     \n1047   IBM01047                  False    False    False    False    True     True     \n1140   IBM01140                  False    False    False    False    True     True     \n1141   IBM01141                  False    False    False    False    True     True     \n1142   IBM01142                  False    False    False    False    True     True     \n1143   IBM01143                  False    False    False    False    True     True     \n1144   IBM01144                  False    False    False    False    True     True     \n1145   IBM01145                  False    False    False    False    True     True     \n1146   IBM01146                  False    False    False    False    True     True     \n1147   IBM01147                  False    False    False    False    True     True     \n1148   IBM01148                  False    False    False    False    True     True     \n1149   IBM01149                  False    False    False    False    True     True     \n1200   utf-16                    False    True     False    False    False    True     \n1201   unicodeFFFE               False    False    False    False    False    True     \n1250   windows-1250              True     True     True     True     True     True     \n1251   windows-1251              True     True     True     True     True     True     \n1252   Windows-1252              True     True     True     True     True     True     \n1253   windows-1253              True     True     True     True     True     True     \n1254   windows-1254              True     True     True     True     True     True     \n1255   windows-1255              True     True     True     True     True     True     \n1256   windows-1256              True     True     True     True     True     True     \n1257   windows-1257              True     True     True     True     True     True     \n1258   windows-1258              True     True     True     True     True     True     \n1361   Johab                     False    False    False    False    False    True     \n10000  macintosh                 False    False    False    False    True     True     \n10001  x-mac-japanese            False    False    False    False    False    True     \n10002  x-mac-chinesetrad         False    False    False    False    False    True     \n10003  x-mac-korean              False    False    False    False    False    True     \n10004  x-mac-arabic              False    False    False    False    True     True     \n10005  x-mac-hebrew              False    False    False    False    True     True     \n10006  x-mac-greek               False    False    False    False    True     True     \n10007  x-mac-cyrillic            False    False    False    False    True     True     \n10008  x-mac-chinesesimp         False    False    False    False    False    True     \n10010  x-mac-romanian            False    False    False    False    True     True     \n10017  x-mac-ukrainian           False    False    False    False    True     True     \n10021  x-mac-thai                False    False    False    False    True     True     \n10029  x-mac-ce                  False    False    False    False    True     True     \n10079  x-mac-icelandic           False    False    False    False    True     True     \n10081  x-mac-turkish             False    False    False    False    True     True     \n10082  x-mac-croatian            False    False    False    False    True     True     \n12000  utf-32                    False    False    False    False    False    True     \n12001  utf-32BE                  False    False    False    False    False    True     \n20000  x-Chinese-CNS             False    False    False    False    False    True     \n20001  x-cp20001                 False    False    False    False    False    True     \n20002  x-Chinese-Eten            False    False    False    False    False    True     \n20003  x-cp20003                 False    False    False    False    False    True     \n20004  x-cp20004                 False    False    False    False    False    True     \n20005  x-cp20005                 False    False    False    False    False    True     \n20105  x-IA5                     False    False    False    False    True     True     \n20106  x-IA5-German              False    False    False    False    True     True     \n20107  x-IA5-Swedish             False    False    False    False    True     True     \n20108  x-IA5-Norwegian           False    False    False    False    True     True     \n20127  us-ascii                  False    False    True     True     True     True     \n20261  x-cp20261                 False    False    False    False    False    True     \n20269  x-cp20269                 False    False    False    False    True     True     \n20273  IBM273                    False    False    False    False    True     True     \n20277  IBM277                    False    False    False    False    True     True     \n20278  IBM278                    False    False    False    False    True     True     \n20280  IBM280                    False    False    False    False    True     True     \n20284  IBM284                    False    False    False    False    True     True     \n20285  IBM285                    False    False    False    False    True     True     \n20290  IBM290                    False    False    False    False    True     True     \n20297  IBM297                    False    False    False    False    True     True     \n20420  IBM420                    False    False    False    False    True     True     \n20423  IBM423                    False    False    False    False    True     True     \n20424  IBM424                    False    False    False    False    True     True     \n20833  x-EBCDIC-KoreanExtended   False    False    False    False    True     True     \n20838  IBM-Thai                  False    False    False    False    True     True     \n20866  koi8-r                    True     True     True     True     True     True     \n20871  IBM871                    False    False    False    False    True     True     \n20880  IBM880                    False    False    False    False    True     True     \n20905  IBM905                    False    False    False    False    True     True     \n20924  IBM00924                  False    False    False    False    True     True     \n20932  EUC-JP                    False    False    False    False    False    True     \n20936  x-cp20936                 False    False    False    False    False    True     \n20949  x-cp20949                 False    False    False    False    False    True     \n21025  cp1025                    False    False    False    False    True     True     \n21866  koi8-u                    True     True     True     True     True     True     \n28591  iso-8859-1                True     True     True     True     True     True     \n28592  iso-8859-2                True     True     True     True     True     True     \n28593  iso-8859-3                False    False    True     True     True     True     \n28594  iso-8859-4                True     True     True     True     True     True     \n28595  iso-8859-5                True     True     True     True     True     True     \n28596  iso-8859-6                True     True     True     True     True     True     \n28597  iso-8859-7                True     True     True     True     True     True     \n28598  iso-8859-8                True     True     False    False    True     True     \n28599  iso-8859-9                True     True     True     True     True     True     \n28603  iso-8859-13               False    False    True     True     True     True     \n28605  iso-8859-15               False    True     True     True     True     True     \n29001  x-Europa                  False    False    False    False    True     True     \n38598  iso-8859-8-i              True     True     True     True     True     True     \n50220  iso-2022-jp               False    False    True     True     False    True     \n50221  csISO2022JP               False    True     True     True     False    True     \n50222  iso-2022-jp               False    False    False    False    False    True     \n50225  iso-2022-kr               False    False    True     False    False    True     \n50227  x-cp50227                 False    False    False    False    False    True     \n51932  euc-jp                    True     True     True     True     False    True     \n51936  EUC-CN                    False    False    False    False    False    True     \n51949  euc-kr                    False    False    True     True     False    True     \n52936  hz-gb-2312                True     True     True     True     False    True     \n54936  GB18030                   True     True     True     True     False    True     \n57002  x-iscii-de                False    False    False    False    False    True     \n57003  x-iscii-be                False    False    False    False    False    True     \n57004  x-iscii-ta                False    False    False    False    False    True     \n57005  x-iscii-te                False    False    False    False    False    True     \n57006  x-iscii-as                False    False    False    False    False    True     \n57007  x-iscii-or                False    False    False    False    False    True     \n57008  x-iscii-ka                False    False    False    False    False    True     \n57009  x-iscii-ma                False    False    False    False    False    True     \n57010  x-iscii-gu                False    False    False    False    False    True     \n57011  x-iscii-pa                False    False    False    False    False    True     \n65000  utf-7                     False    False    True     True     False    True     \n65001  utf-8                     True     True     True     True     False    True     \n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.Encoding.IsProps#1\">Imports System\nImports System.Text\n\nPublic Class SamplesEncoding   \n\n   Public Shared Sub Main()\n\n      &#39; Print the header.\n      Console.Write(&quot;CodePage identifier and name     &quot;)\n      Console.Write(&quot;BrDisp   BrSave   &quot;)\n      Console.Write(&quot;MNDisp   MNSave   &quot;)\n      Console.WriteLine(&quot;1-Byte   ReadOnly &quot;)\n\n      &#39; For every encoding, get the property values.\n      Dim ei As EncodingInfo\n      For Each ei In  Encoding.GetEncodings()\n         Dim e As Encoding = ei.GetEncoding()\n         \n         Console.Write(&quot;{0,-6} {1,-25} &quot;, ei.CodePage, ei.Name)\n         Console.Write(&quot;{0,-8} {1,-8} &quot;, e.IsBrowserDisplay, e.IsBrowserSave)\n         Console.Write(&quot;{0,-8} {1,-8} &quot;, e.IsMailNewsDisplay, e.IsMailNewsSave)\n         Console.WriteLine(&quot;{0,-8} {1,-8} &quot;, e.IsSingleByte, e.IsReadOnly)\n      Next ei\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesEncoding\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;CodePage identifier and name     BrDisp   BrSave   MNDisp   MNSave   1-Byte   ReadOnly \n&#39;37     IBM037                    False    False    False    False    True     True     \n&#39;437    IBM437                    False    False    False    False    True     True     \n&#39;500    IBM500                    False    False    False    False    True     True     \n&#39;708    ASMO-708                  True     True     False    False    True     True     \n&#39;720    DOS-720                   True     True     False    False    True     True     \n&#39;737    ibm737                    False    False    False    False    True     True     \n&#39;775    ibm775                    False    False    False    False    True     True     \n&#39;850    ibm850                    False    False    False    False    True     True     \n&#39;852    ibm852                    True     True     False    False    True     True     \n&#39;855    IBM855                    False    False    False    False    True     True     \n&#39;857    ibm857                    False    False    False    False    True     True     \n&#39;858    IBM00858                  False    False    False    False    True     True     \n&#39;860    IBM860                    False    False    False    False    True     True     \n&#39;861    ibm861                    False    False    False    False    True     True     \n&#39;862    DOS-862                   True     True     False    False    True     True     \n&#39;863    IBM863                    False    False    False    False    True     True     \n&#39;864    IBM864                    False    False    False    False    True     True     \n&#39;865    IBM865                    False    False    False    False    True     True     \n&#39;866    cp866                     True     True     False    False    True     True     \n&#39;869    ibm869                    False    False    False    False    True     True     \n&#39;870    IBM870                    False    False    False    False    True     True     \n&#39;874    windows-874               True     True     True     True     True     True     \n&#39;875    cp875                     False    False    False    False    True     True     \n&#39;932    shift_jis                 True     True     True     True     False    True     \n&#39;936    gb2312                    True     True     True     True     False    True     \n&#39;949    ks_c_5601-1987            True     True     True     True     False    True     \n&#39;950    big5                      True     True     True     True     False    True     \n&#39;1026   IBM1026                   False    False    False    False    True     True     \n&#39;1047   IBM01047                  False    False    False    False    True     True     \n&#39;1140   IBM01140                  False    False    False    False    True     True     \n&#39;1141   IBM01141                  False    False    False    False    True     True     \n&#39;1142   IBM01142                  False    False    False    False    True     True     \n&#39;1143   IBM01143                  False    False    False    False    True     True     \n&#39;1144   IBM01144                  False    False    False    False    True     True     \n&#39;1145   IBM01145                  False    False    False    False    True     True     \n&#39;1146   IBM01146                  False    False    False    False    True     True     \n&#39;1147   IBM01147                  False    False    False    False    True     True     \n&#39;1148   IBM01148                  False    False    False    False    True     True     \n&#39;1149   IBM01149                  False    False    False    False    True     True     \n&#39;1200   utf-16                    False    True     False    False    False    True     \n&#39;1201   unicodeFFFE               False    False    False    False    False    True     \n&#39;1250   windows-1250              True     True     True     True     True     True     \n&#39;1251   windows-1251              True     True     True     True     True     True     \n&#39;1252   Windows-1252              True     True     True     True     True     True     \n&#39;1253   windows-1253              True     True     True     True     True     True     \n&#39;1254   windows-1254              True     True     True     True     True     True     \n&#39;1255   windows-1255              True     True     True     True     True     True     \n&#39;1256   windows-1256              True     True     True     True     True     True     \n&#39;1257   windows-1257              True     True     True     True     True     True     \n&#39;1258   windows-1258              True     True     True     True     True     True     \n&#39;1361   Johab                     False    False    False    False    False    True     \n&#39;10000  macintosh                 False    False    False    False    True     True     \n&#39;10001  x-mac-japanese            False    False    False    False    False    True     \n&#39;10002  x-mac-chinesetrad         False    False    False    False    False    True     \n&#39;10003  x-mac-korean              False    False    False    False    False    True     \n&#39;10004  x-mac-arabic              False    False    False    False    True     True     \n&#39;10005  x-mac-hebrew              False    False    False    False    True     True     \n&#39;10006  x-mac-greek               False    False    False    False    True     True     \n&#39;10007  x-mac-cyrillic            False    False    False    False    True     True     \n&#39;10008  x-mac-chinesesimp         False    False    False    False    False    True     \n&#39;10010  x-mac-romanian            False    False    False    False    True     True     \n&#39;10017  x-mac-ukrainian           False    False    False    False    True     True     \n&#39;10021  x-mac-thai                False    False    False    False    True     True     \n&#39;10029  x-mac-ce                  False    False    False    False    True     True     \n&#39;10079  x-mac-icelandic           False    False    False    False    True     True     \n&#39;10081  x-mac-turkish             False    False    False    False    True     True     \n&#39;10082  x-mac-croatian            False    False    False    False    True     True     \n&#39;12000  utf-32                    False    False    False    False    False    True     \n&#39;12001  utf-32BE                  False    False    False    False    False    True     \n&#39;20000  x-Chinese-CNS             False    False    False    False    False    True     \n&#39;20001  x-cp20001                 False    False    False    False    False    True     \n&#39;20002  x-Chinese-Eten            False    False    False    False    False    True     \n&#39;20003  x-cp20003                 False    False    False    False    False    True     \n&#39;20004  x-cp20004                 False    False    False    False    False    True     \n&#39;20005  x-cp20005                 False    False    False    False    False    True     \n&#39;20105  x-IA5                     False    False    False    False    True     True     \n&#39;20106  x-IA5-German              False    False    False    False    True     True     \n&#39;20107  x-IA5-Swedish             False    False    False    False    True     True     \n&#39;20108  x-IA5-Norwegian           False    False    False    False    True     True     \n&#39;20127  us-ascii                  False    False    True     True     True     True     \n&#39;20261  x-cp20261                 False    False    False    False    False    True     \n&#39;20269  x-cp20269                 False    False    False    False    True     True     \n&#39;20273  IBM273                    False    False    False    False    True     True     \n&#39;20277  IBM277                    False    False    False    False    True     True     \n&#39;20278  IBM278                    False    False    False    False    True     True     \n&#39;20280  IBM280                    False    False    False    False    True     True     \n&#39;20284  IBM284                    False    False    False    False    True     True     \n&#39;20285  IBM285                    False    False    False    False    True     True     \n&#39;20290  IBM290                    False    False    False    False    True     True     \n&#39;20297  IBM297                    False    False    False    False    True     True     \n&#39;20420  IBM420                    False    False    False    False    True     True     \n&#39;20423  IBM423                    False    False    False    False    True     True     \n&#39;20424  IBM424                    False    False    False    False    True     True     \n&#39;20833  x-EBCDIC-KoreanExtended   False    False    False    False    True     True     \n&#39;20838  IBM-Thai                  False    False    False    False    True     True     \n&#39;20866  koi8-r                    True     True     True     True     True     True     \n&#39;20871  IBM871                    False    False    False    False    True     True     \n&#39;20880  IBM880                    False    False    False    False    True     True     \n&#39;20905  IBM905                    False    False    False    False    True     True     \n&#39;20924  IBM00924                  False    False    False    False    True     True     \n&#39;20932  EUC-JP                    False    False    False    False    False    True     \n&#39;20936  x-cp20936                 False    False    False    False    False    True     \n&#39;20949  x-cp20949                 False    False    False    False    False    True     \n&#39;21025  cp1025                    False    False    False    False    True     True     \n&#39;21866  koi8-u                    True     True     True     True     True     True     \n&#39;28591  iso-8859-1                True     True     True     True     True     True     \n&#39;28592  iso-8859-2                True     True     True     True     True     True     \n&#39;28593  iso-8859-3                False    False    True     True     True     True     \n&#39;28594  iso-8859-4                True     True     True     True     True     True     \n&#39;28595  iso-8859-5                True     True     True     True     True     True     \n&#39;28596  iso-8859-6                True     True     True     True     True     True     \n&#39;28597  iso-8859-7                True     True     True     True     True     True     \n&#39;28598  iso-8859-8                True     True     False    False    True     True     \n&#39;28599  iso-8859-9                True     True     True     True     True     True     \n&#39;28603  iso-8859-13               False    False    True     True     True     True     \n&#39;28605  iso-8859-15               False    True     True     True     True     True     \n&#39;29001  x-Europa                  False    False    False    False    True     True     \n&#39;38598  iso-8859-8-i              True     True     True     True     True     True     \n&#39;50220  iso-2022-jp               False    False    True     True     False    True     \n&#39;50221  csISO2022JP               False    True     True     True     False    True     \n&#39;50222  iso-2022-jp               False    False    False    False    False    True     \n&#39;50225  iso-2022-kr               False    False    True     False    False    True     \n&#39;50227  x-cp50227                 False    False    False    False    False    True     \n&#39;51932  euc-jp                    True     True     True     True     False    True     \n&#39;51936  EUC-CN                    False    False    False    False    False    True     \n&#39;51949  euc-kr                    False    False    True     True     False    True     \n&#39;52936  hz-gb-2312                True     True     True     True     False    True     \n&#39;54936  GB18030                   True     True     True     True     False    True     \n&#39;57002  x-iscii-de                False    False    False    False    False    True     \n&#39;57003  x-iscii-be                False    False    False    False    False    True     \n&#39;57004  x-iscii-ta                False    False    False    False    False    True     \n&#39;57005  x-iscii-te                False    False    False    False    False    True     \n&#39;57006  x-iscii-as                False    False    False    False    False    True     \n&#39;57007  x-iscii-or                False    False    False    False    False    True     \n&#39;57008  x-iscii-ka                False    False    False    False    False    True     \n&#39;57009  x-iscii-ma                False    False    False    False    False    True     \n&#39;57010  x-iscii-gu                False    False    False    False    False    True     \n&#39;57011  x-iscii-pa                False    False    False    False    False    True     \n&#39;65000  utf-7                     False    False    True     True     False    True     \n&#39;65001  utf-8                     True     True     True     True     False    True     \n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_IsMailNewsSave\">\r\n    \r\n            <a id=\"System_Text_Encoding_IsMailNewsSave_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsMailNewsSave</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets a value indicating whether the current encoding can be used by mail and news clients for saving content.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool IsMailNewsSave { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> can be used by mail and news clients for saving content; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example checks the values of the Boolean properties of each encoding.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.Encoding.IsProps#1\">using System;\nusing System.Text;\n\npublic class SamplesEncoding  {\n\n   public static void Main()  {\n\n      // Print the header.\n      Console.Write( &quot;CodePage identifier and name     &quot; );\n      Console.Write( &quot;BrDisp   BrSave   &quot; );\n      Console.Write( &quot;MNDisp   MNSave   &quot; );\n      Console.WriteLine( &quot;1-Byte   ReadOnly &quot; );\n\n      // For every encoding, get the property values.\n      foreach( EncodingInfo ei in Encoding.GetEncodings() )  {\n         Encoding e = ei.GetEncoding();\n\n         Console.Write( &quot;{0,-6} {1,-25} &quot;, ei.CodePage, ei.Name );\n         Console.Write( &quot;{0,-8} {1,-8} &quot;, e.IsBrowserDisplay, e.IsBrowserSave );\n         Console.Write( &quot;{0,-8} {1,-8} &quot;, e.IsMailNewsDisplay, e.IsMailNewsSave );\n         Console.WriteLine( &quot;{0,-8} {1,-8} &quot;, e.IsSingleByte, e.IsReadOnly );\n      }\n\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nCodePage identifier and name     BrDisp   BrSave   MNDisp   MNSave   1-Byte   ReadOnly \n37     IBM037                    False    False    False    False    True     True     \n437    IBM437                    False    False    False    False    True     True     \n500    IBM500                    False    False    False    False    True     True     \n708    ASMO-708                  True     True     False    False    True     True     \n720    DOS-720                   True     True     False    False    True     True     \n737    ibm737                    False    False    False    False    True     True     \n775    ibm775                    False    False    False    False    True     True     \n850    ibm850                    False    False    False    False    True     True     \n852    ibm852                    True     True     False    False    True     True     \n855    IBM855                    False    False    False    False    True     True     \n857    ibm857                    False    False    False    False    True     True     \n858    IBM00858                  False    False    False    False    True     True     \n860    IBM860                    False    False    False    False    True     True     \n861    ibm861                    False    False    False    False    True     True     \n862    DOS-862                   True     True     False    False    True     True     \n863    IBM863                    False    False    False    False    True     True     \n864    IBM864                    False    False    False    False    True     True     \n865    IBM865                    False    False    False    False    True     True     \n866    cp866                     True     True     False    False    True     True     \n869    ibm869                    False    False    False    False    True     True     \n870    IBM870                    False    False    False    False    True     True     \n874    windows-874               True     True     True     True     True     True     \n875    cp875                     False    False    False    False    True     True     \n932    shift_jis                 True     True     True     True     False    True     \n936    gb2312                    True     True     True     True     False    True     \n949    ks_c_5601-1987            True     True     True     True     False    True     \n950    big5                      True     True     True     True     False    True     \n1026   IBM1026                   False    False    False    False    True     True     \n1047   IBM01047                  False    False    False    False    True     True     \n1140   IBM01140                  False    False    False    False    True     True     \n1141   IBM01141                  False    False    False    False    True     True     \n1142   IBM01142                  False    False    False    False    True     True     \n1143   IBM01143                  False    False    False    False    True     True     \n1144   IBM01144                  False    False    False    False    True     True     \n1145   IBM01145                  False    False    False    False    True     True     \n1146   IBM01146                  False    False    False    False    True     True     \n1147   IBM01147                  False    False    False    False    True     True     \n1148   IBM01148                  False    False    False    False    True     True     \n1149   IBM01149                  False    False    False    False    True     True     \n1200   utf-16                    False    True     False    False    False    True     \n1201   unicodeFFFE               False    False    False    False    False    True     \n1250   windows-1250              True     True     True     True     True     True     \n1251   windows-1251              True     True     True     True     True     True     \n1252   Windows-1252              True     True     True     True     True     True     \n1253   windows-1253              True     True     True     True     True     True     \n1254   windows-1254              True     True     True     True     True     True     \n1255   windows-1255              True     True     True     True     True     True     \n1256   windows-1256              True     True     True     True     True     True     \n1257   windows-1257              True     True     True     True     True     True     \n1258   windows-1258              True     True     True     True     True     True     \n1361   Johab                     False    False    False    False    False    True     \n10000  macintosh                 False    False    False    False    True     True     \n10001  x-mac-japanese            False    False    False    False    False    True     \n10002  x-mac-chinesetrad         False    False    False    False    False    True     \n10003  x-mac-korean              False    False    False    False    False    True     \n10004  x-mac-arabic              False    False    False    False    True     True     \n10005  x-mac-hebrew              False    False    False    False    True     True     \n10006  x-mac-greek               False    False    False    False    True     True     \n10007  x-mac-cyrillic            False    False    False    False    True     True     \n10008  x-mac-chinesesimp         False    False    False    False    False    True     \n10010  x-mac-romanian            False    False    False    False    True     True     \n10017  x-mac-ukrainian           False    False    False    False    True     True     \n10021  x-mac-thai                False    False    False    False    True     True     \n10029  x-mac-ce                  False    False    False    False    True     True     \n10079  x-mac-icelandic           False    False    False    False    True     True     \n10081  x-mac-turkish             False    False    False    False    True     True     \n10082  x-mac-croatian            False    False    False    False    True     True     \n12000  utf-32                    False    False    False    False    False    True     \n12001  utf-32BE                  False    False    False    False    False    True     \n20000  x-Chinese-CNS             False    False    False    False    False    True     \n20001  x-cp20001                 False    False    False    False    False    True     \n20002  x-Chinese-Eten            False    False    False    False    False    True     \n20003  x-cp20003                 False    False    False    False    False    True     \n20004  x-cp20004                 False    False    False    False    False    True     \n20005  x-cp20005                 False    False    False    False    False    True     \n20105  x-IA5                     False    False    False    False    True     True     \n20106  x-IA5-German              False    False    False    False    True     True     \n20107  x-IA5-Swedish             False    False    False    False    True     True     \n20108  x-IA5-Norwegian           False    False    False    False    True     True     \n20127  us-ascii                  False    False    True     True     True     True     \n20261  x-cp20261                 False    False    False    False    False    True     \n20269  x-cp20269                 False    False    False    False    True     True     \n20273  IBM273                    False    False    False    False    True     True     \n20277  IBM277                    False    False    False    False    True     True     \n20278  IBM278                    False    False    False    False    True     True     \n20280  IBM280                    False    False    False    False    True     True     \n20284  IBM284                    False    False    False    False    True     True     \n20285  IBM285                    False    False    False    False    True     True     \n20290  IBM290                    False    False    False    False    True     True     \n20297  IBM297                    False    False    False    False    True     True     \n20420  IBM420                    False    False    False    False    True     True     \n20423  IBM423                    False    False    False    False    True     True     \n20424  IBM424                    False    False    False    False    True     True     \n20833  x-EBCDIC-KoreanExtended   False    False    False    False    True     True     \n20838  IBM-Thai                  False    False    False    False    True     True     \n20866  koi8-r                    True     True     True     True     True     True     \n20871  IBM871                    False    False    False    False    True     True     \n20880  IBM880                    False    False    False    False    True     True     \n20905  IBM905                    False    False    False    False    True     True     \n20924  IBM00924                  False    False    False    False    True     True     \n20932  EUC-JP                    False    False    False    False    False    True     \n20936  x-cp20936                 False    False    False    False    False    True     \n20949  x-cp20949                 False    False    False    False    False    True     \n21025  cp1025                    False    False    False    False    True     True     \n21866  koi8-u                    True     True     True     True     True     True     \n28591  iso-8859-1                True     True     True     True     True     True     \n28592  iso-8859-2                True     True     True     True     True     True     \n28593  iso-8859-3                False    False    True     True     True     True     \n28594  iso-8859-4                True     True     True     True     True     True     \n28595  iso-8859-5                True     True     True     True     True     True     \n28596  iso-8859-6                True     True     True     True     True     True     \n28597  iso-8859-7                True     True     True     True     True     True     \n28598  iso-8859-8                True     True     False    False    True     True     \n28599  iso-8859-9                True     True     True     True     True     True     \n28603  iso-8859-13               False    False    True     True     True     True     \n28605  iso-8859-15               False    True     True     True     True     True     \n29001  x-Europa                  False    False    False    False    True     True     \n38598  iso-8859-8-i              True     True     True     True     True     True     \n50220  iso-2022-jp               False    False    True     True     False    True     \n50221  csISO2022JP               False    True     True     True     False    True     \n50222  iso-2022-jp               False    False    False    False    False    True     \n50225  iso-2022-kr               False    False    True     False    False    True     \n50227  x-cp50227                 False    False    False    False    False    True     \n51932  euc-jp                    True     True     True     True     False    True     \n51936  EUC-CN                    False    False    False    False    False    True     \n51949  euc-kr                    False    False    True     True     False    True     \n52936  hz-gb-2312                True     True     True     True     False    True     \n54936  GB18030                   True     True     True     True     False    True     \n57002  x-iscii-de                False    False    False    False    False    True     \n57003  x-iscii-be                False    False    False    False    False    True     \n57004  x-iscii-ta                False    False    False    False    False    True     \n57005  x-iscii-te                False    False    False    False    False    True     \n57006  x-iscii-as                False    False    False    False    False    True     \n57007  x-iscii-or                False    False    False    False    False    True     \n57008  x-iscii-ka                False    False    False    False    False    True     \n57009  x-iscii-ma                False    False    False    False    False    True     \n57010  x-iscii-gu                False    False    False    False    False    True     \n57011  x-iscii-pa                False    False    False    False    False    True     \n65000  utf-7                     False    False    True     True     False    True     \n65001  utf-8                     True     True     True     True     False    True     \n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.Encoding.IsProps#1\">using namespace System;\nusing namespace System::Text;\nint main()\n{\n   \n   // Print the header.\n   Console::Write( &quot;CodePage identifier and name     &quot; );\n   Console::Write( &quot;BrDisp   BrSave   &quot; );\n   Console::Write( &quot;MNDisp   MNSave   &quot; );\n   Console::WriteLine( &quot;1-Byte   ReadOnly &quot; );\n   \n   // For every encoding, get the property values.\n   System::Collections::IEnumerator^ myEnum = Encoding::GetEncodings()-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      EncodingInfo ^ ei = safe_cast&lt;EncodingInfo ^&gt;(myEnum-&gt;Current);\n      Encoding^ e = ei-&gt;GetEncoding();\n      Console::Write( &quot;{0,-6} {1,-25} &quot;, ei-&gt;CodePage, ei-&gt;Name );\n      Console::Write( &quot;{0,-8} {1,-8} &quot;, e-&gt;IsBrowserDisplay, e-&gt;IsBrowserSave );\n      Console::Write( &quot;{0,-8} {1,-8} &quot;, e-&gt;IsMailNewsDisplay, e-&gt;IsMailNewsSave );\n      Console::WriteLine( &quot;{0,-8} {1,-8} &quot;, e-&gt;IsSingleByte, e-&gt;IsReadOnly );\n   }\n}\n\n/* \nThis code produces the following output.\n\nCodePage identifier and name     BrDisp   BrSave   MNDisp   MNSave   1-Byte   ReadOnly \n37     IBM037                    False    False    False    False    True     True     \n437    IBM437                    False    False    False    False    True     True     \n500    IBM500                    False    False    False    False    True     True     \n708    ASMO-708                  True     True     False    False    True     True     \n720    DOS-720                   True     True     False    False    True     True     \n737    ibm737                    False    False    False    False    True     True     \n775    ibm775                    False    False    False    False    True     True     \n850    ibm850                    False    False    False    False    True     True     \n852    ibm852                    True     True     False    False    True     True     \n855    IBM855                    False    False    False    False    True     True     \n857    ibm857                    False    False    False    False    True     True     \n858    IBM00858                  False    False    False    False    True     True     \n860    IBM860                    False    False    False    False    True     True     \n861    ibm861                    False    False    False    False    True     True     \n862    DOS-862                   True     True     False    False    True     True     \n863    IBM863                    False    False    False    False    True     True     \n864    IBM864                    False    False    False    False    True     True     \n865    IBM865                    False    False    False    False    True     True     \n866    cp866                     True     True     False    False    True     True     \n869    ibm869                    False    False    False    False    True     True     \n870    IBM870                    False    False    False    False    True     True     \n874    windows-874               True     True     True     True     True     True     \n875    cp875                     False    False    False    False    True     True     \n932    shift_jis                 True     True     True     True     False    True     \n936    gb2312                    True     True     True     True     False    True     \n949    ks_c_5601-1987            True     True     True     True     False    True     \n950    big5                      True     True     True     True     False    True     \n1026   IBM1026                   False    False    False    False    True     True     \n1047   IBM01047                  False    False    False    False    True     True     \n1140   IBM01140                  False    False    False    False    True     True     \n1141   IBM01141                  False    False    False    False    True     True     \n1142   IBM01142                  False    False    False    False    True     True     \n1143   IBM01143                  False    False    False    False    True     True     \n1144   IBM01144                  False    False    False    False    True     True     \n1145   IBM01145                  False    False    False    False    True     True     \n1146   IBM01146                  False    False    False    False    True     True     \n1147   IBM01147                  False    False    False    False    True     True     \n1148   IBM01148                  False    False    False    False    True     True     \n1149   IBM01149                  False    False    False    False    True     True     \n1200   utf-16                    False    True     False    False    False    True     \n1201   unicodeFFFE               False    False    False    False    False    True     \n1250   windows-1250              True     True     True     True     True     True     \n1251   windows-1251              True     True     True     True     True     True     \n1252   Windows-1252              True     True     True     True     True     True     \n1253   windows-1253              True     True     True     True     True     True     \n1254   windows-1254              True     True     True     True     True     True     \n1255   windows-1255              True     True     True     True     True     True     \n1256   windows-1256              True     True     True     True     True     True     \n1257   windows-1257              True     True     True     True     True     True     \n1258   windows-1258              True     True     True     True     True     True     \n1361   Johab                     False    False    False    False    False    True     \n10000  macintosh                 False    False    False    False    True     True     \n10001  x-mac-japanese            False    False    False    False    False    True     \n10002  x-mac-chinesetrad         False    False    False    False    False    True     \n10003  x-mac-korean              False    False    False    False    False    True     \n10004  x-mac-arabic              False    False    False    False    True     True     \n10005  x-mac-hebrew              False    False    False    False    True     True     \n10006  x-mac-greek               False    False    False    False    True     True     \n10007  x-mac-cyrillic            False    False    False    False    True     True     \n10008  x-mac-chinesesimp         False    False    False    False    False    True     \n10010  x-mac-romanian            False    False    False    False    True     True     \n10017  x-mac-ukrainian           False    False    False    False    True     True     \n10021  x-mac-thai                False    False    False    False    True     True     \n10029  x-mac-ce                  False    False    False    False    True     True     \n10079  x-mac-icelandic           False    False    False    False    True     True     \n10081  x-mac-turkish             False    False    False    False    True     True     \n10082  x-mac-croatian            False    False    False    False    True     True     \n12000  utf-32                    False    False    False    False    False    True     \n12001  utf-32BE                  False    False    False    False    False    True     \n20000  x-Chinese-CNS             False    False    False    False    False    True     \n20001  x-cp20001                 False    False    False    False    False    True     \n20002  x-Chinese-Eten            False    False    False    False    False    True     \n20003  x-cp20003                 False    False    False    False    False    True     \n20004  x-cp20004                 False    False    False    False    False    True     \n20005  x-cp20005                 False    False    False    False    False    True     \n20105  x-IA5                     False    False    False    False    True     True     \n20106  x-IA5-German              False    False    False    False    True     True     \n20107  x-IA5-Swedish             False    False    False    False    True     True     \n20108  x-IA5-Norwegian           False    False    False    False    True     True     \n20127  us-ascii                  False    False    True     True     True     True     \n20261  x-cp20261                 False    False    False    False    False    True     \n20269  x-cp20269                 False    False    False    False    True     True     \n20273  IBM273                    False    False    False    False    True     True     \n20277  IBM277                    False    False    False    False    True     True     \n20278  IBM278                    False    False    False    False    True     True     \n20280  IBM280                    False    False    False    False    True     True     \n20284  IBM284                    False    False    False    False    True     True     \n20285  IBM285                    False    False    False    False    True     True     \n20290  IBM290                    False    False    False    False    True     True     \n20297  IBM297                    False    False    False    False    True     True     \n20420  IBM420                    False    False    False    False    True     True     \n20423  IBM423                    False    False    False    False    True     True     \n20424  IBM424                    False    False    False    False    True     True     \n20833  x-EBCDIC-KoreanExtended   False    False    False    False    True     True     \n20838  IBM-Thai                  False    False    False    False    True     True     \n20866  koi8-r                    True     True     True     True     True     True     \n20871  IBM871                    False    False    False    False    True     True     \n20880  IBM880                    False    False    False    False    True     True     \n20905  IBM905                    False    False    False    False    True     True     \n20924  IBM00924                  False    False    False    False    True     True     \n20932  EUC-JP                    False    False    False    False    False    True     \n20936  x-cp20936                 False    False    False    False    False    True     \n20949  x-cp20949                 False    False    False    False    False    True     \n21025  cp1025                    False    False    False    False    True     True     \n21866  koi8-u                    True     True     True     True     True     True     \n28591  iso-8859-1                True     True     True     True     True     True     \n28592  iso-8859-2                True     True     True     True     True     True     \n28593  iso-8859-3                False    False    True     True     True     True     \n28594  iso-8859-4                True     True     True     True     True     True     \n28595  iso-8859-5                True     True     True     True     True     True     \n28596  iso-8859-6                True     True     True     True     True     True     \n28597  iso-8859-7                True     True     True     True     True     True     \n28598  iso-8859-8                True     True     False    False    True     True     \n28599  iso-8859-9                True     True     True     True     True     True     \n28603  iso-8859-13               False    False    True     True     True     True     \n28605  iso-8859-15               False    True     True     True     True     True     \n29001  x-Europa                  False    False    False    False    True     True     \n38598  iso-8859-8-i              True     True     True     True     True     True     \n50220  iso-2022-jp               False    False    True     True     False    True     \n50221  csISO2022JP               False    True     True     True     False    True     \n50222  iso-2022-jp               False    False    False    False    False    True     \n50225  iso-2022-kr               False    False    True     False    False    True     \n50227  x-cp50227                 False    False    False    False    False    True     \n51932  euc-jp                    True     True     True     True     False    True     \n51936  EUC-CN                    False    False    False    False    False    True     \n51949  euc-kr                    False    False    True     True     False    True     \n52936  hz-gb-2312                True     True     True     True     False    True     \n54936  GB18030                   True     True     True     True     False    True     \n57002  x-iscii-de                False    False    False    False    False    True     \n57003  x-iscii-be                False    False    False    False    False    True     \n57004  x-iscii-ta                False    False    False    False    False    True     \n57005  x-iscii-te                False    False    False    False    False    True     \n57006  x-iscii-as                False    False    False    False    False    True     \n57007  x-iscii-or                False    False    False    False    False    True     \n57008  x-iscii-ka                False    False    False    False    False    True     \n57009  x-iscii-ma                False    False    False    False    False    True     \n57010  x-iscii-gu                False    False    False    False    False    True     \n57011  x-iscii-pa                False    False    False    False    False    True     \n65000  utf-7                     False    False    True     True     False    True     \n65001  utf-8                     True     True     True     True     False    True     \n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.Encoding.IsProps#1\">Imports System\nImports System.Text\n\nPublic Class SamplesEncoding   \n\n   Public Shared Sub Main()\n\n      &#39; Print the header.\n      Console.Write(&quot;CodePage identifier and name     &quot;)\n      Console.Write(&quot;BrDisp   BrSave   &quot;)\n      Console.Write(&quot;MNDisp   MNSave   &quot;)\n      Console.WriteLine(&quot;1-Byte   ReadOnly &quot;)\n\n      &#39; For every encoding, get the property values.\n      Dim ei As EncodingInfo\n      For Each ei In  Encoding.GetEncodings()\n         Dim e As Encoding = ei.GetEncoding()\n         \n         Console.Write(&quot;{0,-6} {1,-25} &quot;, ei.CodePage, ei.Name)\n         Console.Write(&quot;{0,-8} {1,-8} &quot;, e.IsBrowserDisplay, e.IsBrowserSave)\n         Console.Write(&quot;{0,-8} {1,-8} &quot;, e.IsMailNewsDisplay, e.IsMailNewsSave)\n         Console.WriteLine(&quot;{0,-8} {1,-8} &quot;, e.IsSingleByte, e.IsReadOnly)\n      Next ei\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesEncoding\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;CodePage identifier and name     BrDisp   BrSave   MNDisp   MNSave   1-Byte   ReadOnly \n&#39;37     IBM037                    False    False    False    False    True     True     \n&#39;437    IBM437                    False    False    False    False    True     True     \n&#39;500    IBM500                    False    False    False    False    True     True     \n&#39;708    ASMO-708                  True     True     False    False    True     True     \n&#39;720    DOS-720                   True     True     False    False    True     True     \n&#39;737    ibm737                    False    False    False    False    True     True     \n&#39;775    ibm775                    False    False    False    False    True     True     \n&#39;850    ibm850                    False    False    False    False    True     True     \n&#39;852    ibm852                    True     True     False    False    True     True     \n&#39;855    IBM855                    False    False    False    False    True     True     \n&#39;857    ibm857                    False    False    False    False    True     True     \n&#39;858    IBM00858                  False    False    False    False    True     True     \n&#39;860    IBM860                    False    False    False    False    True     True     \n&#39;861    ibm861                    False    False    False    False    True     True     \n&#39;862    DOS-862                   True     True     False    False    True     True     \n&#39;863    IBM863                    False    False    False    False    True     True     \n&#39;864    IBM864                    False    False    False    False    True     True     \n&#39;865    IBM865                    False    False    False    False    True     True     \n&#39;866    cp866                     True     True     False    False    True     True     \n&#39;869    ibm869                    False    False    False    False    True     True     \n&#39;870    IBM870                    False    False    False    False    True     True     \n&#39;874    windows-874               True     True     True     True     True     True     \n&#39;875    cp875                     False    False    False    False    True     True     \n&#39;932    shift_jis                 True     True     True     True     False    True     \n&#39;936    gb2312                    True     True     True     True     False    True     \n&#39;949    ks_c_5601-1987            True     True     True     True     False    True     \n&#39;950    big5                      True     True     True     True     False    True     \n&#39;1026   IBM1026                   False    False    False    False    True     True     \n&#39;1047   IBM01047                  False    False    False    False    True     True     \n&#39;1140   IBM01140                  False    False    False    False    True     True     \n&#39;1141   IBM01141                  False    False    False    False    True     True     \n&#39;1142   IBM01142                  False    False    False    False    True     True     \n&#39;1143   IBM01143                  False    False    False    False    True     True     \n&#39;1144   IBM01144                  False    False    False    False    True     True     \n&#39;1145   IBM01145                  False    False    False    False    True     True     \n&#39;1146   IBM01146                  False    False    False    False    True     True     \n&#39;1147   IBM01147                  False    False    False    False    True     True     \n&#39;1148   IBM01148                  False    False    False    False    True     True     \n&#39;1149   IBM01149                  False    False    False    False    True     True     \n&#39;1200   utf-16                    False    True     False    False    False    True     \n&#39;1201   unicodeFFFE               False    False    False    False    False    True     \n&#39;1250   windows-1250              True     True     True     True     True     True     \n&#39;1251   windows-1251              True     True     True     True     True     True     \n&#39;1252   Windows-1252              True     True     True     True     True     True     \n&#39;1253   windows-1253              True     True     True     True     True     True     \n&#39;1254   windows-1254              True     True     True     True     True     True     \n&#39;1255   windows-1255              True     True     True     True     True     True     \n&#39;1256   windows-1256              True     True     True     True     True     True     \n&#39;1257   windows-1257              True     True     True     True     True     True     \n&#39;1258   windows-1258              True     True     True     True     True     True     \n&#39;1361   Johab                     False    False    False    False    False    True     \n&#39;10000  macintosh                 False    False    False    False    True     True     \n&#39;10001  x-mac-japanese            False    False    False    False    False    True     \n&#39;10002  x-mac-chinesetrad         False    False    False    False    False    True     \n&#39;10003  x-mac-korean              False    False    False    False    False    True     \n&#39;10004  x-mac-arabic              False    False    False    False    True     True     \n&#39;10005  x-mac-hebrew              False    False    False    False    True     True     \n&#39;10006  x-mac-greek               False    False    False    False    True     True     \n&#39;10007  x-mac-cyrillic            False    False    False    False    True     True     \n&#39;10008  x-mac-chinesesimp         False    False    False    False    False    True     \n&#39;10010  x-mac-romanian            False    False    False    False    True     True     \n&#39;10017  x-mac-ukrainian           False    False    False    False    True     True     \n&#39;10021  x-mac-thai                False    False    False    False    True     True     \n&#39;10029  x-mac-ce                  False    False    False    False    True     True     \n&#39;10079  x-mac-icelandic           False    False    False    False    True     True     \n&#39;10081  x-mac-turkish             False    False    False    False    True     True     \n&#39;10082  x-mac-croatian            False    False    False    False    True     True     \n&#39;12000  utf-32                    False    False    False    False    False    True     \n&#39;12001  utf-32BE                  False    False    False    False    False    True     \n&#39;20000  x-Chinese-CNS             False    False    False    False    False    True     \n&#39;20001  x-cp20001                 False    False    False    False    False    True     \n&#39;20002  x-Chinese-Eten            False    False    False    False    False    True     \n&#39;20003  x-cp20003                 False    False    False    False    False    True     \n&#39;20004  x-cp20004                 False    False    False    False    False    True     \n&#39;20005  x-cp20005                 False    False    False    False    False    True     \n&#39;20105  x-IA5                     False    False    False    False    True     True     \n&#39;20106  x-IA5-German              False    False    False    False    True     True     \n&#39;20107  x-IA5-Swedish             False    False    False    False    True     True     \n&#39;20108  x-IA5-Norwegian           False    False    False    False    True     True     \n&#39;20127  us-ascii                  False    False    True     True     True     True     \n&#39;20261  x-cp20261                 False    False    False    False    False    True     \n&#39;20269  x-cp20269                 False    False    False    False    True     True     \n&#39;20273  IBM273                    False    False    False    False    True     True     \n&#39;20277  IBM277                    False    False    False    False    True     True     \n&#39;20278  IBM278                    False    False    False    False    True     True     \n&#39;20280  IBM280                    False    False    False    False    True     True     \n&#39;20284  IBM284                    False    False    False    False    True     True     \n&#39;20285  IBM285                    False    False    False    False    True     True     \n&#39;20290  IBM290                    False    False    False    False    True     True     \n&#39;20297  IBM297                    False    False    False    False    True     True     \n&#39;20420  IBM420                    False    False    False    False    True     True     \n&#39;20423  IBM423                    False    False    False    False    True     True     \n&#39;20424  IBM424                    False    False    False    False    True     True     \n&#39;20833  x-EBCDIC-KoreanExtended   False    False    False    False    True     True     \n&#39;20838  IBM-Thai                  False    False    False    False    True     True     \n&#39;20866  koi8-r                    True     True     True     True     True     True     \n&#39;20871  IBM871                    False    False    False    False    True     True     \n&#39;20880  IBM880                    False    False    False    False    True     True     \n&#39;20905  IBM905                    False    False    False    False    True     True     \n&#39;20924  IBM00924                  False    False    False    False    True     True     \n&#39;20932  EUC-JP                    False    False    False    False    False    True     \n&#39;20936  x-cp20936                 False    False    False    False    False    True     \n&#39;20949  x-cp20949                 False    False    False    False    False    True     \n&#39;21025  cp1025                    False    False    False    False    True     True     \n&#39;21866  koi8-u                    True     True     True     True     True     True     \n&#39;28591  iso-8859-1                True     True     True     True     True     True     \n&#39;28592  iso-8859-2                True     True     True     True     True     True     \n&#39;28593  iso-8859-3                False    False    True     True     True     True     \n&#39;28594  iso-8859-4                True     True     True     True     True     True     \n&#39;28595  iso-8859-5                True     True     True     True     True     True     \n&#39;28596  iso-8859-6                True     True     True     True     True     True     \n&#39;28597  iso-8859-7                True     True     True     True     True     True     \n&#39;28598  iso-8859-8                True     True     False    False    True     True     \n&#39;28599  iso-8859-9                True     True     True     True     True     True     \n&#39;28603  iso-8859-13               False    False    True     True     True     True     \n&#39;28605  iso-8859-15               False    True     True     True     True     True     \n&#39;29001  x-Europa                  False    False    False    False    True     True     \n&#39;38598  iso-8859-8-i              True     True     True     True     True     True     \n&#39;50220  iso-2022-jp               False    False    True     True     False    True     \n&#39;50221  csISO2022JP               False    True     True     True     False    True     \n&#39;50222  iso-2022-jp               False    False    False    False    False    True     \n&#39;50225  iso-2022-kr               False    False    True     False    False    True     \n&#39;50227  x-cp50227                 False    False    False    False    False    True     \n&#39;51932  euc-jp                    True     True     True     True     False    True     \n&#39;51936  EUC-CN                    False    False    False    False    False    True     \n&#39;51949  euc-kr                    False    False    True     True     False    True     \n&#39;52936  hz-gb-2312                True     True     True     True     False    True     \n&#39;54936  GB18030                   True     True     True     True     False    True     \n&#39;57002  x-iscii-de                False    False    False    False    False    True     \n&#39;57003  x-iscii-be                False    False    False    False    False    True     \n&#39;57004  x-iscii-ta                False    False    False    False    False    True     \n&#39;57005  x-iscii-te                False    False    False    False    False    True     \n&#39;57006  x-iscii-as                False    False    False    False    False    True     \n&#39;57007  x-iscii-or                False    False    False    False    False    True     \n&#39;57008  x-iscii-ka                False    False    False    False    False    True     \n&#39;57009  x-iscii-ma                False    False    False    False    False    True     \n&#39;57010  x-iscii-gu                False    False    False    False    False    True     \n&#39;57011  x-iscii-pa                False    False    False    False    False    True     \n&#39;65000  utf-7                     False    False    True     True     False    True     \n&#39;65001  utf-8                     True     True     True     True     False    True     \n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_IsReadOnly\">\r\n    \r\n            <a id=\"System_Text_Encoding_IsReadOnly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsReadOnly</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets a value indicating whether the current encoding is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsReadOnly { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> is read-only; otherwise, <code>false</code>. The default is <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_IsSingleByte\">\r\n    \r\n            <a id=\"System_Text_Encoding_IsSingleByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSingleByte</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets a value indicating whether the current encoding uses single-byte code points.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool IsSingleByte { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> uses single-byte code points; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For a single-byte encoding, for example, <a class=\"xref\" href=\"system.text.asciiencoding\" data-linktype=\"relative-path\">ASCIIEncoding</a>, this property retrieves <code>true</code>.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> You should be careful in what your application does with the value for IsSingleByte. An assumption of how an Encoding will proceed may still be wrong. For example, Windows-1252 has a value of <code>true</code> for IsSingleByte, but Encoding.GetMaxByteCount(1) returns 2. This is because the method considers potential leftover surrogates from a previous decoder operation.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example checks the values of the Boolean properties of each encoding.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.Encoding.IsProps#1\">using System;\nusing System.Text;\n\npublic class SamplesEncoding  {\n\n   public static void Main()  {\n\n      // Print the header.\n      Console.Write( &quot;CodePage identifier and name     &quot; );\n      Console.Write( &quot;BrDisp   BrSave   &quot; );\n      Console.Write( &quot;MNDisp   MNSave   &quot; );\n      Console.WriteLine( &quot;1-Byte   ReadOnly &quot; );\n\n      // For every encoding, get the property values.\n      foreach( EncodingInfo ei in Encoding.GetEncodings() )  {\n         Encoding e = ei.GetEncoding();\n\n         Console.Write( &quot;{0,-6} {1,-25} &quot;, ei.CodePage, ei.Name );\n         Console.Write( &quot;{0,-8} {1,-8} &quot;, e.IsBrowserDisplay, e.IsBrowserSave );\n         Console.Write( &quot;{0,-8} {1,-8} &quot;, e.IsMailNewsDisplay, e.IsMailNewsSave );\n         Console.WriteLine( &quot;{0,-8} {1,-8} &quot;, e.IsSingleByte, e.IsReadOnly );\n      }\n\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nCodePage identifier and name     BrDisp   BrSave   MNDisp   MNSave   1-Byte   ReadOnly \n37     IBM037                    False    False    False    False    True     True     \n437    IBM437                    False    False    False    False    True     True     \n500    IBM500                    False    False    False    False    True     True     \n708    ASMO-708                  True     True     False    False    True     True     \n720    DOS-720                   True     True     False    False    True     True     \n737    ibm737                    False    False    False    False    True     True     \n775    ibm775                    False    False    False    False    True     True     \n850    ibm850                    False    False    False    False    True     True     \n852    ibm852                    True     True     False    False    True     True     \n855    IBM855                    False    False    False    False    True     True     \n857    ibm857                    False    False    False    False    True     True     \n858    IBM00858                  False    False    False    False    True     True     \n860    IBM860                    False    False    False    False    True     True     \n861    ibm861                    False    False    False    False    True     True     \n862    DOS-862                   True     True     False    False    True     True     \n863    IBM863                    False    False    False    False    True     True     \n864    IBM864                    False    False    False    False    True     True     \n865    IBM865                    False    False    False    False    True     True     \n866    cp866                     True     True     False    False    True     True     \n869    ibm869                    False    False    False    False    True     True     \n870    IBM870                    False    False    False    False    True     True     \n874    windows-874               True     True     True     True     True     True     \n875    cp875                     False    False    False    False    True     True     \n932    shift_jis                 True     True     True     True     False    True     \n936    gb2312                    True     True     True     True     False    True     \n949    ks_c_5601-1987            True     True     True     True     False    True     \n950    big5                      True     True     True     True     False    True     \n1026   IBM1026                   False    False    False    False    True     True     \n1047   IBM01047                  False    False    False    False    True     True     \n1140   IBM01140                  False    False    False    False    True     True     \n1141   IBM01141                  False    False    False    False    True     True     \n1142   IBM01142                  False    False    False    False    True     True     \n1143   IBM01143                  False    False    False    False    True     True     \n1144   IBM01144                  False    False    False    False    True     True     \n1145   IBM01145                  False    False    False    False    True     True     \n1146   IBM01146                  False    False    False    False    True     True     \n1147   IBM01147                  False    False    False    False    True     True     \n1148   IBM01148                  False    False    False    False    True     True     \n1149   IBM01149                  False    False    False    False    True     True     \n1200   utf-16                    False    True     False    False    False    True     \n1201   unicodeFFFE               False    False    False    False    False    True     \n1250   windows-1250              True     True     True     True     True     True     \n1251   windows-1251              True     True     True     True     True     True     \n1252   Windows-1252              True     True     True     True     True     True     \n1253   windows-1253              True     True     True     True     True     True     \n1254   windows-1254              True     True     True     True     True     True     \n1255   windows-1255              True     True     True     True     True     True     \n1256   windows-1256              True     True     True     True     True     True     \n1257   windows-1257              True     True     True     True     True     True     \n1258   windows-1258              True     True     True     True     True     True     \n1361   Johab                     False    False    False    False    False    True     \n10000  macintosh                 False    False    False    False    True     True     \n10001  x-mac-japanese            False    False    False    False    False    True     \n10002  x-mac-chinesetrad         False    False    False    False    False    True     \n10003  x-mac-korean              False    False    False    False    False    True     \n10004  x-mac-arabic              False    False    False    False    True     True     \n10005  x-mac-hebrew              False    False    False    False    True     True     \n10006  x-mac-greek               False    False    False    False    True     True     \n10007  x-mac-cyrillic            False    False    False    False    True     True     \n10008  x-mac-chinesesimp         False    False    False    False    False    True     \n10010  x-mac-romanian            False    False    False    False    True     True     \n10017  x-mac-ukrainian           False    False    False    False    True     True     \n10021  x-mac-thai                False    False    False    False    True     True     \n10029  x-mac-ce                  False    False    False    False    True     True     \n10079  x-mac-icelandic           False    False    False    False    True     True     \n10081  x-mac-turkish             False    False    False    False    True     True     \n10082  x-mac-croatian            False    False    False    False    True     True     \n12000  utf-32                    False    False    False    False    False    True     \n12001  utf-32BE                  False    False    False    False    False    True     \n20000  x-Chinese-CNS             False    False    False    False    False    True     \n20001  x-cp20001                 False    False    False    False    False    True     \n20002  x-Chinese-Eten            False    False    False    False    False    True     \n20003  x-cp20003                 False    False    False    False    False    True     \n20004  x-cp20004                 False    False    False    False    False    True     \n20005  x-cp20005                 False    False    False    False    False    True     \n20105  x-IA5                     False    False    False    False    True     True     \n20106  x-IA5-German              False    False    False    False    True     True     \n20107  x-IA5-Swedish             False    False    False    False    True     True     \n20108  x-IA5-Norwegian           False    False    False    False    True     True     \n20127  us-ascii                  False    False    True     True     True     True     \n20261  x-cp20261                 False    False    False    False    False    True     \n20269  x-cp20269                 False    False    False    False    True     True     \n20273  IBM273                    False    False    False    False    True     True     \n20277  IBM277                    False    False    False    False    True     True     \n20278  IBM278                    False    False    False    False    True     True     \n20280  IBM280                    False    False    False    False    True     True     \n20284  IBM284                    False    False    False    False    True     True     \n20285  IBM285                    False    False    False    False    True     True     \n20290  IBM290                    False    False    False    False    True     True     \n20297  IBM297                    False    False    False    False    True     True     \n20420  IBM420                    False    False    False    False    True     True     \n20423  IBM423                    False    False    False    False    True     True     \n20424  IBM424                    False    False    False    False    True     True     \n20833  x-EBCDIC-KoreanExtended   False    False    False    False    True     True     \n20838  IBM-Thai                  False    False    False    False    True     True     \n20866  koi8-r                    True     True     True     True     True     True     \n20871  IBM871                    False    False    False    False    True     True     \n20880  IBM880                    False    False    False    False    True     True     \n20905  IBM905                    False    False    False    False    True     True     \n20924  IBM00924                  False    False    False    False    True     True     \n20932  EUC-JP                    False    False    False    False    False    True     \n20936  x-cp20936                 False    False    False    False    False    True     \n20949  x-cp20949                 False    False    False    False    False    True     \n21025  cp1025                    False    False    False    False    True     True     \n21866  koi8-u                    True     True     True     True     True     True     \n28591  iso-8859-1                True     True     True     True     True     True     \n28592  iso-8859-2                True     True     True     True     True     True     \n28593  iso-8859-3                False    False    True     True     True     True     \n28594  iso-8859-4                True     True     True     True     True     True     \n28595  iso-8859-5                True     True     True     True     True     True     \n28596  iso-8859-6                True     True     True     True     True     True     \n28597  iso-8859-7                True     True     True     True     True     True     \n28598  iso-8859-8                True     True     False    False    True     True     \n28599  iso-8859-9                True     True     True     True     True     True     \n28603  iso-8859-13               False    False    True     True     True     True     \n28605  iso-8859-15               False    True     True     True     True     True     \n29001  x-Europa                  False    False    False    False    True     True     \n38598  iso-8859-8-i              True     True     True     True     True     True     \n50220  iso-2022-jp               False    False    True     True     False    True     \n50221  csISO2022JP               False    True     True     True     False    True     \n50222  iso-2022-jp               False    False    False    False    False    True     \n50225  iso-2022-kr               False    False    True     False    False    True     \n50227  x-cp50227                 False    False    False    False    False    True     \n51932  euc-jp                    True     True     True     True     False    True     \n51936  EUC-CN                    False    False    False    False    False    True     \n51949  euc-kr                    False    False    True     True     False    True     \n52936  hz-gb-2312                True     True     True     True     False    True     \n54936  GB18030                   True     True     True     True     False    True     \n57002  x-iscii-de                False    False    False    False    False    True     \n57003  x-iscii-be                False    False    False    False    False    True     \n57004  x-iscii-ta                False    False    False    False    False    True     \n57005  x-iscii-te                False    False    False    False    False    True     \n57006  x-iscii-as                False    False    False    False    False    True     \n57007  x-iscii-or                False    False    False    False    False    True     \n57008  x-iscii-ka                False    False    False    False    False    True     \n57009  x-iscii-ma                False    False    False    False    False    True     \n57010  x-iscii-gu                False    False    False    False    False    True     \n57011  x-iscii-pa                False    False    False    False    False    True     \n65000  utf-7                     False    False    True     True     False    True     \n65001  utf-8                     True     True     True     True     False    True     \n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.Encoding.IsProps#1\">using namespace System;\nusing namespace System::Text;\nint main()\n{\n   \n   // Print the header.\n   Console::Write( &quot;CodePage identifier and name     &quot; );\n   Console::Write( &quot;BrDisp   BrSave   &quot; );\n   Console::Write( &quot;MNDisp   MNSave   &quot; );\n   Console::WriteLine( &quot;1-Byte   ReadOnly &quot; );\n   \n   // For every encoding, get the property values.\n   System::Collections::IEnumerator^ myEnum = Encoding::GetEncodings()-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      EncodingInfo ^ ei = safe_cast&lt;EncodingInfo ^&gt;(myEnum-&gt;Current);\n      Encoding^ e = ei-&gt;GetEncoding();\n      Console::Write( &quot;{0,-6} {1,-25} &quot;, ei-&gt;CodePage, ei-&gt;Name );\n      Console::Write( &quot;{0,-8} {1,-8} &quot;, e-&gt;IsBrowserDisplay, e-&gt;IsBrowserSave );\n      Console::Write( &quot;{0,-8} {1,-8} &quot;, e-&gt;IsMailNewsDisplay, e-&gt;IsMailNewsSave );\n      Console::WriteLine( &quot;{0,-8} {1,-8} &quot;, e-&gt;IsSingleByte, e-&gt;IsReadOnly );\n   }\n}\n\n/* \nThis code produces the following output.\n\nCodePage identifier and name     BrDisp   BrSave   MNDisp   MNSave   1-Byte   ReadOnly \n37     IBM037                    False    False    False    False    True     True     \n437    IBM437                    False    False    False    False    True     True     \n500    IBM500                    False    False    False    False    True     True     \n708    ASMO-708                  True     True     False    False    True     True     \n720    DOS-720                   True     True     False    False    True     True     \n737    ibm737                    False    False    False    False    True     True     \n775    ibm775                    False    False    False    False    True     True     \n850    ibm850                    False    False    False    False    True     True     \n852    ibm852                    True     True     False    False    True     True     \n855    IBM855                    False    False    False    False    True     True     \n857    ibm857                    False    False    False    False    True     True     \n858    IBM00858                  False    False    False    False    True     True     \n860    IBM860                    False    False    False    False    True     True     \n861    ibm861                    False    False    False    False    True     True     \n862    DOS-862                   True     True     False    False    True     True     \n863    IBM863                    False    False    False    False    True     True     \n864    IBM864                    False    False    False    False    True     True     \n865    IBM865                    False    False    False    False    True     True     \n866    cp866                     True     True     False    False    True     True     \n869    ibm869                    False    False    False    False    True     True     \n870    IBM870                    False    False    False    False    True     True     \n874    windows-874               True     True     True     True     True     True     \n875    cp875                     False    False    False    False    True     True     \n932    shift_jis                 True     True     True     True     False    True     \n936    gb2312                    True     True     True     True     False    True     \n949    ks_c_5601-1987            True     True     True     True     False    True     \n950    big5                      True     True     True     True     False    True     \n1026   IBM1026                   False    False    False    False    True     True     \n1047   IBM01047                  False    False    False    False    True     True     \n1140   IBM01140                  False    False    False    False    True     True     \n1141   IBM01141                  False    False    False    False    True     True     \n1142   IBM01142                  False    False    False    False    True     True     \n1143   IBM01143                  False    False    False    False    True     True     \n1144   IBM01144                  False    False    False    False    True     True     \n1145   IBM01145                  False    False    False    False    True     True     \n1146   IBM01146                  False    False    False    False    True     True     \n1147   IBM01147                  False    False    False    False    True     True     \n1148   IBM01148                  False    False    False    False    True     True     \n1149   IBM01149                  False    False    False    False    True     True     \n1200   utf-16                    False    True     False    False    False    True     \n1201   unicodeFFFE               False    False    False    False    False    True     \n1250   windows-1250              True     True     True     True     True     True     \n1251   windows-1251              True     True     True     True     True     True     \n1252   Windows-1252              True     True     True     True     True     True     \n1253   windows-1253              True     True     True     True     True     True     \n1254   windows-1254              True     True     True     True     True     True     \n1255   windows-1255              True     True     True     True     True     True     \n1256   windows-1256              True     True     True     True     True     True     \n1257   windows-1257              True     True     True     True     True     True     \n1258   windows-1258              True     True     True     True     True     True     \n1361   Johab                     False    False    False    False    False    True     \n10000  macintosh                 False    False    False    False    True     True     \n10001  x-mac-japanese            False    False    False    False    False    True     \n10002  x-mac-chinesetrad         False    False    False    False    False    True     \n10003  x-mac-korean              False    False    False    False    False    True     \n10004  x-mac-arabic              False    False    False    False    True     True     \n10005  x-mac-hebrew              False    False    False    False    True     True     \n10006  x-mac-greek               False    False    False    False    True     True     \n10007  x-mac-cyrillic            False    False    False    False    True     True     \n10008  x-mac-chinesesimp         False    False    False    False    False    True     \n10010  x-mac-romanian            False    False    False    False    True     True     \n10017  x-mac-ukrainian           False    False    False    False    True     True     \n10021  x-mac-thai                False    False    False    False    True     True     \n10029  x-mac-ce                  False    False    False    False    True     True     \n10079  x-mac-icelandic           False    False    False    False    True     True     \n10081  x-mac-turkish             False    False    False    False    True     True     \n10082  x-mac-croatian            False    False    False    False    True     True     \n12000  utf-32                    False    False    False    False    False    True     \n12001  utf-32BE                  False    False    False    False    False    True     \n20000  x-Chinese-CNS             False    False    False    False    False    True     \n20001  x-cp20001                 False    False    False    False    False    True     \n20002  x-Chinese-Eten            False    False    False    False    False    True     \n20003  x-cp20003                 False    False    False    False    False    True     \n20004  x-cp20004                 False    False    False    False    False    True     \n20005  x-cp20005                 False    False    False    False    False    True     \n20105  x-IA5                     False    False    False    False    True     True     \n20106  x-IA5-German              False    False    False    False    True     True     \n20107  x-IA5-Swedish             False    False    False    False    True     True     \n20108  x-IA5-Norwegian           False    False    False    False    True     True     \n20127  us-ascii                  False    False    True     True     True     True     \n20261  x-cp20261                 False    False    False    False    False    True     \n20269  x-cp20269                 False    False    False    False    True     True     \n20273  IBM273                    False    False    False    False    True     True     \n20277  IBM277                    False    False    False    False    True     True     \n20278  IBM278                    False    False    False    False    True     True     \n20280  IBM280                    False    False    False    False    True     True     \n20284  IBM284                    False    False    False    False    True     True     \n20285  IBM285                    False    False    False    False    True     True     \n20290  IBM290                    False    False    False    False    True     True     \n20297  IBM297                    False    False    False    False    True     True     \n20420  IBM420                    False    False    False    False    True     True     \n20423  IBM423                    False    False    False    False    True     True     \n20424  IBM424                    False    False    False    False    True     True     \n20833  x-EBCDIC-KoreanExtended   False    False    False    False    True     True     \n20838  IBM-Thai                  False    False    False    False    True     True     \n20866  koi8-r                    True     True     True     True     True     True     \n20871  IBM871                    False    False    False    False    True     True     \n20880  IBM880                    False    False    False    False    True     True     \n20905  IBM905                    False    False    False    False    True     True     \n20924  IBM00924                  False    False    False    False    True     True     \n20932  EUC-JP                    False    False    False    False    False    True     \n20936  x-cp20936                 False    False    False    False    False    True     \n20949  x-cp20949                 False    False    False    False    False    True     \n21025  cp1025                    False    False    False    False    True     True     \n21866  koi8-u                    True     True     True     True     True     True     \n28591  iso-8859-1                True     True     True     True     True     True     \n28592  iso-8859-2                True     True     True     True     True     True     \n28593  iso-8859-3                False    False    True     True     True     True     \n28594  iso-8859-4                True     True     True     True     True     True     \n28595  iso-8859-5                True     True     True     True     True     True     \n28596  iso-8859-6                True     True     True     True     True     True     \n28597  iso-8859-7                True     True     True     True     True     True     \n28598  iso-8859-8                True     True     False    False    True     True     \n28599  iso-8859-9                True     True     True     True     True     True     \n28603  iso-8859-13               False    False    True     True     True     True     \n28605  iso-8859-15               False    True     True     True     True     True     \n29001  x-Europa                  False    False    False    False    True     True     \n38598  iso-8859-8-i              True     True     True     True     True     True     \n50220  iso-2022-jp               False    False    True     True     False    True     \n50221  csISO2022JP               False    True     True     True     False    True     \n50222  iso-2022-jp               False    False    False    False    False    True     \n50225  iso-2022-kr               False    False    True     False    False    True     \n50227  x-cp50227                 False    False    False    False    False    True     \n51932  euc-jp                    True     True     True     True     False    True     \n51936  EUC-CN                    False    False    False    False    False    True     \n51949  euc-kr                    False    False    True     True     False    True     \n52936  hz-gb-2312                True     True     True     True     False    True     \n54936  GB18030                   True     True     True     True     False    True     \n57002  x-iscii-de                False    False    False    False    False    True     \n57003  x-iscii-be                False    False    False    False    False    True     \n57004  x-iscii-ta                False    False    False    False    False    True     \n57005  x-iscii-te                False    False    False    False    False    True     \n57006  x-iscii-as                False    False    False    False    False    True     \n57007  x-iscii-or                False    False    False    False    False    True     \n57008  x-iscii-ka                False    False    False    False    False    True     \n57009  x-iscii-ma                False    False    False    False    False    True     \n57010  x-iscii-gu                False    False    False    False    False    True     \n57011  x-iscii-pa                False    False    False    False    False    True     \n65000  utf-7                     False    False    True     True     False    True     \n65001  utf-8                     True     True     True     True     False    True     \n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.Encoding.IsProps#1\">Imports System\nImports System.Text\n\nPublic Class SamplesEncoding   \n\n   Public Shared Sub Main()\n\n      &#39; Print the header.\n      Console.Write(&quot;CodePage identifier and name     &quot;)\n      Console.Write(&quot;BrDisp   BrSave   &quot;)\n      Console.Write(&quot;MNDisp   MNSave   &quot;)\n      Console.WriteLine(&quot;1-Byte   ReadOnly &quot;)\n\n      &#39; For every encoding, get the property values.\n      Dim ei As EncodingInfo\n      For Each ei In  Encoding.GetEncodings()\n         Dim e As Encoding = ei.GetEncoding()\n         \n         Console.Write(&quot;{0,-6} {1,-25} &quot;, ei.CodePage, ei.Name)\n         Console.Write(&quot;{0,-8} {1,-8} &quot;, e.IsBrowserDisplay, e.IsBrowserSave)\n         Console.Write(&quot;{0,-8} {1,-8} &quot;, e.IsMailNewsDisplay, e.IsMailNewsSave)\n         Console.WriteLine(&quot;{0,-8} {1,-8} &quot;, e.IsSingleByte, e.IsReadOnly)\n      Next ei\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesEncoding\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;CodePage identifier and name     BrDisp   BrSave   MNDisp   MNSave   1-Byte   ReadOnly \n&#39;37     IBM037                    False    False    False    False    True     True     \n&#39;437    IBM437                    False    False    False    False    True     True     \n&#39;500    IBM500                    False    False    False    False    True     True     \n&#39;708    ASMO-708                  True     True     False    False    True     True     \n&#39;720    DOS-720                   True     True     False    False    True     True     \n&#39;737    ibm737                    False    False    False    False    True     True     \n&#39;775    ibm775                    False    False    False    False    True     True     \n&#39;850    ibm850                    False    False    False    False    True     True     \n&#39;852    ibm852                    True     True     False    False    True     True     \n&#39;855    IBM855                    False    False    False    False    True     True     \n&#39;857    ibm857                    False    False    False    False    True     True     \n&#39;858    IBM00858                  False    False    False    False    True     True     \n&#39;860    IBM860                    False    False    False    False    True     True     \n&#39;861    ibm861                    False    False    False    False    True     True     \n&#39;862    DOS-862                   True     True     False    False    True     True     \n&#39;863    IBM863                    False    False    False    False    True     True     \n&#39;864    IBM864                    False    False    False    False    True     True     \n&#39;865    IBM865                    False    False    False    False    True     True     \n&#39;866    cp866                     True     True     False    False    True     True     \n&#39;869    ibm869                    False    False    False    False    True     True     \n&#39;870    IBM870                    False    False    False    False    True     True     \n&#39;874    windows-874               True     True     True     True     True     True     \n&#39;875    cp875                     False    False    False    False    True     True     \n&#39;932    shift_jis                 True     True     True     True     False    True     \n&#39;936    gb2312                    True     True     True     True     False    True     \n&#39;949    ks_c_5601-1987            True     True     True     True     False    True     \n&#39;950    big5                      True     True     True     True     False    True     \n&#39;1026   IBM1026                   False    False    False    False    True     True     \n&#39;1047   IBM01047                  False    False    False    False    True     True     \n&#39;1140   IBM01140                  False    False    False    False    True     True     \n&#39;1141   IBM01141                  False    False    False    False    True     True     \n&#39;1142   IBM01142                  False    False    False    False    True     True     \n&#39;1143   IBM01143                  False    False    False    False    True     True     \n&#39;1144   IBM01144                  False    False    False    False    True     True     \n&#39;1145   IBM01145                  False    False    False    False    True     True     \n&#39;1146   IBM01146                  False    False    False    False    True     True     \n&#39;1147   IBM01147                  False    False    False    False    True     True     \n&#39;1148   IBM01148                  False    False    False    False    True     True     \n&#39;1149   IBM01149                  False    False    False    False    True     True     \n&#39;1200   utf-16                    False    True     False    False    False    True     \n&#39;1201   unicodeFFFE               False    False    False    False    False    True     \n&#39;1250   windows-1250              True     True     True     True     True     True     \n&#39;1251   windows-1251              True     True     True     True     True     True     \n&#39;1252   Windows-1252              True     True     True     True     True     True     \n&#39;1253   windows-1253              True     True     True     True     True     True     \n&#39;1254   windows-1254              True     True     True     True     True     True     \n&#39;1255   windows-1255              True     True     True     True     True     True     \n&#39;1256   windows-1256              True     True     True     True     True     True     \n&#39;1257   windows-1257              True     True     True     True     True     True     \n&#39;1258   windows-1258              True     True     True     True     True     True     \n&#39;1361   Johab                     False    False    False    False    False    True     \n&#39;10000  macintosh                 False    False    False    False    True     True     \n&#39;10001  x-mac-japanese            False    False    False    False    False    True     \n&#39;10002  x-mac-chinesetrad         False    False    False    False    False    True     \n&#39;10003  x-mac-korean              False    False    False    False    False    True     \n&#39;10004  x-mac-arabic              False    False    False    False    True     True     \n&#39;10005  x-mac-hebrew              False    False    False    False    True     True     \n&#39;10006  x-mac-greek               False    False    False    False    True     True     \n&#39;10007  x-mac-cyrillic            False    False    False    False    True     True     \n&#39;10008  x-mac-chinesesimp         False    False    False    False    False    True     \n&#39;10010  x-mac-romanian            False    False    False    False    True     True     \n&#39;10017  x-mac-ukrainian           False    False    False    False    True     True     \n&#39;10021  x-mac-thai                False    False    False    False    True     True     \n&#39;10029  x-mac-ce                  False    False    False    False    True     True     \n&#39;10079  x-mac-icelandic           False    False    False    False    True     True     \n&#39;10081  x-mac-turkish             False    False    False    False    True     True     \n&#39;10082  x-mac-croatian            False    False    False    False    True     True     \n&#39;12000  utf-32                    False    False    False    False    False    True     \n&#39;12001  utf-32BE                  False    False    False    False    False    True     \n&#39;20000  x-Chinese-CNS             False    False    False    False    False    True     \n&#39;20001  x-cp20001                 False    False    False    False    False    True     \n&#39;20002  x-Chinese-Eten            False    False    False    False    False    True     \n&#39;20003  x-cp20003                 False    False    False    False    False    True     \n&#39;20004  x-cp20004                 False    False    False    False    False    True     \n&#39;20005  x-cp20005                 False    False    False    False    False    True     \n&#39;20105  x-IA5                     False    False    False    False    True     True     \n&#39;20106  x-IA5-German              False    False    False    False    True     True     \n&#39;20107  x-IA5-Swedish             False    False    False    False    True     True     \n&#39;20108  x-IA5-Norwegian           False    False    False    False    True     True     \n&#39;20127  us-ascii                  False    False    True     True     True     True     \n&#39;20261  x-cp20261                 False    False    False    False    False    True     \n&#39;20269  x-cp20269                 False    False    False    False    True     True     \n&#39;20273  IBM273                    False    False    False    False    True     True     \n&#39;20277  IBM277                    False    False    False    False    True     True     \n&#39;20278  IBM278                    False    False    False    False    True     True     \n&#39;20280  IBM280                    False    False    False    False    True     True     \n&#39;20284  IBM284                    False    False    False    False    True     True     \n&#39;20285  IBM285                    False    False    False    False    True     True     \n&#39;20290  IBM290                    False    False    False    False    True     True     \n&#39;20297  IBM297                    False    False    False    False    True     True     \n&#39;20420  IBM420                    False    False    False    False    True     True     \n&#39;20423  IBM423                    False    False    False    False    True     True     \n&#39;20424  IBM424                    False    False    False    False    True     True     \n&#39;20833  x-EBCDIC-KoreanExtended   False    False    False    False    True     True     \n&#39;20838  IBM-Thai                  False    False    False    False    True     True     \n&#39;20866  koi8-r                    True     True     True     True     True     True     \n&#39;20871  IBM871                    False    False    False    False    True     True     \n&#39;20880  IBM880                    False    False    False    False    True     True     \n&#39;20905  IBM905                    False    False    False    False    True     True     \n&#39;20924  IBM00924                  False    False    False    False    True     True     \n&#39;20932  EUC-JP                    False    False    False    False    False    True     \n&#39;20936  x-cp20936                 False    False    False    False    False    True     \n&#39;20949  x-cp20949                 False    False    False    False    False    True     \n&#39;21025  cp1025                    False    False    False    False    True     True     \n&#39;21866  koi8-u                    True     True     True     True     True     True     \n&#39;28591  iso-8859-1                True     True     True     True     True     True     \n&#39;28592  iso-8859-2                True     True     True     True     True     True     \n&#39;28593  iso-8859-3                False    False    True     True     True     True     \n&#39;28594  iso-8859-4                True     True     True     True     True     True     \n&#39;28595  iso-8859-5                True     True     True     True     True     True     \n&#39;28596  iso-8859-6                True     True     True     True     True     True     \n&#39;28597  iso-8859-7                True     True     True     True     True     True     \n&#39;28598  iso-8859-8                True     True     False    False    True     True     \n&#39;28599  iso-8859-9                True     True     True     True     True     True     \n&#39;28603  iso-8859-13               False    False    True     True     True     True     \n&#39;28605  iso-8859-15               False    True     True     True     True     True     \n&#39;29001  x-Europa                  False    False    False    False    True     True     \n&#39;38598  iso-8859-8-i              True     True     True     True     True     True     \n&#39;50220  iso-2022-jp               False    False    True     True     False    True     \n&#39;50221  csISO2022JP               False    True     True     True     False    True     \n&#39;50222  iso-2022-jp               False    False    False    False    False    True     \n&#39;50225  iso-2022-kr               False    False    True     False    False    True     \n&#39;50227  x-cp50227                 False    False    False    False    False    True     \n&#39;51932  euc-jp                    True     True     True     True     False    True     \n&#39;51936  EUC-CN                    False    False    False    False    False    True     \n&#39;51949  euc-kr                    False    False    True     True     False    True     \n&#39;52936  hz-gb-2312                True     True     True     True     False    True     \n&#39;54936  GB18030                   True     True     True     True     False    True     \n&#39;57002  x-iscii-de                False    False    False    False    False    True     \n&#39;57003  x-iscii-be                False    False    False    False    False    True     \n&#39;57004  x-iscii-ta                False    False    False    False    False    True     \n&#39;57005  x-iscii-te                False    False    False    False    False    True     \n&#39;57006  x-iscii-as                False    False    False    False    False    True     \n&#39;57007  x-iscii-or                False    False    False    False    False    True     \n&#39;57008  x-iscii-ka                False    False    False    False    False    True     \n&#39;57009  x-iscii-ma                False    False    False    False    False    True     \n&#39;57010  x-iscii-gu                False    False    False    False    False    True     \n&#39;57011  x-iscii-pa                False    False    False    False    False    True     \n&#39;65000  utf-7                     False    False    True     True     False    True     \n&#39;65001  utf-8                     True     True     True     True     False    True     \n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_Unicode\">\r\n    \r\n            <a id=\"System_Text_Encoding_Unicode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Unicode</div>        \r\n          </div>\r\n    \r\n            <p>Gets an encoding for the UTF-16 format using the little endian byte order.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Text.Encoding Unicode { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a></div>\r\n                  </div>\r\n                  <p>An encoding for the UTF-16 format using the little endian byte order.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For information about the encodings supported by the .NET Framework and a discussion of which Unicode encoding to use, see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.text.unicodeencoding\" data-linktype=\"relative-path\">UnicodeEncoding</a> object that is returned by this property may not have the appropriate behavior for your app. It uses replacement fallback to replace each string that it cannot encode and each byte that it cannot decode with a question mark (&quot;?&quot;) character. Instead, you can call the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding__ctor_System_Boolean_System_Boolean_System_Boolean_\" data-linktype=\"relative-path\">System.Text.UnicodeEncoding.UnicodeEncoding(Boolean,Boolean,Boolean)</a> constructor to instantiate a little endian <a class=\"xref\" href=\"system.text.unicodeencoding\" data-linktype=\"relative-path\">UnicodeEncoding</a> object whose fallback is either an <a class=\"xref\" href=\"system.text.encoderfallbackexception\" data-linktype=\"relative-path\">EncoderFallbackException</a> or a <a class=\"xref\" href=\"system.text.decoderfallbackexception\" data-linktype=\"relative-path\">DecoderFallbackException</a>, as the following example illustrates.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Text.Encoding.Unicode#2\">Imports System.Text\n\nModule Example\n   Public Sub Main()\n      Dim bytes() As Byte = { &amp;h20, &amp;h00, &amp;h01, &amp;hD8, &amp;h68, &amp;h00, &amp;hA7, &amp;h00}\n      Dim enc As Encoding = New UnicodeEncoding(False, True, True)\n      \n      Try\n         Dim value As String = enc.GetString(bytes)\n         Console.WriteLine()\n         Console.WriteLine(&quot;&#39;{0}&#39;&quot;, value)\n      Catch e As DecoderFallbackException      \n         Console.WriteLine(&quot;Unable to decode {0} at index {1}&quot;, \n                           ShowBytes(e.BytesUnknown), e.Index)\n      End Try\n   End Sub\n   \n   Private Function ShowBytes(bytes As Byte()) As String\n      Dim returnString As String = Nothing\n      For Each byteValue In bytes\n         returnString += String.Format(&quot;0x{0:X2} &quot;, byteValue)\n      Next\n      Return returnString.Trim()\n   End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;       Unable to decode 0x01 0xD8 at index 4\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.Encoding.Unicode#2\">using System;\nusing System.Text;\n\npublic class Example\n{\n   public static void Main()\n   {\n      byte[] bytes = { 0x20, 0x00, 0x01, 0xD8, 0x68, 0x00, 0xA7, 0x00 };\n      Encoding enc = new UnicodeEncoding(false, true, true);\n      \n      try {\n         string value = enc.GetString(bytes);\n         Console.WriteLine();\n         Console.WriteLine(&quot;&#39;{0}&#39;&quot;, value);\n      }\n      catch (DecoderFallbackException e) {      \n         Console.WriteLine(&quot;Unable to decode {0} at index {1}&quot;, \n                           ShowBytes(e.BytesUnknown), e.Index);\n      }\n   }\n\n   private static string ShowBytes(byte[] bytes) \n   {\n      string returnString = null;\n      foreach (var byteValue in bytes)\n         returnString += String.Format(&quot;0x{0:X2} &quot;, byteValue);\n\n      return returnString.Trim();\n   }\n}\n// The example displays the following output:\n//        Unable to decode 0x01 0xD8 at index 4\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines the number of bytes required to encode a character array, encodes the characters, and displays the resulting bytes.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Text.Encoding.GetBytes_CharArr#1\">Imports System\nImports System.Text\nImports Microsoft.VisualBasic\n\nPublic Class SamplesEncoding   \n\n   Public Shared Sub Main()\n\n      &#39; The characters to encode:\n      &#39;    Latin Small Letter Z (U+007A)\n      &#39;    Latin Small Letter A (U+0061)\n      &#39;    Combining Breve (U+0306)\n      &#39;    Latin Small Letter AE With Acute (U+01FD)\n      &#39;    Greek Small Letter Beta (U+03B2)\n      &#39;    a high-surrogate value (U+D8FF)\n      &#39;    a low-surrogate value (U+DCFF)\n      Dim myChars() As Char = {&quot;z&quot;c, &quot;a&quot;c, ChrW(&amp;H0306), ChrW(&amp;H01FD), ChrW(&amp;H03B2), ChrW(&amp;HD8FF), ChrW(&amp;HDCFF)}\n \n\n      &#39; Get different encodings.\n      Dim u7 As Encoding = Encoding.UTF7\n      Dim u8 As Encoding = Encoding.UTF8\n      Dim u16LE As Encoding = Encoding.Unicode\n      Dim u16BE As Encoding = Encoding.BigEndianUnicode\n      Dim u32 As Encoding = Encoding.UTF32\n\n      &#39; Encode the entire array, and print out the counts and the resulting bytes.\n      PrintCountsAndBytes(myChars, u7)\n      PrintCountsAndBytes(myChars, u8)\n      PrintCountsAndBytes(myChars, u16LE)\n      PrintCountsAndBytes(myChars, u16BE)\n      PrintCountsAndBytes(myChars, u32)\n\n   End Sub &#39;Main\n\n\n   Public Shared Sub PrintCountsAndBytes(chars() As Char, enc As Encoding)\n\n      &#39; Display the name of the encoding used.\n      Console.Write(&quot;{0,-30} :&quot;, enc.ToString())\n\n      &#39; Display the exact byte count.\n      Dim iBC As Integer = enc.GetByteCount(chars)\n      Console.Write(&quot; {0,-3}&quot;, iBC)\n\n      &#39; Display the maximum byte count.\n      Dim iMBC As Integer = enc.GetMaxByteCount(chars.Length)\n      Console.Write(&quot; {0,-3} :&quot;, iMBC)\n\n      &#39; Encode the array of chars.\n      Dim bytes As Byte() = enc.GetBytes(chars)\n\n      &#39; Display all the encoded bytes.\n      PrintHexBytes(bytes)\n\n   End Sub &#39;PrintCountsAndBytes\n\n\n   Public Shared Sub PrintHexBytes(bytes() As Byte)\n\n      If bytes Is Nothing OrElse bytes.Length = 0 Then\n         Console.WriteLine(&quot;&lt;none&gt;&quot;)\n      Else\n         Dim i As Integer\n         For i = 0 To bytes.Length - 1\n            Console.Write(&quot;{0:X2} &quot;, bytes(i))\n         Next i\n         Console.WriteLine()\n      End If\n\n   End Sub &#39;PrintHexBytes \n\nEnd Class &#39;SamplesEncoding\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;System.Text.UTF7Encoding       : 18  23  :7A 61 2B 41 77 59 42 2F 51 4F 79 32 50 2F 63 2F 77 2D\n&#39;System.Text.UTF8Encoding       : 12  24  :7A 61 CC 86 C7 BD CE B2 F1 8F B3 BF\n&#39;System.Text.UnicodeEncoding    : 14  16  :7A 00 61 00 06 03 FD 01 B2 03 FF D8 FF DC\n&#39;System.Text.UnicodeEncoding    : 14  16  :00 7A 00 61 03 06 01 FD 03 B2 D8 FF DC FF\n&#39;System.Text.UTF32Encoding      : 24  32  :7A 00 00 00 61 00 00 00 06 03 00 00 FD 01 00 00 B2 03 00 00 FF FC 04 00\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.Encoding.GetBytes_CharArr#1\">using System;\nusing System.Text;\n\npublic class SamplesEncoding  {\n\n   public static void Main()  {\n\n      // The characters to encode:\n      //    Latin Small Letter Z (U+007A)\n      //    Latin Small Letter A (U+0061)\n      //    Combining Breve (U+0306)\n      //    Latin Small Letter AE With Acute (U+01FD)\n      //    Greek Small Letter Beta (U+03B2)\n      //    a high-surrogate value (U+D8FF)\n      //    a low-surrogate value (U+DCFF)\n      char[] myChars = new char[] { &#39;z&#39;, &#39;a&#39;, &#39;\\u0306&#39;, &#39;\\u01FD&#39;, &#39;\\u03B2&#39;, &#39;\\uD8FF&#39;, &#39;\\uDCFF&#39; };\n\n      // Get different encodings.\n      Encoding  u7    = Encoding.UTF7;\n      Encoding  u8    = Encoding.UTF8;\n      Encoding  u16LE = Encoding.Unicode;\n      Encoding  u16BE = Encoding.BigEndianUnicode;\n      Encoding  u32   = Encoding.UTF32;\n\n      // Encode the entire array, and print out the counts and the resulting bytes.\n      PrintCountsAndBytes( myChars, u7 );\n      PrintCountsAndBytes( myChars, u8 );\n      PrintCountsAndBytes( myChars, u16LE );\n      PrintCountsAndBytes( myChars, u16BE );\n      PrintCountsAndBytes( myChars, u32 );\n\n   }\n\n\n   public static void PrintCountsAndBytes( char[] chars, Encoding enc )  {\n\n      // Display the name of the encoding used.\n      Console.Write( &quot;{0,-30} :&quot;, enc.ToString() );\n\n      // Display the exact byte count.\n      int iBC  = enc.GetByteCount( chars );\n      Console.Write( &quot; {0,-3}&quot;, iBC );\n\n      // Display the maximum byte count.\n      int iMBC = enc.GetMaxByteCount( chars.Length );\n      Console.Write( &quot; {0,-3} :&quot;, iMBC );\n\n      // Encode the array of chars.\n      byte[] bytes = enc.GetBytes( chars );\n\n      // Display all the encoded bytes.\n      PrintHexBytes( bytes );\n\n   }\n\n\n   public static void PrintHexBytes( byte[] bytes )  {\n\n      if (( bytes == null ) || ( bytes.Length == 0 ))\n         Console.WriteLine( &quot;&lt;none&gt;&quot; );\n      else  {\n         for ( int i = 0; i &lt; bytes.Length; i++ )\n            Console.Write( &quot;{0:X2} &quot;, bytes[i] );\n         Console.WriteLine();\n      }\n\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nSystem.Text.UTF7Encoding       : 18  23  :7A 61 2B 41 77 59 42 2F 51 4F 79 32 50 2F 63 2F 77 2D\nSystem.Text.UTF8Encoding       : 12  24  :7A 61 CC 86 C7 BD CE B2 F1 8F B3 BF\nSystem.Text.UnicodeEncoding    : 14  16  :7A 00 61 00 06 03 FD 01 B2 03 FF D8 FF DC\nSystem.Text.UnicodeEncoding    : 14  16  :00 7A 00 61 03 06 01 FD 03 B2 D8 FF DC FF\nSystem.Text.UTF32Encoding      : 24  32  :7A 00 00 00 61 00 00 00 06 03 00 00 FD 01 00 00 B2 03 00 00 FF FC 04 00\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.Encoding.GetBytes_CharArr#1\">using namespace System;\nusing namespace System::Text;\nvoid PrintCountsAndBytes( array&lt;Char&gt;^chars, Encoding^ enc );\nvoid PrintHexBytes( array&lt;Byte&gt;^bytes );\nint main()\n{\n   \n   // The characters to encode:\n   //    Latin Small Letter Z (U+007A)\n   //    Latin Small Letter A (U+0061)\n   //    Combining Breve (U+0306)\n   //    Latin Small Letter AE With Acute (U+01FD)\n   //    Greek Small Letter Beta (U+03B2)\n   //    a high-surrogate value (U+D8FF)\n   //    a low-surrogate value (U+DCFF)\n   array&lt;Char&gt;^myChars = gcnew array&lt;Char&gt;{\n      L&#39;z&#39;,&#39;a&#39;,L&#39;\\u0306&#39;,L&#39;\\u01FD&#39;,L&#39;\\u03B2&#39;,L&#39;\\xD8FF&#39;,L&#39;\\xDCFF&#39;\n   };\n   \n   // Get different encodings.\n   Encoding^ u7 = Encoding::UTF7;\n   Encoding^ u8 = Encoding::UTF8;\n   Encoding^ u16LE = Encoding::Unicode;\n   Encoding^ u16BE = Encoding::BigEndianUnicode;\n   Encoding^ u32 = Encoding::UTF32;\n   \n   // Encode the entire array, and print out the counts and the resulting bytes.\n   PrintCountsAndBytes( myChars, u7 );\n   PrintCountsAndBytes( myChars, u8 );\n   PrintCountsAndBytes( myChars, u16LE );\n   PrintCountsAndBytes( myChars, u16BE );\n   PrintCountsAndBytes( myChars, u32 );\n}\n\nvoid PrintCountsAndBytes( array&lt;Char&gt;^chars, Encoding^ enc )\n{\n   \n   // Display the name of the encoding used.\n   Console::Write( &quot;{0,-30} :&quot;, enc );\n   \n   // Display the exact byte count.\n   int iBC = enc-&gt;GetByteCount( chars );\n   Console::Write( &quot; {0,-3}&quot;, iBC );\n   \n   // Display the maximum byte count.\n   int iMBC = enc-&gt;GetMaxByteCount( chars-&gt;Length );\n   Console::Write( &quot; {0,-3} :&quot;, iMBC );\n   \n   // Encode the array of chars.\n   array&lt;Byte&gt;^bytes = enc-&gt;GetBytes( chars );\n   \n   // Display all the encoded bytes.\n   PrintHexBytes( bytes );\n}\n\nvoid PrintHexBytes( array&lt;Byte&gt;^bytes )\n{\n   if ( (bytes == nullptr) || (bytes-&gt;Length == 0) )\n      Console::WriteLine( &quot;&lt;none&gt;&quot; );\n   else\n   {\n      for ( int i = 0; i &lt; bytes-&gt;Length; i++ )\n         Console::Write( &quot;{0:X2} &quot;, bytes[ i ] );\n      Console::WriteLine();\n   }\n}\n\n/* \nThis code produces the following output.\n\nSystem.Text.UTF7Encoding       : 18  23  :7A 61 2B 41 77 59 42 2F 51 4F 79 32 50 2F 63 2F 77 2D\nSystem.Text.UTF8Encoding       : 12  24  :7A 61 CC 86 C7 BD CE B2 F1 8F B3 BF\nSystem.Text.UnicodeEncoding    : 14  16  :7A 00 61 00 06 03 FD 01 B2 03 FF D8 FF DC\nSystem.Text.UnicodeEncoding    : 14  16  :00 7A 00 61 03 06 01 FD 03 B2 D8 FF DC FF\nSystem.Text.UTF32Encoding      : 24  32  :7A 00 00 00 61 00 00 00 06 03 00 00 FD 01 00 00 B2 03 00 00 FF FC 04 00\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_UTF32\">\r\n    \r\n            <a id=\"System_Text_Encoding_UTF32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UTF32</div>        \r\n          </div>\r\n    \r\n            <p>Gets an encoding for the UTF-32 format using the little endian byte order.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Text.Encoding UTF32 { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a></div>\r\n                  </div>\r\n                  <p>An  encoding object for the UTF-32 format using the little endian byte order.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a> object that is returned by this property may not have the appropriate behavior for your app. It uses replacement fallback to replace each string that it cannot encode and each byte that it cannot decode with the Unicode REPLACEMENT CHARACTER (U+FFFE). Instead, you can call the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding__ctor_System_Boolean_System_Boolean_System_Boolean_\" data-linktype=\"relative-path\">System.Text.UTF32Encoding.UTF32Encoding(Boolean,Boolean,Boolean)</a> constructor to instantiate a <a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a> object whose fallback is either an <a class=\"xref\" href=\"system.text.encoderfallbackexception\" data-linktype=\"relative-path\">EncoderFallbackException</a> or a <a class=\"xref\" href=\"system.text.decoderfallbackexception\" data-linktype=\"relative-path\">DecoderFallbackException</a>, as the following example illustrates.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Text.Encoding.UTF32#1\">Imports System.Text\n\nModule Example\n   Public Sub Main()\n      Dim enc As Encoding = New UTF32Encoding(False, True, True)\n      Dim value As String = String.Format(&quot;{0} {1}{2} {3}&quot;, \n                            ChrW(&amp;h00C4), ChrW(&amp;hD802), ChrW(&amp;h0033), ChrW(&amp;h00AE))\n      \n      Try\n         Dim bytes() As Byte = enc.GetBytes(value)\n         For Each byt As Byte In bytes\n            Console.Write(&quot;{0:X2} &quot;, byt)\n         Next       \n         Console.WriteLine()\n         Dim value2 As String = enc.GetString(bytes)\n         Console.WriteLine(value2)\n      Catch e As EncoderFallbackException\n         Console.WriteLine(&quot;Unable to encode {0} at index {1}&quot;, \n                           If(e.IsUnknownSurrogate(), \n                              String.Format(&quot;U+{0:X4} U+{1:X4}&quot;, \n                                            Convert.ToUInt16(e.CharUnknownHigh),\n                                            Convert.ToUInt16(e.CharUnknownLow)),\n                              String.Format(&quot;U+{0:X4}&quot;, \n                                            Convert.ToUInt16(e.CharUnknown))),\n                           e.Index)\n      End Try\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Unable to encode U+D802 at index 2\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.Encoding.UTF32#1\">using System;\nusing System.Text;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Encoding enc = new UTF32Encoding(false, true, true);\n      string value = &quot;\\u00C4 \\uD802\\u0033 \\u00AE&quot;; \n\n      try {\n         byte[] bytes= enc.GetBytes(value);\n         foreach (var byt in bytes)\n            Console.Write(&quot;{0:X2} &quot;, byt);\n         Console.WriteLine();\n\n         string value2 = enc.GetString(bytes);\n         Console.WriteLine(value2);\n      }\n      catch (EncoderFallbackException e) {\n         Console.WriteLine(&quot;Unable to encode {0} at index {1}&quot;, \n                           e.IsUnknownSurrogate() ? \n                              String.Format(&quot;U+{0:X4} U+{1:X4}&quot;, \n                                            Convert.ToUInt16(e.CharUnknownHigh),\n                                            Convert.ToUInt16(e.CharUnknownLow)) :\n                              String.Format(&quot;U+{0:X4}&quot;, \n                                            Convert.ToUInt16(e.CharUnknown)),\n                           e.Index);\n      }                     \n   }\n}\n// The example displays the following output:\n//        Unable to encode U+D802 at index 2\n</code></pre><p> For a discussion of little endian byte order, see the <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> class topic.  </p>\n<p> For information about the encodings supported by the .NET Framework and a discussion of which Unicode encoding to use, see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines the number of bytes required to encode a character array, encodes the characters, and displays the resulting bytes.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Text.Encoding.GetBytes_CharArr#1\">Imports System\nImports System.Text\nImports Microsoft.VisualBasic\n\nPublic Class SamplesEncoding   \n\n   Public Shared Sub Main()\n\n      &#39; The characters to encode:\n      &#39;    Latin Small Letter Z (U+007A)\n      &#39;    Latin Small Letter A (U+0061)\n      &#39;    Combining Breve (U+0306)\n      &#39;    Latin Small Letter AE With Acute (U+01FD)\n      &#39;    Greek Small Letter Beta (U+03B2)\n      &#39;    a high-surrogate value (U+D8FF)\n      &#39;    a low-surrogate value (U+DCFF)\n      Dim myChars() As Char = {&quot;z&quot;c, &quot;a&quot;c, ChrW(&amp;H0306), ChrW(&amp;H01FD), ChrW(&amp;H03B2), ChrW(&amp;HD8FF), ChrW(&amp;HDCFF)}\n \n\n      &#39; Get different encodings.\n      Dim u7 As Encoding = Encoding.UTF7\n      Dim u8 As Encoding = Encoding.UTF8\n      Dim u16LE As Encoding = Encoding.Unicode\n      Dim u16BE As Encoding = Encoding.BigEndianUnicode\n      Dim u32 As Encoding = Encoding.UTF32\n\n      &#39; Encode the entire array, and print out the counts and the resulting bytes.\n      PrintCountsAndBytes(myChars, u7)\n      PrintCountsAndBytes(myChars, u8)\n      PrintCountsAndBytes(myChars, u16LE)\n      PrintCountsAndBytes(myChars, u16BE)\n      PrintCountsAndBytes(myChars, u32)\n\n   End Sub &#39;Main\n\n\n   Public Shared Sub PrintCountsAndBytes(chars() As Char, enc As Encoding)\n\n      &#39; Display the name of the encoding used.\n      Console.Write(&quot;{0,-30} :&quot;, enc.ToString())\n\n      &#39; Display the exact byte count.\n      Dim iBC As Integer = enc.GetByteCount(chars)\n      Console.Write(&quot; {0,-3}&quot;, iBC)\n\n      &#39; Display the maximum byte count.\n      Dim iMBC As Integer = enc.GetMaxByteCount(chars.Length)\n      Console.Write(&quot; {0,-3} :&quot;, iMBC)\n\n      &#39; Encode the array of chars.\n      Dim bytes As Byte() = enc.GetBytes(chars)\n\n      &#39; Display all the encoded bytes.\n      PrintHexBytes(bytes)\n\n   End Sub &#39;PrintCountsAndBytes\n\n\n   Public Shared Sub PrintHexBytes(bytes() As Byte)\n\n      If bytes Is Nothing OrElse bytes.Length = 0 Then\n         Console.WriteLine(&quot;&lt;none&gt;&quot;)\n      Else\n         Dim i As Integer\n         For i = 0 To bytes.Length - 1\n            Console.Write(&quot;{0:X2} &quot;, bytes(i))\n         Next i\n         Console.WriteLine()\n      End If\n\n   End Sub &#39;PrintHexBytes \n\nEnd Class &#39;SamplesEncoding\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;System.Text.UTF7Encoding       : 18  23  :7A 61 2B 41 77 59 42 2F 51 4F 79 32 50 2F 63 2F 77 2D\n&#39;System.Text.UTF8Encoding       : 12  24  :7A 61 CC 86 C7 BD CE B2 F1 8F B3 BF\n&#39;System.Text.UnicodeEncoding    : 14  16  :7A 00 61 00 06 03 FD 01 B2 03 FF D8 FF DC\n&#39;System.Text.UnicodeEncoding    : 14  16  :00 7A 00 61 03 06 01 FD 03 B2 D8 FF DC FF\n&#39;System.Text.UTF32Encoding      : 24  32  :7A 00 00 00 61 00 00 00 06 03 00 00 FD 01 00 00 B2 03 00 00 FF FC 04 00\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.Encoding.GetBytes_CharArr#1\">using System;\nusing System.Text;\n\npublic class SamplesEncoding  {\n\n   public static void Main()  {\n\n      // The characters to encode:\n      //    Latin Small Letter Z (U+007A)\n      //    Latin Small Letter A (U+0061)\n      //    Combining Breve (U+0306)\n      //    Latin Small Letter AE With Acute (U+01FD)\n      //    Greek Small Letter Beta (U+03B2)\n      //    a high-surrogate value (U+D8FF)\n      //    a low-surrogate value (U+DCFF)\n      char[] myChars = new char[] { &#39;z&#39;, &#39;a&#39;, &#39;\\u0306&#39;, &#39;\\u01FD&#39;, &#39;\\u03B2&#39;, &#39;\\uD8FF&#39;, &#39;\\uDCFF&#39; };\n\n      // Get different encodings.\n      Encoding  u7    = Encoding.UTF7;\n      Encoding  u8    = Encoding.UTF8;\n      Encoding  u16LE = Encoding.Unicode;\n      Encoding  u16BE = Encoding.BigEndianUnicode;\n      Encoding  u32   = Encoding.UTF32;\n\n      // Encode the entire array, and print out the counts and the resulting bytes.\n      PrintCountsAndBytes( myChars, u7 );\n      PrintCountsAndBytes( myChars, u8 );\n      PrintCountsAndBytes( myChars, u16LE );\n      PrintCountsAndBytes( myChars, u16BE );\n      PrintCountsAndBytes( myChars, u32 );\n\n   }\n\n\n   public static void PrintCountsAndBytes( char[] chars, Encoding enc )  {\n\n      // Display the name of the encoding used.\n      Console.Write( &quot;{0,-30} :&quot;, enc.ToString() );\n\n      // Display the exact byte count.\n      int iBC  = enc.GetByteCount( chars );\n      Console.Write( &quot; {0,-3}&quot;, iBC );\n\n      // Display the maximum byte count.\n      int iMBC = enc.GetMaxByteCount( chars.Length );\n      Console.Write( &quot; {0,-3} :&quot;, iMBC );\n\n      // Encode the array of chars.\n      byte[] bytes = enc.GetBytes( chars );\n\n      // Display all the encoded bytes.\n      PrintHexBytes( bytes );\n\n   }\n\n\n   public static void PrintHexBytes( byte[] bytes )  {\n\n      if (( bytes == null ) || ( bytes.Length == 0 ))\n         Console.WriteLine( &quot;&lt;none&gt;&quot; );\n      else  {\n         for ( int i = 0; i &lt; bytes.Length; i++ )\n            Console.Write( &quot;{0:X2} &quot;, bytes[i] );\n         Console.WriteLine();\n      }\n\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nSystem.Text.UTF7Encoding       : 18  23  :7A 61 2B 41 77 59 42 2F 51 4F 79 32 50 2F 63 2F 77 2D\nSystem.Text.UTF8Encoding       : 12  24  :7A 61 CC 86 C7 BD CE B2 F1 8F B3 BF\nSystem.Text.UnicodeEncoding    : 14  16  :7A 00 61 00 06 03 FD 01 B2 03 FF D8 FF DC\nSystem.Text.UnicodeEncoding    : 14  16  :00 7A 00 61 03 06 01 FD 03 B2 D8 FF DC FF\nSystem.Text.UTF32Encoding      : 24  32  :7A 00 00 00 61 00 00 00 06 03 00 00 FD 01 00 00 B2 03 00 00 FF FC 04 00\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.Encoding.GetBytes_CharArr#1\">using namespace System;\nusing namespace System::Text;\nvoid PrintCountsAndBytes( array&lt;Char&gt;^chars, Encoding^ enc );\nvoid PrintHexBytes( array&lt;Byte&gt;^bytes );\nint main()\n{\n   \n   // The characters to encode:\n   //    Latin Small Letter Z (U+007A)\n   //    Latin Small Letter A (U+0061)\n   //    Combining Breve (U+0306)\n   //    Latin Small Letter AE With Acute (U+01FD)\n   //    Greek Small Letter Beta (U+03B2)\n   //    a high-surrogate value (U+D8FF)\n   //    a low-surrogate value (U+DCFF)\n   array&lt;Char&gt;^myChars = gcnew array&lt;Char&gt;{\n      L&#39;z&#39;,&#39;a&#39;,L&#39;\\u0306&#39;,L&#39;\\u01FD&#39;,L&#39;\\u03B2&#39;,L&#39;\\xD8FF&#39;,L&#39;\\xDCFF&#39;\n   };\n   \n   // Get different encodings.\n   Encoding^ u7 = Encoding::UTF7;\n   Encoding^ u8 = Encoding::UTF8;\n   Encoding^ u16LE = Encoding::Unicode;\n   Encoding^ u16BE = Encoding::BigEndianUnicode;\n   Encoding^ u32 = Encoding::UTF32;\n   \n   // Encode the entire array, and print out the counts and the resulting bytes.\n   PrintCountsAndBytes( myChars, u7 );\n   PrintCountsAndBytes( myChars, u8 );\n   PrintCountsAndBytes( myChars, u16LE );\n   PrintCountsAndBytes( myChars, u16BE );\n   PrintCountsAndBytes( myChars, u32 );\n}\n\nvoid PrintCountsAndBytes( array&lt;Char&gt;^chars, Encoding^ enc )\n{\n   \n   // Display the name of the encoding used.\n   Console::Write( &quot;{0,-30} :&quot;, enc );\n   \n   // Display the exact byte count.\n   int iBC = enc-&gt;GetByteCount( chars );\n   Console::Write( &quot; {0,-3}&quot;, iBC );\n   \n   // Display the maximum byte count.\n   int iMBC = enc-&gt;GetMaxByteCount( chars-&gt;Length );\n   Console::Write( &quot; {0,-3} :&quot;, iMBC );\n   \n   // Encode the array of chars.\n   array&lt;Byte&gt;^bytes = enc-&gt;GetBytes( chars );\n   \n   // Display all the encoded bytes.\n   PrintHexBytes( bytes );\n}\n\nvoid PrintHexBytes( array&lt;Byte&gt;^bytes )\n{\n   if ( (bytes == nullptr) || (bytes-&gt;Length == 0) )\n      Console::WriteLine( &quot;&lt;none&gt;&quot; );\n   else\n   {\n      for ( int i = 0; i &lt; bytes-&gt;Length; i++ )\n         Console::Write( &quot;{0:X2} &quot;, bytes[ i ] );\n      Console::WriteLine();\n   }\n}\n\n/* \nThis code produces the following output.\n\nSystem.Text.UTF7Encoding       : 18  23  :7A 61 2B 41 77 59 42 2F 51 4F 79 32 50 2F 63 2F 77 2D\nSystem.Text.UTF8Encoding       : 12  24  :7A 61 CC 86 C7 BD CE B2 F1 8F B3 BF\nSystem.Text.UnicodeEncoding    : 14  16  :7A 00 61 00 06 03 FD 01 B2 03 FF D8 FF DC\nSystem.Text.UnicodeEncoding    : 14  16  :00 7A 00 61 03 06 01 FD 03 B2 D8 FF DC FF\nSystem.Text.UTF32Encoding      : 24  32  :7A 00 00 00 61 00 00 00 06 03 00 00 FD 01 00 00 B2 03 00 00 FF FC 04 00\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_UTF7\">\r\n    \r\n            <a id=\"System_Text_Encoding_UTF7_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UTF7</div>        \r\n          </div>\r\n    \r\n            <p>Gets an encoding for the UTF-7 format.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Text.Encoding UTF7 { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a></div>\r\n                  </div>\r\n                  <p>An encoding for the UTF-7 format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>UTF-7 encoding is used primarily in environments that historically have been restricted to 7 bits, such as NNTP and some email applications. Because of issues with robustness and security, you should not use UTF7 encoding in 8-bit environments where UTF-8 encoding can be used instead.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines the number of bytes required to encode a character array, encodes the characters, and displays the resulting bytes.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Text.Encoding.GetBytes_CharArr#1\">Imports System\nImports System.Text\nImports Microsoft.VisualBasic\n\nPublic Class SamplesEncoding   \n\n   Public Shared Sub Main()\n\n      &#39; The characters to encode:\n      &#39;    Latin Small Letter Z (U+007A)\n      &#39;    Latin Small Letter A (U+0061)\n      &#39;    Combining Breve (U+0306)\n      &#39;    Latin Small Letter AE With Acute (U+01FD)\n      &#39;    Greek Small Letter Beta (U+03B2)\n      &#39;    a high-surrogate value (U+D8FF)\n      &#39;    a low-surrogate value (U+DCFF)\n      Dim myChars() As Char = {&quot;z&quot;c, &quot;a&quot;c, ChrW(&amp;H0306), ChrW(&amp;H01FD), ChrW(&amp;H03B2), ChrW(&amp;HD8FF), ChrW(&amp;HDCFF)}\n \n\n      &#39; Get different encodings.\n      Dim u7 As Encoding = Encoding.UTF7\n      Dim u8 As Encoding = Encoding.UTF8\n      Dim u16LE As Encoding = Encoding.Unicode\n      Dim u16BE As Encoding = Encoding.BigEndianUnicode\n      Dim u32 As Encoding = Encoding.UTF32\n\n      &#39; Encode the entire array, and print out the counts and the resulting bytes.\n      PrintCountsAndBytes(myChars, u7)\n      PrintCountsAndBytes(myChars, u8)\n      PrintCountsAndBytes(myChars, u16LE)\n      PrintCountsAndBytes(myChars, u16BE)\n      PrintCountsAndBytes(myChars, u32)\n\n   End Sub &#39;Main\n\n\n   Public Shared Sub PrintCountsAndBytes(chars() As Char, enc As Encoding)\n\n      &#39; Display the name of the encoding used.\n      Console.Write(&quot;{0,-30} :&quot;, enc.ToString())\n\n      &#39; Display the exact byte count.\n      Dim iBC As Integer = enc.GetByteCount(chars)\n      Console.Write(&quot; {0,-3}&quot;, iBC)\n\n      &#39; Display the maximum byte count.\n      Dim iMBC As Integer = enc.GetMaxByteCount(chars.Length)\n      Console.Write(&quot; {0,-3} :&quot;, iMBC)\n\n      &#39; Encode the array of chars.\n      Dim bytes As Byte() = enc.GetBytes(chars)\n\n      &#39; Display all the encoded bytes.\n      PrintHexBytes(bytes)\n\n   End Sub &#39;PrintCountsAndBytes\n\n\n   Public Shared Sub PrintHexBytes(bytes() As Byte)\n\n      If bytes Is Nothing OrElse bytes.Length = 0 Then\n         Console.WriteLine(&quot;&lt;none&gt;&quot;)\n      Else\n         Dim i As Integer\n         For i = 0 To bytes.Length - 1\n            Console.Write(&quot;{0:X2} &quot;, bytes(i))\n         Next i\n         Console.WriteLine()\n      End If\n\n   End Sub &#39;PrintHexBytes \n\nEnd Class &#39;SamplesEncoding\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;System.Text.UTF7Encoding       : 18  23  :7A 61 2B 41 77 59 42 2F 51 4F 79 32 50 2F 63 2F 77 2D\n&#39;System.Text.UTF8Encoding       : 12  24  :7A 61 CC 86 C7 BD CE B2 F1 8F B3 BF\n&#39;System.Text.UnicodeEncoding    : 14  16  :7A 00 61 00 06 03 FD 01 B2 03 FF D8 FF DC\n&#39;System.Text.UnicodeEncoding    : 14  16  :00 7A 00 61 03 06 01 FD 03 B2 D8 FF DC FF\n&#39;System.Text.UTF32Encoding      : 24  32  :7A 00 00 00 61 00 00 00 06 03 00 00 FD 01 00 00 B2 03 00 00 FF FC 04 00\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.Encoding.GetBytes_CharArr#1\">using System;\nusing System.Text;\n\npublic class SamplesEncoding  {\n\n   public static void Main()  {\n\n      // The characters to encode:\n      //    Latin Small Letter Z (U+007A)\n      //    Latin Small Letter A (U+0061)\n      //    Combining Breve (U+0306)\n      //    Latin Small Letter AE With Acute (U+01FD)\n      //    Greek Small Letter Beta (U+03B2)\n      //    a high-surrogate value (U+D8FF)\n      //    a low-surrogate value (U+DCFF)\n      char[] myChars = new char[] { &#39;z&#39;, &#39;a&#39;, &#39;\\u0306&#39;, &#39;\\u01FD&#39;, &#39;\\u03B2&#39;, &#39;\\uD8FF&#39;, &#39;\\uDCFF&#39; };\n\n      // Get different encodings.\n      Encoding  u7    = Encoding.UTF7;\n      Encoding  u8    = Encoding.UTF8;\n      Encoding  u16LE = Encoding.Unicode;\n      Encoding  u16BE = Encoding.BigEndianUnicode;\n      Encoding  u32   = Encoding.UTF32;\n\n      // Encode the entire array, and print out the counts and the resulting bytes.\n      PrintCountsAndBytes( myChars, u7 );\n      PrintCountsAndBytes( myChars, u8 );\n      PrintCountsAndBytes( myChars, u16LE );\n      PrintCountsAndBytes( myChars, u16BE );\n      PrintCountsAndBytes( myChars, u32 );\n\n   }\n\n\n   public static void PrintCountsAndBytes( char[] chars, Encoding enc )  {\n\n      // Display the name of the encoding used.\n      Console.Write( &quot;{0,-30} :&quot;, enc.ToString() );\n\n      // Display the exact byte count.\n      int iBC  = enc.GetByteCount( chars );\n      Console.Write( &quot; {0,-3}&quot;, iBC );\n\n      // Display the maximum byte count.\n      int iMBC = enc.GetMaxByteCount( chars.Length );\n      Console.Write( &quot; {0,-3} :&quot;, iMBC );\n\n      // Encode the array of chars.\n      byte[] bytes = enc.GetBytes( chars );\n\n      // Display all the encoded bytes.\n      PrintHexBytes( bytes );\n\n   }\n\n\n   public static void PrintHexBytes( byte[] bytes )  {\n\n      if (( bytes == null ) || ( bytes.Length == 0 ))\n         Console.WriteLine( &quot;&lt;none&gt;&quot; );\n      else  {\n         for ( int i = 0; i &lt; bytes.Length; i++ )\n            Console.Write( &quot;{0:X2} &quot;, bytes[i] );\n         Console.WriteLine();\n      }\n\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nSystem.Text.UTF7Encoding       : 18  23  :7A 61 2B 41 77 59 42 2F 51 4F 79 32 50 2F 63 2F 77 2D\nSystem.Text.UTF8Encoding       : 12  24  :7A 61 CC 86 C7 BD CE B2 F1 8F B3 BF\nSystem.Text.UnicodeEncoding    : 14  16  :7A 00 61 00 06 03 FD 01 B2 03 FF D8 FF DC\nSystem.Text.UnicodeEncoding    : 14  16  :00 7A 00 61 03 06 01 FD 03 B2 D8 FF DC FF\nSystem.Text.UTF32Encoding      : 24  32  :7A 00 00 00 61 00 00 00 06 03 00 00 FD 01 00 00 B2 03 00 00 FF FC 04 00\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.Encoding.GetBytes_CharArr#1\">using namespace System;\nusing namespace System::Text;\nvoid PrintCountsAndBytes( array&lt;Char&gt;^chars, Encoding^ enc );\nvoid PrintHexBytes( array&lt;Byte&gt;^bytes );\nint main()\n{\n   \n   // The characters to encode:\n   //    Latin Small Letter Z (U+007A)\n   //    Latin Small Letter A (U+0061)\n   //    Combining Breve (U+0306)\n   //    Latin Small Letter AE With Acute (U+01FD)\n   //    Greek Small Letter Beta (U+03B2)\n   //    a high-surrogate value (U+D8FF)\n   //    a low-surrogate value (U+DCFF)\n   array&lt;Char&gt;^myChars = gcnew array&lt;Char&gt;{\n      L&#39;z&#39;,&#39;a&#39;,L&#39;\\u0306&#39;,L&#39;\\u01FD&#39;,L&#39;\\u03B2&#39;,L&#39;\\xD8FF&#39;,L&#39;\\xDCFF&#39;\n   };\n   \n   // Get different encodings.\n   Encoding^ u7 = Encoding::UTF7;\n   Encoding^ u8 = Encoding::UTF8;\n   Encoding^ u16LE = Encoding::Unicode;\n   Encoding^ u16BE = Encoding::BigEndianUnicode;\n   Encoding^ u32 = Encoding::UTF32;\n   \n   // Encode the entire array, and print out the counts and the resulting bytes.\n   PrintCountsAndBytes( myChars, u7 );\n   PrintCountsAndBytes( myChars, u8 );\n   PrintCountsAndBytes( myChars, u16LE );\n   PrintCountsAndBytes( myChars, u16BE );\n   PrintCountsAndBytes( myChars, u32 );\n}\n\nvoid PrintCountsAndBytes( array&lt;Char&gt;^chars, Encoding^ enc )\n{\n   \n   // Display the name of the encoding used.\n   Console::Write( &quot;{0,-30} :&quot;, enc );\n   \n   // Display the exact byte count.\n   int iBC = enc-&gt;GetByteCount( chars );\n   Console::Write( &quot; {0,-3}&quot;, iBC );\n   \n   // Display the maximum byte count.\n   int iMBC = enc-&gt;GetMaxByteCount( chars-&gt;Length );\n   Console::Write( &quot; {0,-3} :&quot;, iMBC );\n   \n   // Encode the array of chars.\n   array&lt;Byte&gt;^bytes = enc-&gt;GetBytes( chars );\n   \n   // Display all the encoded bytes.\n   PrintHexBytes( bytes );\n}\n\nvoid PrintHexBytes( array&lt;Byte&gt;^bytes )\n{\n   if ( (bytes == nullptr) || (bytes-&gt;Length == 0) )\n      Console::WriteLine( &quot;&lt;none&gt;&quot; );\n   else\n   {\n      for ( int i = 0; i &lt; bytes-&gt;Length; i++ )\n         Console::Write( &quot;{0:X2} &quot;, bytes[ i ] );\n      Console::WriteLine();\n   }\n}\n\n/* \nThis code produces the following output.\n\nSystem.Text.UTF7Encoding       : 18  23  :7A 61 2B 41 77 59 42 2F 51 4F 79 32 50 2F 63 2F 77 2D\nSystem.Text.UTF8Encoding       : 12  24  :7A 61 CC 86 C7 BD CE B2 F1 8F B3 BF\nSystem.Text.UnicodeEncoding    : 14  16  :7A 00 61 00 06 03 FD 01 B2 03 FF D8 FF DC\nSystem.Text.UnicodeEncoding    : 14  16  :00 7A 00 61 03 06 01 FD 03 B2 D8 FF DC FF\nSystem.Text.UTF32Encoding      : 24  32  :7A 00 00 00 61 00 00 00 06 03 00 00 FD 01 00 00 B2 03 00 00 FF FC 04 00\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_UTF8\">\r\n    \r\n            <a id=\"System_Text_Encoding_UTF8_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UTF8</div>        \r\n          </div>\r\n    \r\n            <p>Gets an encoding for the UTF-8 format.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Text.Encoding UTF8 { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a></div>\r\n                  </div>\r\n                  <p>An encoding for the UTF-8 format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property returns a <a class=\"xref\" href=\"system.text.utf8encoding\" data-linktype=\"relative-path\">UTF8Encoding</a> object that encodes Unicode (UTF-16-encoded) characters into a sequence of one to four bytes per character, and that decodes a UTF-8-encoded byte array to Unicode (UTF-16-encoded) characters. For information about the character encodings supported by the .NET Framework and a discussion of which Unicode encoding to use, see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.text.utf8encoding\" data-linktype=\"relative-path\">UTF8Encoding</a> object that is returned by this property might not have the appropriate behavior for your app.  </p>\n<ul>\n<li><p>It returns a <a class=\"xref\" href=\"system.text.utf8encoding\" data-linktype=\"relative-path\">UTF8Encoding</a> object that provides a Unicode byte order mark (BOM). To instantiate a UTF8 encoding that doesn&#39;t provide a BOM, call any overload of the <a class=\"xref\" href=\"system.text.utf8encoding#System_Text_UTF8Encoding__ctor_\" data-linktype=\"relative-path\">UTF8Encoding</a> constructor.  </p>\n</li>\n<li><p>It returns a <a class=\"xref\" href=\"system.text.utf8encoding\" data-linktype=\"relative-path\">UTF8Encoding</a> object that uses replacement fallback to replace each string that it can&#39;t encode and each byte that it can&#39;t decode with a question mark (&quot;?&quot;) character. Instead, you can call the <a class=\"xref\" href=\"system.text.utf8encoding#System_Text_UTF8Encoding__ctor_System_Boolean_System_Boolean_\" data-linktype=\"relative-path\">System.Text.UTF8Encoding.UTF8Encoding(Boolean,Boolean)</a> constructor to instantiate a <a class=\"xref\" href=\"system.text.utf8encoding\" data-linktype=\"relative-path\">UTF8Encoding</a> object whose fallback is either an <a class=\"xref\" href=\"system.text.encoderfallbackexception\" data-linktype=\"relative-path\">EncoderFallbackException</a> or a <a class=\"xref\" href=\"system.text.decoderfallbackexception\" data-linktype=\"relative-path\">DecoderFallbackException</a>, as the following example illustrates.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.Encoding.UTF8#1\">using System;\nusing System.Text;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Encoding enc = new UTF8Encoding(true, true);\n      string value = &quot;\\u00C4 \\uD802\\u0033 \\u00AE&quot;; \n\n      try {\n         byte[] bytes= enc.GetBytes(value);\n         foreach (var byt in bytes)\n            Console.Write(&quot;{0:X2} &quot;, byt);\n         Console.WriteLine();\n\n         string value2 = enc.GetString(bytes);\n         Console.WriteLine(value2);\n      }\n      catch (EncoderFallbackException e) {\n         Console.WriteLine(&quot;Unable to encode {0} at index {1}&quot;, \n                           e.IsUnknownSurrogate() ? \n                              String.Format(&quot;U+{0:X4} U+{1:X4}&quot;, \n                                            Convert.ToUInt16(e.CharUnknownHigh),\n                                            Convert.ToUInt16(e.CharUnknownLow)) :\n                              String.Format(&quot;U+{0:X4}&quot;, \n                                            Convert.ToUInt16(e.CharUnknown)),\n                           e.Index);\n      }                     \n   }\n}\n// The example displays the following output:\n//        Unable to encode U+D802 at index 2\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.Encoding.UTF8#1\">Imports System.Text\n\nModule Example\n   Public Sub Main()\n      Dim enc As Encoding = New UTF8Encoding(True, True)\n      Dim value As String = String.Format(&quot;{0} {1}{2} {3}&quot;, \n                            ChrW(&amp;h00C4), ChrW(&amp;hD802), ChrW(&amp;h0033), ChrW(&amp;h00AE))\n      \n      Try\n         Dim bytes() As Byte = enc.GetBytes(value)\n         For Each byt As Byte In bytes\n            Console.Write(&quot;{0:X2} &quot;, byt)\n         Next       \n         Console.WriteLine()\n         Dim value2 As String = enc.GetString(bytes)\n         Console.WriteLine(value2)\n      Catch e As EncoderFallbackException\n         Console.WriteLine(&quot;Unable to encode {0} at index {1}&quot;, \n                           If(e.IsUnknownSurrogate(), \n                              String.Format(&quot;U+{0:X4} U+{1:X4}&quot;, \n                                            Convert.ToUInt16(e.CharUnknownHigh),\n                                            Convert.ToUInt16(e.CharUnknownLow)),\n                              String.Format(&quot;U+{0:X4}&quot;, \n                                            Convert.ToUInt16(e.CharUnknown))),\n                           e.Index)\n      End Try\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Unable to encode U+D802 at index 2\n</code></pre></li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines an array that consists of the following characters:  </p>\n<ul>\n<li><p>LATIN SMALL LETTER Z (U+007A)  </p>\n</li>\n<li><p>LATIN SMALL LETTER A (U+0061)  </p>\n</li>\n<li><p>COMBINING BREVE (U+0306)  </p>\n</li>\n<li><p>LATIN SMALL LETTER AE WITH ACUTE (U+01FD)  </p>\n</li>\n<li><p>GREEK SMALL LETTER BETA (U+03B2)  </p>\n</li>\n<li><p>A surrogate pair (U+D800 U+DD54) that forms GREEK ACROPHONIC ATTIC ONE THOUSAND STATERS (U+10154).  </p>\n<p>It displays the UTF-16 code units of each character and determines the number of bytes required by a UTF-8 encoder to encode the character array. It then encodes the characters and displays the resulting UTF-8-encoded bytes.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.Encoding.UTF8#2\">using System;\nusing System.Text;\n\npublic class Example\n{\n   public static void Main()  \n   {\n      // Create a character array.\n      string gkNumber = Char.ConvertFromUtf32(0x10154);\n      char[] chars = new char[] { &#39;z&#39;, &#39;a&#39;, &#39;\\u0306&#39;, &#39;\\u01FD&#39;, &#39;\\u03B2&#39;, \n                                  gkNumber[0], gkNumber[1] };\n\n      // Get UTF-8 and UTF-16 encoders.\n      Encoding utf8 = Encoding.UTF8;\n      Encoding utf16 = Encoding.Unicode;\n      \n      // Display the original characters&#39; code units.\n      Console.WriteLine(&quot;Original UTF-16 code units:&quot;);\n      byte[] utf16Bytes = utf16.GetBytes(chars);\n      foreach (var utf16Byte in utf16Bytes)\n         Console.Write(&quot;{0:X2} &quot;, utf16Byte);\n      Console.WriteLine();\n         \n      // Display the number of bytes required to encode the array.\n      int reqBytes  = utf8.GetByteCount(chars);\n      Console.WriteLine(&quot;<br>Exact number of bytes required: {0}&quot;, \n                    reqBytes);\n\n      // Display the maximum byte count.\n      int maxBytes = utf8.GetMaxByteCount(chars.Length);\n      Console.WriteLine(&quot;Maximum number of bytes required: {0}<br>&quot;, \n                        maxBytes);\n\n      // Encode the array of chars.\n      byte[] utf8Bytes = utf8.GetBytes(chars);\n\n      // Display all the UTF-8-encoded bytes.\n      Console.WriteLine(&quot;UTF-8-encoded code units:&quot;);\n      foreach (var utf8Byte in utf8Bytes)\n         Console.Write(&quot;{0:X2} &quot;, utf8Byte);\n      Console.WriteLine();\n   }\n}\n// The example displays the following output:\n//       Original UTF-16 code units:\n//       7A 00 61 00 06 03 FD 01 B2 03 00 D8 54 DD\n//       \n//       Exact number of bytes required: 12\n//       Maximum number of bytes required: 24\n//       \n//       UTF-8-encoded code units:\n//       7A 61 CC 86 C7 BD CE B2 F0 90 85 94\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.Encoding.UTF8#2\">Imports System.Text\n\nPublic Module Example\n   Public Sub Main()\n      &#39; Create a character array.\n      Dim gkNumber As String = Char.ConvertFromUtf32(&amp;h10154)\n      Dim chars() As Char = {&quot;z&quot;c, &quot;a&quot;c, ChrW(&amp;H0306), ChrW(&amp;H01FD), \n                             ChrW(&amp;H03B2), gkNumber(0), gkNumber(1) }\n \n      &#39; Get UTF-8 and UTF-16 encoders.\n      Dim utf8 As Encoding = Encoding.UTF8\n      Dim utf16 As Encoding = Encoding.Unicode\n\n      &#39; Display the original characters&#39; code units.\n      Console.WriteLine(&quot;Original UTF-16 code units:&quot;)\n      Dim utf16Bytes() As Byte = utf16.GetBytes(chars)\n      For Each utf16Byte In utf16Bytes\n         Console.Write(&quot;{0:X2} &quot;, utf16Byte)\n      Next\n      Console.WriteLine()\n\n      Console.WriteLine()\n      &#39; Display the number of bytes required to encode the array.\n      Dim reqBytes As Integer = utf8.GetByteCount(chars)\n      Console.WriteLine(&quot;Exact number of bytes required: {0}&quot;, \n                        reqBytes)\n\n      &#39; Display the maximum byte count.\n      Dim maxBytes As Integer = utf8.GetMaxByteCount(chars.Length)\n      Console.WriteLine(&quot;Maximum number of bytes required: {0}&quot;, \n                        maxBytes)\n      Console.WriteLine()\n      \n      &#39; Encode the array of characters.\n      Dim utf8Bytes() As Byte = utf8.GetBytes(chars)\n\n      &#39; Display all the UTF-8-encoded bytes.\n      Console.WriteLine(&quot;UTF-8-encoded code units:&quot;)\n      For Each utf8Byte In utf8Bytes\n         Console.Write(&quot;{0:X2} &quot;, utf8Byte)\n      Next\n      Console.WriteLine()\n   End Sub \nEnd Module \n&#39; The example displays the following output:\n&#39;    Original UTF-16 code units:\n&#39;    7A 00 61 00 06 03 FD 01 B2 03 00 D8 54 DD\n&#39;    \n&#39;    Exact number of bytes required: 12\n&#39;    Maximum number of bytes required: 24\n&#39;    \n&#39;    UTF-8-encoded code units:\n&#39;    7A 61 CC 86 C7 BD CE B2 F0 90 85 94\n</code></pre></li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_WebName\">\r\n    \r\n            <a id=\"System_Text_Encoding_WebName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WebName</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets the name registered with the Internet Assigned Numbers Authority (IANA) for the current encoding.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string WebName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The IANA name for the current <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The WebName property is the same as the <a class=\"xref\" href=\"system.text.encodinginfo#System_Text_EncodingInfo_Name_\" data-linktype=\"relative-path\">Name</a> property.  </p>\n<p> Note that WebName returns an IANA-registered name for the encoding. When its value is the name of a standard, the implementation of the encoding might not conform in full to that standard. The <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_HeaderName_\" data-linktype=\"relative-path\">HeaderName</a> property defines a different encoding that might work better for e-mail headers. However, most apps should use WebName instead.  </p>\n<p> For more information on the IANA, go to <a href=\"http://www.iana.org/\" data-linktype=\"external\">www.iana.org</a>.  </p>\n<p> The WebName is the same as the <a class=\"xref\" href=\"system.text.encodinginfo#System_Text_EncodingInfo_Name_\" data-linktype=\"relative-path\">Name</a> returned by <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncodings_\" data-linktype=\"relative-path\">GetEncodings</a>. Some of the web names are duplicates; see the remarks for <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncodings_\" data-linktype=\"relative-path\">GetEncodings</a> for more information.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example includes the WebName in an HTML header.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Text.Encoding.WebName#1\">#using &lt;System.dll&gt;\n#using &lt;System.Web.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Text;\nusing namespace System::Web;\nint main()\n{\n   \n   // Use UTF8 encoding.\n   Encoding^ encoding = Encoding::UTF8;\n   StreamWriter^ writer = gcnew StreamWriter( &quot;Encoding.html&quot;,false,encoding );\n   writer-&gt;WriteLine( &quot;&lt;html&gt;&lt;head&gt;&quot; );\n   \n   // Write charset attribute to the html file.\n   // writer -&gt; WriteLine(S&quot;&lt;META HTTP-EQUIV=\\&quot;Content-Type\\S&quot; CONTENT=\\&quot;text/html; charset=S {0}&quot;, encoding.WebName +&quot;\\S&quot;&gt;&quot;);\n   writer-&gt;WriteLine( String::Concat( &quot;&lt;META HTTP-EQUIV=\\&quot;Content-Type\\&quot; CONTENT=\\&quot;text/html; charset=&quot;, encoding-&gt;WebName, &quot;\\&quot;&gt;&quot; ) );\n   writer-&gt;WriteLine( &quot;&lt;/head&gt;&lt;body&gt;&quot; );\n   writer-&gt;WriteLine( &quot;&lt;p&gt;{0}&lt;/p&gt;&quot;, HttpUtility::HtmlEncode( encoding-&gt;EncodingName ) );\n   writer-&gt;WriteLine( &quot;&lt;/body&gt;&lt;/html&gt;&quot; );\n   writer-&gt;Flush();\n   writer-&gt;Close();\n}\n\n/*\nThis code produces the following output in an HTML file.\n\n&lt;html&gt;&lt;head&gt;\n&lt;META HTTP-EQUIV=&quot;Content-Type&quot; CONTENT=&quot;text/html; charset=utf-8&quot;&gt;\n&lt;/head&gt;&lt;body&gt;\n&lt;p&gt;Unicode (UTF-8)&lt;/p&gt;\n&lt;/body&gt;&lt;/html&gt;\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.Encoding.WebName#1\">Imports System\nImports System.IO\nImports System.Text\nImports System.Web\n\nNamespace WebNameExample\n   Public Class ExampleClass\n      \n      Public Overloads Shared Sub Main()\n         &#39; Use UTF8 encoding.\n         Dim encoding As Encoding = Encoding.UTF8\n         Dim writer As New StreamWriter(&quot;Encoding.html&quot;, False, encoding)\n         \n         writer.WriteLine(&quot;&lt;html&gt;&lt;head&gt;&quot;)\n         \n         &#39; Write charset attribute to the html file.\n         writer.Write(&quot;&lt;META HTTP-EQUIV=&quot;&quot;Content-Type&quot;&quot; CONTENT=&quot;&quot;text/html;&quot;)\n         writer.WriteLine(&quot; charset=&quot; + encoding.WebName + &quot;&quot;&quot;&gt;&quot;)\n         \n         writer.WriteLine(&quot;&lt;/head&gt;&lt;body&gt;&quot;)\n         writer.WriteLine(&quot;&lt;p&gt;&quot; + HttpUtility.HtmlEncode(encoding.EncodingName) + &quot;&lt;/p&gt;&quot;)\n         writer.WriteLine(&quot;&lt;/body&gt;&lt;/html&gt;&quot;)\n         writer.Flush()\n         writer.Close()\n      End Sub\n   End Class\nEnd Namespace\n\n&#39;This code produces the following output in an HTML file.\n&#39;&lt;html&gt;&lt;head&gt;\n&#39;&lt;META HTTP-EQUIV=&quot;Content-Type&quot; CONTENT=&quot;text/html; &#39;charset=utf-8&quot;&gt;\n&#39;&lt;/head&gt;&lt;body&gt;\n&#39;&lt;p&gt;Unicode (UTF-8)&lt;/p&gt;\n&#39;&lt;/body&gt;&lt;/html&gt;\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.Encoding.WebName#1\">using System;\nusing System.IO;\nusing System.Text;\nusing System.Web;\n\nnamespace WebNameExample \n{\n   public class ExampleClass \n   {\n      public static void Main(string[] args) \n      {\n         // Use UTF8 encoding.\n\t Encoding encoding = Encoding.UTF8;\n\t StreamWriter writer = new StreamWriter(&quot;Encoding.html&quot;, false, encoding);\n\t \t\t\n\t writer.WriteLine(&quot;&lt;html&gt;&lt;head&gt;&quot;);\n\n\t // Write charset attribute to the html file.\n\t // The value of charset is returned by the WebName property.\n\t writer.WriteLine(&quot;&lt;META HTTP-EQUIV=\\&quot;Content-Type\\&quot; CONTENT=\\&quot;text/html; charset=&quot; +\n                           encoding.WebName +&quot;\\&quot;&gt;&quot;);\n\t\n         writer.WriteLine(&quot;&lt;/head&gt;&lt;body&gt;&quot;);\n\t writer.WriteLine(&quot;&lt;p&gt;&quot; + HttpUtility.HtmlEncode(encoding.EncodingName) + &quot;&lt;/p&gt;&quot;);\n\t writer.WriteLine(&quot;&lt;/body&gt;&lt;/html&gt;&quot;);\n\t writer.Flush();\n\t writer.Close();\n      }\n   }\n}\n\n/*\nThis code produces the following output in an HTML file.\n\n&lt;html&gt;&lt;head&gt;\n&lt;META HTTP-EQUIV=&quot;Content-Type&quot; CONTENT=&quot;text/html; charset=utf-8&quot;&gt;\n&lt;/head&gt;&lt;body&gt;\n&lt;p&gt;Unicode (UTF-8)&lt;/p&gt;\n&lt;/body&gt;&lt;/html&gt;\n\n*/\n</code></pre><p> The following example retrieves the different names for each encoding and displays the encodings with one or more names that are different from <a class=\"xref\" href=\"system.text.encodinginfo#System_Text_EncodingInfo_Name_\" data-linktype=\"relative-path\">Name</a>. It displays <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_EncodingName_\" data-linktype=\"relative-path\">EncodingName</a> but does not compare against it.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.Encoding.Names#1\">using System;\nusing System.Text;\n\npublic class SamplesEncoding  {\n\n   public static void Main()  {\n\n      // Print the header.\n      Console.Write( &quot;Name               &quot; );\n      Console.Write( &quot;CodePage  &quot; );\n      Console.Write( &quot;BodyName           &quot; );\n      Console.Write( &quot;HeaderName         &quot; );\n      Console.Write( &quot;WebName            &quot; );\n      Console.WriteLine( &quot;Encoding.EncodingName&quot; );\n\n      // For every encoding, compare the name properties with EncodingInfo.Name.\n      // Display only the encodings that have one or more different names.\n      foreach( EncodingInfo ei in Encoding.GetEncodings() )  {\n         Encoding e = ei.GetEncoding();\n\n         if (( ei.Name != e.BodyName ) || ( ei.Name != e.HeaderName ) || ( ei.Name != e.WebName ))  {\n            Console.Write( &quot;{0,-18} &quot;, ei.Name );\n            Console.Write( &quot;{0,-9} &quot;,  e.CodePage );\n            Console.Write( &quot;{0,-18} &quot;, e.BodyName );\n            Console.Write( &quot;{0,-18} &quot;, e.HeaderName );\n            Console.Write( &quot;{0,-18} &quot;, e.WebName );\n            Console.WriteLine( &quot;{0} &quot;, e.EncodingName );\n         }\n\n      }\n\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nName               CodePage  BodyName           HeaderName         WebName            Encoding.EncodingName\nshift_jis          932       iso-2022-jp        iso-2022-jp        shift_jis          Japanese (Shift-JIS)\nwindows-1250       1250      iso-8859-2         windows-1250       windows-1250       Central European (Windows)\nwindows-1251       1251      koi8-r             windows-1251       windows-1251       Cyrillic (Windows)\nWindows-1252       1252      iso-8859-1         Windows-1252       Windows-1252       Western European (Windows)\nwindows-1253       1253      iso-8859-7         windows-1253       windows-1253       Greek (Windows)\nwindows-1254       1254      iso-8859-9         windows-1254       windows-1254       Turkish (Windows)\ncsISO2022JP        50221     iso-2022-jp        iso-2022-jp        csISO2022JP        Japanese (JIS-Allow 1 byte Kana)\niso-2022-kr        50225     iso-2022-kr        euc-kr             iso-2022-kr        Korean (ISO)\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.Encoding.Names#1\">using namespace System;\nusing namespace System::Text;\nint main()\n{\n   \n   // Print the header.\n   Console::Write( &quot;Name               &quot; );\n   Console::Write( &quot;CodePage  &quot; );\n   Console::Write( &quot;BodyName           &quot; );\n   Console::Write( &quot;HeaderName         &quot; );\n   Console::Write( &quot;WebName            &quot; );\n   Console::WriteLine( &quot;Encoding.EncodingName&quot; );\n   \n   // For every encoding, compare the name properties with EncodingInfo.Name.\n   // Display only the encodings that have one or more different names.\n   System::Collections::IEnumerator^ myEnum = Encoding::GetEncodings()-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      EncodingInfo ^ ei = safe_cast&lt;EncodingInfo ^&gt;(myEnum-&gt;Current);\n      Encoding^ e = ei-&gt;GetEncoding();\n      if (  !ei-&gt;Name-&gt;Equals( e-&gt;BodyName ) ||  !ei-&gt;Name-&gt;Equals( e-&gt;HeaderName ) ||  !ei-&gt;Name-&gt;Equals( e-&gt;WebName ) )\n      {\n         Console::Write( &quot;{0,-18} &quot;, ei-&gt;Name );\n         Console::Write( &quot;{0,-9} &quot;, e-&gt;CodePage );\n         Console::Write( &quot;{0,-18} &quot;, e-&gt;BodyName );\n         Console::Write( &quot;{0,-18} &quot;, e-&gt;HeaderName );\n         Console::Write( &quot;{0,-18} &quot;, e-&gt;WebName );\n         Console::WriteLine( &quot;{0} &quot;, e-&gt;EncodingName );\n      }\n   }\n}\n\n/* \nThis code produces the following output.\n\nName               CodePage  BodyName           HeaderName         WebName            Encoding.EncodingName\nshift_jis          932       iso-2022-jp        iso-2022-jp        shift_jis          Japanese (Shift-JIS)\nwindows-1250       1250      iso-8859-2         windows-1250       windows-1250       Central European (Windows)\nwindows-1251       1251      koi8-r             windows-1251       windows-1251       Cyrillic (Windows)\nWindows-1252       1252      iso-8859-1         Windows-1252       Windows-1252       Western European (Windows)\nwindows-1253       1253      iso-8859-7         windows-1253       windows-1253       Greek (Windows)\nwindows-1254       1254      iso-8859-9         windows-1254       windows-1254       Turkish (Windows)\ncsISO2022JP        50221     iso-2022-jp        iso-2022-jp        csISO2022JP        Japanese (JIS-Allow 1 byte Kana)\niso-2022-kr        50225     iso-2022-kr        euc-kr             iso-2022-kr        Korean (ISO)\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.Encoding.Names#1\">Imports System\nImports System.Text\n\nPublic Class SamplesEncoding   \n\n   Public Shared Sub Main()\n\n      &#39; Print the header.\n      Console.Write(&quot;Name               &quot;)\n      Console.Write(&quot;CodePage  &quot;)\n      Console.Write(&quot;BodyName           &quot;)\n      Console.Write(&quot;HeaderName         &quot;)\n      Console.Write(&quot;WebName            &quot;)\n      Console.WriteLine(&quot;Encoding.EncodingName&quot;)\n\n      &#39; For every encoding, compare the name properties with EncodingInfo.Name.\n      &#39; Display only the encodings that have one or more different names.\n      Dim ei As EncodingInfo\n      For Each ei In  Encoding.GetEncodings()\n         Dim e As Encoding = ei.GetEncoding()\n         \n         If ei.Name &lt;&gt; e.BodyName OrElse ei.Name &lt;&gt; e.HeaderName OrElse ei.Name &lt;&gt; e.WebName Then\n            Console.Write(&quot;{0,-18} &quot;, ei.Name)\n            Console.Write(&quot;{0,-9} &quot;,  e.CodePage)\n            Console.Write(&quot;{0,-18} &quot;, e.BodyName)\n            Console.Write(&quot;{0,-18} &quot;, e.HeaderName)\n            Console.Write(&quot;{0,-18} &quot;, e.WebName)\n            Console.WriteLine(&quot;{0} &quot;, e.EncodingName)\n         End If\n\n      Next ei \n\n   End Sub &#39;Main\n\nEnd Class &#39;SamplesEncoding \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Name               CodePage  BodyName           HeaderName         WebName            Encoding.EncodingName\n&#39;shift_jis          932       iso-2022-jp        iso-2022-jp        shift_jis          Japanese (Shift-JIS)\n&#39;windows-1250       1250      iso-8859-2         windows-1250       windows-1250       Central European (Windows)\n&#39;windows-1251       1251      koi8-r             windows-1251       windows-1251       Cyrillic (Windows)\n&#39;Windows-1252       1252      iso-8859-1         Windows-1252       Windows-1252       Western European (Windows)\n&#39;windows-1253       1253      iso-8859-7         windows-1253       windows-1253       Greek (Windows)\n&#39;windows-1254       1254      iso-8859-9         windows-1254       windows-1254       Turkish (Windows)\n&#39;csISO2022JP        50221     iso-2022-jp        iso-2022-jp        csISO2022JP        Japanese (JIS-Allow 1 byte Kana)\n&#39;iso-2022-kr        50225     iso-2022-kr        euc-kr             iso-2022-kr        Korean (ISO)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_WindowsCodePage\">\r\n    \r\n            <a id=\"System_Text_Encoding_WindowsCodePage_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WindowsCodePage</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets the Windows operating system code page that most closely corresponds to the current encoding.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int WindowsCodePage { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The Windows operating system code page that most closely corresponds to the current <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property is provided for compatibility with the Windows MultiLanguage (MLang) APIs, for example, in determining font families. For globalization, using one of the Unicode encodings is recommended instead. It is also recommended to use <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_WebName_\" data-linktype=\"relative-path\">WebName</a> instead of WindowsCodePage to identify the code page.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines the Windows code page that most closely corresponds to each encoding.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.Encoding.CodePage#1\">using System;\nusing System.Text;\n\npublic class SamplesEncoding  {\n\n   public static void Main()  {\n\n      // Print the header.\n      Console.Write( &quot;CodePage identifier and name     &quot; );\n      Console.WriteLine( &quot;WindowsCodePage&quot; );\n\n      // For every encoding, get the Windows code page for it.\n      foreach( EncodingInfo ei in Encoding.GetEncodings() )  {\n         Encoding e = ei.GetEncoding();\n\n         Console.Write( &quot;{0,-6} {1,-25} &quot;, ei.CodePage, ei.Name );\n         Console.Write( &quot;{0,-6} &quot;, e.WindowsCodePage );\n\n         // Mark the ones that are different.\n         if ( ei.CodePage != e.WindowsCodePage )\n            Console.Write( &quot;*&quot; );\n\n         Console.WriteLine();\n      }\n\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nCodePage identifier and name     WindowsCodePage\n37     IBM037                    1252   *\n437    IBM437                    1252   *\n500    IBM500                    1252   *\n708    ASMO-708                  1256   *\n720    DOS-720                   1256   *\n737    ibm737                    1253   *\n775    ibm775                    1257   *\n850    ibm850                    1252   *\n852    ibm852                    1250   *\n855    IBM855                    1252   *\n857    ibm857                    1254   *\n858    IBM00858                  1252   *\n860    IBM860                    1252   *\n861    ibm861                    1252   *\n862    DOS-862                   1255   *\n863    IBM863                    1252   *\n864    IBM864                    1256   *\n865    IBM865                    1252   *\n866    cp866                     1251   *\n869    ibm869                    1253   *\n870    IBM870                    1250   *\n874    windows-874               874    \n875    cp875                     1253   *\n932    shift_jis                 932    \n936    gb2312                    936    \n949    ks_c_5601-1987            949    \n950    big5                      950    \n1026   IBM1026                   1254   *\n1047   IBM01047                  1252   *\n1140   IBM01140                  1252   *\n1141   IBM01141                  1252   *\n1142   IBM01142                  1252   *\n1143   IBM01143                  1252   *\n1144   IBM01144                  1252   *\n1145   IBM01145                  1252   *\n1146   IBM01146                  1252   *\n1147   IBM01147                  1252   *\n1148   IBM01148                  1252   *\n1149   IBM01149                  1252   *\n1200   utf-16                    1200   \n1201   unicodeFFFE               1200   *\n1250   windows-1250              1250   \n1251   windows-1251              1251   \n1252   Windows-1252              1252   \n1253   windows-1253              1253   \n1254   windows-1254              1254   \n1255   windows-1255              1255   \n1256   windows-1256              1256   \n1257   windows-1257              1257   \n1258   windows-1258              1258   \n1361   Johab                     949    *\n10000  macintosh                 1252   *\n10001  x-mac-japanese            932    *\n10002  x-mac-chinesetrad         950    *\n10003  x-mac-korean              949    *\n10004  x-mac-arabic              1256   *\n10005  x-mac-hebrew              1255   *\n10006  x-mac-greek               1253   *\n10007  x-mac-cyrillic            1251   *\n10008  x-mac-chinesesimp         936    *\n10010  x-mac-romanian            1250   *\n10017  x-mac-ukrainian           1251   *\n10021  x-mac-thai                874    *\n10029  x-mac-ce                  1250   *\n10079  x-mac-icelandic           1252   *\n10081  x-mac-turkish             1254   *\n10082  x-mac-croatian            1250   *\n12000  utf-32                    1200   *\n12001  utf-32BE                  1200   *\n20000  x-Chinese-CNS             950    *\n20001  x-cp20001                 950    *\n20002  x-Chinese-Eten            950    *\n20003  x-cp20003                 950    *\n20004  x-cp20004                 950    *\n20005  x-cp20005                 950    *\n20105  x-IA5                     1252   *\n20106  x-IA5-German              1252   *\n20107  x-IA5-Swedish             1252   *\n20108  x-IA5-Norwegian           1252   *\n20127  us-ascii                  1252   *\n20261  x-cp20261                 1252   *\n20269  x-cp20269                 1252   *\n20273  IBM273                    1252   *\n20277  IBM277                    1252   *\n20278  IBM278                    1252   *\n20280  IBM280                    1252   *\n20284  IBM284                    1252   *\n20285  IBM285                    1252   *\n20290  IBM290                    932    *\n20297  IBM297                    1252   *\n20420  IBM420                    1256   *\n20423  IBM423                    1253   *\n20424  IBM424                    1255   *\n20833  x-EBCDIC-KoreanExtended   949    *\n20838  IBM-Thai                  874    *\n20866  koi8-r                    1251   *\n20871  IBM871                    1252   *\n20880  IBM880                    1251   *\n20905  IBM905                    1254   *\n20924  IBM00924                  1252   *\n20932  EUC-JP                    932    *\n20936  x-cp20936                 936    *\n20949  x-cp20949                 949    *\n21025  cp1025                    1251   *\n21866  koi8-u                    1251   *\n28591  iso-8859-1                1252   *\n28592  iso-8859-2                1250   *\n28593  iso-8859-3                1254   *\n28594  iso-8859-4                1257   *\n28595  iso-8859-5                1251   *\n28596  iso-8859-6                1256   *\n28597  iso-8859-7                1253   *\n28598  iso-8859-8                1255   *\n28599  iso-8859-9                1254   *\n28603  iso-8859-13               1257   *\n28605  iso-8859-15               1252   *\n29001  x-Europa                  1252   *\n38598  iso-8859-8-i              1255   *\n50220  iso-2022-jp               932    *\n50221  csISO2022JP               932    *\n50222  iso-2022-jp               932    *\n50225  iso-2022-kr               949    *\n50227  x-cp50227                 936    *\n51932  euc-jp                    932    *\n51936  EUC-CN                    936    *\n51949  euc-kr                    949    *\n52936  hz-gb-2312                936    *\n54936  GB18030                   936    *\n57002  x-iscii-de                57002  \n57003  x-iscii-be                57003  \n57004  x-iscii-ta                57004  \n57005  x-iscii-te                57005  \n57006  x-iscii-as                57006  \n57007  x-iscii-or                57007  \n57008  x-iscii-ka                57008  \n57009  x-iscii-ma                57009  \n57010  x-iscii-gu                57010  \n57011  x-iscii-pa                57011  \n65000  utf-7                     1200   *\n65001  utf-8                     1200   *\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.Encoding.CodePage#1\">Imports System\nImports System.Text\n\nPublic Class SamplesEncoding   \n\n   Public Shared Sub Main()\n\n      &#39; Print the header.\n      Console.Write(&quot;CodePage identifier and name     &quot;)\n      Console.WriteLine(&quot;WindowsCodePage&quot;)\n\n      &#39; For every encoding, get the Windows code page for it.\n      Dim ei As EncodingInfo\n      For Each ei In  Encoding.GetEncodings()\n         Dim e As Encoding = ei.GetEncoding()\n         \n         Console.Write(&quot;{0,-6} {1,-25} &quot;, ei.CodePage, ei.Name)\n         Console.Write(&quot;{0,-6} &quot;, e.WindowsCodePage)\n         \n         &#39; Mark the ones that are different.\n         If ei.CodePage &lt;&gt; e.WindowsCodePage Then\n            Console.Write(&quot;*&quot;)\n         End If \n         Console.WriteLine()\n\n      Next ei\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesEncoding\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;CodePage identifier and name     WindowsCodePage\n&#39;37     IBM037                    1252   *\n&#39;437    IBM437                    1252   *\n&#39;500    IBM500                    1252   *\n&#39;708    ASMO-708                  1256   *\n&#39;720    DOS-720                   1256   *\n&#39;737    ibm737                    1253   *\n&#39;775    ibm775                    1257   *\n&#39;850    ibm850                    1252   *\n&#39;852    ibm852                    1250   *\n&#39;855    IBM855                    1252   *\n&#39;857    ibm857                    1254   *\n&#39;858    IBM00858                  1252   *\n&#39;860    IBM860                    1252   *\n&#39;861    ibm861                    1252   *\n&#39;862    DOS-862                   1255   *\n&#39;863    IBM863                    1252   *\n&#39;864    IBM864                    1256   *\n&#39;865    IBM865                    1252   *\n&#39;866    cp866                     1251   *\n&#39;869    ibm869                    1253   *\n&#39;870    IBM870                    1250   *\n&#39;874    windows-874               874    \n&#39;875    cp875                     1253   *\n&#39;932    shift_jis                 932    \n&#39;936    gb2312                    936    \n&#39;949    ks_c_5601-1987            949    \n&#39;950    big5                      950    \n&#39;1026   IBM1026                   1254   *\n&#39;1047   IBM01047                  1252   *\n&#39;1140   IBM01140                  1252   *\n&#39;1141   IBM01141                  1252   *\n&#39;1142   IBM01142                  1252   *\n&#39;1143   IBM01143                  1252   *\n&#39;1144   IBM01144                  1252   *\n&#39;1145   IBM01145                  1252   *\n&#39;1146   IBM01146                  1252   *\n&#39;1147   IBM01147                  1252   *\n&#39;1148   IBM01148                  1252   *\n&#39;1149   IBM01149                  1252   *\n&#39;1200   utf-16                    1200   \n&#39;1201   unicodeFFFE               1200   *\n&#39;1250   windows-1250              1250   \n&#39;1251   windows-1251              1251   \n&#39;1252   Windows-1252              1252   \n&#39;1253   windows-1253              1253   \n&#39;1254   windows-1254              1254   \n&#39;1255   windows-1255              1255   \n&#39;1256   windows-1256              1256   \n&#39;1257   windows-1257              1257   \n&#39;1258   windows-1258              1258   \n&#39;1361   Johab                     949    *\n&#39;10000  macintosh                 1252   *\n&#39;10001  x-mac-japanese            932    *\n&#39;10002  x-mac-chinesetrad         950    *\n&#39;10003  x-mac-korean              949    *\n&#39;10004  x-mac-arabic              1256   *\n&#39;10005  x-mac-hebrew              1255   *\n&#39;10006  x-mac-greek               1253   *\n&#39;10007  x-mac-cyrillic            1251   *\n&#39;10008  x-mac-chinesesimp         936    *\n&#39;10010  x-mac-romanian            1250   *\n&#39;10017  x-mac-ukrainian           1251   *\n&#39;10021  x-mac-thai                874    *\n&#39;10029  x-mac-ce                  1250   *\n&#39;10079  x-mac-icelandic           1252   *\n&#39;10081  x-mac-turkish             1254   *\n&#39;10082  x-mac-croatian            1250   *\n&#39;12000  utf-32                    1200   *\n&#39;12001  utf-32BE                  1200   *\n&#39;20000  x-Chinese-CNS             950    *\n&#39;20001  x-cp20001                 950    *\n&#39;20002  x-Chinese-Eten            950    *\n&#39;20003  x-cp20003                 950    *\n&#39;20004  x-cp20004                 950    *\n&#39;20005  x-cp20005                 950    *\n&#39;20105  x-IA5                     1252   *\n&#39;20106  x-IA5-German              1252   *\n&#39;20107  x-IA5-Swedish             1252   *\n&#39;20108  x-IA5-Norwegian           1252   *\n&#39;20127  us-ascii                  1252   *\n&#39;20261  x-cp20261                 1252   *\n&#39;20269  x-cp20269                 1252   *\n&#39;20273  IBM273                    1252   *\n&#39;20277  IBM277                    1252   *\n&#39;20278  IBM278                    1252   *\n&#39;20280  IBM280                    1252   *\n&#39;20284  IBM284                    1252   *\n&#39;20285  IBM285                    1252   *\n&#39;20290  IBM290                    932    *\n&#39;20297  IBM297                    1252   *\n&#39;20420  IBM420                    1256   *\n&#39;20423  IBM423                    1253   *\n&#39;20424  IBM424                    1255   *\n&#39;20833  x-EBCDIC-KoreanExtended   949    *\n&#39;20838  IBM-Thai                  874    *\n&#39;20866  koi8-r                    1251   *\n&#39;20871  IBM871                    1252   *\n&#39;20880  IBM880                    1251   *\n&#39;20905  IBM905                    1254   *\n&#39;20924  IBM00924                  1252   *\n&#39;20932  EUC-JP                    932    *\n&#39;20936  x-cp20936                 936    *\n&#39;20949  x-cp20949                 949    *\n&#39;21025  cp1025                    1251   *\n&#39;21866  koi8-u                    1251   *\n&#39;28591  iso-8859-1                1252   *\n&#39;28592  iso-8859-2                1250   *\n&#39;28593  iso-8859-3                1254   *\n&#39;28594  iso-8859-4                1257   *\n&#39;28595  iso-8859-5                1251   *\n&#39;28596  iso-8859-6                1256   *\n&#39;28597  iso-8859-7                1253   *\n&#39;28598  iso-8859-8                1255   *\n&#39;28599  iso-8859-9                1254   *\n&#39;28603  iso-8859-13               1257   *\n&#39;28605  iso-8859-15               1252   *\n&#39;29001  x-Europa                  1252   *\n&#39;38598  iso-8859-8-i              1255   *\n&#39;50220  iso-2022-jp               932    *\n&#39;50221  csISO2022JP               932    *\n&#39;50222  iso-2022-jp               932    *\n&#39;50225  iso-2022-kr               949    *\n&#39;50227  x-cp50227                 936    *\n&#39;51932  euc-jp                    932    *\n&#39;51936  EUC-CN                    936    *\n&#39;51949  euc-kr                    949    *\n&#39;52936  hz-gb-2312                936    *\n&#39;54936  GB18030                   936    *\n&#39;57002  x-iscii-de                57002  \n&#39;57003  x-iscii-be                57003  \n&#39;57004  x-iscii-ta                57004  \n&#39;57005  x-iscii-te                57005  \n&#39;57006  x-iscii-as                57006  \n&#39;57007  x-iscii-or                57007  \n&#39;57008  x-iscii-ka                57008  \n&#39;57009  x-iscii-ma                57009  \n&#39;57010  x-iscii-gu                57010  \n&#39;57011  x-iscii-pa                57011  \n&#39;65000  utf-7                     1200   *\n&#39;65001  utf-8                     1200   *\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.Encoding.CodePage#1\">using namespace System;\nusing namespace System::Text;\nint main()\n{\n   \n   // Print the header.\n   Console::Write( &quot;CodePage identifier and name     &quot; );\n   Console::WriteLine( &quot;WindowsCodePage&quot; );\n   \n   // For every encoding, get the Windows code page for it.\n   System::Collections::IEnumerator^ myEnum = Encoding::GetEncodings()-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      EncodingInfo ^ ei = safe_cast&lt;EncodingInfo ^&gt;(myEnum-&gt;Current);\n      Encoding^ e = ei-&gt;GetEncoding();\n      Console::Write( &quot;{0,-6} {1,-25} &quot;, ei-&gt;CodePage, ei-&gt;Name );\n      Console::Write( &quot;{0,-6} &quot;, e-&gt;WindowsCodePage );\n      \n      // Mark the ones that are different.\n      if ( ei-&gt;CodePage != e-&gt;WindowsCodePage )\n            Console::Write( &quot;*&quot; );\n      Console::WriteLine();\n   }\n}\n\n/* \nThis code produces the following output.\n\nCodePage identifier and name     WindowsCodePage\n37     IBM037                    1252   *\n437    IBM437                    1252   *\n500    IBM500                    1252   *\n708    ASMO-708                  1256   *\n720    DOS-720                   1256   *\n737    ibm737                    1253   *\n775    ibm775                    1257   *\n850    ibm850                    1252   *\n852    ibm852                    1250   *\n855    IBM855                    1252   *\n857    ibm857                    1254   *\n858    IBM00858                  1252   *\n860    IBM860                    1252   *\n861    ibm861                    1252   *\n862    DOS-862                   1255   *\n863    IBM863                    1252   *\n864    IBM864                    1256   *\n865    IBM865                    1252   *\n866    cp866                     1251   *\n869    ibm869                    1253   *\n870    IBM870                    1250   *\n874    windows-874               874    \n875    cp875                     1253   *\n932    shift_jis                 932    \n936    gb2312                    936    \n949    ks_c_5601-1987            949    \n950    big5                      950    \n1026   IBM1026                   1254   *\n1047   IBM01047                  1252   *\n1140   IBM01140                  1252   *\n1141   IBM01141                  1252   *\n1142   IBM01142                  1252   *\n1143   IBM01143                  1252   *\n1144   IBM01144                  1252   *\n1145   IBM01145                  1252   *\n1146   IBM01146                  1252   *\n1147   IBM01147                  1252   *\n1148   IBM01148                  1252   *\n1149   IBM01149                  1252   *\n1200   utf-16                    1200   \n1201   unicodeFFFE               1200   *\n1250   windows-1250              1250   \n1251   windows-1251              1251   \n1252   Windows-1252              1252   \n1253   windows-1253              1253   \n1254   windows-1254              1254   \n1255   windows-1255              1255   \n1256   windows-1256              1256   \n1257   windows-1257              1257   \n1258   windows-1258              1258   \n1361   Johab                     949    *\n10000  macintosh                 1252   *\n10001  x-mac-japanese            932    *\n10002  x-mac-chinesetrad         950    *\n10003  x-mac-korean              949    *\n10004  x-mac-arabic              1256   *\n10005  x-mac-hebrew              1255   *\n10006  x-mac-greek               1253   *\n10007  x-mac-cyrillic            1251   *\n10008  x-mac-chinesesimp         936    *\n10010  x-mac-romanian            1250   *\n10017  x-mac-ukrainian           1251   *\n10021  x-mac-thai                874    *\n10029  x-mac-ce                  1250   *\n10079  x-mac-icelandic           1252   *\n10081  x-mac-turkish             1254   *\n10082  x-mac-croatian            1250   *\n12000  utf-32                    1200   *\n12001  utf-32BE                  1200   *\n20000  x-Chinese-CNS             950    *\n20001  x-cp20001                 950    *\n20002  x-Chinese-Eten            950    *\n20003  x-cp20003                 950    *\n20004  x-cp20004                 950    *\n20005  x-cp20005                 950    *\n20105  x-IA5                     1252   *\n20106  x-IA5-German              1252   *\n20107  x-IA5-Swedish             1252   *\n20108  x-IA5-Norwegian           1252   *\n20127  us-ascii                  1252   *\n20261  x-cp20261                 1252   *\n20269  x-cp20269                 1252   *\n20273  IBM273                    1252   *\n20277  IBM277                    1252   *\n20278  IBM278                    1252   *\n20280  IBM280                    1252   *\n20284  IBM284                    1252   *\n20285  IBM285                    1252   *\n20290  IBM290                    932    *\n20297  IBM297                    1252   *\n20420  IBM420                    1256   *\n20423  IBM423                    1253   *\n20424  IBM424                    1255   *\n20833  x-EBCDIC-KoreanExtended   949    *\n20838  IBM-Thai                  874    *\n20866  koi8-r                    1251   *\n20871  IBM871                    1252   *\n20880  IBM880                    1251   *\n20905  IBM905                    1254   *\n20924  IBM00924                  1252   *\n20932  EUC-JP                    932    *\n20936  x-cp20936                 936    *\n20949  x-cp20949                 949    *\n21025  cp1025                    1251   *\n21866  koi8-u                    1251   *\n28591  iso-8859-1                1252   *\n28592  iso-8859-2                1250   *\n28593  iso-8859-3                1254   *\n28594  iso-8859-4                1257   *\n28595  iso-8859-5                1251   *\n28596  iso-8859-6                1256   *\n28597  iso-8859-7                1253   *\n28598  iso-8859-8                1255   *\n28599  iso-8859-9                1254   *\n28603  iso-8859-13               1257   *\n28605  iso-8859-15               1252   *\n29001  x-Europa                  1252   *\n38598  iso-8859-8-i              1255   *\n50220  iso-2022-jp               932    *\n50221  csISO2022JP               932    *\n50222  iso-2022-jp               932    *\n50225  iso-2022-kr               949    *\n50227  x-cp50227                 936    *\n51932  euc-jp                    932    *\n51936  EUC-CN                    936    *\n51949  euc-kr                    949    *\n52936  hz-gb-2312                936    *\n54936  GB18030                   936    *\n57002  x-iscii-de                57002  \n57003  x-iscii-be                57003  \n57004  x-iscii-ta                57004  \n57005  x-iscii-te                57005  \n57006  x-iscii-as                57006  \n57007  x-iscii-or                57007  \n57008  x-iscii-ka                57008  \n57009  x-iscii-ma                57009  \n57010  x-iscii-gu                57010  \n57011  x-iscii-pa                57011  \n65000  utf-7                     1200   *\n65001  utf-8                     1200   *\n\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_Clone\">\r\n    \r\n            <a id=\"System_Text_Encoding_Clone_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clone()</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, creates a shallow copy of the current <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual object Clone ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>A copy of the current <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The clone is writable even if the original <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> object is read-only. Therefore, the properties of the clone can be modified.  </p>\n<p> A shallow copy of an object is a copy of the object only. If the object contains references to other objects, the shallow copy does not create copies of the referred objects. It refers to the original objects instead. In contrast, a deep copy of an object creates a copy of the object and a copy of everything directly or indirectly referenced by that object.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_Convert_System_Text_Encoding_System_Text_Encoding_System_Byte___\">\r\n    \r\n            <a id=\"System_Text_Encoding_Convert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Convert(Encoding,Encoding,Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Converts an entire byte array from one encoding to another.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static byte[] Convert (System.Text.Encoding srcEncoding, System.Text.Encoding dstEncoding, byte[] bytes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>srcEncoding</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The encoding format of <code>bytes</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>dstEncoding</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The target encoding format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The bytes to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>An array of type <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> containing the results of converting <code>bytes</code> from <code>srcEncoding</code> to <code>dstEncoding</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>srcEncoding</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>dstEncoding</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>bytes</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoderfallbackexception\" data-linktype=\"relative-path\">DecoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for complete explanation)  </p>\n<p> -and-  </p>\n<p> <strong>srcEncoding.</strong> <span class=\"xref\">stem.Text.Encoding.DecoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.decoderexceptionfallback\" data-linktype=\"relative-path\">DecoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallbackexception\" data-linktype=\"relative-path\">EncoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for complete explanation)  </p>\n<p> -and-  </p>\n<p> <strong>dstEncoding.</strong> <span class=\"xref\">stem.Text.Encoding.EncoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.encoderexceptionfallback\" data-linktype=\"relative-path\">EncoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts a Unicode-encoded string to an ASCII-encoded string. Because the ASCII encoding object returned by the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_ASCII_\" data-linktype=\"relative-path\">ASCII</a> property uses replacement fallback and the Pi character is not part of the ASCII character set, the Pi character is replaced with a question mark, as the output from the example shows.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Text.Encoding.Convert Example#1\">using namespace System;\nusing namespace System::Text;\n\nint main()\n{\n   String^ unicodeString = &quot;This string contains the unicode character Pi (\\u03a0)&quot;;\n   \n   // Create two different encodings.\n   Encoding^ ascii = Encoding::ASCII;\n   Encoding^ unicode = Encoding::Unicode;\n   \n   // Convert the string into a byte array.\n   array&lt;Byte&gt;^unicodeBytes = unicode-&gt;GetBytes( unicodeString );\n   \n   // Perform the conversion from one encoding to the other.\n   array&lt;Byte&gt;^asciiBytes = Encoding::Convert( unicode, ascii, unicodeBytes );\n   \n   // Convert the new Byte into[] a char and[] then into a string.\n   array&lt;Char&gt;^asciiChars = gcnew array&lt;Char&gt;(ascii-&gt;GetCharCount( asciiBytes, 0, asciiBytes-&gt;Length ));\n   ascii-&gt;GetChars( asciiBytes, 0, asciiBytes-&gt;Length, asciiChars, 0 );\n   String^ asciiString = gcnew String( asciiChars );\n   \n   // Display the strings created before and after the conversion.\n   Console::WriteLine( &quot;Original String*: {0}&quot;, unicodeString );\n   Console::WriteLine( &quot;Ascii converted String*: {0}&quot;, asciiString );\n}\n// The example displays the following output:\n//    Original string: This string contains the unicode character Pi (Π)\n//    Ascii converted string: This string contains the unicode character Pi (?)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.Encoding.Convert Example#1\">using System;\nusing System.Text;\n\nclass Example\n{\n   static void Main()\n   {\n      string unicodeString = &quot;This string contains the unicode character Pi (\\u03a0)&quot;;\n\n      // Create two different encodings.\n      Encoding ascii = Encoding.ASCII;\n      Encoding unicode = Encoding.Unicode;\n\n      // Convert the string into a byte array.\n      byte[] unicodeBytes = unicode.GetBytes(unicodeString);\n\n      // Perform the conversion from one encoding to the other.\n      byte[] asciiBytes = Encoding.Convert(unicode, ascii, unicodeBytes);\n         \n      // Convert the new byte[] into a char[] and then into a string.\n      char[] asciiChars = new char[ascii.GetCharCount(asciiBytes, 0, asciiBytes.Length)];\n      ascii.GetChars(asciiBytes, 0, asciiBytes.Length, asciiChars, 0);\n      string asciiString = new string(asciiChars);\n\n      // Display the strings created before and after the conversion.\n      Console.WriteLine(&quot;Original string: {0}&quot;, unicodeString);\n      Console.WriteLine(&quot;Ascii converted string: {0}&quot;, asciiString);\n   }\n}\n// The example displays the following output:\n//    Original string: This string contains the unicode character Pi (Π)\n//    Ascii converted string: This string contains the unicode character Pi (?)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.Encoding.Convert Example#1\">Imports System.Text\n\nClass Example\n   Shared Sub Main()\n      Dim unicodeString As String = &quot;This string contains the unicode character Pi (&quot; &amp; ChrW(&amp;H03A0) &amp; &quot;)&quot;\n\n      &#39; Create two different encodings.\n      Dim ascii As Encoding = Encoding.ASCII\n      Dim unicode As Encoding = Encoding.Unicode\n\n      &#39; Convert the string into a byte array.\n      Dim unicodeBytes As Byte() = unicode.GetBytes(unicodeString)\n\n      &#39; Perform the conversion from one encoding to the other.\n      Dim asciiBytes As Byte() = Encoding.Convert(unicode, ascii, unicodeBytes)\n\n      &#39; Convert the new byte array into a char array and then into a string.\n      Dim asciiChars(ascii.GetCharCount(asciiBytes, 0, asciiBytes.Length)-1) As Char\n      ascii.GetChars(asciiBytes, 0, asciiBytes.Length, asciiChars, 0)\n      Dim asciiString As New String(asciiChars)\n\n      &#39; Display the strings created before and after the conversion.\n      Console.WriteLine(&quot;Original string: {0}&quot;, unicodeString)\n      Console.WriteLine(&quot;Ascii converted string: {0}&quot;, asciiString)\n   End Sub\nEnd Class\n&#39; The example displays the following output:\n&#39;    Original string: This string contains the unicode character Pi (Π)\n&#39;    Ascii converted string: This string contains the unicode character Pi (?)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_Convert_System_Text_Encoding_System_Text_Encoding_System_Byte___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Text_Encoding_Convert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Convert(Encoding,Encoding,Byte[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts a range of bytes in a byte array from one encoding to another.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static byte[] Convert (System.Text.Encoding srcEncoding, System.Text.Encoding dstEncoding, byte[] bytes, int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>srcEncoding</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The encoding of the source array, <code>bytes</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>dstEncoding</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The encoding of the output array.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The array of bytes to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the first element of <code>bytes</code> to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>An array of type <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> containing the result of converting a range of bytes in <code>bytes</code> from <code>srcEncoding</code> to <code>dstEncoding</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>srcEncoding</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>dstEncoding</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>bytes</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> and <code>count</code> do not specify a valid range in the byte array.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoderfallbackexception\" data-linktype=\"relative-path\">DecoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for complete explanation)  </p>\n<p> -and-  </p>\n<p> <strong>srcEncoding.</strong> <span class=\"xref\">stem.Text.Encoding.DecoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.decoderexceptionfallback\" data-linktype=\"relative-path\">DecoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallbackexception\" data-linktype=\"relative-path\">EncoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for complete explanation)  </p>\n<p> -and-  </p>\n<p> <strong>dstEncoding.</strong> <span class=\"xref\">stem.Text.Encoding.EncoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.encoderexceptionfallback\" data-linktype=\"relative-path\">EncoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_Text_Encoding_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the specified <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> is equal to the current instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to compare with the current instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>value</code> is an instance of <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> and is equal to the current instance; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Two instances of <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> are considered equal if they correspond to the same code page and their <code>EncoderFallback</code> and <code>DecoderFallback</code> objects are equal. In particular, derived code pages all have a code page of 0 and their fallbacks are normally <code>null</code> (<code>Nothing</code> in Visual Basic .NET). Thus they are all considered equal to one another. One consequence is that when Equals is used to populate a hash table, all derived encodings compare equal and fall into the same hash table slot.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example gets two instances of the same encoding (one by codepage and another by name), and checks their equality.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.Encoding.Equals#1\">using System;\nusing System.Text;\n\npublic class SamplesEncoding  {\n\n   public static void Main()  {\n\n      // Get a UTF-32 encoding by codepage.\n      Encoding e1 = Encoding.GetEncoding( 12000 );\n\n      // Get a UTF-32 encoding by name.\n      Encoding e2 = Encoding.GetEncoding( &quot;utf-32&quot; );\n\n      // Check their equality.\n      Console.WriteLine( &quot;e1 equals e2? {0}&quot;, e1.Equals( e2 ) );\n\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\ne1 equals e2? True\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.Encoding.Equals#1\">Imports System\nImports System.Text\n\nPublic Class SamplesEncoding   \n\n   Public Shared Sub Main()\n\n      &#39; Get a UTF-32 encoding by codepage.\n      Dim e1 As Encoding = Encoding.GetEncoding(12000)\n\n      &#39; Get a UTF-32 encoding by name.\n      Dim e2 As Encoding = Encoding.GetEncoding(&quot;utf-32&quot;)\n\n      &#39; Check their equality.\n      Console.WriteLine(&quot;e1 equals e2? {0}&quot;, e1.Equals(e2))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesEncoding\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;e1 equals e2? True\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.Encoding.Equals#1\">using namespace System;\nusing namespace System::Text;\nint main()\n{\n   \n   // Get a UTF-32 encoding by codepage.\n   Encoding^ e1 = Encoding::GetEncoding( 12000 );\n   \n   // Get a UTF-32 encoding by name.\n   Encoding^ e2 = Encoding::GetEncoding( &quot;utf-32&quot; );\n   \n   // Check their equality.\n   Console::WriteLine( &quot;e1 equals e2? {0}&quot;, e1-&gt;Equals( e2 ) );\n}\n\n/* \nThis code produces the following output.\n\ne1 equals e2? True\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_GetByteCount_System_Char___\">\r\n    \r\n            <a id=\"System_Text_Encoding_GetByteCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetByteCount(Char[])</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, calculates the number of bytes produced by encoding all the characters in the specified character array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int GetByteCount (char[] chars);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>chars</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character array containing the characters to encode.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of bytes produced by encoding all the characters in the specified character array.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>chars</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallbackexception\" data-linktype=\"relative-path\">EncoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for complete explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.EncoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.encoderexceptionfallback\" data-linktype=\"relative-path\">EncoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To calculate the exact array size required by <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> to store the resulting bytes, call the GetByteCount method. To calculate the maximum array size, call the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> method. The GetByteCount method generally allows allocation of less memory, while the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> method generally executes faster.  </p>\n<p> The GetByteCount method determines how many bytes result in encoding a set of Unicode characters, and the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method performs the actual encoding. The <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method expects discrete conversions, in contrast to the <a class=\"xref\" href=\"system.text.encoder#System_Text_Encoder_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method, which handles multiple conversions on a single input stream.  </p>\n<p> Several versions of GetByteCount and <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> are supported. The following are some programming considerations for use of these methods:  </p>\n<ul>\n<li><p>Your app might need to encode many input characters to a code page and process the characters using multiple calls. In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> object being used.  </p>\n</li>\n<li><p>If your app handles string inputs, you should use the string versions of the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method.  </p>\n</li>\n<li><p>The Unicode character buffer version of <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_System_Char__System_Int32_System_Byte__System_Int32_\" data-linktype=\"relative-path\">GetBytes(Char*,Int32,Byte*,Int32)</a> allows some fast techniques, particularly with multiple calls using the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> object or inserting into existing buffers. Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.  </p>\n</li>\n<li><p>If your app must convert a large amount of data, you should reuse the output buffer. In this case, the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> version that supports byte arrays is the best choice.  </p>\n</li>\n<li><p>Consider using the <a class=\"xref\" href=\"system.text.encoder#System_Text_Encoder_Convert_\" data-linktype=\"relative-path\">Convert</a> method instead of GetByteCount. The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small. For continuous encoding of a stream, this method is often the best choice.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines the number of bytes required to encode a character array, encodes the characters, and displays the resulting bytes.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Text.Encoding.GetBytes_CharArr#1\">Imports System\nImports System.Text\nImports Microsoft.VisualBasic\n\nPublic Class SamplesEncoding   \n\n   Public Shared Sub Main()\n\n      &#39; The characters to encode:\n      &#39;    Latin Small Letter Z (U+007A)\n      &#39;    Latin Small Letter A (U+0061)\n      &#39;    Combining Breve (U+0306)\n      &#39;    Latin Small Letter AE With Acute (U+01FD)\n      &#39;    Greek Small Letter Beta (U+03B2)\n      &#39;    a high-surrogate value (U+D8FF)\n      &#39;    a low-surrogate value (U+DCFF)\n      Dim myChars() As Char = {&quot;z&quot;c, &quot;a&quot;c, ChrW(&amp;H0306), ChrW(&amp;H01FD), ChrW(&amp;H03B2), ChrW(&amp;HD8FF), ChrW(&amp;HDCFF)}\n \n\n      &#39; Get different encodings.\n      Dim u7 As Encoding = Encoding.UTF7\n      Dim u8 As Encoding = Encoding.UTF8\n      Dim u16LE As Encoding = Encoding.Unicode\n      Dim u16BE As Encoding = Encoding.BigEndianUnicode\n      Dim u32 As Encoding = Encoding.UTF32\n\n      &#39; Encode the entire array, and print out the counts and the resulting bytes.\n      PrintCountsAndBytes(myChars, u7)\n      PrintCountsAndBytes(myChars, u8)\n      PrintCountsAndBytes(myChars, u16LE)\n      PrintCountsAndBytes(myChars, u16BE)\n      PrintCountsAndBytes(myChars, u32)\n\n   End Sub &#39;Main\n\n\n   Public Shared Sub PrintCountsAndBytes(chars() As Char, enc As Encoding)\n\n      &#39; Display the name of the encoding used.\n      Console.Write(&quot;{0,-30} :&quot;, enc.ToString())\n\n      &#39; Display the exact byte count.\n      Dim iBC As Integer = enc.GetByteCount(chars)\n      Console.Write(&quot; {0,-3}&quot;, iBC)\n\n      &#39; Display the maximum byte count.\n      Dim iMBC As Integer = enc.GetMaxByteCount(chars.Length)\n      Console.Write(&quot; {0,-3} :&quot;, iMBC)\n\n      &#39; Encode the array of chars.\n      Dim bytes As Byte() = enc.GetBytes(chars)\n\n      &#39; Display all the encoded bytes.\n      PrintHexBytes(bytes)\n\n   End Sub &#39;PrintCountsAndBytes\n\n\n   Public Shared Sub PrintHexBytes(bytes() As Byte)\n\n      If bytes Is Nothing OrElse bytes.Length = 0 Then\n         Console.WriteLine(&quot;&lt;none&gt;&quot;)\n      Else\n         Dim i As Integer\n         For i = 0 To bytes.Length - 1\n            Console.Write(&quot;{0:X2} &quot;, bytes(i))\n         Next i\n         Console.WriteLine()\n      End If\n\n   End Sub &#39;PrintHexBytes \n\nEnd Class &#39;SamplesEncoding\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;System.Text.UTF7Encoding       : 18  23  :7A 61 2B 41 77 59 42 2F 51 4F 79 32 50 2F 63 2F 77 2D\n&#39;System.Text.UTF8Encoding       : 12  24  :7A 61 CC 86 C7 BD CE B2 F1 8F B3 BF\n&#39;System.Text.UnicodeEncoding    : 14  16  :7A 00 61 00 06 03 FD 01 B2 03 FF D8 FF DC\n&#39;System.Text.UnicodeEncoding    : 14  16  :00 7A 00 61 03 06 01 FD 03 B2 D8 FF DC FF\n&#39;System.Text.UTF32Encoding      : 24  32  :7A 00 00 00 61 00 00 00 06 03 00 00 FD 01 00 00 B2 03 00 00 FF FC 04 00\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.Encoding.GetBytes_CharArr#1\">using System;\nusing System.Text;\n\npublic class SamplesEncoding  {\n\n   public static void Main()  {\n\n      // The characters to encode:\n      //    Latin Small Letter Z (U+007A)\n      //    Latin Small Letter A (U+0061)\n      //    Combining Breve (U+0306)\n      //    Latin Small Letter AE With Acute (U+01FD)\n      //    Greek Small Letter Beta (U+03B2)\n      //    a high-surrogate value (U+D8FF)\n      //    a low-surrogate value (U+DCFF)\n      char[] myChars = new char[] { &#39;z&#39;, &#39;a&#39;, &#39;\\u0306&#39;, &#39;\\u01FD&#39;, &#39;\\u03B2&#39;, &#39;\\uD8FF&#39;, &#39;\\uDCFF&#39; };\n\n      // Get different encodings.\n      Encoding  u7    = Encoding.UTF7;\n      Encoding  u8    = Encoding.UTF8;\n      Encoding  u16LE = Encoding.Unicode;\n      Encoding  u16BE = Encoding.BigEndianUnicode;\n      Encoding  u32   = Encoding.UTF32;\n\n      // Encode the entire array, and print out the counts and the resulting bytes.\n      PrintCountsAndBytes( myChars, u7 );\n      PrintCountsAndBytes( myChars, u8 );\n      PrintCountsAndBytes( myChars, u16LE );\n      PrintCountsAndBytes( myChars, u16BE );\n      PrintCountsAndBytes( myChars, u32 );\n\n   }\n\n\n   public static void PrintCountsAndBytes( char[] chars, Encoding enc )  {\n\n      // Display the name of the encoding used.\n      Console.Write( &quot;{0,-30} :&quot;, enc.ToString() );\n\n      // Display the exact byte count.\n      int iBC  = enc.GetByteCount( chars );\n      Console.Write( &quot; {0,-3}&quot;, iBC );\n\n      // Display the maximum byte count.\n      int iMBC = enc.GetMaxByteCount( chars.Length );\n      Console.Write( &quot; {0,-3} :&quot;, iMBC );\n\n      // Encode the array of chars.\n      byte[] bytes = enc.GetBytes( chars );\n\n      // Display all the encoded bytes.\n      PrintHexBytes( bytes );\n\n   }\n\n\n   public static void PrintHexBytes( byte[] bytes )  {\n\n      if (( bytes == null ) || ( bytes.Length == 0 ))\n         Console.WriteLine( &quot;&lt;none&gt;&quot; );\n      else  {\n         for ( int i = 0; i &lt; bytes.Length; i++ )\n            Console.Write( &quot;{0:X2} &quot;, bytes[i] );\n         Console.WriteLine();\n      }\n\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nSystem.Text.UTF7Encoding       : 18  23  :7A 61 2B 41 77 59 42 2F 51 4F 79 32 50 2F 63 2F 77 2D\nSystem.Text.UTF8Encoding       : 12  24  :7A 61 CC 86 C7 BD CE B2 F1 8F B3 BF\nSystem.Text.UnicodeEncoding    : 14  16  :7A 00 61 00 06 03 FD 01 B2 03 FF D8 FF DC\nSystem.Text.UnicodeEncoding    : 14  16  :00 7A 00 61 03 06 01 FD 03 B2 D8 FF DC FF\nSystem.Text.UTF32Encoding      : 24  32  :7A 00 00 00 61 00 00 00 06 03 00 00 FD 01 00 00 B2 03 00 00 FF FC 04 00\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.Encoding.GetBytes_CharArr#1\">using namespace System;\nusing namespace System::Text;\nvoid PrintCountsAndBytes( array&lt;Char&gt;^chars, Encoding^ enc );\nvoid PrintHexBytes( array&lt;Byte&gt;^bytes );\nint main()\n{\n   \n   // The characters to encode:\n   //    Latin Small Letter Z (U+007A)\n   //    Latin Small Letter A (U+0061)\n   //    Combining Breve (U+0306)\n   //    Latin Small Letter AE With Acute (U+01FD)\n   //    Greek Small Letter Beta (U+03B2)\n   //    a high-surrogate value (U+D8FF)\n   //    a low-surrogate value (U+DCFF)\n   array&lt;Char&gt;^myChars = gcnew array&lt;Char&gt;{\n      L&#39;z&#39;,&#39;a&#39;,L&#39;\\u0306&#39;,L&#39;\\u01FD&#39;,L&#39;\\u03B2&#39;,L&#39;\\xD8FF&#39;,L&#39;\\xDCFF&#39;\n   };\n   \n   // Get different encodings.\n   Encoding^ u7 = Encoding::UTF7;\n   Encoding^ u8 = Encoding::UTF8;\n   Encoding^ u16LE = Encoding::Unicode;\n   Encoding^ u16BE = Encoding::BigEndianUnicode;\n   Encoding^ u32 = Encoding::UTF32;\n   \n   // Encode the entire array, and print out the counts and the resulting bytes.\n   PrintCountsAndBytes( myChars, u7 );\n   PrintCountsAndBytes( myChars, u8 );\n   PrintCountsAndBytes( myChars, u16LE );\n   PrintCountsAndBytes( myChars, u16BE );\n   PrintCountsAndBytes( myChars, u32 );\n}\n\nvoid PrintCountsAndBytes( array&lt;Char&gt;^chars, Encoding^ enc )\n{\n   \n   // Display the name of the encoding used.\n   Console::Write( &quot;{0,-30} :&quot;, enc );\n   \n   // Display the exact byte count.\n   int iBC = enc-&gt;GetByteCount( chars );\n   Console::Write( &quot; {0,-3}&quot;, iBC );\n   \n   // Display the maximum byte count.\n   int iMBC = enc-&gt;GetMaxByteCount( chars-&gt;Length );\n   Console::Write( &quot; {0,-3} :&quot;, iMBC );\n   \n   // Encode the array of chars.\n   array&lt;Byte&gt;^bytes = enc-&gt;GetBytes( chars );\n   \n   // Display all the encoded bytes.\n   PrintHexBytes( bytes );\n}\n\nvoid PrintHexBytes( array&lt;Byte&gt;^bytes )\n{\n   if ( (bytes == nullptr) || (bytes-&gt;Length == 0) )\n      Console::WriteLine( &quot;&lt;none&gt;&quot; );\n   else\n   {\n      for ( int i = 0; i &lt; bytes-&gt;Length; i++ )\n         Console::Write( &quot;{0:X2} &quot;, bytes[ i ] );\n      Console::WriteLine();\n   }\n}\n\n/* \nThis code produces the following output.\n\nSystem.Text.UTF7Encoding       : 18  23  :7A 61 2B 41 77 59 42 2F 51 4F 79 32 50 2F 63 2F 77 2D\nSystem.Text.UTF8Encoding       : 12  24  :7A 61 CC 86 C7 BD CE B2 F1 8F B3 BF\nSystem.Text.UnicodeEncoding    : 14  16  :7A 00 61 00 06 03 FD 01 B2 03 FF D8 FF DC\nSystem.Text.UnicodeEncoding    : 14  16  :00 7A 00 61 03 06 01 FD 03 B2 D8 FF DC FF\nSystem.Text.UTF32Encoding      : 24  32  :7A 00 00 00 61 00 00 00 06 03 00 00 FD 01 00 00 B2 03 00 00 FF FC 04 00\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_GetByteCount_System_String_\">\r\n    \r\n            <a id=\"System_Text_Encoding_GetByteCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetByteCount(String)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, calculates the number of bytes produced by encoding the characters in the specified string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int GetByteCount (string s);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string containing the set of characters to encode.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of bytes produced by encoding the specified characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallbackexception\" data-linktype=\"relative-path\">EncoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for complete explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.EncoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.encoderexceptionfallback\" data-linktype=\"relative-path\">EncoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To calculate the exact array size required by <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> to store the resulting bytes, call the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method. To calculate the maximum array size, call the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> method. The <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method generally allows allocation of less memory, while the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> method generally executes faster.  </p>\n<p> The GetByteCount method determines how many bytes result in encoding a set of Unicode characters, and the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method performs the actual encoding. The <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method expects discrete conversions, in contrast to the <a class=\"xref\" href=\"system.text.encoder#System_Text_Encoder_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method, which handles multiple conversions on a single input stream.  </p>\n<p> Several versions of GetByteCount and <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> are supported. The following are some programming considerations for use of these methods:  </p>\n<ul>\n<li><p>Your app might need to encode many input characters to a code page and process the characters using multiple calls. In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> object being used.  </p>\n</li>\n<li><p>If your app handles string inputs, the string version of <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> is recommended.  </p>\n</li>\n<li><p>The Unicode character buffer version of <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_System_Char__System_Int32_System_Byte__System_Int32_\" data-linktype=\"relative-path\">GetBytes(Char*,Int32,Byte*,Int32)</a> allows some fast techniques, particularly with multiple calls using the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> object or inserting into existing buffers. Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.  </p>\n</li>\n<li><p>If your app must convert a large amount of data, it should reuse the output buffer. In this case, the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> version that supports byte arrays is the best choice.  </p>\n</li>\n<li><p>Consider using the <a class=\"xref\" href=\"system.text.encoder#System_Text_Encoder_Convert_\" data-linktype=\"relative-path\">Convert</a> method instead of GetByteCount. The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small. For continuous encoding of a stream, this method is often the best choice.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines the number of bytes required to encode a string or a range in the string, encodes the characters, and displays the resulting bytes.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.Encoding.GetBytes_String#1\">using System;\nusing System.Text;\n\npublic class SamplesEncoding  {\n\n   public static void Main()  {\n\n      // The characters to encode:\n      //    Latin Small Letter Z (U+007A)\n      //    Latin Small Letter A (U+0061)\n      //    Combining Breve (U+0306)\n      //    Latin Small Letter AE With Acute (U+01FD)\n      //    Greek Small Letter Beta (U+03B2)\n      //    a high-surrogate value (U+D8FF)\n      //    a low-surrogate value (U+DCFF)\n      String myStr = &quot;za\\u0306\\u01FD\\u03B2\\uD8FF\\uDCFF&quot;;\n\n      // Get different encodings.\n      Encoding  u7    = Encoding.UTF7;\n      Encoding  u8    = Encoding.UTF8;\n      Encoding  u16LE = Encoding.Unicode;\n      Encoding  u16BE = Encoding.BigEndianUnicode;\n      Encoding  u32   = Encoding.UTF32;\n\n      // Encode the entire string, and print out the counts and the resulting bytes.\n      Console.WriteLine( &quot;Encoding the entire string:&quot; );\n      PrintCountsAndBytes( myStr, u7 );\n      PrintCountsAndBytes( myStr, u8 );\n      PrintCountsAndBytes( myStr, u16LE );\n      PrintCountsAndBytes( myStr, u16BE );\n      PrintCountsAndBytes( myStr, u32 );\n\n      Console.WriteLine();\n\n      // Encode three characters starting at index 4, and print out the counts and the resulting bytes.\n      Console.WriteLine( &quot;Encoding the characters from index 4 through 6:&quot; );\n      PrintCountsAndBytes( myStr, 4, 3, u7 );\n      PrintCountsAndBytes( myStr, 4, 3, u8 );\n      PrintCountsAndBytes( myStr, 4, 3, u16LE );\n      PrintCountsAndBytes( myStr, 4, 3, u16BE );\n      PrintCountsAndBytes( myStr, 4, 3, u32 );\n\n   }\n\n\n   public static void PrintCountsAndBytes( String s, Encoding enc )  {\n\n      // Display the name of the encoding used.\n      Console.Write( &quot;{0,-30} :&quot;, enc.ToString() );\n\n      // Display the exact byte count.\n      int iBC  = enc.GetByteCount( s );\n      Console.Write( &quot; {0,-3}&quot;, iBC );\n\n      // Display the maximum byte count.\n      int iMBC = enc.GetMaxByteCount( s.Length );\n      Console.Write( &quot; {0,-3} :&quot;, iMBC );\n\n      // Encode the entire string.\n      byte[] bytes = enc.GetBytes( s );\n\n      // Display all the encoded bytes.\n      PrintHexBytes( bytes );\n\n   }\n\n\n   public static void PrintCountsAndBytes( String s, int index, int count, Encoding enc )  {\n\n      // Display the name of the encoding used.\n      Console.Write( &quot;{0,-30} :&quot;, enc.ToString() );\n\n      // Display the exact byte count.\n      int iBC  = enc.GetByteCount( s.ToCharArray(), index, count );\n      Console.Write( &quot; {0,-3}&quot;, iBC );\n\n      // Display the maximum byte count.\n      int iMBC = enc.GetMaxByteCount( count );\n      Console.Write( &quot; {0,-3} :&quot;, iMBC );\n\n      // Encode a range of characters in the string.\n      byte[] bytes = new byte[iBC];\n      enc.GetBytes( s, index, count, bytes, bytes.GetLowerBound(0) );\n\n      // Display all the encoded bytes.\n      PrintHexBytes( bytes );\n\n   }\n\n\n   public static void PrintHexBytes( byte[] bytes )  {\n\n      if (( bytes == null ) || ( bytes.Length == 0 ))\n         Console.WriteLine( &quot;&lt;none&gt;&quot; );\n      else  {\n         for ( int i = 0; i &lt; bytes.Length; i++ )\n            Console.Write( &quot;{0:X2} &quot;, bytes[i] );\n         Console.WriteLine();\n      }\n\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nEncoding the entire string:\nSystem.Text.UTF7Encoding       : 18  23  :7A 61 2B 41 77 59 42 2F 51 4F 79 32 50 2F 63 2F 77 2D\nSystem.Text.UTF8Encoding       : 12  24  :7A 61 CC 86 C7 BD CE B2 F1 8F B3 BF\nSystem.Text.UnicodeEncoding    : 14  16  :7A 00 61 00 06 03 FD 01 B2 03 FF D8 FF DC\nSystem.Text.UnicodeEncoding    : 14  16  :00 7A 00 61 03 06 01 FD 03 B2 D8 FF DC FF\nSystem.Text.UTF32Encoding      : 24  32  :7A 00 00 00 61 00 00 00 06 03 00 00 FD 01 00 00 B2 03 00 00 FF FC 04 00\n\nEncoding the characters from index 4 through 6:\nSystem.Text.UTF7Encoding       : 10  11  :2B 41 37 4C 59 2F 39 7A 2F 2D\nSystem.Text.UTF8Encoding       : 6   12  :CE B2 F1 8F B3 BF\nSystem.Text.UnicodeEncoding    : 6   8   :B2 03 FF D8 FF DC\nSystem.Text.UnicodeEncoding    : 6   8   :03 B2 D8 FF DC FF\nSystem.Text.UTF32Encoding      : 8   16  :B2 03 00 00 FF FC 04 00\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.Encoding.GetBytes_String#1\">Imports System\nImports System.Text\nImports Microsoft.VisualBasic\n\nPublic Class SamplesEncoding   \n\n   Public Shared Sub Main()\n\n      &#39; The characters to encode:\n      &#39;    Latin Small Letter Z (U+007A)\n      &#39;    Latin Small Letter A (U+0061)\n      &#39;    Combining Breve (U+0306)\n      &#39;    Latin Small Letter AE With Acute (U+01FD)\n      &#39;    Greek Small Letter Beta (U+03B2)\n      &#39;    a high-surrogate value (U+D8FF)\n      &#39;    a low-surrogate value (U+DCFF)\n      Dim myStr As String = &quot;za&quot; &amp; ChrW(&amp;H0306) &amp; ChrW(&amp;H01FD) &amp; ChrW(&amp;H03B2) &amp; ChrW(&amp;HD8FF) &amp; ChrW(&amp;HDCFF)\n\n      &#39; Get different encodings.\n      Dim u7 As Encoding = Encoding.UTF7\n      Dim u8 As Encoding = Encoding.UTF8\n      Dim u16LE As Encoding = Encoding.Unicode\n      Dim u16BE As Encoding = Encoding.BigEndianUnicode\n      Dim u32 As Encoding = Encoding.UTF32\n\n      &#39; Encode the entire string, and print out the counts and the resulting bytes.\n      Console.WriteLine(&quot;Encoding the entire string:&quot;)\n      PrintCountsAndBytes(myStr, u7)\n      PrintCountsAndBytes(myStr, u8)\n      PrintCountsAndBytes(myStr, u16LE)\n      PrintCountsAndBytes(myStr, u16BE)\n      PrintCountsAndBytes(myStr, u32)\n\n      Console.WriteLine()\n\n      &#39; Encode three characters starting at index 4, and print out the counts and the resulting bytes.\n      Console.WriteLine(&quot;Encoding the characters from index 4 through 6:&quot;)\n      PrintCountsAndBytes(myStr, 4, 3, u7)\n      PrintCountsAndBytes(myStr, 4, 3, u8)\n      PrintCountsAndBytes(myStr, 4, 3, u16LE)\n      PrintCountsAndBytes(myStr, 4, 3, u16BE)\n      PrintCountsAndBytes(myStr, 4, 3, u32)\n\n   End Sub &#39;Main\n\n\n   Overloads Public Shared Sub PrintCountsAndBytes(s As String, enc As Encoding)\n\n      &#39; Display the name of the encoding used.\n      Console.Write(&quot;{0,-30} :&quot;, enc.ToString())\n\n      &#39; Display the exact byte count.\n      Dim iBC As Integer = enc.GetByteCount(s)\n      Console.Write(&quot; {0,-3}&quot;, iBC)\n\n      &#39; Display the maximum byte count.\n      Dim iMBC As Integer = enc.GetMaxByteCount(s.Length)\n      Console.Write(&quot; {0,-3} :&quot;, iMBC)\n\n      &#39; Encode the entire string.\n      Dim bytes As Byte() = enc.GetBytes(s)\n\n      &#39; Display all the encoded bytes.\n      PrintHexBytes(bytes)\n\n   End Sub &#39;PrintCountsAndBytes\n\n\n   Overloads Public Shared Sub PrintCountsAndBytes(s As String, index As Integer, count As Integer, enc As Encoding)\n\n      &#39; Display the name of the encoding used.\n      Console.Write(&quot;{0,-30} :&quot;, enc.ToString())\n\n      &#39; Display the exact byte count.\n      Dim iBC As Integer = enc.GetByteCount(s.ToCharArray(), index, count)\n      Console.Write(&quot; {0,-3}&quot;, iBC)\n\n      &#39; Display the maximum byte count.\n      Dim iMBC As Integer = enc.GetMaxByteCount(count)\n      Console.Write(&quot; {0,-3} :&quot;, iMBC)\n\n      &#39; Encode a range of characters in the string.\n      &#39; NOTE: In VB.NET, arrays contain one extra element by default.\n      &#39;       The following line creates the array with the exact number of elements required.\n      Dim bytes(iBC - 1) As Byte\n      enc.GetBytes(s, index, count, bytes, bytes.GetLowerBound(0))\n\n      &#39; Display all the encoded bytes.\n      PrintHexBytes(bytes)\n\n   End Sub &#39;PrintCountsAndBytes\n\n\n   Public Shared Sub PrintHexBytes(bytes() As Byte)\n\n      If bytes Is Nothing OrElse bytes.Length = 0 Then\n         Console.WriteLine(&quot;&lt;none&gt;&quot;)\n      Else\n         Dim i As Integer\n         For i = 0 To bytes.Length - 1\n            Console.Write(&quot;{0:X2} &quot;, bytes(i))\n         Next i\n         Console.WriteLine()\n      End If\n\n   End Sub &#39;PrintHexBytes \n\nEnd Class &#39;SamplesEncoding\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Encoding the entire string:\n&#39;System.Text.UTF7Encoding       : 18  23  :7A 61 2B 41 77 59 42 2F 51 4F 79 32 50 2F 63 2F 77 2D\n&#39;System.Text.UTF8Encoding       : 12  24  :7A 61 CC 86 C7 BD CE B2 F1 8F B3 BF\n&#39;System.Text.UnicodeEncoding    : 14  16  :7A 00 61 00 06 03 FD 01 B2 03 FF D8 FF DC\n&#39;System.Text.UnicodeEncoding    : 14  16  :00 7A 00 61 03 06 01 FD 03 B2 D8 FF DC FF\n&#39;System.Text.UTF32Encoding      : 24  32  :7A 00 00 00 61 00 00 00 06 03 00 00 FD 01 00 00 B2 03 00 00 FF FC 04 00\n&#39;\n&#39;Encoding the characters from index 4 through 6:\n&#39;System.Text.UTF7Encoding       : 10  11  :2B 41 37 4C 59 2F 39 7A 2F 2D\n&#39;System.Text.UTF8Encoding       : 6   12  :CE B2 F1 8F B3 BF\n&#39;System.Text.UnicodeEncoding    : 6   8   :B2 03 FF D8 FF DC\n&#39;System.Text.UnicodeEncoding    : 6   8   :03 B2 D8 FF DC FF\n&#39;System.Text.UTF32Encoding      : 8   16  :B2 03 00 00 FF FC 04 00\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.Encoding.GetBytes_String#1\">using namespace System;\nusing namespace System::Text;\nvoid PrintCountsAndBytes( String^ s, Encoding^ enc );\nvoid PrintCountsAndBytes( String^ s, int index, int count, Encoding^ enc );\nvoid PrintHexBytes( array&lt;Byte&gt;^bytes );\nint main()\n{\n   \n   // The characters to encode:\n   //    Latin Small Letter Z (U+007A)\n   //    Latin Small Letter A (U+0061)\n   //    Combining Breve (U+0306)\n   //    Latin Small Letter AE With Acute (U+01FD)\n   //    Greek Small Letter Beta (U+03B2)\n   //    a high-surrogate value (U+D8FF)\n   //    a low-surrogate value (U+DCFF)\n   String^ myStr = L&quot;za\\u0306\\u01FD\\u03B2\\xD8FF\\xDCFF&quot;;\n   \n   // Get different encodings.\n   Encoding^ u7 = Encoding::UTF7;\n   Encoding^ u8 = Encoding::UTF8;\n   Encoding^ u16LE = Encoding::Unicode;\n   Encoding^ u16BE = Encoding::BigEndianUnicode;\n   Encoding^ u32 = Encoding::UTF32;\n   \n   // Encode the entire string, and print out the counts and the resulting bytes.\n   Console::WriteLine( &quot;Encoding the entire string:&quot; );\n   PrintCountsAndBytes( myStr, u7 );\n   PrintCountsAndBytes( myStr, u8 );\n   PrintCountsAndBytes( myStr, u16LE );\n   PrintCountsAndBytes( myStr, u16BE );\n   PrintCountsAndBytes( myStr, u32 );\n   Console::WriteLine();\n   \n   // Encode three characters starting at index 4, and print out the counts and the resulting bytes.\n   Console::WriteLine( &quot;Encoding the characters from index 4 through 6:&quot; );\n   PrintCountsAndBytes( myStr, 4, 3, u7 );\n   PrintCountsAndBytes( myStr, 4, 3, u8 );\n   PrintCountsAndBytes( myStr, 4, 3, u16LE );\n   PrintCountsAndBytes( myStr, 4, 3, u16BE );\n   PrintCountsAndBytes( myStr, 4, 3, u32 );\n}\n\nvoid PrintCountsAndBytes( String^ s, Encoding^ enc )\n{\n   \n   // Display the name of the encoding used.\n   Console::Write( &quot;{0,-30} :&quot;, enc );\n   \n   // Display the exact byte count.\n   int iBC = enc-&gt;GetByteCount( s );\n   Console::Write( &quot; {0,-3}&quot;, iBC );\n   \n   // Display the maximum byte count.\n   int iMBC = enc-&gt;GetMaxByteCount( s-&gt;Length );\n   Console::Write( &quot; {0,-3} :&quot;, iMBC );\n   \n   // Encode the entire string.\n   array&lt;Byte&gt;^bytes = enc-&gt;GetBytes( s );\n   \n   // Display all the encoded bytes.\n   PrintHexBytes( bytes );\n}\n\nvoid PrintCountsAndBytes( String^ s, int index, int count, Encoding^ enc )\n{\n   \n   // Display the name of the encoding used.\n   Console::Write( &quot;{0,-30} :&quot;, enc );\n   \n   // Display the exact byte count.\n   int iBC = enc-&gt;GetByteCount( s-&gt;ToCharArray(), index, count );\n   Console::Write( &quot; {0,-3}&quot;, iBC );\n   \n   // Display the maximum byte count.\n   int iMBC = enc-&gt;GetMaxByteCount( count );\n   Console::Write( &quot; {0,-3} :&quot;, iMBC );\n   \n   // Encode a range of characters in the string.\n   array&lt;Byte&gt;^bytes = gcnew array&lt;Byte&gt;(iBC);\n   enc-&gt;GetBytes( s, index, count, bytes, bytes-&gt;GetLowerBound( 0 ) );\n   \n   // Display all the encoded bytes.\n   PrintHexBytes( bytes );\n}\n\nvoid PrintHexBytes( array&lt;Byte&gt;^bytes )\n{\n   if ( (bytes == nullptr) || (bytes-&gt;Length == 0) )\n      Console::WriteLine( &quot;&lt;none&gt;&quot; );\n   else\n   {\n      for ( int i = 0; i &lt; bytes-&gt;Length; i++ )\n         Console::Write( &quot;{0:X2} &quot;, bytes[ i ] );\n      Console::WriteLine();\n   }\n}\n\n/* \nThis code produces the following output.\n\nEncoding the entire string:\nSystem.Text.UTF7Encoding       : 18  23  :7A 61 2B 41 77 59 42 2F 51 4F 79 32 50 2F 63 2F 77 2D\nSystem.Text.UTF8Encoding       : 12  24  :7A 61 CC 86 C7 BD CE B2 F1 8F B3 BF\nSystem.Text.UnicodeEncoding    : 14  16  :7A 00 61 00 06 03 FD 01 B2 03 FF D8 FF DC\nSystem.Text.UnicodeEncoding    : 14  16  :00 7A 00 61 03 06 01 FD 03 B2 D8 FF DC FF\nSystem.Text.UTF32Encoding      : 24  32  :7A 00 00 00 61 00 00 00 06 03 00 00 FD 01 00 00 B2 03 00 00 FF FC 04 00\n\nEncoding the characters from index 4 through 6:\nSystem.Text.UTF7Encoding       : 10  11  :2B 41 37 4C 59 2F 39 7A 2F 2D\nSystem.Text.UTF8Encoding       : 6   12  :CE B2 F1 8F B3 BF\nSystem.Text.UnicodeEncoding    : 6   8   :B2 03 FF D8 FF DC\nSystem.Text.UnicodeEncoding    : 6   8   :03 B2 D8 FF DC FF\nSystem.Text.UTF32Encoding      : 8   16  :B2 03 00 00 FF FC 04 00\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_GetByteCount_System_Char__System_Int32_\">\r\n    \r\n            <a id=\"System_Text_Encoding_GetByteCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetByteCount(Char*,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int GetByteCount (char* chars, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>chars</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>*</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to the first character to encode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of characters to encode.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of bytes produced by encoding the specified characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>chars</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>count</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallbackexception\" data-linktype=\"relative-path\">EncoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for complete explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.EncoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.encoderexceptionfallback\" data-linktype=\"relative-path\">EncoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To calculate the exact array size that <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> requires to store the resulting bytes, you should call the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method. To calculate the maximum array size, call the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> method. The <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method generally allows allocation of less memory, while the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> method generally executes faster.  </p>\n<p> The GetByteCount method determines how many bytes result in encoding a set of Unicode characters, and the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_System_Char__System_Int32_System_Byte__System_Int32_\" data-linktype=\"relative-path\">GetBytes(Char*,Int32,Byte*,Int32)</a> method performs the actual encoding. The <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method expects discrete conversions, in contrast to the <a class=\"xref\" href=\"system.text.encoder#System_Text_Encoder_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method, which handles multiple conversions on a single input stream.  </p>\n<p> Several versions of <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> and <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> are supported. The following are some considerations for using these methods:  </p>\n<ul>\n<li><p>Your app may need to encode many input characters to a code page and process the characters using multiple calls. In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> object being used.  </p>\n</li>\n<li><p>If your app handles string inputs, you should use the string version of the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method.  </p>\n</li>\n<li><p>The Unicode character buffer version of <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> allows some fast techniques, particularly with multiple calls using the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> object or inserting into existing buffers. Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.  </p>\n</li>\n<li><p>If your app must convert a large amount of data, it should reuse the output buffer. In this case, the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> version that supports byte arrays is the best choice.  </p>\n</li>\n<li><p>Consider using the <a class=\"xref\" href=\"system.text.encoder#System_Text_Encoder_Convert_\" data-linktype=\"relative-path\">Convert</a> method instead of <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a>. The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small. For continuous encoding of a stream, this method is often the best choice.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_GetByteCount_System_Char___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Text_Encoding_GetByteCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetByteCount(Char[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters from the specified character array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract int GetByteCount (char[] chars, int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>chars</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character array containing the set of characters to encode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the first character to encode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of characters to encode.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of bytes produced by encoding the specified characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>chars</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> or <code>count</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>index</code> and <code>count</code> do not denote a valid range in <code>chars</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallbackexception\" data-linktype=\"relative-path\">EncoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for complete explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.EncoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.encoderexceptionfallback\" data-linktype=\"relative-path\">EncoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To calculate the exact array size required by <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> to store the resulting bytes, call the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method. To calculate the maximum array size, call the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> method. The <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method generally allows allocation of less memory, while the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> method generally executes faster.  </p>\n<p> The <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method determines how many bytes result in encoding a set of Unicode characters, and the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method performs the actual encoding. The <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method expects discrete conversions, in contrast to the <a class=\"xref\" href=\"system.text.encoder#System_Text_Encoder_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method, which handles multiple conversions on a single input stream.  </p>\n<p> Several versions of <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> and <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> are supported. The following are some programming considerations for use of these methods:  </p>\n<ul>\n<li><p>Your app might need to encode many input characters to a code page and process the characters using multiple calls. In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> object being used.  </p>\n</li>\n<li><p>If your app handles string inputs, the string version of <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> is recommended.  </p>\n</li>\n<li><p>The Unicode character buffer version of <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_System_Char__System_Int32_System_Byte__System_Int32_\" data-linktype=\"relative-path\">GetBytes(Char*,Int32,Byte*,Int32)</a> allows some fast techniques, particularly with multiple calls using the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> object or inserting into existing buffers. Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.  </p>\n</li>\n<li><p>If your app must convert a large amount of data, it should reuse the output buffer. In this case, the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> version that supports byte arrays is the best choice.  </p>\n</li>\n<li><p>Consider using the <a class=\"xref\" href=\"system.text.encoder#System_Text_Encoder_Convert_\" data-linktype=\"relative-path\">Convert</a> method instead of <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a>. The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small. For continuous encoding of a stream, this method is often the best choice.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines the number of bytes required to encode three characters from a character array, encodes the characters, and displays the resulting bytes.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.Encoding.GetBytes_CharArrIC#1\">using System;\nusing System.Text;\n\npublic class SamplesEncoding  {\n\n   public static void Main()  {\n\n      // The characters to encode:\n      //    Latin Small Letter Z (U+007A)\n      //    Latin Small Letter A (U+0061)\n      //    Combining Breve (U+0306)\n      //    Latin Small Letter AE With Acute (U+01FD)\n      //    Greek Small Letter Beta (U+03B2)\n      //    a high-surrogate value (U+D8FF)\n      //    a low-surrogate value (U+DCFF)\n      char[] myChars = new char[] { &#39;z&#39;, &#39;a&#39;, &#39;\\u0306&#39;, &#39;\\u01FD&#39;, &#39;\\u03B2&#39;, &#39;\\uD8FF&#39;, &#39;\\uDCFF&#39; };\n\n      // Get different encodings.\n      Encoding  u7    = Encoding.UTF7;\n      Encoding  u8    = Encoding.UTF8;\n      Encoding  u16LE = Encoding.Unicode;\n      Encoding  u16BE = Encoding.BigEndianUnicode;\n      Encoding  u32   = Encoding.UTF32;\n\n      // Encode three characters starting at index 4, and print out the counts and the resulting bytes.\n      PrintCountsAndBytes( myChars, 4, 3, u7 );\n      PrintCountsAndBytes( myChars, 4, 3, u8 );\n      PrintCountsAndBytes( myChars, 4, 3, u16LE );\n      PrintCountsAndBytes( myChars, 4, 3, u16BE );\n      PrintCountsAndBytes( myChars, 4, 3, u32 );\n\n   }\n\n\n   public static void PrintCountsAndBytes( char[] chars, int index, int count, Encoding enc )  {\n\n      // Display the name of the encoding used.\n      Console.Write( &quot;{0,-30} :&quot;, enc.ToString() );\n\n      // Display the exact byte count.\n      int iBC  = enc.GetByteCount( chars, index, count );\n      Console.Write( &quot; {0,-3}&quot;, iBC );\n\n      // Display the maximum byte count.\n      int iMBC = enc.GetMaxByteCount( count );\n      Console.Write( &quot; {0,-3} :&quot;, iMBC );\n\n      // Encode the array of chars.\n      byte[] bytes = enc.GetBytes( chars, index, count );\n\n      // The following is an alternative way to encode the array of chars:\n      // byte[] bytes = new byte[iBC];\n      // enc.GetBytes( chars, index, count, bytes, bytes.GetLowerBound(0) );\n\n      // Display all the encoded bytes.\n      PrintHexBytes( bytes );\n\n   }\n\n\n   public static void PrintHexBytes( byte[] bytes )  {\n\n      if (( bytes == null ) || ( bytes.Length == 0 ))\n         Console.WriteLine( &quot;&lt;none&gt;&quot; );\n      else  {\n         for ( int i = 0; i &lt; bytes.Length; i++ )\n            Console.Write( &quot;{0:X2} &quot;, bytes[i] );\n         Console.WriteLine();\n      }\n\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nSystem.Text.UTF7Encoding       : 10  11  :2B 41 37 4C 59 2F 39 7A 2F 2D\nSystem.Text.UTF8Encoding       : 6   12  :CE B2 F1 8F B3 BF\nSystem.Text.UnicodeEncoding    : 6   8   :B2 03 FF D8 FF DC\nSystem.Text.UnicodeEncoding    : 6   8   :03 B2 D8 FF DC FF\nSystem.Text.UTF32Encoding      : 8   16  :B2 03 00 00 FF FC 04 00\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.Encoding.GetBytes_CharArrIC#1\">Imports System\nImports System.Text\nImports Microsoft.VisualBasic\n\nPublic Class SamplesEncoding   \n\n   Public Shared Sub Main()\n\n      &#39; The characters to encode:\n      &#39;    Latin Small Letter Z (U+007A)\n      &#39;    Latin Small Letter A (U+0061)\n      &#39;    Combining Breve (U+0306)\n      &#39;    Latin Small Letter AE With Acute (U+01FD)\n      &#39;    Greek Small Letter Beta (U+03B2)\n      &#39;    a high-surrogate value (U+D8FF)\n      &#39;    a low-surrogate value (U+DCFF)\n      Dim myChars() As Char = {&quot;z&quot;c, &quot;a&quot;c, ChrW(&amp;H0306), ChrW(&amp;H01FD), ChrW(&amp;H03B2), ChrW(&amp;HD8FF), ChrW(&amp;HDCFF) }\n\n      &#39; Get different encodings.\n      Dim u7 As Encoding = Encoding.UTF7\n      Dim u8 As Encoding = Encoding.UTF8\n      Dim u16LE As Encoding = Encoding.Unicode\n      Dim u16BE As Encoding = Encoding.BigEndianUnicode\n      Dim u32 As Encoding = Encoding.UTF32\n\n      &#39; Encode three characters starting at index 4, and print out the counts and the resulting bytes.\n      PrintCountsAndBytes(myChars, 4, 3, u7)\n      PrintCountsAndBytes(myChars, 4, 3, u8)\n      PrintCountsAndBytes(myChars, 4, 3, u16LE)\n      PrintCountsAndBytes(myChars, 4, 3, u16BE)\n      PrintCountsAndBytes(myChars, 4, 3, u32)\n\n   End Sub &#39;Main\n\n\n   Public Shared Sub PrintCountsAndBytes(chars() As Char, index As Integer, count As Integer, enc As Encoding)\n\n      &#39; Display the name of the encoding used.\n      Console.Write(&quot;{0,-30} :&quot;, enc.ToString())\n\n      &#39; Display the exact byte count.\n      Dim iBC As Integer = enc.GetByteCount(chars, index, count)\n      Console.Write(&quot; {0,-3}&quot;, iBC)\n\n      &#39; Display the maximum byte count.\n      Dim iMBC As Integer = enc.GetMaxByteCount(count)\n      Console.Write(&quot; {0,-3} :&quot;, iMBC)\n\n      &#39; Encode the array of chars.\n      Dim bytes As Byte() = enc.GetBytes(chars, index, count)\n\n      &#39; The following is an alternative way to encode the array of chars:\n      &#39; NOTE: In VB.NET, arrays contain one extra element by default.\n      &#39;       The following line creates the array with the exact number of elements required.\n      &#39; Dim bytes(iBC - 1) As Byte\n      &#39; enc.GetBytes( chars, index, count, bytes, bytes.GetLowerBound(0) )\n\n      &#39; Display all the encoded bytes.\n      PrintHexBytes(bytes)\n\n   End Sub &#39;PrintCountsAndBytes\n\n\n   Public Shared Sub PrintHexBytes(bytes() As Byte)\n\n      If bytes Is Nothing OrElse bytes.Length = 0 Then\n         Console.WriteLine(&quot;&lt;none&gt;&quot;)\n      Else\n         Dim i As Integer\n         For i = 0 To bytes.Length - 1\n            Console.Write(&quot;{0:X2} &quot;, bytes(i))\n         Next i\n         Console.WriteLine()\n      End If\n\n   End Sub &#39;PrintHexBytes \n\nEnd Class &#39;SamplesEncoding\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;System.Text.UTF7Encoding       : 10  11  :2B 41 37 4C 59 2F 39 7A 2F 2D\n&#39;System.Text.UTF8Encoding       : 6   12  :CE B2 F1 8F B3 BF\n&#39;System.Text.UnicodeEncoding    : 6   8   :B2 03 FF D8 FF DC\n&#39;System.Text.UnicodeEncoding    : 6   8   :03 B2 D8 FF DC FF\n&#39;System.Text.UTF32Encoding      : 8   16  :B2 03 00 00 FF FC 04 00\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.Encoding.GetBytes_CharArrIC#1\">using namespace System;\nusing namespace System::Text;\nvoid PrintCountsAndBytes( array&lt;Char&gt;^chars, int index, int count, Encoding^ enc );\nvoid PrintHexBytes( array&lt;Byte&gt;^bytes );\nint main()\n{\n   \n   // The characters to encode:\n   //    Latin Small Letter Z (U+007A)\n   //    Latin Small Letter A (U+0061)\n   //    Combining Breve (U+0306)\n   //    Latin Small Letter AE With Acute (U+01FD)\n   //    Greek Small Letter Beta (U+03B2)\n   //    a high-surrogate value (U+D8FF)\n   //    a low-surrogate value (U+DCFF)\n   array&lt;Char&gt;^myChars = gcnew array&lt;Char&gt;{\n      L&#39;z&#39;,L&#39;a&#39;,L&#39;\\u0306&#39;,L&#39;\\u01FD&#39;,L&#39;\\u03B2&#39;,L&#39;\\xD8FF&#39;,L&#39;\\xDCFF&#39;\n   };\n   \n   // Get different encodings.\n   Encoding^ u7 = Encoding::UTF7;\n   Encoding^ u8 = Encoding::UTF8;\n   Encoding^ u16LE = Encoding::Unicode;\n   Encoding^ u16BE = Encoding::BigEndianUnicode;\n   Encoding^ u32 = Encoding::UTF32;\n   \n   // Encode three characters starting at index 4, and print out the counts and the resulting bytes.\n   PrintCountsAndBytes( myChars, 4, 3, u7 );\n   PrintCountsAndBytes( myChars, 4, 3, u8 );\n   PrintCountsAndBytes( myChars, 4, 3, u16LE );\n   PrintCountsAndBytes( myChars, 4, 3, u16BE );\n   PrintCountsAndBytes( myChars, 4, 3, u32 );\n}\n\nvoid PrintCountsAndBytes( array&lt;Char&gt;^chars, int index, int count, Encoding^ enc )\n{\n   \n   // Display the name of the encoding used.\n   Console::Write( &quot;{0,-30} :&quot;, enc );\n   \n   // Display the exact byte count.\n   int iBC = enc-&gt;GetByteCount( chars, index, count );\n   Console::Write( &quot; {0,-3}&quot;, iBC );\n   \n   // Display the maximum byte count.\n   int iMBC = enc-&gt;GetMaxByteCount( count );\n   Console::Write( &quot; {0,-3} :&quot;, iMBC );\n   \n   // Encode the array of chars.\n   array&lt;Byte&gt;^bytes = enc-&gt;GetBytes( chars, index, count );\n   \n   // The following is an alternative way to encode the array of chars:\n   // byte[] bytes = new byte[iBC];\n   // enc.GetBytes( chars, index, count, bytes, bytes.GetLowerBound(0) );\n   // Display all the encoded bytes.\n   PrintHexBytes( bytes );\n}\n\nvoid PrintHexBytes( array&lt;Byte&gt;^bytes )\n{\n   if ( (bytes == nullptr) || (bytes-&gt;Length == 0) )\n      Console::WriteLine( &quot;&lt;none&gt;&quot; );\n   else\n   {\n      for ( int i = 0; i &lt; bytes-&gt;Length; i++ )\n         Console::Write( &quot;{0:X2} &quot;, bytes[ i ] );\n      Console::WriteLine();\n   }\n}\n\n/* \nThis code produces the following output.\n\nSystem.Text.UTF7Encoding       : 10  11  :2B 41 37 4C 59 2F 39 7A 2F 2D\nSystem.Text.UTF8Encoding       : 6   12  :CE B2 F1 8F B3 BF\nSystem.Text.UnicodeEncoding    : 6   8   :B2 03 FF D8 FF DC\nSystem.Text.UnicodeEncoding    : 6   8   :03 B2 D8 FF DC FF\nSystem.Text.UTF32Encoding      : 8   16  :B2 03 00 00 FF FC 04 00\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_GetBytes_System_Char___\">\r\n    \r\n            <a id=\"System_Text_Encoding_GetBytes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetBytes(Char[])</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, encodes all the characters in the specified character array into a sequence of bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual byte[] GetBytes (char[] chars);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>chars</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character array containing the characters to encode.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>A byte array containing the results of encoding the specified set of characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>chars</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallbackexception\" data-linktype=\"relative-path\">EncoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for complete explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.EncoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.encoderexceptionfallback\" data-linktype=\"relative-path\">EncoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> or the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> provided by the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetDecoder_\" data-linktype=\"relative-path\">GetDecoder</a> method or the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncoder_\" data-linktype=\"relative-path\">GetEncoder</a> method, respectively, of a derived class.  </p>\n<p> The <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method determines how many bytes result in encoding a set of Unicode characters, and the GetBytes method performs the actual encoding. The GetBytes method expects discrete conversions, in contrast to the <a class=\"xref\" href=\"system.text.encoder#System_Text_Encoder_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method, which handles multiple conversions on a single input stream.  </p>\n<p> Several versions of <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> and GetBytes are supported. The following are some programming considerations for use of these methods:  </p>\n<ul>\n<li><p>Your app might need to encode many input characters to a code page and process the characters using multiple calls. In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> object being used. (For example, a character sequence that includes surrogate pairs might end with a high surrogate. The <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> will remember that high surrogate so that it can be combined with a low surrogate at the beginning of a following call. <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> won&#39;t be able to maintain the state, so the character will be sent to the <a class=\"xref\" href=\"system.text.encoderfallback\" data-linktype=\"relative-path\">EncoderFallback</a>.)  </p>\n</li>\n<li><p>If your app handles string inputs, you should call the string version of the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method.  </p>\n</li>\n<li><p>The Unicode character buffer version of <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_System_Char__System_Int32_System_Byte__System_Int32_\" data-linktype=\"relative-path\">GetBytes(Char*,Int32,Byte*,Int32)</a> allows some fast techniques, particularly with multiple calls using the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> object or inserting into existing buffers. Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.  </p>\n</li>\n<li><p>If your app must convert a large amount of data, it should reuse the output buffer. In this case, the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> version that supports byte arrays is the best choice.  </p>\n</li>\n<li><p>Consider using the <a class=\"xref\" href=\"system.text.encoder#System_Text_Encoder_Convert_\" data-linktype=\"relative-path\">Convert</a> method instead of <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a>. The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small. For continuous encoding of a stream, this method is often the best choice.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines the number of bytes required to encode a character array, encodes the characters, and displays the resulting bytes.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Text.Encoding.GetBytes_CharArr#1\">Imports System\nImports System.Text\nImports Microsoft.VisualBasic\n\nPublic Class SamplesEncoding   \n\n   Public Shared Sub Main()\n\n      &#39; The characters to encode:\n      &#39;    Latin Small Letter Z (U+007A)\n      &#39;    Latin Small Letter A (U+0061)\n      &#39;    Combining Breve (U+0306)\n      &#39;    Latin Small Letter AE With Acute (U+01FD)\n      &#39;    Greek Small Letter Beta (U+03B2)\n      &#39;    a high-surrogate value (U+D8FF)\n      &#39;    a low-surrogate value (U+DCFF)\n      Dim myChars() As Char = {&quot;z&quot;c, &quot;a&quot;c, ChrW(&amp;H0306), ChrW(&amp;H01FD), ChrW(&amp;H03B2), ChrW(&amp;HD8FF), ChrW(&amp;HDCFF)}\n \n\n      &#39; Get different encodings.\n      Dim u7 As Encoding = Encoding.UTF7\n      Dim u8 As Encoding = Encoding.UTF8\n      Dim u16LE As Encoding = Encoding.Unicode\n      Dim u16BE As Encoding = Encoding.BigEndianUnicode\n      Dim u32 As Encoding = Encoding.UTF32\n\n      &#39; Encode the entire array, and print out the counts and the resulting bytes.\n      PrintCountsAndBytes(myChars, u7)\n      PrintCountsAndBytes(myChars, u8)\n      PrintCountsAndBytes(myChars, u16LE)\n      PrintCountsAndBytes(myChars, u16BE)\n      PrintCountsAndBytes(myChars, u32)\n\n   End Sub &#39;Main\n\n\n   Public Shared Sub PrintCountsAndBytes(chars() As Char, enc As Encoding)\n\n      &#39; Display the name of the encoding used.\n      Console.Write(&quot;{0,-30} :&quot;, enc.ToString())\n\n      &#39; Display the exact byte count.\n      Dim iBC As Integer = enc.GetByteCount(chars)\n      Console.Write(&quot; {0,-3}&quot;, iBC)\n\n      &#39; Display the maximum byte count.\n      Dim iMBC As Integer = enc.GetMaxByteCount(chars.Length)\n      Console.Write(&quot; {0,-3} :&quot;, iMBC)\n\n      &#39; Encode the array of chars.\n      Dim bytes As Byte() = enc.GetBytes(chars)\n\n      &#39; Display all the encoded bytes.\n      PrintHexBytes(bytes)\n\n   End Sub &#39;PrintCountsAndBytes\n\n\n   Public Shared Sub PrintHexBytes(bytes() As Byte)\n\n      If bytes Is Nothing OrElse bytes.Length = 0 Then\n         Console.WriteLine(&quot;&lt;none&gt;&quot;)\n      Else\n         Dim i As Integer\n         For i = 0 To bytes.Length - 1\n            Console.Write(&quot;{0:X2} &quot;, bytes(i))\n         Next i\n         Console.WriteLine()\n      End If\n\n   End Sub &#39;PrintHexBytes \n\nEnd Class &#39;SamplesEncoding\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;System.Text.UTF7Encoding       : 18  23  :7A 61 2B 41 77 59 42 2F 51 4F 79 32 50 2F 63 2F 77 2D\n&#39;System.Text.UTF8Encoding       : 12  24  :7A 61 CC 86 C7 BD CE B2 F1 8F B3 BF\n&#39;System.Text.UnicodeEncoding    : 14  16  :7A 00 61 00 06 03 FD 01 B2 03 FF D8 FF DC\n&#39;System.Text.UnicodeEncoding    : 14  16  :00 7A 00 61 03 06 01 FD 03 B2 D8 FF DC FF\n&#39;System.Text.UTF32Encoding      : 24  32  :7A 00 00 00 61 00 00 00 06 03 00 00 FD 01 00 00 B2 03 00 00 FF FC 04 00\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.Encoding.GetBytes_CharArr#1\">using System;\nusing System.Text;\n\npublic class SamplesEncoding  {\n\n   public static void Main()  {\n\n      // The characters to encode:\n      //    Latin Small Letter Z (U+007A)\n      //    Latin Small Letter A (U+0061)\n      //    Combining Breve (U+0306)\n      //    Latin Small Letter AE With Acute (U+01FD)\n      //    Greek Small Letter Beta (U+03B2)\n      //    a high-surrogate value (U+D8FF)\n      //    a low-surrogate value (U+DCFF)\n      char[] myChars = new char[] { &#39;z&#39;, &#39;a&#39;, &#39;\\u0306&#39;, &#39;\\u01FD&#39;, &#39;\\u03B2&#39;, &#39;\\uD8FF&#39;, &#39;\\uDCFF&#39; };\n\n      // Get different encodings.\n      Encoding  u7    = Encoding.UTF7;\n      Encoding  u8    = Encoding.UTF8;\n      Encoding  u16LE = Encoding.Unicode;\n      Encoding  u16BE = Encoding.BigEndianUnicode;\n      Encoding  u32   = Encoding.UTF32;\n\n      // Encode the entire array, and print out the counts and the resulting bytes.\n      PrintCountsAndBytes( myChars, u7 );\n      PrintCountsAndBytes( myChars, u8 );\n      PrintCountsAndBytes( myChars, u16LE );\n      PrintCountsAndBytes( myChars, u16BE );\n      PrintCountsAndBytes( myChars, u32 );\n\n   }\n\n\n   public static void PrintCountsAndBytes( char[] chars, Encoding enc )  {\n\n      // Display the name of the encoding used.\n      Console.Write( &quot;{0,-30} :&quot;, enc.ToString() );\n\n      // Display the exact byte count.\n      int iBC  = enc.GetByteCount( chars );\n      Console.Write( &quot; {0,-3}&quot;, iBC );\n\n      // Display the maximum byte count.\n      int iMBC = enc.GetMaxByteCount( chars.Length );\n      Console.Write( &quot; {0,-3} :&quot;, iMBC );\n\n      // Encode the array of chars.\n      byte[] bytes = enc.GetBytes( chars );\n\n      // Display all the encoded bytes.\n      PrintHexBytes( bytes );\n\n   }\n\n\n   public static void PrintHexBytes( byte[] bytes )  {\n\n      if (( bytes == null ) || ( bytes.Length == 0 ))\n         Console.WriteLine( &quot;&lt;none&gt;&quot; );\n      else  {\n         for ( int i = 0; i &lt; bytes.Length; i++ )\n            Console.Write( &quot;{0:X2} &quot;, bytes[i] );\n         Console.WriteLine();\n      }\n\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nSystem.Text.UTF7Encoding       : 18  23  :7A 61 2B 41 77 59 42 2F 51 4F 79 32 50 2F 63 2F 77 2D\nSystem.Text.UTF8Encoding       : 12  24  :7A 61 CC 86 C7 BD CE B2 F1 8F B3 BF\nSystem.Text.UnicodeEncoding    : 14  16  :7A 00 61 00 06 03 FD 01 B2 03 FF D8 FF DC\nSystem.Text.UnicodeEncoding    : 14  16  :00 7A 00 61 03 06 01 FD 03 B2 D8 FF DC FF\nSystem.Text.UTF32Encoding      : 24  32  :7A 00 00 00 61 00 00 00 06 03 00 00 FD 01 00 00 B2 03 00 00 FF FC 04 00\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.Encoding.GetBytes_CharArr#1\">using namespace System;\nusing namespace System::Text;\nvoid PrintCountsAndBytes( array&lt;Char&gt;^chars, Encoding^ enc );\nvoid PrintHexBytes( array&lt;Byte&gt;^bytes );\nint main()\n{\n   \n   // The characters to encode:\n   //    Latin Small Letter Z (U+007A)\n   //    Latin Small Letter A (U+0061)\n   //    Combining Breve (U+0306)\n   //    Latin Small Letter AE With Acute (U+01FD)\n   //    Greek Small Letter Beta (U+03B2)\n   //    a high-surrogate value (U+D8FF)\n   //    a low-surrogate value (U+DCFF)\n   array&lt;Char&gt;^myChars = gcnew array&lt;Char&gt;{\n      L&#39;z&#39;,&#39;a&#39;,L&#39;\\u0306&#39;,L&#39;\\u01FD&#39;,L&#39;\\u03B2&#39;,L&#39;\\xD8FF&#39;,L&#39;\\xDCFF&#39;\n   };\n   \n   // Get different encodings.\n   Encoding^ u7 = Encoding::UTF7;\n   Encoding^ u8 = Encoding::UTF8;\n   Encoding^ u16LE = Encoding::Unicode;\n   Encoding^ u16BE = Encoding::BigEndianUnicode;\n   Encoding^ u32 = Encoding::UTF32;\n   \n   // Encode the entire array, and print out the counts and the resulting bytes.\n   PrintCountsAndBytes( myChars, u7 );\n   PrintCountsAndBytes( myChars, u8 );\n   PrintCountsAndBytes( myChars, u16LE );\n   PrintCountsAndBytes( myChars, u16BE );\n   PrintCountsAndBytes( myChars, u32 );\n}\n\nvoid PrintCountsAndBytes( array&lt;Char&gt;^chars, Encoding^ enc )\n{\n   \n   // Display the name of the encoding used.\n   Console::Write( &quot;{0,-30} :&quot;, enc );\n   \n   // Display the exact byte count.\n   int iBC = enc-&gt;GetByteCount( chars );\n   Console::Write( &quot; {0,-3}&quot;, iBC );\n   \n   // Display the maximum byte count.\n   int iMBC = enc-&gt;GetMaxByteCount( chars-&gt;Length );\n   Console::Write( &quot; {0,-3} :&quot;, iMBC );\n   \n   // Encode the array of chars.\n   array&lt;Byte&gt;^bytes = enc-&gt;GetBytes( chars );\n   \n   // Display all the encoded bytes.\n   PrintHexBytes( bytes );\n}\n\nvoid PrintHexBytes( array&lt;Byte&gt;^bytes )\n{\n   if ( (bytes == nullptr) || (bytes-&gt;Length == 0) )\n      Console::WriteLine( &quot;&lt;none&gt;&quot; );\n   else\n   {\n      for ( int i = 0; i &lt; bytes-&gt;Length; i++ )\n         Console::Write( &quot;{0:X2} &quot;, bytes[ i ] );\n      Console::WriteLine();\n   }\n}\n\n/* \nThis code produces the following output.\n\nSystem.Text.UTF7Encoding       : 18  23  :7A 61 2B 41 77 59 42 2F 51 4F 79 32 50 2F 63 2F 77 2D\nSystem.Text.UTF8Encoding       : 12  24  :7A 61 CC 86 C7 BD CE B2 F1 8F B3 BF\nSystem.Text.UnicodeEncoding    : 14  16  :7A 00 61 00 06 03 FD 01 B2 03 FF D8 FF DC\nSystem.Text.UnicodeEncoding    : 14  16  :00 7A 00 61 03 06 01 FD 03 B2 D8 FF DC FF\nSystem.Text.UTF32Encoding      : 24  32  :7A 00 00 00 61 00 00 00 06 03 00 00 FD 01 00 00 B2 03 00 00 FF FC 04 00\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_GetBytes_System_String_\">\r\n    \r\n            <a id=\"System_Text_Encoding_GetBytes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetBytes(String)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, encodes all the characters in the specified string into a sequence of bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual byte[] GetBytes (string s);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string containing the characters to encode.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>A byte array containing the results of encoding the specified set of characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallbackexception\" data-linktype=\"relative-path\">EncoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for complete explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.EncoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.encoderexceptionfallback\" data-linktype=\"relative-path\">EncoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> or the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> provided by the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetDecoder_\" data-linktype=\"relative-path\">GetDecoder</a> method or the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncoder_\" data-linktype=\"relative-path\">GetEncoder</a> method, respectively, of a derived class.  </p>\n<p> The <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method determines how many bytes result in encoding a set of Unicode characters, and the GetBytes method performs the actual encoding. The GetBytes method expects discrete conversions, in contrast to the <a class=\"xref\" href=\"system.text.encoder#System_Text_Encoder_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method, which handles multiple conversions on a single input stream.  </p>\n<p> Several versions of <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> and GetBytes are supported. The following are some programming considerations for use of these methods:  </p>\n<ul>\n<li><p>Your app might need to encode many input characters to a code page and process the characters using multiple calls. In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> object being used. (For example, a character sequence that includes surrogate pairs might end with a high surrogate. The <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> will remember that high surrogate so that it can be combined with a low surrogate at the beginning of a following call. <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> won&#39;t be able to maintain the state, so the character will be sent to the <a class=\"xref\" href=\"system.text.encoderfallback\" data-linktype=\"relative-path\">EncoderFallback</a>.)  </p>\n</li>\n<li><p>If your app handles string inputs, you should use the string version of GetBytes.  </p>\n</li>\n<li><p>The Unicode character buffer version of <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_System_Char__System_Int32_System_Byte__System_Int32_\" data-linktype=\"relative-path\">GetBytes(Char*,Int32,Byte*,Int32)</a> allows some fast techniques, particularly with multiple calls using the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> object or inserting into existing buffers. Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.  </p>\n</li>\n<li><p>If your app must convert a large amount of data, it should reuse the output buffer. In this case, the GetBytes version that supports byte arrays is the best choice.  </p>\n</li>\n<li><p>Consider using the <a class=\"xref\" href=\"system.text.encoder#System_Text_Encoder_Convert_\" data-linktype=\"relative-path\">Convert</a> method instead of <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a>. The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small. For continuous encoding of a stream, this method is often the best choice.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines the number of bytes required to encode a string or a range in the string, encodes the characters, and displays the resulting bytes.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.Encoding.GetBytes_String#1\">using System;\nusing System.Text;\n\npublic class SamplesEncoding  {\n\n   public static void Main()  {\n\n      // The characters to encode:\n      //    Latin Small Letter Z (U+007A)\n      //    Latin Small Letter A (U+0061)\n      //    Combining Breve (U+0306)\n      //    Latin Small Letter AE With Acute (U+01FD)\n      //    Greek Small Letter Beta (U+03B2)\n      //    a high-surrogate value (U+D8FF)\n      //    a low-surrogate value (U+DCFF)\n      String myStr = &quot;za\\u0306\\u01FD\\u03B2\\uD8FF\\uDCFF&quot;;\n\n      // Get different encodings.\n      Encoding  u7    = Encoding.UTF7;\n      Encoding  u8    = Encoding.UTF8;\n      Encoding  u16LE = Encoding.Unicode;\n      Encoding  u16BE = Encoding.BigEndianUnicode;\n      Encoding  u32   = Encoding.UTF32;\n\n      // Encode the entire string, and print out the counts and the resulting bytes.\n      Console.WriteLine( &quot;Encoding the entire string:&quot; );\n      PrintCountsAndBytes( myStr, u7 );\n      PrintCountsAndBytes( myStr, u8 );\n      PrintCountsAndBytes( myStr, u16LE );\n      PrintCountsAndBytes( myStr, u16BE );\n      PrintCountsAndBytes( myStr, u32 );\n\n      Console.WriteLine();\n\n      // Encode three characters starting at index 4, and print out the counts and the resulting bytes.\n      Console.WriteLine( &quot;Encoding the characters from index 4 through 6:&quot; );\n      PrintCountsAndBytes( myStr, 4, 3, u7 );\n      PrintCountsAndBytes( myStr, 4, 3, u8 );\n      PrintCountsAndBytes( myStr, 4, 3, u16LE );\n      PrintCountsAndBytes( myStr, 4, 3, u16BE );\n      PrintCountsAndBytes( myStr, 4, 3, u32 );\n\n   }\n\n\n   public static void PrintCountsAndBytes( String s, Encoding enc )  {\n\n      // Display the name of the encoding used.\n      Console.Write( &quot;{0,-30} :&quot;, enc.ToString() );\n\n      // Display the exact byte count.\n      int iBC  = enc.GetByteCount( s );\n      Console.Write( &quot; {0,-3}&quot;, iBC );\n\n      // Display the maximum byte count.\n      int iMBC = enc.GetMaxByteCount( s.Length );\n      Console.Write( &quot; {0,-3} :&quot;, iMBC );\n\n      // Encode the entire string.\n      byte[] bytes = enc.GetBytes( s );\n\n      // Display all the encoded bytes.\n      PrintHexBytes( bytes );\n\n   }\n\n\n   public static void PrintCountsAndBytes( String s, int index, int count, Encoding enc )  {\n\n      // Display the name of the encoding used.\n      Console.Write( &quot;{0,-30} :&quot;, enc.ToString() );\n\n      // Display the exact byte count.\n      int iBC  = enc.GetByteCount( s.ToCharArray(), index, count );\n      Console.Write( &quot; {0,-3}&quot;, iBC );\n\n      // Display the maximum byte count.\n      int iMBC = enc.GetMaxByteCount( count );\n      Console.Write( &quot; {0,-3} :&quot;, iMBC );\n\n      // Encode a range of characters in the string.\n      byte[] bytes = new byte[iBC];\n      enc.GetBytes( s, index, count, bytes, bytes.GetLowerBound(0) );\n\n      // Display all the encoded bytes.\n      PrintHexBytes( bytes );\n\n   }\n\n\n   public static void PrintHexBytes( byte[] bytes )  {\n\n      if (( bytes == null ) || ( bytes.Length == 0 ))\n         Console.WriteLine( &quot;&lt;none&gt;&quot; );\n      else  {\n         for ( int i = 0; i &lt; bytes.Length; i++ )\n            Console.Write( &quot;{0:X2} &quot;, bytes[i] );\n         Console.WriteLine();\n      }\n\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nEncoding the entire string:\nSystem.Text.UTF7Encoding       : 18  23  :7A 61 2B 41 77 59 42 2F 51 4F 79 32 50 2F 63 2F 77 2D\nSystem.Text.UTF8Encoding       : 12  24  :7A 61 CC 86 C7 BD CE B2 F1 8F B3 BF\nSystem.Text.UnicodeEncoding    : 14  16  :7A 00 61 00 06 03 FD 01 B2 03 FF D8 FF DC\nSystem.Text.UnicodeEncoding    : 14  16  :00 7A 00 61 03 06 01 FD 03 B2 D8 FF DC FF\nSystem.Text.UTF32Encoding      : 24  32  :7A 00 00 00 61 00 00 00 06 03 00 00 FD 01 00 00 B2 03 00 00 FF FC 04 00\n\nEncoding the characters from index 4 through 6:\nSystem.Text.UTF7Encoding       : 10  11  :2B 41 37 4C 59 2F 39 7A 2F 2D\nSystem.Text.UTF8Encoding       : 6   12  :CE B2 F1 8F B3 BF\nSystem.Text.UnicodeEncoding    : 6   8   :B2 03 FF D8 FF DC\nSystem.Text.UnicodeEncoding    : 6   8   :03 B2 D8 FF DC FF\nSystem.Text.UTF32Encoding      : 8   16  :B2 03 00 00 FF FC 04 00\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.Encoding.GetBytes_String#1\">Imports System\nImports System.Text\nImports Microsoft.VisualBasic\n\nPublic Class SamplesEncoding   \n\n   Public Shared Sub Main()\n\n      &#39; The characters to encode:\n      &#39;    Latin Small Letter Z (U+007A)\n      &#39;    Latin Small Letter A (U+0061)\n      &#39;    Combining Breve (U+0306)\n      &#39;    Latin Small Letter AE With Acute (U+01FD)\n      &#39;    Greek Small Letter Beta (U+03B2)\n      &#39;    a high-surrogate value (U+D8FF)\n      &#39;    a low-surrogate value (U+DCFF)\n      Dim myStr As String = &quot;za&quot; &amp; ChrW(&amp;H0306) &amp; ChrW(&amp;H01FD) &amp; ChrW(&amp;H03B2) &amp; ChrW(&amp;HD8FF) &amp; ChrW(&amp;HDCFF)\n\n      &#39; Get different encodings.\n      Dim u7 As Encoding = Encoding.UTF7\n      Dim u8 As Encoding = Encoding.UTF8\n      Dim u16LE As Encoding = Encoding.Unicode\n      Dim u16BE As Encoding = Encoding.BigEndianUnicode\n      Dim u32 As Encoding = Encoding.UTF32\n\n      &#39; Encode the entire string, and print out the counts and the resulting bytes.\n      Console.WriteLine(&quot;Encoding the entire string:&quot;)\n      PrintCountsAndBytes(myStr, u7)\n      PrintCountsAndBytes(myStr, u8)\n      PrintCountsAndBytes(myStr, u16LE)\n      PrintCountsAndBytes(myStr, u16BE)\n      PrintCountsAndBytes(myStr, u32)\n\n      Console.WriteLine()\n\n      &#39; Encode three characters starting at index 4, and print out the counts and the resulting bytes.\n      Console.WriteLine(&quot;Encoding the characters from index 4 through 6:&quot;)\n      PrintCountsAndBytes(myStr, 4, 3, u7)\n      PrintCountsAndBytes(myStr, 4, 3, u8)\n      PrintCountsAndBytes(myStr, 4, 3, u16LE)\n      PrintCountsAndBytes(myStr, 4, 3, u16BE)\n      PrintCountsAndBytes(myStr, 4, 3, u32)\n\n   End Sub &#39;Main\n\n\n   Overloads Public Shared Sub PrintCountsAndBytes(s As String, enc As Encoding)\n\n      &#39; Display the name of the encoding used.\n      Console.Write(&quot;{0,-30} :&quot;, enc.ToString())\n\n      &#39; Display the exact byte count.\n      Dim iBC As Integer = enc.GetByteCount(s)\n      Console.Write(&quot; {0,-3}&quot;, iBC)\n\n      &#39; Display the maximum byte count.\n      Dim iMBC As Integer = enc.GetMaxByteCount(s.Length)\n      Console.Write(&quot; {0,-3} :&quot;, iMBC)\n\n      &#39; Encode the entire string.\n      Dim bytes As Byte() = enc.GetBytes(s)\n\n      &#39; Display all the encoded bytes.\n      PrintHexBytes(bytes)\n\n   End Sub &#39;PrintCountsAndBytes\n\n\n   Overloads Public Shared Sub PrintCountsAndBytes(s As String, index As Integer, count As Integer, enc As Encoding)\n\n      &#39; Display the name of the encoding used.\n      Console.Write(&quot;{0,-30} :&quot;, enc.ToString())\n\n      &#39; Display the exact byte count.\n      Dim iBC As Integer = enc.GetByteCount(s.ToCharArray(), index, count)\n      Console.Write(&quot; {0,-3}&quot;, iBC)\n\n      &#39; Display the maximum byte count.\n      Dim iMBC As Integer = enc.GetMaxByteCount(count)\n      Console.Write(&quot; {0,-3} :&quot;, iMBC)\n\n      &#39; Encode a range of characters in the string.\n      &#39; NOTE: In VB.NET, arrays contain one extra element by default.\n      &#39;       The following line creates the array with the exact number of elements required.\n      Dim bytes(iBC - 1) As Byte\n      enc.GetBytes(s, index, count, bytes, bytes.GetLowerBound(0))\n\n      &#39; Display all the encoded bytes.\n      PrintHexBytes(bytes)\n\n   End Sub &#39;PrintCountsAndBytes\n\n\n   Public Shared Sub PrintHexBytes(bytes() As Byte)\n\n      If bytes Is Nothing OrElse bytes.Length = 0 Then\n         Console.WriteLine(&quot;&lt;none&gt;&quot;)\n      Else\n         Dim i As Integer\n         For i = 0 To bytes.Length - 1\n            Console.Write(&quot;{0:X2} &quot;, bytes(i))\n         Next i\n         Console.WriteLine()\n      End If\n\n   End Sub &#39;PrintHexBytes \n\nEnd Class &#39;SamplesEncoding\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Encoding the entire string:\n&#39;System.Text.UTF7Encoding       : 18  23  :7A 61 2B 41 77 59 42 2F 51 4F 79 32 50 2F 63 2F 77 2D\n&#39;System.Text.UTF8Encoding       : 12  24  :7A 61 CC 86 C7 BD CE B2 F1 8F B3 BF\n&#39;System.Text.UnicodeEncoding    : 14  16  :7A 00 61 00 06 03 FD 01 B2 03 FF D8 FF DC\n&#39;System.Text.UnicodeEncoding    : 14  16  :00 7A 00 61 03 06 01 FD 03 B2 D8 FF DC FF\n&#39;System.Text.UTF32Encoding      : 24  32  :7A 00 00 00 61 00 00 00 06 03 00 00 FD 01 00 00 B2 03 00 00 FF FC 04 00\n&#39;\n&#39;Encoding the characters from index 4 through 6:\n&#39;System.Text.UTF7Encoding       : 10  11  :2B 41 37 4C 59 2F 39 7A 2F 2D\n&#39;System.Text.UTF8Encoding       : 6   12  :CE B2 F1 8F B3 BF\n&#39;System.Text.UnicodeEncoding    : 6   8   :B2 03 FF D8 FF DC\n&#39;System.Text.UnicodeEncoding    : 6   8   :03 B2 D8 FF DC FF\n&#39;System.Text.UTF32Encoding      : 8   16  :B2 03 00 00 FF FC 04 00\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.Encoding.GetBytes_String#1\">using namespace System;\nusing namespace System::Text;\nvoid PrintCountsAndBytes( String^ s, Encoding^ enc );\nvoid PrintCountsAndBytes( String^ s, int index, int count, Encoding^ enc );\nvoid PrintHexBytes( array&lt;Byte&gt;^bytes );\nint main()\n{\n   \n   // The characters to encode:\n   //    Latin Small Letter Z (U+007A)\n   //    Latin Small Letter A (U+0061)\n   //    Combining Breve (U+0306)\n   //    Latin Small Letter AE With Acute (U+01FD)\n   //    Greek Small Letter Beta (U+03B2)\n   //    a high-surrogate value (U+D8FF)\n   //    a low-surrogate value (U+DCFF)\n   String^ myStr = L&quot;za\\u0306\\u01FD\\u03B2\\xD8FF\\xDCFF&quot;;\n   \n   // Get different encodings.\n   Encoding^ u7 = Encoding::UTF7;\n   Encoding^ u8 = Encoding::UTF8;\n   Encoding^ u16LE = Encoding::Unicode;\n   Encoding^ u16BE = Encoding::BigEndianUnicode;\n   Encoding^ u32 = Encoding::UTF32;\n   \n   // Encode the entire string, and print out the counts and the resulting bytes.\n   Console::WriteLine( &quot;Encoding the entire string:&quot; );\n   PrintCountsAndBytes( myStr, u7 );\n   PrintCountsAndBytes( myStr, u8 );\n   PrintCountsAndBytes( myStr, u16LE );\n   PrintCountsAndBytes( myStr, u16BE );\n   PrintCountsAndBytes( myStr, u32 );\n   Console::WriteLine();\n   \n   // Encode three characters starting at index 4, and print out the counts and the resulting bytes.\n   Console::WriteLine( &quot;Encoding the characters from index 4 through 6:&quot; );\n   PrintCountsAndBytes( myStr, 4, 3, u7 );\n   PrintCountsAndBytes( myStr, 4, 3, u8 );\n   PrintCountsAndBytes( myStr, 4, 3, u16LE );\n   PrintCountsAndBytes( myStr, 4, 3, u16BE );\n   PrintCountsAndBytes( myStr, 4, 3, u32 );\n}\n\nvoid PrintCountsAndBytes( String^ s, Encoding^ enc )\n{\n   \n   // Display the name of the encoding used.\n   Console::Write( &quot;{0,-30} :&quot;, enc );\n   \n   // Display the exact byte count.\n   int iBC = enc-&gt;GetByteCount( s );\n   Console::Write( &quot; {0,-3}&quot;, iBC );\n   \n   // Display the maximum byte count.\n   int iMBC = enc-&gt;GetMaxByteCount( s-&gt;Length );\n   Console::Write( &quot; {0,-3} :&quot;, iMBC );\n   \n   // Encode the entire string.\n   array&lt;Byte&gt;^bytes = enc-&gt;GetBytes( s );\n   \n   // Display all the encoded bytes.\n   PrintHexBytes( bytes );\n}\n\nvoid PrintCountsAndBytes( String^ s, int index, int count, Encoding^ enc )\n{\n   \n   // Display the name of the encoding used.\n   Console::Write( &quot;{0,-30} :&quot;, enc );\n   \n   // Display the exact byte count.\n   int iBC = enc-&gt;GetByteCount( s-&gt;ToCharArray(), index, count );\n   Console::Write( &quot; {0,-3}&quot;, iBC );\n   \n   // Display the maximum byte count.\n   int iMBC = enc-&gt;GetMaxByteCount( count );\n   Console::Write( &quot; {0,-3} :&quot;, iMBC );\n   \n   // Encode a range of characters in the string.\n   array&lt;Byte&gt;^bytes = gcnew array&lt;Byte&gt;(iBC);\n   enc-&gt;GetBytes( s, index, count, bytes, bytes-&gt;GetLowerBound( 0 ) );\n   \n   // Display all the encoded bytes.\n   PrintHexBytes( bytes );\n}\n\nvoid PrintHexBytes( array&lt;Byte&gt;^bytes )\n{\n   if ( (bytes == nullptr) || (bytes-&gt;Length == 0) )\n      Console::WriteLine( &quot;&lt;none&gt;&quot; );\n   else\n   {\n      for ( int i = 0; i &lt; bytes-&gt;Length; i++ )\n         Console::Write( &quot;{0:X2} &quot;, bytes[ i ] );\n      Console::WriteLine();\n   }\n}\n\n/* \nThis code produces the following output.\n\nEncoding the entire string:\nSystem.Text.UTF7Encoding       : 18  23  :7A 61 2B 41 77 59 42 2F 51 4F 79 32 50 2F 63 2F 77 2D\nSystem.Text.UTF8Encoding       : 12  24  :7A 61 CC 86 C7 BD CE B2 F1 8F B3 BF\nSystem.Text.UnicodeEncoding    : 14  16  :7A 00 61 00 06 03 FD 01 B2 03 FF D8 FF DC\nSystem.Text.UnicodeEncoding    : 14  16  :00 7A 00 61 03 06 01 FD 03 B2 D8 FF DC FF\nSystem.Text.UTF32Encoding      : 24  32  :7A 00 00 00 61 00 00 00 06 03 00 00 FD 01 00 00 B2 03 00 00 FF FC 04 00\n\nEncoding the characters from index 4 through 6:\nSystem.Text.UTF7Encoding       : 10  11  :2B 41 37 4C 59 2F 39 7A 2F 2D\nSystem.Text.UTF8Encoding       : 6   12  :CE B2 F1 8F B3 BF\nSystem.Text.UnicodeEncoding    : 6   8   :B2 03 FF D8 FF DC\nSystem.Text.UnicodeEncoding    : 6   8   :03 B2 D8 FF DC FF\nSystem.Text.UTF32Encoding      : 8   16  :B2 03 00 00 FF FC 04 00\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_GetBytes_System_Char___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Text_Encoding_GetBytes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetBytes(Char[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, encodes a set of characters from the specified character array into a sequence of bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual byte[] GetBytes (char[] chars, int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>chars</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character array containing the set of characters to encode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the first character to encode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of characters to encode.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>A byte array containing the results of encoding the specified set of characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>chars</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> or <code>count</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>index</code> and <code>count</code> do not denote a valid range in <code>chars</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallbackexception\" data-linktype=\"relative-path\">EncoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for complete explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.EncoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.encoderexceptionfallback\" data-linktype=\"relative-path\">EncoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> or the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> provided by the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetDecoder_\" data-linktype=\"relative-path\">GetDecoder</a> method or the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncoder_\" data-linktype=\"relative-path\">GetEncoder</a> method, respectively, of a derived class.  </p>\n<p> The <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method determines how many bytes result in encoding a set of Unicode characters, and the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method performs the actual encoding. The <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method expects discrete conversions, in contrast to the <a class=\"xref\" href=\"system.text.encoder#System_Text_Encoder_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method, which handles multiple conversions on a single input stream.  </p>\n<p> Several versions of <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> and <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> are supported. The following are some programming considerations for use of these methods:  </p>\n<ul>\n<li><p>Your app might need to encode many input characters to a code page and process the characters using multiple calls. In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> object being used. (For example, a character sequence that includes surrogate pairs might end with a high surrogate. The <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> will remember that high surrogate so that it can be combined with a low surrogate at the beginning of a following call. <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> won&#39;t be able to maintain the state, so the character will be sent to the <a class=\"xref\" href=\"system.text.encoderfallback\" data-linktype=\"relative-path\">EncoderFallback</a>.)  </p>\n</li>\n<li><p>If your app handles string inputs, you should use the string version of <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a>.  </p>\n</li>\n<li><p>The Unicode character buffer version of <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_System_Char__System_Int32_System_Byte__System_Int32_\" data-linktype=\"relative-path\">GetBytes(Char*,Int32,Byte*,Int32)</a> allows some fast techniques, particularly with multiple calls using the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> object or inserting into existing buffers. Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.  </p>\n</li>\n<li><p>If your app must convert a large amount of data, it should reuse the output buffer. In this case, the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> version that supports byte arrays is the best choice.  </p>\n</li>\n<li><p>Consider using the <a class=\"xref\" href=\"system.text.encoder#System_Text_Encoder_Convert_\" data-linktype=\"relative-path\">Convert</a> method instead of <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a>. The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small. For continuous encoding of a stream, this method is often the best choice.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines the number of bytes required to encode three characters from a character array, encodes the characters, and displays the resulting bytes.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.Encoding.GetBytes_CharArrIC#1\">using System;\nusing System.Text;\n\npublic class SamplesEncoding  {\n\n   public static void Main()  {\n\n      // The characters to encode:\n      //    Latin Small Letter Z (U+007A)\n      //    Latin Small Letter A (U+0061)\n      //    Combining Breve (U+0306)\n      //    Latin Small Letter AE With Acute (U+01FD)\n      //    Greek Small Letter Beta (U+03B2)\n      //    a high-surrogate value (U+D8FF)\n      //    a low-surrogate value (U+DCFF)\n      char[] myChars = new char[] { &#39;z&#39;, &#39;a&#39;, &#39;\\u0306&#39;, &#39;\\u01FD&#39;, &#39;\\u03B2&#39;, &#39;\\uD8FF&#39;, &#39;\\uDCFF&#39; };\n\n      // Get different encodings.\n      Encoding  u7    = Encoding.UTF7;\n      Encoding  u8    = Encoding.UTF8;\n      Encoding  u16LE = Encoding.Unicode;\n      Encoding  u16BE = Encoding.BigEndianUnicode;\n      Encoding  u32   = Encoding.UTF32;\n\n      // Encode three characters starting at index 4, and print out the counts and the resulting bytes.\n      PrintCountsAndBytes( myChars, 4, 3, u7 );\n      PrintCountsAndBytes( myChars, 4, 3, u8 );\n      PrintCountsAndBytes( myChars, 4, 3, u16LE );\n      PrintCountsAndBytes( myChars, 4, 3, u16BE );\n      PrintCountsAndBytes( myChars, 4, 3, u32 );\n\n   }\n\n\n   public static void PrintCountsAndBytes( char[] chars, int index, int count, Encoding enc )  {\n\n      // Display the name of the encoding used.\n      Console.Write( &quot;{0,-30} :&quot;, enc.ToString() );\n\n      // Display the exact byte count.\n      int iBC  = enc.GetByteCount( chars, index, count );\n      Console.Write( &quot; {0,-3}&quot;, iBC );\n\n      // Display the maximum byte count.\n      int iMBC = enc.GetMaxByteCount( count );\n      Console.Write( &quot; {0,-3} :&quot;, iMBC );\n\n      // Encode the array of chars.\n      byte[] bytes = enc.GetBytes( chars, index, count );\n\n      // The following is an alternative way to encode the array of chars:\n      // byte[] bytes = new byte[iBC];\n      // enc.GetBytes( chars, index, count, bytes, bytes.GetLowerBound(0) );\n\n      // Display all the encoded bytes.\n      PrintHexBytes( bytes );\n\n   }\n\n\n   public static void PrintHexBytes( byte[] bytes )  {\n\n      if (( bytes == null ) || ( bytes.Length == 0 ))\n         Console.WriteLine( &quot;&lt;none&gt;&quot; );\n      else  {\n         for ( int i = 0; i &lt; bytes.Length; i++ )\n            Console.Write( &quot;{0:X2} &quot;, bytes[i] );\n         Console.WriteLine();\n      }\n\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nSystem.Text.UTF7Encoding       : 10  11  :2B 41 37 4C 59 2F 39 7A 2F 2D\nSystem.Text.UTF8Encoding       : 6   12  :CE B2 F1 8F B3 BF\nSystem.Text.UnicodeEncoding    : 6   8   :B2 03 FF D8 FF DC\nSystem.Text.UnicodeEncoding    : 6   8   :03 B2 D8 FF DC FF\nSystem.Text.UTF32Encoding      : 8   16  :B2 03 00 00 FF FC 04 00\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.Encoding.GetBytes_CharArrIC#1\">Imports System\nImports System.Text\nImports Microsoft.VisualBasic\n\nPublic Class SamplesEncoding   \n\n   Public Shared Sub Main()\n\n      &#39; The characters to encode:\n      &#39;    Latin Small Letter Z (U+007A)\n      &#39;    Latin Small Letter A (U+0061)\n      &#39;    Combining Breve (U+0306)\n      &#39;    Latin Small Letter AE With Acute (U+01FD)\n      &#39;    Greek Small Letter Beta (U+03B2)\n      &#39;    a high-surrogate value (U+D8FF)\n      &#39;    a low-surrogate value (U+DCFF)\n      Dim myChars() As Char = {&quot;z&quot;c, &quot;a&quot;c, ChrW(&amp;H0306), ChrW(&amp;H01FD), ChrW(&amp;H03B2), ChrW(&amp;HD8FF), ChrW(&amp;HDCFF) }\n\n      &#39; Get different encodings.\n      Dim u7 As Encoding = Encoding.UTF7\n      Dim u8 As Encoding = Encoding.UTF8\n      Dim u16LE As Encoding = Encoding.Unicode\n      Dim u16BE As Encoding = Encoding.BigEndianUnicode\n      Dim u32 As Encoding = Encoding.UTF32\n\n      &#39; Encode three characters starting at index 4, and print out the counts and the resulting bytes.\n      PrintCountsAndBytes(myChars, 4, 3, u7)\n      PrintCountsAndBytes(myChars, 4, 3, u8)\n      PrintCountsAndBytes(myChars, 4, 3, u16LE)\n      PrintCountsAndBytes(myChars, 4, 3, u16BE)\n      PrintCountsAndBytes(myChars, 4, 3, u32)\n\n   End Sub &#39;Main\n\n\n   Public Shared Sub PrintCountsAndBytes(chars() As Char, index As Integer, count As Integer, enc As Encoding)\n\n      &#39; Display the name of the encoding used.\n      Console.Write(&quot;{0,-30} :&quot;, enc.ToString())\n\n      &#39; Display the exact byte count.\n      Dim iBC As Integer = enc.GetByteCount(chars, index, count)\n      Console.Write(&quot; {0,-3}&quot;, iBC)\n\n      &#39; Display the maximum byte count.\n      Dim iMBC As Integer = enc.GetMaxByteCount(count)\n      Console.Write(&quot; {0,-3} :&quot;, iMBC)\n\n      &#39; Encode the array of chars.\n      Dim bytes As Byte() = enc.GetBytes(chars, index, count)\n\n      &#39; The following is an alternative way to encode the array of chars:\n      &#39; NOTE: In VB.NET, arrays contain one extra element by default.\n      &#39;       The following line creates the array with the exact number of elements required.\n      &#39; Dim bytes(iBC - 1) As Byte\n      &#39; enc.GetBytes( chars, index, count, bytes, bytes.GetLowerBound(0) )\n\n      &#39; Display all the encoded bytes.\n      PrintHexBytes(bytes)\n\n   End Sub &#39;PrintCountsAndBytes\n\n\n   Public Shared Sub PrintHexBytes(bytes() As Byte)\n\n      If bytes Is Nothing OrElse bytes.Length = 0 Then\n         Console.WriteLine(&quot;&lt;none&gt;&quot;)\n      Else\n         Dim i As Integer\n         For i = 0 To bytes.Length - 1\n            Console.Write(&quot;{0:X2} &quot;, bytes(i))\n         Next i\n         Console.WriteLine()\n      End If\n\n   End Sub &#39;PrintHexBytes \n\nEnd Class &#39;SamplesEncoding\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;System.Text.UTF7Encoding       : 10  11  :2B 41 37 4C 59 2F 39 7A 2F 2D\n&#39;System.Text.UTF8Encoding       : 6   12  :CE B2 F1 8F B3 BF\n&#39;System.Text.UnicodeEncoding    : 6   8   :B2 03 FF D8 FF DC\n&#39;System.Text.UnicodeEncoding    : 6   8   :03 B2 D8 FF DC FF\n&#39;System.Text.UTF32Encoding      : 8   16  :B2 03 00 00 FF FC 04 00\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.Encoding.GetBytes_CharArrIC#1\">using namespace System;\nusing namespace System::Text;\nvoid PrintCountsAndBytes( array&lt;Char&gt;^chars, int index, int count, Encoding^ enc );\nvoid PrintHexBytes( array&lt;Byte&gt;^bytes );\nint main()\n{\n   \n   // The characters to encode:\n   //    Latin Small Letter Z (U+007A)\n   //    Latin Small Letter A (U+0061)\n   //    Combining Breve (U+0306)\n   //    Latin Small Letter AE With Acute (U+01FD)\n   //    Greek Small Letter Beta (U+03B2)\n   //    a high-surrogate value (U+D8FF)\n   //    a low-surrogate value (U+DCFF)\n   array&lt;Char&gt;^myChars = gcnew array&lt;Char&gt;{\n      L&#39;z&#39;,L&#39;a&#39;,L&#39;\\u0306&#39;,L&#39;\\u01FD&#39;,L&#39;\\u03B2&#39;,L&#39;\\xD8FF&#39;,L&#39;\\xDCFF&#39;\n   };\n   \n   // Get different encodings.\n   Encoding^ u7 = Encoding::UTF7;\n   Encoding^ u8 = Encoding::UTF8;\n   Encoding^ u16LE = Encoding::Unicode;\n   Encoding^ u16BE = Encoding::BigEndianUnicode;\n   Encoding^ u32 = Encoding::UTF32;\n   \n   // Encode three characters starting at index 4, and print out the counts and the resulting bytes.\n   PrintCountsAndBytes( myChars, 4, 3, u7 );\n   PrintCountsAndBytes( myChars, 4, 3, u8 );\n   PrintCountsAndBytes( myChars, 4, 3, u16LE );\n   PrintCountsAndBytes( myChars, 4, 3, u16BE );\n   PrintCountsAndBytes( myChars, 4, 3, u32 );\n}\n\nvoid PrintCountsAndBytes( array&lt;Char&gt;^chars, int index, int count, Encoding^ enc )\n{\n   \n   // Display the name of the encoding used.\n   Console::Write( &quot;{0,-30} :&quot;, enc );\n   \n   // Display the exact byte count.\n   int iBC = enc-&gt;GetByteCount( chars, index, count );\n   Console::Write( &quot; {0,-3}&quot;, iBC );\n   \n   // Display the maximum byte count.\n   int iMBC = enc-&gt;GetMaxByteCount( count );\n   Console::Write( &quot; {0,-3} :&quot;, iMBC );\n   \n   // Encode the array of chars.\n   array&lt;Byte&gt;^bytes = enc-&gt;GetBytes( chars, index, count );\n   \n   // The following is an alternative way to encode the array of chars:\n   // byte[] bytes = new byte[iBC];\n   // enc.GetBytes( chars, index, count, bytes, bytes.GetLowerBound(0) );\n   // Display all the encoded bytes.\n   PrintHexBytes( bytes );\n}\n\nvoid PrintHexBytes( array&lt;Byte&gt;^bytes )\n{\n   if ( (bytes == nullptr) || (bytes-&gt;Length == 0) )\n      Console::WriteLine( &quot;&lt;none&gt;&quot; );\n   else\n   {\n      for ( int i = 0; i &lt; bytes-&gt;Length; i++ )\n         Console::Write( &quot;{0:X2} &quot;, bytes[ i ] );\n      Console::WriteLine();\n   }\n}\n\n/* \nThis code produces the following output.\n\nSystem.Text.UTF7Encoding       : 10  11  :2B 41 37 4C 59 2F 39 7A 2F 2D\nSystem.Text.UTF8Encoding       : 6   12  :CE B2 F1 8F B3 BF\nSystem.Text.UnicodeEncoding    : 6   8   :B2 03 FF D8 FF DC\nSystem.Text.UnicodeEncoding    : 6   8   :03 B2 D8 FF DC FF\nSystem.Text.UTF32Encoding      : 8   16  :B2 03 00 00 FF FC 04 00\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_GetBytes_System_Char__System_Int32_System_Byte__System_Int32_\">\r\n    \r\n            <a id=\"System_Text_Encoding_GetBytes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetBytes(Char*,Int32,Byte*,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>chars</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>*</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to the first character to encode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>charCount</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of characters to encode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>*</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to the location at which to start writing the resulting sequence of bytes.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>byteCount</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of bytes to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The actual number of bytes written at the location indicated by the <code>bytes</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>chars</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>bytes</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>charCount</code> or <code>byteCount</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>byteCount</code> is less than the resulting number of bytes.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallbackexception\" data-linktype=\"relative-path\">EncoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for complete explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.EncoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.encoderexceptionfallback\" data-linktype=\"relative-path\">EncoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To calculate the exact array size that <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> requires to store the resulting bytes, call the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method. To calculate the maximum array size, call the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> method. The <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method generally allows allocation of less memory, while the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> method generally executes faster.  </p>\n<p> If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> or the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> object provided by the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetDecoder_\" data-linktype=\"relative-path\">GetDecoder</a> or the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncoder_\" data-linktype=\"relative-path\">GetEncoder</a> method, respectively, of a derived class.  </p>\n<p> The <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method determines how many bytes result in encoding a set of Unicode characters, and the GetBytes method performs the actual encoding. The GetBytes method expects discrete conversions, in contrast to the <a class=\"xref\" href=\"system.text.encoder#System_Text_Encoder_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method, which handles multiple conversions on a single input stream.  </p>\n<p> Several versions of <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> and <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> are supported. The following are some programming considerations for use of these methods:  </p>\n<ul>\n<li><p>Your app might need to encode many input characters to a code page and process the characters using multiple calls. In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> object being used. (For example, a character sequence that includes surrogate pairs might end with a high surrogate. The <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> will remember that high surrogate so that it can be combined with a low surrogate at the beginning of a following call. <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> won&#39;t be able to maintain the state, so the character will be sent to the <a class=\"xref\" href=\"system.text.encoderfallback\" data-linktype=\"relative-path\">EncoderFallback</a>.)  </p>\n</li>\n<li><p>If your app handles string inputs, you should use the string version of <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a>.  </p>\n</li>\n<li><p>The Unicode character buffer version of GetBytes allows some fast techniques, particularly with multiple calls using the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> object or inserting into existing buffers. Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.  </p>\n</li>\n<li><p>If your app must convert a large amount of data, it should reuse the output buffer. In this case, the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> version that supports byte arrays is the best choice.  </p>\n</li>\n<li><p>Consider using the <a class=\"xref\" href=\"system.text.encoder#System_Text_Encoder_Convert_\" data-linktype=\"relative-path\">Convert</a> method instead of <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a>. The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small. For continuous encoding of a stream, this method is often the best choice.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_GetBytes_System_Char___System_Int32_System_Int32_System_Byte___System_Int32_\">\r\n    \r\n            <a id=\"System_Text_Encoding_GetBytes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetBytes(Char[],Int32,Int32,Byte[],Int32)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, encodes a set of characters from the specified character array into the specified byte array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>chars</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character array containing the set of characters to encode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>charIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the first character to encode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>charCount</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of characters to encode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The byte array to contain the resulting sequence of bytes.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>byteIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index at which to start writing the resulting sequence of bytes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The actual number of bytes written into <code>bytes</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>chars</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>bytes</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>charIndex</code> or <code>charCount</code> or <code>byteIndex</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>charIndex</code> and <code>charCount</code> do not denote a valid range in <code>chars</code>.  </p>\n<p> -or-  </p>\n<p> <code>byteIndex</code> is not a valid index in <code>bytes</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>bytes</code> does not have enough capacity from <code>byteIndex</code> to the end of the array to accommodate the resulting bytes.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallbackexception\" data-linktype=\"relative-path\">EncoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for complete explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.EncoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.encoderexceptionfallback\" data-linktype=\"relative-path\">EncoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To calculate the exact array size required by <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> to store the resulting bytes, you should call the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method. To calculate the maximum array size, call the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> method. The <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method generally allows allocation of less memory, while the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> method generally executes faster.  </p>\n<p> If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> or the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> provided by the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetDecoder_\" data-linktype=\"relative-path\">GetDecoder</a> method or the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncoder_\" data-linktype=\"relative-path\">GetEncoder</a> method, respectively, of a derived class.  </p>\n<p> The <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method determines how many bytes result in encoding a set of Unicode characters, and the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method performs the actual encoding. The <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method expects discrete conversions, in contrast to the <a class=\"xref\" href=\"system.text.encoder#System_Text_Encoder_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method, which handles multiple conversions on a single input stream.  </p>\n<p> Several versions of <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> and <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> are supported. The following are some programming considerations for use of these methods:  </p>\n<ul>\n<li><p>Your app might need to encode many input characters to a code page and process the characters using multiple calls. In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> object being used. (For example, a character sequence that includes surrogate pairs might end with a high surrogate. The <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> will remember that high surrogate so that it can be combined with a low surrogate at the beginning of a following call. <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> won&#39;t be able to maintain the state, so the character will be sent to the <a class=\"xref\" href=\"system.text.encoderfallback\" data-linktype=\"relative-path\">EncoderFallback</a>.)  </p>\n</li>\n<li><p>If your app handles string inputs, you should use the string version of <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a>.  </p>\n</li>\n<li><p>The Unicode character buffer version of <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_System_Char__System_Int32_System_Byte__System_Int32_\" data-linktype=\"relative-path\">GetBytes(Char*,Int32,Byte*,Int32)</a> allows some fast techniques, particularly with multiple calls using the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> object or inserting into existing buffers. Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.  </p>\n</li>\n<li><p>If your app must convert a large amount of data, it should reuse the output buffer. In this case, the GetBytes version that supports byte arrays is the best choice.  </p>\n</li>\n<li><p>Consider using the <a class=\"xref\" href=\"system.text.encoder#System_Text_Encoder_Convert_\" data-linktype=\"relative-path\">Convert</a> method instead of <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a>. The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small. For continuous encoding of a stream, this method is often the best choice.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines the number of bytes required to encode three characters from a character array, encodes the characters, and displays the resulting bytes.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.Encoding.GetBytes_CharArrIC#1\">using System;\nusing System.Text;\n\npublic class SamplesEncoding  {\n\n   public static void Main()  {\n\n      // The characters to encode:\n      //    Latin Small Letter Z (U+007A)\n      //    Latin Small Letter A (U+0061)\n      //    Combining Breve (U+0306)\n      //    Latin Small Letter AE With Acute (U+01FD)\n      //    Greek Small Letter Beta (U+03B2)\n      //    a high-surrogate value (U+D8FF)\n      //    a low-surrogate value (U+DCFF)\n      char[] myChars = new char[] { &#39;z&#39;, &#39;a&#39;, &#39;\\u0306&#39;, &#39;\\u01FD&#39;, &#39;\\u03B2&#39;, &#39;\\uD8FF&#39;, &#39;\\uDCFF&#39; };\n\n      // Get different encodings.\n      Encoding  u7    = Encoding.UTF7;\n      Encoding  u8    = Encoding.UTF8;\n      Encoding  u16LE = Encoding.Unicode;\n      Encoding  u16BE = Encoding.BigEndianUnicode;\n      Encoding  u32   = Encoding.UTF32;\n\n      // Encode three characters starting at index 4, and print out the counts and the resulting bytes.\n      PrintCountsAndBytes( myChars, 4, 3, u7 );\n      PrintCountsAndBytes( myChars, 4, 3, u8 );\n      PrintCountsAndBytes( myChars, 4, 3, u16LE );\n      PrintCountsAndBytes( myChars, 4, 3, u16BE );\n      PrintCountsAndBytes( myChars, 4, 3, u32 );\n\n   }\n\n\n   public static void PrintCountsAndBytes( char[] chars, int index, int count, Encoding enc )  {\n\n      // Display the name of the encoding used.\n      Console.Write( &quot;{0,-30} :&quot;, enc.ToString() );\n\n      // Display the exact byte count.\n      int iBC  = enc.GetByteCount( chars, index, count );\n      Console.Write( &quot; {0,-3}&quot;, iBC );\n\n      // Display the maximum byte count.\n      int iMBC = enc.GetMaxByteCount( count );\n      Console.Write( &quot; {0,-3} :&quot;, iMBC );\n\n      // Encode the array of chars.\n      byte[] bytes = enc.GetBytes( chars, index, count );\n\n      // The following is an alternative way to encode the array of chars:\n      // byte[] bytes = new byte[iBC];\n      // enc.GetBytes( chars, index, count, bytes, bytes.GetLowerBound(0) );\n\n      // Display all the encoded bytes.\n      PrintHexBytes( bytes );\n\n   }\n\n\n   public static void PrintHexBytes( byte[] bytes )  {\n\n      if (( bytes == null ) || ( bytes.Length == 0 ))\n         Console.WriteLine( &quot;&lt;none&gt;&quot; );\n      else  {\n         for ( int i = 0; i &lt; bytes.Length; i++ )\n            Console.Write( &quot;{0:X2} &quot;, bytes[i] );\n         Console.WriteLine();\n      }\n\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nSystem.Text.UTF7Encoding       : 10  11  :2B 41 37 4C 59 2F 39 7A 2F 2D\nSystem.Text.UTF8Encoding       : 6   12  :CE B2 F1 8F B3 BF\nSystem.Text.UnicodeEncoding    : 6   8   :B2 03 FF D8 FF DC\nSystem.Text.UnicodeEncoding    : 6   8   :03 B2 D8 FF DC FF\nSystem.Text.UTF32Encoding      : 8   16  :B2 03 00 00 FF FC 04 00\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.Encoding.GetBytes_CharArrIC#1\">Imports System\nImports System.Text\nImports Microsoft.VisualBasic\n\nPublic Class SamplesEncoding   \n\n   Public Shared Sub Main()\n\n      &#39; The characters to encode:\n      &#39;    Latin Small Letter Z (U+007A)\n      &#39;    Latin Small Letter A (U+0061)\n      &#39;    Combining Breve (U+0306)\n      &#39;    Latin Small Letter AE With Acute (U+01FD)\n      &#39;    Greek Small Letter Beta (U+03B2)\n      &#39;    a high-surrogate value (U+D8FF)\n      &#39;    a low-surrogate value (U+DCFF)\n      Dim myChars() As Char = {&quot;z&quot;c, &quot;a&quot;c, ChrW(&amp;H0306), ChrW(&amp;H01FD), ChrW(&amp;H03B2), ChrW(&amp;HD8FF), ChrW(&amp;HDCFF) }\n\n      &#39; Get different encodings.\n      Dim u7 As Encoding = Encoding.UTF7\n      Dim u8 As Encoding = Encoding.UTF8\n      Dim u16LE As Encoding = Encoding.Unicode\n      Dim u16BE As Encoding = Encoding.BigEndianUnicode\n      Dim u32 As Encoding = Encoding.UTF32\n\n      &#39; Encode three characters starting at index 4, and print out the counts and the resulting bytes.\n      PrintCountsAndBytes(myChars, 4, 3, u7)\n      PrintCountsAndBytes(myChars, 4, 3, u8)\n      PrintCountsAndBytes(myChars, 4, 3, u16LE)\n      PrintCountsAndBytes(myChars, 4, 3, u16BE)\n      PrintCountsAndBytes(myChars, 4, 3, u32)\n\n   End Sub &#39;Main\n\n\n   Public Shared Sub PrintCountsAndBytes(chars() As Char, index As Integer, count As Integer, enc As Encoding)\n\n      &#39; Display the name of the encoding used.\n      Console.Write(&quot;{0,-30} :&quot;, enc.ToString())\n\n      &#39; Display the exact byte count.\n      Dim iBC As Integer = enc.GetByteCount(chars, index, count)\n      Console.Write(&quot; {0,-3}&quot;, iBC)\n\n      &#39; Display the maximum byte count.\n      Dim iMBC As Integer = enc.GetMaxByteCount(count)\n      Console.Write(&quot; {0,-3} :&quot;, iMBC)\n\n      &#39; Encode the array of chars.\n      Dim bytes As Byte() = enc.GetBytes(chars, index, count)\n\n      &#39; The following is an alternative way to encode the array of chars:\n      &#39; NOTE: In VB.NET, arrays contain one extra element by default.\n      &#39;       The following line creates the array with the exact number of elements required.\n      &#39; Dim bytes(iBC - 1) As Byte\n      &#39; enc.GetBytes( chars, index, count, bytes, bytes.GetLowerBound(0) )\n\n      &#39; Display all the encoded bytes.\n      PrintHexBytes(bytes)\n\n   End Sub &#39;PrintCountsAndBytes\n\n\n   Public Shared Sub PrintHexBytes(bytes() As Byte)\n\n      If bytes Is Nothing OrElse bytes.Length = 0 Then\n         Console.WriteLine(&quot;&lt;none&gt;&quot;)\n      Else\n         Dim i As Integer\n         For i = 0 To bytes.Length - 1\n            Console.Write(&quot;{0:X2} &quot;, bytes(i))\n         Next i\n         Console.WriteLine()\n      End If\n\n   End Sub &#39;PrintHexBytes \n\nEnd Class &#39;SamplesEncoding\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;System.Text.UTF7Encoding       : 10  11  :2B 41 37 4C 59 2F 39 7A 2F 2D\n&#39;System.Text.UTF8Encoding       : 6   12  :CE B2 F1 8F B3 BF\n&#39;System.Text.UnicodeEncoding    : 6   8   :B2 03 FF D8 FF DC\n&#39;System.Text.UnicodeEncoding    : 6   8   :03 B2 D8 FF DC FF\n&#39;System.Text.UTF32Encoding      : 8   16  :B2 03 00 00 FF FC 04 00\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.Encoding.GetBytes_CharArrIC#1\">using namespace System;\nusing namespace System::Text;\nvoid PrintCountsAndBytes( array&lt;Char&gt;^chars, int index, int count, Encoding^ enc );\nvoid PrintHexBytes( array&lt;Byte&gt;^bytes );\nint main()\n{\n   \n   // The characters to encode:\n   //    Latin Small Letter Z (U+007A)\n   //    Latin Small Letter A (U+0061)\n   //    Combining Breve (U+0306)\n   //    Latin Small Letter AE With Acute (U+01FD)\n   //    Greek Small Letter Beta (U+03B2)\n   //    a high-surrogate value (U+D8FF)\n   //    a low-surrogate value (U+DCFF)\n   array&lt;Char&gt;^myChars = gcnew array&lt;Char&gt;{\n      L&#39;z&#39;,L&#39;a&#39;,L&#39;\\u0306&#39;,L&#39;\\u01FD&#39;,L&#39;\\u03B2&#39;,L&#39;\\xD8FF&#39;,L&#39;\\xDCFF&#39;\n   };\n   \n   // Get different encodings.\n   Encoding^ u7 = Encoding::UTF7;\n   Encoding^ u8 = Encoding::UTF8;\n   Encoding^ u16LE = Encoding::Unicode;\n   Encoding^ u16BE = Encoding::BigEndianUnicode;\n   Encoding^ u32 = Encoding::UTF32;\n   \n   // Encode three characters starting at index 4, and print out the counts and the resulting bytes.\n   PrintCountsAndBytes( myChars, 4, 3, u7 );\n   PrintCountsAndBytes( myChars, 4, 3, u8 );\n   PrintCountsAndBytes( myChars, 4, 3, u16LE );\n   PrintCountsAndBytes( myChars, 4, 3, u16BE );\n   PrintCountsAndBytes( myChars, 4, 3, u32 );\n}\n\nvoid PrintCountsAndBytes( array&lt;Char&gt;^chars, int index, int count, Encoding^ enc )\n{\n   \n   // Display the name of the encoding used.\n   Console::Write( &quot;{0,-30} :&quot;, enc );\n   \n   // Display the exact byte count.\n   int iBC = enc-&gt;GetByteCount( chars, index, count );\n   Console::Write( &quot; {0,-3}&quot;, iBC );\n   \n   // Display the maximum byte count.\n   int iMBC = enc-&gt;GetMaxByteCount( count );\n   Console::Write( &quot; {0,-3} :&quot;, iMBC );\n   \n   // Encode the array of chars.\n   array&lt;Byte&gt;^bytes = enc-&gt;GetBytes( chars, index, count );\n   \n   // The following is an alternative way to encode the array of chars:\n   // byte[] bytes = new byte[iBC];\n   // enc.GetBytes( chars, index, count, bytes, bytes.GetLowerBound(0) );\n   // Display all the encoded bytes.\n   PrintHexBytes( bytes );\n}\n\nvoid PrintHexBytes( array&lt;Byte&gt;^bytes )\n{\n   if ( (bytes == nullptr) || (bytes-&gt;Length == 0) )\n      Console::WriteLine( &quot;&lt;none&gt;&quot; );\n   else\n   {\n      for ( int i = 0; i &lt; bytes-&gt;Length; i++ )\n         Console::Write( &quot;{0:X2} &quot;, bytes[ i ] );\n      Console::WriteLine();\n   }\n}\n\n/* \nThis code produces the following output.\n\nSystem.Text.UTF7Encoding       : 10  11  :2B 41 37 4C 59 2F 39 7A 2F 2D\nSystem.Text.UTF8Encoding       : 6   12  :CE B2 F1 8F B3 BF\nSystem.Text.UnicodeEncoding    : 6   8   :B2 03 FF D8 FF DC\nSystem.Text.UnicodeEncoding    : 6   8   :03 B2 D8 FF DC FF\nSystem.Text.UTF32Encoding      : 8   16  :B2 03 00 00 FF FC 04 00\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_GetBytes_System_String_System_Int32_System_Int32_System_Byte___System_Int32_\">\r\n    \r\n            <a id=\"System_Text_Encoding_GetBytes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetBytes(String,Int32,Int32,Byte[],Int32)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, encodes a set of characters from the specified string into the specified byte array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int GetBytes (string s, int charIndex, int charCount, byte[] bytes, int byteIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string containing the set of characters to encode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>charIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the first character to encode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>charCount</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of characters to encode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The byte array to contain the resulting sequence of bytes.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>byteIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index at which to start writing the resulting sequence of bytes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The actual number of bytes written into <code>bytes</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>bytes</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>charIndex</code> or <code>charCount</code> or <code>byteIndex</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>charIndex</code> and <code>charCount</code> do not denote a valid range in <code>chars</code>.  </p>\n<p> -or-  </p>\n<p> <code>byteIndex</code> is not a valid index in <code>bytes</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>bytes</code> does not have enough capacity from <code>byteIndex</code> to the end of the array to accommodate the resulting bytes.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallbackexception\" data-linktype=\"relative-path\">EncoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for complete explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.EncoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.encoderexceptionfallback\" data-linktype=\"relative-path\">EncoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To calculate the exact array size required by <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> to store the resulting bytes, you should call the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method. To calculate the maximum array size, call the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> method. The <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method generally allows allocation of less memory, while the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> method generally executes faster.  </p>\n<p> If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> or the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> provided by the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetDecoder_\" data-linktype=\"relative-path\">GetDecoder</a> method or the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncoder_\" data-linktype=\"relative-path\">GetEncoder</a> method, respectively, of a derived class.  </p>\n<p> The <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method determines how many bytes result in encoding a set of Unicode characters, and the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method performs the actual encoding. The <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method expects discrete conversions, in contrast to the <a class=\"xref\" href=\"system.text.encoder#System_Text_Encoder_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method, which handles multiple conversions on a single input stream.  </p>\n<p> Several versions of <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> and <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> are supported. The following are some programming considerations for use of these methods:  </p>\n<ul>\n<li><p>Your app might need to encode many input characters to a code page and process the characters using multiple calls. In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> object being used. (For example, a character sequence that includes surrogate pairs might end with a high surrogate. The <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> will remember that high surrogate so that it can be combined with a low surrogate at the beginning of a following call. <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> won&#39;t be able to maintain the state, so the character will be sent to the <a class=\"xref\" href=\"system.text.encoderfallback\" data-linktype=\"relative-path\">EncoderFallback</a>.)  </p>\n</li>\n<li><p>If your app handles string inputs, you should use the string version of <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a>.  </p>\n</li>\n<li><p>The Unicode character buffer version of <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_System_Char__System_Int32_System_Byte__System_Int32_\" data-linktype=\"relative-path\">GetBytes(Char*,Int32,Byte*,Int32)</a> allows some fast techniques, particularly with multiple calls using the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> object or inserting into existing buffers. Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.  </p>\n</li>\n<li><p>If your app must convert a large amount of data, it should reuse the output buffer. In this case, the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> version that supports byte arrays is the best choice.  </p>\n</li>\n<li><p>Consider using the <a class=\"xref\" href=\"system.text.encoder#System_Text_Encoder_Convert_\" data-linktype=\"relative-path\">Convert</a> method instead of <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a>. The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small. For continuous encoding of a stream, this method is often the best choice.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines the number of bytes required to encode a string or a range in the string, encodes the characters, and displays the resulting bytes.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.Encoding.GetBytes_String#1\">using System;\nusing System.Text;\n\npublic class SamplesEncoding  {\n\n   public static void Main()  {\n\n      // The characters to encode:\n      //    Latin Small Letter Z (U+007A)\n      //    Latin Small Letter A (U+0061)\n      //    Combining Breve (U+0306)\n      //    Latin Small Letter AE With Acute (U+01FD)\n      //    Greek Small Letter Beta (U+03B2)\n      //    a high-surrogate value (U+D8FF)\n      //    a low-surrogate value (U+DCFF)\n      String myStr = &quot;za\\u0306\\u01FD\\u03B2\\uD8FF\\uDCFF&quot;;\n\n      // Get different encodings.\n      Encoding  u7    = Encoding.UTF7;\n      Encoding  u8    = Encoding.UTF8;\n      Encoding  u16LE = Encoding.Unicode;\n      Encoding  u16BE = Encoding.BigEndianUnicode;\n      Encoding  u32   = Encoding.UTF32;\n\n      // Encode the entire string, and print out the counts and the resulting bytes.\n      Console.WriteLine( &quot;Encoding the entire string:&quot; );\n      PrintCountsAndBytes( myStr, u7 );\n      PrintCountsAndBytes( myStr, u8 );\n      PrintCountsAndBytes( myStr, u16LE );\n      PrintCountsAndBytes( myStr, u16BE );\n      PrintCountsAndBytes( myStr, u32 );\n\n      Console.WriteLine();\n\n      // Encode three characters starting at index 4, and print out the counts and the resulting bytes.\n      Console.WriteLine( &quot;Encoding the characters from index 4 through 6:&quot; );\n      PrintCountsAndBytes( myStr, 4, 3, u7 );\n      PrintCountsAndBytes( myStr, 4, 3, u8 );\n      PrintCountsAndBytes( myStr, 4, 3, u16LE );\n      PrintCountsAndBytes( myStr, 4, 3, u16BE );\n      PrintCountsAndBytes( myStr, 4, 3, u32 );\n\n   }\n\n\n   public static void PrintCountsAndBytes( String s, Encoding enc )  {\n\n      // Display the name of the encoding used.\n      Console.Write( &quot;{0,-30} :&quot;, enc.ToString() );\n\n      // Display the exact byte count.\n      int iBC  = enc.GetByteCount( s );\n      Console.Write( &quot; {0,-3}&quot;, iBC );\n\n      // Display the maximum byte count.\n      int iMBC = enc.GetMaxByteCount( s.Length );\n      Console.Write( &quot; {0,-3} :&quot;, iMBC );\n\n      // Encode the entire string.\n      byte[] bytes = enc.GetBytes( s );\n\n      // Display all the encoded bytes.\n      PrintHexBytes( bytes );\n\n   }\n\n\n   public static void PrintCountsAndBytes( String s, int index, int count, Encoding enc )  {\n\n      // Display the name of the encoding used.\n      Console.Write( &quot;{0,-30} :&quot;, enc.ToString() );\n\n      // Display the exact byte count.\n      int iBC  = enc.GetByteCount( s.ToCharArray(), index, count );\n      Console.Write( &quot; {0,-3}&quot;, iBC );\n\n      // Display the maximum byte count.\n      int iMBC = enc.GetMaxByteCount( count );\n      Console.Write( &quot; {0,-3} :&quot;, iMBC );\n\n      // Encode a range of characters in the string.\n      byte[] bytes = new byte[iBC];\n      enc.GetBytes( s, index, count, bytes, bytes.GetLowerBound(0) );\n\n      // Display all the encoded bytes.\n      PrintHexBytes( bytes );\n\n   }\n\n\n   public static void PrintHexBytes( byte[] bytes )  {\n\n      if (( bytes == null ) || ( bytes.Length == 0 ))\n         Console.WriteLine( &quot;&lt;none&gt;&quot; );\n      else  {\n         for ( int i = 0; i &lt; bytes.Length; i++ )\n            Console.Write( &quot;{0:X2} &quot;, bytes[i] );\n         Console.WriteLine();\n      }\n\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nEncoding the entire string:\nSystem.Text.UTF7Encoding       : 18  23  :7A 61 2B 41 77 59 42 2F 51 4F 79 32 50 2F 63 2F 77 2D\nSystem.Text.UTF8Encoding       : 12  24  :7A 61 CC 86 C7 BD CE B2 F1 8F B3 BF\nSystem.Text.UnicodeEncoding    : 14  16  :7A 00 61 00 06 03 FD 01 B2 03 FF D8 FF DC\nSystem.Text.UnicodeEncoding    : 14  16  :00 7A 00 61 03 06 01 FD 03 B2 D8 FF DC FF\nSystem.Text.UTF32Encoding      : 24  32  :7A 00 00 00 61 00 00 00 06 03 00 00 FD 01 00 00 B2 03 00 00 FF FC 04 00\n\nEncoding the characters from index 4 through 6:\nSystem.Text.UTF7Encoding       : 10  11  :2B 41 37 4C 59 2F 39 7A 2F 2D\nSystem.Text.UTF8Encoding       : 6   12  :CE B2 F1 8F B3 BF\nSystem.Text.UnicodeEncoding    : 6   8   :B2 03 FF D8 FF DC\nSystem.Text.UnicodeEncoding    : 6   8   :03 B2 D8 FF DC FF\nSystem.Text.UTF32Encoding      : 8   16  :B2 03 00 00 FF FC 04 00\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.Encoding.GetBytes_String#1\">Imports System\nImports System.Text\nImports Microsoft.VisualBasic\n\nPublic Class SamplesEncoding   \n\n   Public Shared Sub Main()\n\n      &#39; The characters to encode:\n      &#39;    Latin Small Letter Z (U+007A)\n      &#39;    Latin Small Letter A (U+0061)\n      &#39;    Combining Breve (U+0306)\n      &#39;    Latin Small Letter AE With Acute (U+01FD)\n      &#39;    Greek Small Letter Beta (U+03B2)\n      &#39;    a high-surrogate value (U+D8FF)\n      &#39;    a low-surrogate value (U+DCFF)\n      Dim myStr As String = &quot;za&quot; &amp; ChrW(&amp;H0306) &amp; ChrW(&amp;H01FD) &amp; ChrW(&amp;H03B2) &amp; ChrW(&amp;HD8FF) &amp; ChrW(&amp;HDCFF)\n\n      &#39; Get different encodings.\n      Dim u7 As Encoding = Encoding.UTF7\n      Dim u8 As Encoding = Encoding.UTF8\n      Dim u16LE As Encoding = Encoding.Unicode\n      Dim u16BE As Encoding = Encoding.BigEndianUnicode\n      Dim u32 As Encoding = Encoding.UTF32\n\n      &#39; Encode the entire string, and print out the counts and the resulting bytes.\n      Console.WriteLine(&quot;Encoding the entire string:&quot;)\n      PrintCountsAndBytes(myStr, u7)\n      PrintCountsAndBytes(myStr, u8)\n      PrintCountsAndBytes(myStr, u16LE)\n      PrintCountsAndBytes(myStr, u16BE)\n      PrintCountsAndBytes(myStr, u32)\n\n      Console.WriteLine()\n\n      &#39; Encode three characters starting at index 4, and print out the counts and the resulting bytes.\n      Console.WriteLine(&quot;Encoding the characters from index 4 through 6:&quot;)\n      PrintCountsAndBytes(myStr, 4, 3, u7)\n      PrintCountsAndBytes(myStr, 4, 3, u8)\n      PrintCountsAndBytes(myStr, 4, 3, u16LE)\n      PrintCountsAndBytes(myStr, 4, 3, u16BE)\n      PrintCountsAndBytes(myStr, 4, 3, u32)\n\n   End Sub &#39;Main\n\n\n   Overloads Public Shared Sub PrintCountsAndBytes(s As String, enc As Encoding)\n\n      &#39; Display the name of the encoding used.\n      Console.Write(&quot;{0,-30} :&quot;, enc.ToString())\n\n      &#39; Display the exact byte count.\n      Dim iBC As Integer = enc.GetByteCount(s)\n      Console.Write(&quot; {0,-3}&quot;, iBC)\n\n      &#39; Display the maximum byte count.\n      Dim iMBC As Integer = enc.GetMaxByteCount(s.Length)\n      Console.Write(&quot; {0,-3} :&quot;, iMBC)\n\n      &#39; Encode the entire string.\n      Dim bytes As Byte() = enc.GetBytes(s)\n\n      &#39; Display all the encoded bytes.\n      PrintHexBytes(bytes)\n\n   End Sub &#39;PrintCountsAndBytes\n\n\n   Overloads Public Shared Sub PrintCountsAndBytes(s As String, index As Integer, count As Integer, enc As Encoding)\n\n      &#39; Display the name of the encoding used.\n      Console.Write(&quot;{0,-30} :&quot;, enc.ToString())\n\n      &#39; Display the exact byte count.\n      Dim iBC As Integer = enc.GetByteCount(s.ToCharArray(), index, count)\n      Console.Write(&quot; {0,-3}&quot;, iBC)\n\n      &#39; Display the maximum byte count.\n      Dim iMBC As Integer = enc.GetMaxByteCount(count)\n      Console.Write(&quot; {0,-3} :&quot;, iMBC)\n\n      &#39; Encode a range of characters in the string.\n      &#39; NOTE: In VB.NET, arrays contain one extra element by default.\n      &#39;       The following line creates the array with the exact number of elements required.\n      Dim bytes(iBC - 1) As Byte\n      enc.GetBytes(s, index, count, bytes, bytes.GetLowerBound(0))\n\n      &#39; Display all the encoded bytes.\n      PrintHexBytes(bytes)\n\n   End Sub &#39;PrintCountsAndBytes\n\n\n   Public Shared Sub PrintHexBytes(bytes() As Byte)\n\n      If bytes Is Nothing OrElse bytes.Length = 0 Then\n         Console.WriteLine(&quot;&lt;none&gt;&quot;)\n      Else\n         Dim i As Integer\n         For i = 0 To bytes.Length - 1\n            Console.Write(&quot;{0:X2} &quot;, bytes(i))\n         Next i\n         Console.WriteLine()\n      End If\n\n   End Sub &#39;PrintHexBytes \n\nEnd Class &#39;SamplesEncoding\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Encoding the entire string:\n&#39;System.Text.UTF7Encoding       : 18  23  :7A 61 2B 41 77 59 42 2F 51 4F 79 32 50 2F 63 2F 77 2D\n&#39;System.Text.UTF8Encoding       : 12  24  :7A 61 CC 86 C7 BD CE B2 F1 8F B3 BF\n&#39;System.Text.UnicodeEncoding    : 14  16  :7A 00 61 00 06 03 FD 01 B2 03 FF D8 FF DC\n&#39;System.Text.UnicodeEncoding    : 14  16  :00 7A 00 61 03 06 01 FD 03 B2 D8 FF DC FF\n&#39;System.Text.UTF32Encoding      : 24  32  :7A 00 00 00 61 00 00 00 06 03 00 00 FD 01 00 00 B2 03 00 00 FF FC 04 00\n&#39;\n&#39;Encoding the characters from index 4 through 6:\n&#39;System.Text.UTF7Encoding       : 10  11  :2B 41 37 4C 59 2F 39 7A 2F 2D\n&#39;System.Text.UTF8Encoding       : 6   12  :CE B2 F1 8F B3 BF\n&#39;System.Text.UnicodeEncoding    : 6   8   :B2 03 FF D8 FF DC\n&#39;System.Text.UnicodeEncoding    : 6   8   :03 B2 D8 FF DC FF\n&#39;System.Text.UTF32Encoding      : 8   16  :B2 03 00 00 FF FC 04 00\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.Encoding.GetBytes_String#1\">using namespace System;\nusing namespace System::Text;\nvoid PrintCountsAndBytes( String^ s, Encoding^ enc );\nvoid PrintCountsAndBytes( String^ s, int index, int count, Encoding^ enc );\nvoid PrintHexBytes( array&lt;Byte&gt;^bytes );\nint main()\n{\n   \n   // The characters to encode:\n   //    Latin Small Letter Z (U+007A)\n   //    Latin Small Letter A (U+0061)\n   //    Combining Breve (U+0306)\n   //    Latin Small Letter AE With Acute (U+01FD)\n   //    Greek Small Letter Beta (U+03B2)\n   //    a high-surrogate value (U+D8FF)\n   //    a low-surrogate value (U+DCFF)\n   String^ myStr = L&quot;za\\u0306\\u01FD\\u03B2\\xD8FF\\xDCFF&quot;;\n   \n   // Get different encodings.\n   Encoding^ u7 = Encoding::UTF7;\n   Encoding^ u8 = Encoding::UTF8;\n   Encoding^ u16LE = Encoding::Unicode;\n   Encoding^ u16BE = Encoding::BigEndianUnicode;\n   Encoding^ u32 = Encoding::UTF32;\n   \n   // Encode the entire string, and print out the counts and the resulting bytes.\n   Console::WriteLine( &quot;Encoding the entire string:&quot; );\n   PrintCountsAndBytes( myStr, u7 );\n   PrintCountsAndBytes( myStr, u8 );\n   PrintCountsAndBytes( myStr, u16LE );\n   PrintCountsAndBytes( myStr, u16BE );\n   PrintCountsAndBytes( myStr, u32 );\n   Console::WriteLine();\n   \n   // Encode three characters starting at index 4, and print out the counts and the resulting bytes.\n   Console::WriteLine( &quot;Encoding the characters from index 4 through 6:&quot; );\n   PrintCountsAndBytes( myStr, 4, 3, u7 );\n   PrintCountsAndBytes( myStr, 4, 3, u8 );\n   PrintCountsAndBytes( myStr, 4, 3, u16LE );\n   PrintCountsAndBytes( myStr, 4, 3, u16BE );\n   PrintCountsAndBytes( myStr, 4, 3, u32 );\n}\n\nvoid PrintCountsAndBytes( String^ s, Encoding^ enc )\n{\n   \n   // Display the name of the encoding used.\n   Console::Write( &quot;{0,-30} :&quot;, enc );\n   \n   // Display the exact byte count.\n   int iBC = enc-&gt;GetByteCount( s );\n   Console::Write( &quot; {0,-3}&quot;, iBC );\n   \n   // Display the maximum byte count.\n   int iMBC = enc-&gt;GetMaxByteCount( s-&gt;Length );\n   Console::Write( &quot; {0,-3} :&quot;, iMBC );\n   \n   // Encode the entire string.\n   array&lt;Byte&gt;^bytes = enc-&gt;GetBytes( s );\n   \n   // Display all the encoded bytes.\n   PrintHexBytes( bytes );\n}\n\nvoid PrintCountsAndBytes( String^ s, int index, int count, Encoding^ enc )\n{\n   \n   // Display the name of the encoding used.\n   Console::Write( &quot;{0,-30} :&quot;, enc );\n   \n   // Display the exact byte count.\n   int iBC = enc-&gt;GetByteCount( s-&gt;ToCharArray(), index, count );\n   Console::Write( &quot; {0,-3}&quot;, iBC );\n   \n   // Display the maximum byte count.\n   int iMBC = enc-&gt;GetMaxByteCount( count );\n   Console::Write( &quot; {0,-3} :&quot;, iMBC );\n   \n   // Encode a range of characters in the string.\n   array&lt;Byte&gt;^bytes = gcnew array&lt;Byte&gt;(iBC);\n   enc-&gt;GetBytes( s, index, count, bytes, bytes-&gt;GetLowerBound( 0 ) );\n   \n   // Display all the encoded bytes.\n   PrintHexBytes( bytes );\n}\n\nvoid PrintHexBytes( array&lt;Byte&gt;^bytes )\n{\n   if ( (bytes == nullptr) || (bytes-&gt;Length == 0) )\n      Console::WriteLine( &quot;&lt;none&gt;&quot; );\n   else\n   {\n      for ( int i = 0; i &lt; bytes-&gt;Length; i++ )\n         Console::Write( &quot;{0:X2} &quot;, bytes[ i ] );\n      Console::WriteLine();\n   }\n}\n\n/* \nThis code produces the following output.\n\nEncoding the entire string:\nSystem.Text.UTF7Encoding       : 18  23  :7A 61 2B 41 77 59 42 2F 51 4F 79 32 50 2F 63 2F 77 2D\nSystem.Text.UTF8Encoding       : 12  24  :7A 61 CC 86 C7 BD CE B2 F1 8F B3 BF\nSystem.Text.UnicodeEncoding    : 14  16  :7A 00 61 00 06 03 FD 01 B2 03 FF D8 FF DC\nSystem.Text.UnicodeEncoding    : 14  16  :00 7A 00 61 03 06 01 FD 03 B2 D8 FF DC FF\nSystem.Text.UTF32Encoding      : 24  32  :7A 00 00 00 61 00 00 00 06 03 00 00 FD 01 00 00 B2 03 00 00 FF FC 04 00\n\nEncoding the characters from index 4 through 6:\nSystem.Text.UTF7Encoding       : 10  11  :2B 41 37 4C 59 2F 39 7A 2F 2D\nSystem.Text.UTF8Encoding       : 6   12  :CE B2 F1 8F B3 BF\nSystem.Text.UnicodeEncoding    : 6   8   :B2 03 FF D8 FF DC\nSystem.Text.UnicodeEncoding    : 6   8   :03 B2 D8 FF DC FF\nSystem.Text.UTF32Encoding      : 8   16  :B2 03 00 00 FF FC 04 00\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_GetCharCount_System_Byte___\">\r\n    \r\n            <a id=\"System_Text_Encoding_GetCharCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCharCount(Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, calculates the number of characters produced by decoding all the bytes in the specified byte array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int GetCharCount (byte[] bytes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The byte array containing the sequence of bytes to decode.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of characters produced by decoding the specified sequence of bytes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>bytes</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoderfallbackexception\" data-linktype=\"relative-path\">DecoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for complete explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.DecoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.decoderexceptionfallback\" data-linktype=\"relative-path\">DecoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To calculate the exact array size required by [GetChars(Byte&lt;xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%29&gt; to store the resulting characters, you should use the GetCharCount method. To calculate the maximum array size, you should use the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetMaxCharCount_System_Int32_\" data-linktype=\"relative-path\">GetMaxCharCount(Int32)</a> method. The GetCharCount method generally allows allocation of less memory, while the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetMaxCharCount_\" data-linktype=\"relative-path\">GetMaxCharCount</a> method generally executes faster.  </p>\n<p> The GetCharCount method determines how many characters result in decoding a sequence of bytes, and the  [GetChars(Byte&lt;xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%29&gt; method performs the actual decoding. The <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a> method expects discrete conversions, in contrast to the <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_GetChars_\" data-linktype=\"relative-path\">GetChars</a> method, which handles multiple passes on a single input stream.  </p>\n<p> Several versions of GetCharCount and <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a> are supported. The following are some programming considerations for use of these methods:  </p>\n<ul>\n<li><p>Your app might need to decode multiple input bytes from a code page and process the bytes using multiple calls. In this case, you probably need to maintain state between calls.  </p>\n</li>\n<li><p>If your app handles string outputs, you should use the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetString_\" data-linktype=\"relative-path\">GetString</a> method. Since this method must check string length and allocate a buffer, it is slightly slower, but the resulting <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> type is to be preferred.  </p>\n</li>\n<li><p>The byte version of <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetChars_System_Byte__System_Int32_System_Char__System_Int32_\" data-linktype=\"relative-path\">GetChars(Byte*,Int32,Char*,Int32)</a> allows some fast techniques, particularly with multiple calls to large buffers. Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.  </p>\n</li>\n<li><p>If your app must convert a large amount of data, it should reuse the output buffer. In this case, the [GetChars(Byte[], Int32, Int32, Char&lt;xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29&gt; version that supports output character buffers is the best choice.  </p>\n</li>\n<li><p>Consider using the <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_Convert_\" data-linktype=\"relative-path\">Convert</a> method instead of GetCharCount. The conversion method converts as much data as possible and throws an exception if the output buffer is too small. For continuous decoding of a stream, this method is often the best choice.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example encodes a string into an array of bytes, and then decodes the bytes into an array of characters.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Text.Encoding.GetChars#1\">using namespace System;\nusing namespace System::Text;\nvoid PrintCountsAndChars( array&lt;Byte&gt;^bytes, Encoding^ enc );\nint main()\n{\n   \n   // Create two instances of UTF32Encoding: one with little-endian byte order and one with big-endian byte order.\n   Encoding^ u32LE = Encoding::GetEncoding( &quot;utf-32&quot; );\n   Encoding^ u32BE = Encoding::GetEncoding( &quot;utf-32BE&quot; );\n   \n   // Use a string containing the following characters:\n   //    Latin Small Letter Z (U+007A)\n   //    Latin Small Letter A (U+0061)\n   //    Combining Breve (U+0306)\n   //    Latin Small Letter AE With Acute (U+01FD)\n   //    Greek Small Letter Beta (U+03B2)\n   String^ myStr = &quot;za\\u0306\\u01FD\\u03B2&quot;;\n   \n   // Encode the string using the big-endian byte order.\n   array&lt;Byte&gt;^barrBE = gcnew array&lt;Byte&gt;(u32BE-&gt;GetByteCount( myStr ));\n   u32BE-&gt;GetBytes( myStr, 0, myStr-&gt;Length, barrBE, 0 );\n   \n   // Encode the string using the little-endian byte order.\n   array&lt;Byte&gt;^barrLE = gcnew array&lt;Byte&gt;(u32LE-&gt;GetByteCount( myStr ));\n   u32LE-&gt;GetBytes( myStr, 0, myStr-&gt;Length, barrLE, 0 );\n   \n   // Get the char counts, and decode the byte arrays.\n   Console::Write( &quot;BE array with BE encoding : &quot; );\n   PrintCountsAndChars( barrBE, u32BE );\n   Console::Write( &quot;LE array with LE encoding : &quot; );\n   PrintCountsAndChars( barrLE, u32LE );\n}\n\nvoid PrintCountsAndChars( array&lt;Byte&gt;^bytes, Encoding^ enc )\n{\n   \n   // Display the name of the encoding used.\n   Console::Write( &quot;{0,-25} :&quot;, enc );\n   \n   // Display the exact character count.\n   int iCC = enc-&gt;GetCharCount( bytes );\n   Console::Write( &quot; {0,-3}&quot;, iCC );\n   \n   // Display the maximum character count.\n   int iMCC = enc-&gt;GetMaxCharCount( bytes-&gt;Length );\n   Console::Write( &quot; {0,-3} :&quot;, iMCC );\n   \n   // Decode the bytes and display the characters.\n   array&lt;Char&gt;^chars = enc-&gt;GetChars( bytes );\n   Console::WriteLine( chars );\n}\n\n/* \nThis code produces the following output.  The question marks take the place of characters that cannot be displayed at the console.\n\nBE array with BE encoding : System.Text.UTF32Encoding : 5   12  :za??�\nLE array with LE encoding : System.Text.UTF32Encoding : 5   12  :za??�\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.Encoding.GetChars#1\">Imports System\nImports System.Text\nImports Microsoft.VisualBasic\n\nPublic Class SamplesEncoding   \n\n   Public Shared Sub Main()\n\n      &#39; Create two instances of UTF32Encoding: one with little-endian byte order and one with big-endian byte order.\n      Dim u32LE As Encoding = Encoding.GetEncoding(&quot;utf-32&quot;)\n      Dim u32BE As Encoding = Encoding.GetEncoding(&quot;utf-32BE&quot;)\n\n      &#39; Use a string containing the following characters:\n      &#39;    Latin Small Letter Z (U+007A)\n      &#39;    Latin Small Letter A (U+0061)\n      &#39;    Combining Breve (U+0306)\n      &#39;    Latin Small Letter AE With Acute (U+01FD)\n      &#39;    Greek Small Letter Beta (U+03B2)\n      Dim myStr As String = &quot;za&quot; &amp; ChrW(&amp;H0306) &amp; ChrW(&amp;H01FD) &amp; ChrW(&amp;H03B2) \n\n      &#39; Encode the string using the big-endian byte order.\n      &#39; NOTE: In VB.NET, arrays contain one extra element by default.\n      &#39;       The following line creates the array with the exact number of elements required.\n      Dim barrBE(u32BE.GetByteCount(myStr) - 1) As Byte\n      u32BE.GetBytes(myStr, 0, myStr.Length, barrBE, 0)\n\n      &#39; Encode the string using the little-endian byte order.\n      &#39; NOTE: In VB.NET, arrays contain one extra element by default.\n      &#39;       The following line creates the array with the exact number of elements required.\n      Dim barrLE(u32LE.GetByteCount(myStr) - 1) As Byte\n      u32LE.GetBytes(myStr, 0, myStr.Length, barrLE, 0)\n\n      &#39; Get the char counts, and decode the byte arrays.\n      Console.Write(&quot;BE array with BE encoding : &quot;)\n      PrintCountsAndChars(barrBE, u32BE)\n      Console.Write(&quot;LE array with LE encoding : &quot;)\n      PrintCountsAndChars(barrLE, u32LE)\n\n   End Sub &#39;Main\n\n\n   Public Shared Sub PrintCountsAndChars(bytes() As Byte, enc As Encoding)\n\n      &#39; Display the name of the encoding used.\n      Console.Write(&quot;{0,-25} :&quot;, enc.ToString())\n\n      &#39; Display the exact character count.\n      Dim iCC As Integer = enc.GetCharCount(bytes)\n      Console.Write(&quot; {0,-3}&quot;, iCC)\n\n      &#39; Display the maximum character count.\n      Dim iMCC As Integer = enc.GetMaxCharCount(bytes.Length)\n      Console.Write(&quot; {0,-3} :&quot;, iMCC)\n\n      &#39; Decode the bytes and display the characters.\n      Dim chars As Char() = enc.GetChars(bytes)\n      Console.WriteLine(chars)\n\n   End Sub &#39;PrintCountsAndChars \n\nEnd Class &#39;SamplesEncoding\n\n\n&#39;This code produces the following output.  The question marks take the place of characters that cannot be displayed at the console.\n&#39;\n&#39;BE array with BE encoding : System.Text.UTF32Encoding : 5   12  :za??�\n&#39;LE array with LE encoding : System.Text.UTF32Encoding : 5   12  :za??�\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.Encoding.GetChars#1\">using System;\nusing System.Text;\n\npublic class SamplesEncoding  {\n\n   public static void Main()  {\n\n      // Create two instances of UTF32Encoding: one with little-endian byte order and one with big-endian byte order.\n      Encoding u32LE = Encoding.GetEncoding( &quot;utf-32&quot; );\n      Encoding u32BE = Encoding.GetEncoding( &quot;utf-32BE&quot; );\n\n      // Use a string containing the following characters:\n      //    Latin Small Letter Z (U+007A)\n      //    Latin Small Letter A (U+0061)\n      //    Combining Breve (U+0306)\n      //    Latin Small Letter AE With Acute (U+01FD)\n      //    Greek Small Letter Beta (U+03B2)\n      String myStr = &quot;za\\u0306\\u01FD\\u03B2&quot;;\n\n      // Encode the string using the big-endian byte order.\n      byte[] barrBE = new byte[u32BE.GetByteCount( myStr )];\n      u32BE.GetBytes( myStr, 0, myStr.Length, barrBE, 0 );\n\n      // Encode the string using the little-endian byte order.\n      byte[] barrLE = new byte[u32LE.GetByteCount( myStr )];\n      u32LE.GetBytes( myStr, 0, myStr.Length, barrLE, 0 );\n\n      // Get the char counts, and decode the byte arrays.\n      Console.Write( &quot;BE array with BE encoding : &quot; );\n      PrintCountsAndChars( barrBE, u32BE );\n      Console.Write( &quot;LE array with LE encoding : &quot; );\n      PrintCountsAndChars( barrLE, u32LE );\n\n   }\n\n\n   public static void PrintCountsAndChars( byte[] bytes, Encoding enc )  {\n\n      // Display the name of the encoding used.\n      Console.Write( &quot;{0,-25} :&quot;, enc.ToString() );\n\n      // Display the exact character count.\n      int iCC  = enc.GetCharCount( bytes );\n      Console.Write( &quot; {0,-3}&quot;, iCC );\n\n      // Display the maximum character count.\n      int iMCC = enc.GetMaxCharCount( bytes.Length );\n      Console.Write( &quot; {0,-3} :&quot;, iMCC );\n\n      // Decode the bytes and display the characters.\n      char[] chars = enc.GetChars( bytes );\n      Console.WriteLine( chars );\n\n   }\n\n}\n\n\n/* \nThis code produces the following output.  The question marks take the place of characters that cannot be displayed at the console.\n\nBE array with BE encoding : System.Text.UTF32Encoding : 5   12  :za??�\nLE array with LE encoding : System.Text.UTF32Encoding : 5   12  :za??�\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_GetCharCount_System_Byte__System_Int32_\">\r\n    \r\n            <a id=\"System_Text_Encoding_GetCharCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCharCount(Byte*,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int GetCharCount (byte* bytes, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>*</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to the first byte to decode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes to decode.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of characters produced by decoding the specified sequence of bytes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>bytes</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>count</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoderfallbackexception\" data-linktype=\"relative-path\">DecoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for complete explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.DecoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.decoderexceptionfallback\" data-linktype=\"relative-path\">DecoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To calculate the exact array size that <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a> requires to store the resulting characters, you should use the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a> method. To calculate the maximum array size, use the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetMaxCharCount_\" data-linktype=\"relative-path\">GetMaxCharCount</a> method. The <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a> method generally allows allocation of less memory, while the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetMaxCharCount_\" data-linktype=\"relative-path\">GetMaxCharCount</a> method generally executes faster.  </p>\n<p> The <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a> method determines how many characters result in decoding a sequence of bytes, and the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a> method performs the actual decoding. The <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a> method expects discrete conversions, in contrast to the <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_GetChars_\" data-linktype=\"relative-path\">GetChars</a> method, which handles multiple passes on a single input stream.  </p>\n<p> Several versions of <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a> and <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a> are supported. The following are some programming considerations for use of these methods:  </p>\n<ul>\n<li><p>Your app might need to decode multiple input bytes from a code page and process the bytes using multiple calls. In this case, you probably need to maintain state between calls.  </p>\n</li>\n<li><p>If your app handles string outputs, it is recommended to use the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetString_\" data-linktype=\"relative-path\">GetString</a> method. Since this method must check string length and allocate a buffer, it is slightly slower, but the resulting <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> type is to be preferred.  </p>\n</li>\n<li><p>The byte version of <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetChars_System_Byte__System_Int32_System_Char__System_Int32_\" data-linktype=\"relative-path\">GetChars(Byte*,Int32,Char*,Int32)</a> allows some fast techniques, particularly with multiple calls to large buffers. Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.  </p>\n</li>\n<li><p>If your app must convert a large amount of data, it should reuse the output buffer. In this case, the [GetChars(Byte[], Int32, Int32, Char&lt;xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29&gt; version that supports output character buffers is the best choice.  </p>\n</li>\n<li><p>Consider using the <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_Convert_\" data-linktype=\"relative-path\">Convert</a> method instead of <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a>. The conversion method converts as much data as possible and throws an exception if the output buffer is too small. For continuous decoding of a stream, this method is often the best choice.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_GetCharCount_System_Byte___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Text_Encoding_GetCharCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCharCount(Byte[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract int GetCharCount (byte[] bytes, int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The byte array containing the sequence of bytes to decode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the first byte to decode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes to decode.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of characters produced by decoding the specified sequence of bytes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>bytes</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> or <code>count</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>index</code> and <code>count</code> do not denote a valid range in <code>bytes</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoderfallbackexception\" data-linktype=\"relative-path\">DecoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for complete explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.DecoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.decoderexceptionfallback\" data-linktype=\"relative-path\">DecoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To calculate the exact array size required by <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a> to store the resulting characters, you should use the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a> method. To calculate the maximum array size, use the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetMaxCharCount_\" data-linktype=\"relative-path\">GetMaxCharCount</a> method. The <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a> method generally allows allocation of less memory, while the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetMaxCharCount_\" data-linktype=\"relative-path\">GetMaxCharCount</a> method generally executes faster.  </p>\n<p> The <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a> method determines how many characters result in decoding a sequence of bytes, and the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a> method performs the actual decoding. The <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a> method expects discrete conversions, in contrast to the <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_GetChars_\" data-linktype=\"relative-path\">GetChars</a> method, which handles multiple passes on a single input stream.  </p>\n<p> Several versions of <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a> and <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a> are supported. The following are some programming considerations for use of these methods:  </p>\n<ul>\n<li><p>Your app might need to decode multiple input bytes from a code page and process the bytes using multiple calls. In this case, you probably need to maintain state between calls.  </p>\n</li>\n<li><p>If your app handles string outputs, it is recommended to use the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetString_\" data-linktype=\"relative-path\">GetString</a> method. Since this method must check string length and allocate a buffer, it is slightly slower, but the resulting <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> type is to be preferred.  </p>\n</li>\n<li><p>The byte version of <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetChars_System_Byte__System_Int32_System_Char__System_Int32_\" data-linktype=\"relative-path\">GetChars(Byte*,Int32,Char*,Int32)</a> allows some fast techniques, particularly with multiple calls to large buffers. Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.  </p>\n</li>\n<li><p>If your app must convert a large amount of data, it should reuse the output buffer. In this case, the [GetChars(Byte[], Int32, Int32, Char&lt;xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29&gt; version that supports output character buffers is the best choice.  </p>\n</li>\n<li><p>Consider using the <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_Convert_\" data-linktype=\"relative-path\">Convert</a> method instead of <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a>. The conversion method converts as much data as possible and throws an exception if the output buffer is too small. For continuous decoding of a stream, this method is often the best choice.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts a string from one encoding to another.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Text.Encoding.Convert Example#1\">using namespace System;\nusing namespace System::Text;\n\nint main()\n{\n   String^ unicodeString = &quot;This string contains the unicode character Pi (\\u03a0)&quot;;\n   \n   // Create two different encodings.\n   Encoding^ ascii = Encoding::ASCII;\n   Encoding^ unicode = Encoding::Unicode;\n   \n   // Convert the string into a byte array.\n   array&lt;Byte&gt;^unicodeBytes = unicode-&gt;GetBytes( unicodeString );\n   \n   // Perform the conversion from one encoding to the other.\n   array&lt;Byte&gt;^asciiBytes = Encoding::Convert( unicode, ascii, unicodeBytes );\n   \n   // Convert the new Byte into[] a char and[] then into a string.\n   array&lt;Char&gt;^asciiChars = gcnew array&lt;Char&gt;(ascii-&gt;GetCharCount( asciiBytes, 0, asciiBytes-&gt;Length ));\n   ascii-&gt;GetChars( asciiBytes, 0, asciiBytes-&gt;Length, asciiChars, 0 );\n   String^ asciiString = gcnew String( asciiChars );\n   \n   // Display the strings created before and after the conversion.\n   Console::WriteLine( &quot;Original String*: {0}&quot;, unicodeString );\n   Console::WriteLine( &quot;Ascii converted String*: {0}&quot;, asciiString );\n}\n// The example displays the following output:\n//    Original string: This string contains the unicode character Pi (Π)\n//    Ascii converted string: This string contains the unicode character Pi (?)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.Encoding.Convert Example#1\">using System;\nusing System.Text;\n\nclass Example\n{\n   static void Main()\n   {\n      string unicodeString = &quot;This string contains the unicode character Pi (\\u03a0)&quot;;\n\n      // Create two different encodings.\n      Encoding ascii = Encoding.ASCII;\n      Encoding unicode = Encoding.Unicode;\n\n      // Convert the string into a byte array.\n      byte[] unicodeBytes = unicode.GetBytes(unicodeString);\n\n      // Perform the conversion from one encoding to the other.\n      byte[] asciiBytes = Encoding.Convert(unicode, ascii, unicodeBytes);\n         \n      // Convert the new byte[] into a char[] and then into a string.\n      char[] asciiChars = new char[ascii.GetCharCount(asciiBytes, 0, asciiBytes.Length)];\n      ascii.GetChars(asciiBytes, 0, asciiBytes.Length, asciiChars, 0);\n      string asciiString = new string(asciiChars);\n\n      // Display the strings created before and after the conversion.\n      Console.WriteLine(&quot;Original string: {0}&quot;, unicodeString);\n      Console.WriteLine(&quot;Ascii converted string: {0}&quot;, asciiString);\n   }\n}\n// The example displays the following output:\n//    Original string: This string contains the unicode character Pi (Π)\n//    Ascii converted string: This string contains the unicode character Pi (?)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.Encoding.Convert Example#1\">Imports System.Text\n\nClass Example\n   Shared Sub Main()\n      Dim unicodeString As String = &quot;This string contains the unicode character Pi (&quot; &amp; ChrW(&amp;H03A0) &amp; &quot;)&quot;\n\n      &#39; Create two different encodings.\n      Dim ascii As Encoding = Encoding.ASCII\n      Dim unicode As Encoding = Encoding.Unicode\n\n      &#39; Convert the string into a byte array.\n      Dim unicodeBytes As Byte() = unicode.GetBytes(unicodeString)\n\n      &#39; Perform the conversion from one encoding to the other.\n      Dim asciiBytes As Byte() = Encoding.Convert(unicode, ascii, unicodeBytes)\n\n      &#39; Convert the new byte array into a char array and then into a string.\n      Dim asciiChars(ascii.GetCharCount(asciiBytes, 0, asciiBytes.Length)-1) As Char\n      ascii.GetChars(asciiBytes, 0, asciiBytes.Length, asciiChars, 0)\n      Dim asciiString As New String(asciiChars)\n\n      &#39; Display the strings created before and after the conversion.\n      Console.WriteLine(&quot;Original string: {0}&quot;, unicodeString)\n      Console.WriteLine(&quot;Ascii converted string: {0}&quot;, asciiString)\n   End Sub\nEnd Class\n&#39; The example displays the following output:\n&#39;    Original string: This string contains the unicode character Pi (Π)\n&#39;    Ascii converted string: This string contains the unicode character Pi (?)\n</code></pre><p> The following example encodes a string into an array of bytes, and then decodes a range of the bytes into an array of characters.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Text.Encoding.GetCharsIC#1\">using namespace System;\nusing namespace System::Text;\nvoid PrintCountsAndChars( array&lt;Byte&gt;^bytes, int index, int count, Encoding^ enc );\nint main()\n{\n   \n   // Create two instances of UTF32Encoding: one with little-endian byte order and one with big-endian byte order.\n   Encoding^ u32LE = Encoding::GetEncoding( &quot;utf-32&quot; );\n   Encoding^ u32BE = Encoding::GetEncoding( &quot;utf-32BE&quot; );\n   \n   // Use a string containing the following characters:\n   //    Latin Small Letter Z (U+007A)\n   //    Latin Small Letter A (U+0061)\n   //    Combining Breve (U+0306)\n   //    Latin Small Letter AE With Acute (U+01FD)\n   //    Greek Small Letter Beta (U+03B2)\n   String^ myStr = &quot;za\\u0306\\u01FD\\u03B2&quot;;\n   \n   // Encode the string using the big-endian byte order.\n   array&lt;Byte&gt;^barrBE = gcnew array&lt;Byte&gt;(u32BE-&gt;GetByteCount( myStr ));\n   u32BE-&gt;GetBytes( myStr, 0, myStr-&gt;Length, barrBE, 0 );\n   \n   // Encode the string using the little-endian byte order.\n   array&lt;Byte&gt;^barrLE = gcnew array&lt;Byte&gt;(u32LE-&gt;GetByteCount( myStr ));\n   u32LE-&gt;GetBytes( myStr, 0, myStr-&gt;Length, barrLE, 0 );\n   \n   // Get the char counts, decode eight bytes starting at index 0,\n   // and print out the counts and the resulting bytes.\n   Console::Write( &quot;BE array with BE encoding : &quot; );\n   PrintCountsAndChars( barrBE, 0, 8, u32BE );\n   Console::Write( &quot;LE array with LE encoding : &quot; );\n   PrintCountsAndChars( barrLE, 0, 8, u32LE );\n}\n\nvoid PrintCountsAndChars( array&lt;Byte&gt;^bytes, int index, int count, Encoding^ enc )\n{\n   \n   // Display the name of the encoding used.\n   Console::Write( &quot;{0,-25} :&quot;, enc );\n   \n   // Display the exact character count.\n   int iCC = enc-&gt;GetCharCount( bytes, index, count );\n   Console::Write( &quot; {0,-3}&quot;, iCC );\n   \n   // Display the maximum character count.\n   int iMCC = enc-&gt;GetMaxCharCount( count );\n   Console::Write( &quot; {0,-3} :&quot;, iMCC );\n   \n   // Decode the bytes and display the characters.\n   array&lt;Char&gt;^chars = enc-&gt;GetChars( bytes, index, count );\n   \n   // The following is an alternative way to decode the bytes:\n   // Char[] chars = new Char[iCC];\n   // enc-&gt;GetChars( bytes, index, count, chars, 0 );\n   Console::WriteLine( chars );\n}\n\n/* \nThis code produces the following output.  The question marks take the place of characters that cannot be displayed at the console.\n\nBE array with BE encoding : System.Text.UTF32Encoding : 2   6   :za\nLE array with LE encoding : System.Text.UTF32Encoding : 2   6   :za\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.Encoding.GetCharsIC#1\">Imports System\nImports System.Text\nImports Microsoft.VisualBasic\n\nPublic Class SamplesEncoding   \n\n   Public Shared Sub Main()\n\n      &#39; Create two instances of UTF32Encoding: one with little-endian byte order and one with big-endian byte order.\n      Dim u32LE As Encoding = Encoding.GetEncoding(&quot;utf-32&quot;)\n      Dim u32BE As Encoding = Encoding.GetEncoding(&quot;utf-32BE&quot;)\n\n      &#39; Use a string containing the following characters:\n      &#39;    Latin Small Letter Z (U+007A)\n      &#39;    Latin Small Letter A (U+0061)\n      &#39;    Combining Breve (U+0306)\n      &#39;    Latin Small Letter AE With Acute (U+01FD)\n      &#39;    Greek Small Letter Beta (U+03B2)\n      Dim myStr As String = &quot;za&quot; &amp; ChrW(&amp;H0306) &amp; ChrW(&amp;H01FD) &amp; ChrW(&amp;H03B2)\n\n      &#39; Encode the string using the big-endian byte order.\n      &#39; NOTE: In VB.NET, arrays contain one extra element by default.\n      &#39;       The following line creates barrBE with the exact number of elements required.\n      Dim barrBE(u32BE.GetByteCount(myStr) - 1) As Byte\n      u32BE.GetBytes(myStr, 0, myStr.Length, barrBE, 0)\n\n      &#39; Encode the string using the little-endian byte order.\n      &#39; NOTE: In VB.NET, arrays contain one extra element by default.\n      &#39;       The following line creates barrLE with the exact number of elements required.\n      Dim barrLE(u32LE.GetByteCount(myStr) - 1) As Byte\n      u32LE.GetBytes(myStr, 0, myStr.Length, barrLE, 0)\n\n      &#39; Get the char counts, decode eight bytes starting at index 0,\n      &#39; and print out the counts and the resulting bytes.\n      Console.Write(&quot;BE array with BE encoding : &quot;)\n      PrintCountsAndChars(barrBE, 0, 8, u32BE)\n      Console.Write(&quot;LE array with LE encoding : &quot;)\n      PrintCountsAndChars(barrLE, 0, 8, u32LE)\n\n   End Sub &#39;Main\n\n\n   Public Shared Sub PrintCountsAndChars(bytes() As Byte, index As Integer, count As Integer, enc As Encoding)\n\n      &#39; Display the name of the encoding used.\n      Console.Write(&quot;{0,-25} :&quot;, enc.ToString())\n\n      &#39; Display the exact character count.\n      Dim iCC As Integer = enc.GetCharCount(bytes, index, count)\n      Console.Write(&quot; {0,-3}&quot;, iCC)\n\n      &#39; Display the maximum character count.\n      Dim iMCC As Integer = enc.GetMaxCharCount(count)\n      Console.Write(&quot; {0,-3} :&quot;, iMCC)\n\n      &#39; Decode the bytes.\n      Dim chars As Char() = enc.GetChars(bytes, index, count)\n\n      &#39; The following is an alternative way to decode the bytes:\n      &#39; NOTE: In VB.NET, arrays contain one extra element by default.\n      &#39;       The following line creates the array with the exact number of elements required.\n      &#39; Dim chars(iCC - 1) As Char\n      &#39; enc.GetChars( bytes, index, count, chars, 0 )\n\n      &#39; Display the characters.\n      Console.WriteLine(chars)\n\n   End Sub &#39;PrintCountsAndChars \n\nEnd Class &#39;SamplesEncoding\n\n\n&#39;This code produces the following output.  The question marks take the place of characters that cannot be displayed at the console.\n&#39;\n&#39;BE array with BE encoding : System.Text.UTF32Encoding : 2   6   :za\n&#39;LE array with LE encoding : System.Text.UTF32Encoding : 2   6   :za\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.Encoding.GetCharsIC#1\">using System;\nusing System.Text;\n\npublic class SamplesEncoding  {\n\n   public static void Main()  {\n\n      // Create two instances of UTF32Encoding: one with little-endian byte order and one with big-endian byte order.\n      Encoding u32LE = Encoding.GetEncoding( &quot;utf-32&quot; );\n      Encoding u32BE = Encoding.GetEncoding( &quot;utf-32BE&quot; );\n\n      // Use a string containing the following characters:\n      //    Latin Small Letter Z (U+007A)\n      //    Latin Small Letter A (U+0061)\n      //    Combining Breve (U+0306)\n      //    Latin Small Letter AE With Acute (U+01FD)\n      //    Greek Small Letter Beta (U+03B2)\n      String myStr = &quot;za\\u0306\\u01FD\\u03B2&quot;;\n\n      // Encode the string using the big-endian byte order.\n      byte[] barrBE = new byte[u32BE.GetByteCount( myStr )];\n      u32BE.GetBytes( myStr, 0, myStr.Length, barrBE, 0 );\n\n      // Encode the string using the little-endian byte order.\n      byte[] barrLE = new byte[u32LE.GetByteCount( myStr )];\n      u32LE.GetBytes( myStr, 0, myStr.Length, barrLE, 0 );\n\n      // Get the char counts, decode eight bytes starting at index 0,\n      // and print out the counts and the resulting bytes.\n      Console.Write( &quot;BE array with BE encoding : &quot; );\n      PrintCountsAndChars( barrBE, 0, 8, u32BE );\n      Console.Write( &quot;LE array with LE encoding : &quot; );\n      PrintCountsAndChars( barrLE, 0, 8, u32LE );\n\n   }\n\n\n   public static void PrintCountsAndChars( byte[] bytes, int index, int count, Encoding enc )  {\n\n      // Display the name of the encoding used.\n      Console.Write( &quot;{0,-25} :&quot;, enc.ToString() );\n\n      // Display the exact character count.\n      int iCC  = enc.GetCharCount( bytes, index, count );\n      Console.Write( &quot; {0,-3}&quot;, iCC );\n\n      // Display the maximum character count.\n      int iMCC = enc.GetMaxCharCount( count );\n      Console.Write( &quot; {0,-3} :&quot;, iMCC );\n\n      // Decode the bytes and display the characters.\n      char[] chars = enc.GetChars( bytes, index, count );\n\n      // The following is an alternative way to decode the bytes:\n      // char[] chars = new char[iCC];\n      // enc.GetChars( bytes, index, count, chars, 0 );\n\n      Console.WriteLine( chars );\n\n   }\n\n}\n\n\n/* \nThis code produces the following output.  The question marks take the place of characters that cannot be displayed at the console.\n\nBE array with BE encoding : System.Text.UTF32Encoding : 2   6   :za\nLE array with LE encoding : System.Text.UTF32Encoding : 2   6   :za\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_GetChars_System_Byte___\">\r\n    \r\n            <a id=\"System_Text_Encoding_GetChars_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetChars(Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, decodes all the bytes in the specified byte array into a set of characters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual char[] GetChars (byte[] bytes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The byte array containing the sequence of bytes to decode.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </div>\r\n                  <p>A character array containing the results of decoding the specified sequence of bytes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>bytes</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoderfallbackexception\" data-linktype=\"relative-path\">DecoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for complete explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.DecoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.decoderexceptionfallback\" data-linktype=\"relative-path\">DecoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>GetChars gets characters from an input byte sequence. GetChars is different than <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_GetChars_\" data-linktype=\"relative-path\">GetChars</a> because <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> expects discrete conversions, while <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> is designed for multiple passes on a single input stream.  </p>\n<p> If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> or the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> provided by the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetDecoder_\" data-linktype=\"relative-path\">GetDecoder</a> method or the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncoder_\" data-linktype=\"relative-path\">GetEncoder</a> method, respectively, of a derived class.  </p>\n<p> <strong>Note</strong> This method is intended to operate on Unicode characters, not on arbitrary binary data, such as byte arrays. If you need to encode arbitrary binary data into text, you should use a protocol such as uuencode, which is implemented by methods such as <a class=\"xref\" href=\"system.convert#System_Convert_ToBase64CharArray_\" data-linktype=\"relative-path\">ToBase64CharArray</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a> method determines how many characters result in decoding a sequence of bytes, and the GetChars method performs the actual decoding. The GetChars method expects discrete conversions, in contrast to the <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_GetChars_\" data-linktype=\"relative-path\">GetChars</a> method, which handles multiple passes on a single input stream.  </p>\n<p> Several versions of <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a> and GetChars are supported. The following are some programming considerations for use of these methods:  </p>\n<ul>\n<li><p>Your app might need to decode multiple input bytes from a code page and process the bytes using multiple calls. In this case, you probably need to maintain state between calls, because byte sequences can be interrupted when processed in batches. (For example, part of an ISO-2022 shift sequence may end one GetChars call and continue at the beginning of the next GetChars call. GetChars will call the fallback for those incomplete sequences, but <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> will remember those sequences for the next call.)  </p>\n</li>\n<li><p>If your app handles string outputs, it is recommended to use the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetString_\" data-linktype=\"relative-path\">GetString</a> method. Since this method must check string length and allocate a buffer, it is slightly slower, but the resulting <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> type is to be preferred.  </p>\n</li>\n<li><p>The byte version of <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetChars_System_Byte__System_Int32_System_Char__System_Int32_\" data-linktype=\"relative-path\">GetChars(Byte*,Int32,Char*,Int32)</a> allows some fast techniques, particularly with multiple calls to large buffers. Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.  </p>\n</li>\n<li><p>If your app must convert a large amount of data, it should reuse the output buffer. In this case, the [GetChars(Byte[], Int32, Int32, Char&lt;xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29&gt; version that supports output character buffers is the best choice.  </p>\n</li>\n<li><p>Consider using the <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_Convert_\" data-linktype=\"relative-path\">Convert</a> method instead of <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a>. The conversion method converts as much data as possible and throws an exception if the output buffer is too small. For continuous decoding of a stream, this method is often the best choice.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example encodes a string into an array of bytes, and then decodes the bytes into an array of characters.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Text.Encoding.GetChars#1\">using namespace System;\nusing namespace System::Text;\nvoid PrintCountsAndChars( array&lt;Byte&gt;^bytes, Encoding^ enc );\nint main()\n{\n   \n   // Create two instances of UTF32Encoding: one with little-endian byte order and one with big-endian byte order.\n   Encoding^ u32LE = Encoding::GetEncoding( &quot;utf-32&quot; );\n   Encoding^ u32BE = Encoding::GetEncoding( &quot;utf-32BE&quot; );\n   \n   // Use a string containing the following characters:\n   //    Latin Small Letter Z (U+007A)\n   //    Latin Small Letter A (U+0061)\n   //    Combining Breve (U+0306)\n   //    Latin Small Letter AE With Acute (U+01FD)\n   //    Greek Small Letter Beta (U+03B2)\n   String^ myStr = &quot;za\\u0306\\u01FD\\u03B2&quot;;\n   \n   // Encode the string using the big-endian byte order.\n   array&lt;Byte&gt;^barrBE = gcnew array&lt;Byte&gt;(u32BE-&gt;GetByteCount( myStr ));\n   u32BE-&gt;GetBytes( myStr, 0, myStr-&gt;Length, barrBE, 0 );\n   \n   // Encode the string using the little-endian byte order.\n   array&lt;Byte&gt;^barrLE = gcnew array&lt;Byte&gt;(u32LE-&gt;GetByteCount( myStr ));\n   u32LE-&gt;GetBytes( myStr, 0, myStr-&gt;Length, barrLE, 0 );\n   \n   // Get the char counts, and decode the byte arrays.\n   Console::Write( &quot;BE array with BE encoding : &quot; );\n   PrintCountsAndChars( barrBE, u32BE );\n   Console::Write( &quot;LE array with LE encoding : &quot; );\n   PrintCountsAndChars( barrLE, u32LE );\n}\n\nvoid PrintCountsAndChars( array&lt;Byte&gt;^bytes, Encoding^ enc )\n{\n   \n   // Display the name of the encoding used.\n   Console::Write( &quot;{0,-25} :&quot;, enc );\n   \n   // Display the exact character count.\n   int iCC = enc-&gt;GetCharCount( bytes );\n   Console::Write( &quot; {0,-3}&quot;, iCC );\n   \n   // Display the maximum character count.\n   int iMCC = enc-&gt;GetMaxCharCount( bytes-&gt;Length );\n   Console::Write( &quot; {0,-3} :&quot;, iMCC );\n   \n   // Decode the bytes and display the characters.\n   array&lt;Char&gt;^chars = enc-&gt;GetChars( bytes );\n   Console::WriteLine( chars );\n}\n\n/* \nThis code produces the following output.  The question marks take the place of characters that cannot be displayed at the console.\n\nBE array with BE encoding : System.Text.UTF32Encoding : 5   12  :za??�\nLE array with LE encoding : System.Text.UTF32Encoding : 5   12  :za??�\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.Encoding.GetChars#1\">Imports System\nImports System.Text\nImports Microsoft.VisualBasic\n\nPublic Class SamplesEncoding   \n\n   Public Shared Sub Main()\n\n      &#39; Create two instances of UTF32Encoding: one with little-endian byte order and one with big-endian byte order.\n      Dim u32LE As Encoding = Encoding.GetEncoding(&quot;utf-32&quot;)\n      Dim u32BE As Encoding = Encoding.GetEncoding(&quot;utf-32BE&quot;)\n\n      &#39; Use a string containing the following characters:\n      &#39;    Latin Small Letter Z (U+007A)\n      &#39;    Latin Small Letter A (U+0061)\n      &#39;    Combining Breve (U+0306)\n      &#39;    Latin Small Letter AE With Acute (U+01FD)\n      &#39;    Greek Small Letter Beta (U+03B2)\n      Dim myStr As String = &quot;za&quot; &amp; ChrW(&amp;H0306) &amp; ChrW(&amp;H01FD) &amp; ChrW(&amp;H03B2) \n\n      &#39; Encode the string using the big-endian byte order.\n      &#39; NOTE: In VB.NET, arrays contain one extra element by default.\n      &#39;       The following line creates the array with the exact number of elements required.\n      Dim barrBE(u32BE.GetByteCount(myStr) - 1) As Byte\n      u32BE.GetBytes(myStr, 0, myStr.Length, barrBE, 0)\n\n      &#39; Encode the string using the little-endian byte order.\n      &#39; NOTE: In VB.NET, arrays contain one extra element by default.\n      &#39;       The following line creates the array with the exact number of elements required.\n      Dim barrLE(u32LE.GetByteCount(myStr) - 1) As Byte\n      u32LE.GetBytes(myStr, 0, myStr.Length, barrLE, 0)\n\n      &#39; Get the char counts, and decode the byte arrays.\n      Console.Write(&quot;BE array with BE encoding : &quot;)\n      PrintCountsAndChars(barrBE, u32BE)\n      Console.Write(&quot;LE array with LE encoding : &quot;)\n      PrintCountsAndChars(barrLE, u32LE)\n\n   End Sub &#39;Main\n\n\n   Public Shared Sub PrintCountsAndChars(bytes() As Byte, enc As Encoding)\n\n      &#39; Display the name of the encoding used.\n      Console.Write(&quot;{0,-25} :&quot;, enc.ToString())\n\n      &#39; Display the exact character count.\n      Dim iCC As Integer = enc.GetCharCount(bytes)\n      Console.Write(&quot; {0,-3}&quot;, iCC)\n\n      &#39; Display the maximum character count.\n      Dim iMCC As Integer = enc.GetMaxCharCount(bytes.Length)\n      Console.Write(&quot; {0,-3} :&quot;, iMCC)\n\n      &#39; Decode the bytes and display the characters.\n      Dim chars As Char() = enc.GetChars(bytes)\n      Console.WriteLine(chars)\n\n   End Sub &#39;PrintCountsAndChars \n\nEnd Class &#39;SamplesEncoding\n\n\n&#39;This code produces the following output.  The question marks take the place of characters that cannot be displayed at the console.\n&#39;\n&#39;BE array with BE encoding : System.Text.UTF32Encoding : 5   12  :za??�\n&#39;LE array with LE encoding : System.Text.UTF32Encoding : 5   12  :za??�\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.Encoding.GetChars#1\">using System;\nusing System.Text;\n\npublic class SamplesEncoding  {\n\n   public static void Main()  {\n\n      // Create two instances of UTF32Encoding: one with little-endian byte order and one with big-endian byte order.\n      Encoding u32LE = Encoding.GetEncoding( &quot;utf-32&quot; );\n      Encoding u32BE = Encoding.GetEncoding( &quot;utf-32BE&quot; );\n\n      // Use a string containing the following characters:\n      //    Latin Small Letter Z (U+007A)\n      //    Latin Small Letter A (U+0061)\n      //    Combining Breve (U+0306)\n      //    Latin Small Letter AE With Acute (U+01FD)\n      //    Greek Small Letter Beta (U+03B2)\n      String myStr = &quot;za\\u0306\\u01FD\\u03B2&quot;;\n\n      // Encode the string using the big-endian byte order.\n      byte[] barrBE = new byte[u32BE.GetByteCount( myStr )];\n      u32BE.GetBytes( myStr, 0, myStr.Length, barrBE, 0 );\n\n      // Encode the string using the little-endian byte order.\n      byte[] barrLE = new byte[u32LE.GetByteCount( myStr )];\n      u32LE.GetBytes( myStr, 0, myStr.Length, barrLE, 0 );\n\n      // Get the char counts, and decode the byte arrays.\n      Console.Write( &quot;BE array with BE encoding : &quot; );\n      PrintCountsAndChars( barrBE, u32BE );\n      Console.Write( &quot;LE array with LE encoding : &quot; );\n      PrintCountsAndChars( barrLE, u32LE );\n\n   }\n\n\n   public static void PrintCountsAndChars( byte[] bytes, Encoding enc )  {\n\n      // Display the name of the encoding used.\n      Console.Write( &quot;{0,-25} :&quot;, enc.ToString() );\n\n      // Display the exact character count.\n      int iCC  = enc.GetCharCount( bytes );\n      Console.Write( &quot; {0,-3}&quot;, iCC );\n\n      // Display the maximum character count.\n      int iMCC = enc.GetMaxCharCount( bytes.Length );\n      Console.Write( &quot; {0,-3} :&quot;, iMCC );\n\n      // Decode the bytes and display the characters.\n      char[] chars = enc.GetChars( bytes );\n      Console.WriteLine( chars );\n\n   }\n\n}\n\n\n/* \nThis code produces the following output.  The question marks take the place of characters that cannot be displayed at the console.\n\nBE array with BE encoding : System.Text.UTF32Encoding : 5   12  :za??�\nLE array with LE encoding : System.Text.UTF32Encoding : 5   12  :za??�\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_GetChars_System_Byte___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Text_Encoding_GetChars_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetChars(Byte[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, decodes a sequence of bytes from the specified byte array into a set of characters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual char[] GetChars (byte[] bytes, int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The byte array containing the sequence of bytes to decode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the first byte to decode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes to decode.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </div>\r\n                  <p>A character array containing the results of decoding the specified sequence of bytes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>bytes</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> or <code>count</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>index</code> and <code>count</code> do not denote a valid range in <code>bytes</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoderfallbackexception\" data-linktype=\"relative-path\">DecoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for complete explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.DecoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.decoderexceptionfallback\" data-linktype=\"relative-path\">DecoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>GetChars gets characters from an input byte sequence. GetChars is different than <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_GetChars_\" data-linktype=\"relative-path\">GetChars</a> because <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> expects discrete conversions, while <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> is designed for multiple passes on a single input stream.  </p>\n<p> If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> or the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> provided by the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetDecoder_\" data-linktype=\"relative-path\">GetDecoder</a> method or the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncoder_\" data-linktype=\"relative-path\">GetEncoder</a> method, respectively, of a derived class.  </p>\n<p> <strong>Note</strong> This method is intended to operate on Unicode characters, not on arbitrary binary data, such as byte arrays. If you need to encode arbitrary binary data into text, you should use a protocol such as uuencode, which is implemented by methods such as <a class=\"xref\" href=\"system.convert#System_Convert_ToBase64CharArray_\" data-linktype=\"relative-path\">ToBase64CharArray</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a> method determines how many characters result in decoding a sequence of bytes, and the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a> method performs the actual decoding. The <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a> method expects discrete conversions, in contrast to the <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_GetChars_\" data-linktype=\"relative-path\">GetChars</a> method, which handles multiple passes on a single input stream.  </p>\n<p> Several versions of <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a> and <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a> are supported. The following are some programming considerations for use of these methods:  </p>\n<ul>\n<li><p>Your app might need to decode multiple input bytes from a code page and process the bytes using multiple calls. In this case, you probably need to maintain state between calls, because byte sequences can be interrupted when processed in batches. (For example, part of an ISO-2022 shift sequence may end one GetChars call and continue at the beginning of the next GetChars call. GetChars will call the fallback for those incomplete sequences, but <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> will remember those sequences for the next call.)  </p>\n</li>\n<li><p>If your app handles string outputs, it is recommended to use the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetString_\" data-linktype=\"relative-path\">GetString</a> method. Since this method must check string length and allocate a buffer, it is slightly slower, but the resulting <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> type is to be preferred.  </p>\n</li>\n<li><p>The byte version of <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetChars_System_Byte__System_Int32_System_Char__System_Int32_\" data-linktype=\"relative-path\">GetChars(Byte*,Int32,Char*,Int32)</a> allows some fast techniques, particularly with multiple calls to large buffers. Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.  </p>\n</li>\n<li><p>If your app must convert a large amount of data, it should reuse the output buffer. In this case, the [GetChars(Byte[], Int32, Int32, Char&lt;xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29&gt; version that supports output character buffers is the best choice.  </p>\n</li>\n<li><p>Consider using the <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_Convert_\" data-linktype=\"relative-path\">Convert</a> method instead of <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a>. The conversion method converts as much data as possible and throws an exception if the output buffer is too small. For continuous decoding of a stream, this method is often the best choice.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example encodes a string into an array of bytes, and then decodes a range of the bytes into an array of characters.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Text.Encoding.GetCharsIC#1\">using namespace System;\nusing namespace System::Text;\nvoid PrintCountsAndChars( array&lt;Byte&gt;^bytes, int index, int count, Encoding^ enc );\nint main()\n{\n   \n   // Create two instances of UTF32Encoding: one with little-endian byte order and one with big-endian byte order.\n   Encoding^ u32LE = Encoding::GetEncoding( &quot;utf-32&quot; );\n   Encoding^ u32BE = Encoding::GetEncoding( &quot;utf-32BE&quot; );\n   \n   // Use a string containing the following characters:\n   //    Latin Small Letter Z (U+007A)\n   //    Latin Small Letter A (U+0061)\n   //    Combining Breve (U+0306)\n   //    Latin Small Letter AE With Acute (U+01FD)\n   //    Greek Small Letter Beta (U+03B2)\n   String^ myStr = &quot;za\\u0306\\u01FD\\u03B2&quot;;\n   \n   // Encode the string using the big-endian byte order.\n   array&lt;Byte&gt;^barrBE = gcnew array&lt;Byte&gt;(u32BE-&gt;GetByteCount( myStr ));\n   u32BE-&gt;GetBytes( myStr, 0, myStr-&gt;Length, barrBE, 0 );\n   \n   // Encode the string using the little-endian byte order.\n   array&lt;Byte&gt;^barrLE = gcnew array&lt;Byte&gt;(u32LE-&gt;GetByteCount( myStr ));\n   u32LE-&gt;GetBytes( myStr, 0, myStr-&gt;Length, barrLE, 0 );\n   \n   // Get the char counts, decode eight bytes starting at index 0,\n   // and print out the counts and the resulting bytes.\n   Console::Write( &quot;BE array with BE encoding : &quot; );\n   PrintCountsAndChars( barrBE, 0, 8, u32BE );\n   Console::Write( &quot;LE array with LE encoding : &quot; );\n   PrintCountsAndChars( barrLE, 0, 8, u32LE );\n}\n\nvoid PrintCountsAndChars( array&lt;Byte&gt;^bytes, int index, int count, Encoding^ enc )\n{\n   \n   // Display the name of the encoding used.\n   Console::Write( &quot;{0,-25} :&quot;, enc );\n   \n   // Display the exact character count.\n   int iCC = enc-&gt;GetCharCount( bytes, index, count );\n   Console::Write( &quot; {0,-3}&quot;, iCC );\n   \n   // Display the maximum character count.\n   int iMCC = enc-&gt;GetMaxCharCount( count );\n   Console::Write( &quot; {0,-3} :&quot;, iMCC );\n   \n   // Decode the bytes and display the characters.\n   array&lt;Char&gt;^chars = enc-&gt;GetChars( bytes, index, count );\n   \n   // The following is an alternative way to decode the bytes:\n   // Char[] chars = new Char[iCC];\n   // enc-&gt;GetChars( bytes, index, count, chars, 0 );\n   Console::WriteLine( chars );\n}\n\n/* \nThis code produces the following output.  The question marks take the place of characters that cannot be displayed at the console.\n\nBE array with BE encoding : System.Text.UTF32Encoding : 2   6   :za\nLE array with LE encoding : System.Text.UTF32Encoding : 2   6   :za\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.Encoding.GetCharsIC#1\">Imports System\nImports System.Text\nImports Microsoft.VisualBasic\n\nPublic Class SamplesEncoding   \n\n   Public Shared Sub Main()\n\n      &#39; Create two instances of UTF32Encoding: one with little-endian byte order and one with big-endian byte order.\n      Dim u32LE As Encoding = Encoding.GetEncoding(&quot;utf-32&quot;)\n      Dim u32BE As Encoding = Encoding.GetEncoding(&quot;utf-32BE&quot;)\n\n      &#39; Use a string containing the following characters:\n      &#39;    Latin Small Letter Z (U+007A)\n      &#39;    Latin Small Letter A (U+0061)\n      &#39;    Combining Breve (U+0306)\n      &#39;    Latin Small Letter AE With Acute (U+01FD)\n      &#39;    Greek Small Letter Beta (U+03B2)\n      Dim myStr As String = &quot;za&quot; &amp; ChrW(&amp;H0306) &amp; ChrW(&amp;H01FD) &amp; ChrW(&amp;H03B2)\n\n      &#39; Encode the string using the big-endian byte order.\n      &#39; NOTE: In VB.NET, arrays contain one extra element by default.\n      &#39;       The following line creates barrBE with the exact number of elements required.\n      Dim barrBE(u32BE.GetByteCount(myStr) - 1) As Byte\n      u32BE.GetBytes(myStr, 0, myStr.Length, barrBE, 0)\n\n      &#39; Encode the string using the little-endian byte order.\n      &#39; NOTE: In VB.NET, arrays contain one extra element by default.\n      &#39;       The following line creates barrLE with the exact number of elements required.\n      Dim barrLE(u32LE.GetByteCount(myStr) - 1) As Byte\n      u32LE.GetBytes(myStr, 0, myStr.Length, barrLE, 0)\n\n      &#39; Get the char counts, decode eight bytes starting at index 0,\n      &#39; and print out the counts and the resulting bytes.\n      Console.Write(&quot;BE array with BE encoding : &quot;)\n      PrintCountsAndChars(barrBE, 0, 8, u32BE)\n      Console.Write(&quot;LE array with LE encoding : &quot;)\n      PrintCountsAndChars(barrLE, 0, 8, u32LE)\n\n   End Sub &#39;Main\n\n\n   Public Shared Sub PrintCountsAndChars(bytes() As Byte, index As Integer, count As Integer, enc As Encoding)\n\n      &#39; Display the name of the encoding used.\n      Console.Write(&quot;{0,-25} :&quot;, enc.ToString())\n\n      &#39; Display the exact character count.\n      Dim iCC As Integer = enc.GetCharCount(bytes, index, count)\n      Console.Write(&quot; {0,-3}&quot;, iCC)\n\n      &#39; Display the maximum character count.\n      Dim iMCC As Integer = enc.GetMaxCharCount(count)\n      Console.Write(&quot; {0,-3} :&quot;, iMCC)\n\n      &#39; Decode the bytes.\n      Dim chars As Char() = enc.GetChars(bytes, index, count)\n\n      &#39; The following is an alternative way to decode the bytes:\n      &#39; NOTE: In VB.NET, arrays contain one extra element by default.\n      &#39;       The following line creates the array with the exact number of elements required.\n      &#39; Dim chars(iCC - 1) As Char\n      &#39; enc.GetChars( bytes, index, count, chars, 0 )\n\n      &#39; Display the characters.\n      Console.WriteLine(chars)\n\n   End Sub &#39;PrintCountsAndChars \n\nEnd Class &#39;SamplesEncoding\n\n\n&#39;This code produces the following output.  The question marks take the place of characters that cannot be displayed at the console.\n&#39;\n&#39;BE array with BE encoding : System.Text.UTF32Encoding : 2   6   :za\n&#39;LE array with LE encoding : System.Text.UTF32Encoding : 2   6   :za\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.Encoding.GetCharsIC#1\">using System;\nusing System.Text;\n\npublic class SamplesEncoding  {\n\n   public static void Main()  {\n\n      // Create two instances of UTF32Encoding: one with little-endian byte order and one with big-endian byte order.\n      Encoding u32LE = Encoding.GetEncoding( &quot;utf-32&quot; );\n      Encoding u32BE = Encoding.GetEncoding( &quot;utf-32BE&quot; );\n\n      // Use a string containing the following characters:\n      //    Latin Small Letter Z (U+007A)\n      //    Latin Small Letter A (U+0061)\n      //    Combining Breve (U+0306)\n      //    Latin Small Letter AE With Acute (U+01FD)\n      //    Greek Small Letter Beta (U+03B2)\n      String myStr = &quot;za\\u0306\\u01FD\\u03B2&quot;;\n\n      // Encode the string using the big-endian byte order.\n      byte[] barrBE = new byte[u32BE.GetByteCount( myStr )];\n      u32BE.GetBytes( myStr, 0, myStr.Length, barrBE, 0 );\n\n      // Encode the string using the little-endian byte order.\n      byte[] barrLE = new byte[u32LE.GetByteCount( myStr )];\n      u32LE.GetBytes( myStr, 0, myStr.Length, barrLE, 0 );\n\n      // Get the char counts, decode eight bytes starting at index 0,\n      // and print out the counts and the resulting bytes.\n      Console.Write( &quot;BE array with BE encoding : &quot; );\n      PrintCountsAndChars( barrBE, 0, 8, u32BE );\n      Console.Write( &quot;LE array with LE encoding : &quot; );\n      PrintCountsAndChars( barrLE, 0, 8, u32LE );\n\n   }\n\n\n   public static void PrintCountsAndChars( byte[] bytes, int index, int count, Encoding enc )  {\n\n      // Display the name of the encoding used.\n      Console.Write( &quot;{0,-25} :&quot;, enc.ToString() );\n\n      // Display the exact character count.\n      int iCC  = enc.GetCharCount( bytes, index, count );\n      Console.Write( &quot; {0,-3}&quot;, iCC );\n\n      // Display the maximum character count.\n      int iMCC = enc.GetMaxCharCount( count );\n      Console.Write( &quot; {0,-3} :&quot;, iMCC );\n\n      // Decode the bytes and display the characters.\n      char[] chars = enc.GetChars( bytes, index, count );\n\n      // The following is an alternative way to decode the bytes:\n      // char[] chars = new char[iCC];\n      // enc.GetChars( bytes, index, count, chars, 0 );\n\n      Console.WriteLine( chars );\n\n   }\n\n}\n\n\n/* \nThis code produces the following output.  The question marks take the place of characters that cannot be displayed at the console.\n\nBE array with BE encoding : System.Text.UTF32Encoding : 2   6   :za\nLE array with LE encoding : System.Text.UTF32Encoding : 2   6   :za\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_GetChars_System_Byte__System_Int32_System_Char__System_Int32_\">\r\n    \r\n            <a id=\"System_Text_Encoding_GetChars_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetChars(Byte*,Int32,Char*,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int GetChars (byte* bytes, int byteCount, char* chars, int charCount);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>*</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to the first byte to decode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>byteCount</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes to decode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>chars</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>*</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to the location at which to start writing the resulting set of characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>charCount</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of characters to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The actual number of characters written at the location indicated by the <code>chars</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>bytes</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>chars</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>byteCount</code> or <code>charCount</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>charCount</code> is less than the resulting number of characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoderfallbackexception\" data-linktype=\"relative-path\">DecoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for complete explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.DecoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.decoderexceptionfallback\" data-linktype=\"relative-path\">DecoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To calculate the exact array size that <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a> requires to store the resulting characters, you should use the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a> method. To calculate the maximum array size, use the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetMaxCharCount_\" data-linktype=\"relative-path\">GetMaxCharCount</a> method. The <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a> method generally allows allocation of less memory, while the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetMaxCharCount_\" data-linktype=\"relative-path\">GetMaxCharCount</a> method generally executes faster.  </p>\n<p> GetChars gets characters from an input byte sequence. GetChars is different than <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_GetChars_\" data-linktype=\"relative-path\">GetChars</a> because <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> expects discrete conversions, while <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> is designed for multiple passes on a single input stream.  </p>\n<p> If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> or the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> object provided by the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetDecoder_\" data-linktype=\"relative-path\">GetDecoder</a> or the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncoder_\" data-linktype=\"relative-path\">GetEncoder</a> method, respectively, of a derived class.  </p>\n<p> <strong>Note</strong> This method is intended to operate on Unicode characters, not on arbitrary binary data, such as byte arrays. If you need to encode arbitrary binary data into text, you should use a protocol such as uuencode, which is implemented by methods such as <a class=\"xref\" href=\"system.convert#System_Convert_ToBase64CharArray_\" data-linktype=\"relative-path\">ToBase64CharArray</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a> method determines how many characters result in decoding a sequence of bytes, and the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a> method performs the actual decoding. The <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a> method expects discrete conversions, in contrast to the <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_GetChars_\" data-linktype=\"relative-path\">GetChars</a> method, which handles multiple passes on a single input stream.  </p>\n<p> Several versions of <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a> and <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a> are supported. The following are some programming considerations for use of these methods:  </p>\n<ul>\n<li><p>Your app might need to decode multiple input bytes from a code page and process the bytes using multiple calls. In this case, you probably need to maintain state between calls, because byte sequences can be interrupted when processed in batches. (For example, part of an ISO-2022 shift sequence may end one GetChars call and continue at the beginning of the next GetChars call. GetChars will call the fallback for those incomplete sequences, but <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> will remember those sequences for the next call.)  </p>\n</li>\n<li><p>If your app handles string outputs, the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetString_\" data-linktype=\"relative-path\">GetString</a> method is recommended. Since this method must check string length and allocate a buffer, it is slightly slower, but the resulting <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> type is to be preferred.  </p>\n</li>\n<li><p>The byte version of GetChars allows some fast techniques, particularly with multiple calls to large buffers. Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.  </p>\n</li>\n<li><p>If your app must convert a large amount of data, it should reuse the output buffer. In this case, the [GetChars(Byte[], Int32, Int32, Char&lt;xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29&gt; version that supports output character buffers is the best choice.  </p>\n</li>\n<li><p>Consider using the <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_Convert_\" data-linktype=\"relative-path\">Convert</a> method instead of <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a>. The conversion method converts as much data as possible and throws an exception if the output buffer is too small. For continuous decoding of a stream, this method is often the best choice.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_GetChars_System_Byte___System_Int32_System_Int32_System_Char___System_Int32_\">\r\n    \r\n            <a id=\"System_Text_Encoding_GetChars_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetChars(Byte[],Int32,Int32,Char[],Int32)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, decodes a sequence of bytes from the specified byte array into the specified character array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The byte array containing the sequence of bytes to decode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>byteIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the first byte to decode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>byteCount</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes to decode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>chars</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character array to contain the resulting set of characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>charIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index at which to start writing the resulting set of characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The actual number of characters written into <code>chars</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>bytes</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>chars</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>byteIndex</code> or <code>byteCount</code> or <code>charIndex</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>byteindex</code> and <code>byteCount</code> do not denote a valid range in <code>bytes</code>.  </p>\n<p> -or-  </p>\n<p> <code>charIndex</code> is not a valid index in <code>chars</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>chars</code> does not have enough capacity from <code>charIndex</code> to the end of the array to accommodate the resulting characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoderfallbackexception\" data-linktype=\"relative-path\">DecoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for complete explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.DecoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.decoderexceptionfallback\" data-linktype=\"relative-path\">DecoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To calculate the exact array size required by <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a> to store the resulting characters, you should use the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a> method. To calculate the maximum array size, use the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetMaxCharCount_\" data-linktype=\"relative-path\">GetMaxCharCount</a> method. The <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a> method generally allows allocation of less memory, while the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetMaxCharCount_\" data-linktype=\"relative-path\">GetMaxCharCount</a> method generally executes faster.  </p>\n<p> GetChars gets characters from an input byte sequence. GetChars is different than <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_GetChars_\" data-linktype=\"relative-path\">GetChars</a> because <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> expects discrete conversions, while <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> is designed for multiple passes on a single input stream.  </p>\n<p> If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> or the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> provided by the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetDecoder_\" data-linktype=\"relative-path\">GetDecoder</a> method or the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncoder_\" data-linktype=\"relative-path\">GetEncoder</a> method, respectively, of a derived class.  </p>\n<p> <strong>Note</strong> This method is intended to operate on Unicode characters, not on arbitrary binary data, such as byte arrays. If you need to encode arbitrary binary data into text, you should use a protocol such as uuencode, which is implemented by methods such as <a class=\"xref\" href=\"system.convert#System_Convert_ToBase64CharArray_\" data-linktype=\"relative-path\">ToBase64CharArray</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a> method determines how many characters result in decoding a sequence of bytes, and the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a> method performs the actual decoding. The <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a> method expects discrete conversions, in contrast to the <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_GetChars_\" data-linktype=\"relative-path\">GetChars</a> method, which handles multiple passes on a single input stream.  </p>\n<p> Several versions of <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a> and <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a> are supported. The following are some programming considerations for use of these methods:  </p>\n<ul>\n<li><p>Your app might need to decode multiple input bytes from a code page and process the bytes using multiple calls. In this case, you probably need to maintain state between calls, because byte sequences can be interrupted when processed in batches. (For example, part of an ISO-2022 shift sequence may end one GetChars call and continue at the beginning of the next GetChars call. GetChars will call the fallback for those incomplete sequences, but <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> will remember those sequences for the next call.)  </p>\n</li>\n<li><p>If your app handles string outputs, the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetString_\" data-linktype=\"relative-path\">GetString</a> method is recommended. Since this method must check string length and allocate a buffer, it is slightly slower, but the resulting <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> type is to be preferred.  </p>\n</li>\n<li><p>The byte version of <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetChars_System_Byte__System_Int32_System_Char__System_Int32_\" data-linktype=\"relative-path\">GetChars(Byte*,Int32,Char*,Int32)</a> allows some fast techniques, particularly with multiple calls to large buffers. Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.  </p>\n</li>\n<li><p>If your app must convert a large amount of data, it should reuse the output buffer. In this case, the GetChars version that supports output character buffers is the best choice.  </p>\n</li>\n<li><p>Consider using the <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_Convert_\" data-linktype=\"relative-path\">Convert</a> method instead of <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a>. The conversion method converts as much data as possible and throws an exception if the output buffer is too small. For continuous decoding of a stream, this method is often the best choice.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts a string from one encoding to another.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Text.Encoding.Convert Example#1\">using namespace System;\nusing namespace System::Text;\n\nint main()\n{\n   String^ unicodeString = &quot;This string contains the unicode character Pi (\\u03a0)&quot;;\n   \n   // Create two different encodings.\n   Encoding^ ascii = Encoding::ASCII;\n   Encoding^ unicode = Encoding::Unicode;\n   \n   // Convert the string into a byte array.\n   array&lt;Byte&gt;^unicodeBytes = unicode-&gt;GetBytes( unicodeString );\n   \n   // Perform the conversion from one encoding to the other.\n   array&lt;Byte&gt;^asciiBytes = Encoding::Convert( unicode, ascii, unicodeBytes );\n   \n   // Convert the new Byte into[] a char and[] then into a string.\n   array&lt;Char&gt;^asciiChars = gcnew array&lt;Char&gt;(ascii-&gt;GetCharCount( asciiBytes, 0, asciiBytes-&gt;Length ));\n   ascii-&gt;GetChars( asciiBytes, 0, asciiBytes-&gt;Length, asciiChars, 0 );\n   String^ asciiString = gcnew String( asciiChars );\n   \n   // Display the strings created before and after the conversion.\n   Console::WriteLine( &quot;Original String*: {0}&quot;, unicodeString );\n   Console::WriteLine( &quot;Ascii converted String*: {0}&quot;, asciiString );\n}\n// The example displays the following output:\n//    Original string: This string contains the unicode character Pi (Π)\n//    Ascii converted string: This string contains the unicode character Pi (?)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.Encoding.Convert Example#1\">using System;\nusing System.Text;\n\nclass Example\n{\n   static void Main()\n   {\n      string unicodeString = &quot;This string contains the unicode character Pi (\\u03a0)&quot;;\n\n      // Create two different encodings.\n      Encoding ascii = Encoding.ASCII;\n      Encoding unicode = Encoding.Unicode;\n\n      // Convert the string into a byte array.\n      byte[] unicodeBytes = unicode.GetBytes(unicodeString);\n\n      // Perform the conversion from one encoding to the other.\n      byte[] asciiBytes = Encoding.Convert(unicode, ascii, unicodeBytes);\n         \n      // Convert the new byte[] into a char[] and then into a string.\n      char[] asciiChars = new char[ascii.GetCharCount(asciiBytes, 0, asciiBytes.Length)];\n      ascii.GetChars(asciiBytes, 0, asciiBytes.Length, asciiChars, 0);\n      string asciiString = new string(asciiChars);\n\n      // Display the strings created before and after the conversion.\n      Console.WriteLine(&quot;Original string: {0}&quot;, unicodeString);\n      Console.WriteLine(&quot;Ascii converted string: {0}&quot;, asciiString);\n   }\n}\n// The example displays the following output:\n//    Original string: This string contains the unicode character Pi (Π)\n//    Ascii converted string: This string contains the unicode character Pi (?)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.Encoding.Convert Example#1\">Imports System.Text\n\nClass Example\n   Shared Sub Main()\n      Dim unicodeString As String = &quot;This string contains the unicode character Pi (&quot; &amp; ChrW(&amp;H03A0) &amp; &quot;)&quot;\n\n      &#39; Create two different encodings.\n      Dim ascii As Encoding = Encoding.ASCII\n      Dim unicode As Encoding = Encoding.Unicode\n\n      &#39; Convert the string into a byte array.\n      Dim unicodeBytes As Byte() = unicode.GetBytes(unicodeString)\n\n      &#39; Perform the conversion from one encoding to the other.\n      Dim asciiBytes As Byte() = Encoding.Convert(unicode, ascii, unicodeBytes)\n\n      &#39; Convert the new byte array into a char array and then into a string.\n      Dim asciiChars(ascii.GetCharCount(asciiBytes, 0, asciiBytes.Length)-1) As Char\n      ascii.GetChars(asciiBytes, 0, asciiBytes.Length, asciiChars, 0)\n      Dim asciiString As New String(asciiChars)\n\n      &#39; Display the strings created before and after the conversion.\n      Console.WriteLine(&quot;Original string: {0}&quot;, unicodeString)\n      Console.WriteLine(&quot;Ascii converted string: {0}&quot;, asciiString)\n   End Sub\nEnd Class\n&#39; The example displays the following output:\n&#39;    Original string: This string contains the unicode character Pi (Π)\n&#39;    Ascii converted string: This string contains the unicode character Pi (?)\n</code></pre><p> The following example encodes a string into an array of bytes, and then decodes a range of the bytes into an array of characters.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Text.Encoding.GetCharsIC#1\">using namespace System;\nusing namespace System::Text;\nvoid PrintCountsAndChars( array&lt;Byte&gt;^bytes, int index, int count, Encoding^ enc );\nint main()\n{\n   \n   // Create two instances of UTF32Encoding: one with little-endian byte order and one with big-endian byte order.\n   Encoding^ u32LE = Encoding::GetEncoding( &quot;utf-32&quot; );\n   Encoding^ u32BE = Encoding::GetEncoding( &quot;utf-32BE&quot; );\n   \n   // Use a string containing the following characters:\n   //    Latin Small Letter Z (U+007A)\n   //    Latin Small Letter A (U+0061)\n   //    Combining Breve (U+0306)\n   //    Latin Small Letter AE With Acute (U+01FD)\n   //    Greek Small Letter Beta (U+03B2)\n   String^ myStr = &quot;za\\u0306\\u01FD\\u03B2&quot;;\n   \n   // Encode the string using the big-endian byte order.\n   array&lt;Byte&gt;^barrBE = gcnew array&lt;Byte&gt;(u32BE-&gt;GetByteCount( myStr ));\n   u32BE-&gt;GetBytes( myStr, 0, myStr-&gt;Length, barrBE, 0 );\n   \n   // Encode the string using the little-endian byte order.\n   array&lt;Byte&gt;^barrLE = gcnew array&lt;Byte&gt;(u32LE-&gt;GetByteCount( myStr ));\n   u32LE-&gt;GetBytes( myStr, 0, myStr-&gt;Length, barrLE, 0 );\n   \n   // Get the char counts, decode eight bytes starting at index 0,\n   // and print out the counts and the resulting bytes.\n   Console::Write( &quot;BE array with BE encoding : &quot; );\n   PrintCountsAndChars( barrBE, 0, 8, u32BE );\n   Console::Write( &quot;LE array with LE encoding : &quot; );\n   PrintCountsAndChars( barrLE, 0, 8, u32LE );\n}\n\nvoid PrintCountsAndChars( array&lt;Byte&gt;^bytes, int index, int count, Encoding^ enc )\n{\n   \n   // Display the name of the encoding used.\n   Console::Write( &quot;{0,-25} :&quot;, enc );\n   \n   // Display the exact character count.\n   int iCC = enc-&gt;GetCharCount( bytes, index, count );\n   Console::Write( &quot; {0,-3}&quot;, iCC );\n   \n   // Display the maximum character count.\n   int iMCC = enc-&gt;GetMaxCharCount( count );\n   Console::Write( &quot; {0,-3} :&quot;, iMCC );\n   \n   // Decode the bytes and display the characters.\n   array&lt;Char&gt;^chars = enc-&gt;GetChars( bytes, index, count );\n   \n   // The following is an alternative way to decode the bytes:\n   // Char[] chars = new Char[iCC];\n   // enc-&gt;GetChars( bytes, index, count, chars, 0 );\n   Console::WriteLine( chars );\n}\n\n/* \nThis code produces the following output.  The question marks take the place of characters that cannot be displayed at the console.\n\nBE array with BE encoding : System.Text.UTF32Encoding : 2   6   :za\nLE array with LE encoding : System.Text.UTF32Encoding : 2   6   :za\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.Encoding.GetCharsIC#1\">Imports System\nImports System.Text\nImports Microsoft.VisualBasic\n\nPublic Class SamplesEncoding   \n\n   Public Shared Sub Main()\n\n      &#39; Create two instances of UTF32Encoding: one with little-endian byte order and one with big-endian byte order.\n      Dim u32LE As Encoding = Encoding.GetEncoding(&quot;utf-32&quot;)\n      Dim u32BE As Encoding = Encoding.GetEncoding(&quot;utf-32BE&quot;)\n\n      &#39; Use a string containing the following characters:\n      &#39;    Latin Small Letter Z (U+007A)\n      &#39;    Latin Small Letter A (U+0061)\n      &#39;    Combining Breve (U+0306)\n      &#39;    Latin Small Letter AE With Acute (U+01FD)\n      &#39;    Greek Small Letter Beta (U+03B2)\n      Dim myStr As String = &quot;za&quot; &amp; ChrW(&amp;H0306) &amp; ChrW(&amp;H01FD) &amp; ChrW(&amp;H03B2)\n\n      &#39; Encode the string using the big-endian byte order.\n      &#39; NOTE: In VB.NET, arrays contain one extra element by default.\n      &#39;       The following line creates barrBE with the exact number of elements required.\n      Dim barrBE(u32BE.GetByteCount(myStr) - 1) As Byte\n      u32BE.GetBytes(myStr, 0, myStr.Length, barrBE, 0)\n\n      &#39; Encode the string using the little-endian byte order.\n      &#39; NOTE: In VB.NET, arrays contain one extra element by default.\n      &#39;       The following line creates barrLE with the exact number of elements required.\n      Dim barrLE(u32LE.GetByteCount(myStr) - 1) As Byte\n      u32LE.GetBytes(myStr, 0, myStr.Length, barrLE, 0)\n\n      &#39; Get the char counts, decode eight bytes starting at index 0,\n      &#39; and print out the counts and the resulting bytes.\n      Console.Write(&quot;BE array with BE encoding : &quot;)\n      PrintCountsAndChars(barrBE, 0, 8, u32BE)\n      Console.Write(&quot;LE array with LE encoding : &quot;)\n      PrintCountsAndChars(barrLE, 0, 8, u32LE)\n\n   End Sub &#39;Main\n\n\n   Public Shared Sub PrintCountsAndChars(bytes() As Byte, index As Integer, count As Integer, enc As Encoding)\n\n      &#39; Display the name of the encoding used.\n      Console.Write(&quot;{0,-25} :&quot;, enc.ToString())\n\n      &#39; Display the exact character count.\n      Dim iCC As Integer = enc.GetCharCount(bytes, index, count)\n      Console.Write(&quot; {0,-3}&quot;, iCC)\n\n      &#39; Display the maximum character count.\n      Dim iMCC As Integer = enc.GetMaxCharCount(count)\n      Console.Write(&quot; {0,-3} :&quot;, iMCC)\n\n      &#39; Decode the bytes.\n      Dim chars As Char() = enc.GetChars(bytes, index, count)\n\n      &#39; The following is an alternative way to decode the bytes:\n      &#39; NOTE: In VB.NET, arrays contain one extra element by default.\n      &#39;       The following line creates the array with the exact number of elements required.\n      &#39; Dim chars(iCC - 1) As Char\n      &#39; enc.GetChars( bytes, index, count, chars, 0 )\n\n      &#39; Display the characters.\n      Console.WriteLine(chars)\n\n   End Sub &#39;PrintCountsAndChars \n\nEnd Class &#39;SamplesEncoding\n\n\n&#39;This code produces the following output.  The question marks take the place of characters that cannot be displayed at the console.\n&#39;\n&#39;BE array with BE encoding : System.Text.UTF32Encoding : 2   6   :za\n&#39;LE array with LE encoding : System.Text.UTF32Encoding : 2   6   :za\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.Encoding.GetCharsIC#1\">using System;\nusing System.Text;\n\npublic class SamplesEncoding  {\n\n   public static void Main()  {\n\n      // Create two instances of UTF32Encoding: one with little-endian byte order and one with big-endian byte order.\n      Encoding u32LE = Encoding.GetEncoding( &quot;utf-32&quot; );\n      Encoding u32BE = Encoding.GetEncoding( &quot;utf-32BE&quot; );\n\n      // Use a string containing the following characters:\n      //    Latin Small Letter Z (U+007A)\n      //    Latin Small Letter A (U+0061)\n      //    Combining Breve (U+0306)\n      //    Latin Small Letter AE With Acute (U+01FD)\n      //    Greek Small Letter Beta (U+03B2)\n      String myStr = &quot;za\\u0306\\u01FD\\u03B2&quot;;\n\n      // Encode the string using the big-endian byte order.\n      byte[] barrBE = new byte[u32BE.GetByteCount( myStr )];\n      u32BE.GetBytes( myStr, 0, myStr.Length, barrBE, 0 );\n\n      // Encode the string using the little-endian byte order.\n      byte[] barrLE = new byte[u32LE.GetByteCount( myStr )];\n      u32LE.GetBytes( myStr, 0, myStr.Length, barrLE, 0 );\n\n      // Get the char counts, decode eight bytes starting at index 0,\n      // and print out the counts and the resulting bytes.\n      Console.Write( &quot;BE array with BE encoding : &quot; );\n      PrintCountsAndChars( barrBE, 0, 8, u32BE );\n      Console.Write( &quot;LE array with LE encoding : &quot; );\n      PrintCountsAndChars( barrLE, 0, 8, u32LE );\n\n   }\n\n\n   public static void PrintCountsAndChars( byte[] bytes, int index, int count, Encoding enc )  {\n\n      // Display the name of the encoding used.\n      Console.Write( &quot;{0,-25} :&quot;, enc.ToString() );\n\n      // Display the exact character count.\n      int iCC  = enc.GetCharCount( bytes, index, count );\n      Console.Write( &quot; {0,-3}&quot;, iCC );\n\n      // Display the maximum character count.\n      int iMCC = enc.GetMaxCharCount( count );\n      Console.Write( &quot; {0,-3} :&quot;, iMCC );\n\n      // Decode the bytes and display the characters.\n      char[] chars = enc.GetChars( bytes, index, count );\n\n      // The following is an alternative way to decode the bytes:\n      // char[] chars = new char[iCC];\n      // enc.GetChars( bytes, index, count, chars, 0 );\n\n      Console.WriteLine( chars );\n\n   }\n\n}\n\n\n/* \nThis code produces the following output.  The question marks take the place of characters that cannot be displayed at the console.\n\nBE array with BE encoding : System.Text.UTF32Encoding : 2   6   :za\nLE array with LE encoding : System.Text.UTF32Encoding : 2   6   :za\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_GetDecoder\">\r\n    \r\n            <a id=\"System_Text_Encoding_GetDecoder_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDecoder()</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, obtains a decoder that converts an encoded sequence of bytes into a sequence of characters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Text.Decoder GetDecoder ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> that converts an encoded sequence of bytes into a sequence of characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_GetChars_\" data-linktype=\"relative-path\">GetChars</a> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a> method of this class. However, a <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> maintains state information between calls so it correctly decodes byte sequences that span blocks. The <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation. Therefore, GetDecoder and <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncoder_\" data-linktype=\"relative-path\">GetEncoder</a> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_GetEncoder\">\r\n    \r\n            <a id=\"System_Text_Encoding_GetEncoder_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEncoder()</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, obtains an encoder that converts a sequence of Unicode characters into an encoded sequence of bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Text.Encoder GetEncoder ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> that converts a sequence of Unicode characters into an encoded sequence of bytes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.text.encoder#System_Text_Encoder_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method converts sequential blocks of characters into sequential blocks of bytes, in a manner similar to the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method of this class. However, a <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> maintains state information between calls so it correctly encodes character sequences that span blocks. The <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation. For example, a data block might end with an unmatched high surrogate, and the matching low surrogate might be in the next data block. Therefore, <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetDecoder_\" data-linktype=\"relative-path\">GetDecoder</a> and GetEncoder are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_GetEncoding_System_Int32_\">\r\n    \r\n            <a id=\"System_Text_Encoding_GetEncoding_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEncoding(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the encoding associated with the specified code page identifier.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Text.Encoding GetEncoding (int codepage);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>codepage</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The code page identifier of the preferred encoding. Possible values are listed in the Code Page column of the table that appears in the <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> class topic.  </p>\n<p> -or-  </p>\n<p> 0 (zero), to use the default encoding.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a></div>\r\n                  </div>\r\n                  <p>The encoding that is associated with the specified code page.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>codepage</code> is less than zero or greater than 65535.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>codepage</code> is not supported by the underlying platform.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>codepage</code> is not supported by the underlying platform.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The fallback handler depends on the encoding type of <code>codepage</code>. If <code>codepage</code> is a code page or double-byte character set (DBCS) encoding, a best-fit fallback handler is used. Otherwise, a replacement fallback handler is used. These fallback handlers may not be appropriate for your app. To specify the fallback handler used by the encoding specified by <code>codepage</code>, you can call the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncoding_System_Int32_System_Text_EncoderFallback_System_Text_DecoderFallback_\" data-linktype=\"relative-path\">GetEncoding(Int32,EncoderFallback,DecoderFallback)</a> overload.  </p>\n<p> The GetEncoding method relies on the underlying platform to support most code pages. However, the .NET Framework natively supports some encodings. For a list of code pages, see the <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> class topic. Alternatively, you can call the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncodings_\" data-linktype=\"relative-path\">GetEncodings</a> method to get an array of <a class=\"xref\" href=\"system.text.encodinginfo\" data-linktype=\"relative-path\">EncodingInfo</a> objects that contains information about all encodings.  </p>\n<p> In addition to the encodings that are intrinsically supported on a specific platform version of the .NET Framework, the GetEncoding method returns any additional encodings that are made available by registering an <a class=\"xref\" href=\"system.text.encodingprovider\" data-linktype=\"relative-path\">EncodingProvider</a> object.  </p>\n<p> To get the encoding associated with the default ANSI code page in the operating system&#39;s regional and language settings, you can either supply a value 0 for the <code>codepage</code> argument or, on the full .NET Framework on the Windows desktop, retrieve the value of the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_Default_\" data-linktype=\"relative-path\">Default</a> property. To determine the default code pages used on the system, use the Windows <a href=\"http://msdn.microsoft.com/library/windows/desktop/dd318120.aspx\" data-linktype=\"external\">GetSystemDefaultLangID</a> function. To determine the current ANSI code page, call the Windows <a href=\"http://msdn.microsoft.com/library/windows/desktop/dd318070.aspx\" data-linktype=\"external\">GetACP</a> function from the full .NET Framework on the Windows desktop.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Some unsupported code pages cause the exception <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a> to be thrown, whereas others cause <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a>. Therefore, your code must catch all exceptions indicated in the Exceptions section.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> The ANSI code pages can be different on different computers, or can be changed for a single computer, leading to data corruption. For this reason, encoding and decoding data using the default code page returned by <code>Encoding.GetEncoding(0)</code> is not recommended. For the most consistent results, you should use Unicode, such as UTF-8 (code page 65001) or UTF-16, instead of a specific code page.  </p>\n</div>\n<p> GetEncoding returns a cached instance with default settings. You should use the constructors of derived classes to get an instance with different settings. For example, the <a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a> class provides a constructor that lets you enable error detection.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example gets two instances of the same encoding (one by code page and another by name), and checks their equality.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.Encoding.Equals#1\">using System;\nusing System.Text;\n\npublic class SamplesEncoding  {\n\n   public static void Main()  {\n\n      // Get a UTF-32 encoding by codepage.\n      Encoding e1 = Encoding.GetEncoding( 12000 );\n\n      // Get a UTF-32 encoding by name.\n      Encoding e2 = Encoding.GetEncoding( &quot;utf-32&quot; );\n\n      // Check their equality.\n      Console.WriteLine( &quot;e1 equals e2? {0}&quot;, e1.Equals( e2 ) );\n\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\ne1 equals e2? True\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.Encoding.Equals#1\">Imports System\nImports System.Text\n\nPublic Class SamplesEncoding   \n\n   Public Shared Sub Main()\n\n      &#39; Get a UTF-32 encoding by codepage.\n      Dim e1 As Encoding = Encoding.GetEncoding(12000)\n\n      &#39; Get a UTF-32 encoding by name.\n      Dim e2 As Encoding = Encoding.GetEncoding(&quot;utf-32&quot;)\n\n      &#39; Check their equality.\n      Console.WriteLine(&quot;e1 equals e2? {0}&quot;, e1.Equals(e2))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesEncoding\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;e1 equals e2? True\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.Encoding.Equals#1\">using namespace System;\nusing namespace System::Text;\nint main()\n{\n   \n   // Get a UTF-32 encoding by codepage.\n   Encoding^ e1 = Encoding::GetEncoding( 12000 );\n   \n   // Get a UTF-32 encoding by name.\n   Encoding^ e2 = Encoding::GetEncoding( &quot;utf-32&quot; );\n   \n   // Check their equality.\n   Console::WriteLine( &quot;e1 equals e2? {0}&quot;, e1-&gt;Equals( e2 ) );\n}\n\n/* \nThis code produces the following output.\n\ne1 equals e2? True\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_GetEncoding_System_String_\">\r\n    \r\n            <a id=\"System_Text_Encoding_GetEncoding_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEncoding(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the encoding associated with the specified code page name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Text.Encoding GetEncoding (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The code page name of the preferred encoding. Any value returned by the <span class=\"xref\">stem.Text.Encoding.WebName*</span> property is valid. Possible values are listed in the Name column of the table that appears in the <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> class topic.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a></div>\r\n                  </div>\r\n                  <p>The encoding  associated with the specified code page.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is not a valid code page name.  </p>\n<p> -or-  </p>\n<p> The code page indicated by <code>name</code> is not supported by the underlying platform.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The fallback handler depends on the encoding type of <code>name</code>. If <code>name</code> is a code page or double-byte character set (DBCS) encoding, a best-fit fallback handler is used. Otherwise, a replacement fallback handler is used. These fallback handlers may not be appropriate for your app. To specify the fallback handler used by the encoding specified by <code>name</code>, you can call the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncoding_System_String_System_Text_EncoderFallback_System_Text_DecoderFallback_\" data-linktype=\"relative-path\">GetEncoding(String,EncoderFallback,DecoderFallback)</a> overload.  </p>\n<p> The <code>GetEncoding</code> method relies on the underlying platform to support most code pages. However, the .NET Framework natively supports some encodings.  </p>\n<p> In addition to the encodings that are intrinsically supported on a specific platform version of the .NET Framework, the GetEncoding method returns any additional encodings that are made available by registering an <a class=\"xref\" href=\"system.text.encodingprovider\" data-linktype=\"relative-path\">EncodingProvider</a> object.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The ANSI code pages can be different on different computers, or can be changed for a single computer, leading to data corruption. For the most consistent results, you should use Unicode, such as UTF-8 (code page 65001) or UTF-16, instead of a specific code page.  </p>\n</div>\n<p> For a list of code pages, see the <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> class topic. You can call the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncodings_\" data-linktype=\"relative-path\">GetEncodings</a> method in the full .NET Framework on the Windows desktop to get a list of all encodings.  </p>\n<p> <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncoding_\" data-linktype=\"relative-path\">GetEncoding</a> returns a cached instance with default settings. You should use the constructors of derived classes to get an instance with different settings. For example, the <a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a> class provides a constructor that lets you enable error detection.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example gets two instances of the same encoding (one by code page and another by name), and checks their equality.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.Encoding.Equals#1\">using System;\nusing System.Text;\n\npublic class SamplesEncoding  {\n\n   public static void Main()  {\n\n      // Get a UTF-32 encoding by codepage.\n      Encoding e1 = Encoding.GetEncoding( 12000 );\n\n      // Get a UTF-32 encoding by name.\n      Encoding e2 = Encoding.GetEncoding( &quot;utf-32&quot; );\n\n      // Check their equality.\n      Console.WriteLine( &quot;e1 equals e2? {0}&quot;, e1.Equals( e2 ) );\n\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\ne1 equals e2? True\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.Encoding.Equals#1\">Imports System\nImports System.Text\n\nPublic Class SamplesEncoding   \n\n   Public Shared Sub Main()\n\n      &#39; Get a UTF-32 encoding by codepage.\n      Dim e1 As Encoding = Encoding.GetEncoding(12000)\n\n      &#39; Get a UTF-32 encoding by name.\n      Dim e2 As Encoding = Encoding.GetEncoding(&quot;utf-32&quot;)\n\n      &#39; Check their equality.\n      Console.WriteLine(&quot;e1 equals e2? {0}&quot;, e1.Equals(e2))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesEncoding\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;e1 equals e2? True\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.Encoding.Equals#1\">using namespace System;\nusing namespace System::Text;\nint main()\n{\n   \n   // Get a UTF-32 encoding by codepage.\n   Encoding^ e1 = Encoding::GetEncoding( 12000 );\n   \n   // Get a UTF-32 encoding by name.\n   Encoding^ e2 = Encoding::GetEncoding( &quot;utf-32&quot; );\n   \n   // Check their equality.\n   Console::WriteLine( &quot;e1 equals e2? {0}&quot;, e1-&gt;Equals( e2 ) );\n}\n\n/* \nThis code produces the following output.\n\ne1 equals e2? True\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_GetEncoding_System_Int32_System_Text_EncoderFallback_System_Text_DecoderFallback_\">\r\n    \r\n            <a id=\"System_Text_Encoding_GetEncoding_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEncoding(Int32,EncoderFallback,DecoderFallback)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the encoding associated with the specified code page identifier. Parameters specify an error handler for characters that cannot be encoded and byte sequences that cannot be decoded.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Text.Encoding GetEncoding (int codepage, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>codepage</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The code page identifier of the preferred encoding. Possible values are listed in the Code Page column of the table that appears in the <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> class topic.  </p>\n<p> -or-  </p>\n<p> 0 (zero), to use the default encoding.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>encoderFallback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallback\" data-linktype=\"relative-path\">EncoderFallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that provides an error-handling procedure when a character cannot be encoded with the current encoding.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>decoderFallback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoderfallback\" data-linktype=\"relative-path\">DecoderFallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that provides an error-handling procedure when a byte sequence cannot be decoded with the current encoding.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a></div>\r\n                  </div>\r\n                  <p>The encoding that is associated with the specified code page.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>codepage</code> is less than zero or greater than 65535.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>codepage</code> is not supported by the underlying platform.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>codepage</code> is not supported by the underlying platform.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Some unsupported code pages cause the exception <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a> to be thrown, whereas others cause <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a>. Therefore, your code must catch all exceptions indicated in the Exceptions section.  </p>\n</div>\n<p> The <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncoding_\" data-linktype=\"relative-path\">GetEncoding</a> method relies on the underlying platform to support most code pages. However, the .NET Framework natively supports some encodings.  </p>\n<p> In addition to the encodings that are intrinsically supported on a specific platform version of the .NET Framework, the GetEncoding method returns any additional encodings that are made available by registering an <a class=\"xref\" href=\"system.text.encodingprovider\" data-linktype=\"relative-path\">EncodingProvider</a> object.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The ANSI code pages can be different on different computers, or can be changed for a single computer, leading to data corruption. For this reason, encoding and decoding data using the default code page returned by <code>Encoding.GetEncoding(0)</code> is not recommended. For the most consistent results, you should use Unicode, such as UTF-8 (code page 65001) or UTF-16, instead of a specific code page.  </p>\n</div>\n<p> For a list of code pages, see the <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> class topic. You can call the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncodings_\" data-linktype=\"relative-path\">GetEncodings</a> method in the full .NET Framework on the Windows desktop to get a list of all encodings.  </p>\n<p> To get the encoding associated with the default ANSI code page in the operating system&#39;s regional and language settings, you can either supply a value of 0 for the <code>codepage</code> argument or, if your code is running on the full .NET Framework on the Windows desktop, retrieve the value of the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_Default_\" data-linktype=\"relative-path\">Default</a> property. To determine the default code pages used on the system, use the Windows <a href=\"http://msdn.microsoft.com/library/windows/desktop/dd318120.aspx\" data-linktype=\"external\">GetSystemDefaultLangID</a> function. To determine the current ANSI code page, call the Windows <a href=\"http://msdn.microsoft.com/library/windows/desktop/dd318070.aspx\" data-linktype=\"external\">GetACP</a> function from the full .NET Framework on the Windows desktop.  </p>\n<p> <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncoding_\" data-linktype=\"relative-path\">GetEncoding</a> returns a cached instance with default settings. You should use the constructors of derived classes to get an instance with different settings. For example, the <a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a> class provides a constructor that lets you enable error detection.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncoding_System_String_System_Text_EncoderFallback_System_Text_DecoderFallback_\" data-linktype=\"relative-path\">System.Text.Encoding.GetEncoding(String,EncoderFallback,DecoderFallback)</a> method.  </p>\n<pre><code class=\"lang-cs\" name=\"sys.txt.fallbackEncRpl#1\">// This example demonstrates the EncoderReplacementFallback class.\n\nusing System;\nusing System.Text;\n\nclass Sample \n{\n    public static void Main() \n    {\n\n// Create an encoding, which is equivalent to calling the \n// ASCIIEncoding class constructor. \n// The EncoderReplacementFallback parameter specifies that the\n// string, &quot;(unknown)&quot;, replace characters that cannot be encoded. \n// A decoder replacement fallback is also specified, but in this \n// code example the decoding operation cannot fail.  \n\n    Encoding ae = Encoding.GetEncoding(\n                  &quot;us-ascii&quot;,\n                  new EncoderReplacementFallback(&quot;(unknown)&quot;), \n                  new DecoderReplacementFallback(&quot;(error)&quot;));\n\n// The input string consists of the Unicode characters LEFT POINTING \n// DOUBLE ANGLE QUOTATION MARK (U+00AB), &#39;X&#39; (U+0058), and RIGHT POINTING \n// DOUBLE ANGLE QUOTATION MARK (U+00BB). \n// The encoding can only encode characters in the US-ASCII range of U+0000 \n// through U+007F. Consequently, the characters bracketing the &#39;X&#39; character\n// are replaced with the fallback replacement string, &quot;(unknown)&quot;.\n\n    string inputString = &quot;\\u00abX\\u00bb&quot;;\n    string decodedString;\n    string twoNewLines = &quot;<br><br>&quot;;\n    byte[] encodedBytes = new byte[ae.GetByteCount(inputString)];\n    int numberOfEncodedBytes = 0;\n    int ix = 0;\n\n// --------------------------------------------------------------------------\n    Console.Clear();\n\n// Display the name of the encoding.\n    Console.WriteLine(&quot;The name of the encoding is \\&quot;{0}\\&quot;.<br>&quot;, ae.WebName);\n\n// Display the input string in text.\n    Console.WriteLine(&quot;Input string ({0} characters): \\&quot;{1}\\&quot;&quot;, \n                       inputString.Length, inputString);\n\n// Display the input string in hexadecimal.\n    Console.Write(&quot;Input string in hexadecimal: &quot;);\n    foreach (char c in inputString.ToCharArray()) \n        {\n        Console.Write(&quot;0x{0:X2} &quot;, (int)c);\n        }\n    Console.Write(twoNewLines);\n\n// --------------------------------------------------------------------------\n// Encode the input string. \n\n    Console.WriteLine(&quot;Encode the input string...&quot;);\n    numberOfEncodedBytes = ae.GetBytes(inputString, 0, inputString.Length, \n                                       encodedBytes, 0);\n\n// Display the encoded bytes.\n    Console.WriteLine(&quot;Encoded bytes in hexadecimal ({0} bytes):<br>&quot;, \n                       numberOfEncodedBytes);\n    ix = 0;\n    foreach (byte b in encodedBytes)\n        {\n        Console.Write(&quot;0x{0:X2} &quot;, (int)b);\n        ix++;\n        if (0 == ix % 6) Console.WriteLine();\n        }\n    Console.Write(twoNewLines);\n\n// --------------------------------------------------------------------------\n// Decode the encoded bytes, yielding a reconstituted string.\n\n    Console.WriteLine(&quot;Decode the encoded bytes...&quot;);\n    decodedString = ae.GetString(encodedBytes);\n\n// Display the input string and the decoded string for comparison.\n    Console.WriteLine(&quot;Input string:  \\&quot;{0}\\&quot;&quot;, inputString);\n    Console.WriteLine(&quot;Decoded string:\\&quot;{0}\\&quot;&quot;, decodedString);\n    }\n}\n/*\nThis code example produces the following results:\n\nThe name of the encoding is &quot;us-ascii&quot;.\n\nInput string (3 characters): &quot;�X�&quot;\nInput string in hexadecimal: 0xAB 0x58 0xBB\n\nEncode the input string...\nEncoded bytes in hexadecimal (19 bytes):\n\n0x28 0x75 0x6E 0x6B 0x6E 0x6F\n0x77 0x6E 0x29 0x58 0x28 0x75\n0x6E 0x6B 0x6E 0x6F 0x77 0x6E\n0x29\n\nDecode the encoded bytes...\nInput string:  &quot;�X�&quot;\nDecoded string:&quot;(unknown)X(unknown)&quot;\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"sys.txt.fallbackEncRpl#1\">// This example demonstrates the EncoderReplacementFallback class.\n\nusing namespace System;\nusing namespace System::Text;\n\nint main()\n{\n    // Create an encoding, which is equivalent to calling the\n    // ASCIIEncoding class constructor.\n    // The EncoderReplacementFallback parameter specifies that the\n    // string, &quot;(unknown)&quot;, replace characters that cannot be encoded.\n    // A decoder replacement fallback is also specified, but in this\n    // code example the decoding operation cannot fail.\n\n    Encoding^ ascii = Encoding::GetEncoding(&quot;us-ascii&quot;,\n        gcnew EncoderReplacementFallback(&quot;(unknown)&quot;),\n        gcnew DecoderReplacementFallback(&quot;(error)&quot;));\n\n    // The input string consists of the Unicode characters LEFT POINTING\n    // DOUBLE ANGLE QUOTATION MARK (U+00AB), &#39;X&#39; (U+0058), and RIGHT\n    // POINTING DOUBLE ANGLE QUOTATION MARK (U+00BB).\n    // The encoding can only encode characters in the US-ASCII range of\n    // U+0000 through U+007F. Consequently, the characters bracketing the\n    // &#39;X&#39; character are replaced with the fallback replacement string,\n    // &quot;(unknown)&quot;.\n\n    String^ inputString = &quot;\\u00abX\\u00bb&quot;;\n    String^ decodedString;\n    String^ twoNewLines = Environment::NewLine + Environment::NewLine;\n    array &lt;Byte&gt;^ encodedBytes = \n        gcnew array&lt;Byte&gt;(ascii-&gt;GetByteCount(inputString));\n    int numberOfEncodedBytes = 0;\n\n    // ---------------------------------------------------------------------\n    Console::Clear();\n\n    // Display the name of the encoding.\n    Console::WriteLine(&quot;The name of the encoding is \\&quot;{0}\\&quot;.{1}&quot;, \n        ascii-&gt;WebName, Environment::NewLine);\n\n    // Display the input string in text.\n    Console::WriteLine(&quot;Input string ({0} characters): \\&quot;{1}\\&quot;&quot;,\n        inputString-&gt;Length, inputString);\n\n    // Display the input string in hexadecimal.\n    Console::Write(&quot;Input string in hexadecimal: &quot;);\n    for each (char c in inputString)\n    {\n        Console::Write(&quot;0x{0:X2} &quot;, c);\n    }\n    Console::Write(twoNewLines);\n\n    // ---------------------------------------------------------------------\n    // Encode the input string.\n\n    Console::WriteLine(&quot;Encode the input string...&quot;);\n    numberOfEncodedBytes = ascii-&gt;GetBytes(inputString, 0, inputString-&gt;Length,\n        encodedBytes, 0);\n\n    // Display the encoded bytes.\n    Console::WriteLine(&quot;Encoded bytes in hexadecimal ({0} bytes):{1}&quot;,\n        numberOfEncodedBytes, Environment::NewLine);\n    for(int i = 0; i &lt; encodedBytes-&gt;Length; i++)\n    {\n        Console::Write(&quot;0x{0:X2} &quot;, encodedBytes[i]);\n        if(((i + 1) % 6) == 0)\n        {\n            Console::WriteLine();\n        }\n    }\n    Console::Write(twoNewLines);\n\n    // ---------------------------------------------------------------------\n    // Decode the encoded bytes, yielding a reconstituted string.\n\n    Console::WriteLine(&quot;Decode the encoded bytes...&quot;);\n    decodedString = ascii-&gt;GetString(encodedBytes);\n\n    // Display the input string and the decoded string for comparison.\n    Console::WriteLine(&quot;Input string:  \\&quot;{0}\\&quot;&quot;, inputString);\n    Console::WriteLine(&quot;Decoded string:\\&quot;{0}\\&quot;&quot;, decodedString);\n}\n\n\n\n/*\nThis code example produces the following results:\n\nThe name of the encoding is &quot;us-ascii&quot;.\n\nInput string (3 characters): &quot;X&quot;\nInput string in hexadecimal: 0xAB 0x58 0xBB\n\nEncode the input string...\nEncoded bytes in hexadecimal (19 bytes):\n\n0x28 0x75 0x6E 0x6B 0x6E 0x6F\n0x77 0x6E 0x29 0x58 0x28 0x75\n0x6E 0x6B 0x6E 0x6F 0x77 0x6E\n0x29\n\nDecode the encoded bytes...\nInput string:  &quot;X&quot;\nDecoded string:&quot;(unknown)X(unknown)&quot;\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"sys.txt.fallbackEncRpl#1\">&#39; This example demonstrates the EncoderReplacementFallback class.\nImports System\nImports System.Text\n\nClass Sample\n    Public Shared Sub Main() \n        \n        &#39; Create an encoding, which is equivalent to calling the \n        &#39; ASCIIEncoding class constructor. \n        &#39; The EncoderReplacementFallback parameter specifies that the \n        &#39; string, &quot;(unknown)&quot;, replace characters that cannot be encoded. \n        &#39; A decoder replacement fallback is also specified, but in this \n        &#39; code example the decoding operation cannot fail.  \n\n        Dim erf As New EncoderReplacementFallback(&quot;(unknown)&quot;)\n        Dim drf As New DecoderReplacementFallback(&quot;(error)&quot;)\n        Dim ae As Encoding = Encoding.GetEncoding(&quot;us-ascii&quot;, erf, drf)\n        \n        &#39; The input string consists of the Unicode characters LEFT POINTING \n        &#39; DOUBLE ANGLE QUOTATION MARK (U+00AB), &#39;X&#39; (U+0058), and RIGHT POINTING \n        &#39; DOUBLE ANGLE QUOTATION MARK (U+00BB). \n        &#39; The encoding can only encode characters in the US-ASCII range of U+0000 \n        &#39; through U+007F. Consequently, the characters bracketing the &#39;X&#39; character\n        &#39; are replaced with the fallback replacement string, &quot;(unknown)&quot;.\n\n        Dim inputString As String = &quot;&#171;X&#187;&quot;\n        Dim decodedString As String\n        Dim twoNewLines As String = vbCrLf &amp; vbCrLf\n        Dim ix As Integer = 0\n        Dim numberOfEncodedBytes As Integer = ae.GetByteCount(inputString)\n        &#39; Counteract the compiler adding an extra byte to the array.\n        Dim encodedBytes(numberOfEncodedBytes - 1) As Byte\n        \n        &#39; --------------------------------------------------------------------------\n        Console.Clear()\n        \n        &#39; Display the name of the encoding.\n        Console.WriteLine(&quot;The name of the encoding is &quot;&quot;{0}&quot;&quot;.&quot; &amp; vbCrLf, ae.WebName)\n        \n        &#39; Display the input string in text.\n        Console.WriteLine(&quot;Input string ({0} characters): &quot;&quot;{1}&quot;&quot;&quot;, _\n                           inputString.Length, inputString)\n        \n        &#39; Display the input string in hexadecimal. \n        &#39; Each element is converted to an integer with Convert.ToInt32.\n        Console.Write(&quot;Input string in hexadecimal: &quot;)\n        Dim c As Char\n        For Each c In inputString.ToCharArray()\n            Console.Write(&quot;0x{0:X2} &quot;, Convert.ToInt32(c))\n        Next c\n        Console.Write(twoNewLines)\n        \n        &#39; --------------------------------------------------------------------------\n        &#39; Encode the input string. \n        Console.WriteLine(&quot;Encode the input string...&quot;)\n        numberOfEncodedBytes = ae.GetBytes(inputString, 0, inputString.Length, _\n                                           encodedBytes, 0)\n        \n        &#39; Display the encoded bytes. \n        &#39; Each element is converted to an integer with Convert.ToInt32.\n        Console.WriteLine(&quot;Encoded bytes in hexadecimal ({0} bytes):&quot; &amp; vbCrLf, _\n                           numberOfEncodedBytes)\n        ix = 0\n        Dim b As Byte\n        For Each b In encodedBytes\n            Console.Write(&quot;0x{0:X2} &quot;, Convert.ToInt32(b))\n            ix += 1\n            If 0 = ix Mod 6 Then\n                Console.WriteLine()\n            End If\n        Next b\n        Console.Write(twoNewLines)\n        \n        &#39; --------------------------------------------------------------------------\n        &#39; Decode the encoded bytes, yielding a reconstituted string.\n        Console.WriteLine(&quot;Decode the encoded bytes...&quot;)\n        decodedString = ae.GetString(encodedBytes)\n        \n        &#39; Display the input string and the decoded string for comparison.\n        Console.WriteLine(&quot;Input string:  &quot;&quot;{0}&quot;&quot;&quot;, inputString)\n        Console.WriteLine(&quot;Decoded string:&quot;&quot;{0}&quot;&quot;&quot;, decodedString)\n    \n    End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This code example produces the following results:\n&#39;\n&#39;The name of the encoding is &quot;us-ascii&quot;.\n&#39;\n&#39;Input string (3 characters): &quot;X&quot;\n&#39;Input string in hexadecimal: 0xAB 0x58 0xBB\n&#39;\n&#39;Encode the input string...\n&#39;Encoded bytes in hexadecimal (19 bytes):\n&#39;\n&#39;0x28 0x75 0x6E 0x6B 0x6E 0x6F\n&#39;0x77 0x6E 0x29 0x58 0x28 0x75\n&#39;0x6E 0x6B 0x6E 0x6F 0x77 0x6E\n&#39;0x29\n&#39;\n&#39;Decode the encoded bytes...\n&#39;Input string:  &quot;X&quot;\n&#39;Decoded string:&quot;(unknown)X(unknown)&quot;\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_GetEncoding_System_String_System_Text_EncoderFallback_System_Text_DecoderFallback_\">\r\n    \r\n            <a id=\"System_Text_Encoding_GetEncoding_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEncoding(String,EncoderFallback,DecoderFallback)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the encoding associated with the specified code page name. Parameters specify an error handler for characters that cannot be encoded and byte sequences that cannot be decoded.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Text.Encoding GetEncoding (string name, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The code page name of the preferred encoding. Any value returned by the <span class=\"xref\">stem.Text.Encoding.WebName*</span> property is valid. Possible values are listed in the Name column of the table that appears in the <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> class topic.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>encoderFallback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallback\" data-linktype=\"relative-path\">EncoderFallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that provides an error-handling procedure when a character cannot be encoded with the current encoding.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>decoderFallback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoderfallback\" data-linktype=\"relative-path\">DecoderFallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that provides an error-handling procedure when a byte sequence cannot be decoded with the current encoding.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a></div>\r\n                  </div>\r\n                  <p>The encoding that is associated with the specified code page.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is not a valid code page name.  </p>\n<p> -or-  </p>\n<p> The code page indicated by <code>name</code> is not supported by the underlying platform.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>GetEncoding</code> method relies on the underlying platform to support most code pages. However, the .NET Framework natively supports some encodings.  </p>\n<p> In addition to the encodings that are intrinsically supported on a specific platform version of the .NET Framework, the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncoding_System_Int32_\" data-linktype=\"relative-path\">GetEncoding(Int32)</a> method returns any additional encodings that are made available by registering an <a class=\"xref\" href=\"system.text.encodingprovider\" data-linktype=\"relative-path\">EncodingProvider</a> object.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The ANSI code pages can be different on different computers, or can be changed for a single computer, leading to data corruption. For the most consistent results, you should use Unicode, such as UTF-8 (code page 65001) or UTF-16, instead of a specific code page.  </p>\n</div>\n<p> For a list of code pages, see the <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> class topic. You can call the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncodings_\" data-linktype=\"relative-path\">GetEncodings</a> method on the full .NET Framework on the Windows desktop to get a list of all encodings.  </p>\n<p> <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncoding_\" data-linktype=\"relative-path\">GetEncoding</a> returns a cached instance with default settings. You should use the constructors of derived classes to get an instance with different settings. For example, the <a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a> class provides a constructor that lets you enable error detection.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the GetEncoding method.  </p>\n<pre><code class=\"lang-cs\" name=\"sys.txt.fallbackEncRpl#1\">// This example demonstrates the EncoderReplacementFallback class.\n\nusing System;\nusing System.Text;\n\nclass Sample \n{\n    public static void Main() \n    {\n\n// Create an encoding, which is equivalent to calling the \n// ASCIIEncoding class constructor. \n// The EncoderReplacementFallback parameter specifies that the\n// string, &quot;(unknown)&quot;, replace characters that cannot be encoded. \n// A decoder replacement fallback is also specified, but in this \n// code example the decoding operation cannot fail.  \n\n    Encoding ae = Encoding.GetEncoding(\n                  &quot;us-ascii&quot;,\n                  new EncoderReplacementFallback(&quot;(unknown)&quot;), \n                  new DecoderReplacementFallback(&quot;(error)&quot;));\n\n// The input string consists of the Unicode characters LEFT POINTING \n// DOUBLE ANGLE QUOTATION MARK (U+00AB), &#39;X&#39; (U+0058), and RIGHT POINTING \n// DOUBLE ANGLE QUOTATION MARK (U+00BB). \n// The encoding can only encode characters in the US-ASCII range of U+0000 \n// through U+007F. Consequently, the characters bracketing the &#39;X&#39; character\n// are replaced with the fallback replacement string, &quot;(unknown)&quot;.\n\n    string inputString = &quot;\\u00abX\\u00bb&quot;;\n    string decodedString;\n    string twoNewLines = &quot;<br><br>&quot;;\n    byte[] encodedBytes = new byte[ae.GetByteCount(inputString)];\n    int numberOfEncodedBytes = 0;\n    int ix = 0;\n\n// --------------------------------------------------------------------------\n    Console.Clear();\n\n// Display the name of the encoding.\n    Console.WriteLine(&quot;The name of the encoding is \\&quot;{0}\\&quot;.<br>&quot;, ae.WebName);\n\n// Display the input string in text.\n    Console.WriteLine(&quot;Input string ({0} characters): \\&quot;{1}\\&quot;&quot;, \n                       inputString.Length, inputString);\n\n// Display the input string in hexadecimal.\n    Console.Write(&quot;Input string in hexadecimal: &quot;);\n    foreach (char c in inputString.ToCharArray()) \n        {\n        Console.Write(&quot;0x{0:X2} &quot;, (int)c);\n        }\n    Console.Write(twoNewLines);\n\n// --------------------------------------------------------------------------\n// Encode the input string. \n\n    Console.WriteLine(&quot;Encode the input string...&quot;);\n    numberOfEncodedBytes = ae.GetBytes(inputString, 0, inputString.Length, \n                                       encodedBytes, 0);\n\n// Display the encoded bytes.\n    Console.WriteLine(&quot;Encoded bytes in hexadecimal ({0} bytes):<br>&quot;, \n                       numberOfEncodedBytes);\n    ix = 0;\n    foreach (byte b in encodedBytes)\n        {\n        Console.Write(&quot;0x{0:X2} &quot;, (int)b);\n        ix++;\n        if (0 == ix % 6) Console.WriteLine();\n        }\n    Console.Write(twoNewLines);\n\n// --------------------------------------------------------------------------\n// Decode the encoded bytes, yielding a reconstituted string.\n\n    Console.WriteLine(&quot;Decode the encoded bytes...&quot;);\n    decodedString = ae.GetString(encodedBytes);\n\n// Display the input string and the decoded string for comparison.\n    Console.WriteLine(&quot;Input string:  \\&quot;{0}\\&quot;&quot;, inputString);\n    Console.WriteLine(&quot;Decoded string:\\&quot;{0}\\&quot;&quot;, decodedString);\n    }\n}\n/*\nThis code example produces the following results:\n\nThe name of the encoding is &quot;us-ascii&quot;.\n\nInput string (3 characters): &quot;�X�&quot;\nInput string in hexadecimal: 0xAB 0x58 0xBB\n\nEncode the input string...\nEncoded bytes in hexadecimal (19 bytes):\n\n0x28 0x75 0x6E 0x6B 0x6E 0x6F\n0x77 0x6E 0x29 0x58 0x28 0x75\n0x6E 0x6B 0x6E 0x6F 0x77 0x6E\n0x29\n\nDecode the encoded bytes...\nInput string:  &quot;�X�&quot;\nDecoded string:&quot;(unknown)X(unknown)&quot;\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"sys.txt.fallbackEncRpl#1\">// This example demonstrates the EncoderReplacementFallback class.\n\nusing namespace System;\nusing namespace System::Text;\n\nint main()\n{\n    // Create an encoding, which is equivalent to calling the\n    // ASCIIEncoding class constructor.\n    // The EncoderReplacementFallback parameter specifies that the\n    // string, &quot;(unknown)&quot;, replace characters that cannot be encoded.\n    // A decoder replacement fallback is also specified, but in this\n    // code example the decoding operation cannot fail.\n\n    Encoding^ ascii = Encoding::GetEncoding(&quot;us-ascii&quot;,\n        gcnew EncoderReplacementFallback(&quot;(unknown)&quot;),\n        gcnew DecoderReplacementFallback(&quot;(error)&quot;));\n\n    // The input string consists of the Unicode characters LEFT POINTING\n    // DOUBLE ANGLE QUOTATION MARK (U+00AB), &#39;X&#39; (U+0058), and RIGHT\n    // POINTING DOUBLE ANGLE QUOTATION MARK (U+00BB).\n    // The encoding can only encode characters in the US-ASCII range of\n    // U+0000 through U+007F. Consequently, the characters bracketing the\n    // &#39;X&#39; character are replaced with the fallback replacement string,\n    // &quot;(unknown)&quot;.\n\n    String^ inputString = &quot;\\u00abX\\u00bb&quot;;\n    String^ decodedString;\n    String^ twoNewLines = Environment::NewLine + Environment::NewLine;\n    array &lt;Byte&gt;^ encodedBytes = \n        gcnew array&lt;Byte&gt;(ascii-&gt;GetByteCount(inputString));\n    int numberOfEncodedBytes = 0;\n\n    // ---------------------------------------------------------------------\n    Console::Clear();\n\n    // Display the name of the encoding.\n    Console::WriteLine(&quot;The name of the encoding is \\&quot;{0}\\&quot;.{1}&quot;, \n        ascii-&gt;WebName, Environment::NewLine);\n\n    // Display the input string in text.\n    Console::WriteLine(&quot;Input string ({0} characters): \\&quot;{1}\\&quot;&quot;,\n        inputString-&gt;Length, inputString);\n\n    // Display the input string in hexadecimal.\n    Console::Write(&quot;Input string in hexadecimal: &quot;);\n    for each (char c in inputString)\n    {\n        Console::Write(&quot;0x{0:X2} &quot;, c);\n    }\n    Console::Write(twoNewLines);\n\n    // ---------------------------------------------------------------------\n    // Encode the input string.\n\n    Console::WriteLine(&quot;Encode the input string...&quot;);\n    numberOfEncodedBytes = ascii-&gt;GetBytes(inputString, 0, inputString-&gt;Length,\n        encodedBytes, 0);\n\n    // Display the encoded bytes.\n    Console::WriteLine(&quot;Encoded bytes in hexadecimal ({0} bytes):{1}&quot;,\n        numberOfEncodedBytes, Environment::NewLine);\n    for(int i = 0; i &lt; encodedBytes-&gt;Length; i++)\n    {\n        Console::Write(&quot;0x{0:X2} &quot;, encodedBytes[i]);\n        if(((i + 1) % 6) == 0)\n        {\n            Console::WriteLine();\n        }\n    }\n    Console::Write(twoNewLines);\n\n    // ---------------------------------------------------------------------\n    // Decode the encoded bytes, yielding a reconstituted string.\n\n    Console::WriteLine(&quot;Decode the encoded bytes...&quot;);\n    decodedString = ascii-&gt;GetString(encodedBytes);\n\n    // Display the input string and the decoded string for comparison.\n    Console::WriteLine(&quot;Input string:  \\&quot;{0}\\&quot;&quot;, inputString);\n    Console::WriteLine(&quot;Decoded string:\\&quot;{0}\\&quot;&quot;, decodedString);\n}\n\n\n\n/*\nThis code example produces the following results:\n\nThe name of the encoding is &quot;us-ascii&quot;.\n\nInput string (3 characters): &quot;X&quot;\nInput string in hexadecimal: 0xAB 0x58 0xBB\n\nEncode the input string...\nEncoded bytes in hexadecimal (19 bytes):\n\n0x28 0x75 0x6E 0x6B 0x6E 0x6F\n0x77 0x6E 0x29 0x58 0x28 0x75\n0x6E 0x6B 0x6E 0x6F 0x77 0x6E\n0x29\n\nDecode the encoded bytes...\nInput string:  &quot;X&quot;\nDecoded string:&quot;(unknown)X(unknown)&quot;\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"sys.txt.fallbackEncRpl#1\">&#39; This example demonstrates the EncoderReplacementFallback class.\nImports System\nImports System.Text\n\nClass Sample\n    Public Shared Sub Main() \n        \n        &#39; Create an encoding, which is equivalent to calling the \n        &#39; ASCIIEncoding class constructor. \n        &#39; The EncoderReplacementFallback parameter specifies that the \n        &#39; string, &quot;(unknown)&quot;, replace characters that cannot be encoded. \n        &#39; A decoder replacement fallback is also specified, but in this \n        &#39; code example the decoding operation cannot fail.  \n\n        Dim erf As New EncoderReplacementFallback(&quot;(unknown)&quot;)\n        Dim drf As New DecoderReplacementFallback(&quot;(error)&quot;)\n        Dim ae As Encoding = Encoding.GetEncoding(&quot;us-ascii&quot;, erf, drf)\n        \n        &#39; The input string consists of the Unicode characters LEFT POINTING \n        &#39; DOUBLE ANGLE QUOTATION MARK (U+00AB), &#39;X&#39; (U+0058), and RIGHT POINTING \n        &#39; DOUBLE ANGLE QUOTATION MARK (U+00BB). \n        &#39; The encoding can only encode characters in the US-ASCII range of U+0000 \n        &#39; through U+007F. Consequently, the characters bracketing the &#39;X&#39; character\n        &#39; are replaced with the fallback replacement string, &quot;(unknown)&quot;.\n\n        Dim inputString As String = &quot;&#171;X&#187;&quot;\n        Dim decodedString As String\n        Dim twoNewLines As String = vbCrLf &amp; vbCrLf\n        Dim ix As Integer = 0\n        Dim numberOfEncodedBytes As Integer = ae.GetByteCount(inputString)\n        &#39; Counteract the compiler adding an extra byte to the array.\n        Dim encodedBytes(numberOfEncodedBytes - 1) As Byte\n        \n        &#39; --------------------------------------------------------------------------\n        Console.Clear()\n        \n        &#39; Display the name of the encoding.\n        Console.WriteLine(&quot;The name of the encoding is &quot;&quot;{0}&quot;&quot;.&quot; &amp; vbCrLf, ae.WebName)\n        \n        &#39; Display the input string in text.\n        Console.WriteLine(&quot;Input string ({0} characters): &quot;&quot;{1}&quot;&quot;&quot;, _\n                           inputString.Length, inputString)\n        \n        &#39; Display the input string in hexadecimal. \n        &#39; Each element is converted to an integer with Convert.ToInt32.\n        Console.Write(&quot;Input string in hexadecimal: &quot;)\n        Dim c As Char\n        For Each c In inputString.ToCharArray()\n            Console.Write(&quot;0x{0:X2} &quot;, Convert.ToInt32(c))\n        Next c\n        Console.Write(twoNewLines)\n        \n        &#39; --------------------------------------------------------------------------\n        &#39; Encode the input string. \n        Console.WriteLine(&quot;Encode the input string...&quot;)\n        numberOfEncodedBytes = ae.GetBytes(inputString, 0, inputString.Length, _\n                                           encodedBytes, 0)\n        \n        &#39; Display the encoded bytes. \n        &#39; Each element is converted to an integer with Convert.ToInt32.\n        Console.WriteLine(&quot;Encoded bytes in hexadecimal ({0} bytes):&quot; &amp; vbCrLf, _\n                           numberOfEncodedBytes)\n        ix = 0\n        Dim b As Byte\n        For Each b In encodedBytes\n            Console.Write(&quot;0x{0:X2} &quot;, Convert.ToInt32(b))\n            ix += 1\n            If 0 = ix Mod 6 Then\n                Console.WriteLine()\n            End If\n        Next b\n        Console.Write(twoNewLines)\n        \n        &#39; --------------------------------------------------------------------------\n        &#39; Decode the encoded bytes, yielding a reconstituted string.\n        Console.WriteLine(&quot;Decode the encoded bytes...&quot;)\n        decodedString = ae.GetString(encodedBytes)\n        \n        &#39; Display the input string and the decoded string for comparison.\n        Console.WriteLine(&quot;Input string:  &quot;&quot;{0}&quot;&quot;&quot;, inputString)\n        Console.WriteLine(&quot;Decoded string:&quot;&quot;{0}&quot;&quot;&quot;, decodedString)\n    \n    End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This code example produces the following results:\n&#39;\n&#39;The name of the encoding is &quot;us-ascii&quot;.\n&#39;\n&#39;Input string (3 characters): &quot;X&quot;\n&#39;Input string in hexadecimal: 0xAB 0x58 0xBB\n&#39;\n&#39;Encode the input string...\n&#39;Encoded bytes in hexadecimal (19 bytes):\n&#39;\n&#39;0x28 0x75 0x6E 0x6B 0x6E 0x6F\n&#39;0x77 0x6E 0x29 0x58 0x28 0x75\n&#39;0x6E 0x6B 0x6E 0x6F 0x77 0x6E\n&#39;0x29\n&#39;\n&#39;Decode the encoded bytes...\n&#39;Input string:  &quot;X&quot;\n&#39;Decoded string:&quot;(unknown)X(unknown)&quot;\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_GetEncodings\">\r\n    \r\n            <a id=\"System_Text_Encoding_GetEncodings_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEncodings()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an array that contains all encodings.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Text.EncodingInfo[] GetEncodings ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encodinginfo\" data-linktype=\"relative-path\">EncodingInfo</a>[]</div>\r\n                  </div>\r\n                  <p>An array that contains all encodings.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method returns a list of supported encodings, uniquely distinguished by code page. For a table that lists the supported encodings, see the <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> class topic.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The list of supported encodings returned by the GetEncodings method does not include any additional encodings made available by any <a class=\"xref\" href=\"system.text.encodingprovider\" data-linktype=\"relative-path\">EncodingProvider</a> implementations that were registered by calls to the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_RegisterProvider_\" data-linktype=\"relative-path\">RegisterProvider</a> method.  </p>\n</div>\n<p> Encodings 50220 and 50222 are both associated with the name &quot;iso-2022-jp&quot;, but they are not identical. Encoding 50220 converts half-width Katakana characters to full-width Katakana characters, whereas encoding 50222 uses a shift-in/shift-out sequence to encode half-width Katakana characters. The display name for encoding 50222 is &quot;Japanese (JIS-Allow 1 byte Kana - SO/SI)&quot; to distinguish it from encoding 50220, which has the display name &quot;Japanese (JIS)&quot;.  </p>\n<p> If you request the encoding name &quot;iso-2022-jp&quot;, the .NET Framework returns encoding 50220. However, the encoding that is appropriate for your app depends on the preferred treatment of the half-width Katakana characters.  </p>\n<p> To get a specific encoding, you should use the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncoding_\" data-linktype=\"relative-path\">GetEncoding</a> method.  </p>\n<p> GetEncodings is sometimes used to present the user with a list of encodings in a File <strong>Save as</strong> dialog box. However, many non-Unicode encodings are either incomplete and translate many characters to &quot;?&quot;, or have subtly different behavior on different platforms. Consider using UTF-8 or UTF-16 as the default.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example checks the values of the Boolean properties of each encoding.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.Encoding.IsProps#1\">using System;\nusing System.Text;\n\npublic class SamplesEncoding  {\n\n   public static void Main()  {\n\n      // Print the header.\n      Console.Write( &quot;CodePage identifier and name     &quot; );\n      Console.Write( &quot;BrDisp   BrSave   &quot; );\n      Console.Write( &quot;MNDisp   MNSave   &quot; );\n      Console.WriteLine( &quot;1-Byte   ReadOnly &quot; );\n\n      // For every encoding, get the property values.\n      foreach( EncodingInfo ei in Encoding.GetEncodings() )  {\n         Encoding e = ei.GetEncoding();\n\n         Console.Write( &quot;{0,-6} {1,-25} &quot;, ei.CodePage, ei.Name );\n         Console.Write( &quot;{0,-8} {1,-8} &quot;, e.IsBrowserDisplay, e.IsBrowserSave );\n         Console.Write( &quot;{0,-8} {1,-8} &quot;, e.IsMailNewsDisplay, e.IsMailNewsSave );\n         Console.WriteLine( &quot;{0,-8} {1,-8} &quot;, e.IsSingleByte, e.IsReadOnly );\n      }\n\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nCodePage identifier and name     BrDisp   BrSave   MNDisp   MNSave   1-Byte   ReadOnly \n37     IBM037                    False    False    False    False    True     True     \n437    IBM437                    False    False    False    False    True     True     \n500    IBM500                    False    False    False    False    True     True     \n708    ASMO-708                  True     True     False    False    True     True     \n720    DOS-720                   True     True     False    False    True     True     \n737    ibm737                    False    False    False    False    True     True     \n775    ibm775                    False    False    False    False    True     True     \n850    ibm850                    False    False    False    False    True     True     \n852    ibm852                    True     True     False    False    True     True     \n855    IBM855                    False    False    False    False    True     True     \n857    ibm857                    False    False    False    False    True     True     \n858    IBM00858                  False    False    False    False    True     True     \n860    IBM860                    False    False    False    False    True     True     \n861    ibm861                    False    False    False    False    True     True     \n862    DOS-862                   True     True     False    False    True     True     \n863    IBM863                    False    False    False    False    True     True     \n864    IBM864                    False    False    False    False    True     True     \n865    IBM865                    False    False    False    False    True     True     \n866    cp866                     True     True     False    False    True     True     \n869    ibm869                    False    False    False    False    True     True     \n870    IBM870                    False    False    False    False    True     True     \n874    windows-874               True     True     True     True     True     True     \n875    cp875                     False    False    False    False    True     True     \n932    shift_jis                 True     True     True     True     False    True     \n936    gb2312                    True     True     True     True     False    True     \n949    ks_c_5601-1987            True     True     True     True     False    True     \n950    big5                      True     True     True     True     False    True     \n1026   IBM1026                   False    False    False    False    True     True     \n1047   IBM01047                  False    False    False    False    True     True     \n1140   IBM01140                  False    False    False    False    True     True     \n1141   IBM01141                  False    False    False    False    True     True     \n1142   IBM01142                  False    False    False    False    True     True     \n1143   IBM01143                  False    False    False    False    True     True     \n1144   IBM01144                  False    False    False    False    True     True     \n1145   IBM01145                  False    False    False    False    True     True     \n1146   IBM01146                  False    False    False    False    True     True     \n1147   IBM01147                  False    False    False    False    True     True     \n1148   IBM01148                  False    False    False    False    True     True     \n1149   IBM01149                  False    False    False    False    True     True     \n1200   utf-16                    False    True     False    False    False    True     \n1201   unicodeFFFE               False    False    False    False    False    True     \n1250   windows-1250              True     True     True     True     True     True     \n1251   windows-1251              True     True     True     True     True     True     \n1252   Windows-1252              True     True     True     True     True     True     \n1253   windows-1253              True     True     True     True     True     True     \n1254   windows-1254              True     True     True     True     True     True     \n1255   windows-1255              True     True     True     True     True     True     \n1256   windows-1256              True     True     True     True     True     True     \n1257   windows-1257              True     True     True     True     True     True     \n1258   windows-1258              True     True     True     True     True     True     \n1361   Johab                     False    False    False    False    False    True     \n10000  macintosh                 False    False    False    False    True     True     \n10001  x-mac-japanese            False    False    False    False    False    True     \n10002  x-mac-chinesetrad         False    False    False    False    False    True     \n10003  x-mac-korean              False    False    False    False    False    True     \n10004  x-mac-arabic              False    False    False    False    True     True     \n10005  x-mac-hebrew              False    False    False    False    True     True     \n10006  x-mac-greek               False    False    False    False    True     True     \n10007  x-mac-cyrillic            False    False    False    False    True     True     \n10008  x-mac-chinesesimp         False    False    False    False    False    True     \n10010  x-mac-romanian            False    False    False    False    True     True     \n10017  x-mac-ukrainian           False    False    False    False    True     True     \n10021  x-mac-thai                False    False    False    False    True     True     \n10029  x-mac-ce                  False    False    False    False    True     True     \n10079  x-mac-icelandic           False    False    False    False    True     True     \n10081  x-mac-turkish             False    False    False    False    True     True     \n10082  x-mac-croatian            False    False    False    False    True     True     \n12000  utf-32                    False    False    False    False    False    True     \n12001  utf-32BE                  False    False    False    False    False    True     \n20000  x-Chinese-CNS             False    False    False    False    False    True     \n20001  x-cp20001                 False    False    False    False    False    True     \n20002  x-Chinese-Eten            False    False    False    False    False    True     \n20003  x-cp20003                 False    False    False    False    False    True     \n20004  x-cp20004                 False    False    False    False    False    True     \n20005  x-cp20005                 False    False    False    False    False    True     \n20105  x-IA5                     False    False    False    False    True     True     \n20106  x-IA5-German              False    False    False    False    True     True     \n20107  x-IA5-Swedish             False    False    False    False    True     True     \n20108  x-IA5-Norwegian           False    False    False    False    True     True     \n20127  us-ascii                  False    False    True     True     True     True     \n20261  x-cp20261                 False    False    False    False    False    True     \n20269  x-cp20269                 False    False    False    False    True     True     \n20273  IBM273                    False    False    False    False    True     True     \n20277  IBM277                    False    False    False    False    True     True     \n20278  IBM278                    False    False    False    False    True     True     \n20280  IBM280                    False    False    False    False    True     True     \n20284  IBM284                    False    False    False    False    True     True     \n20285  IBM285                    False    False    False    False    True     True     \n20290  IBM290                    False    False    False    False    True     True     \n20297  IBM297                    False    False    False    False    True     True     \n20420  IBM420                    False    False    False    False    True     True     \n20423  IBM423                    False    False    False    False    True     True     \n20424  IBM424                    False    False    False    False    True     True     \n20833  x-EBCDIC-KoreanExtended   False    False    False    False    True     True     \n20838  IBM-Thai                  False    False    False    False    True     True     \n20866  koi8-r                    True     True     True     True     True     True     \n20871  IBM871                    False    False    False    False    True     True     \n20880  IBM880                    False    False    False    False    True     True     \n20905  IBM905                    False    False    False    False    True     True     \n20924  IBM00924                  False    False    False    False    True     True     \n20932  EUC-JP                    False    False    False    False    False    True     \n20936  x-cp20936                 False    False    False    False    False    True     \n20949  x-cp20949                 False    False    False    False    False    True     \n21025  cp1025                    False    False    False    False    True     True     \n21866  koi8-u                    True     True     True     True     True     True     \n28591  iso-8859-1                True     True     True     True     True     True     \n28592  iso-8859-2                True     True     True     True     True     True     \n28593  iso-8859-3                False    False    True     True     True     True     \n28594  iso-8859-4                True     True     True     True     True     True     \n28595  iso-8859-5                True     True     True     True     True     True     \n28596  iso-8859-6                True     True     True     True     True     True     \n28597  iso-8859-7                True     True     True     True     True     True     \n28598  iso-8859-8                True     True     False    False    True     True     \n28599  iso-8859-9                True     True     True     True     True     True     \n28603  iso-8859-13               False    False    True     True     True     True     \n28605  iso-8859-15               False    True     True     True     True     True     \n29001  x-Europa                  False    False    False    False    True     True     \n38598  iso-8859-8-i              True     True     True     True     True     True     \n50220  iso-2022-jp               False    False    True     True     False    True     \n50221  csISO2022JP               False    True     True     True     False    True     \n50222  iso-2022-jp               False    False    False    False    False    True     \n50225  iso-2022-kr               False    False    True     False    False    True     \n50227  x-cp50227                 False    False    False    False    False    True     \n51932  euc-jp                    True     True     True     True     False    True     \n51936  EUC-CN                    False    False    False    False    False    True     \n51949  euc-kr                    False    False    True     True     False    True     \n52936  hz-gb-2312                True     True     True     True     False    True     \n54936  GB18030                   True     True     True     True     False    True     \n57002  x-iscii-de                False    False    False    False    False    True     \n57003  x-iscii-be                False    False    False    False    False    True     \n57004  x-iscii-ta                False    False    False    False    False    True     \n57005  x-iscii-te                False    False    False    False    False    True     \n57006  x-iscii-as                False    False    False    False    False    True     \n57007  x-iscii-or                False    False    False    False    False    True     \n57008  x-iscii-ka                False    False    False    False    False    True     \n57009  x-iscii-ma                False    False    False    False    False    True     \n57010  x-iscii-gu                False    False    False    False    False    True     \n57011  x-iscii-pa                False    False    False    False    False    True     \n65000  utf-7                     False    False    True     True     False    True     \n65001  utf-8                     True     True     True     True     False    True     \n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.Encoding.IsProps#1\">using namespace System;\nusing namespace System::Text;\nint main()\n{\n   \n   // Print the header.\n   Console::Write( &quot;CodePage identifier and name     &quot; );\n   Console::Write( &quot;BrDisp   BrSave   &quot; );\n   Console::Write( &quot;MNDisp   MNSave   &quot; );\n   Console::WriteLine( &quot;1-Byte   ReadOnly &quot; );\n   \n   // For every encoding, get the property values.\n   System::Collections::IEnumerator^ myEnum = Encoding::GetEncodings()-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      EncodingInfo ^ ei = safe_cast&lt;EncodingInfo ^&gt;(myEnum-&gt;Current);\n      Encoding^ e = ei-&gt;GetEncoding();\n      Console::Write( &quot;{0,-6} {1,-25} &quot;, ei-&gt;CodePage, ei-&gt;Name );\n      Console::Write( &quot;{0,-8} {1,-8} &quot;, e-&gt;IsBrowserDisplay, e-&gt;IsBrowserSave );\n      Console::Write( &quot;{0,-8} {1,-8} &quot;, e-&gt;IsMailNewsDisplay, e-&gt;IsMailNewsSave );\n      Console::WriteLine( &quot;{0,-8} {1,-8} &quot;, e-&gt;IsSingleByte, e-&gt;IsReadOnly );\n   }\n}\n\n/* \nThis code produces the following output.\n\nCodePage identifier and name     BrDisp   BrSave   MNDisp   MNSave   1-Byte   ReadOnly \n37     IBM037                    False    False    False    False    True     True     \n437    IBM437                    False    False    False    False    True     True     \n500    IBM500                    False    False    False    False    True     True     \n708    ASMO-708                  True     True     False    False    True     True     \n720    DOS-720                   True     True     False    False    True     True     \n737    ibm737                    False    False    False    False    True     True     \n775    ibm775                    False    False    False    False    True     True     \n850    ibm850                    False    False    False    False    True     True     \n852    ibm852                    True     True     False    False    True     True     \n855    IBM855                    False    False    False    False    True     True     \n857    ibm857                    False    False    False    False    True     True     \n858    IBM00858                  False    False    False    False    True     True     \n860    IBM860                    False    False    False    False    True     True     \n861    ibm861                    False    False    False    False    True     True     \n862    DOS-862                   True     True     False    False    True     True     \n863    IBM863                    False    False    False    False    True     True     \n864    IBM864                    False    False    False    False    True     True     \n865    IBM865                    False    False    False    False    True     True     \n866    cp866                     True     True     False    False    True     True     \n869    ibm869                    False    False    False    False    True     True     \n870    IBM870                    False    False    False    False    True     True     \n874    windows-874               True     True     True     True     True     True     \n875    cp875                     False    False    False    False    True     True     \n932    shift_jis                 True     True     True     True     False    True     \n936    gb2312                    True     True     True     True     False    True     \n949    ks_c_5601-1987            True     True     True     True     False    True     \n950    big5                      True     True     True     True     False    True     \n1026   IBM1026                   False    False    False    False    True     True     \n1047   IBM01047                  False    False    False    False    True     True     \n1140   IBM01140                  False    False    False    False    True     True     \n1141   IBM01141                  False    False    False    False    True     True     \n1142   IBM01142                  False    False    False    False    True     True     \n1143   IBM01143                  False    False    False    False    True     True     \n1144   IBM01144                  False    False    False    False    True     True     \n1145   IBM01145                  False    False    False    False    True     True     \n1146   IBM01146                  False    False    False    False    True     True     \n1147   IBM01147                  False    False    False    False    True     True     \n1148   IBM01148                  False    False    False    False    True     True     \n1149   IBM01149                  False    False    False    False    True     True     \n1200   utf-16                    False    True     False    False    False    True     \n1201   unicodeFFFE               False    False    False    False    False    True     \n1250   windows-1250              True     True     True     True     True     True     \n1251   windows-1251              True     True     True     True     True     True     \n1252   Windows-1252              True     True     True     True     True     True     \n1253   windows-1253              True     True     True     True     True     True     \n1254   windows-1254              True     True     True     True     True     True     \n1255   windows-1255              True     True     True     True     True     True     \n1256   windows-1256              True     True     True     True     True     True     \n1257   windows-1257              True     True     True     True     True     True     \n1258   windows-1258              True     True     True     True     True     True     \n1361   Johab                     False    False    False    False    False    True     \n10000  macintosh                 False    False    False    False    True     True     \n10001  x-mac-japanese            False    False    False    False    False    True     \n10002  x-mac-chinesetrad         False    False    False    False    False    True     \n10003  x-mac-korean              False    False    False    False    False    True     \n10004  x-mac-arabic              False    False    False    False    True     True     \n10005  x-mac-hebrew              False    False    False    False    True     True     \n10006  x-mac-greek               False    False    False    False    True     True     \n10007  x-mac-cyrillic            False    False    False    False    True     True     \n10008  x-mac-chinesesimp         False    False    False    False    False    True     \n10010  x-mac-romanian            False    False    False    False    True     True     \n10017  x-mac-ukrainian           False    False    False    False    True     True     \n10021  x-mac-thai                False    False    False    False    True     True     \n10029  x-mac-ce                  False    False    False    False    True     True     \n10079  x-mac-icelandic           False    False    False    False    True     True     \n10081  x-mac-turkish             False    False    False    False    True     True     \n10082  x-mac-croatian            False    False    False    False    True     True     \n12000  utf-32                    False    False    False    False    False    True     \n12001  utf-32BE                  False    False    False    False    False    True     \n20000  x-Chinese-CNS             False    False    False    False    False    True     \n20001  x-cp20001                 False    False    False    False    False    True     \n20002  x-Chinese-Eten            False    False    False    False    False    True     \n20003  x-cp20003                 False    False    False    False    False    True     \n20004  x-cp20004                 False    False    False    False    False    True     \n20005  x-cp20005                 False    False    False    False    False    True     \n20105  x-IA5                     False    False    False    False    True     True     \n20106  x-IA5-German              False    False    False    False    True     True     \n20107  x-IA5-Swedish             False    False    False    False    True     True     \n20108  x-IA5-Norwegian           False    False    False    False    True     True     \n20127  us-ascii                  False    False    True     True     True     True     \n20261  x-cp20261                 False    False    False    False    False    True     \n20269  x-cp20269                 False    False    False    False    True     True     \n20273  IBM273                    False    False    False    False    True     True     \n20277  IBM277                    False    False    False    False    True     True     \n20278  IBM278                    False    False    False    False    True     True     \n20280  IBM280                    False    False    False    False    True     True     \n20284  IBM284                    False    False    False    False    True     True     \n20285  IBM285                    False    False    False    False    True     True     \n20290  IBM290                    False    False    False    False    True     True     \n20297  IBM297                    False    False    False    False    True     True     \n20420  IBM420                    False    False    False    False    True     True     \n20423  IBM423                    False    False    False    False    True     True     \n20424  IBM424                    False    False    False    False    True     True     \n20833  x-EBCDIC-KoreanExtended   False    False    False    False    True     True     \n20838  IBM-Thai                  False    False    False    False    True     True     \n20866  koi8-r                    True     True     True     True     True     True     \n20871  IBM871                    False    False    False    False    True     True     \n20880  IBM880                    False    False    False    False    True     True     \n20905  IBM905                    False    False    False    False    True     True     \n20924  IBM00924                  False    False    False    False    True     True     \n20932  EUC-JP                    False    False    False    False    False    True     \n20936  x-cp20936                 False    False    False    False    False    True     \n20949  x-cp20949                 False    False    False    False    False    True     \n21025  cp1025                    False    False    False    False    True     True     \n21866  koi8-u                    True     True     True     True     True     True     \n28591  iso-8859-1                True     True     True     True     True     True     \n28592  iso-8859-2                True     True     True     True     True     True     \n28593  iso-8859-3                False    False    True     True     True     True     \n28594  iso-8859-4                True     True     True     True     True     True     \n28595  iso-8859-5                True     True     True     True     True     True     \n28596  iso-8859-6                True     True     True     True     True     True     \n28597  iso-8859-7                True     True     True     True     True     True     \n28598  iso-8859-8                True     True     False    False    True     True     \n28599  iso-8859-9                True     True     True     True     True     True     \n28603  iso-8859-13               False    False    True     True     True     True     \n28605  iso-8859-15               False    True     True     True     True     True     \n29001  x-Europa                  False    False    False    False    True     True     \n38598  iso-8859-8-i              True     True     True     True     True     True     \n50220  iso-2022-jp               False    False    True     True     False    True     \n50221  csISO2022JP               False    True     True     True     False    True     \n50222  iso-2022-jp               False    False    False    False    False    True     \n50225  iso-2022-kr               False    False    True     False    False    True     \n50227  x-cp50227                 False    False    False    False    False    True     \n51932  euc-jp                    True     True     True     True     False    True     \n51936  EUC-CN                    False    False    False    False    False    True     \n51949  euc-kr                    False    False    True     True     False    True     \n52936  hz-gb-2312                True     True     True     True     False    True     \n54936  GB18030                   True     True     True     True     False    True     \n57002  x-iscii-de                False    False    False    False    False    True     \n57003  x-iscii-be                False    False    False    False    False    True     \n57004  x-iscii-ta                False    False    False    False    False    True     \n57005  x-iscii-te                False    False    False    False    False    True     \n57006  x-iscii-as                False    False    False    False    False    True     \n57007  x-iscii-or                False    False    False    False    False    True     \n57008  x-iscii-ka                False    False    False    False    False    True     \n57009  x-iscii-ma                False    False    False    False    False    True     \n57010  x-iscii-gu                False    False    False    False    False    True     \n57011  x-iscii-pa                False    False    False    False    False    True     \n65000  utf-7                     False    False    True     True     False    True     \n65001  utf-8                     True     True     True     True     False    True     \n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.Encoding.IsProps#1\">Imports System\nImports System.Text\n\nPublic Class SamplesEncoding   \n\n   Public Shared Sub Main()\n\n      &#39; Print the header.\n      Console.Write(&quot;CodePage identifier and name     &quot;)\n      Console.Write(&quot;BrDisp   BrSave   &quot;)\n      Console.Write(&quot;MNDisp   MNSave   &quot;)\n      Console.WriteLine(&quot;1-Byte   ReadOnly &quot;)\n\n      &#39; For every encoding, get the property values.\n      Dim ei As EncodingInfo\n      For Each ei In  Encoding.GetEncodings()\n         Dim e As Encoding = ei.GetEncoding()\n         \n         Console.Write(&quot;{0,-6} {1,-25} &quot;, ei.CodePage, ei.Name)\n         Console.Write(&quot;{0,-8} {1,-8} &quot;, e.IsBrowserDisplay, e.IsBrowserSave)\n         Console.Write(&quot;{0,-8} {1,-8} &quot;, e.IsMailNewsDisplay, e.IsMailNewsSave)\n         Console.WriteLine(&quot;{0,-8} {1,-8} &quot;, e.IsSingleByte, e.IsReadOnly)\n      Next ei\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesEncoding\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;CodePage identifier and name     BrDisp   BrSave   MNDisp   MNSave   1-Byte   ReadOnly \n&#39;37     IBM037                    False    False    False    False    True     True     \n&#39;437    IBM437                    False    False    False    False    True     True     \n&#39;500    IBM500                    False    False    False    False    True     True     \n&#39;708    ASMO-708                  True     True     False    False    True     True     \n&#39;720    DOS-720                   True     True     False    False    True     True     \n&#39;737    ibm737                    False    False    False    False    True     True     \n&#39;775    ibm775                    False    False    False    False    True     True     \n&#39;850    ibm850                    False    False    False    False    True     True     \n&#39;852    ibm852                    True     True     False    False    True     True     \n&#39;855    IBM855                    False    False    False    False    True     True     \n&#39;857    ibm857                    False    False    False    False    True     True     \n&#39;858    IBM00858                  False    False    False    False    True     True     \n&#39;860    IBM860                    False    False    False    False    True     True     \n&#39;861    ibm861                    False    False    False    False    True     True     \n&#39;862    DOS-862                   True     True     False    False    True     True     \n&#39;863    IBM863                    False    False    False    False    True     True     \n&#39;864    IBM864                    False    False    False    False    True     True     \n&#39;865    IBM865                    False    False    False    False    True     True     \n&#39;866    cp866                     True     True     False    False    True     True     \n&#39;869    ibm869                    False    False    False    False    True     True     \n&#39;870    IBM870                    False    False    False    False    True     True     \n&#39;874    windows-874               True     True     True     True     True     True     \n&#39;875    cp875                     False    False    False    False    True     True     \n&#39;932    shift_jis                 True     True     True     True     False    True     \n&#39;936    gb2312                    True     True     True     True     False    True     \n&#39;949    ks_c_5601-1987            True     True     True     True     False    True     \n&#39;950    big5                      True     True     True     True     False    True     \n&#39;1026   IBM1026                   False    False    False    False    True     True     \n&#39;1047   IBM01047                  False    False    False    False    True     True     \n&#39;1140   IBM01140                  False    False    False    False    True     True     \n&#39;1141   IBM01141                  False    False    False    False    True     True     \n&#39;1142   IBM01142                  False    False    False    False    True     True     \n&#39;1143   IBM01143                  False    False    False    False    True     True     \n&#39;1144   IBM01144                  False    False    False    False    True     True     \n&#39;1145   IBM01145                  False    False    False    False    True     True     \n&#39;1146   IBM01146                  False    False    False    False    True     True     \n&#39;1147   IBM01147                  False    False    False    False    True     True     \n&#39;1148   IBM01148                  False    False    False    False    True     True     \n&#39;1149   IBM01149                  False    False    False    False    True     True     \n&#39;1200   utf-16                    False    True     False    False    False    True     \n&#39;1201   unicodeFFFE               False    False    False    False    False    True     \n&#39;1250   windows-1250              True     True     True     True     True     True     \n&#39;1251   windows-1251              True     True     True     True     True     True     \n&#39;1252   Windows-1252              True     True     True     True     True     True     \n&#39;1253   windows-1253              True     True     True     True     True     True     \n&#39;1254   windows-1254              True     True     True     True     True     True     \n&#39;1255   windows-1255              True     True     True     True     True     True     \n&#39;1256   windows-1256              True     True     True     True     True     True     \n&#39;1257   windows-1257              True     True     True     True     True     True     \n&#39;1258   windows-1258              True     True     True     True     True     True     \n&#39;1361   Johab                     False    False    False    False    False    True     \n&#39;10000  macintosh                 False    False    False    False    True     True     \n&#39;10001  x-mac-japanese            False    False    False    False    False    True     \n&#39;10002  x-mac-chinesetrad         False    False    False    False    False    True     \n&#39;10003  x-mac-korean              False    False    False    False    False    True     \n&#39;10004  x-mac-arabic              False    False    False    False    True     True     \n&#39;10005  x-mac-hebrew              False    False    False    False    True     True     \n&#39;10006  x-mac-greek               False    False    False    False    True     True     \n&#39;10007  x-mac-cyrillic            False    False    False    False    True     True     \n&#39;10008  x-mac-chinesesimp         False    False    False    False    False    True     \n&#39;10010  x-mac-romanian            False    False    False    False    True     True     \n&#39;10017  x-mac-ukrainian           False    False    False    False    True     True     \n&#39;10021  x-mac-thai                False    False    False    False    True     True     \n&#39;10029  x-mac-ce                  False    False    False    False    True     True     \n&#39;10079  x-mac-icelandic           False    False    False    False    True     True     \n&#39;10081  x-mac-turkish             False    False    False    False    True     True     \n&#39;10082  x-mac-croatian            False    False    False    False    True     True     \n&#39;12000  utf-32                    False    False    False    False    False    True     \n&#39;12001  utf-32BE                  False    False    False    False    False    True     \n&#39;20000  x-Chinese-CNS             False    False    False    False    False    True     \n&#39;20001  x-cp20001                 False    False    False    False    False    True     \n&#39;20002  x-Chinese-Eten            False    False    False    False    False    True     \n&#39;20003  x-cp20003                 False    False    False    False    False    True     \n&#39;20004  x-cp20004                 False    False    False    False    False    True     \n&#39;20005  x-cp20005                 False    False    False    False    False    True     \n&#39;20105  x-IA5                     False    False    False    False    True     True     \n&#39;20106  x-IA5-German              False    False    False    False    True     True     \n&#39;20107  x-IA5-Swedish             False    False    False    False    True     True     \n&#39;20108  x-IA5-Norwegian           False    False    False    False    True     True     \n&#39;20127  us-ascii                  False    False    True     True     True     True     \n&#39;20261  x-cp20261                 False    False    False    False    False    True     \n&#39;20269  x-cp20269                 False    False    False    False    True     True     \n&#39;20273  IBM273                    False    False    False    False    True     True     \n&#39;20277  IBM277                    False    False    False    False    True     True     \n&#39;20278  IBM278                    False    False    False    False    True     True     \n&#39;20280  IBM280                    False    False    False    False    True     True     \n&#39;20284  IBM284                    False    False    False    False    True     True     \n&#39;20285  IBM285                    False    False    False    False    True     True     \n&#39;20290  IBM290                    False    False    False    False    True     True     \n&#39;20297  IBM297                    False    False    False    False    True     True     \n&#39;20420  IBM420                    False    False    False    False    True     True     \n&#39;20423  IBM423                    False    False    False    False    True     True     \n&#39;20424  IBM424                    False    False    False    False    True     True     \n&#39;20833  x-EBCDIC-KoreanExtended   False    False    False    False    True     True     \n&#39;20838  IBM-Thai                  False    False    False    False    True     True     \n&#39;20866  koi8-r                    True     True     True     True     True     True     \n&#39;20871  IBM871                    False    False    False    False    True     True     \n&#39;20880  IBM880                    False    False    False    False    True     True     \n&#39;20905  IBM905                    False    False    False    False    True     True     \n&#39;20924  IBM00924                  False    False    False    False    True     True     \n&#39;20932  EUC-JP                    False    False    False    False    False    True     \n&#39;20936  x-cp20936                 False    False    False    False    False    True     \n&#39;20949  x-cp20949                 False    False    False    False    False    True     \n&#39;21025  cp1025                    False    False    False    False    True     True     \n&#39;21866  koi8-u                    True     True     True     True     True     True     \n&#39;28591  iso-8859-1                True     True     True     True     True     True     \n&#39;28592  iso-8859-2                True     True     True     True     True     True     \n&#39;28593  iso-8859-3                False    False    True     True     True     True     \n&#39;28594  iso-8859-4                True     True     True     True     True     True     \n&#39;28595  iso-8859-5                True     True     True     True     True     True     \n&#39;28596  iso-8859-6                True     True     True     True     True     True     \n&#39;28597  iso-8859-7                True     True     True     True     True     True     \n&#39;28598  iso-8859-8                True     True     False    False    True     True     \n&#39;28599  iso-8859-9                True     True     True     True     True     True     \n&#39;28603  iso-8859-13               False    False    True     True     True     True     \n&#39;28605  iso-8859-15               False    True     True     True     True     True     \n&#39;29001  x-Europa                  False    False    False    False    True     True     \n&#39;38598  iso-8859-8-i              True     True     True     True     True     True     \n&#39;50220  iso-2022-jp               False    False    True     True     False    True     \n&#39;50221  csISO2022JP               False    True     True     True     False    True     \n&#39;50222  iso-2022-jp               False    False    False    False    False    True     \n&#39;50225  iso-2022-kr               False    False    True     False    False    True     \n&#39;50227  x-cp50227                 False    False    False    False    False    True     \n&#39;51932  euc-jp                    True     True     True     True     False    True     \n&#39;51936  EUC-CN                    False    False    False    False    False    True     \n&#39;51949  euc-kr                    False    False    True     True     False    True     \n&#39;52936  hz-gb-2312                True     True     True     True     False    True     \n&#39;54936  GB18030                   True     True     True     True     False    True     \n&#39;57002  x-iscii-de                False    False    False    False    False    True     \n&#39;57003  x-iscii-be                False    False    False    False    False    True     \n&#39;57004  x-iscii-ta                False    False    False    False    False    True     \n&#39;57005  x-iscii-te                False    False    False    False    False    True     \n&#39;57006  x-iscii-as                False    False    False    False    False    True     \n&#39;57007  x-iscii-or                False    False    False    False    False    True     \n&#39;57008  x-iscii-ka                False    False    False    False    False    True     \n&#39;57009  x-iscii-ma                False    False    False    False    False    True     \n&#39;57010  x-iscii-gu                False    False    False    False    False    True     \n&#39;57011  x-iscii-pa                False    False    False    False    False    True     \n&#39;65000  utf-7                     False    False    True     True     False    True     \n&#39;65001  utf-8                     True     True     True     True     False    True     \n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_GetHashCode\">\r\n    \r\n            <a id=\"System_Text_Encoding_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the hash code for the current instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The hash code for the current instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_GetMaxByteCount_System_Int32_\">\r\n    \r\n            <a id=\"System_Text_Encoding_GetMaxByteCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMaxByteCount(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, calculates the maximum number of bytes produced by encoding the specified number of characters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract int GetMaxByteCount (int charCount);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>charCount</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of characters to encode.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The maximum number of bytes produced by encoding the specified number of characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>charCount</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallbackexception\" data-linktype=\"relative-path\">EncoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for complete explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.EncoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.encoderexceptionfallback\" data-linktype=\"relative-path\">EncoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>charCount</code> parameter actually specifies the number of <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> objects that represent the Unicode characters to encode, because the .NET Framework internally uses UTF-16 to represent Unicode characters. Consequently, most Unicode characters can be represented by one <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object, but a Unicode character represented by a surrogate pair, for example, requires two <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> objects.  </p>\n<p> To calculate the exact array size required by <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> to store the resulting bytes, you should use the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method. To calculate the maximum array size, use the GetMaxByteCount method. The <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method generally allows allocation of less memory, while the GetMaxByteCount method generally executes faster.  </p>\n<p> GetMaxByteCount retrieves a worst-case number, including the worst case for the currently selected <a class=\"xref\" href=\"system.text.encoderfallback\" data-linktype=\"relative-path\">EncoderFallback</a>. If a fallback is chosen with a potentially large string, GetMaxByteCount retrieves large values, particularly in cases where the worst case for the encoding involves switching modes for every character. For example, this can happen for ISO-2022-JP. For more information, see the blog entry &quot;<a href=\"http://go.microsoft.com/fwlink/?LinkId=153702\" data-linktype=\"external\">What&#39;s with Encoding.GetMaxByteCount() and Encoding.GetMaxCharCount()?</a>&quot; (<a href=\"http://blogs.msdn.com/shawnste/archive/2005/03/02/383903.aspx\" data-linktype=\"external\">http://blogs.msdn.com/shawnste/archive/2005/03/02/383903.aspx</a>).  </p>\n<p> In most cases, this method retrieves reasonable values for small strings. For large strings, you might have to choose between using very large buffers and catching errors in the rare case when a more reasonable buffer is too small. You might also want to consider a different approach using <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> or <a class=\"xref\" href=\"system.text.encoder#System_Text_Encoder_Convert_\" data-linktype=\"relative-path\">Convert</a>.  </p>\n<p> When using GetMaxByteCount, you should allocate the output buffer based on the maximum size of the input buffer. If the output buffer is constrained in size, you might use the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_Convert_\" data-linktype=\"relative-path\">Convert</a> method.  </p>\n<p> Note that GetMaxByteCount considers potential leftover surrogates from a previous decoder operation. Because of the decoder, passing a value of 1 to the method retrieves 2 for a single-byte encoding, such as ASCII. You should use the <a class=\"xref\" href=\"system.text.asciiencoding#System_Text_ASCIIEncoding_IsSingleByte_\" data-linktype=\"relative-path\">IsSingleByte</a> property if this information is necessary.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> <code>GetMaxByteCount(N)</code> is not necessarily the same value as <code>N* GetMaxByteCount(1)</code>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines the number of bytes required to encode a character array, encodes the characters, and displays the resulting bytes.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Text.Encoding.GetBytes_CharArr#1\">Imports System\nImports System.Text\nImports Microsoft.VisualBasic\n\nPublic Class SamplesEncoding   \n\n   Public Shared Sub Main()\n\n      &#39; The characters to encode:\n      &#39;    Latin Small Letter Z (U+007A)\n      &#39;    Latin Small Letter A (U+0061)\n      &#39;    Combining Breve (U+0306)\n      &#39;    Latin Small Letter AE With Acute (U+01FD)\n      &#39;    Greek Small Letter Beta (U+03B2)\n      &#39;    a high-surrogate value (U+D8FF)\n      &#39;    a low-surrogate value (U+DCFF)\n      Dim myChars() As Char = {&quot;z&quot;c, &quot;a&quot;c, ChrW(&amp;H0306), ChrW(&amp;H01FD), ChrW(&amp;H03B2), ChrW(&amp;HD8FF), ChrW(&amp;HDCFF)}\n \n\n      &#39; Get different encodings.\n      Dim u7 As Encoding = Encoding.UTF7\n      Dim u8 As Encoding = Encoding.UTF8\n      Dim u16LE As Encoding = Encoding.Unicode\n      Dim u16BE As Encoding = Encoding.BigEndianUnicode\n      Dim u32 As Encoding = Encoding.UTF32\n\n      &#39; Encode the entire array, and print out the counts and the resulting bytes.\n      PrintCountsAndBytes(myChars, u7)\n      PrintCountsAndBytes(myChars, u8)\n      PrintCountsAndBytes(myChars, u16LE)\n      PrintCountsAndBytes(myChars, u16BE)\n      PrintCountsAndBytes(myChars, u32)\n\n   End Sub &#39;Main\n\n\n   Public Shared Sub PrintCountsAndBytes(chars() As Char, enc As Encoding)\n\n      &#39; Display the name of the encoding used.\n      Console.Write(&quot;{0,-30} :&quot;, enc.ToString())\n\n      &#39; Display the exact byte count.\n      Dim iBC As Integer = enc.GetByteCount(chars)\n      Console.Write(&quot; {0,-3}&quot;, iBC)\n\n      &#39; Display the maximum byte count.\n      Dim iMBC As Integer = enc.GetMaxByteCount(chars.Length)\n      Console.Write(&quot; {0,-3} :&quot;, iMBC)\n\n      &#39; Encode the array of chars.\n      Dim bytes As Byte() = enc.GetBytes(chars)\n\n      &#39; Display all the encoded bytes.\n      PrintHexBytes(bytes)\n\n   End Sub &#39;PrintCountsAndBytes\n\n\n   Public Shared Sub PrintHexBytes(bytes() As Byte)\n\n      If bytes Is Nothing OrElse bytes.Length = 0 Then\n         Console.WriteLine(&quot;&lt;none&gt;&quot;)\n      Else\n         Dim i As Integer\n         For i = 0 To bytes.Length - 1\n            Console.Write(&quot;{0:X2} &quot;, bytes(i))\n         Next i\n         Console.WriteLine()\n      End If\n\n   End Sub &#39;PrintHexBytes \n\nEnd Class &#39;SamplesEncoding\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;System.Text.UTF7Encoding       : 18  23  :7A 61 2B 41 77 59 42 2F 51 4F 79 32 50 2F 63 2F 77 2D\n&#39;System.Text.UTF8Encoding       : 12  24  :7A 61 CC 86 C7 BD CE B2 F1 8F B3 BF\n&#39;System.Text.UnicodeEncoding    : 14  16  :7A 00 61 00 06 03 FD 01 B2 03 FF D8 FF DC\n&#39;System.Text.UnicodeEncoding    : 14  16  :00 7A 00 61 03 06 01 FD 03 B2 D8 FF DC FF\n&#39;System.Text.UTF32Encoding      : 24  32  :7A 00 00 00 61 00 00 00 06 03 00 00 FD 01 00 00 B2 03 00 00 FF FC 04 00\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.Encoding.GetBytes_CharArr#1\">using System;\nusing System.Text;\n\npublic class SamplesEncoding  {\n\n   public static void Main()  {\n\n      // The characters to encode:\n      //    Latin Small Letter Z (U+007A)\n      //    Latin Small Letter A (U+0061)\n      //    Combining Breve (U+0306)\n      //    Latin Small Letter AE With Acute (U+01FD)\n      //    Greek Small Letter Beta (U+03B2)\n      //    a high-surrogate value (U+D8FF)\n      //    a low-surrogate value (U+DCFF)\n      char[] myChars = new char[] { &#39;z&#39;, &#39;a&#39;, &#39;\\u0306&#39;, &#39;\\u01FD&#39;, &#39;\\u03B2&#39;, &#39;\\uD8FF&#39;, &#39;\\uDCFF&#39; };\n\n      // Get different encodings.\n      Encoding  u7    = Encoding.UTF7;\n      Encoding  u8    = Encoding.UTF8;\n      Encoding  u16LE = Encoding.Unicode;\n      Encoding  u16BE = Encoding.BigEndianUnicode;\n      Encoding  u32   = Encoding.UTF32;\n\n      // Encode the entire array, and print out the counts and the resulting bytes.\n      PrintCountsAndBytes( myChars, u7 );\n      PrintCountsAndBytes( myChars, u8 );\n      PrintCountsAndBytes( myChars, u16LE );\n      PrintCountsAndBytes( myChars, u16BE );\n      PrintCountsAndBytes( myChars, u32 );\n\n   }\n\n\n   public static void PrintCountsAndBytes( char[] chars, Encoding enc )  {\n\n      // Display the name of the encoding used.\n      Console.Write( &quot;{0,-30} :&quot;, enc.ToString() );\n\n      // Display the exact byte count.\n      int iBC  = enc.GetByteCount( chars );\n      Console.Write( &quot; {0,-3}&quot;, iBC );\n\n      // Display the maximum byte count.\n      int iMBC = enc.GetMaxByteCount( chars.Length );\n      Console.Write( &quot; {0,-3} :&quot;, iMBC );\n\n      // Encode the array of chars.\n      byte[] bytes = enc.GetBytes( chars );\n\n      // Display all the encoded bytes.\n      PrintHexBytes( bytes );\n\n   }\n\n\n   public static void PrintHexBytes( byte[] bytes )  {\n\n      if (( bytes == null ) || ( bytes.Length == 0 ))\n         Console.WriteLine( &quot;&lt;none&gt;&quot; );\n      else  {\n         for ( int i = 0; i &lt; bytes.Length; i++ )\n            Console.Write( &quot;{0:X2} &quot;, bytes[i] );\n         Console.WriteLine();\n      }\n\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nSystem.Text.UTF7Encoding       : 18  23  :7A 61 2B 41 77 59 42 2F 51 4F 79 32 50 2F 63 2F 77 2D\nSystem.Text.UTF8Encoding       : 12  24  :7A 61 CC 86 C7 BD CE B2 F1 8F B3 BF\nSystem.Text.UnicodeEncoding    : 14  16  :7A 00 61 00 06 03 FD 01 B2 03 FF D8 FF DC\nSystem.Text.UnicodeEncoding    : 14  16  :00 7A 00 61 03 06 01 FD 03 B2 D8 FF DC FF\nSystem.Text.UTF32Encoding      : 24  32  :7A 00 00 00 61 00 00 00 06 03 00 00 FD 01 00 00 B2 03 00 00 FF FC 04 00\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.Encoding.GetBytes_CharArr#1\">using namespace System;\nusing namespace System::Text;\nvoid PrintCountsAndBytes( array&lt;Char&gt;^chars, Encoding^ enc );\nvoid PrintHexBytes( array&lt;Byte&gt;^bytes );\nint main()\n{\n   \n   // The characters to encode:\n   //    Latin Small Letter Z (U+007A)\n   //    Latin Small Letter A (U+0061)\n   //    Combining Breve (U+0306)\n   //    Latin Small Letter AE With Acute (U+01FD)\n   //    Greek Small Letter Beta (U+03B2)\n   //    a high-surrogate value (U+D8FF)\n   //    a low-surrogate value (U+DCFF)\n   array&lt;Char&gt;^myChars = gcnew array&lt;Char&gt;{\n      L&#39;z&#39;,&#39;a&#39;,L&#39;\\u0306&#39;,L&#39;\\u01FD&#39;,L&#39;\\u03B2&#39;,L&#39;\\xD8FF&#39;,L&#39;\\xDCFF&#39;\n   };\n   \n   // Get different encodings.\n   Encoding^ u7 = Encoding::UTF7;\n   Encoding^ u8 = Encoding::UTF8;\n   Encoding^ u16LE = Encoding::Unicode;\n   Encoding^ u16BE = Encoding::BigEndianUnicode;\n   Encoding^ u32 = Encoding::UTF32;\n   \n   // Encode the entire array, and print out the counts and the resulting bytes.\n   PrintCountsAndBytes( myChars, u7 );\n   PrintCountsAndBytes( myChars, u8 );\n   PrintCountsAndBytes( myChars, u16LE );\n   PrintCountsAndBytes( myChars, u16BE );\n   PrintCountsAndBytes( myChars, u32 );\n}\n\nvoid PrintCountsAndBytes( array&lt;Char&gt;^chars, Encoding^ enc )\n{\n   \n   // Display the name of the encoding used.\n   Console::Write( &quot;{0,-30} :&quot;, enc );\n   \n   // Display the exact byte count.\n   int iBC = enc-&gt;GetByteCount( chars );\n   Console::Write( &quot; {0,-3}&quot;, iBC );\n   \n   // Display the maximum byte count.\n   int iMBC = enc-&gt;GetMaxByteCount( chars-&gt;Length );\n   Console::Write( &quot; {0,-3} :&quot;, iMBC );\n   \n   // Encode the array of chars.\n   array&lt;Byte&gt;^bytes = enc-&gt;GetBytes( chars );\n   \n   // Display all the encoded bytes.\n   PrintHexBytes( bytes );\n}\n\nvoid PrintHexBytes( array&lt;Byte&gt;^bytes )\n{\n   if ( (bytes == nullptr) || (bytes-&gt;Length == 0) )\n      Console::WriteLine( &quot;&lt;none&gt;&quot; );\n   else\n   {\n      for ( int i = 0; i &lt; bytes-&gt;Length; i++ )\n         Console::Write( &quot;{0:X2} &quot;, bytes[ i ] );\n      Console::WriteLine();\n   }\n}\n\n/* \nThis code produces the following output.\n\nSystem.Text.UTF7Encoding       : 18  23  :7A 61 2B 41 77 59 42 2F 51 4F 79 32 50 2F 63 2F 77 2D\nSystem.Text.UTF8Encoding       : 12  24  :7A 61 CC 86 C7 BD CE B2 F1 8F B3 BF\nSystem.Text.UnicodeEncoding    : 14  16  :7A 00 61 00 06 03 FD 01 B2 03 FF D8 FF DC\nSystem.Text.UnicodeEncoding    : 14  16  :00 7A 00 61 03 06 01 FD 03 B2 D8 FF DC FF\nSystem.Text.UTF32Encoding      : 24  32  :7A 00 00 00 61 00 00 00 06 03 00 00 FD 01 00 00 B2 03 00 00 FF FC 04 00\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_GetMaxCharCount_System_Int32_\">\r\n    \r\n            <a id=\"System_Text_Encoding_GetMaxCharCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMaxCharCount(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, calculates the maximum number of characters produced by decoding the specified number of bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract int GetMaxCharCount (int byteCount);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>byteCount</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes to decode.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The maximum number of characters produced by decoding the specified number of bytes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>byteCount</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoderfallbackexception\" data-linktype=\"relative-path\">DecoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for complete explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.DecoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.decoderexceptionfallback\" data-linktype=\"relative-path\">DecoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To calculate the exact array size required by <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a> to store the resulting characters, you should use the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a> method. To calculate the maximum array size, use the GetMaxCharCount method. The <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a> method generally allows allocation of less memory, while the GetMaxCharCount method generally executes faster.  </p>\n<p> GetMaxCharCount retrieves a worst-case number, including the worst case for the currently selected <a class=\"xref\" href=\"system.text.decoderfallback\" data-linktype=\"relative-path\">DecoderFallback</a>. If a fallback is chosen with a potentially large string, GetMaxCharCount retrieves large values.  </p>\n<p> In most cases, this method retrieves reasonable numbers for small strings. For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is too small. You might also want to consider a different approach using <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a> or <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_Convert_\" data-linktype=\"relative-path\">Convert</a>.  </p>\n<p> GetMaxCharCount has no relation to <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a>. If you needs a similar function to use with <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a>, you should use <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a>.  </p>\n<p> When using GetMaxCharCount, you should allocate the output buffer based on the maximum size of the input buffer. If the output buffer is constrained in size, you might use the <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_Convert_\" data-linktype=\"relative-path\">Convert</a> method.  </p>\n<p> Note that GetMaxCharCount considers the worst case for leftover bytes from a previous encoder operation. For most code pages, passing a value of 0 to this method retrieves values greater than or equal to 1.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> <code>GetMaxCharCount(N)</code> is not necessarily the same value as <code>N* GetMaxCharCount(1)</code>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example encodes a string into an array of bytes, and then decodes the bytes into an array of characters.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Text.Encoding.GetChars#1\">using namespace System;\nusing namespace System::Text;\nvoid PrintCountsAndChars( array&lt;Byte&gt;^bytes, Encoding^ enc );\nint main()\n{\n   \n   // Create two instances of UTF32Encoding: one with little-endian byte order and one with big-endian byte order.\n   Encoding^ u32LE = Encoding::GetEncoding( &quot;utf-32&quot; );\n   Encoding^ u32BE = Encoding::GetEncoding( &quot;utf-32BE&quot; );\n   \n   // Use a string containing the following characters:\n   //    Latin Small Letter Z (U+007A)\n   //    Latin Small Letter A (U+0061)\n   //    Combining Breve (U+0306)\n   //    Latin Small Letter AE With Acute (U+01FD)\n   //    Greek Small Letter Beta (U+03B2)\n   String^ myStr = &quot;za\\u0306\\u01FD\\u03B2&quot;;\n   \n   // Encode the string using the big-endian byte order.\n   array&lt;Byte&gt;^barrBE = gcnew array&lt;Byte&gt;(u32BE-&gt;GetByteCount( myStr ));\n   u32BE-&gt;GetBytes( myStr, 0, myStr-&gt;Length, barrBE, 0 );\n   \n   // Encode the string using the little-endian byte order.\n   array&lt;Byte&gt;^barrLE = gcnew array&lt;Byte&gt;(u32LE-&gt;GetByteCount( myStr ));\n   u32LE-&gt;GetBytes( myStr, 0, myStr-&gt;Length, barrLE, 0 );\n   \n   // Get the char counts, and decode the byte arrays.\n   Console::Write( &quot;BE array with BE encoding : &quot; );\n   PrintCountsAndChars( barrBE, u32BE );\n   Console::Write( &quot;LE array with LE encoding : &quot; );\n   PrintCountsAndChars( barrLE, u32LE );\n}\n\nvoid PrintCountsAndChars( array&lt;Byte&gt;^bytes, Encoding^ enc )\n{\n   \n   // Display the name of the encoding used.\n   Console::Write( &quot;{0,-25} :&quot;, enc );\n   \n   // Display the exact character count.\n   int iCC = enc-&gt;GetCharCount( bytes );\n   Console::Write( &quot; {0,-3}&quot;, iCC );\n   \n   // Display the maximum character count.\n   int iMCC = enc-&gt;GetMaxCharCount( bytes-&gt;Length );\n   Console::Write( &quot; {0,-3} :&quot;, iMCC );\n   \n   // Decode the bytes and display the characters.\n   array&lt;Char&gt;^chars = enc-&gt;GetChars( bytes );\n   Console::WriteLine( chars );\n}\n\n/* \nThis code produces the following output.  The question marks take the place of characters that cannot be displayed at the console.\n\nBE array with BE encoding : System.Text.UTF32Encoding : 5   12  :za??�\nLE array with LE encoding : System.Text.UTF32Encoding : 5   12  :za??�\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.Encoding.GetChars#1\">Imports System\nImports System.Text\nImports Microsoft.VisualBasic\n\nPublic Class SamplesEncoding   \n\n   Public Shared Sub Main()\n\n      &#39; Create two instances of UTF32Encoding: one with little-endian byte order and one with big-endian byte order.\n      Dim u32LE As Encoding = Encoding.GetEncoding(&quot;utf-32&quot;)\n      Dim u32BE As Encoding = Encoding.GetEncoding(&quot;utf-32BE&quot;)\n\n      &#39; Use a string containing the following characters:\n      &#39;    Latin Small Letter Z (U+007A)\n      &#39;    Latin Small Letter A (U+0061)\n      &#39;    Combining Breve (U+0306)\n      &#39;    Latin Small Letter AE With Acute (U+01FD)\n      &#39;    Greek Small Letter Beta (U+03B2)\n      Dim myStr As String = &quot;za&quot; &amp; ChrW(&amp;H0306) &amp; ChrW(&amp;H01FD) &amp; ChrW(&amp;H03B2) \n\n      &#39; Encode the string using the big-endian byte order.\n      &#39; NOTE: In VB.NET, arrays contain one extra element by default.\n      &#39;       The following line creates the array with the exact number of elements required.\n      Dim barrBE(u32BE.GetByteCount(myStr) - 1) As Byte\n      u32BE.GetBytes(myStr, 0, myStr.Length, barrBE, 0)\n\n      &#39; Encode the string using the little-endian byte order.\n      &#39; NOTE: In VB.NET, arrays contain one extra element by default.\n      &#39;       The following line creates the array with the exact number of elements required.\n      Dim barrLE(u32LE.GetByteCount(myStr) - 1) As Byte\n      u32LE.GetBytes(myStr, 0, myStr.Length, barrLE, 0)\n\n      &#39; Get the char counts, and decode the byte arrays.\n      Console.Write(&quot;BE array with BE encoding : &quot;)\n      PrintCountsAndChars(barrBE, u32BE)\n      Console.Write(&quot;LE array with LE encoding : &quot;)\n      PrintCountsAndChars(barrLE, u32LE)\n\n   End Sub &#39;Main\n\n\n   Public Shared Sub PrintCountsAndChars(bytes() As Byte, enc As Encoding)\n\n      &#39; Display the name of the encoding used.\n      Console.Write(&quot;{0,-25} :&quot;, enc.ToString())\n\n      &#39; Display the exact character count.\n      Dim iCC As Integer = enc.GetCharCount(bytes)\n      Console.Write(&quot; {0,-3}&quot;, iCC)\n\n      &#39; Display the maximum character count.\n      Dim iMCC As Integer = enc.GetMaxCharCount(bytes.Length)\n      Console.Write(&quot; {0,-3} :&quot;, iMCC)\n\n      &#39; Decode the bytes and display the characters.\n      Dim chars As Char() = enc.GetChars(bytes)\n      Console.WriteLine(chars)\n\n   End Sub &#39;PrintCountsAndChars \n\nEnd Class &#39;SamplesEncoding\n\n\n&#39;This code produces the following output.  The question marks take the place of characters that cannot be displayed at the console.\n&#39;\n&#39;BE array with BE encoding : System.Text.UTF32Encoding : 5   12  :za??�\n&#39;LE array with LE encoding : System.Text.UTF32Encoding : 5   12  :za??�\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.Encoding.GetChars#1\">using System;\nusing System.Text;\n\npublic class SamplesEncoding  {\n\n   public static void Main()  {\n\n      // Create two instances of UTF32Encoding: one with little-endian byte order and one with big-endian byte order.\n      Encoding u32LE = Encoding.GetEncoding( &quot;utf-32&quot; );\n      Encoding u32BE = Encoding.GetEncoding( &quot;utf-32BE&quot; );\n\n      // Use a string containing the following characters:\n      //    Latin Small Letter Z (U+007A)\n      //    Latin Small Letter A (U+0061)\n      //    Combining Breve (U+0306)\n      //    Latin Small Letter AE With Acute (U+01FD)\n      //    Greek Small Letter Beta (U+03B2)\n      String myStr = &quot;za\\u0306\\u01FD\\u03B2&quot;;\n\n      // Encode the string using the big-endian byte order.\n      byte[] barrBE = new byte[u32BE.GetByteCount( myStr )];\n      u32BE.GetBytes( myStr, 0, myStr.Length, barrBE, 0 );\n\n      // Encode the string using the little-endian byte order.\n      byte[] barrLE = new byte[u32LE.GetByteCount( myStr )];\n      u32LE.GetBytes( myStr, 0, myStr.Length, barrLE, 0 );\n\n      // Get the char counts, and decode the byte arrays.\n      Console.Write( &quot;BE array with BE encoding : &quot; );\n      PrintCountsAndChars( barrBE, u32BE );\n      Console.Write( &quot;LE array with LE encoding : &quot; );\n      PrintCountsAndChars( barrLE, u32LE );\n\n   }\n\n\n   public static void PrintCountsAndChars( byte[] bytes, Encoding enc )  {\n\n      // Display the name of the encoding used.\n      Console.Write( &quot;{0,-25} :&quot;, enc.ToString() );\n\n      // Display the exact character count.\n      int iCC  = enc.GetCharCount( bytes );\n      Console.Write( &quot; {0,-3}&quot;, iCC );\n\n      // Display the maximum character count.\n      int iMCC = enc.GetMaxCharCount( bytes.Length );\n      Console.Write( &quot; {0,-3} :&quot;, iMCC );\n\n      // Decode the bytes and display the characters.\n      char[] chars = enc.GetChars( bytes );\n      Console.WriteLine( chars );\n\n   }\n\n}\n\n\n/* \nThis code produces the following output.  The question marks take the place of characters that cannot be displayed at the console.\n\nBE array with BE encoding : System.Text.UTF32Encoding : 5   12  :za??�\nLE array with LE encoding : System.Text.UTF32Encoding : 5   12  :za??�\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_GetPreamble\">\r\n    \r\n            <a id=\"System_Text_Encoding_GetPreamble_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetPreamble()</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, returns a sequence of bytes that specifies the encoding used.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual byte[] GetPreamble ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>A byte array containing a sequence of bytes that specifies the encoding used.  </p>\n<p> -or-  </p>\n<p> A byte array of length zero, if a preamble is not required.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Optionally, the <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> object provides a preamble that is an array of bytes that can be prefixed to the sequence of bytes resulting from the encoding process. If the preamble contains a byte order mark (in Unicode, code point U+FEFF), it helps the decoder determine the byte order and the transformation format or UTF.  </p>\n<p> The Unicode byte order mark (BOM) is serialized as follows (in hexadecimal):  </p>\n<ul>\n<li><p>UTF-8: EF BB BF  </p>\n</li>\n<li><p>UTF-16 big endian byte order: FE FF  </p>\n</li>\n<li><p>UTF-16 little endian byte order: FF FE  </p>\n</li>\n<li><p>UTF-32 big endian byte order: 00 00 FE FF  </p>\n</li>\n<li><p>UTF-32 little endian byte order: FF FE 00 00  </p>\n<p>You should use the BOM, because it provides nearly certain identification of an encoding for files that otherwise have lost reference to the <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> object, for example, untagged or improperly tagged web data or random text files stored when a business did not have international concerns or other data. Often user problems might be avoided if data is consistently and properly tagged, preferably in UTF-8 or UTF-16.  </p>\n<p>For standards that provide an encoding type, a BOM is somewhat redundant. However, it can be used to help a server send the correct encoding header. Alternatively, it can be used as a fallback in case the encoding is otherwise lost.  </p>\n<p>There are some disadvantages to using a BOM. For example, knowing how to limit the database fields that use a BOM can be difficult. Concatenation of files can be a problem also, for example, when files are merged in such a way that an unnecessary character can end up in the middle of data. In spite of the few disadvantages, however, the use of a BOM is highly recommended.  </p>\n<p>For more information on byte order and the byte order mark, see The Unicode Standard at the <a href=\"http://go.microsoft.com/fwlink/?LinkId=37123\" data-linktype=\"external\">Unicode home page</a>.  </p>\n</li>\n</ul>\n<div class=\"CAUTION\"><h5>Caution</h5><p> To ensure that the encoded bytes are decoded properly, you should prefix encoded bytes with a preamble. However, most encodings do not provide a preamble. To ensure that the encoded bytes are decoded properly, you should use a Unicode encoding, that is, <a class=\"xref\" href=\"system.text.utf8encoding\" data-linktype=\"relative-path\">UTF8Encoding</a>, <a class=\"xref\" href=\"system.text.unicodeencoding\" data-linktype=\"relative-path\">UnicodeEncoding</a>, or <a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a>, with a preamble.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines the byte order of the encoding based on the preamble.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.Encoding.GetPreamble Example#1\">using System;\nusing System.Text;\n\nnamespace GetPreambleExample\n{\n   class GetPreambleExampleClass\n   {\n      static void Main()\n      {\n         Encoding unicode = Encoding.Unicode;\n\n         // Get the preamble for the Unicode encoder. \n         // In this case the preamble contains the byte order mark (BOM).\n         byte[] preamble = unicode.GetPreamble();\n\n         // Make sure a preamble was returned \n         // and is large enough to containa BOM.\n         if(preamble.Length &gt;= 2)\n         {\n            if(preamble[0] == 0xFE &amp;&amp; preamble[1] == 0xFF)\n            {\n               Console.WriteLine(&quot;The Unicode encoder is encoding in big-endian order.&quot;);\n            }\n            else if(preamble[0] == 0xFF &amp;&amp; preamble[1] == 0xFE)\n            {\n               Console.WriteLine(&quot;The Unicode encoder is encoding in little-endian order.&quot;);\n            }\n         }\n      }\n   }\n}\n\n/*\nThis code produces the following output.\n\nThe Unicode encoder is encoding in little-endian order.\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.Encoding.GetPreamble Example#1\">using namespace System;\nusing namespace System::Text;\nint main()\n{\n   Encoding^ unicode = Encoding::Unicode;\n   \n   // Get the preamble for the Unicode encoder. \n   // In this case the preamblecontains the Byte order mark (BOM).\n   array&lt;Byte&gt;^preamble = unicode-&gt;GetPreamble();\n   \n   // Make sure a preamble was returned \n   // and is large enough to containa BOM.\n   if ( preamble-&gt;Length &gt;= 2 )\n   {\n      \n      // if (preamble-&gt;Item[0] == 0xFE &amp;&amp; preamble-&gt;Item[1] == 0xFF) \n      if ( preamble[ 0 ] == 0xFE &amp;&amp; preamble[ 1 ] == 0xFF )\n      {\n         Console::WriteLine( &quot;The Unicode encoder is encoding in big-endian order.&quot; );\n      }\n      // else if (preamble-&gt;Item[0] == 0xFF &amp;&amp; preamble-&gt;Item[1] == 0xFE) \n      else\n      \n      // else if (preamble-&gt;Item[0] == 0xFF &amp;&amp; preamble-&gt;Item[1] == 0xFE) \n      if ( preamble[ 0 ] == 0xFF &amp;&amp; preamble[ 1 ] == 0xFE )\n      {\n         Console::WriteLine( &quot;The Unicode encoder is encoding in little-endian order.&quot; );\n      }\n   }\n}\n\n/*\nThis code produces the following output.\n\nThe Unicode encoder is encoding in little-endian order.\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.Encoding.GetPreamble Example#1\">Imports System\nImports System.Text\n\nNamespace GetPreambleExample\n   Class GetPreambleExampleClass\n      Shared Sub Main()\n         Dim [unicode] As Encoding = Encoding.Unicode\n\n         &#39; Get the preamble for the Unicode encoder. \n         &#39; In this case the preamble contains the byte order mark (BOM).\n         Dim preamble As Byte() = [unicode].GetPreamble()\n\n         &#39; Make sure a preamble was returned \n         &#39; and is large enough to contain a BOM.\n         If preamble.Length &gt;= 2 Then\n            If preamble(0) = &amp;HFE And preamble(1) = &amp;HFF Then\n               Console.WriteLine(&quot;The Unicode encoder is encoding in big-endian order.&quot;)\n            Else\n               If preamble(0) = &amp;HFF And preamble(1) = &amp;HFE Then\n                  Console.WriteLine(&quot;The Unicode encoder is encoding in little-endian order.&quot;)\n               End If\n            End If\n         End If\n      End Sub\n   End Class\nEnd Namespace\n\n&#39;This code produces the following output.\n&#39;\n&#39;The Unicode encoder is encoding in little-endian order.\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_GetString_System_Byte___\">\r\n    \r\n            <a id=\"System_Text_Encoding_GetString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetString(Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, decodes all the bytes in the specified byte array into a string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string GetString (byte[] bytes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The byte array containing the sequence of bytes to decode.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that contains the results of decoding the specified sequence of bytes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The byte array contains invalid Unicode code points.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>bytes</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoderfallbackexception\" data-linktype=\"relative-path\">DecoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for complete explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.DecoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.decoderexceptionfallback\" data-linktype=\"relative-path\">DecoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> object returned by the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetDecoder_\" data-linktype=\"relative-path\">GetDecoder</a> method of a derived class.  </p>\n<p> See the Remarks section of the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a> reference topic for a discussion of decoding techniques and considerations.  </p>\n<p> Note that the precise behavior of the GetString method for a particular <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> implementation depends on the fallback strategy defined for that <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> object. For more information, see the &quot;Choosing a Fallback Strategy&quot; section of the <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> topic.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads a UTF-8 encoded string from a binary file represented by a <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a> object. For files that are smaller than 2,048 bytes, it reads the contents of the entire file into a byte array and calls the GetString method to perform the decoding. For larger files, it reads 2,048 bytes at a time into a byte array, calls the [Decoder.GetCharCount(Byte&lt;xref:System.Text.Decoder.GetCharCount%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName&gt; method to determine how many characters are contained in the array, and then calls the [Decoder.GetChars(Byte[], Int32, Int32, Char&lt;xref:System.Text.Decoder.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29?displayProperty=fullName&gt; method to perform the decoding.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.Encoding.GetString#2\">using System;\nusing System.IO;\nusing System.Text;\n\npublic class Example\n{\n   const int MAX_BUFFER_SIZE = 2048;\n   static Encoding enc8 = Encoding.UTF8;\n\n   public static void Main()\n   {\n      FileStream fStream = new FileStream(@&quot;.\\Utf8Example.txt&quot;, FileMode.Open);\n      string contents = null;\n      \n      // If file size is small, read in a single operation.\n      if (fStream.Length &lt;= MAX_BUFFER_SIZE) {\n         Byte[] bytes = new Byte[fStream.Length];\n         fStream.Read(bytes, 0, bytes.Length);\n         contents = enc8.GetString(bytes);\n      }\n      // If file size exceeds buffer size, perform multiple reads.\n      else {\n         contents = ReadFromBuffer(fStream);\n      }\n      fStream.Close();\n      Console.WriteLine(contents);\n   }\n\n   private static string ReadFromBuffer(FileStream fStream)\n   {\n        Byte[] bytes = new Byte[MAX_BUFFER_SIZE];\n        string output = String.Empty;\n        Decoder decoder8 = enc8.GetDecoder();\n      \n        while (fStream.Position &lt; fStream.Length) {\n           int nBytes = fStream.Read(bytes, 0, bytes.Length);\n           int nChars = decoder8.GetCharCount(bytes, 0, nBytes);\n           char[] chars = new char[nChars];\n           nChars = decoder8.GetChars(bytes, 0, nBytes, chars, 0);\n           output += new String(chars, 0, nChars);                                                     \n        }\n        return output;\n    }\n}\n// The example displays the following output:\n//     This is a UTF-8-encoded file that contains primarily Latin text, although it\n//     does list the first twelve letters of the Russian (Cyrillic) alphabet:\n//     \n//     А б в г д е ё ж з и й к\n//     \n//     The goal is to save this file, then open and decode it as a binary stream.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.Encoding.GetString#2\">Imports System.IO\nImports System.Text\n\nModule Example\n   Const MAX_BUFFER_SIZE As Integer = 2048\n   \n   Dim enc8 As Encoding = Encoding.UTF8\n      \n   Public Sub Main()\n      Dim fStream As New FileStream(&quot;.\\Utf8Example.txt&quot;, FileMode.Open)\n      Dim contents As String = Nothing\n      \n      &#39; If file size is small, read in a single operation.\n      If fStream.Length &lt;= MAX_BUFFER_SIZE Then\n         Dim bytes(CInt(fStream.Length) - 1) As Byte\n         fStream.Read(bytes, 0, bytes.Length)\n         contents = enc8.GetString(bytes)\n      &#39; If file size exceeds buffer size, perform multiple reads.\n      Else\n         contents = ReadFromBuffer(fStream)\n      End If\n      fStream.Close()\n      Console.WriteLine(contents)\n   End Sub   \n\n    Private Function ReadFromBuffer(fStream As FileStream) As String\n        Dim bytes(MAX_BUFFER_SIZE) As Byte\n        Dim output As String = String.Empty\n        Dim decoder8 As Decoder = enc8.GetDecoder()\n      \n        Do While fStream.Position &lt; fStream.Length\n           Dim nBytes As Integer = fStream.Read(bytes, 0, bytes.Length)\n           Dim nChars As Integer = decoder8.GetCharCount(bytes, 0, nBytes)\n           Dim chars(nChars - 1) As Char\n           nChars = decoder8.GetChars(bytes, 0, nBytes, chars, 0)\n           output += New String(chars, 0, nChars)                                                     \n        Loop\n        Return output\n    End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;     This is a UTF-8-encoded file that contains primarily Latin text, although it\n&#39;     does list the first twelve letters of the Russian (Cyrillic) alphabet:\n&#39;     \n&#39;     ? ? ? ? ? ? ? ? ? ? ? ?\n&#39;     \n&#39;     The goal is to save this file, then open and decode it as a binary stream.\n</code></pre><p> The example uses the following text, which should be saved to a UTF-8 encoded file named Utf8Example.txt.  </p>\n<pre><code>\nThis is a UTF-8-encoded file that contains primarily Latin text, although it   \ndoes list the first twelve letters of the Russian (Cyrillic) alphabet:  \n\nА б в г д е ё ж з и й к  \n\nThe goal is to save this file, then open and decode it as a binary stream.  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_GetString_System_Byte__System_Int32_\">\r\n    \r\n            <a id=\"System_Text_Encoding_GetString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetString(Byte*,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, decodes a specified number of bytes starting at a specified address into a string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string GetString (byte* bytes, int byteCount);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>*</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to a byte array.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>byteCount</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes to decode.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that contains the results of decoding the specified sequence of bytes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>bytes</code> is a null pointer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>byteCount</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoderfallbackexception\" data-linktype=\"relative-path\">DecoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A   fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for a complete explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.DecoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.decoderexceptionfallback\" data-linktype=\"relative-path\">DecoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The GetString method is designed to optimize performance when you have a native pointer to a byte array. Instead of creating a managed byte array and then decoding it, you can instead call this method without having to create any intermediate objects.  </p>\n<p> If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> object returned by the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetDecoder_\" data-linktype=\"relative-path\">GetDecoder</a> method of a derived class.  </p>\n<p> See the Remarks section of the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a> reference topic for a discussion of decoding techniques and considerations.  </p>\n<p> Note that the precise behavior of the GetString method for a particular <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> implementation depends on the fallback strategy defined for that <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> object. For more information, see the &quot;Choosing a Fallback Strategy&quot; section of the <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> topic.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_GetString_System_Byte___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Text_Encoding_GetString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetString(Byte[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, decodes a sequence of bytes from the specified byte array into a string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string GetString (byte[] bytes, int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The byte array containing the sequence of bytes to decode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the first byte to decode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes to decode.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that contains the results of decoding the specified sequence of bytes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The byte array contains invalid Unicode code points.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>bytes</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> or <code>count</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>index</code> and <code>count</code> do not denote a valid range in <code>bytes</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoderfallbackexception\" data-linktype=\"relative-path\">DecoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for complete explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.DecoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.decoderexceptionfallback\" data-linktype=\"relative-path\">DecoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> or the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> provided by the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetDecoder_\" data-linktype=\"relative-path\">GetDecoder</a> method or the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncoder_\" data-linktype=\"relative-path\">GetEncoder</a> method, respectively, of a derived class.  </p>\n<p> See the Remarks section of the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a> reference topic for a discussion of decoding techniques and considerations.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads a UTF-8 encoded string from a binary file that is represented by a <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a> object. For files that are smaller than 2,048 bytes, it reads the contents of the entire file into a byte array and calls the GetString method to perform the decoding. For larger files, it reads 2,048 bytes at a time into a byte array, calls the [Decoder.GetCharCount(Byte&lt;xref:System.Text.Decoder.GetCharCount%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName&gt; method to determine how many characters are contained in the array, and then calls the [Decoder.GetChars(Byte[], Int32, Int32, Char&lt;xref:System.Text.Decoder.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29?displayProperty=fullName&gt; method to perform the decoding.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.Encoding.GetString#3\">using System;\nusing System.IO;\nusing System.Text;\n\npublic class Example\n{\n   const int MAX_BUFFER_SIZE = 2048;\n   static Encoding enc8 = Encoding.UTF8;\n   static byte[] bytes = new byte[MAX_BUFFER_SIZE]; \n\n   public static void Main()\n   {\n      FileStream fStream = new FileStream(@&quot;.\\Utf8Example.txt&quot;, FileMode.Open);\n      string contents = null;\n      \n      // If file size is small, read in a single operation.\n      if (fStream.Length &lt;= MAX_BUFFER_SIZE) {\n         int bytesRead = fStream.Read(bytes, 0, bytes.Length);\n         contents = enc8.GetString(bytes, 0, bytesRead);\n      }   \n      // If file size exceeds buffer size, perform multiple reads.\n      else {\n         contents = ReadFromBuffer(fStream);\n      }\n      fStream.Close();\n      Console.WriteLine(contents);\n   }\n\n    private static string ReadFromBuffer(FileStream fStream)\n    {\n        string output = String.Empty;\n        Decoder decoder8 = enc8.GetDecoder();\n      \n        while (fStream.Position &lt; fStream.Length) {\n           int nBytes = fStream.Read(bytes, 0, bytes.Length);\n           int nChars = decoder8.GetCharCount(bytes, 0, nBytes);\n           char[] chars = new char[nChars];\n           nChars = decoder8.GetChars(bytes, 0, nBytes, chars, 0);\n           output += new String(chars, 0, nChars);                                                     \n        }\n        return output;\n    }   \n}\n// The example displays the following output:\n//     This is a UTF-8-encoded file that contains primarily Latin text, although it\n//     does list the first twelve letters of the Russian (Cyrillic) alphabet:\n//     \n//     А б в г д е ё ж з и й к\n//     \n//     The goal is to save this file, then open and decode it as a binary stream.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.Encoding.GetString#3\">Imports System.IO\nImports System.Text\n\nModule Example\n   Const MAX_BUFFER_SIZE As Integer = 2048\n   \n   Dim enc8 As Encoding = Encoding.UTF8\n   Dim bytes(MAX_BUFFER_SIZE -1) As Byte\n      \n   Public Sub Main()\n      Dim fStream As New FileStream(&quot;.\\Utf8Example.txt&quot;, FileMode.Open)\n      Dim contents As String = Nothing\n      \n      &#39; If file size is small, read in a single operation.\n      If fStream.Length &lt;= MAX_BUFFER_SIZE Then\n         \n         Dim bytesRead As Integer = fStream.Read(bytes, 0, bytes.Length)\n         contents = enc8.GetString(bytes, 0, bytesRead)\n      &#39; If file size exceeds buffer size, perform multiple reads.\n      Else\n         contents = ReadFromBuffer(fStream)\n      End If\n      fStream.Close()\n      Console.WriteLine(contents)\n   End Sub   \n\n    Private Function ReadFromBuffer(fStream As FileStream) As String\n        Dim bytes(MAX_BUFFER_SIZE) As Byte\n        Dim output As String = String.Empty\n        Dim decoder8 As Decoder = enc8.GetDecoder()\n      \n        Do While fStream.Position &lt; fStream.Length\n           Dim nBytes As Integer = fStream.Read(bytes, 0, bytes.Length)\n           Dim nChars As Integer = decoder8.GetCharCount(bytes, 0, nBytes)\n           Dim chars(nChars - 1) As Char\n           nChars = decoder8.GetChars(bytes, 0, nBytes, chars, 0)\n           output += New String(chars, 0, nChars)                                                     \n        Loop\n        Return output\n    End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;     This is a UTF-8-encoded file that contains primarily Latin text, although it\n&#39;     does list the first twelve letters of the Russian (Cyrillic) alphabet:\n&#39;     \n&#39;     А б в г д е ё ж з и й к\n&#39;     \n&#39;     The goal is to save this file, then open and decode it as a binary stream.\n</code></pre><p> The example uses the following text, which should be saved to a UTF-8 encoded file named Utf8Example.txt.  </p>\n<pre><code>\nThis is a UTF-8-encoded file that contains primarily Latin text, although it   \ndoes list the first twelve letters of the Russian (Cyrillic) alphabet:  \n\nА б в г д е ё ж з и й к  \n\nThe goal is to save this file, then open and decode it as a binary stream.  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_IsAlwaysNormalized\">\r\n    \r\n            <a id=\"System_Text_Encoding_IsAlwaysNormalized_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsAlwaysNormalized()</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the current encoding is always normalized, using the default normalization form.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsAlwaysNormalized ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> is always normalized; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default normalization form is <a class=\"xref\" href=\"system.text.normalizationform\" data-linktype=\"relative-path\">NormalizationForm</a>, which uses full canonical decomposition, followed by the replacement of sequences with their primary composites, if possible.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_IsAlwaysNormalized_System_Text_NormalizationForm_\">\r\n    \r\n            <a id=\"System_Text_Encoding_IsAlwaysNormalized_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsAlwaysNormalized(NormalizationForm)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets a value indicating whether the current encoding is always normalized, using the specified normalization form.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool IsAlwaysNormalized (System.Text.NormalizationForm form);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>form</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.normalizationform\" data-linktype=\"relative-path\">NormalizationForm</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.text.normalizationform\" data-linktype=\"relative-path\">NormalizationForm</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> object is always normalized using the specified <a class=\"xref\" href=\"system.text.normalizationform\" data-linktype=\"relative-path\">NormalizationForm</a> value; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default normalization form is <a class=\"xref\" href=\"system.text.normalizationform\" data-linktype=\"relative-path\">NormalizationForm</a>, which uses full canonical decomposition, followed by the replacement of sequences with their primary composites, if possible.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoding_RegisterProvider_System_Text_EncodingProvider_\">\r\n    \r\n            <a id=\"System_Text_Encoding_RegisterProvider_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RegisterProvider(EncodingProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Registers an encoding provider.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void RegisterProvider (System.Text.EncodingProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encodingprovider\" data-linktype=\"relative-path\">EncodingProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A subclass of <a class=\"xref\" href=\"system.text.encodingprovider\" data-linktype=\"relative-path\">EncodingProvider</a> that provides access to additional character encodings.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>provider</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The RegisterProvider method allows you to register a class derived from <a class=\"xref\" href=\"system.text.encodingprovider\" data-linktype=\"relative-path\">EncodingProvider</a> that makes character encodings available on a platform that does not otherwise support them. Once the encoding provider is registered, the encodings that it supports can be retrieved by calling any <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncoding_\" data-linktype=\"relative-path\">GetEncoding</a> overload.  </p>\n<p> .NET Framework 4.6 includes one encoding provider, &lt;xref:System.Text.CodePagesEncodingProvider&gt;, that makes the encodings available that are present in the full .NET Framework but are not available in .NET Framework 4.6. By default, .NET Framework 4.6 only supports the Unicode encodings, ASCII, and code page 28591.  </p>\n<p> If the same encoding provider is used in multiple calls to the RegisterProvider method, only the first method call registers the provider. Subsequent calls are ignored.  </p>\n<p> If the RegisterProvider method is called to register multiple providers that handle the same encoding, the last registered provider is the used for all encoding and decoding operations. Any previously registered providers are ignored.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Text.Encoding.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Text.Encoding.yml\">\r\n<meta name=\"APIName\" content=\"System.Text.Encoding\">\r\n<meta name=\"APIName\" content=\"System.Text.Encoding..ctor\">\r\n<meta name=\"APIName\" content=\"System.Text.Encoding.ASCII\">\r\n<meta name=\"APIName\" content=\"System.Text.Encoding.BigEndianUnicode\">\r\n<meta name=\"APIName\" content=\"System.Text.Encoding.BodyName\">\r\n<meta name=\"APIName\" content=\"System.Text.Encoding.Clone\">\r\n<meta name=\"APIName\" content=\"System.Text.Encoding.CodePage\">\r\n<meta name=\"APIName\" content=\"System.Text.Encoding.Convert\">\r\n<meta name=\"APIName\" content=\"System.Text.Encoding.DecoderFallback\">\r\n<meta name=\"APIName\" content=\"System.Text.Encoding.Default\">\r\n<meta name=\"APIName\" content=\"System.Text.Encoding.EncoderFallback\">\r\n<meta name=\"APIName\" content=\"System.Text.Encoding.EncodingName\">\r\n<meta name=\"APIName\" content=\"System.Text.Encoding.Equals\">\r\n<meta name=\"APIName\" content=\"System.Text.Encoding.GetByteCount\">\r\n<meta name=\"APIName\" content=\"System.Text.Encoding.GetBytes\">\r\n<meta name=\"APIName\" content=\"System.Text.Encoding.GetCharCount\">\r\n<meta name=\"APIName\" content=\"System.Text.Encoding.GetChars\">\r\n<meta name=\"APIName\" content=\"System.Text.Encoding.GetDecoder\">\r\n<meta name=\"APIName\" content=\"System.Text.Encoding.GetEncoder\">\r\n<meta name=\"APIName\" content=\"System.Text.Encoding.GetEncoding\">\r\n<meta name=\"APIName\" content=\"System.Text.Encoding.GetEncodings\">\r\n<meta name=\"APIName\" content=\"System.Text.Encoding.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Text.Encoding.GetMaxByteCount\">\r\n<meta name=\"APIName\" content=\"System.Text.Encoding.GetMaxCharCount\">\r\n<meta name=\"APIName\" content=\"System.Text.Encoding.GetPreamble\">\r\n<meta name=\"APIName\" content=\"System.Text.Encoding.GetString\">\r\n<meta name=\"APIName\" content=\"System.Text.Encoding.HeaderName\">\r\n<meta name=\"APIName\" content=\"System.Text.Encoding.IsAlwaysNormalized\">\r\n<meta name=\"APIName\" content=\"System.Text.Encoding.IsBrowserDisplay\">\r\n<meta name=\"APIName\" content=\"System.Text.Encoding.IsBrowserSave\">\r\n<meta name=\"APIName\" content=\"System.Text.Encoding.IsMailNewsDisplay\">\r\n<meta name=\"APIName\" content=\"System.Text.Encoding.IsMailNewsSave\">\r\n<meta name=\"APIName\" content=\"System.Text.Encoding.IsReadOnly\">\r\n<meta name=\"APIName\" content=\"System.Text.Encoding.IsSingleByte\">\r\n<meta name=\"APIName\" content=\"System.Text.Encoding.RegisterProvider\">\r\n<meta name=\"APIName\" content=\"System.Text.Encoding.Unicode\">\r\n<meta name=\"APIName\" content=\"System.Text.Encoding.UTF32\">\r\n<meta name=\"APIName\" content=\"System.Text.Encoding.UTF7\">\r\n<meta name=\"APIName\" content=\"System.Text.Encoding.UTF8\">\r\n<meta name=\"APIName\" content=\"System.Text.Encoding.WebName\">\r\n<meta name=\"APIName\" content=\"System.Text.Encoding.WindowsCodePage\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"df772dec-f5e6-4783-9e4a-709707b7487d\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a character encoding.  \n To browse the .NET Framework source code for this type, see the Reference Source.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Text/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Text.Encoding\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Text.Encoding.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Text.Encoding.yml","open_to_public_contributors":true,"api_name":["System.Text.Encoding","System.Text.Encoding..ctor","System.Text.Encoding.ASCII","System.Text.Encoding.BigEndianUnicode","System.Text.Encoding.BodyName","System.Text.Encoding.Clone","System.Text.Encoding.CodePage","System.Text.Encoding.Convert","System.Text.Encoding.DecoderFallback","System.Text.Encoding.Default","System.Text.Encoding.EncoderFallback","System.Text.Encoding.EncodingName","System.Text.Encoding.Equals","System.Text.Encoding.GetByteCount","System.Text.Encoding.GetBytes","System.Text.Encoding.GetCharCount","System.Text.Encoding.GetChars","System.Text.Encoding.GetDecoder","System.Text.Encoding.GetEncoder","System.Text.Encoding.GetEncoding","System.Text.Encoding.GetEncodings","System.Text.Encoding.GetHashCode","System.Text.Encoding.GetMaxByteCount","System.Text.Encoding.GetMaxCharCount","System.Text.Encoding.GetPreamble","System.Text.Encoding.GetString","System.Text.Encoding.HeaderName","System.Text.Encoding.IsAlwaysNormalized","System.Text.Encoding.IsBrowserDisplay","System.Text.Encoding.IsBrowserSave","System.Text.Encoding.IsMailNewsDisplay","System.Text.Encoding.IsMailNewsSave","System.Text.Encoding.IsReadOnly","System.Text.Encoding.IsSingleByte","System.Text.Encoding.RegisterProvider","System.Text.Encoding.Unicode","System.Text.Encoding.UTF32","System.Text.Encoding.UTF7","System.Text.Encoding.UTF8","System.Text.Encoding.WebName","System.Text.Encoding.WindowsCodePage"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Text.Encoding","System::Text::Encoding","System.Text.Encoding.#ctor","System::Text::Encoding::#ctor","System.Text.Encoding.ASCII","System::Text::Encoding::ASCII","System.Text.Encoding.BigEndianUnicode","System::Text::Encoding::BigEndianUnicode","System.Text.Encoding.BodyName","System::Text::Encoding::BodyName","System.Text.Encoding.Clone","System::Text::Encoding::Clone","System.Text.Encoding.CodePage","System::Text::Encoding::CodePage","System.Text.Encoding.Convert","System::Text::Encoding::Convert","System.Text.Encoding.DecoderFallback","System::Text::Encoding::DecoderFallback","System.Text.Encoding.Default","System::Text::Encoding::Default","System.Text.Encoding.EncoderFallback","System::Text::Encoding::EncoderFallback","System.Text.Encoding.EncodingName","System::Text::Encoding::EncodingName","System.Text.Encoding.Equals","System::Text::Encoding::Equals","System.Text.Encoding.GetByteCount","System::Text::Encoding::GetByteCount","System.Text.Encoding.GetBytes","System::Text::Encoding::GetBytes","System.Text.Encoding.GetCharCount","System::Text::Encoding::GetCharCount","System.Text.Encoding.GetChars","System::Text::Encoding::GetChars","System.Text.Encoding.GetDecoder","System::Text::Encoding::GetDecoder","System.Text.Encoding.GetEncoder","System::Text::Encoding::GetEncoder","System.Text.Encoding.GetEncoding","System::Text::Encoding::GetEncoding","System.Text.Encoding.GetEncodings","System::Text::Encoding::GetEncodings","System.Text.Encoding.GetHashCode","System::Text::Encoding::GetHashCode","System.Text.Encoding.GetMaxByteCount","System::Text::Encoding::GetMaxByteCount","System.Text.Encoding.GetMaxCharCount","System::Text::Encoding::GetMaxCharCount","System.Text.Encoding.GetPreamble","System::Text::Encoding::GetPreamble","System.Text.Encoding.GetString","System::Text::Encoding::GetString","System.Text.Encoding.HeaderName","System::Text::Encoding::HeaderName","System.Text.Encoding.IsAlwaysNormalized","System::Text::Encoding::IsAlwaysNormalized","System.Text.Encoding.IsBrowserDisplay","System::Text::Encoding::IsBrowserDisplay","System.Text.Encoding.IsBrowserSave","System::Text::Encoding::IsBrowserSave","System.Text.Encoding.IsMailNewsDisplay","System::Text::Encoding::IsMailNewsDisplay","System.Text.Encoding.IsMailNewsSave","System::Text::Encoding::IsMailNewsSave","System.Text.Encoding.IsReadOnly","System::Text::Encoding::IsReadOnly","System.Text.Encoding.IsSingleByte","System::Text::Encoding::IsSingleByte","System.Text.Encoding.RegisterProvider","System::Text::Encoding::RegisterProvider","System.Text.Encoding.Unicode","System::Text::Encoding::Unicode","System.Text.Encoding.UTF32","System::Text::Encoding::UTF32","System.Text.Encoding.UTF7","System::Text::Encoding::UTF7","System.Text.Encoding.UTF8","System::Text::Encoding::UTF8","System.Text.Encoding.WebName","System::Text::Encoding::WebName","System.Text.Encoding.WindowsCodePage","System::Text::Encoding::WindowsCodePage"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"df772dec-f5e6-4783-9e4a-709707b7487d","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Text/Encoding.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Encoding class | Microsoft Docs","_op_ogTitle":"Encoding class","description":"Represents a character encoding.  \n To browse the .NET Framework source code for this type, see the Reference Source.\n","toc_asset_id":"_splitted/System.Text/toc.json","toc_rel":"_splitted/System.Text/toc.json","source_url":"","ms.assetid":"System.Text.Encoding","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.text.encoding","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.text.encoding","fileRelativePath":"System.Text.Encoding.html"},"themesRelativePathToOutputRoot":"_themes/"}