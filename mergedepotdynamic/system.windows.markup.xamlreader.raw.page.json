{"content":"    \r\n    <h1 id=\"System_Windows_Markup_XamlReader\">\r\n      <span class=\"lang-csharp\">XamlReader</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Reads XAML input and creates an object graph, using the WPF default XAML reader and an associated XAML object writer.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class XamlReader</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">XamlReader</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The synchronous <a class=\"xref\" href=\"system.windows.markup.xamlreader#System_Windows_Markup_XamlReader_Load_\" data-linktype=\"relative-path\">Load</a> methods are static, but the asynchronous <a class=\"xref\" href=\"system.windows.markup.xamlreader#System_Windows_Markup_XamlReader_LoadAsync_\" data-linktype=\"relative-path\">LoadAsync</a> methods are not static and require an instance of the XamlReader class to use.  </p>\n<p> The output of the <code>Load</code> methods is a single object, which represents the root object of a created object tree or object graph. Object graphs that are created by XamlReader are typically added to the existing object tree of a WPF application at run time. Otherwise the new object graph is considered disconnected for purposes of the WPF application model. This means that it does not render, and cannot be accessed using any of the object tree techniques as applied to the WPF application&#39;s main object tree (for example, the APIs <a class=\"xref\" href=\"system.windows.frameworkelement#System_Windows_FrameworkElement_FindName_\" data-linktype=\"relative-path\">FindName</a>, <a class=\"xref\" href=\"system.windows.logicaltreehelper\" data-linktype=\"relative-path\">LogicalTreeHelper</a>, <a class=\"xref\" href=\"system.windows.media.visualtreehelper\" data-linktype=\"relative-path\">VisualTreeHelper</a>). For more information on object tree concepts, see <a href=\"../Topic/Trees%20in%20WPF.md\" data-linktype=\"relative-path\">Trees in WPF</a>.  </p>\n<p> XamlReader supports the following primary scenarios:  </p>\n<ul>\n<li><p><strong>Cloning/object factory</strong>: Without additional mechanisms, a reference type generally cannot be included in more than one position in a WPF object tree. (Examples of additional mechanisms that offer support for sharing or re-use in WPF include objects that are based on <a class=\"xref\" href=\"system.windows.freezable\" data-linktype=\"relative-path\">Freezable</a>, or support for commonly shareable objects such as <a class=\"xref\" href=\"system.windows.media.brush\" data-linktype=\"relative-path\">Brush</a> that are referenced as an item from a <a class=\"xref\" href=\"system.windows.resourcedictionary\" data-linktype=\"relative-path\">ResourceDictionary</a>.) One way to clone an object that is already in the object tree is to serialize the object using <a class=\"xref\" href=\"system.windows.markup.xamlwriter#System_Windows_Markup_XamlWriter_Save_\" data-linktype=\"relative-path\">Save</a>. You then use the serialized string as input for a call to <a class=\"xref\" href=\"system.windows.markup.xamlreader#System_Windows_Markup_XamlReader_Load_\" data-linktype=\"relative-path\">Load</a>, with a stream or <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> as an intermediary.  </p>\n</li>\n<li><p><strong>Constructing objects based on just-in-time information</strong>: There are often other ways to have late-binding or user-supplied input change the state of existing objects. For example you could use the same value to set more than one property, or use data binding. But if you have a scenario where even the type of object to create is only determinable at run time or with user interaction, then creating such an object by building up a string for <a class=\"xref\" href=\"system.windows.markup.xamlreader#System_Windows_Markup_XamlReader_Load_\" data-linktype=\"relative-path\">Load</a> input is often a useful technique.  </p>\n</li>\n<li><p><strong>Using existing resource techniques</strong>: The <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> type is used frequently in other frameworks or technologies for transferring data or objects across application boundaries or for similar situations. You can then use the <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> techniques to store or obtain XAML-formatted data that you eventually use to create an object as part of your application.  </p>\n</li>\n<li><p><strong>Fixed documents:</strong> Your application might load local or downloaded XPS documents for inclusion in a WPF application object tree and UI.  </p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> This documentation sometimes describes an object graph, as opposed to an object tree. A strict parent-child relationship does not always exist in the run time object relationships of a run time WPF application, so an object graph is a more widely applicable terminology. However, because WPF also includes two different tree conceptualization APIs (<a class=\"xref\" href=\"system.windows.logicaltreehelper\" data-linktype=\"relative-path\">LogicalTreeHelper</a>, <a class=\"xref\" href=\"system.windows.media.visualtreehelper\" data-linktype=\"relative-path\">VisualTreeHelper</a>) the tree metaphor still applies adequately to most real-world cases in WPF. From the XAML language perspective however, the object graph is often the best way to think about how objects are created out of XAML, because the XAML language itself does not necessarily specify helper class methodologies that bring the relationships more into a tree structure again.  </p>\n</div>\n<h2 id=\"code-access-security-loose-xaml-and-xamlreader\">Code Access Security, Loose XAML, and XamlReader</h2>\n<p> XAML is a markup language that directly represents object instantiation and execution. Therefore, elements created in XAML have the same ability to interact with system resources (network access, file system IO, for example) as the equivalent generated code does.  </p>\n<p> <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/tla2sharptla-winclient-md.md&quot; -->WPF<!--END INCLUDE --> supports the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/tla2sharptla-net-md.md&quot; -->.NET<!--END INCLUDE --> security framework <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/tlasharptla-cas-md.md&quot; -->Code Access Security (CAS)<!--END INCLUDE -->. This means that <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/tla2sharptla-winclient-md.md&quot; -->WPF<!--END INCLUDE --> content running in the internet zone has reduced execution permissions. &quot;Loose XAML&quot; (pages of noncompiled XAML interpreted at load time by a XAML viewer) and <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/tlasharptla-xbap-md.md&quot; -->XAML browser application (XBAP)<!--END INCLUDE --> are usually run in this internet zone and use the same permission set.  However, XAML loaded in to a fully trusted application has the same access to the system resources as the hosting application does. For more information, see <a href=\"../Topic/WPF%20Partial%20Trust%20Security.md\" data-linktype=\"relative-path\">WPF Partial Trust Security</a>.  </p>\n<p> The implications of these statements for XamlReader is that your application design must make trust decisions about the XAML you decide to load. If you are loading XAML that is not trusted, consider implementing your own sandboxing technique for how you load the resulting object graph.  </p>\n<p> XamlReader can also be called by partial trust code. In this case, Internet security zone is applied for code access security. If anything in the loaded XAML is invalid under Internet security zone, a XAML parse exception is thrown. Under XBAP and other cases that are partial trust at the platform level, where XamlReader is part of the execution, you get the same exception behavior as with explicit partial trust calls.  </p>\n<h2 id=\"wpf-xaml-xaml-readerswriters-and-xaml-language-versioning\">WPF XAML, XAML Readers/Writers, and XAML Language Versioning</h2>\n<p> <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/xaml2009-md.md&quot; -->XAML2009<!--END INCLUDE --> includes language features such as  and . You can use signatures of <code>Load</code> or <code>Parse</code> to load XAML that uses these features. However, those language features are not supported for XAML that needs to be markup compiled (such as XAML for the <strong>Page</strong> build action in a WPF application, or any XAML that involves the markup compile task in the build actions).  </p>\n<p> WPF types and the WPF technology in general support concepts that rely on access to WPF internals. For instance, how WPF implements dependency properties relies on internal techniques for efficient type-member lookup. Access to these internals is enabled by the XAML reading and writing APIs provided in <a class=\"xref\" href=\"system.windows.markup.xamlwriter\" data-linktype=\"relative-path\">XamlWriter</a> and XamlReader from the <a class=\"xref\" href=\"system.windows.markup\" data-linktype=\"relative-path\">System.Windows.Markup</a> namespace and PresentationFramework assembly. However, the lower-level XAML readers and XAML writers from the System.Xaml assembly (classes based on <a class=\"xref\" href=\"system.xaml.xamlreader\" data-linktype=\"relative-path\">System.Xaml.XamlReader</a>, <a class=\"xref\" href=\"system.xaml.xamlwriter\" data-linktype=\"relative-path\">System.Xaml.XamlWriter</a>) do not have access to the WPF internals. There is no dependency from System.Xaml to any WPF-specific assembly. Without access to the WPF internals, System.Xaml readers and writers cannot correctly load or save all WPF types, or types based on WPF types. In particular, the System.Xaml readers and writers do not understand concepts such as the WPF dependency property backing property store, or all the specifics of how WPF uses styles, resource dictionaries and templates. Therefore you have a choice to make:  </p>\n<ul>\n<li><p>If you are loading WPF types, and/or you are using XAML in BAML form in any way, use the PresentationFramework XAML readers and XAML writers.  </p>\n</li>\n<li><p>If you are not relying on any WPF types or the BAML form of XAML, and are not using another specific technology&#39;s XAML reader or XAML writer implementation for reasons that are specific to that framework, use the System.Xaml XAML readers and XAML writers.  </p>\n</li>\n</ul>\n<h2 id=\"systemxaml-backing-implementation-in-net-4\">System.Xaml Backing Implementation in .NET 4</h2>\n<p> XamlReader is the callable API surface for the WPF framework-level XAML parser. The same underlying XAML parser also performs the run-time XAML loading and parsing for WPF applications that target <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v30-short-md.md&quot; -->.NET Framework 3.0<!--END INCLUDE --> and <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v35-short-md.md&quot; -->.NET Framework 3.5<!--END INCLUDE -->.  </p>\n<p> If you are targeting <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v40-short-md.md&quot; -->.NET Framework 4<!--END INCLUDE -->, the external API is the same, but parts of the implementation are built on the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v40-short-md.md&quot; -->.NET Framework 4<!--END INCLUDE --> general XAML implementation in the System.Xaml assembly, which improves many of the technical and reporting aspects of parsing XAML. Targeting <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v40-short-md.md&quot; -->.NET Framework 4<!--END INCLUDE --> necessarily entails including System.Xaml as a reference, and details of implementation such as the exceptions reported may come from System.Xaml defined types.  </p>\n<p><a name=\"xamlTextUsage_XamlReader\"></a>   </p>\n<h2 id=\"xaml-text-usage\">XAML Text Usage</h2>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Markup_XamlReader__ctor\" data-linktype=\"self-bookmark\">XamlReader()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.markup.xamlreader\" data-linktype=\"relative-path\">XamlReader</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Markup_XamlReader_CancelAsync\" data-linktype=\"self-bookmark\">CancelAsync()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Aborts the current asynchronous load operation, if there is an asynchronous load operation pending.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Markup_XamlReader_GetWpfSchemaContext\" data-linktype=\"self-bookmark\">GetWpfSchemaContext()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.xaml.xamlschemacontext\" data-linktype=\"relative-path\">XamlSchemaContext</a> object that represents the WPF schema context settings for a <a class=\"xref\" href=\"system.windows.markup.xamlreader\" data-linktype=\"relative-path\">XamlReader</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Markup_XamlReader_Load_System_IO_Stream_\" data-linktype=\"self-bookmark\">Load(Stream)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the XAML input in the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> and returns an <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> that is the root of the corresponding object tree.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Markup_XamlReader_Load_System_Xaml_XamlReader_\" data-linktype=\"self-bookmark\">Load(XamlReader)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the XAML input through a provided <a class=\"xref\" href=\"system.xaml.xamlreader\" data-linktype=\"relative-path\">XamlReader</a> and returns an object that is the root of the corresponding object tree.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Markup_XamlReader_Load_System_Xml_XmlReader_\" data-linktype=\"self-bookmark\">Load(XmlReader)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the XAML input in the specified <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> and returns an object that is the root of the corresponding object tree.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Markup_XamlReader_Load_System_IO_Stream_System_Windows_Markup_ParserContext_\" data-linktype=\"self-bookmark\">Load(Stream,ParserContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the XAML input in the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> and returns an object that is the root of the corresponding object tree.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Markup_XamlReader_LoadAsync_System_IO_Stream_\" data-linktype=\"self-bookmark\">LoadAsync(Stream)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the XAML input in the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> and returns the root of the corresponding object tree.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Markup_XamlReader_LoadAsync_System_Xml_XmlReader_\" data-linktype=\"self-bookmark\">LoadAsync(XmlReader)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the XAML input in the specified <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> and returns the root of the corresponding object tree.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Markup_XamlReader_LoadAsync_System_IO_Stream_System_Windows_Markup_ParserContext_\" data-linktype=\"self-bookmark\">LoadAsync(Stream,ParserContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the XAML input in the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> and returns the root of the corresponding object tree.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Markup_XamlReader_Parse_System_String_\" data-linktype=\"self-bookmark\">Parse(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the XAML input in the specified text string and returns an object that corresponds to the root of the specified markup.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Markup_XamlReader_Parse_System_String_System_Windows_Markup_ParserContext_\" data-linktype=\"self-bookmark\">Parse(String,ParserContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the XAML markup in the specified text string (using a specified <a class=\"xref\" href=\"system.windows.markup.parsercontext\" data-linktype=\"relative-path\">ParserContext</a>) and returns an object that corresponds to the root of the specified markup.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Events\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Markup_XamlReader_LoadCompleted\" data-linktype=\"self-bookmark\">LoadCompleted</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when an asynchronous load operation completes.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Markup_XamlReader__ctor\">\r\n    \r\n            <a id=\"System_Windows_Markup_XamlReader__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XamlReader()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.markup.xamlreader\" data-linktype=\"relative-path\">XamlReader</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public XamlReader ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Markup_XamlReader_CancelAsync\">\r\n    \r\n            <a id=\"System_Windows_Markup_XamlReader_CancelAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CancelAsync()</div>        \r\n          </div>\r\n    \r\n            <p>Aborts the current asynchronous load operation, if there is an asynchronous load operation pending.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void CancelAsync ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>CancelAsync is an asynchronous operation; therefore, some loading may occur before the operation is aborted.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Markup_XamlReader_GetWpfSchemaContext\">\r\n    \r\n            <a id=\"System_Windows_Markup_XamlReader_GetWpfSchemaContext_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetWpfSchemaContext()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.xaml.xamlschemacontext\" data-linktype=\"relative-path\">XamlSchemaContext</a> object that represents the WPF schema context settings for a <a class=\"xref\" href=\"system.windows.markup.xamlreader\" data-linktype=\"relative-path\">XamlReader</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Xaml.XamlSchemaContext GetWpfSchemaContext ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xaml.xamlschemacontext\" data-linktype=\"relative-path\">XamlSchemaContext</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.xaml.xamlschemacontext\" data-linktype=\"relative-path\">XamlSchemaContext</a> object that represents the WPF schema context settings for a <a class=\"xref\" href=\"system.windows.markup.xamlreader\" data-linktype=\"relative-path\">XamlReader</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Markup_XamlReader_Load_System_IO_Stream_\">\r\n    \r\n            <a id=\"System_Windows_Markup_XamlReader_Load_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Load(Stream)</div>        \r\n          </div>\r\n    \r\n            <p>Reads the XAML input in the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> and returns an <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> that is the root of the corresponding object tree.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static object Load (System.IO.Stream stream);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>stream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The XAML to load, in stream form.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The object at the root of the created object tree.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>stream</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example saves a <a class=\"xref\" href=\"system.windows.controls.button\" data-linktype=\"relative-path\">Button</a> into a <a class=\"xref\" href=\"system.io.memorystream\" data-linktype=\"relative-path\">MemoryStream</a> using the <a class=\"xref\" href=\"system.windows.markup.xamlwriter\" data-linktype=\"relative-path\">XamlWriter</a> class. The stream is then loaded back into a <a class=\"xref\" href=\"system.windows.controls.button\" data-linktype=\"relative-path\">Button</a> using the static <a class=\"xref\" href=\"system.windows.markup.xamlreader#System_Windows_Markup_XamlReader_Load_\" data-linktype=\"relative-path\">Load</a> method on the <a class=\"xref\" href=\"system.windows.markup.xamlreader\" data-linktype=\"relative-path\">XamlReader</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"XamlReaderWriterSnippets#XamlReaderLoadXmlReader\">// Create the Button.\nButton originalButton = new Button();\noriginalButton.Height = 50;\noriginalButton.Width = 100;\noriginalButton.Background = Brushes.AliceBlue;\noriginalButton.Content = &quot;Click Me&quot;;\n\n// Save the Button to a string.\nstring savedButton = XamlWriter.Save(originalButton);\n\n// Load the button\nStringReader stringReader = new StringReader(savedButton);\nXmlReader xmlReader = XmlReader.Create(stringReader);\nButton readerLoadButton = (Button)XamlReader.Load(xmlReader);\n</code></pre><pre><code class=\"lang-vb\" name=\"XamlReaderWriterSnippets#XamlReaderLoadXmlReader\">&#39; Create the Button.\nDim originalButton As New Button()\noriginalButton.Height = 50\noriginalButton.Width = 100\noriginalButton.Background = Brushes.AliceBlue\noriginalButton.Content = &quot;Click Me&quot;\n\n&#39; Save the Button to a string.\nDim savedButton As String = XamlWriter.Save(originalButton)\n\n&#39; Load the button\nDim stringReader As New StringReader(savedButton)\nDim xmlReader As XmlReader = XmlReader.Create(stringReader)\nDim readerLoadButton As Button = CType(XamlReader.Load(xmlReader), Button)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Markup_XamlReader_Load_System_Xaml_XamlReader_\">\r\n    \r\n            <a id=\"System_Windows_Markup_XamlReader_Load_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Load(XamlReader)</div>        \r\n          </div>\r\n    \r\n            <p>Reads the XAML input through a provided <a class=\"xref\" href=\"system.xaml.xamlreader\" data-linktype=\"relative-path\">XamlReader</a> and returns an object that is the root of the corresponding object tree.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static object Load (System.Xaml.XamlReader reader);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>reader</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xaml.xamlreader\" data-linktype=\"relative-path\">XamlReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.xaml.xamlreader\" data-linktype=\"relative-path\">XamlReader</a> object. This is expected to be initialized with input XAML.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The object that is the root of the created object tree.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>reader</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The input <a class=\"xref\" href=\"system.xaml.xamlreader\" data-linktype=\"relative-path\">XamlReader</a> can be <a class=\"xref\" href=\"system.windows.baml2006.baml2006reader\" data-linktype=\"relative-path\">Baml2006Reader</a>. This is how you can load BAML at run time, or for localization tool purposes.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Markup_XamlReader_Load_System_Xml_XmlReader_\">\r\n    \r\n            <a id=\"System_Windows_Markup_XamlReader_Load_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Load(XmlReader)</div>        \r\n          </div>\r\n    \r\n            <p>Reads the XAML input in the specified <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> and returns an object that is the root of the corresponding object tree.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static object Load (System.Xml.XmlReader reader);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>reader</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> that has already loaded the XAML input to load in XML form.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The object that is the root of the created object tree.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>reader</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts a <a class=\"xref\" href=\"system.windows.controls.button\" data-linktype=\"relative-path\">Button</a> into a string using the <a class=\"xref\" href=\"system.windows.markup.xamlwriter\" data-linktype=\"relative-path\">XamlWriter</a> class.  The string is then loaded back into a <a class=\"xref\" href=\"system.windows.controls.button\" data-linktype=\"relative-path\">Button</a> using the static <a class=\"xref\" href=\"system.windows.markup.xamlreader#System_Windows_Markup_XamlReader_Load_\" data-linktype=\"relative-path\">Load</a> method on the <a class=\"xref\" href=\"system.windows.markup.xamlreader\" data-linktype=\"relative-path\">XamlReader</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"XamlReaderWriterSnippets#XamlReaderLoadXmlReader\">// Create the Button.\nButton originalButton = new Button();\noriginalButton.Height = 50;\noriginalButton.Width = 100;\noriginalButton.Background = Brushes.AliceBlue;\noriginalButton.Content = &quot;Click Me&quot;;\n\n// Save the Button to a string.\nstring savedButton = XamlWriter.Save(originalButton);\n\n// Load the button\nStringReader stringReader = new StringReader(savedButton);\nXmlReader xmlReader = XmlReader.Create(stringReader);\nButton readerLoadButton = (Button)XamlReader.Load(xmlReader);\n</code></pre><pre><code class=\"lang-vb\" name=\"XamlReaderWriterSnippets#XamlReaderLoadXmlReader\">&#39; Create the Button.\nDim originalButton As New Button()\noriginalButton.Height = 50\noriginalButton.Width = 100\noriginalButton.Background = Brushes.AliceBlue\noriginalButton.Content = &quot;Click Me&quot;\n\n&#39; Save the Button to a string.\nDim savedButton As String = XamlWriter.Save(originalButton)\n\n&#39; Load the button\nDim stringReader As New StringReader(savedButton)\nDim xmlReader As XmlReader = XmlReader.Create(stringReader)\nDim readerLoadButton As Button = CType(XamlReader.Load(xmlReader), Button)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Markup_XamlReader_Load_System_IO_Stream_System_Windows_Markup_ParserContext_\">\r\n    \r\n            <a id=\"System_Windows_Markup_XamlReader_Load_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Load(Stream,ParserContext)</div>        \r\n          </div>\r\n    \r\n            <p>Reads the XAML input in the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> and returns an object that is the root of the corresponding object tree.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static object Load (System.IO.Stream stream, System.Windows.Markup.ParserContext parserContext);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>stream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The stream that contains the XAML input to load.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parserContext</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.markup.parsercontext\" data-linktype=\"relative-path\">ParserContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Context information used by the parser.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The object that is the root of the created object tree.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>stream</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>parserContext</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Markup_XamlReader_LoadAsync_System_IO_Stream_\">\r\n    \r\n            <a id=\"System_Windows_Markup_XamlReader_LoadAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LoadAsync(Stream)</div>        \r\n          </div>\r\n    \r\n            <p>Reads the XAML input in the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> and returns the root of the corresponding object tree.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object LoadAsync (System.IO.Stream stream);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>stream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The stream containing the XAML input to load.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The object that is the root of the created object tree.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>stream</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Multiple load operations are pending concurrently with the same <a class=\"xref\" href=\"system.windows.markup.xamlreader\" data-linktype=\"relative-path\">XamlReader</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An asynchronous XAML load operation will initially return an object that is purely the root object. Asynchronously, XAML parsing then continues, and any child objects are filled in under the root. This is in contrast to the typical WPF XAML processing behavior and its interaction with WPF concepts of object lifetime. In the typical (non-async) interaction, all properties of an object including all child collections are filled before returning an element and reporting it as loaded. That behavior equates to a bottom-up methodology for creating the tree where the root object is the last object to become available.  </p>\n<p> You typically would assign the returned object to some location in your WPF application&#39;s object tree, with the knowledge that content might still be filling in and might cause incremental layout updates if the entire content is exposed as part of the UI. For this reason it is typical to isolate or virtualize any asynchronously loaded objects from XAML, and to use application-specific logic or application state to notify when <a class=\"xref\" href=\"system.windows.markup.xamlreader#System_Windows_Markup_XamlReader_LoadCompleted\" data-linktype=\"relative-path\">LoadCompleted</a> is handled.  </p>\n<p> In order for LoadAsync to load XAML input asynchronously, the root element in the XAML input must contain the attribute and value <code>x:SynchronousMode=&quot;Async&quot;</code>. The value is treated as case sensitive. If the XAML input root does not contain <code>x:SynchronousMode=&quot;Async&quot;</code>, no exception is thrown, and the call is processed as a synchronous load (see <a class=\"xref\" href=\"system.windows.markup.xamlreader#System_Windows_Markup_XamlReader_Load_System_IO_Stream_\" data-linktype=\"relative-path\">Load(Stream)</a>).  </p>\n<p> Only one asynchronous load operation per instance of the <a class=\"xref\" href=\"system.windows.markup.xamlreader\" data-linktype=\"relative-path\">XamlReader</a> class can be performed at a time.  If more than one asynchronous operation is attempted on the same instance of the <a class=\"xref\" href=\"system.windows.markup.xamlreader\" data-linktype=\"relative-path\">XamlReader</a> class an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Markup_XamlReader_LoadAsync_System_Xml_XmlReader_\">\r\n    \r\n            <a id=\"System_Windows_Markup_XamlReader_LoadAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LoadAsync(XmlReader)</div>        \r\n          </div>\r\n    \r\n            <p>Reads the XAML input in the specified <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> and returns the root of the corresponding object tree.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object LoadAsync (System.Xml.XmlReader reader);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>reader</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An existing  <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> that has already loaded/read the XAML input.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The root of the created object tree.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>reader</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Multiple load operations are performed concurrently with the same <a class=\"xref\" href=\"system.windows.markup.xamlreader\" data-linktype=\"relative-path\">XamlReader</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An asynchronous XAML load operation will initially return an object that is purely the root object. Asynchronously, XAML parsing then continues, and any child objects are filled in under the root. This is in contrast to the typical WPF XAML processing behavior and its interaction with WPF concepts of object lifetime. In the typical (non-async) interaction, all properties of an object including all child collections are filled before returning an element and reporting it as loaded. That behavior equates to a bottom-up methodology for creating the tree where the root object is the last object to become available.  </p>\n<p> You typically would assign the returned object from LoadAsync to some location in your application&#39;s object tree, with the knowledge that content might still be filling in and might cause incremental layout updates if the entire content is exposed as part of the UI. For this reason it is typical to isolate or virtualize any asynchronously loaded objects from XAML, and to use application-specific logic or application state to notify when <a class=\"xref\" href=\"system.windows.markup.xamlreader#System_Windows_Markup_XamlReader_LoadCompleted\" data-linktype=\"relative-path\">LoadCompleted</a> is handled.  </p>\n<p> In order for LoadAsync to load XAML input asynchronously, the root element in the XAML markup must contain the attribute and value <code>x:SynchronousMode=&quot;Async&quot;</code>. The value is treated as case sensitive. If the XAML markup root does not contain <code>x:SynchronousMode=&quot;Async&quot;</code>, no exception is thrown, and the call is instead processed as a synchronous load (see <a class=\"xref\" href=\"system.windows.markup.xamlreader#System_Windows_Markup_XamlReader_Load_System_Xml_XmlReader_\" data-linktype=\"relative-path\">Load(XmlReader)</a>).  </p>\n<p> Only one asynchronous load operation per instance of the <a class=\"xref\" href=\"system.windows.markup.xamlreader\" data-linktype=\"relative-path\">XamlReader</a> class can be performed at a time.  If more than one asynchronous operation is attempted on the same instance of the <a class=\"xref\" href=\"system.windows.markup.xamlreader\" data-linktype=\"relative-path\">XamlReader</a> class an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Markup_XamlReader_LoadAsync_System_IO_Stream_System_Windows_Markup_ParserContext_\">\r\n    \r\n            <a id=\"System_Windows_Markup_XamlReader_LoadAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LoadAsync(Stream,ParserContext)</div>        \r\n          </div>\r\n    \r\n            <p>Reads the XAML input in the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> and returns the root of the corresponding object tree.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object LoadAsync (System.IO.Stream stream, System.Windows.Markup.ParserContext parserContext);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>stream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A stream containing the XAML input to load.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parserContext</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.markup.parsercontext\" data-linktype=\"relative-path\">ParserContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Context information used by the parser.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The root of the created object tree.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>stream</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Multiple load operations are performed concurrently with the same <a class=\"xref\" href=\"system.windows.markup.xamlreader\" data-linktype=\"relative-path\">XamlReader</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An asynchronous XAML load operation will initially return an object that is purely the root object. Asynchronously, XAML parsing then continues, and any child objects are filled in under the root. This is in contrast to the typical WPF XAML processing behavior and its interaction with WPF concepts of object lifetime. In the typical (non-async) interaction, all properties of an object including all child collections are filled before returning an element and reporting it as loaded. That behavior equates to a bottom-up methodology for creating the tree where the root object is the last object to become available.  </p>\n<p> You typically would assign the returned object to some location in your application&#39;s object tree, with the knowledge that content might still be filling in and might cause incremental layout updates if the entire content is exposed as part of the UI. For this reason it is typical to isolate or virtualize any asynchronously loaded objects from XAML, and to use application-specific logic or application state to notify when <a class=\"xref\" href=\"system.windows.markup.xamlreader#System_Windows_Markup_XamlReader_LoadCompleted\" data-linktype=\"relative-path\">LoadCompleted</a> is handled.  </p>\n<p> In order for LoadAsync to load markup asynchronously, the root element in the XAML markup must contain the attribute and value <code>x:SynchronousMode=&quot;Async&quot;</code>. The value is treated as case sensitive. If the XAML markup root does not contain <code>x:SynchronousMode=&quot;Async&quot;</code>, no exception is thrown, and the call is processed as a synchronous load (see <a class=\"xref\" href=\"system.windows.markup.xamlreader#System_Windows_Markup_XamlReader_Load_System_IO_Stream_System_Windows_Markup_ParserContext_\" data-linktype=\"relative-path\">Load(Stream,ParserContext)</a>).  </p>\n<p> Only one asynchronous load operation per instance of the <a class=\"xref\" href=\"system.windows.markup.xamlreader\" data-linktype=\"relative-path\">XamlReader</a> class can be performed at a time.  If more than one asynchronous operation is attempted on the same instance of the <a class=\"xref\" href=\"system.windows.markup.xamlreader\" data-linktype=\"relative-path\">XamlReader</a> class an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Markup_XamlReader_Parse_System_String_\">\r\n    \r\n            <a id=\"System_Windows_Markup_XamlReader_Parse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Parse(String)</div>        \r\n          </div>\r\n    \r\n            <p>Reads the XAML input in the specified text string and returns an object that corresponds to the root of the specified markup.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static object Parse (string xamlText);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>xamlText</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The input XAML, as a single text string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The root of the created object tree.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The implementation calls <a class=\"xref\" href=\"system.windows.markup.xamlreader#System_Windows_Markup_XamlReader_Load_\" data-linktype=\"relative-path\">Load</a> internally after creating a stream from the string. See <a class=\"xref\" href=\"system.windows.markup.xamlreader#System_Windows_Markup_XamlReader_Load_\" data-linktype=\"relative-path\">Load</a> for additional information such as possible exceptions.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Markup_XamlReader_Parse_System_String_System_Windows_Markup_ParserContext_\">\r\n    \r\n            <a id=\"System_Windows_Markup_XamlReader_Parse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Parse(String,ParserContext)</div>        \r\n          </div>\r\n    \r\n            <p>Reads the XAML markup in the specified text string (using a specified <a class=\"xref\" href=\"system.windows.markup.parsercontext\" data-linktype=\"relative-path\">ParserContext</a>) and returns an object that corresponds to the root of the specified markup.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static object Parse (string xamlText, System.Windows.Markup.ParserContext parserContext);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>xamlText</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The input XAML, as a single text string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parserContext</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.markup.parsercontext\" data-linktype=\"relative-path\">ParserContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Context information used by the parser.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The root of the created object tree.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The implementation calls <a class=\"xref\" href=\"system.windows.markup.xamlreader#System_Windows_Markup_XamlReader_Load_\" data-linktype=\"relative-path\">Load</a> internally after creating a stream from the string. See <a class=\"xref\" href=\"system.windows.markup.xamlreader#System_Windows_Markup_XamlReader_Load_\" data-linktype=\"relative-path\">Load</a> for additional information such as possible exceptions.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"events\">\r\n        <h2>Events\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Markup_XamlReader_LoadCompleted\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LoadCompleted</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when an asynchronous load operation completes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.ComponentModel.AsyncCompletedEventHandler LoadCompleted;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>LoadCompleted is also raised when an asynchronous load operation aborts.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Markup.XamlReader.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Markup.XamlReader.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Markup.XamlReader\">\r\n<meta name=\"APIName\" content=\"System.Windows.Markup.XamlReader..ctor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Markup.XamlReader.CancelAsync\">\r\n<meta name=\"APIName\" content=\"System.Windows.Markup.XamlReader.GetWpfSchemaContext\">\r\n<meta name=\"APIName\" content=\"System.Windows.Markup.XamlReader.Load\">\r\n<meta name=\"APIName\" content=\"System.Windows.Markup.XamlReader.LoadAsync\">\r\n<meta name=\"APIName\" content=\"System.Windows.Markup.XamlReader.LoadCompleted\">\r\n<meta name=\"APIName\" content=\"System.Windows.Markup.XamlReader.add_LoadCompleted\">\r\n<meta name=\"APIName\" content=\"System.Windows.Markup.XamlReader.remove_LoadCompleted\">\r\n<meta name=\"APIName\" content=\"System.Windows.Markup.XamlReader.Parse\">\r\n<meta name=\"APILocation\" content=\"PresentationFramework.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"eb4148e4-cada-2e67-a418-9e242e5cc2c0\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Windows.Markup\\XamlReader.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Reads XAML input and creates an object graph, using the WPF default XAML reader and an associated XAML object writer.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Windows.Markup/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Markup.XamlReader\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Markup.XamlReader.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Markup.XamlReader.yml","open_to_public_contributors":true,"api_name":["System.Windows.Markup.XamlReader","System.Windows.Markup.XamlReader..ctor","System.Windows.Markup.XamlReader.CancelAsync","System.Windows.Markup.XamlReader.GetWpfSchemaContext","System.Windows.Markup.XamlReader.Load","System.Windows.Markup.XamlReader.LoadAsync","System.Windows.Markup.XamlReader.LoadCompleted","System.Windows.Markup.XamlReader.add_LoadCompleted","System.Windows.Markup.XamlReader.remove_LoadCompleted","System.Windows.Markup.XamlReader.Parse"],"api_location":["PresentationFramework.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Markup.XamlReader","System::Windows::Markup::XamlReader","System.Windows.Markup.XamlReader.#ctor","System::Windows::Markup::XamlReader::#ctor","System.Windows.Markup.XamlReader.CancelAsync","System::Windows::Markup::XamlReader::CancelAsync","System.Windows.Markup.XamlReader.GetWpfSchemaContext","System::Windows::Markup::XamlReader::GetWpfSchemaContext","System.Windows.Markup.XamlReader.Load","System::Windows::Markup::XamlReader::Load","System.Windows.Markup.XamlReader.LoadAsync","System::Windows::Markup::XamlReader::LoadAsync","System.Windows.Markup.XamlReader.LoadCompleted","System::Windows::Markup::XamlReader::LoadCompleted","System.Windows.Markup.XamlReader.Parse","System::Windows::Markup::XamlReader::Parse"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"eb4148e4-cada-2e67-a418-9e242e5cc2c0","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Windows.Markup\\XamlReader.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Windows.Markup/XamlReader.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"XamlReader class | Microsoft Docs","_op_ogTitle":"XamlReader class","description":"Reads XAML input and creates an object graph, using the WPF default XAML reader and an associated XAML object writer.\n","toc_asset_id":"_splitted/System.Windows.Markup/toc.json","toc_rel":"_splitted/System.Windows.Markup/toc.json","source_url":"","ms.assetid":"System.Windows.Markup.XamlReader","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.markup.xamlreader","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.markup.xamlreader","fileRelativePath":"System.Windows.Markup.XamlReader.html"},"themesRelativePathToOutputRoot":"_themes/"}