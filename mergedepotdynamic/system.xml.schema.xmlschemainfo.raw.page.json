{"content":"    \r\n    <h1 id=\"System_Xml_Schema_XmlSchemaInfo\">\r\n      <span class=\"lang-csharp\">XmlSchemaInfo</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents the post-schema-validation infoset of a validated XML node.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class XmlSchemaInfo : System.Xml.Schema.IXmlSchemaInfo</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">XmlSchemaInfo</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Schema_XmlSchemaInfo__ctor\" data-linktype=\"self-bookmark\">XmlSchemaInfo()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.schema.xmlschemainfo\" data-linktype=\"relative-path\">XmlSchemaInfo</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Schema_XmlSchemaInfo_ContentType\" data-linktype=\"self-bookmark\">ContentType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.xml.schema.xmlschemacontenttype\" data-linktype=\"relative-path\">XmlSchemaContentType</a> object that corresponds to the content type of this validated XML node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Schema_XmlSchemaInfo_IsDefault\" data-linktype=\"self-bookmark\">IsDefault</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating if this validated XML node was set as the result of a default being applied during XML Schema Definition Language (XSD) schema validation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Schema_XmlSchemaInfo_IsNil\" data-linktype=\"self-bookmark\">IsNil</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating if the value for this validated XML node is nil.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Schema_XmlSchemaInfo_MemberType\" data-linktype=\"self-bookmark\">MemberType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the dynamic schema type for this validated XML node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Schema_XmlSchemaInfo_SchemaAttribute\" data-linktype=\"self-bookmark\">SchemaAttribute</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the compiled <a class=\"xref\" href=\"system.xml.schema.xmlschemaattribute\" data-linktype=\"relative-path\">XmlSchemaAttribute</a> object that corresponds to this validated XML node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Schema_XmlSchemaInfo_SchemaElement\" data-linktype=\"self-bookmark\">SchemaElement</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the compiled <a class=\"xref\" href=\"system.xml.schema.xmlschemaelement\" data-linktype=\"relative-path\">XmlSchemaElement</a> object that corresponds to this validated XML node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Schema_XmlSchemaInfo_SchemaType\" data-linktype=\"self-bookmark\">SchemaType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the static XML Schema Definition Language (XSD) schema type of this validated XML node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Schema_XmlSchemaInfo_Validity\" data-linktype=\"self-bookmark\">Validity</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.xml.schema.xmlschemavalidity\" data-linktype=\"relative-path\">XmlSchemaValidity</a> value of this validated XML node.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Schema_XmlSchemaInfo__ctor\">\r\n    \r\n            <a id=\"System_Xml_Schema_XmlSchemaInfo__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlSchemaInfo()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.schema.xmlschemainfo\" data-linktype=\"relative-path\">XmlSchemaInfo</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public XmlSchemaInfo ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>For an example of the XmlSchemaInfo constructor, see the <a class=\"xref\" href=\"system.xml.schema.xmlschemainfo\" data-linktype=\"relative-path\">XmlSchemaInfo</a> class reference topic.</p>\n\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Schema_XmlSchemaInfo_ContentType\">\r\n    \r\n            <a id=\"System_Xml_Schema_XmlSchemaInfo_ContentType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContentType</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.xml.schema.xmlschemacontenttype\" data-linktype=\"relative-path\">XmlSchemaContentType</a> object that corresponds to the content type of this validated XML node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.Schema.XmlSchemaContentType ContentType { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.schema.xmlschemacontenttype\" data-linktype=\"relative-path\">XmlSchemaContentType</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.schema.xmlschemacontenttype\" data-linktype=\"relative-path\">XmlSchemaContentType</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Schema_XmlSchemaInfo_IsDefault\">\r\n    \r\n            <a id=\"System_Xml_Schema_XmlSchemaInfo_IsDefault_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsDefault</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating if this validated XML node was set as the result of a default being applied during XML Schema Definition Language (XSD) schema validation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsDefault { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>A <code>bool</code> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The IsDefault property does not report DTD defaults.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Schema_XmlSchemaInfo_IsNil\">\r\n    \r\n            <a id=\"System_Xml_Schema_XmlSchemaInfo_IsNil_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsNil</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating if the value for this validated XML node is nil.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsNil { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>A <code>bool</code> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of an XML node is nil if its <code>xsi:nil</code> attribute is <code>true</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Schema_XmlSchemaInfo_MemberType\">\r\n    \r\n            <a id=\"System_Xml_Schema_XmlSchemaInfo_MemberType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MemberType</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the dynamic schema type for this validated XML node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.Schema.XmlSchemaSimpleType MemberType { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.schema.xmlschemasimpletype\" data-linktype=\"relative-path\">XmlSchemaSimpleType</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.schema.xmlschemasimpletype\" data-linktype=\"relative-path\">XmlSchemaSimpleType</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The MemberType property is set only if the static type of the XML node is a union type in which case the MemberType property will return the type from the union the XML node validated against.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Schema_XmlSchemaInfo_SchemaAttribute\">\r\n    \r\n            <a id=\"System_Xml_Schema_XmlSchemaInfo_SchemaAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SchemaAttribute</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the compiled <a class=\"xref\" href=\"system.xml.schema.xmlschemaattribute\" data-linktype=\"relative-path\">XmlSchemaAttribute</a> object that corresponds to this validated XML node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.Schema.XmlSchemaAttribute SchemaAttribute { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.schema.xmlschemaattribute\" data-linktype=\"relative-path\">XmlSchemaAttribute</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.schema.xmlschemaattribute\" data-linktype=\"relative-path\">XmlSchemaAttribute</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example validates the <code>contosoBooks.xml</code> file against the <code>contosoBooks.xsd</code> schema. The example uses the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> class to deserialize the <code>contosoBooks.xml</code> file and pass the value of the nodes to the methods of the <a class=\"xref\" href=\"system.xml.schema.xmlschemavalidator\" data-linktype=\"relative-path\">XmlSchemaValidator</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"XmlSchemaValidatorExamples#1\">using System;\nusing System.Xml;\nusing System.Xml.Schema;\nusing System.Xml.Serialization;\nusing System.Collections;\n\nnamespace Microsoft.Samples.Xml.Schema\n{\n    class XmlSchemaValidatorExamples\n    {\n        static void Main()\n        {\n            // The XML document to deserialize into the XmlSerializer object.\n            XmlReader reader = XmlReader.Create(&quot;contosoBooks.xml&quot;);\n\n            // The XmlSerializer object.\n            XmlSerializer serializer = new XmlSerializer(typeof(ContosoBooks));\n            ContosoBooks books = (ContosoBooks)serializer.Deserialize(reader);\n\n            // The XmlSchemaSet object containing the schema used to validate the XML document.\n            XmlSchemaSet schemaSet = new XmlSchemaSet();\n            schemaSet.Add(&quot;http://www.contoso.com/books&quot;, &quot;contosoBooks.xsd&quot;);\n\n            // The XmlNamespaceManager object used to handle namespaces.\n            XmlNamespaceManager manager = new XmlNamespaceManager(reader.NameTable);\n\n            // Assign a ValidationEventHandler to handle schema validation warnings and errors.\n            XmlSchemaValidator validator = new XmlSchemaValidator(reader.NameTable, schemaSet, manager, XmlSchemaValidationFlags.None);\n            validator.ValidationEventHandler += new ValidationEventHandler(SchemaValidationEventHandler);\n\n            // Initialize the XmlSchemaValidator object.\n            validator.Initialize();\n\n            // Validate the bookstore element, verify that all required attributes are present\n            // and prepare to validate child content.\n            validator.ValidateElement(&quot;bookstore&quot;, &quot;http://www.contoso.com/books&quot;, null);\n            validator.GetUnspecifiedDefaultAttributes(new ArrayList());\n            validator.ValidateEndOfAttributes(null);\n\n            // Get the next exptected element in the bookstore context.\n            XmlSchemaParticle[] particles = validator.GetExpectedParticles();\n            XmlSchemaElement nextElement = particles[0] as XmlSchemaElement;\n            Console.WriteLine(&quot;Expected Element: &#39;{0}&#39;&quot;, nextElement.Name);\n\n            foreach (BookType book in books.Book)\n            {\n                // Validate the book element.\n                validator.ValidateElement(&quot;book&quot;, &quot;http://www.contoso.com/books&quot;, null);\n\n                // Get the exptected attributes for the book element.\n                Console.Write(&quot;<br>Expected attributes: &quot;);\n                XmlSchemaAttribute[] attributes = validator.GetExpectedAttributes();\n                foreach (XmlSchemaAttribute attribute in attributes)\n                {\n                    Console.Write(&quot;&#39;{0}&#39; &quot;, attribute.Name);\n                }\n                Console.WriteLine();\n\n                // Validate the genre attribute and display its post schema validation information.\n                if (book.Genre != null)\n                {\n                    validator.ValidateAttribute(&quot;genre&quot;, &quot;&quot;, book.Genre, schemaInfo);\n                }\n                DisplaySchemaInfo();\n\n                // Validate the publicationdate attribute and display its post schema validation information.\n                if (book.PublicationDate != null)\n                {\n                    validator.ValidateAttribute(&quot;publicationdate&quot;, &quot;&quot;, dateTimeGetter(book.PublicationDate), schemaInfo);\n                }\n                DisplaySchemaInfo();\n\n                // Validate the ISBN attribute and display its post schema validation information.\n                if (book.Isbn != null)\n                {\n                    validator.ValidateAttribute(&quot;ISBN&quot;, &quot;&quot;, book.Isbn, schemaInfo);\n                }\n                DisplaySchemaInfo();\n\n                // After validating all the attributes for the current element with ValidateAttribute method,\n                // you must call GetUnspecifiedDefaultAttributes to validate the default attributes.\n                validator.GetUnspecifiedDefaultAttributes(new ArrayList());\n\n                // Verify that all required attributes of the book element are present\n                // and prepare to validate child content.\n                validator.ValidateEndOfAttributes(null);\n\n                // Validate the title element and its content.\n                validator.ValidateElement(&quot;title&quot;, &quot;http://www.contoso.com/books&quot;, null);\n                validator.ValidateEndElement(null, book.Title);\n\n                // Validate the author element, verify that all required attributes are present\n                // and prepare to validate child content.\n                validator.ValidateElement(&quot;author&quot;, &quot;http://www.contoso.com/books&quot;, null);\n                validator.GetUnspecifiedDefaultAttributes(new ArrayList());\n                validator.ValidateEndOfAttributes(null);\n\n                if (book.Author.Name != null)\n                {\n                    // Validate the name element and its content.\n                    validator.ValidateElement(&quot;name&quot;, &quot;http://www.contoso.com/books&quot;, null);\n                    validator.ValidateEndElement(null, book.Author.Name);\n                }\n\n                if (book.Author.FirstName != null)\n                {\n                    // Validate the first-name element and its content.\n                    validator.ValidateElement(&quot;first-name&quot;, &quot;http://www.contoso.com/books&quot;, null);\n                    validator.ValidateEndElement(null, book.Author.FirstName);\n\n                }\n\n                if (book.Author.LastName != null)\n                {\n                    // Validate the last-name element and its content.\n                    validator.ValidateElement(&quot;last-name&quot;, &quot;http://www.contoso.com/books&quot;, null);\n                    validator.ValidateEndElement(null, book.Author.LastName);\n                }\n\n                // Validate the content of the author element.\n                validator.ValidateEndElement(null);\n\n                // Validate the price element and its content.\n                validator.ValidateElement(&quot;price&quot;, &quot;http://www.contoso.com/books&quot;, null);\n                validator.ValidateEndElement(null, book.Price);\n\n                // Validate the content of the book element.\n                validator.ValidateEndElement(null);\n            }\n\n            // Validate the content of the bookstore element.\n            validator.ValidateEndElement(null);\n\n            // Close the XmlReader object.\n            reader.Close();\n        }\n\n        static XmlSchemaInfo schemaInfo = new XmlSchemaInfo();\n        static object dateTimeGetterContent;\n\n        static object dateTimeGetterHandle()\n        {\n            return dateTimeGetterContent;\n        }\n\n        static XmlValueGetter dateTimeGetter(DateTime dateTime)\n        {\n            dateTimeGetterContent = dateTime;\n            return new XmlValueGetter(dateTimeGetterHandle);\n        }\n\n        static void DisplaySchemaInfo()\n        {\n            if (schemaInfo.SchemaElement != null)\n            {\n                Console.WriteLine(&quot;Element &#39;{0}&#39; with type &#39;{1}&#39; is &#39;{2}&#39;&quot;,\n                    schemaInfo.SchemaElement.Name, schemaInfo.SchemaType, schemaInfo.Validity);\n            }\n            else if (schemaInfo.SchemaAttribute != null)\n            {\n                Console.WriteLine(&quot;Attribute &#39;{0}&#39; with type &#39;{1}&#39; is &#39;{2}&#39;&quot;,\n                    schemaInfo.SchemaAttribute.Name, schemaInfo.SchemaType, schemaInfo.Validity);\n            }\n        }\n\n        static void SchemaValidationEventHandler(object sender, ValidationEventArgs e)\n        {\n            switch (e.Severity)\n            {\n                case XmlSeverityType.Error:\n                    Console.WriteLine(&quot;<br>Error: {0}&quot;, e.Message);\n                    break;\n                case XmlSeverityType.Warning:\n                    Console.WriteLine(&quot;<br>Warning: {0}&quot;, e.Message);\n                    break;\n            }\n        }\n    }\n\n    [XmlRootAttribute(&quot;bookstore&quot;, Namespace = &quot;http://www.contoso.com/books&quot;, IsNullable = false)]\n    public class ContosoBooks\n    {\n        [XmlElementAttribute(&quot;book&quot;)]\n        public BookType[] Book;\n    }\n\n    public class BookType\n    {\n        [XmlAttributeAttribute(&quot;genre&quot;)]\n        public string Genre;\n\n        [XmlAttributeAttribute(&quot;publicationdate&quot;, DataType = &quot;date&quot;)]\n        public DateTime PublicationDate;\n\n        [XmlAttributeAttribute(&quot;ISBN&quot;)]\n        public string Isbn;\n\n        [XmlElementAttribute(&quot;title&quot;)]\n        public string Title;\n\n        [XmlElementAttribute(&quot;author&quot;)]\n        public BookAuthor Author;\n\n        [XmlElementAttribute(&quot;price&quot;)]\n        public Decimal Price;\n    }\n\n    public class BookAuthor\n    {\n        [XmlElementAttribute(&quot;name&quot;)]\n        public string Name;\n\n        [XmlElementAttribute(&quot;first-name&quot;)]\n        public string FirstName;\n\n        [XmlElementAttribute(&quot;last-name&quot;)]\n        public string LastName;\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"XmlSchemaValidatorExamples#1\">Imports System\nImports System.Xml\nImports System.Xml.Schema\nImports System.Xml.Serialization\nImports System.Collections\n\n\nNamespace Microsoft.Samples.Xml.Schema\n\n    Class XmlSchemaValidatorExamples\n\n        Shared Sub Main()\n\n            &#39; The XML document to deserialize into the XmlSerializer object.\n            Dim reader As XmlReader = XmlReader.Create(&quot;contosoBooks.xml&quot;)\n\n            &#39; The XmlSerializer object.\n            Dim serializer As XmlSerializer = New XmlSerializer(GetType(ContosoBooks))\n            Dim books As ContosoBooks = CType(serializer.Deserialize(reader), ContosoBooks)\n\n            &#39; The XmlSchemaSet object containing the schema used to validate the XML document.\n            Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()\n            schemaSet.Add(&quot;http://www.contoso.com/books&quot;, &quot;contosoBooks.xsd&quot;)\n\n            &#39; The XmlNamespaceManager object used to handle namespaces.\n            Dim manager As XmlNamespaceManager = New XmlNamespaceManager(reader.NameTable)\n\n            &#39; Assign a ValidationEventHandler to handle schema validation warnings and errors.\n            Dim validator As XmlSchemaValidator = New XmlSchemaValidator(reader.NameTable, schemaSet, manager, XmlSchemaValidationFlags.None)\n            &#39;validator.ValidationEventHandler += New ValidationEventHandler(SchemaValidationEventHandler)\n            AddHandler validator.ValidationEventHandler, AddressOf SchemaValidationEventHandler\n\n            &#39; Initialize the XmlSchemaValidator object.\n            validator.Initialize()\n\n            &#39; Validate the bookstore element, verify that all required attributes are present\n            &#39; and prepare to validate child content.\n            validator.ValidateElement(&quot;bookstore&quot;, &quot;http://www.contoso.com/books&quot;, Nothing)\n\n            validator.GetUnspecifiedDefaultAttributes(New ArrayList())\n            validator.ValidateEndOfAttributes(Nothing)\n\n            &#39; Get the next exptected element in the bookstore context.\n            Dim particles() As XmlSchemaParticle = validator.GetExpectedParticles()\n            Dim nextElement As XmlSchemaElement = particles(0)\n            Console.WriteLine(&quot;Expected Element: &#39;{0}&#39;&quot;, nextElement.Name)\n\n            For Each book As BookType In books.book\n                &#39; Validate the book element.\n                validator.ValidateElement(&quot;book&quot;, &quot;http://www.contoso.com/books&quot;, Nothing)\n\n                &#39; Get the exptected attributes for the book element.\n                Console.Write(vbCrLf &amp; &quot;Expected attributes: &quot;)\n                Dim attributes() As XmlSchemaAttribute = validator.GetExpectedAttributes()\n                For Each attribute As XmlSchemaAttribute In attributes\n                    Console.Write(&quot;&#39;{0}&#39; &quot;, attribute.Name)\n                Next\n                Console.WriteLine()\n\n                &#39; Validate the genre attribute and display its post schema validation information.\n                If Not book.Genre Is Nothing Then\n                    validator.ValidateAttribute(&quot;genre&quot;, &quot;&quot;, book.Genre, schemaInfo)\n                End If\n                DisplaySchemaInfo()\n\n                &#39; Validate the publicationdate attribute and display its post schema validation information.\n                If Not book.PublicationDate = Nothing Then\n                    validator.ValidateAttribute(&quot;publicationdate&quot;, &quot;&quot;, dateTimeGetter(book.PublicationDate), schemaInfo)\n                End If\n                DisplaySchemaInfo()\n\n                &#39; Validate the ISBN attribute and display its post schema validation information.\n                If Not book.Isbn Is Nothing Then\n                    validator.ValidateAttribute(&quot;ISBN&quot;, &quot;&quot;, book.Isbn, schemaInfo)\n                End If\n                DisplaySchemaInfo()\n    \n                &#39; After validating all the attributes for the current element with ValidateAttribute method,\n                &#39; you must call GetUnspecifiedDefaultAttributes to validate the default attributes.\n                validator.GetUnspecifiedDefaultAttributes(New ArrayList())\n\n                &#39; Verify that all required attributes of the book element are present\n                &#39; and prepare to validate child content.\n                validator.ValidateEndOfAttributes(Nothing)\n\n                &#39; Validate the title element and its content.\n                validator.ValidateElement(&quot;title&quot;, &quot;http://www.contoso.com/books&quot;, Nothing)\n                validator.ValidateEndElement(Nothing, book.Title)\n\n                &#39; Validate the author element, verify that all required attributes are present\n                &#39; and prepare to validate child content.\n                validator.ValidateElement(&quot;author&quot;, &quot;http://www.contoso.com/books&quot;, Nothing)\n\n                validator.GetUnspecifiedDefaultAttributes(New ArrayList())\n                validator.ValidateEndOfAttributes(Nothing)\n\n                If Not book.Author.Name Is Nothing Then\n                    &#39; Validate the name element and its content.\n                    validator.ValidateElement(&quot;name&quot;, &quot;http://www.contoso.com/books&quot;, Nothing)\n                    validator.ValidateEndElement(Nothing, book.Author.Name)\n                End If\n\n                If Not book.Author.FirstName Is Nothing Then\n                    &#39; Validate the first-name element and its content.\n                    validator.ValidateElement(&quot;first-name&quot;, &quot;http://www.contoso.com/books&quot;, Nothing)\n                    validator.ValidateEndElement(Nothing, book.Author.FirstName)\n\n                End If\n\n                If Not book.Author.LastName Is Nothing Then\n                    &#39; Validate the last-name element and its content.\n                    validator.ValidateElement(&quot;last-name&quot;, &quot;http://www.contoso.com/books&quot;, Nothing)\n                    validator.ValidateEndElement(Nothing, book.Author.LastName)\n                End If\n\n                &#39; Validate the content of the author element.\n                validator.ValidateEndElement(Nothing)\n\n                &#39; Validate the price element and its content.\n                validator.ValidateElement(&quot;price&quot;, &quot;http://www.contoso.com/books&quot;, Nothing)\n                validator.ValidateEndElement(Nothing, book.Price)\n\n                &#39; Validate the content of the book element.\n                validator.ValidateEndElement(Nothing)\n            Next\n\n            &#39; Validate the content of the bookstore element.\n            validator.ValidateEndElement(Nothing)\n\n            &#39; Close the XmlReader object.\n            reader.Close()\n\n        End Sub\n\n        Shared schemaInfo As XmlSchemaInfo = New XmlSchemaInfo()\n        Shared dateTimeGetterContent As Object\n\n        Shared Function dateTimeGetterHandle() As Object\n\n            Return dateTimeGetterContent\n\n        End Function\n\n        Shared Function dateTimeGetter(ByVal dateTime As DateTime) As XmlValueGetter\n\n            dateTimeGetterContent = dateTime\n            Return New XmlValueGetter(AddressOf dateTimeGetterHandle)\n\n        End Function\n\n        Shared Sub DisplaySchemaInfo()\n\n            If Not schemaInfo.SchemaElement Is Nothing Then\n                Console.WriteLine(&quot;Element &#39;{0}&#39; with type &#39;{1}&#39; is &#39;{2}&#39;&quot;, schemaInfo.SchemaElement.Name, schemaInfo.SchemaType, schemaInfo.Validity)\n            ElseIf Not schemaInfo.SchemaAttribute Is Nothing Then\n                Console.WriteLine(&quot;Attribute &#39;{0}&#39; with type &#39;{1}&#39; is &#39;{2}&#39;&quot;, schemaInfo.SchemaAttribute.Name, schemaInfo.SchemaType, schemaInfo.Validity)\n            End If\n\n        End Sub\n\n        Shared Sub SchemaValidationEventHandler(ByVal sender As Object, ByVal e As ValidationEventArgs)\n\n            Select Case e.Severity\n                Case XmlSeverityType.Error\n                    Console.WriteLine(vbCrLf &amp; &quot;Error: {0}&quot;, e.Message)\n                    Exit Sub\n                Case XmlSeverityType.Warning\n                    Console.WriteLine(vbCrLf &amp; &quot;Warning: {0}&quot;, e.Message)\n                    Exit Sub\n            End Select\n\n        End Sub\n\n    End Class\n\n    &lt;XmlRootAttribute(&quot;bookstore&quot;, Namespace:=&quot;http://www.contoso.com/books&quot;, IsNullable:=False)&gt; _\n    Public Class ContosoBooks\n\n        &lt;XmlElementAttribute(&quot;book&quot;)&gt; _\n        Public book() As BookType\n\n    End Class\n\n    Public Class BookType\n\n        &lt;XmlAttributeAttribute(&quot;genre&quot;)&gt; _\n        Public Genre As String\n\n        &lt;XmlAttributeAttribute(&quot;publicationdate&quot;, DataType:=&quot;date&quot;)&gt; _\n        Public PublicationDate As DateTime\n\n        &lt;XmlAttributeAttribute(&quot;ISBN&quot;)&gt; _\n        Public Isbn As String\n\n        &lt;XmlElementAttribute(&quot;title&quot;)&gt; _\n        Public Title As String\n\n        &lt;XmlElementAttribute(&quot;author&quot;)&gt; _\n        Public Author As BookAuthor\n\n        &lt;XmlElementAttribute(&quot;price&quot;)&gt; _\n        Public Price As Decimal\n\n    End Class\n\n    Public Class BookAuthor\n\n        &lt;XmlElementAttribute(&quot;name&quot;)&gt; _\n        Public Name As String\n\n        &lt;XmlElementAttribute(&quot;first-name&quot;)&gt; _\n        Public FirstName As String\n\n        &lt;XmlElementAttribute(&quot;last-name&quot;)&gt; _\n        Public LastName As String\n\n    End Class\n\nEnd Namespace\n</code></pre><p> The example takes the <code>contosoBooks.xml</code> file as input.  </p>\n<pre><code class=\"lang-xml\" name=\"XPathXMLExamples#2\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;\n&lt;bookstore xmlns=&quot;http://www.contoso.com/books&quot;&gt;\n    &lt;book genre=&quot;autobiography&quot; publicationdate=&quot;1981-03-22&quot; ISBN=&quot;1-861003-11-0&quot;&gt;\n        &lt;title&gt;The Autobiography of Benjamin Franklin&lt;/title&gt;\n        &lt;author&gt;\n            &lt;first-name&gt;Benjamin&lt;/first-name&gt;\n            &lt;last-name&gt;Franklin&lt;/last-name&gt;\n        &lt;/author&gt;\n        &lt;price&gt;8.99&lt;/price&gt;\n    &lt;/book&gt;\n    &lt;book genre=&quot;novel&quot; publicationdate=&quot;1967-11-17&quot; ISBN=&quot;0-201-63361-2&quot;&gt;\n        &lt;title&gt;The Confidence Man&lt;/title&gt;\n        &lt;author&gt;\n            &lt;first-name&gt;Herman&lt;/first-name&gt;\n            &lt;last-name&gt;Melville&lt;/last-name&gt;\n        &lt;/author&gt;\n        &lt;price&gt;11.99&lt;/price&gt;\n    &lt;/book&gt;\n    &lt;book genre=&quot;philosophy&quot; publicationdate=&quot;1991-02-15&quot; ISBN=&quot;1-861001-57-6&quot;&gt;\n        &lt;title&gt;The Gorgias&lt;/title&gt;\n        &lt;author&gt;\n            &lt;name&gt;Plato&lt;/name&gt;\n        &lt;/author&gt;\n        &lt;price&gt;9.99&lt;/price&gt;\n    &lt;/book&gt;\n&lt;/bookstore&gt;\n</code></pre><p> The example also takes the <code>contosoBooks.xsd</code> as an input.  </p>\n<pre><code class=\"lang-xml\" name=\"XPathXMLExamples#3\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;xs:schema attributeFormDefault=&quot;unqualified&quot; elementFormDefault=&quot;qualified&quot; targetNamespace=&quot;http://www.contoso.com/books&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;\n    &lt;xs:element name=&quot;bookstore&quot;&gt;\n        &lt;xs:complexType&gt;\n            &lt;xs:sequence&gt;\n                &lt;xs:element maxOccurs=&quot;unbounded&quot; name=&quot;book&quot;&gt;\n                    &lt;xs:complexType&gt;\n                        &lt;xs:sequence&gt;\n                            &lt;xs:element name=&quot;title&quot; type=&quot;xs:string&quot; /&gt;\n                            &lt;xs:element name=&quot;author&quot;&gt;\n                                &lt;xs:complexType&gt;\n                                    &lt;xs:sequence&gt;\n                                        &lt;xs:element minOccurs=&quot;0&quot; name=&quot;name&quot; type=&quot;xs:string&quot; /&gt;\n                                        &lt;xs:element minOccurs=&quot;0&quot; name=&quot;first-name&quot; type=&quot;xs:string&quot; /&gt;\n                                        &lt;xs:element minOccurs=&quot;0&quot; name=&quot;last-name&quot; type=&quot;xs:string&quot; /&gt;\n                                    &lt;/xs:sequence&gt;\n                                &lt;/xs:complexType&gt;\n                            &lt;/xs:element&gt;\n                            &lt;xs:element name=&quot;price&quot; type=&quot;xs:decimal&quot; /&gt;\n                        &lt;/xs:sequence&gt;\n                        &lt;xs:attribute name=&quot;genre&quot; type=&quot;xs:string&quot; use=&quot;required&quot; /&gt;\n                        &lt;xs:attribute name=&quot;publicationdate&quot; type=&quot;xs:date&quot; use=&quot;required&quot; /&gt;\n                        &lt;xs:attribute name=&quot;ISBN&quot; type=&quot;xs:string&quot; use=&quot;required&quot; /&gt;\n                    &lt;/xs:complexType&gt;\n                &lt;/xs:element&gt;\n            &lt;/xs:sequence&gt;\n        &lt;/xs:complexType&gt;\n    &lt;/xs:element&gt;\n&lt;/xs:schema&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Schema_XmlSchemaInfo_SchemaElement\">\r\n    \r\n            <a id=\"System_Xml_Schema_XmlSchemaInfo_SchemaElement_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SchemaElement</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the compiled <a class=\"xref\" href=\"system.xml.schema.xmlschemaelement\" data-linktype=\"relative-path\">XmlSchemaElement</a> object that corresponds to this validated XML node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.Schema.XmlSchemaElement SchemaElement { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.schema.xmlschemaelement\" data-linktype=\"relative-path\">XmlSchemaElement</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.schema.xmlschemaelement\" data-linktype=\"relative-path\">XmlSchemaElement</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example validates the <code>contosoBooks.xml</code> file against the <code>contosoBooks.xsd</code> schema. The example uses the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> class to deserialize the <code>contosoBooks.xml</code> file and pass the value of the nodes to the methods of the <a class=\"xref\" href=\"system.xml.schema.xmlschemavalidator\" data-linktype=\"relative-path\">XmlSchemaValidator</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"XmlSchemaValidatorExamples#1\">using System;\nusing System.Xml;\nusing System.Xml.Schema;\nusing System.Xml.Serialization;\nusing System.Collections;\n\nnamespace Microsoft.Samples.Xml.Schema\n{\n    class XmlSchemaValidatorExamples\n    {\n        static void Main()\n        {\n            // The XML document to deserialize into the XmlSerializer object.\n            XmlReader reader = XmlReader.Create(&quot;contosoBooks.xml&quot;);\n\n            // The XmlSerializer object.\n            XmlSerializer serializer = new XmlSerializer(typeof(ContosoBooks));\n            ContosoBooks books = (ContosoBooks)serializer.Deserialize(reader);\n\n            // The XmlSchemaSet object containing the schema used to validate the XML document.\n            XmlSchemaSet schemaSet = new XmlSchemaSet();\n            schemaSet.Add(&quot;http://www.contoso.com/books&quot;, &quot;contosoBooks.xsd&quot;);\n\n            // The XmlNamespaceManager object used to handle namespaces.\n            XmlNamespaceManager manager = new XmlNamespaceManager(reader.NameTable);\n\n            // Assign a ValidationEventHandler to handle schema validation warnings and errors.\n            XmlSchemaValidator validator = new XmlSchemaValidator(reader.NameTable, schemaSet, manager, XmlSchemaValidationFlags.None);\n            validator.ValidationEventHandler += new ValidationEventHandler(SchemaValidationEventHandler);\n\n            // Initialize the XmlSchemaValidator object.\n            validator.Initialize();\n\n            // Validate the bookstore element, verify that all required attributes are present\n            // and prepare to validate child content.\n            validator.ValidateElement(&quot;bookstore&quot;, &quot;http://www.contoso.com/books&quot;, null);\n            validator.GetUnspecifiedDefaultAttributes(new ArrayList());\n            validator.ValidateEndOfAttributes(null);\n\n            // Get the next exptected element in the bookstore context.\n            XmlSchemaParticle[] particles = validator.GetExpectedParticles();\n            XmlSchemaElement nextElement = particles[0] as XmlSchemaElement;\n            Console.WriteLine(&quot;Expected Element: &#39;{0}&#39;&quot;, nextElement.Name);\n\n            foreach (BookType book in books.Book)\n            {\n                // Validate the book element.\n                validator.ValidateElement(&quot;book&quot;, &quot;http://www.contoso.com/books&quot;, null);\n\n                // Get the exptected attributes for the book element.\n                Console.Write(&quot;<br>Expected attributes: &quot;);\n                XmlSchemaAttribute[] attributes = validator.GetExpectedAttributes();\n                foreach (XmlSchemaAttribute attribute in attributes)\n                {\n                    Console.Write(&quot;&#39;{0}&#39; &quot;, attribute.Name);\n                }\n                Console.WriteLine();\n\n                // Validate the genre attribute and display its post schema validation information.\n                if (book.Genre != null)\n                {\n                    validator.ValidateAttribute(&quot;genre&quot;, &quot;&quot;, book.Genre, schemaInfo);\n                }\n                DisplaySchemaInfo();\n\n                // Validate the publicationdate attribute and display its post schema validation information.\n                if (book.PublicationDate != null)\n                {\n                    validator.ValidateAttribute(&quot;publicationdate&quot;, &quot;&quot;, dateTimeGetter(book.PublicationDate), schemaInfo);\n                }\n                DisplaySchemaInfo();\n\n                // Validate the ISBN attribute and display its post schema validation information.\n                if (book.Isbn != null)\n                {\n                    validator.ValidateAttribute(&quot;ISBN&quot;, &quot;&quot;, book.Isbn, schemaInfo);\n                }\n                DisplaySchemaInfo();\n\n                // After validating all the attributes for the current element with ValidateAttribute method,\n                // you must call GetUnspecifiedDefaultAttributes to validate the default attributes.\n                validator.GetUnspecifiedDefaultAttributes(new ArrayList());\n\n                // Verify that all required attributes of the book element are present\n                // and prepare to validate child content.\n                validator.ValidateEndOfAttributes(null);\n\n                // Validate the title element and its content.\n                validator.ValidateElement(&quot;title&quot;, &quot;http://www.contoso.com/books&quot;, null);\n                validator.ValidateEndElement(null, book.Title);\n\n                // Validate the author element, verify that all required attributes are present\n                // and prepare to validate child content.\n                validator.ValidateElement(&quot;author&quot;, &quot;http://www.contoso.com/books&quot;, null);\n                validator.GetUnspecifiedDefaultAttributes(new ArrayList());\n                validator.ValidateEndOfAttributes(null);\n\n                if (book.Author.Name != null)\n                {\n                    // Validate the name element and its content.\n                    validator.ValidateElement(&quot;name&quot;, &quot;http://www.contoso.com/books&quot;, null);\n                    validator.ValidateEndElement(null, book.Author.Name);\n                }\n\n                if (book.Author.FirstName != null)\n                {\n                    // Validate the first-name element and its content.\n                    validator.ValidateElement(&quot;first-name&quot;, &quot;http://www.contoso.com/books&quot;, null);\n                    validator.ValidateEndElement(null, book.Author.FirstName);\n\n                }\n\n                if (book.Author.LastName != null)\n                {\n                    // Validate the last-name element and its content.\n                    validator.ValidateElement(&quot;last-name&quot;, &quot;http://www.contoso.com/books&quot;, null);\n                    validator.ValidateEndElement(null, book.Author.LastName);\n                }\n\n                // Validate the content of the author element.\n                validator.ValidateEndElement(null);\n\n                // Validate the price element and its content.\n                validator.ValidateElement(&quot;price&quot;, &quot;http://www.contoso.com/books&quot;, null);\n                validator.ValidateEndElement(null, book.Price);\n\n                // Validate the content of the book element.\n                validator.ValidateEndElement(null);\n            }\n\n            // Validate the content of the bookstore element.\n            validator.ValidateEndElement(null);\n\n            // Close the XmlReader object.\n            reader.Close();\n        }\n\n        static XmlSchemaInfo schemaInfo = new XmlSchemaInfo();\n        static object dateTimeGetterContent;\n\n        static object dateTimeGetterHandle()\n        {\n            return dateTimeGetterContent;\n        }\n\n        static XmlValueGetter dateTimeGetter(DateTime dateTime)\n        {\n            dateTimeGetterContent = dateTime;\n            return new XmlValueGetter(dateTimeGetterHandle);\n        }\n\n        static void DisplaySchemaInfo()\n        {\n            if (schemaInfo.SchemaElement != null)\n            {\n                Console.WriteLine(&quot;Element &#39;{0}&#39; with type &#39;{1}&#39; is &#39;{2}&#39;&quot;,\n                    schemaInfo.SchemaElement.Name, schemaInfo.SchemaType, schemaInfo.Validity);\n            }\n            else if (schemaInfo.SchemaAttribute != null)\n            {\n                Console.WriteLine(&quot;Attribute &#39;{0}&#39; with type &#39;{1}&#39; is &#39;{2}&#39;&quot;,\n                    schemaInfo.SchemaAttribute.Name, schemaInfo.SchemaType, schemaInfo.Validity);\n            }\n        }\n\n        static void SchemaValidationEventHandler(object sender, ValidationEventArgs e)\n        {\n            switch (e.Severity)\n            {\n                case XmlSeverityType.Error:\n                    Console.WriteLine(&quot;<br>Error: {0}&quot;, e.Message);\n                    break;\n                case XmlSeverityType.Warning:\n                    Console.WriteLine(&quot;<br>Warning: {0}&quot;, e.Message);\n                    break;\n            }\n        }\n    }\n\n    [XmlRootAttribute(&quot;bookstore&quot;, Namespace = &quot;http://www.contoso.com/books&quot;, IsNullable = false)]\n    public class ContosoBooks\n    {\n        [XmlElementAttribute(&quot;book&quot;)]\n        public BookType[] Book;\n    }\n\n    public class BookType\n    {\n        [XmlAttributeAttribute(&quot;genre&quot;)]\n        public string Genre;\n\n        [XmlAttributeAttribute(&quot;publicationdate&quot;, DataType = &quot;date&quot;)]\n        public DateTime PublicationDate;\n\n        [XmlAttributeAttribute(&quot;ISBN&quot;)]\n        public string Isbn;\n\n        [XmlElementAttribute(&quot;title&quot;)]\n        public string Title;\n\n        [XmlElementAttribute(&quot;author&quot;)]\n        public BookAuthor Author;\n\n        [XmlElementAttribute(&quot;price&quot;)]\n        public Decimal Price;\n    }\n\n    public class BookAuthor\n    {\n        [XmlElementAttribute(&quot;name&quot;)]\n        public string Name;\n\n        [XmlElementAttribute(&quot;first-name&quot;)]\n        public string FirstName;\n\n        [XmlElementAttribute(&quot;last-name&quot;)]\n        public string LastName;\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"XmlSchemaValidatorExamples#1\">Imports System\nImports System.Xml\nImports System.Xml.Schema\nImports System.Xml.Serialization\nImports System.Collections\n\n\nNamespace Microsoft.Samples.Xml.Schema\n\n    Class XmlSchemaValidatorExamples\n\n        Shared Sub Main()\n\n            &#39; The XML document to deserialize into the XmlSerializer object.\n            Dim reader As XmlReader = XmlReader.Create(&quot;contosoBooks.xml&quot;)\n\n            &#39; The XmlSerializer object.\n            Dim serializer As XmlSerializer = New XmlSerializer(GetType(ContosoBooks))\n            Dim books As ContosoBooks = CType(serializer.Deserialize(reader), ContosoBooks)\n\n            &#39; The XmlSchemaSet object containing the schema used to validate the XML document.\n            Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()\n            schemaSet.Add(&quot;http://www.contoso.com/books&quot;, &quot;contosoBooks.xsd&quot;)\n\n            &#39; The XmlNamespaceManager object used to handle namespaces.\n            Dim manager As XmlNamespaceManager = New XmlNamespaceManager(reader.NameTable)\n\n            &#39; Assign a ValidationEventHandler to handle schema validation warnings and errors.\n            Dim validator As XmlSchemaValidator = New XmlSchemaValidator(reader.NameTable, schemaSet, manager, XmlSchemaValidationFlags.None)\n            &#39;validator.ValidationEventHandler += New ValidationEventHandler(SchemaValidationEventHandler)\n            AddHandler validator.ValidationEventHandler, AddressOf SchemaValidationEventHandler\n\n            &#39; Initialize the XmlSchemaValidator object.\n            validator.Initialize()\n\n            &#39; Validate the bookstore element, verify that all required attributes are present\n            &#39; and prepare to validate child content.\n            validator.ValidateElement(&quot;bookstore&quot;, &quot;http://www.contoso.com/books&quot;, Nothing)\n\n            validator.GetUnspecifiedDefaultAttributes(New ArrayList())\n            validator.ValidateEndOfAttributes(Nothing)\n\n            &#39; Get the next exptected element in the bookstore context.\n            Dim particles() As XmlSchemaParticle = validator.GetExpectedParticles()\n            Dim nextElement As XmlSchemaElement = particles(0)\n            Console.WriteLine(&quot;Expected Element: &#39;{0}&#39;&quot;, nextElement.Name)\n\n            For Each book As BookType In books.book\n                &#39; Validate the book element.\n                validator.ValidateElement(&quot;book&quot;, &quot;http://www.contoso.com/books&quot;, Nothing)\n\n                &#39; Get the exptected attributes for the book element.\n                Console.Write(vbCrLf &amp; &quot;Expected attributes: &quot;)\n                Dim attributes() As XmlSchemaAttribute = validator.GetExpectedAttributes()\n                For Each attribute As XmlSchemaAttribute In attributes\n                    Console.Write(&quot;&#39;{0}&#39; &quot;, attribute.Name)\n                Next\n                Console.WriteLine()\n\n                &#39; Validate the genre attribute and display its post schema validation information.\n                If Not book.Genre Is Nothing Then\n                    validator.ValidateAttribute(&quot;genre&quot;, &quot;&quot;, book.Genre, schemaInfo)\n                End If\n                DisplaySchemaInfo()\n\n                &#39; Validate the publicationdate attribute and display its post schema validation information.\n                If Not book.PublicationDate = Nothing Then\n                    validator.ValidateAttribute(&quot;publicationdate&quot;, &quot;&quot;, dateTimeGetter(book.PublicationDate), schemaInfo)\n                End If\n                DisplaySchemaInfo()\n\n                &#39; Validate the ISBN attribute and display its post schema validation information.\n                If Not book.Isbn Is Nothing Then\n                    validator.ValidateAttribute(&quot;ISBN&quot;, &quot;&quot;, book.Isbn, schemaInfo)\n                End If\n                DisplaySchemaInfo()\n    \n                &#39; After validating all the attributes for the current element with ValidateAttribute method,\n                &#39; you must call GetUnspecifiedDefaultAttributes to validate the default attributes.\n                validator.GetUnspecifiedDefaultAttributes(New ArrayList())\n\n                &#39; Verify that all required attributes of the book element are present\n                &#39; and prepare to validate child content.\n                validator.ValidateEndOfAttributes(Nothing)\n\n                &#39; Validate the title element and its content.\n                validator.ValidateElement(&quot;title&quot;, &quot;http://www.contoso.com/books&quot;, Nothing)\n                validator.ValidateEndElement(Nothing, book.Title)\n\n                &#39; Validate the author element, verify that all required attributes are present\n                &#39; and prepare to validate child content.\n                validator.ValidateElement(&quot;author&quot;, &quot;http://www.contoso.com/books&quot;, Nothing)\n\n                validator.GetUnspecifiedDefaultAttributes(New ArrayList())\n                validator.ValidateEndOfAttributes(Nothing)\n\n                If Not book.Author.Name Is Nothing Then\n                    &#39; Validate the name element and its content.\n                    validator.ValidateElement(&quot;name&quot;, &quot;http://www.contoso.com/books&quot;, Nothing)\n                    validator.ValidateEndElement(Nothing, book.Author.Name)\n                End If\n\n                If Not book.Author.FirstName Is Nothing Then\n                    &#39; Validate the first-name element and its content.\n                    validator.ValidateElement(&quot;first-name&quot;, &quot;http://www.contoso.com/books&quot;, Nothing)\n                    validator.ValidateEndElement(Nothing, book.Author.FirstName)\n\n                End If\n\n                If Not book.Author.LastName Is Nothing Then\n                    &#39; Validate the last-name element and its content.\n                    validator.ValidateElement(&quot;last-name&quot;, &quot;http://www.contoso.com/books&quot;, Nothing)\n                    validator.ValidateEndElement(Nothing, book.Author.LastName)\n                End If\n\n                &#39; Validate the content of the author element.\n                validator.ValidateEndElement(Nothing)\n\n                &#39; Validate the price element and its content.\n                validator.ValidateElement(&quot;price&quot;, &quot;http://www.contoso.com/books&quot;, Nothing)\n                validator.ValidateEndElement(Nothing, book.Price)\n\n                &#39; Validate the content of the book element.\n                validator.ValidateEndElement(Nothing)\n            Next\n\n            &#39; Validate the content of the bookstore element.\n            validator.ValidateEndElement(Nothing)\n\n            &#39; Close the XmlReader object.\n            reader.Close()\n\n        End Sub\n\n        Shared schemaInfo As XmlSchemaInfo = New XmlSchemaInfo()\n        Shared dateTimeGetterContent As Object\n\n        Shared Function dateTimeGetterHandle() As Object\n\n            Return dateTimeGetterContent\n\n        End Function\n\n        Shared Function dateTimeGetter(ByVal dateTime As DateTime) As XmlValueGetter\n\n            dateTimeGetterContent = dateTime\n            Return New XmlValueGetter(AddressOf dateTimeGetterHandle)\n\n        End Function\n\n        Shared Sub DisplaySchemaInfo()\n\n            If Not schemaInfo.SchemaElement Is Nothing Then\n                Console.WriteLine(&quot;Element &#39;{0}&#39; with type &#39;{1}&#39; is &#39;{2}&#39;&quot;, schemaInfo.SchemaElement.Name, schemaInfo.SchemaType, schemaInfo.Validity)\n            ElseIf Not schemaInfo.SchemaAttribute Is Nothing Then\n                Console.WriteLine(&quot;Attribute &#39;{0}&#39; with type &#39;{1}&#39; is &#39;{2}&#39;&quot;, schemaInfo.SchemaAttribute.Name, schemaInfo.SchemaType, schemaInfo.Validity)\n            End If\n\n        End Sub\n\n        Shared Sub SchemaValidationEventHandler(ByVal sender As Object, ByVal e As ValidationEventArgs)\n\n            Select Case e.Severity\n                Case XmlSeverityType.Error\n                    Console.WriteLine(vbCrLf &amp; &quot;Error: {0}&quot;, e.Message)\n                    Exit Sub\n                Case XmlSeverityType.Warning\n                    Console.WriteLine(vbCrLf &amp; &quot;Warning: {0}&quot;, e.Message)\n                    Exit Sub\n            End Select\n\n        End Sub\n\n    End Class\n\n    &lt;XmlRootAttribute(&quot;bookstore&quot;, Namespace:=&quot;http://www.contoso.com/books&quot;, IsNullable:=False)&gt; _\n    Public Class ContosoBooks\n\n        &lt;XmlElementAttribute(&quot;book&quot;)&gt; _\n        Public book() As BookType\n\n    End Class\n\n    Public Class BookType\n\n        &lt;XmlAttributeAttribute(&quot;genre&quot;)&gt; _\n        Public Genre As String\n\n        &lt;XmlAttributeAttribute(&quot;publicationdate&quot;, DataType:=&quot;date&quot;)&gt; _\n        Public PublicationDate As DateTime\n\n        &lt;XmlAttributeAttribute(&quot;ISBN&quot;)&gt; _\n        Public Isbn As String\n\n        &lt;XmlElementAttribute(&quot;title&quot;)&gt; _\n        Public Title As String\n\n        &lt;XmlElementAttribute(&quot;author&quot;)&gt; _\n        Public Author As BookAuthor\n\n        &lt;XmlElementAttribute(&quot;price&quot;)&gt; _\n        Public Price As Decimal\n\n    End Class\n\n    Public Class BookAuthor\n\n        &lt;XmlElementAttribute(&quot;name&quot;)&gt; _\n        Public Name As String\n\n        &lt;XmlElementAttribute(&quot;first-name&quot;)&gt; _\n        Public FirstName As String\n\n        &lt;XmlElementAttribute(&quot;last-name&quot;)&gt; _\n        Public LastName As String\n\n    End Class\n\nEnd Namespace\n</code></pre><p> The example takes the <code>contosoBooks.xml</code> file as input.  </p>\n<pre><code class=\"lang-xml\" name=\"XPathXMLExamples#2\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;\n&lt;bookstore xmlns=&quot;http://www.contoso.com/books&quot;&gt;\n    &lt;book genre=&quot;autobiography&quot; publicationdate=&quot;1981-03-22&quot; ISBN=&quot;1-861003-11-0&quot;&gt;\n        &lt;title&gt;The Autobiography of Benjamin Franklin&lt;/title&gt;\n        &lt;author&gt;\n            &lt;first-name&gt;Benjamin&lt;/first-name&gt;\n            &lt;last-name&gt;Franklin&lt;/last-name&gt;\n        &lt;/author&gt;\n        &lt;price&gt;8.99&lt;/price&gt;\n    &lt;/book&gt;\n    &lt;book genre=&quot;novel&quot; publicationdate=&quot;1967-11-17&quot; ISBN=&quot;0-201-63361-2&quot;&gt;\n        &lt;title&gt;The Confidence Man&lt;/title&gt;\n        &lt;author&gt;\n            &lt;first-name&gt;Herman&lt;/first-name&gt;\n            &lt;last-name&gt;Melville&lt;/last-name&gt;\n        &lt;/author&gt;\n        &lt;price&gt;11.99&lt;/price&gt;\n    &lt;/book&gt;\n    &lt;book genre=&quot;philosophy&quot; publicationdate=&quot;1991-02-15&quot; ISBN=&quot;1-861001-57-6&quot;&gt;\n        &lt;title&gt;The Gorgias&lt;/title&gt;\n        &lt;author&gt;\n            &lt;name&gt;Plato&lt;/name&gt;\n        &lt;/author&gt;\n        &lt;price&gt;9.99&lt;/price&gt;\n    &lt;/book&gt;\n&lt;/bookstore&gt;\n</code></pre><p> The example also takes the <code>contosoBooks.xsd</code> as an input.  </p>\n<pre><code class=\"lang-xml\" name=\"XPathXMLExamples#3\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;xs:schema attributeFormDefault=&quot;unqualified&quot; elementFormDefault=&quot;qualified&quot; targetNamespace=&quot;http://www.contoso.com/books&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;\n    &lt;xs:element name=&quot;bookstore&quot;&gt;\n        &lt;xs:complexType&gt;\n            &lt;xs:sequence&gt;\n                &lt;xs:element maxOccurs=&quot;unbounded&quot; name=&quot;book&quot;&gt;\n                    &lt;xs:complexType&gt;\n                        &lt;xs:sequence&gt;\n                            &lt;xs:element name=&quot;title&quot; type=&quot;xs:string&quot; /&gt;\n                            &lt;xs:element name=&quot;author&quot;&gt;\n                                &lt;xs:complexType&gt;\n                                    &lt;xs:sequence&gt;\n                                        &lt;xs:element minOccurs=&quot;0&quot; name=&quot;name&quot; type=&quot;xs:string&quot; /&gt;\n                                        &lt;xs:element minOccurs=&quot;0&quot; name=&quot;first-name&quot; type=&quot;xs:string&quot; /&gt;\n                                        &lt;xs:element minOccurs=&quot;0&quot; name=&quot;last-name&quot; type=&quot;xs:string&quot; /&gt;\n                                    &lt;/xs:sequence&gt;\n                                &lt;/xs:complexType&gt;\n                            &lt;/xs:element&gt;\n                            &lt;xs:element name=&quot;price&quot; type=&quot;xs:decimal&quot; /&gt;\n                        &lt;/xs:sequence&gt;\n                        &lt;xs:attribute name=&quot;genre&quot; type=&quot;xs:string&quot; use=&quot;required&quot; /&gt;\n                        &lt;xs:attribute name=&quot;publicationdate&quot; type=&quot;xs:date&quot; use=&quot;required&quot; /&gt;\n                        &lt;xs:attribute name=&quot;ISBN&quot; type=&quot;xs:string&quot; use=&quot;required&quot; /&gt;\n                    &lt;/xs:complexType&gt;\n                &lt;/xs:element&gt;\n            &lt;/xs:sequence&gt;\n        &lt;/xs:complexType&gt;\n    &lt;/xs:element&gt;\n&lt;/xs:schema&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Schema_XmlSchemaInfo_SchemaType\">\r\n    \r\n            <a id=\"System_Xml_Schema_XmlSchemaInfo_SchemaType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SchemaType</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the static XML Schema Definition Language (XSD) schema type of this validated XML node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.Schema.XmlSchemaType SchemaType { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.schema.xmlschematype\" data-linktype=\"relative-path\">XmlSchemaType</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.schema.xmlschematype\" data-linktype=\"relative-path\">XmlSchemaType</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The static type of an XML node is the type that was declared in the XSD schema.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example validates the <code>contosoBooks.xml</code> file against the <code>contosoBooks.xsd</code> schema. The example uses the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> class to deserialize the <code>contosoBooks.xml</code> file and pass the value of the nodes to the methods of the <a class=\"xref\" href=\"system.xml.schema.xmlschemavalidator\" data-linktype=\"relative-path\">XmlSchemaValidator</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"XmlSchemaValidatorExamples#1\">using System;\nusing System.Xml;\nusing System.Xml.Schema;\nusing System.Xml.Serialization;\nusing System.Collections;\n\nnamespace Microsoft.Samples.Xml.Schema\n{\n    class XmlSchemaValidatorExamples\n    {\n        static void Main()\n        {\n            // The XML document to deserialize into the XmlSerializer object.\n            XmlReader reader = XmlReader.Create(&quot;contosoBooks.xml&quot;);\n\n            // The XmlSerializer object.\n            XmlSerializer serializer = new XmlSerializer(typeof(ContosoBooks));\n            ContosoBooks books = (ContosoBooks)serializer.Deserialize(reader);\n\n            // The XmlSchemaSet object containing the schema used to validate the XML document.\n            XmlSchemaSet schemaSet = new XmlSchemaSet();\n            schemaSet.Add(&quot;http://www.contoso.com/books&quot;, &quot;contosoBooks.xsd&quot;);\n\n            // The XmlNamespaceManager object used to handle namespaces.\n            XmlNamespaceManager manager = new XmlNamespaceManager(reader.NameTable);\n\n            // Assign a ValidationEventHandler to handle schema validation warnings and errors.\n            XmlSchemaValidator validator = new XmlSchemaValidator(reader.NameTable, schemaSet, manager, XmlSchemaValidationFlags.None);\n            validator.ValidationEventHandler += new ValidationEventHandler(SchemaValidationEventHandler);\n\n            // Initialize the XmlSchemaValidator object.\n            validator.Initialize();\n\n            // Validate the bookstore element, verify that all required attributes are present\n            // and prepare to validate child content.\n            validator.ValidateElement(&quot;bookstore&quot;, &quot;http://www.contoso.com/books&quot;, null);\n            validator.GetUnspecifiedDefaultAttributes(new ArrayList());\n            validator.ValidateEndOfAttributes(null);\n\n            // Get the next exptected element in the bookstore context.\n            XmlSchemaParticle[] particles = validator.GetExpectedParticles();\n            XmlSchemaElement nextElement = particles[0] as XmlSchemaElement;\n            Console.WriteLine(&quot;Expected Element: &#39;{0}&#39;&quot;, nextElement.Name);\n\n            foreach (BookType book in books.Book)\n            {\n                // Validate the book element.\n                validator.ValidateElement(&quot;book&quot;, &quot;http://www.contoso.com/books&quot;, null);\n\n                // Get the exptected attributes for the book element.\n                Console.Write(&quot;<br>Expected attributes: &quot;);\n                XmlSchemaAttribute[] attributes = validator.GetExpectedAttributes();\n                foreach (XmlSchemaAttribute attribute in attributes)\n                {\n                    Console.Write(&quot;&#39;{0}&#39; &quot;, attribute.Name);\n                }\n                Console.WriteLine();\n\n                // Validate the genre attribute and display its post schema validation information.\n                if (book.Genre != null)\n                {\n                    validator.ValidateAttribute(&quot;genre&quot;, &quot;&quot;, book.Genre, schemaInfo);\n                }\n                DisplaySchemaInfo();\n\n                // Validate the publicationdate attribute and display its post schema validation information.\n                if (book.PublicationDate != null)\n                {\n                    validator.ValidateAttribute(&quot;publicationdate&quot;, &quot;&quot;, dateTimeGetter(book.PublicationDate), schemaInfo);\n                }\n                DisplaySchemaInfo();\n\n                // Validate the ISBN attribute and display its post schema validation information.\n                if (book.Isbn != null)\n                {\n                    validator.ValidateAttribute(&quot;ISBN&quot;, &quot;&quot;, book.Isbn, schemaInfo);\n                }\n                DisplaySchemaInfo();\n\n                // After validating all the attributes for the current element with ValidateAttribute method,\n                // you must call GetUnspecifiedDefaultAttributes to validate the default attributes.\n                validator.GetUnspecifiedDefaultAttributes(new ArrayList());\n\n                // Verify that all required attributes of the book element are present\n                // and prepare to validate child content.\n                validator.ValidateEndOfAttributes(null);\n\n                // Validate the title element and its content.\n                validator.ValidateElement(&quot;title&quot;, &quot;http://www.contoso.com/books&quot;, null);\n                validator.ValidateEndElement(null, book.Title);\n\n                // Validate the author element, verify that all required attributes are present\n                // and prepare to validate child content.\n                validator.ValidateElement(&quot;author&quot;, &quot;http://www.contoso.com/books&quot;, null);\n                validator.GetUnspecifiedDefaultAttributes(new ArrayList());\n                validator.ValidateEndOfAttributes(null);\n\n                if (book.Author.Name != null)\n                {\n                    // Validate the name element and its content.\n                    validator.ValidateElement(&quot;name&quot;, &quot;http://www.contoso.com/books&quot;, null);\n                    validator.ValidateEndElement(null, book.Author.Name);\n                }\n\n                if (book.Author.FirstName != null)\n                {\n                    // Validate the first-name element and its content.\n                    validator.ValidateElement(&quot;first-name&quot;, &quot;http://www.contoso.com/books&quot;, null);\n                    validator.ValidateEndElement(null, book.Author.FirstName);\n\n                }\n\n                if (book.Author.LastName != null)\n                {\n                    // Validate the last-name element and its content.\n                    validator.ValidateElement(&quot;last-name&quot;, &quot;http://www.contoso.com/books&quot;, null);\n                    validator.ValidateEndElement(null, book.Author.LastName);\n                }\n\n                // Validate the content of the author element.\n                validator.ValidateEndElement(null);\n\n                // Validate the price element and its content.\n                validator.ValidateElement(&quot;price&quot;, &quot;http://www.contoso.com/books&quot;, null);\n                validator.ValidateEndElement(null, book.Price);\n\n                // Validate the content of the book element.\n                validator.ValidateEndElement(null);\n            }\n\n            // Validate the content of the bookstore element.\n            validator.ValidateEndElement(null);\n\n            // Close the XmlReader object.\n            reader.Close();\n        }\n\n        static XmlSchemaInfo schemaInfo = new XmlSchemaInfo();\n        static object dateTimeGetterContent;\n\n        static object dateTimeGetterHandle()\n        {\n            return dateTimeGetterContent;\n        }\n\n        static XmlValueGetter dateTimeGetter(DateTime dateTime)\n        {\n            dateTimeGetterContent = dateTime;\n            return new XmlValueGetter(dateTimeGetterHandle);\n        }\n\n        static void DisplaySchemaInfo()\n        {\n            if (schemaInfo.SchemaElement != null)\n            {\n                Console.WriteLine(&quot;Element &#39;{0}&#39; with type &#39;{1}&#39; is &#39;{2}&#39;&quot;,\n                    schemaInfo.SchemaElement.Name, schemaInfo.SchemaType, schemaInfo.Validity);\n            }\n            else if (schemaInfo.SchemaAttribute != null)\n            {\n                Console.WriteLine(&quot;Attribute &#39;{0}&#39; with type &#39;{1}&#39; is &#39;{2}&#39;&quot;,\n                    schemaInfo.SchemaAttribute.Name, schemaInfo.SchemaType, schemaInfo.Validity);\n            }\n        }\n\n        static void SchemaValidationEventHandler(object sender, ValidationEventArgs e)\n        {\n            switch (e.Severity)\n            {\n                case XmlSeverityType.Error:\n                    Console.WriteLine(&quot;<br>Error: {0}&quot;, e.Message);\n                    break;\n                case XmlSeverityType.Warning:\n                    Console.WriteLine(&quot;<br>Warning: {0}&quot;, e.Message);\n                    break;\n            }\n        }\n    }\n\n    [XmlRootAttribute(&quot;bookstore&quot;, Namespace = &quot;http://www.contoso.com/books&quot;, IsNullable = false)]\n    public class ContosoBooks\n    {\n        [XmlElementAttribute(&quot;book&quot;)]\n        public BookType[] Book;\n    }\n\n    public class BookType\n    {\n        [XmlAttributeAttribute(&quot;genre&quot;)]\n        public string Genre;\n\n        [XmlAttributeAttribute(&quot;publicationdate&quot;, DataType = &quot;date&quot;)]\n        public DateTime PublicationDate;\n\n        [XmlAttributeAttribute(&quot;ISBN&quot;)]\n        public string Isbn;\n\n        [XmlElementAttribute(&quot;title&quot;)]\n        public string Title;\n\n        [XmlElementAttribute(&quot;author&quot;)]\n        public BookAuthor Author;\n\n        [XmlElementAttribute(&quot;price&quot;)]\n        public Decimal Price;\n    }\n\n    public class BookAuthor\n    {\n        [XmlElementAttribute(&quot;name&quot;)]\n        public string Name;\n\n        [XmlElementAttribute(&quot;first-name&quot;)]\n        public string FirstName;\n\n        [XmlElementAttribute(&quot;last-name&quot;)]\n        public string LastName;\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"XmlSchemaValidatorExamples#1\">Imports System\nImports System.Xml\nImports System.Xml.Schema\nImports System.Xml.Serialization\nImports System.Collections\n\n\nNamespace Microsoft.Samples.Xml.Schema\n\n    Class XmlSchemaValidatorExamples\n\n        Shared Sub Main()\n\n            &#39; The XML document to deserialize into the XmlSerializer object.\n            Dim reader As XmlReader = XmlReader.Create(&quot;contosoBooks.xml&quot;)\n\n            &#39; The XmlSerializer object.\n            Dim serializer As XmlSerializer = New XmlSerializer(GetType(ContosoBooks))\n            Dim books As ContosoBooks = CType(serializer.Deserialize(reader), ContosoBooks)\n\n            &#39; The XmlSchemaSet object containing the schema used to validate the XML document.\n            Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()\n            schemaSet.Add(&quot;http://www.contoso.com/books&quot;, &quot;contosoBooks.xsd&quot;)\n\n            &#39; The XmlNamespaceManager object used to handle namespaces.\n            Dim manager As XmlNamespaceManager = New XmlNamespaceManager(reader.NameTable)\n\n            &#39; Assign a ValidationEventHandler to handle schema validation warnings and errors.\n            Dim validator As XmlSchemaValidator = New XmlSchemaValidator(reader.NameTable, schemaSet, manager, XmlSchemaValidationFlags.None)\n            &#39;validator.ValidationEventHandler += New ValidationEventHandler(SchemaValidationEventHandler)\n            AddHandler validator.ValidationEventHandler, AddressOf SchemaValidationEventHandler\n\n            &#39; Initialize the XmlSchemaValidator object.\n            validator.Initialize()\n\n            &#39; Validate the bookstore element, verify that all required attributes are present\n            &#39; and prepare to validate child content.\n            validator.ValidateElement(&quot;bookstore&quot;, &quot;http://www.contoso.com/books&quot;, Nothing)\n\n            validator.GetUnspecifiedDefaultAttributes(New ArrayList())\n            validator.ValidateEndOfAttributes(Nothing)\n\n            &#39; Get the next exptected element in the bookstore context.\n            Dim particles() As XmlSchemaParticle = validator.GetExpectedParticles()\n            Dim nextElement As XmlSchemaElement = particles(0)\n            Console.WriteLine(&quot;Expected Element: &#39;{0}&#39;&quot;, nextElement.Name)\n\n            For Each book As BookType In books.book\n                &#39; Validate the book element.\n                validator.ValidateElement(&quot;book&quot;, &quot;http://www.contoso.com/books&quot;, Nothing)\n\n                &#39; Get the exptected attributes for the book element.\n                Console.Write(vbCrLf &amp; &quot;Expected attributes: &quot;)\n                Dim attributes() As XmlSchemaAttribute = validator.GetExpectedAttributes()\n                For Each attribute As XmlSchemaAttribute In attributes\n                    Console.Write(&quot;&#39;{0}&#39; &quot;, attribute.Name)\n                Next\n                Console.WriteLine()\n\n                &#39; Validate the genre attribute and display its post schema validation information.\n                If Not book.Genre Is Nothing Then\n                    validator.ValidateAttribute(&quot;genre&quot;, &quot;&quot;, book.Genre, schemaInfo)\n                End If\n                DisplaySchemaInfo()\n\n                &#39; Validate the publicationdate attribute and display its post schema validation information.\n                If Not book.PublicationDate = Nothing Then\n                    validator.ValidateAttribute(&quot;publicationdate&quot;, &quot;&quot;, dateTimeGetter(book.PublicationDate), schemaInfo)\n                End If\n                DisplaySchemaInfo()\n\n                &#39; Validate the ISBN attribute and display its post schema validation information.\n                If Not book.Isbn Is Nothing Then\n                    validator.ValidateAttribute(&quot;ISBN&quot;, &quot;&quot;, book.Isbn, schemaInfo)\n                End If\n                DisplaySchemaInfo()\n    \n                &#39; After validating all the attributes for the current element with ValidateAttribute method,\n                &#39; you must call GetUnspecifiedDefaultAttributes to validate the default attributes.\n                validator.GetUnspecifiedDefaultAttributes(New ArrayList())\n\n                &#39; Verify that all required attributes of the book element are present\n                &#39; and prepare to validate child content.\n                validator.ValidateEndOfAttributes(Nothing)\n\n                &#39; Validate the title element and its content.\n                validator.ValidateElement(&quot;title&quot;, &quot;http://www.contoso.com/books&quot;, Nothing)\n                validator.ValidateEndElement(Nothing, book.Title)\n\n                &#39; Validate the author element, verify that all required attributes are present\n                &#39; and prepare to validate child content.\n                validator.ValidateElement(&quot;author&quot;, &quot;http://www.contoso.com/books&quot;, Nothing)\n\n                validator.GetUnspecifiedDefaultAttributes(New ArrayList())\n                validator.ValidateEndOfAttributes(Nothing)\n\n                If Not book.Author.Name Is Nothing Then\n                    &#39; Validate the name element and its content.\n                    validator.ValidateElement(&quot;name&quot;, &quot;http://www.contoso.com/books&quot;, Nothing)\n                    validator.ValidateEndElement(Nothing, book.Author.Name)\n                End If\n\n                If Not book.Author.FirstName Is Nothing Then\n                    &#39; Validate the first-name element and its content.\n                    validator.ValidateElement(&quot;first-name&quot;, &quot;http://www.contoso.com/books&quot;, Nothing)\n                    validator.ValidateEndElement(Nothing, book.Author.FirstName)\n\n                End If\n\n                If Not book.Author.LastName Is Nothing Then\n                    &#39; Validate the last-name element and its content.\n                    validator.ValidateElement(&quot;last-name&quot;, &quot;http://www.contoso.com/books&quot;, Nothing)\n                    validator.ValidateEndElement(Nothing, book.Author.LastName)\n                End If\n\n                &#39; Validate the content of the author element.\n                validator.ValidateEndElement(Nothing)\n\n                &#39; Validate the price element and its content.\n                validator.ValidateElement(&quot;price&quot;, &quot;http://www.contoso.com/books&quot;, Nothing)\n                validator.ValidateEndElement(Nothing, book.Price)\n\n                &#39; Validate the content of the book element.\n                validator.ValidateEndElement(Nothing)\n            Next\n\n            &#39; Validate the content of the bookstore element.\n            validator.ValidateEndElement(Nothing)\n\n            &#39; Close the XmlReader object.\n            reader.Close()\n\n        End Sub\n\n        Shared schemaInfo As XmlSchemaInfo = New XmlSchemaInfo()\n        Shared dateTimeGetterContent As Object\n\n        Shared Function dateTimeGetterHandle() As Object\n\n            Return dateTimeGetterContent\n\n        End Function\n\n        Shared Function dateTimeGetter(ByVal dateTime As DateTime) As XmlValueGetter\n\n            dateTimeGetterContent = dateTime\n            Return New XmlValueGetter(AddressOf dateTimeGetterHandle)\n\n        End Function\n\n        Shared Sub DisplaySchemaInfo()\n\n            If Not schemaInfo.SchemaElement Is Nothing Then\n                Console.WriteLine(&quot;Element &#39;{0}&#39; with type &#39;{1}&#39; is &#39;{2}&#39;&quot;, schemaInfo.SchemaElement.Name, schemaInfo.SchemaType, schemaInfo.Validity)\n            ElseIf Not schemaInfo.SchemaAttribute Is Nothing Then\n                Console.WriteLine(&quot;Attribute &#39;{0}&#39; with type &#39;{1}&#39; is &#39;{2}&#39;&quot;, schemaInfo.SchemaAttribute.Name, schemaInfo.SchemaType, schemaInfo.Validity)\n            End If\n\n        End Sub\n\n        Shared Sub SchemaValidationEventHandler(ByVal sender As Object, ByVal e As ValidationEventArgs)\n\n            Select Case e.Severity\n                Case XmlSeverityType.Error\n                    Console.WriteLine(vbCrLf &amp; &quot;Error: {0}&quot;, e.Message)\n                    Exit Sub\n                Case XmlSeverityType.Warning\n                    Console.WriteLine(vbCrLf &amp; &quot;Warning: {0}&quot;, e.Message)\n                    Exit Sub\n            End Select\n\n        End Sub\n\n    End Class\n\n    &lt;XmlRootAttribute(&quot;bookstore&quot;, Namespace:=&quot;http://www.contoso.com/books&quot;, IsNullable:=False)&gt; _\n    Public Class ContosoBooks\n\n        &lt;XmlElementAttribute(&quot;book&quot;)&gt; _\n        Public book() As BookType\n\n    End Class\n\n    Public Class BookType\n\n        &lt;XmlAttributeAttribute(&quot;genre&quot;)&gt; _\n        Public Genre As String\n\n        &lt;XmlAttributeAttribute(&quot;publicationdate&quot;, DataType:=&quot;date&quot;)&gt; _\n        Public PublicationDate As DateTime\n\n        &lt;XmlAttributeAttribute(&quot;ISBN&quot;)&gt; _\n        Public Isbn As String\n\n        &lt;XmlElementAttribute(&quot;title&quot;)&gt; _\n        Public Title As String\n\n        &lt;XmlElementAttribute(&quot;author&quot;)&gt; _\n        Public Author As BookAuthor\n\n        &lt;XmlElementAttribute(&quot;price&quot;)&gt; _\n        Public Price As Decimal\n\n    End Class\n\n    Public Class BookAuthor\n\n        &lt;XmlElementAttribute(&quot;name&quot;)&gt; _\n        Public Name As String\n\n        &lt;XmlElementAttribute(&quot;first-name&quot;)&gt; _\n        Public FirstName As String\n\n        &lt;XmlElementAttribute(&quot;last-name&quot;)&gt; _\n        Public LastName As String\n\n    End Class\n\nEnd Namespace\n</code></pre><p> The example takes the <code>contosoBooks.xml</code> file as input.  </p>\n<pre><code class=\"lang-xml\" name=\"XPathXMLExamples#2\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;\n&lt;bookstore xmlns=&quot;http://www.contoso.com/books&quot;&gt;\n    &lt;book genre=&quot;autobiography&quot; publicationdate=&quot;1981-03-22&quot; ISBN=&quot;1-861003-11-0&quot;&gt;\n        &lt;title&gt;The Autobiography of Benjamin Franklin&lt;/title&gt;\n        &lt;author&gt;\n            &lt;first-name&gt;Benjamin&lt;/first-name&gt;\n            &lt;last-name&gt;Franklin&lt;/last-name&gt;\n        &lt;/author&gt;\n        &lt;price&gt;8.99&lt;/price&gt;\n    &lt;/book&gt;\n    &lt;book genre=&quot;novel&quot; publicationdate=&quot;1967-11-17&quot; ISBN=&quot;0-201-63361-2&quot;&gt;\n        &lt;title&gt;The Confidence Man&lt;/title&gt;\n        &lt;author&gt;\n            &lt;first-name&gt;Herman&lt;/first-name&gt;\n            &lt;last-name&gt;Melville&lt;/last-name&gt;\n        &lt;/author&gt;\n        &lt;price&gt;11.99&lt;/price&gt;\n    &lt;/book&gt;\n    &lt;book genre=&quot;philosophy&quot; publicationdate=&quot;1991-02-15&quot; ISBN=&quot;1-861001-57-6&quot;&gt;\n        &lt;title&gt;The Gorgias&lt;/title&gt;\n        &lt;author&gt;\n            &lt;name&gt;Plato&lt;/name&gt;\n        &lt;/author&gt;\n        &lt;price&gt;9.99&lt;/price&gt;\n    &lt;/book&gt;\n&lt;/bookstore&gt;\n</code></pre><p> The example also takes the <code>contosoBooks.xsd</code> as an input.  </p>\n<pre><code class=\"lang-xml\" name=\"XPathXMLExamples#3\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;xs:schema attributeFormDefault=&quot;unqualified&quot; elementFormDefault=&quot;qualified&quot; targetNamespace=&quot;http://www.contoso.com/books&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;\n    &lt;xs:element name=&quot;bookstore&quot;&gt;\n        &lt;xs:complexType&gt;\n            &lt;xs:sequence&gt;\n                &lt;xs:element maxOccurs=&quot;unbounded&quot; name=&quot;book&quot;&gt;\n                    &lt;xs:complexType&gt;\n                        &lt;xs:sequence&gt;\n                            &lt;xs:element name=&quot;title&quot; type=&quot;xs:string&quot; /&gt;\n                            &lt;xs:element name=&quot;author&quot;&gt;\n                                &lt;xs:complexType&gt;\n                                    &lt;xs:sequence&gt;\n                                        &lt;xs:element minOccurs=&quot;0&quot; name=&quot;name&quot; type=&quot;xs:string&quot; /&gt;\n                                        &lt;xs:element minOccurs=&quot;0&quot; name=&quot;first-name&quot; type=&quot;xs:string&quot; /&gt;\n                                        &lt;xs:element minOccurs=&quot;0&quot; name=&quot;last-name&quot; type=&quot;xs:string&quot; /&gt;\n                                    &lt;/xs:sequence&gt;\n                                &lt;/xs:complexType&gt;\n                            &lt;/xs:element&gt;\n                            &lt;xs:element name=&quot;price&quot; type=&quot;xs:decimal&quot; /&gt;\n                        &lt;/xs:sequence&gt;\n                        &lt;xs:attribute name=&quot;genre&quot; type=&quot;xs:string&quot; use=&quot;required&quot; /&gt;\n                        &lt;xs:attribute name=&quot;publicationdate&quot; type=&quot;xs:date&quot; use=&quot;required&quot; /&gt;\n                        &lt;xs:attribute name=&quot;ISBN&quot; type=&quot;xs:string&quot; use=&quot;required&quot; /&gt;\n                    &lt;/xs:complexType&gt;\n                &lt;/xs:element&gt;\n            &lt;/xs:sequence&gt;\n        &lt;/xs:complexType&gt;\n    &lt;/xs:element&gt;\n&lt;/xs:schema&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Schema_XmlSchemaInfo_Validity\">\r\n    \r\n            <a id=\"System_Xml_Schema_XmlSchemaInfo_Validity_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Validity</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.xml.schema.xmlschemavalidity\" data-linktype=\"relative-path\">XmlSchemaValidity</a> value of this validated XML node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.Schema.XmlSchemaValidity Validity { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.schema.xmlschemavalidity\" data-linktype=\"relative-path\">XmlSchemaValidity</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.schema.xmlschemavalidity\" data-linktype=\"relative-path\">XmlSchemaValidity</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The possible <a class=\"xref\" href=\"system.xml.schema.xmlschemavalidity\" data-linktype=\"relative-path\">XmlSchemaValidity</a> values for this XML node are <a class=\"xref\" href=\"system.xml.schema.xmlschemavalidity\" data-linktype=\"relative-path\">XmlSchemaValidity</a>, <a class=\"xref\" href=\"system.xml.schema.xmlschemavalidity\" data-linktype=\"relative-path\">XmlSchemaValidity</a>, and <a class=\"xref\" href=\"system.xml.schema.xmlschemavalidity\" data-linktype=\"relative-path\">XmlSchemaValidity</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example validates the <code>contosoBooks.xml</code> file against the <code>contosoBooks.xsd</code> schema. The example uses the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> class to deserialize the <code>contosoBooks.xml</code> file and pass the value of the nodes to the methods of the <a class=\"xref\" href=\"system.xml.schema.xmlschemavalidator\" data-linktype=\"relative-path\">XmlSchemaValidator</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"XmlSchemaValidatorExamples#1\">using System;\nusing System.Xml;\nusing System.Xml.Schema;\nusing System.Xml.Serialization;\nusing System.Collections;\n\nnamespace Microsoft.Samples.Xml.Schema\n{\n    class XmlSchemaValidatorExamples\n    {\n        static void Main()\n        {\n            // The XML document to deserialize into the XmlSerializer object.\n            XmlReader reader = XmlReader.Create(&quot;contosoBooks.xml&quot;);\n\n            // The XmlSerializer object.\n            XmlSerializer serializer = new XmlSerializer(typeof(ContosoBooks));\n            ContosoBooks books = (ContosoBooks)serializer.Deserialize(reader);\n\n            // The XmlSchemaSet object containing the schema used to validate the XML document.\n            XmlSchemaSet schemaSet = new XmlSchemaSet();\n            schemaSet.Add(&quot;http://www.contoso.com/books&quot;, &quot;contosoBooks.xsd&quot;);\n\n            // The XmlNamespaceManager object used to handle namespaces.\n            XmlNamespaceManager manager = new XmlNamespaceManager(reader.NameTable);\n\n            // Assign a ValidationEventHandler to handle schema validation warnings and errors.\n            XmlSchemaValidator validator = new XmlSchemaValidator(reader.NameTable, schemaSet, manager, XmlSchemaValidationFlags.None);\n            validator.ValidationEventHandler += new ValidationEventHandler(SchemaValidationEventHandler);\n\n            // Initialize the XmlSchemaValidator object.\n            validator.Initialize();\n\n            // Validate the bookstore element, verify that all required attributes are present\n            // and prepare to validate child content.\n            validator.ValidateElement(&quot;bookstore&quot;, &quot;http://www.contoso.com/books&quot;, null);\n            validator.GetUnspecifiedDefaultAttributes(new ArrayList());\n            validator.ValidateEndOfAttributes(null);\n\n            // Get the next exptected element in the bookstore context.\n            XmlSchemaParticle[] particles = validator.GetExpectedParticles();\n            XmlSchemaElement nextElement = particles[0] as XmlSchemaElement;\n            Console.WriteLine(&quot;Expected Element: &#39;{0}&#39;&quot;, nextElement.Name);\n\n            foreach (BookType book in books.Book)\n            {\n                // Validate the book element.\n                validator.ValidateElement(&quot;book&quot;, &quot;http://www.contoso.com/books&quot;, null);\n\n                // Get the exptected attributes for the book element.\n                Console.Write(&quot;<br>Expected attributes: &quot;);\n                XmlSchemaAttribute[] attributes = validator.GetExpectedAttributes();\n                foreach (XmlSchemaAttribute attribute in attributes)\n                {\n                    Console.Write(&quot;&#39;{0}&#39; &quot;, attribute.Name);\n                }\n                Console.WriteLine();\n\n                // Validate the genre attribute and display its post schema validation information.\n                if (book.Genre != null)\n                {\n                    validator.ValidateAttribute(&quot;genre&quot;, &quot;&quot;, book.Genre, schemaInfo);\n                }\n                DisplaySchemaInfo();\n\n                // Validate the publicationdate attribute and display its post schema validation information.\n                if (book.PublicationDate != null)\n                {\n                    validator.ValidateAttribute(&quot;publicationdate&quot;, &quot;&quot;, dateTimeGetter(book.PublicationDate), schemaInfo);\n                }\n                DisplaySchemaInfo();\n\n                // Validate the ISBN attribute and display its post schema validation information.\n                if (book.Isbn != null)\n                {\n                    validator.ValidateAttribute(&quot;ISBN&quot;, &quot;&quot;, book.Isbn, schemaInfo);\n                }\n                DisplaySchemaInfo();\n\n                // After validating all the attributes for the current element with ValidateAttribute method,\n                // you must call GetUnspecifiedDefaultAttributes to validate the default attributes.\n                validator.GetUnspecifiedDefaultAttributes(new ArrayList());\n\n                // Verify that all required attributes of the book element are present\n                // and prepare to validate child content.\n                validator.ValidateEndOfAttributes(null);\n\n                // Validate the title element and its content.\n                validator.ValidateElement(&quot;title&quot;, &quot;http://www.contoso.com/books&quot;, null);\n                validator.ValidateEndElement(null, book.Title);\n\n                // Validate the author element, verify that all required attributes are present\n                // and prepare to validate child content.\n                validator.ValidateElement(&quot;author&quot;, &quot;http://www.contoso.com/books&quot;, null);\n                validator.GetUnspecifiedDefaultAttributes(new ArrayList());\n                validator.ValidateEndOfAttributes(null);\n\n                if (book.Author.Name != null)\n                {\n                    // Validate the name element and its content.\n                    validator.ValidateElement(&quot;name&quot;, &quot;http://www.contoso.com/books&quot;, null);\n                    validator.ValidateEndElement(null, book.Author.Name);\n                }\n\n                if (book.Author.FirstName != null)\n                {\n                    // Validate the first-name element and its content.\n                    validator.ValidateElement(&quot;first-name&quot;, &quot;http://www.contoso.com/books&quot;, null);\n                    validator.ValidateEndElement(null, book.Author.FirstName);\n\n                }\n\n                if (book.Author.LastName != null)\n                {\n                    // Validate the last-name element and its content.\n                    validator.ValidateElement(&quot;last-name&quot;, &quot;http://www.contoso.com/books&quot;, null);\n                    validator.ValidateEndElement(null, book.Author.LastName);\n                }\n\n                // Validate the content of the author element.\n                validator.ValidateEndElement(null);\n\n                // Validate the price element and its content.\n                validator.ValidateElement(&quot;price&quot;, &quot;http://www.contoso.com/books&quot;, null);\n                validator.ValidateEndElement(null, book.Price);\n\n                // Validate the content of the book element.\n                validator.ValidateEndElement(null);\n            }\n\n            // Validate the content of the bookstore element.\n            validator.ValidateEndElement(null);\n\n            // Close the XmlReader object.\n            reader.Close();\n        }\n\n        static XmlSchemaInfo schemaInfo = new XmlSchemaInfo();\n        static object dateTimeGetterContent;\n\n        static object dateTimeGetterHandle()\n        {\n            return dateTimeGetterContent;\n        }\n\n        static XmlValueGetter dateTimeGetter(DateTime dateTime)\n        {\n            dateTimeGetterContent = dateTime;\n            return new XmlValueGetter(dateTimeGetterHandle);\n        }\n\n        static void DisplaySchemaInfo()\n        {\n            if (schemaInfo.SchemaElement != null)\n            {\n                Console.WriteLine(&quot;Element &#39;{0}&#39; with type &#39;{1}&#39; is &#39;{2}&#39;&quot;,\n                    schemaInfo.SchemaElement.Name, schemaInfo.SchemaType, schemaInfo.Validity);\n            }\n            else if (schemaInfo.SchemaAttribute != null)\n            {\n                Console.WriteLine(&quot;Attribute &#39;{0}&#39; with type &#39;{1}&#39; is &#39;{2}&#39;&quot;,\n                    schemaInfo.SchemaAttribute.Name, schemaInfo.SchemaType, schemaInfo.Validity);\n            }\n        }\n\n        static void SchemaValidationEventHandler(object sender, ValidationEventArgs e)\n        {\n            switch (e.Severity)\n            {\n                case XmlSeverityType.Error:\n                    Console.WriteLine(&quot;<br>Error: {0}&quot;, e.Message);\n                    break;\n                case XmlSeverityType.Warning:\n                    Console.WriteLine(&quot;<br>Warning: {0}&quot;, e.Message);\n                    break;\n            }\n        }\n    }\n\n    [XmlRootAttribute(&quot;bookstore&quot;, Namespace = &quot;http://www.contoso.com/books&quot;, IsNullable = false)]\n    public class ContosoBooks\n    {\n        [XmlElementAttribute(&quot;book&quot;)]\n        public BookType[] Book;\n    }\n\n    public class BookType\n    {\n        [XmlAttributeAttribute(&quot;genre&quot;)]\n        public string Genre;\n\n        [XmlAttributeAttribute(&quot;publicationdate&quot;, DataType = &quot;date&quot;)]\n        public DateTime PublicationDate;\n\n        [XmlAttributeAttribute(&quot;ISBN&quot;)]\n        public string Isbn;\n\n        [XmlElementAttribute(&quot;title&quot;)]\n        public string Title;\n\n        [XmlElementAttribute(&quot;author&quot;)]\n        public BookAuthor Author;\n\n        [XmlElementAttribute(&quot;price&quot;)]\n        public Decimal Price;\n    }\n\n    public class BookAuthor\n    {\n        [XmlElementAttribute(&quot;name&quot;)]\n        public string Name;\n\n        [XmlElementAttribute(&quot;first-name&quot;)]\n        public string FirstName;\n\n        [XmlElementAttribute(&quot;last-name&quot;)]\n        public string LastName;\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"XmlSchemaValidatorExamples#1\">Imports System\nImports System.Xml\nImports System.Xml.Schema\nImports System.Xml.Serialization\nImports System.Collections\n\n\nNamespace Microsoft.Samples.Xml.Schema\n\n    Class XmlSchemaValidatorExamples\n\n        Shared Sub Main()\n\n            &#39; The XML document to deserialize into the XmlSerializer object.\n            Dim reader As XmlReader = XmlReader.Create(&quot;contosoBooks.xml&quot;)\n\n            &#39; The XmlSerializer object.\n            Dim serializer As XmlSerializer = New XmlSerializer(GetType(ContosoBooks))\n            Dim books As ContosoBooks = CType(serializer.Deserialize(reader), ContosoBooks)\n\n            &#39; The XmlSchemaSet object containing the schema used to validate the XML document.\n            Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()\n            schemaSet.Add(&quot;http://www.contoso.com/books&quot;, &quot;contosoBooks.xsd&quot;)\n\n            &#39; The XmlNamespaceManager object used to handle namespaces.\n            Dim manager As XmlNamespaceManager = New XmlNamespaceManager(reader.NameTable)\n\n            &#39; Assign a ValidationEventHandler to handle schema validation warnings and errors.\n            Dim validator As XmlSchemaValidator = New XmlSchemaValidator(reader.NameTable, schemaSet, manager, XmlSchemaValidationFlags.None)\n            &#39;validator.ValidationEventHandler += New ValidationEventHandler(SchemaValidationEventHandler)\n            AddHandler validator.ValidationEventHandler, AddressOf SchemaValidationEventHandler\n\n            &#39; Initialize the XmlSchemaValidator object.\n            validator.Initialize()\n\n            &#39; Validate the bookstore element, verify that all required attributes are present\n            &#39; and prepare to validate child content.\n            validator.ValidateElement(&quot;bookstore&quot;, &quot;http://www.contoso.com/books&quot;, Nothing)\n\n            validator.GetUnspecifiedDefaultAttributes(New ArrayList())\n            validator.ValidateEndOfAttributes(Nothing)\n\n            &#39; Get the next exptected element in the bookstore context.\n            Dim particles() As XmlSchemaParticle = validator.GetExpectedParticles()\n            Dim nextElement As XmlSchemaElement = particles(0)\n            Console.WriteLine(&quot;Expected Element: &#39;{0}&#39;&quot;, nextElement.Name)\n\n            For Each book As BookType In books.book\n                &#39; Validate the book element.\n                validator.ValidateElement(&quot;book&quot;, &quot;http://www.contoso.com/books&quot;, Nothing)\n\n                &#39; Get the exptected attributes for the book element.\n                Console.Write(vbCrLf &amp; &quot;Expected attributes: &quot;)\n                Dim attributes() As XmlSchemaAttribute = validator.GetExpectedAttributes()\n                For Each attribute As XmlSchemaAttribute In attributes\n                    Console.Write(&quot;&#39;{0}&#39; &quot;, attribute.Name)\n                Next\n                Console.WriteLine()\n\n                &#39; Validate the genre attribute and display its post schema validation information.\n                If Not book.Genre Is Nothing Then\n                    validator.ValidateAttribute(&quot;genre&quot;, &quot;&quot;, book.Genre, schemaInfo)\n                End If\n                DisplaySchemaInfo()\n\n                &#39; Validate the publicationdate attribute and display its post schema validation information.\n                If Not book.PublicationDate = Nothing Then\n                    validator.ValidateAttribute(&quot;publicationdate&quot;, &quot;&quot;, dateTimeGetter(book.PublicationDate), schemaInfo)\n                End If\n                DisplaySchemaInfo()\n\n                &#39; Validate the ISBN attribute and display its post schema validation information.\n                If Not book.Isbn Is Nothing Then\n                    validator.ValidateAttribute(&quot;ISBN&quot;, &quot;&quot;, book.Isbn, schemaInfo)\n                End If\n                DisplaySchemaInfo()\n    \n                &#39; After validating all the attributes for the current element with ValidateAttribute method,\n                &#39; you must call GetUnspecifiedDefaultAttributes to validate the default attributes.\n                validator.GetUnspecifiedDefaultAttributes(New ArrayList())\n\n                &#39; Verify that all required attributes of the book element are present\n                &#39; and prepare to validate child content.\n                validator.ValidateEndOfAttributes(Nothing)\n\n                &#39; Validate the title element and its content.\n                validator.ValidateElement(&quot;title&quot;, &quot;http://www.contoso.com/books&quot;, Nothing)\n                validator.ValidateEndElement(Nothing, book.Title)\n\n                &#39; Validate the author element, verify that all required attributes are present\n                &#39; and prepare to validate child content.\n                validator.ValidateElement(&quot;author&quot;, &quot;http://www.contoso.com/books&quot;, Nothing)\n\n                validator.GetUnspecifiedDefaultAttributes(New ArrayList())\n                validator.ValidateEndOfAttributes(Nothing)\n\n                If Not book.Author.Name Is Nothing Then\n                    &#39; Validate the name element and its content.\n                    validator.ValidateElement(&quot;name&quot;, &quot;http://www.contoso.com/books&quot;, Nothing)\n                    validator.ValidateEndElement(Nothing, book.Author.Name)\n                End If\n\n                If Not book.Author.FirstName Is Nothing Then\n                    &#39; Validate the first-name element and its content.\n                    validator.ValidateElement(&quot;first-name&quot;, &quot;http://www.contoso.com/books&quot;, Nothing)\n                    validator.ValidateEndElement(Nothing, book.Author.FirstName)\n\n                End If\n\n                If Not book.Author.LastName Is Nothing Then\n                    &#39; Validate the last-name element and its content.\n                    validator.ValidateElement(&quot;last-name&quot;, &quot;http://www.contoso.com/books&quot;, Nothing)\n                    validator.ValidateEndElement(Nothing, book.Author.LastName)\n                End If\n\n                &#39; Validate the content of the author element.\n                validator.ValidateEndElement(Nothing)\n\n                &#39; Validate the price element and its content.\n                validator.ValidateElement(&quot;price&quot;, &quot;http://www.contoso.com/books&quot;, Nothing)\n                validator.ValidateEndElement(Nothing, book.Price)\n\n                &#39; Validate the content of the book element.\n                validator.ValidateEndElement(Nothing)\n            Next\n\n            &#39; Validate the content of the bookstore element.\n            validator.ValidateEndElement(Nothing)\n\n            &#39; Close the XmlReader object.\n            reader.Close()\n\n        End Sub\n\n        Shared schemaInfo As XmlSchemaInfo = New XmlSchemaInfo()\n        Shared dateTimeGetterContent As Object\n\n        Shared Function dateTimeGetterHandle() As Object\n\n            Return dateTimeGetterContent\n\n        End Function\n\n        Shared Function dateTimeGetter(ByVal dateTime As DateTime) As XmlValueGetter\n\n            dateTimeGetterContent = dateTime\n            Return New XmlValueGetter(AddressOf dateTimeGetterHandle)\n\n        End Function\n\n        Shared Sub DisplaySchemaInfo()\n\n            If Not schemaInfo.SchemaElement Is Nothing Then\n                Console.WriteLine(&quot;Element &#39;{0}&#39; with type &#39;{1}&#39; is &#39;{2}&#39;&quot;, schemaInfo.SchemaElement.Name, schemaInfo.SchemaType, schemaInfo.Validity)\n            ElseIf Not schemaInfo.SchemaAttribute Is Nothing Then\n                Console.WriteLine(&quot;Attribute &#39;{0}&#39; with type &#39;{1}&#39; is &#39;{2}&#39;&quot;, schemaInfo.SchemaAttribute.Name, schemaInfo.SchemaType, schemaInfo.Validity)\n            End If\n\n        End Sub\n\n        Shared Sub SchemaValidationEventHandler(ByVal sender As Object, ByVal e As ValidationEventArgs)\n\n            Select Case e.Severity\n                Case XmlSeverityType.Error\n                    Console.WriteLine(vbCrLf &amp; &quot;Error: {0}&quot;, e.Message)\n                    Exit Sub\n                Case XmlSeverityType.Warning\n                    Console.WriteLine(vbCrLf &amp; &quot;Warning: {0}&quot;, e.Message)\n                    Exit Sub\n            End Select\n\n        End Sub\n\n    End Class\n\n    &lt;XmlRootAttribute(&quot;bookstore&quot;, Namespace:=&quot;http://www.contoso.com/books&quot;, IsNullable:=False)&gt; _\n    Public Class ContosoBooks\n\n        &lt;XmlElementAttribute(&quot;book&quot;)&gt; _\n        Public book() As BookType\n\n    End Class\n\n    Public Class BookType\n\n        &lt;XmlAttributeAttribute(&quot;genre&quot;)&gt; _\n        Public Genre As String\n\n        &lt;XmlAttributeAttribute(&quot;publicationdate&quot;, DataType:=&quot;date&quot;)&gt; _\n        Public PublicationDate As DateTime\n\n        &lt;XmlAttributeAttribute(&quot;ISBN&quot;)&gt; _\n        Public Isbn As String\n\n        &lt;XmlElementAttribute(&quot;title&quot;)&gt; _\n        Public Title As String\n\n        &lt;XmlElementAttribute(&quot;author&quot;)&gt; _\n        Public Author As BookAuthor\n\n        &lt;XmlElementAttribute(&quot;price&quot;)&gt; _\n        Public Price As Decimal\n\n    End Class\n\n    Public Class BookAuthor\n\n        &lt;XmlElementAttribute(&quot;name&quot;)&gt; _\n        Public Name As String\n\n        &lt;XmlElementAttribute(&quot;first-name&quot;)&gt; _\n        Public FirstName As String\n\n        &lt;XmlElementAttribute(&quot;last-name&quot;)&gt; _\n        Public LastName As String\n\n    End Class\n\nEnd Namespace\n</code></pre><p> The example takes the <code>contosoBooks.xml</code> file as input.  </p>\n<pre><code class=\"lang-xml\" name=\"XPathXMLExamples#2\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;\n&lt;bookstore xmlns=&quot;http://www.contoso.com/books&quot;&gt;\n    &lt;book genre=&quot;autobiography&quot; publicationdate=&quot;1981-03-22&quot; ISBN=&quot;1-861003-11-0&quot;&gt;\n        &lt;title&gt;The Autobiography of Benjamin Franklin&lt;/title&gt;\n        &lt;author&gt;\n            &lt;first-name&gt;Benjamin&lt;/first-name&gt;\n            &lt;last-name&gt;Franklin&lt;/last-name&gt;\n        &lt;/author&gt;\n        &lt;price&gt;8.99&lt;/price&gt;\n    &lt;/book&gt;\n    &lt;book genre=&quot;novel&quot; publicationdate=&quot;1967-11-17&quot; ISBN=&quot;0-201-63361-2&quot;&gt;\n        &lt;title&gt;The Confidence Man&lt;/title&gt;\n        &lt;author&gt;\n            &lt;first-name&gt;Herman&lt;/first-name&gt;\n            &lt;last-name&gt;Melville&lt;/last-name&gt;\n        &lt;/author&gt;\n        &lt;price&gt;11.99&lt;/price&gt;\n    &lt;/book&gt;\n    &lt;book genre=&quot;philosophy&quot; publicationdate=&quot;1991-02-15&quot; ISBN=&quot;1-861001-57-6&quot;&gt;\n        &lt;title&gt;The Gorgias&lt;/title&gt;\n        &lt;author&gt;\n            &lt;name&gt;Plato&lt;/name&gt;\n        &lt;/author&gt;\n        &lt;price&gt;9.99&lt;/price&gt;\n    &lt;/book&gt;\n&lt;/bookstore&gt;\n</code></pre><p> The example also takes the <code>contosoBooks.xsd</code> as an input.  </p>\n<pre><code class=\"lang-xml\" name=\"XPathXMLExamples#3\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;xs:schema attributeFormDefault=&quot;unqualified&quot; elementFormDefault=&quot;qualified&quot; targetNamespace=&quot;http://www.contoso.com/books&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;\n    &lt;xs:element name=&quot;bookstore&quot;&gt;\n        &lt;xs:complexType&gt;\n            &lt;xs:sequence&gt;\n                &lt;xs:element maxOccurs=&quot;unbounded&quot; name=&quot;book&quot;&gt;\n                    &lt;xs:complexType&gt;\n                        &lt;xs:sequence&gt;\n                            &lt;xs:element name=&quot;title&quot; type=&quot;xs:string&quot; /&gt;\n                            &lt;xs:element name=&quot;author&quot;&gt;\n                                &lt;xs:complexType&gt;\n                                    &lt;xs:sequence&gt;\n                                        &lt;xs:element minOccurs=&quot;0&quot; name=&quot;name&quot; type=&quot;xs:string&quot; /&gt;\n                                        &lt;xs:element minOccurs=&quot;0&quot; name=&quot;first-name&quot; type=&quot;xs:string&quot; /&gt;\n                                        &lt;xs:element minOccurs=&quot;0&quot; name=&quot;last-name&quot; type=&quot;xs:string&quot; /&gt;\n                                    &lt;/xs:sequence&gt;\n                                &lt;/xs:complexType&gt;\n                            &lt;/xs:element&gt;\n                            &lt;xs:element name=&quot;price&quot; type=&quot;xs:decimal&quot; /&gt;\n                        &lt;/xs:sequence&gt;\n                        &lt;xs:attribute name=&quot;genre&quot; type=&quot;xs:string&quot; use=&quot;required&quot; /&gt;\n                        &lt;xs:attribute name=&quot;publicationdate&quot; type=&quot;xs:date&quot; use=&quot;required&quot; /&gt;\n                        &lt;xs:attribute name=&quot;ISBN&quot; type=&quot;xs:string&quot; use=&quot;required&quot; /&gt;\n                    &lt;/xs:complexType&gt;\n                &lt;/xs:element&gt;\n            &lt;/xs:sequence&gt;\n        &lt;/xs:complexType&gt;\n    &lt;/xs:element&gt;\n&lt;/xs:schema&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Xml.Schema.XmlSchemaInfo.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Xml.Schema.XmlSchemaInfo.yml\">\r\n<meta name=\"APIName\" content=\"System.Xml.Schema.XmlSchemaInfo\">\r\n<meta name=\"APIName\" content=\"System.Xml.Schema.XmlSchemaInfo..ctor\">\r\n<meta name=\"APIName\" content=\"System.Xml.Schema.XmlSchemaInfo.ContentType\">\r\n<meta name=\"APIName\" content=\"System.Xml.Schema.XmlSchemaInfo.IsDefault\">\r\n<meta name=\"APIName\" content=\"System.Xml.Schema.XmlSchemaInfo.IsNil\">\r\n<meta name=\"APIName\" content=\"System.Xml.Schema.XmlSchemaInfo.MemberType\">\r\n<meta name=\"APIName\" content=\"System.Xml.Schema.XmlSchemaInfo.SchemaAttribute\">\r\n<meta name=\"APIName\" content=\"System.Xml.Schema.XmlSchemaInfo.SchemaElement\">\r\n<meta name=\"APIName\" content=\"System.Xml.Schema.XmlSchemaInfo.SchemaType\">\r\n<meta name=\"APIName\" content=\"System.Xml.Schema.XmlSchemaInfo.Validity\">\r\n<meta name=\"APILocation\" content=\"System.Xml.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"76f593cf-bc21-339a-f0f3-e0a2be8ef94a\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the post-schema-validation infoset of a validated XML node.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Xml.Schema/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Xml.Schema.XmlSchemaInfo\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Xml.Schema.XmlSchemaInfo.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Xml.Schema.XmlSchemaInfo.yml","open_to_public_contributors":true,"api_name":["System.Xml.Schema.XmlSchemaInfo","System.Xml.Schema.XmlSchemaInfo..ctor","System.Xml.Schema.XmlSchemaInfo.ContentType","System.Xml.Schema.XmlSchemaInfo.IsDefault","System.Xml.Schema.XmlSchemaInfo.IsNil","System.Xml.Schema.XmlSchemaInfo.MemberType","System.Xml.Schema.XmlSchemaInfo.SchemaAttribute","System.Xml.Schema.XmlSchemaInfo.SchemaElement","System.Xml.Schema.XmlSchemaInfo.SchemaType","System.Xml.Schema.XmlSchemaInfo.Validity"],"api_location":["System.Xml.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Xml.Schema.XmlSchemaInfo","System::Xml::Schema::XmlSchemaInfo","System.Xml.Schema.XmlSchemaInfo.#ctor","System::Xml::Schema::XmlSchemaInfo::#ctor","System.Xml.Schema.XmlSchemaInfo.ContentType","System::Xml::Schema::XmlSchemaInfo::ContentType","System.Xml.Schema.XmlSchemaInfo.IsDefault","System::Xml::Schema::XmlSchemaInfo::IsDefault","System.Xml.Schema.XmlSchemaInfo.IsNil","System::Xml::Schema::XmlSchemaInfo::IsNil","System.Xml.Schema.XmlSchemaInfo.MemberType","System::Xml::Schema::XmlSchemaInfo::MemberType","System.Xml.Schema.XmlSchemaInfo.SchemaAttribute","System::Xml::Schema::XmlSchemaInfo::SchemaAttribute","System.Xml.Schema.XmlSchemaInfo.SchemaElement","System::Xml::Schema::XmlSchemaInfo::SchemaElement","System.Xml.Schema.XmlSchemaInfo.SchemaType","System::Xml::Schema::XmlSchemaInfo::SchemaType","System.Xml.Schema.XmlSchemaInfo.Validity","System::Xml::Schema::XmlSchemaInfo::Validity"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"76f593cf-bc21-339a-f0f3-e0a2be8ef94a","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Xml.Schema/XmlSchemaInfo.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"XmlSchemaInfo class | Microsoft Docs","_op_ogTitle":"XmlSchemaInfo class","description":"Represents the post-schema-validation infoset of a validated XML node.\n","toc_asset_id":"_splitted/System.Xml.Schema/toc.json","toc_rel":"_splitted/System.Xml.Schema/toc.json","source_url":"","ms.assetid":"System.Xml.Schema.XmlSchemaInfo","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.xml.schema.xmlschemainfo","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.xml.schema.xmlschemainfo","fileRelativePath":"System.Xml.Schema.XmlSchemaInfo.html"},"themesRelativePathToOutputRoot":"_themes/"}