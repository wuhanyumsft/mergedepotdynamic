{"content":"    \r\n    <h1 id=\"System_Web_UI_PageAsyncTask\">\r\n      <span class=\"lang-csharp\">PageAsyncTask</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Contains information about an asynchronous task registered to a page. This class cannot be inherited.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public sealed class PageAsyncTask</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">PageAsyncTask</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>ASP.NET version 2.0 allows you to register multiple tasks to a page and run them asynchronously prior to rendering the page. You might specify that a task be run asynchronously if it is a slow process and you do not want other processes to be tied up while it is executing. The asynchronous tasks can be executed in parallel or sequentially.  </p>\n<p> A PageAsyncTask object must be registered to the page through the <a class=\"xref\" href=\"system.web.ui.page#System_Web_UI_Page_RegisterAsyncTask_\" data-linktype=\"relative-path\">RegisterAsyncTask</a> method. The page itself does not have to be processed asynchronously to execute asynchronous tasks. You can set the <code>Async</code> attribute to either <code>true</code> (as shown in the following code example) or <code>false</code> on the page directive and the asynchronous tasks will still be processed asynchronously:  </p>\n<p> <code>&lt;%@ Page Async=&quot;true&quot; %&gt;</code>  </p>\n<p> When the <code>Async</code> attribute is set to <code>false</code>, the thread that executes the page will be blocked until all asynchronous tasks are complete.  </p>\n<p> Any asynchronous tasks registered before the <a class=\"xref\" href=\"system.web.ui.page#System_Web_UI_Page_PreRenderComplete\" data-linktype=\"relative-path\">PreRenderComplete</a> event will be executed automatically by the page if they have not already been executed. Those asynchronous tasks registered after the <a class=\"xref\" href=\"system.web.ui.page#System_Web_UI_Page_PreRenderComplete\" data-linktype=\"relative-path\">PreRenderComplete</a> event must be executed explicitly through the <a class=\"xref\" href=\"system.web.ui.page#System_Web_UI_Page_ExecuteRegisteredAsyncTasks_\" data-linktype=\"relative-path\">ExecuteRegisteredAsyncTasks</a> method. The <a class=\"xref\" href=\"system.web.ui.page#System_Web_UI_Page_ExecuteRegisteredAsyncTasks_\" data-linktype=\"relative-path\">ExecuteRegisteredAsyncTasks</a> method can also be used to start tasks before the <a class=\"xref\" href=\"system.web.ui.page#System_Web_UI_Page_PreRenderComplete\" data-linktype=\"relative-path\">PreRenderComplete</a> event. The <a class=\"xref\" href=\"system.web.ui.page#System_Web_UI_Page_ExecuteRegisteredAsyncTasks_\" data-linktype=\"relative-path\">ExecuteRegisteredAsyncTasks</a> method executes all the registered asynchronous tasks on the page that have not been executed.  </p>\n<p> By default, an asynchronous task will time out if it has not completed within 45 seconds. You can specify a different time-out value in either the Web.config file or the page directive. The <code>&lt;pages&gt;</code> section of the Web.config file contains an <code>asyncTimeout</code> attribute, as shown below.  </p>\n<p> <code>&lt;system.web&gt;</code>  </p>\n<p> <code>&lt;pages asyncTimeout=&quot;30&quot;&gt;</code>  </p>\n<p> <code>&lt;/pages&gt;</code>  </p>\n<p> <code>&lt;/system.web&gt;</code>  </p>\n<p> The page directive contains an <code>AsyncTimeout</code> attribute.  </p>\n<p> <code>&lt;%@ Page AsyncTimeout=&quot;30&quot; %&gt;</code></p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_PageAsyncTask__ctor_System_Func_System_Threading_CancellationToken_System_Threading_Tasks_Task__\" data-linktype=\"self-bookmark\">PageAsyncTask(Func&lt;CancellationToken,Task&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.web.ui.pageasynctask\" data-linktype=\"relative-path\">PageAsyncTask</a> class using an event handler that enables the task to be canceled.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_PageAsyncTask__ctor_System_Func_System_Threading_Tasks_Task__\" data-linktype=\"self-bookmark\">PageAsyncTask(Func&lt;Task&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.web.ui.pageasynctask\" data-linktype=\"relative-path\">PageAsyncTask</a> class using an event handler that enables the task to be handled.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_PageAsyncTask__ctor_System_Web_BeginEventHandler_System_Web_EndEventHandler_System_Web_EndEventHandler_System_Object_\" data-linktype=\"self-bookmark\">PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.web.ui.pageasynctask\" data-linktype=\"relative-path\">PageAsyncTask</a> class using the default value for executing in parallel.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_PageAsyncTask__ctor_System_Web_BeginEventHandler_System_Web_EndEventHandler_System_Web_EndEventHandler_System_Object_System_Boolean_\" data-linktype=\"self-bookmark\">PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.web.ui.pageasynctask\" data-linktype=\"relative-path\">PageAsyncTask</a> class using the specified value for executing in parallel.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_PageAsyncTask_BeginHandler\" data-linktype=\"self-bookmark\">BeginHandler</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the method to call when beginning an asynchronous task.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_PageAsyncTask_EndHandler\" data-linktype=\"self-bookmark\">EndHandler</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the method to call when the task completes successfully within the time-out period.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_PageAsyncTask_ExecuteInParallel\" data-linktype=\"self-bookmark\">ExecuteInParallel</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether the task can be processed in parallel with other tasks.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_PageAsyncTask_State\" data-linktype=\"self-bookmark\">State</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an object that represents the state of the task.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_PageAsyncTask_TimeoutHandler\" data-linktype=\"self-bookmark\">TimeoutHandler</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the method to call when the task does not complete successfully within the time-out period.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_PageAsyncTask__ctor_System_Func_System_Threading_CancellationToken_System_Threading_Tasks_Task__\">\r\n    \r\n            <a id=\"System_Web_UI_PageAsyncTask__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PageAsyncTask(Func&lt;CancellationToken,Task&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.web.ui.pageasynctask\" data-linktype=\"relative-path\">PageAsyncTask</a> class using an event handler that enables the task to be canceled.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public PageAsyncTask (Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&gt; handler);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>handler</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a>,<a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An event handler.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor wraps a &lt;xref:System.Web.CancellableTaskEventHandler&gt; delegate so that the <a class=\"xref\" href=\"system.web.ui.pageasynctask\" data-linktype=\"relative-path\">PageAsyncTask</a> object can integrate asynchronous code (based on <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> objects) with the existing ASP.NET Web Forms asynchronous pages feature. ASP.NET will signal the <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> object that is passed to a &lt;xref:System.Web.CancellableTaskEventHandler&gt; delegate for cancellation based on the <a class=\"xref\" href=\"system.web.ui.page#System_Web_UI_Page_AsyncTimeout_\" data-linktype=\"relative-path\">AsyncTimeout</a> attribute set in the <code>@ Page</code> directive of the Web page. When the <a class=\"xref\" href=\"system.web.ui.page#System_Web_UI_Page_AsyncTimeout_\" data-linktype=\"relative-path\">AsyncTimeout</a> value has been reached, the <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> object will be signaled. The <code>CancellationToken</code> parameter must be passed to any asynchronous APIs that are called by your implementation of the &lt;xref:System.Web.CancellableTaskEventHandler&gt; class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_PageAsyncTask__ctor_System_Func_System_Threading_Tasks_Task__\">\r\n    \r\n            <a id=\"System_Web_UI_PageAsyncTask__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PageAsyncTask(Func&lt;Task&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.web.ui.pageasynctask\" data-linktype=\"relative-path\">PageAsyncTask</a> class using an event handler that enables the task to be handled.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public PageAsyncTask (Func&lt;System.Threading.Tasks.Task&gt; handler);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>handler</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-1\" data-linktype=\"relative-path\">Func</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An event handler.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_PageAsyncTask__ctor_System_Web_BeginEventHandler_System_Web_EndEventHandler_System_Web_EndEventHandler_System_Object_\">\r\n    \r\n            <a id=\"System_Web_UI_PageAsyncTask__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.web.ui.pageasynctask\" data-linktype=\"relative-path\">PageAsyncTask</a> class using the default value for executing in parallel.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public PageAsyncTask (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, System.Web.EndEventHandler timeoutHandler, object state);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>beginHandler</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.begineventhandler\" data-linktype=\"relative-path\">BeginEventHandler</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The handler to call when beginning an asynchronous task.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>endHandler</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.endeventhandler\" data-linktype=\"relative-path\">EndEventHandler</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The handler to call when the task is completed successfully within the time-out period.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeoutHandler</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.endeventhandler\" data-linktype=\"relative-path\">EndEventHandler</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The handler to call when the task is not completed successfully within the time-out period.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object that represents the state of the task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>beginHandler</code> parameter or <code>endHandler</code> parameter is not specified.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This implementation of the constructor sets the <a class=\"xref\" href=\"system.web.ui.pageasynctask#System_Web_UI_PageAsyncTask_ExecuteInParallel_\" data-linktype=\"relative-path\">ExecuteInParallel</a> property to <code>false</code> so the asynchronous task is not processed in parallel with other tasks on the page.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_PageAsyncTask__ctor_System_Web_BeginEventHandler_System_Web_EndEventHandler_System_Web_EndEventHandler_System_Object_System_Boolean_\">\r\n    \r\n            <a id=\"System_Web_UI_PageAsyncTask__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.web.ui.pageasynctask\" data-linktype=\"relative-path\">PageAsyncTask</a> class using the specified value for executing in parallel.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public PageAsyncTask (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, System.Web.EndEventHandler timeoutHandler, object state, bool executeInParallel);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>beginHandler</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.begineventhandler\" data-linktype=\"relative-path\">BeginEventHandler</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The handler to call when beginning an asynchronous task.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>endHandler</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.endeventhandler\" data-linktype=\"relative-path\">EndEventHandler</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The handler to call when the task is completed successfully within the time-out period.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeoutHandler</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.endeventhandler\" data-linktype=\"relative-path\">EndEventHandler</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The handler to call when the task is not completed successfully within the time-out period.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object that represents the state of the task.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>executeInParallel</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value that indicates whether the task can be processed in parallel with other tasks.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>beginHandler</code> parameter or <code>endHandler</code> parameter is not specified.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This implementation of the constructor allows you to set whether the asynchronous task will be processed in parallel with other tasks on the page.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates three asynchronous tasks that are processed in parallel to each other. This example is part of a larger example found in the <a class=\"xref\" href=\"system.web.ui.pageasynctask\" data-linktype=\"relative-path\">PageAsyncTask</a> class overview.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Web.UI.PageAsyncTask#3\">    PageAsyncTask asyncTask1 = new PageAsyncTask(slowTask1.OnBegin, slowTask1.OnEnd, slowTask1.OnTimeout, &quot;Async1&quot;, true);\n    PageAsyncTask asyncTask2 = new PageAsyncTask(slowTask2.OnBegin, slowTask2.OnEnd, slowTask2.OnTimeout, &quot;Async2&quot;, true);\n    PageAsyncTask asyncTask3 = new PageAsyncTask(slowTask3.OnBegin, slowTask3.OnEnd, slowTask3.OnTimeout, &quot;Async3&quot;, true);\n\n    // Register the asynchronous task.\n    Page.RegisterAsyncTask(asyncTask1);\n    Page.RegisterAsyncTask(asyncTask2);\n    Page.RegisterAsyncTask(asyncTask3);\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Web.UI.PageAsyncTask#3\">        Dim asyncTask1 As New PageAsyncTask(AddressOf slowTask1.OnBegin, AddressOf slowTask1.OnEnd, AddressOf slowTask1.OnTimeout, &quot;Async1&quot;, True)\n        Dim asyncTask2 As New PageAsyncTask(AddressOf slowTask2.OnBegin, AddressOf slowTask2.OnEnd, AddressOf slowTask2.OnTimeout, &quot;Async2&quot;, True)\n        Dim asyncTask3 As New PageAsyncTask(AddressOf slowTask3.OnBegin, AddressOf slowTask3.OnEnd, AddressOf slowTask3.OnTimeout, &quot;Async3&quot;, True)\n\n        &#39; Register the asynchronous task.\n        Page.RegisterAsyncTask(asyncTask1)\n        Page.RegisterAsyncTask(asyncTask2)\n        Page.RegisterAsyncTask(asyncTask3)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_PageAsyncTask_BeginHandler\">\r\n    \r\n            <a id=\"System_Web_UI_PageAsyncTask_BeginHandler_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginHandler</div>        \r\n          </div>\r\n    \r\n            <p>Gets the method to call when beginning an asynchronous task.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Web.BeginEventHandler BeginHandler { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.begineventhandler\" data-linktype=\"relative-path\">BeginEventHandler</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.web.begineventhandler\" data-linktype=\"relative-path\">BeginEventHandler</a> delegate that represents the method to call when beginning the asynchronous task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The BeginHandler delegate is set in the constructor.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example registers three asynchronous tasks to a page and executes them in parallel. Each task calls a method that merely causes the thread to sleep for 5 seconds. A BeginHandler delegate is specified for each task.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Web.UI.PageAsyncTask#1\">&lt;%@ Page Language=&quot;C#&quot; Async=&quot;true&quot; AsyncTimeout=&quot;35&quot;%&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n    \n  protected void Page_Load(object sender, EventArgs e)\n  {\n      \n    // Define the asynchronuous task.\n    Samples.AspNet.CS.Controls.SlowTask slowTask1 =    \n      new Samples.AspNet.CS.Controls.SlowTask();\n    Samples.AspNet.CS.Controls.SlowTask slowTask2 =\n    new Samples.AspNet.CS.Controls.SlowTask();\n    Samples.AspNet.CS.Controls.SlowTask slowTask3 =\n    new Samples.AspNet.CS.Controls.SlowTask();\n    \n    PageAsyncTask asyncTask1 = new PageAsyncTask(slowTask1.OnBegin, slowTask1.OnEnd, slowTask1.OnTimeout, &quot;Async1&quot;, true);\n    PageAsyncTask asyncTask2 = new PageAsyncTask(slowTask2.OnBegin, slowTask2.OnEnd, slowTask2.OnTimeout, &quot;Async2&quot;, true);\n    PageAsyncTask asyncTask3 = new PageAsyncTask(slowTask3.OnBegin, slowTask3.OnEnd, slowTask3.OnTimeout, &quot;Async3&quot;, true);\n\n    // Register the asynchronous task.\n    Page.RegisterAsyncTask(asyncTask1);\n    Page.RegisterAsyncTask(asyncTask2);\n    Page.RegisterAsyncTask(asyncTask3);\n      \n    // Execute the register asynchronous task.\n    Page.ExecuteRegisteredAsyncTasks();\n\n    TaskMessage.InnerHtml = slowTask1.GetAsyncTaskProgress()+ &quot;&lt;br /&gt;&quot; + slowTask2.GetAsyncTaskProgress() + &quot;&lt;br /&gt;&quot; + slowTask3.GetAsyncTaskProgress();\n\n  }\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head id=&quot;Head1&quot; runat=&quot;server&quot;&gt;\n    &lt;title&gt;Asynchronous Task Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      &lt;span id=&quot;TaskMessage&quot; runat=&quot;server&quot;&gt;\n      &lt;/span&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Web.UI.PageAsyncTask#1\">&lt;%@ Page Language=&quot;VB&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)\n      \n        &#39; Define the asynchronuous task.\n        Dim slowTask1 As New Samples.AspNet.VB.Controls.SlowTask()\n        Dim slowTask2 As New Samples.AspNet.VB.Controls.SlowTask()\n        Dim slowTask3 As New Samples.AspNet.VB.Controls.SlowTask()\n     \n        Dim asyncTask1 As New PageAsyncTask(AddressOf slowTask1.OnBegin, AddressOf slowTask1.OnEnd, AddressOf slowTask1.OnTimeout, &quot;Async1&quot;, True)\n        Dim asyncTask2 As New PageAsyncTask(AddressOf slowTask2.OnBegin, AddressOf slowTask2.OnEnd, AddressOf slowTask2.OnTimeout, &quot;Async2&quot;, True)\n        Dim asyncTask3 As New PageAsyncTask(AddressOf slowTask3.OnBegin, AddressOf slowTask3.OnEnd, AddressOf slowTask3.OnTimeout, &quot;Async3&quot;, True)\n\n        &#39; Register the asynchronous task.\n        Page.RegisterAsyncTask(asyncTask1)\n        Page.RegisterAsyncTask(asyncTask2)\n        Page.RegisterAsyncTask(asyncTask3)\n      \n        &#39; Execute the register asynchronous task.\n        Page.ExecuteRegisteredAsyncTasks()\n\n        TaskMessage.InnerHtml = slowTask1.GetAsyncTaskProgress() + &quot;&lt;br /&gt;&quot; + slowTask2.GetAsyncTaskProgress() + &quot;&lt;br /&gt;&quot; + slowTask3.GetAsyncTaskProgress()\n\n    End Sub\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;Untitled Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n    &lt;span id=&quot;TaskMessage&quot; runat=&quot;server&quot;&gt;\n      &lt;/span&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Web.UI.PageAsyncTask#2\">Imports Microsoft.VisualBasic\nImports System.Threading\n\nNamespace Samples.AspNet.VB.Controls\n\n    Public Class SlowTask\n        Private _taskprogress As String\n        Private _dlgt As AsyncTaskDelegate\n\n        &#39; Create delegate.\n        Protected Delegate Sub AsyncTaskDelegate()\n\n        Public Function GetAsyncTaskProgress() As String\n            Return _taskprogress\n        End Function\n\n        Public Sub ExecuteAsyncTask()\n            &#39; Introduce an artificial delay to simulate a delayed \n            &#39; asynchronous task.\n            Thread.Sleep(TimeSpan.FromSeconds(5.0))\n        End Sub\n\n        &#39; Define the method that will get called to\n        &#39; start the asynchronous task.\n        Public Function OnBegin(ByVal sender As Object, ByVal e As EventArgs, ByVal cb As AsyncCallback, ByVal extraData As Object) As IAsyncResult\n            _taskprogress = &quot;AsyncTask started at: &quot; + DateTime.Now.ToString + &quot;. &quot;\n\n            _dlgt = New AsyncTaskDelegate(AddressOf ExecuteAsyncTask)\n            Dim result As IAsyncResult = _dlgt.BeginInvoke(cb, extraData)\n\n            Return result\n        End Function\n\n        &#39; Define the method that will get called when\n        &#39; the asynchronous task is ended.\n        Public Sub OnEnd(ByVal ar As IAsyncResult)\n            _taskprogress += &quot;AsyncTask completed at: &quot; + DateTime.Now.ToString\n            _dlgt.EndInvoke(ar)\n        End Sub\n\n\n        &#39; Define the method that will get called if the task\n        &#39; is not completed within the asynchronous timeout interval.\n        Public Sub OnTimeout(ByVal ar As IAsyncResult)\n            _taskprogress += &quot;AsyncTask failed to complete &quot; + _\n                &quot;because it exceeded the AsyncTimeout parameter.&quot;\n        End Sub\n    End Class\nEnd Namespace\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Web.UI.PageAsyncTask#2\">using System;\nusing System.Web;\nusing System.Web.UI;\nusing System.Threading;\n\nnamespace Samples.AspNet.CS.Controls\n{\n    public class SlowTask\n    {\n        private String _taskprogress;\n        private AsyncTaskDelegate _dlgt;\n\n        // Create delegate.\n        protected delegate void AsyncTaskDelegate();\n\n        public String GetAsyncTaskProgress()\n        {\n            return _taskprogress;\n        }\n        public void ExecuteAsyncTask()\n        {\n            // Introduce an artificial delay to simulate a delayed \n            // asynchronous task.\n            Thread.Sleep(TimeSpan.FromSeconds(5.0));\n        }\n\n        // Define the method that will get called to\n        // start the asynchronous task.\n        public IAsyncResult OnBegin(object sender, EventArgs e,\n            AsyncCallback cb, object extraData)\n        {\n            _taskprogress = &quot;AsyncTask started at: &quot; + DateTime.Now + &quot;. &quot;;\n\n            _dlgt = new AsyncTaskDelegate(ExecuteAsyncTask);\n            IAsyncResult result = _dlgt.BeginInvoke(cb, extraData);\n\n            return result;\n        }\n\n        // Define the method that will get called when\n        // the asynchronous task is ended.\n        public void OnEnd(IAsyncResult ar)\n        {\n            _taskprogress += &quot;AsyncTask completed at: &quot; + DateTime.Now;\n            _dlgt.EndInvoke(ar);\n        }\n\n        // Define the method that will get called if the task\n        // is not completed within the asynchronous timeout interval.\n        public void OnTimeout(IAsyncResult ar)\n        {\n            _taskprogress += &quot;AsyncTask failed to complete &quot; +\n                &quot;because it exceeded the AsyncTimeout parameter.&quot;;\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_PageAsyncTask_EndHandler\">\r\n    \r\n            <a id=\"System_Web_UI_PageAsyncTask_EndHandler_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EndHandler</div>        \r\n          </div>\r\n    \r\n            <p>Gets the method to call when the task completes successfully within the time-out period.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Web.EndEventHandler EndHandler { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.endeventhandler\" data-linktype=\"relative-path\">EndEventHandler</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.web.endeventhandler\" data-linktype=\"relative-path\">EndEventHandler</a> delegate that represents the method to call when the task completes successfully within the time-out period.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The EndHandler delegate is set in the constructor.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example registers three asynchronous tasks to a page and executes them in parallel. Each task calls a method that merely causes the thread to sleep for 5 seconds. An EndHandler delegate is specified for each task.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Web.UI.PageAsyncTask#1\">&lt;%@ Page Language=&quot;C#&quot; Async=&quot;true&quot; AsyncTimeout=&quot;35&quot;%&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n    \n  protected void Page_Load(object sender, EventArgs e)\n  {\n      \n    // Define the asynchronuous task.\n    Samples.AspNet.CS.Controls.SlowTask slowTask1 =    \n      new Samples.AspNet.CS.Controls.SlowTask();\n    Samples.AspNet.CS.Controls.SlowTask slowTask2 =\n    new Samples.AspNet.CS.Controls.SlowTask();\n    Samples.AspNet.CS.Controls.SlowTask slowTask3 =\n    new Samples.AspNet.CS.Controls.SlowTask();\n    \n    PageAsyncTask asyncTask1 = new PageAsyncTask(slowTask1.OnBegin, slowTask1.OnEnd, slowTask1.OnTimeout, &quot;Async1&quot;, true);\n    PageAsyncTask asyncTask2 = new PageAsyncTask(slowTask2.OnBegin, slowTask2.OnEnd, slowTask2.OnTimeout, &quot;Async2&quot;, true);\n    PageAsyncTask asyncTask3 = new PageAsyncTask(slowTask3.OnBegin, slowTask3.OnEnd, slowTask3.OnTimeout, &quot;Async3&quot;, true);\n\n    // Register the asynchronous task.\n    Page.RegisterAsyncTask(asyncTask1);\n    Page.RegisterAsyncTask(asyncTask2);\n    Page.RegisterAsyncTask(asyncTask3);\n      \n    // Execute the register asynchronous task.\n    Page.ExecuteRegisteredAsyncTasks();\n\n    TaskMessage.InnerHtml = slowTask1.GetAsyncTaskProgress()+ &quot;&lt;br /&gt;&quot; + slowTask2.GetAsyncTaskProgress() + &quot;&lt;br /&gt;&quot; + slowTask3.GetAsyncTaskProgress();\n\n  }\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head id=&quot;Head1&quot; runat=&quot;server&quot;&gt;\n    &lt;title&gt;Asynchronous Task Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      &lt;span id=&quot;TaskMessage&quot; runat=&quot;server&quot;&gt;\n      &lt;/span&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Web.UI.PageAsyncTask#1\">&lt;%@ Page Language=&quot;VB&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)\n      \n        &#39; Define the asynchronuous task.\n        Dim slowTask1 As New Samples.AspNet.VB.Controls.SlowTask()\n        Dim slowTask2 As New Samples.AspNet.VB.Controls.SlowTask()\n        Dim slowTask3 As New Samples.AspNet.VB.Controls.SlowTask()\n     \n        Dim asyncTask1 As New PageAsyncTask(AddressOf slowTask1.OnBegin, AddressOf slowTask1.OnEnd, AddressOf slowTask1.OnTimeout, &quot;Async1&quot;, True)\n        Dim asyncTask2 As New PageAsyncTask(AddressOf slowTask2.OnBegin, AddressOf slowTask2.OnEnd, AddressOf slowTask2.OnTimeout, &quot;Async2&quot;, True)\n        Dim asyncTask3 As New PageAsyncTask(AddressOf slowTask3.OnBegin, AddressOf slowTask3.OnEnd, AddressOf slowTask3.OnTimeout, &quot;Async3&quot;, True)\n\n        &#39; Register the asynchronous task.\n        Page.RegisterAsyncTask(asyncTask1)\n        Page.RegisterAsyncTask(asyncTask2)\n        Page.RegisterAsyncTask(asyncTask3)\n      \n        &#39; Execute the register asynchronous task.\n        Page.ExecuteRegisteredAsyncTasks()\n\n        TaskMessage.InnerHtml = slowTask1.GetAsyncTaskProgress() + &quot;&lt;br /&gt;&quot; + slowTask2.GetAsyncTaskProgress() + &quot;&lt;br /&gt;&quot; + slowTask3.GetAsyncTaskProgress()\n\n    End Sub\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;Untitled Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n    &lt;span id=&quot;TaskMessage&quot; runat=&quot;server&quot;&gt;\n      &lt;/span&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Web.UI.PageAsyncTask#2\">Imports Microsoft.VisualBasic\nImports System.Threading\n\nNamespace Samples.AspNet.VB.Controls\n\n    Public Class SlowTask\n        Private _taskprogress As String\n        Private _dlgt As AsyncTaskDelegate\n\n        &#39; Create delegate.\n        Protected Delegate Sub AsyncTaskDelegate()\n\n        Public Function GetAsyncTaskProgress() As String\n            Return _taskprogress\n        End Function\n\n        Public Sub ExecuteAsyncTask()\n            &#39; Introduce an artificial delay to simulate a delayed \n            &#39; asynchronous task.\n            Thread.Sleep(TimeSpan.FromSeconds(5.0))\n        End Sub\n\n        &#39; Define the method that will get called to\n        &#39; start the asynchronous task.\n        Public Function OnBegin(ByVal sender As Object, ByVal e As EventArgs, ByVal cb As AsyncCallback, ByVal extraData As Object) As IAsyncResult\n            _taskprogress = &quot;AsyncTask started at: &quot; + DateTime.Now.ToString + &quot;. &quot;\n\n            _dlgt = New AsyncTaskDelegate(AddressOf ExecuteAsyncTask)\n            Dim result As IAsyncResult = _dlgt.BeginInvoke(cb, extraData)\n\n            Return result\n        End Function\n\n        &#39; Define the method that will get called when\n        &#39; the asynchronous task is ended.\n        Public Sub OnEnd(ByVal ar As IAsyncResult)\n            _taskprogress += &quot;AsyncTask completed at: &quot; + DateTime.Now.ToString\n            _dlgt.EndInvoke(ar)\n        End Sub\n\n\n        &#39; Define the method that will get called if the task\n        &#39; is not completed within the asynchronous timeout interval.\n        Public Sub OnTimeout(ByVal ar As IAsyncResult)\n            _taskprogress += &quot;AsyncTask failed to complete &quot; + _\n                &quot;because it exceeded the AsyncTimeout parameter.&quot;\n        End Sub\n    End Class\nEnd Namespace\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Web.UI.PageAsyncTask#2\">using System;\nusing System.Web;\nusing System.Web.UI;\nusing System.Threading;\n\nnamespace Samples.AspNet.CS.Controls\n{\n    public class SlowTask\n    {\n        private String _taskprogress;\n        private AsyncTaskDelegate _dlgt;\n\n        // Create delegate.\n        protected delegate void AsyncTaskDelegate();\n\n        public String GetAsyncTaskProgress()\n        {\n            return _taskprogress;\n        }\n        public void ExecuteAsyncTask()\n        {\n            // Introduce an artificial delay to simulate a delayed \n            // asynchronous task.\n            Thread.Sleep(TimeSpan.FromSeconds(5.0));\n        }\n\n        // Define the method that will get called to\n        // start the asynchronous task.\n        public IAsyncResult OnBegin(object sender, EventArgs e,\n            AsyncCallback cb, object extraData)\n        {\n            _taskprogress = &quot;AsyncTask started at: &quot; + DateTime.Now + &quot;. &quot;;\n\n            _dlgt = new AsyncTaskDelegate(ExecuteAsyncTask);\n            IAsyncResult result = _dlgt.BeginInvoke(cb, extraData);\n\n            return result;\n        }\n\n        // Define the method that will get called when\n        // the asynchronous task is ended.\n        public void OnEnd(IAsyncResult ar)\n        {\n            _taskprogress += &quot;AsyncTask completed at: &quot; + DateTime.Now;\n            _dlgt.EndInvoke(ar);\n        }\n\n        // Define the method that will get called if the task\n        // is not completed within the asynchronous timeout interval.\n        public void OnTimeout(IAsyncResult ar)\n        {\n            _taskprogress += &quot;AsyncTask failed to complete &quot; +\n                &quot;because it exceeded the AsyncTimeout parameter.&quot;;\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_PageAsyncTask_ExecuteInParallel\">\r\n    \r\n            <a id=\"System_Web_UI_PageAsyncTask_ExecuteInParallel_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExecuteInParallel</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether the task can be processed in parallel with other tasks.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool ExecuteInParallel { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the task should be processed in parallel with other tasks; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ExecuteInParallel property is set in the constructor. When multiple tasks are registered in a page and the ExecuteInParallel property is set to <code>true</code>, then those tasks are processed concurrently. However, if the ExecuteInParallel property is set to <code>false</code>, then those tasks are processed sequentially. For example, if a page contained two asynchronous tasks that each took 5 seconds to complete and ExecuteInParallel is set to <code>true</code>, both tasks will complete in 5 seconds. If ExecuteInParallel is set to <code>false</code> for these same two tasks, then the first task will complete in 5 seconds and the second task will complete 5 seconds after the completion of the first task.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example defines three asynchronous tasks that are each set to be processed in parallel. This example is part of a larger example found in the <a class=\"xref\" href=\"system.web.ui.pageasynctask\" data-linktype=\"relative-path\">PageAsyncTask</a> class overview.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Web.UI.PageAsyncTask#3\">    PageAsyncTask asyncTask1 = new PageAsyncTask(slowTask1.OnBegin, slowTask1.OnEnd, slowTask1.OnTimeout, &quot;Async1&quot;, true);\n    PageAsyncTask asyncTask2 = new PageAsyncTask(slowTask2.OnBegin, slowTask2.OnEnd, slowTask2.OnTimeout, &quot;Async2&quot;, true);\n    PageAsyncTask asyncTask3 = new PageAsyncTask(slowTask3.OnBegin, slowTask3.OnEnd, slowTask3.OnTimeout, &quot;Async3&quot;, true);\n\n    // Register the asynchronous task.\n    Page.RegisterAsyncTask(asyncTask1);\n    Page.RegisterAsyncTask(asyncTask2);\n    Page.RegisterAsyncTask(asyncTask3);\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Web.UI.PageAsyncTask#3\">        Dim asyncTask1 As New PageAsyncTask(AddressOf slowTask1.OnBegin, AddressOf slowTask1.OnEnd, AddressOf slowTask1.OnTimeout, &quot;Async1&quot;, True)\n        Dim asyncTask2 As New PageAsyncTask(AddressOf slowTask2.OnBegin, AddressOf slowTask2.OnEnd, AddressOf slowTask2.OnTimeout, &quot;Async2&quot;, True)\n        Dim asyncTask3 As New PageAsyncTask(AddressOf slowTask3.OnBegin, AddressOf slowTask3.OnEnd, AddressOf slowTask3.OnTimeout, &quot;Async3&quot;, True)\n\n        &#39; Register the asynchronous task.\n        Page.RegisterAsyncTask(asyncTask1)\n        Page.RegisterAsyncTask(asyncTask2)\n        Page.RegisterAsyncTask(asyncTask3)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_PageAsyncTask_State\">\r\n    \r\n            <a id=\"System_Web_UI_PageAsyncTask_State_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">State</div>        \r\n          </div>\r\n    \r\n            <p>Gets an object that represents the state of the task.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object State { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> that represents the state of the task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The State property is set in the constructor and cannot be modified during execution of the asynchronous task. You can differentiate asynchronous tasks in a page by assigning unique string values to their respective State properties.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates three asynchronous tasks and gives them unique values for their State properties. This example is part of a larger example found in the <a class=\"xref\" href=\"system.web.ui.pageasynctask\" data-linktype=\"relative-path\">PageAsyncTask</a> class overview.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Web.UI.PageAsyncTask#3\">    PageAsyncTask asyncTask1 = new PageAsyncTask(slowTask1.OnBegin, slowTask1.OnEnd, slowTask1.OnTimeout, &quot;Async1&quot;, true);\n    PageAsyncTask asyncTask2 = new PageAsyncTask(slowTask2.OnBegin, slowTask2.OnEnd, slowTask2.OnTimeout, &quot;Async2&quot;, true);\n    PageAsyncTask asyncTask3 = new PageAsyncTask(slowTask3.OnBegin, slowTask3.OnEnd, slowTask3.OnTimeout, &quot;Async3&quot;, true);\n\n    // Register the asynchronous task.\n    Page.RegisterAsyncTask(asyncTask1);\n    Page.RegisterAsyncTask(asyncTask2);\n    Page.RegisterAsyncTask(asyncTask3);\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Web.UI.PageAsyncTask#3\">        Dim asyncTask1 As New PageAsyncTask(AddressOf slowTask1.OnBegin, AddressOf slowTask1.OnEnd, AddressOf slowTask1.OnTimeout, &quot;Async1&quot;, True)\n        Dim asyncTask2 As New PageAsyncTask(AddressOf slowTask2.OnBegin, AddressOf slowTask2.OnEnd, AddressOf slowTask2.OnTimeout, &quot;Async2&quot;, True)\n        Dim asyncTask3 As New PageAsyncTask(AddressOf slowTask3.OnBegin, AddressOf slowTask3.OnEnd, AddressOf slowTask3.OnTimeout, &quot;Async3&quot;, True)\n\n        &#39; Register the asynchronous task.\n        Page.RegisterAsyncTask(asyncTask1)\n        Page.RegisterAsyncTask(asyncTask2)\n        Page.RegisterAsyncTask(asyncTask3)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_PageAsyncTask_TimeoutHandler\">\r\n    \r\n            <a id=\"System_Web_UI_PageAsyncTask_TimeoutHandler_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TimeoutHandler</div>        \r\n          </div>\r\n    \r\n            <p>Gets the method to call when the task does not complete successfully within the time-out period.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Web.EndEventHandler TimeoutHandler { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.endeventhandler\" data-linktype=\"relative-path\">EndEventHandler</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.web.endeventhandler\" data-linktype=\"relative-path\">EndEventHandler</a> delegate that represents the method to call when the task does not complete successfully within the time-out period.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The TimeoutHandler delegate is set in the constructor.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example registers three asynchronous tasks to a page and executes them in parallel. Each task calls a method that merely causes the thread to sleep for 5 seconds. A TimeoutHandler delegate is specified for each task.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Web.UI.PageAsyncTask#1\">&lt;%@ Page Language=&quot;C#&quot; Async=&quot;true&quot; AsyncTimeout=&quot;35&quot;%&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n    \n  protected void Page_Load(object sender, EventArgs e)\n  {\n      \n    // Define the asynchronuous task.\n    Samples.AspNet.CS.Controls.SlowTask slowTask1 =    \n      new Samples.AspNet.CS.Controls.SlowTask();\n    Samples.AspNet.CS.Controls.SlowTask slowTask2 =\n    new Samples.AspNet.CS.Controls.SlowTask();\n    Samples.AspNet.CS.Controls.SlowTask slowTask3 =\n    new Samples.AspNet.CS.Controls.SlowTask();\n    \n    PageAsyncTask asyncTask1 = new PageAsyncTask(slowTask1.OnBegin, slowTask1.OnEnd, slowTask1.OnTimeout, &quot;Async1&quot;, true);\n    PageAsyncTask asyncTask2 = new PageAsyncTask(slowTask2.OnBegin, slowTask2.OnEnd, slowTask2.OnTimeout, &quot;Async2&quot;, true);\n    PageAsyncTask asyncTask3 = new PageAsyncTask(slowTask3.OnBegin, slowTask3.OnEnd, slowTask3.OnTimeout, &quot;Async3&quot;, true);\n\n    // Register the asynchronous task.\n    Page.RegisterAsyncTask(asyncTask1);\n    Page.RegisterAsyncTask(asyncTask2);\n    Page.RegisterAsyncTask(asyncTask3);\n      \n    // Execute the register asynchronous task.\n    Page.ExecuteRegisteredAsyncTasks();\n\n    TaskMessage.InnerHtml = slowTask1.GetAsyncTaskProgress()+ &quot;&lt;br /&gt;&quot; + slowTask2.GetAsyncTaskProgress() + &quot;&lt;br /&gt;&quot; + slowTask3.GetAsyncTaskProgress();\n\n  }\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head id=&quot;Head1&quot; runat=&quot;server&quot;&gt;\n    &lt;title&gt;Asynchronous Task Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      &lt;span id=&quot;TaskMessage&quot; runat=&quot;server&quot;&gt;\n      &lt;/span&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Web.UI.PageAsyncTask#1\">&lt;%@ Page Language=&quot;VB&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)\n      \n        &#39; Define the asynchronuous task.\n        Dim slowTask1 As New Samples.AspNet.VB.Controls.SlowTask()\n        Dim slowTask2 As New Samples.AspNet.VB.Controls.SlowTask()\n        Dim slowTask3 As New Samples.AspNet.VB.Controls.SlowTask()\n     \n        Dim asyncTask1 As New PageAsyncTask(AddressOf slowTask1.OnBegin, AddressOf slowTask1.OnEnd, AddressOf slowTask1.OnTimeout, &quot;Async1&quot;, True)\n        Dim asyncTask2 As New PageAsyncTask(AddressOf slowTask2.OnBegin, AddressOf slowTask2.OnEnd, AddressOf slowTask2.OnTimeout, &quot;Async2&quot;, True)\n        Dim asyncTask3 As New PageAsyncTask(AddressOf slowTask3.OnBegin, AddressOf slowTask3.OnEnd, AddressOf slowTask3.OnTimeout, &quot;Async3&quot;, True)\n\n        &#39; Register the asynchronous task.\n        Page.RegisterAsyncTask(asyncTask1)\n        Page.RegisterAsyncTask(asyncTask2)\n        Page.RegisterAsyncTask(asyncTask3)\n      \n        &#39; Execute the register asynchronous task.\n        Page.ExecuteRegisteredAsyncTasks()\n\n        TaskMessage.InnerHtml = slowTask1.GetAsyncTaskProgress() + &quot;&lt;br /&gt;&quot; + slowTask2.GetAsyncTaskProgress() + &quot;&lt;br /&gt;&quot; + slowTask3.GetAsyncTaskProgress()\n\n    End Sub\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;Untitled Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n    &lt;span id=&quot;TaskMessage&quot; runat=&quot;server&quot;&gt;\n      &lt;/span&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Web.UI.PageAsyncTask#2\">Imports Microsoft.VisualBasic\nImports System.Threading\n\nNamespace Samples.AspNet.VB.Controls\n\n    Public Class SlowTask\n        Private _taskprogress As String\n        Private _dlgt As AsyncTaskDelegate\n\n        &#39; Create delegate.\n        Protected Delegate Sub AsyncTaskDelegate()\n\n        Public Function GetAsyncTaskProgress() As String\n            Return _taskprogress\n        End Function\n\n        Public Sub ExecuteAsyncTask()\n            &#39; Introduce an artificial delay to simulate a delayed \n            &#39; asynchronous task.\n            Thread.Sleep(TimeSpan.FromSeconds(5.0))\n        End Sub\n\n        &#39; Define the method that will get called to\n        &#39; start the asynchronous task.\n        Public Function OnBegin(ByVal sender As Object, ByVal e As EventArgs, ByVal cb As AsyncCallback, ByVal extraData As Object) As IAsyncResult\n            _taskprogress = &quot;AsyncTask started at: &quot; + DateTime.Now.ToString + &quot;. &quot;\n\n            _dlgt = New AsyncTaskDelegate(AddressOf ExecuteAsyncTask)\n            Dim result As IAsyncResult = _dlgt.BeginInvoke(cb, extraData)\n\n            Return result\n        End Function\n\n        &#39; Define the method that will get called when\n        &#39; the asynchronous task is ended.\n        Public Sub OnEnd(ByVal ar As IAsyncResult)\n            _taskprogress += &quot;AsyncTask completed at: &quot; + DateTime.Now.ToString\n            _dlgt.EndInvoke(ar)\n        End Sub\n\n\n        &#39; Define the method that will get called if the task\n        &#39; is not completed within the asynchronous timeout interval.\n        Public Sub OnTimeout(ByVal ar As IAsyncResult)\n            _taskprogress += &quot;AsyncTask failed to complete &quot; + _\n                &quot;because it exceeded the AsyncTimeout parameter.&quot;\n        End Sub\n    End Class\nEnd Namespace\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Web.UI.PageAsyncTask#2\">using System;\nusing System.Web;\nusing System.Web.UI;\nusing System.Threading;\n\nnamespace Samples.AspNet.CS.Controls\n{\n    public class SlowTask\n    {\n        private String _taskprogress;\n        private AsyncTaskDelegate _dlgt;\n\n        // Create delegate.\n        protected delegate void AsyncTaskDelegate();\n\n        public String GetAsyncTaskProgress()\n        {\n            return _taskprogress;\n        }\n        public void ExecuteAsyncTask()\n        {\n            // Introduce an artificial delay to simulate a delayed \n            // asynchronous task.\n            Thread.Sleep(TimeSpan.FromSeconds(5.0));\n        }\n\n        // Define the method that will get called to\n        // start the asynchronous task.\n        public IAsyncResult OnBegin(object sender, EventArgs e,\n            AsyncCallback cb, object extraData)\n        {\n            _taskprogress = &quot;AsyncTask started at: &quot; + DateTime.Now + &quot;. &quot;;\n\n            _dlgt = new AsyncTaskDelegate(ExecuteAsyncTask);\n            IAsyncResult result = _dlgt.BeginInvoke(cb, extraData);\n\n            return result;\n        }\n\n        // Define the method that will get called when\n        // the asynchronous task is ended.\n        public void OnEnd(IAsyncResult ar)\n        {\n            _taskprogress += &quot;AsyncTask completed at: &quot; + DateTime.Now;\n            _dlgt.EndInvoke(ar);\n        }\n\n        // Define the method that will get called if the task\n        // is not completed within the asynchronous timeout interval.\n        public void OnTimeout(IAsyncResult ar)\n        {\n            _taskprogress += &quot;AsyncTask failed to complete &quot; +\n                &quot;because it exceeded the AsyncTimeout parameter.&quot;;\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Web.UI.PageAsyncTask.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Web.UI.PageAsyncTask.yml\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.PageAsyncTask\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.PageAsyncTask..ctor\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.PageAsyncTask.BeginHandler\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.PageAsyncTask.EndHandler\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.PageAsyncTask.ExecuteInParallel\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.PageAsyncTask.State\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.PageAsyncTask.TimeoutHandler\">\r\n<meta name=\"APILocation\" content=\"System.Web.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"fe547433-d0a1-9fe5-3616-982dd598e0d2\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Contains information about an asynchronous task registered to a page. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Web.UI/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Web.UI.PageAsyncTask\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Web.UI.PageAsyncTask.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Web.UI.PageAsyncTask.yml","open_to_public_contributors":true,"api_name":["System.Web.UI.PageAsyncTask","System.Web.UI.PageAsyncTask..ctor","System.Web.UI.PageAsyncTask.BeginHandler","System.Web.UI.PageAsyncTask.EndHandler","System.Web.UI.PageAsyncTask.ExecuteInParallel","System.Web.UI.PageAsyncTask.State","System.Web.UI.PageAsyncTask.TimeoutHandler"],"api_location":["System.Web.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Web.UI.PageAsyncTask","System::Web::UI::PageAsyncTask","System.Web.UI.PageAsyncTask.#ctor","System::Web::UI::PageAsyncTask::#ctor","System.Web.UI.PageAsyncTask.BeginHandler","System::Web::UI::PageAsyncTask::BeginHandler","System.Web.UI.PageAsyncTask.EndHandler","System::Web::UI::PageAsyncTask::EndHandler","System.Web.UI.PageAsyncTask.ExecuteInParallel","System::Web::UI::PageAsyncTask::ExecuteInParallel","System.Web.UI.PageAsyncTask.State","System::Web::UI::PageAsyncTask::State","System.Web.UI.PageAsyncTask.TimeoutHandler","System::Web::UI::PageAsyncTask::TimeoutHandler"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"fe547433-d0a1-9fe5-3616-982dd598e0d2","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Web.UI/PageAsyncTask.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"PageAsyncTask class | Microsoft Docs","_op_ogTitle":"PageAsyncTask class","description":"Contains information about an asynchronous task registered to a page. This class cannot be inherited.\n","toc_asset_id":"_splitted/System.Web.UI/toc.json","toc_rel":"_splitted/System.Web.UI/toc.json","source_url":"","ms.assetid":"System.Web.UI.PageAsyncTask","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.web.ui.pageasynctask","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.web.ui.pageasynctask","fileRelativePath":"System.Web.UI.PageAsyncTask.html"},"themesRelativePathToOutputRoot":"_themes/"}