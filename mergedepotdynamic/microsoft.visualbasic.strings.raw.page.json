{"content":"    \r\n    <h1 id=\"Microsoft_VisualBasic_Strings\">\r\n      <span class=\"lang-csharp\">Strings</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>The <code>Strings</code> module contains procedures used to perform string operations.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[Microsoft.VisualBasic.CompilerServices.StandardModule]\npublic sealed class Strings</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Strings</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>This module supports the Visual Basic language keywords and run-time library members that manipulate strings.</p>\n\r\n    \r\n    \r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_Asc_System_Char_\" data-linktype=\"self-bookmark\">Asc(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an <code>Integer</code> value representing the character code corresponding to a character.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_Asc_System_String_\" data-linktype=\"self-bookmark\">Asc(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an <code>Integer</code> value representing the character code corresponding to a character.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_AscW_System_Char_\" data-linktype=\"self-bookmark\">AscW(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an <code>Integer</code> value representing the character code corresponding to a character.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_AscW_System_String_\" data-linktype=\"self-bookmark\">AscW(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an <code>Integer</code> value representing the character code corresponding to a character.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_Chr_System_Int32_\" data-linktype=\"self-bookmark\">Chr(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the character associated with the specified character code.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_ChrW_System_Int32_\" data-linktype=\"self-bookmark\">ChrW(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the character associated with the specified character code.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_Filter_System_Object___System_String_System_Boolean_Microsoft_VisualBasic_CompareMethod_\" data-linktype=\"self-bookmark\">Filter(Object[],String,Boolean,CompareMethod)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a zero-based array containing a subset of a <code>String</code> array based on specified filter criteria.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_Filter_System_String___System_String_System_Boolean_Microsoft_VisualBasic_CompareMethod_\" data-linktype=\"self-bookmark\">Filter(String[],String,Boolean,CompareMethod)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a zero-based array containing a subset of a <code>String</code> array based on specified filter criteria.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_Format_System_Object_System_String_\" data-linktype=\"self-bookmark\">Format(Object,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string formatted according to instructions contained in a format <code>String</code> expression.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_FormatCurrency_System_Object_System_Int32_Microsoft_VisualBasic_TriState_Microsoft_VisualBasic_TriState_Microsoft_VisualBasic_TriState_\" data-linktype=\"self-bookmark\">FormatCurrency(Object,Int32,TriState,TriState,TriState)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an expression formatted as a currency value using the currency symbol defined in the system control panel.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_FormatDateTime_System_DateTime_Microsoft_VisualBasic_DateFormat_\" data-linktype=\"self-bookmark\">FormatDateTime(DateTime,DateFormat)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string expression representing a date/time value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_FormatNumber_System_Object_System_Int32_Microsoft_VisualBasic_TriState_Microsoft_VisualBasic_TriState_Microsoft_VisualBasic_TriState_\" data-linktype=\"self-bookmark\">FormatNumber(Object,Int32,TriState,TriState,TriState)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an expression formatted as a number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_FormatPercent_System_Object_System_Int32_Microsoft_VisualBasic_TriState_Microsoft_VisualBasic_TriState_Microsoft_VisualBasic_TriState_\" data-linktype=\"self-bookmark\">FormatPercent(Object,Int32,TriState,TriState,TriState)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an expression formatted as a percentage (that is, multiplied by 100) with a trailing % character.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_GetChar_System_String_System_Int32_\" data-linktype=\"self-bookmark\">GetChar(String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <code>Char</code> value representing the character from the specified index in the supplied string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_InStr_System_String_System_String_Microsoft_VisualBasic_CompareMethod_\" data-linktype=\"self-bookmark\">InStr(String,String,CompareMethod)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an integer specifying the start position of the first occurrence of one string within another.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_InStr_System_Int32_System_String_System_String_Microsoft_VisualBasic_CompareMethod_\" data-linktype=\"self-bookmark\">InStr(Int32,String,String,CompareMethod)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an integer specifying the start position of the first occurrence of one string within another.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_InStrRev_System_String_System_String_System_Int32_Microsoft_VisualBasic_CompareMethod_\" data-linktype=\"self-bookmark\">InStrRev(String,String,Int32,CompareMethod)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the position of the first occurrence of one string within another, starting from the right side of the string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_Join_System_Object___System_String_\" data-linktype=\"self-bookmark\">Join(Object[],String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string created by joining a number of substrings contained in an array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_Join_System_String___System_String_\" data-linktype=\"self-bookmark\">Join(String[],String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string created by joining a number of substrings contained in an array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_LCase_System_Char_\" data-linktype=\"self-bookmark\">LCase(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string or character converted to lowercase.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_LCase_System_String_\" data-linktype=\"self-bookmark\">LCase(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string or character converted to lowercase.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_Left_System_String_System_Int32_\" data-linktype=\"self-bookmark\">Left(String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string containing a specified number of characters from the left side of a string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_Len_System_Boolean_\" data-linktype=\"self-bookmark\">Len(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_Len_System_Byte_\" data-linktype=\"self-bookmark\">Len(Byte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_Len_System_Char_\" data-linktype=\"self-bookmark\">Len(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_Len_System_DateTime_\" data-linktype=\"self-bookmark\">Len(DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_Len_System_Decimal_\" data-linktype=\"self-bookmark\">Len(Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_Len_System_Double_\" data-linktype=\"self-bookmark\">Len(Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_Len_System_Int16_\" data-linktype=\"self-bookmark\">Len(Int16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_Len_System_Int32_\" data-linktype=\"self-bookmark\">Len(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_Len_System_Int64_\" data-linktype=\"self-bookmark\">Len(Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_Len_System_Object_\" data-linktype=\"self-bookmark\">Len(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_Len_System_SByte_\" data-linktype=\"self-bookmark\">Len(SByte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_Len_System_Single_\" data-linktype=\"self-bookmark\">Len(Single)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_Len_System_String_\" data-linktype=\"self-bookmark\">Len(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_Len_System_UInt16_\" data-linktype=\"self-bookmark\">Len(UInt16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_Len_System_UInt32_\" data-linktype=\"self-bookmark\">Len(UInt32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_Len_System_UInt64_\" data-linktype=\"self-bookmark\">Len(UInt64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_LSet_System_String_System_Int32_\" data-linktype=\"self-bookmark\">LSet(String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a left-aligned string containing the specified string adjusted to the specified length.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_LTrim_System_String_\" data-linktype=\"self-bookmark\">LTrim(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string containing a copy of a specified string with no leading spaces (<code>LTrim</code>), no trailing spaces (<code>RTrim</code>), or no leading or trailing spaces (<code>Trim</code>).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_Mid_System_String_System_Int32_\" data-linktype=\"self-bookmark\">Mid(String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string that contains all the characters starting from a specified position in a string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_Mid_System_String_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Mid(String,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string that contains a specified number of characters starting from a specified position in a string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_Replace_System_String_System_String_System_String_System_Int32_System_Int32_Microsoft_VisualBasic_CompareMethod_\" data-linktype=\"self-bookmark\">Replace(String,String,String,Int32,Int32,CompareMethod)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string in which a specified substring has been replaced with another substring a specified number of times.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_Right_System_String_System_Int32_\" data-linktype=\"self-bookmark\">Right(String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string containing a specified number of characters from the right side of a string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_RSet_System_String_System_Int32_\" data-linktype=\"self-bookmark\">RSet(String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a right-aligned string containing the specified string adjusted to the specified length.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_RTrim_System_String_\" data-linktype=\"self-bookmark\">RTrim(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string containing a copy of a specified string with no leading spaces (<code>LTrim</code>), no trailing spaces (<code>RTrim</code>), or no leading or trailing spaces (<code>Trim</code>).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_Space_System_Int32_\" data-linktype=\"self-bookmark\">Space(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string consisting of the specified number of spaces.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_Split_System_String_System_String_System_Int32_Microsoft_VisualBasic_CompareMethod_\" data-linktype=\"self-bookmark\">Split(String,String,Int32,CompareMethod)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a zero-based, one-dimensional array containing a specified number of substrings.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_StrComp_System_String_System_String_Microsoft_VisualBasic_CompareMethod_\" data-linktype=\"self-bookmark\">StrComp(String,String,CompareMethod)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns -1, 0, or 1, based on the result of a string comparison.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_StrConv_System_String_Microsoft_VisualBasic_VbStrConv_System_Int32_\" data-linktype=\"self-bookmark\">StrConv(String,VbStrConv,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string converted as specified.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_StrDup_System_Int32_System_Char_\" data-linktype=\"self-bookmark\">StrDup(Int32,Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string or object consisting of the specified character repeated the specified number of times.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_StrDup_System_Int32_System_Object_\" data-linktype=\"self-bookmark\">StrDup(Int32,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string or object consisting of the specified character repeated the specified number of times.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_StrDup_System_Int32_System_String_\" data-linktype=\"self-bookmark\">StrDup(Int32,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string or object consisting of the specified character repeated the specified number of times.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_StrReverse_System_String_\" data-linktype=\"self-bookmark\">StrReverse(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string in which the character order of a specified string is reversed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_Trim_System_String_\" data-linktype=\"self-bookmark\">Trim(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string containing a copy of a specified string with no leading spaces (<code>LTrim</code>), no trailing spaces (<code>RTrim</code>), or no leading or trailing spaces (<code>Trim</code>).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_UCase_System_Char_\" data-linktype=\"self-bookmark\">UCase(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string or character containing the specified string converted to uppercase.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Strings_UCase_System_String_\" data-linktype=\"self-bookmark\">UCase(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string or character containing the specified string converted to uppercase.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_Asc_System_Char_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_Asc_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Asc(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an <code>Integer</code> value representing the character code corresponding to a character.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Asc (char String);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>String</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. Any valid <code>Char</code> or <code>String</code> expression. If <code>String</code> is a <code>String</code> expression, only the first character of the string is used for input. If <code>String</code> is <code>Nothing</code> or contains no characters, an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a> error occurs.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>Returns an <code>Integer</code> value representing the character code corresponding to a character.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>Asc</code> returns the <em>code point</em>, or character code, for the input character. This can be 0 through 255 for single-byte character set (SBCS) values and -32768 through 32767 for double-byte character set (DBCS) values.  </p>\n<p> <code>AscW</code> returns the Unicode code point for the input character. This can be 0 through 65535. The returned value is independent of the culture and code page settings for the current thread.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>AscB</code> function of earlier versions of Visual Basic returns a code for a byte, rather than a character. It is used primarily for converting strings in double-byte character set (DBCS) applications. All Visual Basic 2005 strings are in Unicode, and <code>AscB</code> is no longer supported.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <code>Asc</code> function to return <code>Integer</code> character codes corresponding to the first letter in each string.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrFunctions#19\">        Dim codeInt As Integer\n        &#39; The following line of code sets codeInt to 65.\n        codeInt = Asc(&quot;A&quot;)\n        &#39; The following line of code sets codeInt to 97.\n        codeInt = Asc(&quot;a&quot;)\n        &#39; The following line of code sets codeInt to 65.\n        codeInt = Asc(&quot;Apple&quot;)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_Asc_System_String_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_Asc_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Asc(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an <code>Integer</code> value representing the character code corresponding to a character.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Asc (string String);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>String</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. Any valid <code>Char</code> or <code>String</code> expression. If <code>String</code> is a <code>String</code> expression, only the first character of the string is used for input. If <code>String</code> is <code>Nothing</code> or contains no characters, an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a> error occurs.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>Returns an <code>Integer</code> value representing the character code corresponding to a character.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>Asc</code> returns the <em>code point</em>, or character code, for the input character. This can be 0 through 255 for single-byte character set (SBCS) values and -32768 through 32767 for double-byte character set (DBCS) values.  </p>\n<p> <code>AscW</code> returns the Unicode code point for the input character. This can be 0 through 65535. The returned value is independent of the culture and code page settings for the current thread.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>AscB</code> function of earlier versions of Visual Basic returns a code for a byte, rather than a character. It is used primarily for converting strings in double-byte character set (DBCS) applications. All Visual Basic 2005 strings are in Unicode, and <code>AscB</code> is no longer supported.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <code>Asc</code> function to return <code>Integer</code> character codes corresponding to the first letter in each string.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrFunctions#19\">        Dim codeInt As Integer\n        &#39; The following line of code sets codeInt to 65.\n        codeInt = Asc(&quot;A&quot;)\n        &#39; The following line of code sets codeInt to 97.\n        codeInt = Asc(&quot;a&quot;)\n        &#39; The following line of code sets codeInt to 65.\n        codeInt = Asc(&quot;Apple&quot;)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_AscW_System_Char_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_AscW_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AscW(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an <code>Integer</code> value representing the character code corresponding to a character.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int AscW (char String);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>String</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. Any valid <code>Char</code> or <code>String</code> expression. If <code>String</code> is a <code>String</code> expression, only the first character of the string is used for input. If <code>String</code> is <code>Nothing</code> or contains no characters, an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a> error occurs.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>Returns an <code>Integer</code> value representing the character code corresponding to a character.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>Asc</code> returns the <em>code point</em>, or character code, for the input character. This can be 0 through 255 for single-byte character set (SBCS) values and -32768 through 32767 for double-byte character set (DBCS) values.  </p>\n<p> <code>AscW</code> returns the Unicode code point for the input character. This can be 0 through 65535. The returned value is independent of the culture and code page settings for the current thread.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>AscB</code> function of earlier versions of Visual Basic returns a code for a byte, rather than a character. It is used primarily for converting strings in double-byte character set (DBCS) applications. All Visual Basic 2005 strings are in Unicode, and <code>AscB</code> is no longer supported.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <code>Asc</code> function to return <code>Integer</code> character codes corresponding to the first letter in each string.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrFunctions#19\">        Dim codeInt As Integer\n        &#39; The following line of code sets codeInt to 65.\n        codeInt = Asc(&quot;A&quot;)\n        &#39; The following line of code sets codeInt to 97.\n        codeInt = Asc(&quot;a&quot;)\n        &#39; The following line of code sets codeInt to 65.\n        codeInt = Asc(&quot;Apple&quot;)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_AscW_System_String_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_AscW_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AscW(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an <code>Integer</code> value representing the character code corresponding to a character.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int AscW (string String);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>String</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. Any valid <code>Char</code> or <code>String</code> expression. If <code>String</code> is a <code>String</code> expression, only the first character of the string is used for input. If <code>String</code> is <code>Nothing</code> or contains no characters, an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a> error occurs.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>Returns an <code>Integer</code> value representing the character code corresponding to a character.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>Asc</code> returns the <em>code point</em>, or character code, for the input character. This can be 0 through 255 for single-byte character set (SBCS) values and -32768 through 32767 for double-byte character set (DBCS) values.  </p>\n<p> <code>AscW</code> returns the Unicode code point for the input character. This can be 0 through 65535. The returned value is independent of the culture and code page settings for the current thread.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>AscB</code> function of earlier versions of Visual Basic returns a code for a byte, rather than a character. It is used primarily for converting strings in double-byte character set (DBCS) applications. All Visual Basic 2005 strings are in Unicode, and <code>AscB</code> is no longer supported.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <code>Asc</code> function to return <code>Integer</code> character codes corresponding to the first letter in each string.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrFunctions#19\">        Dim codeInt As Integer\n        &#39; The following line of code sets codeInt to 65.\n        codeInt = Asc(&quot;A&quot;)\n        &#39; The following line of code sets codeInt to 97.\n        codeInt = Asc(&quot;a&quot;)\n        &#39; The following line of code sets codeInt to 65.\n        codeInt = Asc(&quot;Apple&quot;)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_Chr_System_Int32_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_Chr_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Chr(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the character associated with the specified character code.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static char Chr (int CharCode);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>CharCode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. An <code>Integer</code> expression representing the <code>code point</code>, or character code, for the character.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p>Returns the character associated with the specified character code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>CharCode</code> &lt; 0 or &gt; 255 for <code>Chr</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The asymmetric range accepted for <code>CharCode</code> compensates for the storage differences between the <code>Short</code> and the <code>Integer</code>. For example, -29183 is a <code>Short</code> but +36353 is an <code>Integer</code>. This also facilitates compatibility with Visual Basic 6.0.  </p>\n<p> <code>Chr</code> uses the <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> class in the <a class=\"xref\" href=\"system.text\" data-linktype=\"relative-path\">System.Text</a> namespace to determine if the current thread is using a single-byte character set (SBCS) or a double-byte character set (DBCS). It then takes <code>CharCode</code> as a code point in the appropriate set. The range can be 0 through 255 for SBCS characters and -32768 through 65535 for DBCS characters.  </p>\n<p> The returned value depends on the code page for the current thread, which is contained in the <a class=\"xref\" href=\"system.globalization.textinfo#System_Globalization_TextInfo_ANSICodePage_\" data-linktype=\"relative-path\">ANSICodePage</a> property of the <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a> class in the <a class=\"xref\" href=\"system.globalization\" data-linktype=\"relative-path\">System.Globalization</a> namespace. You can obtain <a class=\"xref\" href=\"system.globalization.textinfo#System_Globalization_TextInfo_ANSICodePage_\" data-linktype=\"relative-path\">ANSICodePage</a> by specifying <code>System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage</code>.  </p>\n<p> <code>ChrW</code> takes <code>CharCode</code> as a Unicode code point. The range is independent of the culture and code page settings for the current thread. Values from -32768 through -1 are treated the same as values in the range +32768 through +65535.  </p>\n<p> Numbers from 0 through 31 are the same as standard nonprintable ASCII codes. For example, <code>Chr(10)</code> returns a line feed character.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>ChrB</code> function in earlier versions of Visual Basic returns a single byte. It is used primarily for converting strings in double-byte character set (DBCS) applications. All strings in Visual Basic and the .NET Framework are in Unicode, and <code>ChrB</code> is no longer supported.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <code>Chr</code> function to return the character associated with the specified character code.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#7\">        Dim associatedChar As Char\n        &#39; Returns &quot;A&quot;.\n        associatedChar = Chr(65)\n        &#39; Returns &quot;a&quot;.\n        associatedChar = Chr(97)\n        &#39; Returns &quot;&gt;&quot;.\n        associatedChar = Chr(62)\n        &#39; Returns &quot;%&quot;.\n        associatedChar = Chr(37)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_ChrW_System_Int32_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_ChrW_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ChrW(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the character associated with the specified character code.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static char ChrW (int CharCode);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>CharCode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. An <code>Integer</code> expression representing the <code>code point</code>, or character code, for the character.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p>Returns the character associated with the specified character code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>CharCode</code> &lt; -32768 or &gt; 65535 for <code>ChrW</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The asymmetric range accepted for <code>CharCode</code> compensates for the storage differences between the <code>Short</code> and the <code>Integer</code>. For example, -29183 is a <code>Short</code> but +36353 is an <code>Integer</code>. This also facilitates compatibility with Visual Basic 6.0.  </p>\n<p> <code>Chr</code> uses the <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> class in the <a class=\"xref\" href=\"system.text\" data-linktype=\"relative-path\">System.Text</a> namespace to determine if the current thread is using a single-byte character set (SBCS) or a double-byte character set (DBCS). It then takes <code>CharCode</code> as a code point in the appropriate set. The range can be 0 through 255 for SBCS characters and -32768 through 65535 for DBCS characters.  </p>\n<p> The returned value depends on the code page for the current thread, which is contained in the <a class=\"xref\" href=\"system.globalization.textinfo#System_Globalization_TextInfo_ANSICodePage_\" data-linktype=\"relative-path\">ANSICodePage</a> property of the <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a> class in the <a class=\"xref\" href=\"system.globalization\" data-linktype=\"relative-path\">System.Globalization</a> namespace. You can obtain <a class=\"xref\" href=\"system.globalization.textinfo#System_Globalization_TextInfo_ANSICodePage_\" data-linktype=\"relative-path\">ANSICodePage</a> by specifying <code>System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage</code>.  </p>\n<p> <code>ChrW</code> takes <code>CharCode</code> as a Unicode code point. The range is independent of the culture and code page settings for the current thread. Values from -32768 through -1 are treated the same as values in the range +32768 through +65535.  </p>\n<p> Numbers from 0 through 31 are the same as standard nonprintable ASCII codes. For example, <code>Chr(10)</code> returns a line feed character.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>ChrB</code> function in earlier versions of Visual Basic returns a single byte. It is used primarily for converting strings in double-byte character set (DBCS) applications. All strings in Visual Basic and the .NET Framework are in Unicode, and <code>ChrB</code> is no longer supported.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <code>Chr</code> function to return the character associated with the specified character code.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#7\">        Dim associatedChar As Char\n        &#39; Returns &quot;A&quot;.\n        associatedChar = Chr(65)\n        &#39; Returns &quot;a&quot;.\n        associatedChar = Chr(97)\n        &#39; Returns &quot;&gt;&quot;.\n        associatedChar = Chr(62)\n        &#39; Returns &quot;%&quot;.\n        associatedChar = Chr(37)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_Filter_System_Object___System_String_System_Boolean_Microsoft_VisualBasic_CompareMethod_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_Filter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Filter(Object[],String,Boolean,CompareMethod)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a zero-based array containing a subset of a <code>String</code> array based on specified filter criteria.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string[] Filter (object[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. One-dimensional array of strings to be searched.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>Match</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. String to search for.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>Include</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Optional. <code>Boolean</code> value indicating whether to return substrings that include or exclude <code>Match</code>. If <code>Include</code> is <code>True</code>, the <code>Filter</code> function returns the subset of the array that contains <code>Match</code> as a substring. If <code>Include</code> is <code>False</code>, the <code>Filter</code> function returns the subset of the array that does not contain <code>Match</code> as a substring.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>Compare</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.visualbasic.comparemethod\" data-linktype=\"relative-path\">CompareMethod</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Optional. Numeric value indicating the kind of string comparison to use. See &quot;Settings&quot; for values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>Returns a zero-based array containing a subset of a <code>String</code> array based on specified filter criteria.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>Source</code> is <code>Nothing</code> or is not a one-dimensional array.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If no matches of <code>Match</code> are found within <code>Source</code>, the <code>Filter</code> function returns an empty array. An error occurs if <code>Source</code> is set to <code>Nothing</code> or is not a one-dimensional array.  </p>\n<p> The array returned by the <code>Filter</code> function contains only enough elements to contain the number of matched items.  </p>\n<p> The <code>Compare</code> argument can have the following values.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Constant</td>\n<td>Description</td>\n</tr>\n<tr>\n<td><code>CompareMethod.Binary</code></td>\n<td>Performs a binary comparison</td>\n</tr>\n<tr>\n<td><code>CompareMethod.Text</code></td>\n<td>Performs a textual comparison</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example demonstrates the use of the <code>Filter</code> function.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#24\">        Dim TestStrings(2) As String\n        TestStrings(0) = &quot;This&quot;\n        TestStrings(1) = &quot;Is&quot;\n        TestStrings(2) = &quot;It&quot;\n        Dim subStrings() As String\n        &#39; Returns [&quot;This&quot;, &quot;Is&quot;].\n        subStrings = Filter(TestStrings, &quot;is&quot;, True, CompareMethod.Text)\n        &#39; Returns [&quot;This&quot;].\n        subStrings = Filter(TestStrings, &quot;is&quot;, True, CompareMethod.Binary)\n        &#39; Returns [&quot;Is&quot;, &quot;It&quot;].\n        subStrings = Filter(TestStrings, &quot;is&quot;, False, CompareMethod.Binary)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_Filter_System_String___System_String_System_Boolean_Microsoft_VisualBasic_CompareMethod_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_Filter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Filter(String[],String,Boolean,CompareMethod)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a zero-based array containing a subset of a <code>String</code> array based on specified filter criteria.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string[] Filter (string[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. One-dimensional array of strings to be searched.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>Match</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. String to search for.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>Include</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Optional. <code>Boolean</code> value indicating whether to return substrings that include or exclude <code>Match</code>. If <code>Include</code> is <code>True</code>, the <code>Filter</code> function returns the subset of the array that contains <code>Match</code> as a substring. If <code>Include</code> is <code>False</code>, the <code>Filter</code> function returns the subset of the array that does not contain <code>Match</code> as a substring.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>Compare</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.visualbasic.comparemethod\" data-linktype=\"relative-path\">CompareMethod</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Optional. Numeric value indicating the kind of string comparison to use. See &quot;Settings&quot; for values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>Returns a zero-based array containing a subset of a <code>String</code> array based on specified filter criteria.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>Source</code> is <code>Nothing</code> or is not a one-dimensional array.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If no matches of <code>Match</code> are found within <code>Source</code>, the <code>Filter</code> function returns an empty array. An error occurs if <code>Source</code> is set to <code>Nothing</code> or is not a one-dimensional array.  </p>\n<p> The array returned by the <code>Filter</code> function contains only enough elements to contain the number of matched items.  </p>\n<p> The <code>Compare</code> argument can have the following values.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Constant</td>\n<td>Description</td>\n</tr>\n<tr>\n<td><code>CompareMethod.Binary</code></td>\n<td>Performs a binary comparison</td>\n</tr>\n<tr>\n<td><code>CompareMethod.Text</code></td>\n<td>Performs a textual comparison</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example demonstrates the use of the <code>Filter</code> function.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#24\">        Dim TestStrings(2) As String\n        TestStrings(0) = &quot;This&quot;\n        TestStrings(1) = &quot;Is&quot;\n        TestStrings(2) = &quot;It&quot;\n        Dim subStrings() As String\n        &#39; Returns [&quot;This&quot;, &quot;Is&quot;].\n        subStrings = Filter(TestStrings, &quot;is&quot;, True, CompareMethod.Text)\n        &#39; Returns [&quot;This&quot;].\n        subStrings = Filter(TestStrings, &quot;is&quot;, True, CompareMethod.Binary)\n        &#39; Returns [&quot;Is&quot;, &quot;It&quot;].\n        subStrings = Filter(TestStrings, &quot;is&quot;, False, CompareMethod.Binary)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_Format_System_Object_System_String_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_Format_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Format(Object,String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string formatted according to instructions contained in a format <code>String</code> expression.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Format (object Expression, string Style = &quot;&quot;);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. Any valid expression.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>Style</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Optional. A valid named or user-defined format <code>String</code> expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Returns a string formatted according to instructions contained in a format <code>String</code> expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.string#System_String_Format_\" data-linktype=\"relative-path\">Format</a> method also provides similar functionality.  </p>\n<p> If you are formatting a nonlocalized numeric string, you should use a user-defined numeric format to ensure that you get the look you want.  </p>\n<p> If you try to format a number without specifying <code>Style</code>, the <code>Format</code> function provides functionality similar to the <code>Str</code> function, although it is internationally aware. However, positive numbers formatted as strings using the <code>Format</code> function don&#39;t include a leading space reserved for the sign of the value; those converted using the <code>Str</code> function retain the leading space.  </p>\n<h2 id=\"different-formats-for-different-numeric-values\">Different Formats for Different Numeric Values</h2>\n<p> A user-defined format expression for numbers can have from one to three sections separated by semicolons. If the <code>Style</code> argument of the <code>Format</code> function contains one of the predefined numeric formats, only one section is allowed.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>If you use</td>\n<td>This is the result</td>\n</tr>\n<tr>\n<td>One section only</td>\n<td>The format expression applies to all values.</td>\n</tr>\n<tr>\n<td>Two sections</td>\n<td>The first section applies to positive values and zeros; the second applies to negative values.</td>\n</tr>\n<tr>\n<td>Three sections</td>\n<td>The first section applies to positive values, the second applies to negative values, and the third applies to zeros.</td>\n</tr>\n</tbody>\n</table>\n<p> The following example has two sections: the first defines the format for positive values and zeros; the second section defines the format for negative values. Since the <code>Style</code> argument of the <code>Format</code> function takes a string, it is enclosed by quotation marks.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#18\">        Dim Style1 As String = &quot;$#,##0;($#,##0)&quot;\n</code></pre><p> If you include semicolons with nothing between them, the missing section is printed using the format of the positive value. For example, the following format displays positive and negative values using the format in the first section and displays <code>Zero</code> if the value is zero.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#19\">        Dim Style2 As String = &quot;$#,##0;;\\Z\\e\\r\\o&quot;\n</code></pre><h2 id=\"predefined-numeric-formats\">Predefined Numeric Formats</h2>\n<p> The following table identifies the predefined numeric format names. These may be used by name as the <code>Style</code> argument for the <code>Format</code> function:  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Format name</td>\n<td>Description</td>\n</tr>\n<tr>\n<td><code>General Number</code>, <code>G</code>, or <code>g</code></td>\n<td>Displays number with no thousand separator.<br><br> For example, <code>Format(&amp;H3FA, &quot;g&quot;)</code> returns <code>1018</code>.</td>\n</tr>\n<tr>\n<td><code>Currency</code>, <code>C</code>, or <code>c</code></td>\n<td>Displays number with thousand separator, if appropriate; displays two digits to the right of the decimal separator. Output is based on system locale settings.<br><br> For example, <code>Format(1234567, &quot;c&quot;)</code> returns <code>$1,234,567.00</code>.</td>\n</tr>\n<tr>\n<td><code>Fixed</code>, <code>F</code>, or <code>f</code></td>\n<td>Displays at least one digit to the left and two digits to the right of the decimal separator.<br><br> For example, <code>Format(1234567, &quot;f&quot;)</code> returns <code>1234567.00</code>.</td>\n</tr>\n<tr>\n<td><code>Standard</code>, <code>N</code>, or <code>n</code></td>\n<td>Displays number with thousand separator, at least one digit to the left and two digits to the right of the decimal separator.<br><br> For example, <code>Format(1234567, &quot;n&quot;)</code> returns <code>1,234,567.00</code>.</td>\n</tr>\n<tr>\n<td><code>Percent</code></td>\n<td>Displays number multiplied by 100 with a percent sign (%) appended immediately to the right; always displays two digits to the right of the decimal separator.<br><br> For example, <code>Format(0.4744, &quot;Percent&quot;)</code> returns <code>47.44%</code>.</td>\n</tr>\n<tr>\n<td><code>P</code>, or <code>p</code></td>\n<td>Displays number with thousandths separator multiplied by 100 with a percent sign (%) appended to the right and separated by a single space; always displays two digits to the right of the decimal separator.<br><br> For example, <code>Format(0.80345, &quot;p&quot;)</code> returns <code>80.35 %</code>.</td>\n</tr>\n<tr>\n<td><code>Scientific</code></td>\n<td>Uses standard scientific notation, providing two significant digits.<br><br> For example, <code>Format(1234567, &quot;Scientific&quot;)</code> returns <code>1.23E+06</code>.</td>\n</tr>\n<tr>\n<td><code>E</code>, or <code>e</code></td>\n<td>Uses standard scientific notation, providing six significant digits.<br><br> For example, <code>Format(1234567, &quot;e&quot;)</code> returns <code>1.234567e+006</code>.</td>\n</tr>\n<tr>\n<td><code>D</code>, or <code>d</code></td>\n<td>Displays number as a string that contains the value of the number in Decimal (base 10) format. This option is supported for integral types (<code>Byte</code>, <code>Short</code>, <code>Integer</code>, <code>Long</code>) only.<br><br> For example, <code>Format(&amp;H7F, &quot;d&quot;)</code> returns <code>127</code>.</td>\n</tr>\n<tr>\n<td><code>X</code>, or <code>x</code></td>\n<td>Displays number as a string that contains the value of the number in Hexadecimal (base 16) format. This option is supported for integral types (<code>Byte</code>, <code>Short</code>, <code>Integer</code>, <code>Long</code>) only.<br><br> For example, <code>Format(127, &quot;x&quot;)</code> returns <code>7f</code>.</td>\n</tr>\n<tr>\n<td><code>Yes/No</code></td>\n<td>Displays <code>No</code> if number is 0; otherwise, displays <code>Yes</code>.<br><br> For example, <code>Format(0, &quot;Yes/No&quot;)</code> returns <code>No</code>.</td>\n</tr>\n<tr>\n<td><code>True/False</code></td>\n<td>Displays <code>False</code> if number is 0; otherwise, displays <code>True</code>.<br><br> For example, <code>Format(1, &quot;True/False&quot;)</code> returns <code>True</code>.</td>\n</tr>\n<tr>\n<td><code>On/Off</code></td>\n<td>Displays <code>Off</code> if number is 0; otherwise, displays <code>On</code>.<br><br> For example, <code>Format(1, &quot;On/Off&quot;)</code> returns <code>On</code>.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"smart-device-developer-notes\">Smart Device Developer Notes</h3>\n<p> The <code>Yes/No</code>, <code>True/False</code>, and <code>On/Off</code> formats are not supported.  </p>\n<h2 id=\"user-defined-numeric-formats\">User-Defined Numeric Formats</h2>\n<p> The following table identifies characters you can use to create user-defined number formats. These may be used to build the <code>Style</code> argument for the <code>Format</code> function:  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Character</td>\n<td>Description</td>\n</tr>\n<tr>\n<td>None</td>\n<td>Displays the number with no formatting.</td>\n</tr>\n<tr>\n<td>(<code>0</code>)</td>\n<td>Digit placeholder. Displays a digit or a zero. If the expression has a digit in the position where the zero appears in the format string, display it; otherwise, displays a zero in that position.<br><br> If the number has fewer digits than there are zeros (on either side of the decimal) in the format expression, displays leading or trailing zeros. If the number has more digits to the right of the decimal separator than there are zeros to the right of the decimal separator in the format expression, rounds the number to as many decimal places as there are zeros. If the number has more digits to the left of the decimal separator than there are zeros to the left of the decimal separator in the format expression, displays the extra digits without modification.</td>\n</tr>\n<tr>\n<td>(<code>#</code>)</td>\n<td>Digit placeholder. Displays a digit or nothing. If the expression has a digit in the position where the <code>#</code> character appears in the format string, displays it; otherwise, displays nothing in that position.<br><br> This symbol works like the <code>0</code> digit placeholder, except that leading and trailing zeros aren&#39;t displayed if the number has fewer digits than there are <code>#</code> characters on either side of the decimal separator in the format expression.</td>\n</tr>\n<tr>\n<td>(<code>.</code>)</td>\n<td>Decimal placeholder. The decimal placeholder determines how many digits are displayed to the left and right of the decimal separator. If the format expression contains only <code>#</code> characters to the left of this symbol; numbers smaller than 1 begin with a decimal separator. To display a leading zero displayed with fractional numbers, use zero as the first digit placeholder to the left of the decimal separator. In some locales, a comma is used as the decimal separator. The actual character used as a decimal placeholder in the formatted output depends on the number format recognized by your system. Thus, you should use the period as the decimal placeholder in your formats even if you are in a locale that uses a comma as a decimal placeholder. The formatted string will appear in the format correct for the locale.</td>\n</tr>\n<tr>\n<td>(<code>%</code>)</td>\n<td>Percent placeholder. Multiplies the expression by 100. The percent character (<code>%</code>) is inserted in the position where it appears in the format string.</td>\n</tr>\n<tr>\n<td>(<code>,</code>)</td>\n<td>Thousand separator. The thousand separator separates thousands from hundreds within a number that has four or more places to the left of the decimal separator. Standard use of the thousand separator is specified if the format contains a thousand separator surrounded by digit placeholders (<code>0</code> or <code>#</code>).<br><br> A thousand separator immediately to the left of the decimal separator (whether or not a decimal is specified) or as the rightmost character in the string means &quot;scale the number by dividing it by 1,000, rounding as needed.&quot; Numbers smaller than 1,000 but greater or equal to 500 are displayed as <code>1</code>, and numbers smaller than 500 are displayed as <code>0</code>. Two adjacent thousand separators in this position scale by a factor of 1 million, and an additional factor of 1,000 for each additional separator.<br><br> Multiple separators in any position other than immediately to the left of the decimal separator or the rightmost position in the string are treated simply as specifying the use of a thousand separator. In some locales, a period is used as a thousand separator. The actual character used as the thousand separator in the formatted output depends on the Number Format recognized by your system. Thus, you should use the comma as the thousand separator in your formats even if you are in a locale that uses a period as a thousand separator. The formatted string will appear in the format correct for the locale.<br><br> For example, consider the three following format strings:<br><br> -   <code>&quot;#,0.&quot;</code>, which uses the thousands separator to format the number 100 million as the string &quot;100,000,000&quot;.<br>-   <code>&quot;#0,.&quot;</code>, which uses scaling by a factor of one thousand to format the number 100 million as the string &quot;100000&quot;.<br>-   <code>&quot;#,0,.&quot;</code>, which uses the thousands separator and scaling by one thousand to format the number 100 million as the string &quot;100,000&quot;.</td>\n</tr>\n<tr>\n<td>(<code>:</code>)</td>\n<td>Time separator. In some locales, other characters may be used to represent the time separator. The time separator separates hours, minutes, and seconds when time values are formatted. The actual character used as the time separator in formatted output is determined by your system settings.</td>\n</tr>\n<tr>\n<td>(<code>/</code>)</td>\n<td>Date separator. In some locales, other characters may be used to represent the date separator. The date separator separates the day, month, and year when date values are formatted. The actual character used as the date separator in formatted output is determined by your system settings.</td>\n</tr>\n<tr>\n<td>(<code>E-``E+``e-``e+</code>)</td>\n<td>Scientific format. If the format expression contains at least one digit placeholder (<code>0</code> or <code>#</code>) to the left of <code>E-</code>, <code>E+</code>, <code>e-</code>, or <code>e+</code>, the number is displayed in scientific format and <code>E</code> or <code>e</code> is inserted between the number and its exponent. The number of digit placeholders to the left determines the number of digits in the exponent. Use <code>E-</code> or <code>e-</code> to place a minus sign next to negative exponents. Use <code>E+</code> or <code>e+</code> to place a minus sign next to negative exponents and a plus sign next to positive exponents. You must also include digit placeholders to the right of this symbol to get correct formatting.</td>\n</tr>\n<tr>\n<td><code>-</code> <code>+</code> <code>$</code> ( )</td>\n<td>Literal characters. These characters are displayed exactly as typed in the format string. To display a character other than one of those listed, precede it with a backslash (<code>\\</code>) or enclose it in double quotation marks (&quot; &quot;).</td>\n</tr>\n<tr>\n<td>(<code>\\</code>)</td>\n<td>Displays the next character in the format string. To display a character that has special meaning as a literal character, precede it with a backslash (<code>\\</code>). The backslash itself isn&#39;t displayed. Using a backslash is the same as enclosing the next character in double quotation marks. To display a backslash, use two backslashes (<code>\\\\</code>).<br><br> Examples of characters that can&#39;t be displayed as literal characters are the date-formatting and time-formatting characters (<code>a</code>, <code>c</code>, <code>d</code>, <code>h</code>, <code>m</code>, <code>n</code>, <code>p</code>, <code>q</code>, <code>s</code>, <code>t</code>, <code>w</code>, <code>y</code>, <code>/</code>, and <code>:</code>), the numeric-formatting characters (<code>#</code>, <code>0</code>, <code>%</code>, <code>E</code>, <code>e</code>, comma, and period), and the string-formatting characters (<code>@</code>, <code>&amp;</code>, <code>&lt;</code>, <code>&gt;</code>, and <code>!</code>).</td>\n</tr>\n<tr>\n<td>(<code>&quot;``ABC``&quot;</code>)</td>\n<td>Displays the string inside the double quotation marks (&quot; &quot;). To include a string in the style argument from within code, you must use <code>Chr(34)</code> to enclose the text (<code>34</code> is the character code for a quotation mark (&quot;)).</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"legacy-code-example\">Legacy Code Example</h3>\n<p> The following table contains some sample format expressions for numbers. (These examples all assume that your system&#39;s locale setting is English-U.S.) The first column contains the format strings for the <code>Style</code> argument of the <code>Format</code> function; the other columns contain the resulting output if the formatted data has the value given in the column headings.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Format (<code>Style</code>)</td>\n<td>&quot;5&quot; formatted as</td>\n<td>&quot;-5&quot; formatted as</td>\n<td>&quot;0.5&quot; formatted as</td>\n</tr>\n<tr>\n<td><code>Zero-length string (&quot;&quot;)</code></td>\n<td><code>5</code></td>\n<td><code>-5</code></td>\n<td><code>0.5</code></td>\n</tr>\n<tr>\n<td><code>0</code></td>\n<td><code>5</code></td>\n<td><code>-5</code></td>\n<td><code>1</code></td>\n</tr>\n<tr>\n<td><code>0.00</code></td>\n<td><code>5.00</code></td>\n<td><code>-5.00</code></td>\n<td><code>0.50</code></td>\n</tr>\n<tr>\n<td><code>#,##0</code></td>\n<td><code>5</code></td>\n<td><code>-5</code></td>\n<td><code>1</code></td>\n</tr>\n<tr>\n<td><code>$#,##0;($#,##0)</code></td>\n<td><code>$5</code></td>\n<td><code>($5)</code></td>\n<td><code>$1</code></td>\n</tr>\n<tr>\n<td><code>$#,##0.00;($#,##0.00)</code></td>\n<td><code>$5.00</code></td>\n<td><code>($5.00)</code></td>\n<td><code>$0.50</code></td>\n</tr>\n<tr>\n<td><code>0%</code></td>\n<td><code>500%</code></td>\n<td><code>-500%</code></td>\n<td><code>50%</code></td>\n</tr>\n<tr>\n<td><code>0.00%</code></td>\n<td><code>500.00%</code></td>\n<td><code>-500.00%</code></td>\n<td><code>50.00%</code></td>\n</tr>\n<tr>\n<td><code>0.00E+00</code></td>\n<td><code>5.00E+00</code></td>\n<td><code>-5.00E+00</code></td>\n<td><code>5.00E-01</code></td>\n</tr>\n<tr>\n<td><code>0.00E-00</code></td>\n<td><code>5.00E00</code></td>\n<td><code>-5.00E00</code></td>\n<td><code>5.00E-01</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"predefined-datetime-formats\">Predefined Date/Time Formats</h2>\n<p> The following table identifies the predefined date and time format names. These may be used by name as the style argument for the <code>Format</code> function:  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Format Name</td>\n<td>Description</td>\n</tr>\n<tr>\n<td><code>General Date</code>, or <code>G</code></td>\n<td>Displays a date and/or time. For example, <code>3/12/2008 11:07:31 AM</code>. Date display is determined by your application&#39;s current culture value.</td>\n</tr>\n<tr>\n<td><code>Long Date</code>, <code>Medium Date</code>, or <code>D</code></td>\n<td>Displays a date according to your current culture&#39;s long date format. For example, <code>Wednesday, March 12, 2008</code>.</td>\n</tr>\n<tr>\n<td><code>Short Date</code>, or <code>d</code></td>\n<td>Displays a date using your current culture&#39;s short date format. For example, <code>3/12/2008</code>.<br><br> The <code>d</code> character displays the day in a user-defined date format.</td>\n</tr>\n<tr>\n<td><code>Long Time</code>, <code>Medium Time</code>, or <code>T</code></td>\n<td>Displays a time using your current culture&#39;s long time format; typically includes hours, minutes, seconds. For example, <code>11:07:31 AM</code>.</td>\n</tr>\n<tr>\n<td><code>Short Time</code> or <code>t</code></td>\n<td>Displays a time using your current culture&#39;s short time format. For example, <code>11:07 AM</code>.<br><br> The <code>t</code> character displays <code>AM</code> or <code>PM</code> values for locales that use a 12-hour clock in a user-defined time format.</td>\n</tr>\n<tr>\n<td><code>f</code></td>\n<td>Displays the long date and short time according to your current culture&#39;s format. For example, <code>Wednesday, March 12, 2008 11:07 AM</code>.</td>\n</tr>\n<tr>\n<td><code>F</code></td>\n<td>Displays the long date and long time according to your current culture&#39;s format. For example, <code>Wednesday, March 12, 2008 11:07:31 AM</code>.</td>\n</tr>\n<tr>\n<td><code>g</code></td>\n<td>Displays the short date and short time according to your current culture&#39;s format. For example, <code>3/12/2008 11:07 AM</code>.</td>\n</tr>\n<tr>\n<td><code>M</code>, <code>m</code></td>\n<td>Displays the month and the day of a date. For example, <code>March 12</code>.<br><br> The <code>M</code> character displays the month in a user-defined date format. The <code>m</code> character displays the minutes in a user-defined time format.</td>\n</tr>\n<tr>\n<td><code>R</code>, <code>r</code></td>\n<td>Formats the date according to the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_RFC1123Pattern_\" data-linktype=\"relative-path\">RFC1123Pattern</a> property. For example, <code>Wed, 12 Mar 2008 11:07:31 GMT</code>. The formatted date does not adjust the value of the date and time. You must adjust the Date/Time value to GMT before calling the <code>Format</code> function.</td>\n</tr>\n<tr>\n<td><code>s</code></td>\n<td>Formats the date and time as a sortable index. For example, <code>2008-03-12T11:07:31</code>.<br><br> The <code>s</code> character displays the seconds in a user-defined time format.</td>\n</tr>\n<tr>\n<td><code>u</code></td>\n<td>Formats the date and time as a GMT sortable index. For example, <code>2008-03-12 11:07:31Z</code>.</td>\n</tr>\n<tr>\n<td><code>U</code></td>\n<td>Formats the date and time with the long date and long time as GMT. For example, <code>Wednesday, March 12, 2008 6:07:31 PM</code>.</td>\n</tr>\n<tr>\n<td><code>Y</code>, <code>y</code></td>\n<td>Formats the date as the year and month. For example, <code>March, 2008</code>.<br><br> The <code>Y</code> and <code>y</code> characters display the year in a user-defined date format.</td>\n</tr>\n</tbody>\n</table>\n<p> For more information about the application&#39;s current culture information, see <a href=\"../Topic/How%20Culture%20Affects%20Strings%20in%20Visual%20Basic.md\" data-linktype=\"relative-path\">How Culture Affects Strings in Visual Basic</a>.  </p>\n<h2 id=\"user-defined-datetime-formats\">User-Defined Date/Time Formats</h2>\n<p> The following table shows characters you can use to create user-defined date/time formats. Unlike in earlier versions of <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/vbprvb-md.md&quot; -->Visual Basic<!--END INCLUDE -->, these format characters are case-sensitive.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Character</td>\n<td>Description</td>\n</tr>\n<tr>\n<td>(<code>:</code>)</td>\n<td>Time separator. In some locales, other characters may be used to represent the time separator. The time separator separates hours, minutes, and seconds when time values are formatted. The actual character that is used as the time separator in formatted output is determined by your application&#39;s current culture value.</td>\n</tr>\n<tr>\n<td>(<code>/</code>)</td>\n<td>Date separator. In some locales, other characters may be used to represent the date separator. The date separator separates the day, month, and year when date values are formatted. The actual character that is used as the date separator in formatted output is determined by your application&#39;s current culture.</td>\n</tr>\n<tr>\n<td>(<code>%</code>)</td>\n<td>Used to indicate that the following character should be read as a single-letter format without regard to any trailing letters. Also used to indicate that a single-letter format is read as a user-defined format. See what follows for additional details.</td>\n</tr>\n<tr>\n<td><code>d</code></td>\n<td>Displays the day as a number without a leading zero (for example, <code>1</code>). Use <code>%d</code> if this is the only character in your user-defined numeric format.</td>\n</tr>\n<tr>\n<td><code>dd</code></td>\n<td>Displays the day as a number with a leading zero (for example, <code>01</code>).</td>\n</tr>\n<tr>\n<td><code>ddd</code></td>\n<td>Displays the day as an abbreviation (for example, <code>Sun</code>).</td>\n</tr>\n<tr>\n<td><code>dddd</code></td>\n<td>Displays the day as a full name (for example, <code>Sunday</code>).</td>\n</tr>\n<tr>\n<td><code>M</code></td>\n<td>Displays the month as a number without a leading zero (for example, January is represented as <code>1</code>). Use <code>%M</code> if this is the only character in your user-defined numeric format.</td>\n</tr>\n<tr>\n<td><code>MM</code></td>\n<td>Displays the month as a number with a leading zero (for example, <code>01/12/01</code>).</td>\n</tr>\n<tr>\n<td><code>MMM</code></td>\n<td>Displays the month as an abbreviation (for example, <code>Jan</code>).</td>\n</tr>\n<tr>\n<td><code>MMMM</code></td>\n<td>Displays the month as a full month name (for example, <code>January</code>).</td>\n</tr>\n<tr>\n<td><code>gg</code></td>\n<td>Displays the period/era string (for example, <code>A.D.</code>).</td>\n</tr>\n<tr>\n<td><code>h</code></td>\n<td>Displays the hour as a number without leading zeros using the 12-hour clock (for example, <code>1:15:15 PM</code>). Use <code>%h</code> if this is the only character in your user-defined numeric format.</td>\n</tr>\n<tr>\n<td><code>hh</code></td>\n<td>Displays the hour as a number with leading zeros using the 12-hour clock (for example, <code>01:15:15 PM</code>).</td>\n</tr>\n<tr>\n<td><code>H</code></td>\n<td>Displays the hour as a number without leading zeros using the 24-hour clock (for example, <code>1:15:15</code>). Use <code>%H</code> if this is the only character in your user-defined numeric format.</td>\n</tr>\n<tr>\n<td><code>HH</code></td>\n<td>Displays the hour as a number with leading zeros using the 24-hour clock (for example, <code>01:15:15</code>).</td>\n</tr>\n<tr>\n<td><code>m</code></td>\n<td>Displays the minute as a number without leading zeros (for example, <code>12:1:15</code>). Use <code>%m</code> if this is the only character in your user-defined numeric format.</td>\n</tr>\n<tr>\n<td><code>mm</code></td>\n<td>Displays the minute as a number with leading zeros (for example, <code>12:01:15</code>).</td>\n</tr>\n<tr>\n<td><code>s</code></td>\n<td>Displays the second as a number without leading zeros (for example, <code>12:15:5</code>). Use <code>%s</code> if this is the only character in your user-defined numeric format.</td>\n</tr>\n<tr>\n<td><code>ss</code></td>\n<td>Displays the second as a number with leading zeros (for example, <code>12:15:05</code>).</td>\n</tr>\n<tr>\n<td><code>f</code></td>\n<td>Displays fractions of seconds. For example <code>ff</code> displays hundredths of seconds, whereas <code>ffff</code> displays ten-thousandths of seconds. You may use up to seven <code>f</code> symbols in your user-defined format. Use <code>%f</code> if this is the only character in your user-defined numeric format.</td>\n</tr>\n<tr>\n<td><code>t</code></td>\n<td>Uses the 12-hour clock and displays an uppercase <code>A</code> for any hour before noon; displays an uppercase <code>P</code> for any hour between noon and 11:59 P.M. Use <code>%t</code> if this is the only character in your user-defined numeric format.</td>\n</tr>\n<tr>\n<td><code>tt</code></td>\n<td>For locales that use a 12-hour clock, displays an uppercase <code>AM</code> with any hour before noon; displays an uppercase <code>PM</code> with any hour between noon and 11:59 P.M.<br><br> For locales that use a 24-hour clock, displays nothing.</td>\n</tr>\n<tr>\n<td><code>y</code></td>\n<td>Displays the year number (0-9) without leading zeros. Use <code>%y</code> if this is the only character in your user-defined numeric format.</td>\n</tr>\n<tr>\n<td><code>yy</code></td>\n<td>Displays the year in two-digit numeric format with a leading zero, if applicable.</td>\n</tr>\n<tr>\n<td><code>yyy</code></td>\n<td>Displays the year in four-digit numeric format.</td>\n</tr>\n<tr>\n<td><code>yyyy</code></td>\n<td>Displays the year in four-digit numeric format.</td>\n</tr>\n<tr>\n<td><code>z</code></td>\n<td>Displays the timezone offset without a leading zero (for example, <code>-8</code>). Use <code>%z</code> if this is the only character in your user-defined numeric format.</td>\n</tr>\n<tr>\n<td><code>zz</code></td>\n<td>Displays the timezone offset with a leading zero (for example, <code>-08</code>)</td>\n</tr>\n<tr>\n<td><code>zzz</code></td>\n<td>Displays the full timezone offset (for example, <code>-08:00</code>)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"legacy-code-example-1\">Legacy Code Example</h3>\n<p> The following are examples of user-defined date and time formats for <code>December 7, 1958, 8:50 PM, 35 seconds</code>:  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Format</td>\n<td>Displays</td>\n</tr>\n<tr>\n<td><code>M/d/yy</code></td>\n<td><code>12/7/58</code></td>\n</tr>\n<tr>\n<td><code>d-MMM</code></td>\n<td><code>7-Dec</code></td>\n</tr>\n<tr>\n<td><code>d-MMMM-yy</code></td>\n<td><code>7-December-58</code></td>\n</tr>\n<tr>\n<td><code>d MMMM</code></td>\n<td><code>7 December</code></td>\n</tr>\n<tr>\n<td><code>MMMM yy</code></td>\n<td><code>December 58</code></td>\n</tr>\n<tr>\n<td><code>hh:mm tt</code></td>\n<td><code>08:50 PM</code></td>\n</tr>\n<tr>\n<td><code>h:mm:ss t</code></td>\n<td><code>8:50:35 P</code></td>\n</tr>\n<tr>\n<td><code>H:mm</code></td>\n<td><code>20:50</code></td>\n</tr>\n<tr>\n<td><code>H:mm:ss</code></td>\n<td><code>20:50:35</code></td>\n</tr>\n<tr>\n<td><code>M/d/yyyy H:mm</code></td>\n<td><code>12/7/1958 20:50</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"smart-device-developer-notes-1\">Smart Device Developer Notes</h3>\n<p> The minimum time resolution for a device is determined by the manufacturer of the device. If the time resolution for the device is coarse enough, the <code>f</code> format character returns 0 when run on that device.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example shows various uses of the <code>Format</code> function to format values using both <code>String</code> formats and user-defined formats. For the date separator (<code>/</code>), time separator (<code>:</code>), and the AM/PM indicators (<code>t</code> and <code>tt</code>), the actual formatted output displayed by your system depends on the locale settings the code is using. When times and dates are displayed in the development environment, the short time format and short date format of the code locale are used.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For locales that use a 24-hour clock, the AM/PM indicators (<code>t</code> and <code>tt</code>) display nothing.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#27\">        Dim TestDateTime As Date = #1/27/2001 5:04:23 PM#\n        Dim TestStr As String\n        &#39; Returns current system time in the system-defined long time format.\n        TestStr = Format(Now(), &quot;Long Time&quot;)\n        &#39; Returns current system date in the system-defined long date format.\n        TestStr = Format(Now(), &quot;Long Date&quot;)\n        &#39; Also returns current system date in the system-defined long date \n        &#39; format, using the single letter code for the format.\n        TestStr = Format(Now(), &quot;D&quot;)\n\n        &#39; Returns the value of TestDateTime in user-defined date/time formats.\n        &#39; Returns &quot;5:4:23&quot;.\n        TestStr = Format(TestDateTime, &quot;h:m:s&quot;)\n        &#39; Returns &quot;05:04:23 PM&quot;.\n        TestStr = Format(TestDateTime, &quot;hh:mm:ss tt&quot;)\n        &#39; Returns &quot;Saturday, Jan 27 2001&quot;.\n        TestStr = Format(TestDateTime, &quot;dddd, MMM d yyyy&quot;)\n        &#39; Returns &quot;17:04:23&quot;.\n        TestStr = Format(TestDateTime, &quot;HH:mm:ss&quot;)\n        &#39; Returns &quot;23&quot;.\n        TestStr = Format(23)\n\n        &#39; User-defined numeric formats.\n        &#39; Returns &quot;5,459.40&quot;.\n        TestStr = Format(5459.4, &quot;##,##0.00&quot;)\n        &#39; Returns &quot;334.90&quot;.\n        TestStr = Format(334.9, &quot;###0.00&quot;)\n        &#39; Returns &quot;500.00%&quot;.\n        TestStr = Format(5, &quot;0.00%&quot;)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_FormatCurrency_System_Object_System_Int32_Microsoft_VisualBasic_TriState_Microsoft_VisualBasic_TriState_Microsoft_VisualBasic_TriState_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_FormatCurrency_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FormatCurrency(Object,Int32,TriState,TriState,TriState)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an expression formatted as a currency value using the currency symbol defined in the system control panel.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string FormatCurrency (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. Expression to be formatted.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>NumDigitsAfterDecimal</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Optional. Numeric value indicating how many places are displayed to the right of the decimal. Default value is â€“1, which indicates that the computer&#39;s regional settings are used.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>IncludeLeadingDigit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.visualbasic.tristate\" data-linktype=\"relative-path\">TriState</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Optional. <a class=\"xref\" href=\"microsoft.visualbasic.tristate\" data-linktype=\"relative-path\">TriState</a> enumeration that indicates whether or not a leading zero is displayed for fractional values. See &quot;Remarks&quot; for values.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>UseParensForNegativeNumbers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.visualbasic.tristate\" data-linktype=\"relative-path\">TriState</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Optional. <a class=\"xref\" href=\"microsoft.visualbasic.tristate\" data-linktype=\"relative-path\">TriState</a> enumeration that indicates whether or not to place negative values within parentheses. See &quot;Remarks&quot; for values.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>GroupDigits</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.visualbasic.tristate\" data-linktype=\"relative-path\">TriState</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Optional. <a class=\"xref\" href=\"microsoft.visualbasic.tristate\" data-linktype=\"relative-path\">TriState</a> enumeration that indicates whether or not numbers are grouped using the group delimiter specified in the computer&#39;s regional settings. See &quot;Remarks&quot; for values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Returns an expression formatted as a currency value using the currency symbol defined in the system control panel.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Number of digits after decimal point is greater than 99.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>Type is not numeric.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When one or more optional arguments are omitted, the computer&#39;s matching regional-settings values are used instead.  </p>\n<p> The position of the currency symbol relative to the currency value is determined by the system&#39;s regional settings.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> All settings information comes from the locale of the application. By default, that will be the locale set in the control panel. However, it may be changed programmatically by using the .NET Framework, except leading zero, which comes from the <code>Number</code> tab.  </p>\n</div>\n<p> The <code>IncludeLeadingDigit</code>, <code>UseParensForNegativeNumbers</code>, and <code>GroupDigits</code> arguments take the following TriState enumeration values.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Value</td>\n<td>Description</td>\n</tr>\n<tr>\n<td><code>TriState.True</code></td>\n<td>True</td>\n</tr>\n<tr>\n<td><code>TriState.False</code></td>\n<td>False</td>\n</tr>\n<tr>\n<td><code>TriState.UseDefault</code></td>\n<td>The computer&#39;s regional settings</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the use of the <code>FormatCurrency</code> function.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#32\">        Dim TestDebt As Double = -4456.43\n        Dim TestString As String\n        &#39; Returns &quot;($4,456.43)&quot;.\n        TestString = FormatCurrency(TestDebt, , , TriState.True, TriState.True)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_FormatDateTime_System_DateTime_Microsoft_VisualBasic_DateFormat_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_FormatDateTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FormatDateTime(DateTime,DateFormat)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string expression representing a date/time value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string FormatDateTime (DateTime Expression, Microsoft.VisualBasic.DateFormat NamedFormat = Microsoft.VisualBasic.DateFormat.GeneralDate);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. <code>Date</code> expression to be formatted.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>NamedFormat</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.visualbasic.dateformat\" data-linktype=\"relative-path\">DateFormat</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Optional. Numeric value that indicates the date/time format used. If omitted, <code>DateFormat.GeneralDate</code> is used.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Returns a string expression representing a date/time value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>NamedFormat</code> setting is not valid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>Date</code> data type always contains both date and time information. For purposes of type conversion, Visual Basic considers 1/1/1 (January 1 of the year 1) to be a neutral value for the date, and 00:00:00 (midnight) to be a neutral value for the time. If you format a <code>Date</code> value as a date/time string, <code>FormatDateTime</code> does not include neutral values in the resulting string. For example, if you convert #1/1/0001 9:30:00# to a string, the result is &quot;9:30:00 AM&quot;; the date information is suppressed. However, the date information is still present in the original <code>Date</code> value and can be recovered with functions such as <code>DatePart</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If you pass the <code>Expression</code> argument as a <code>String</code> literal, <code>FormatDateTime</code> interprets it according to the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_CurrentCulture_\" data-linktype=\"relative-path\">CurrentCulture</a> setting of your application. However, if you pass it as a <code>Date</code> literal, use the format #mm/dd/yyyy#, because <code>FormatDateTime</code> always interprets a <code>Date</code> literal according to the English (US) culture. This is necessary because, if an application is developed and coded using <code>Date</code> literals from one culture, but is then executed on a platform with a different culture, the <code>Date</code> literals could be parsed incorrectly.  </p>\n</div>\n<p> The <code>NamedFormat</code> argument has the following settings.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Constant</td>\n<td>Description</td>\n</tr>\n<tr>\n<td><code>DateFormat.GeneralDate</code></td>\n<td>Display a date and/or time. Display a date part as a short date. If there is a time part, display it as a long time. If present, both parts display.</td>\n</tr>\n<tr>\n<td><code>DateFormat.LongDate</code></td>\n<td>Display a date using the long date format specified in your computer&#39;s regional settings.</td>\n</tr>\n<tr>\n<td><code>DateFormat.ShortDate</code></td>\n<td>Display a date using the short date format specified in your computer&#39;s regional settings.</td>\n</tr>\n<tr>\n<td><code>DateFormat.LongTime</code></td>\n<td>Display a time using the time format specified in your computer&#39;s regional settings.</td>\n</tr>\n<tr>\n<td><code>DateFormat.ShortTime</code></td>\n<td>Display a time using the 24-hour format (hh:mm).</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example demonstrates the use of the <code>FormatDateTime</code> function.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#3\">        &#39; English (US) format.\n        Dim TestDate As DateTime = #3/12/1999#\n\n        &#39; FormatDateTime returns &quot;Friday, March 12, 1999&quot;.\n        &#39; The time information is neutral (00:00:00) and therefore suppressed.\n        Dim TestString As String = FormatDateTime(TestDate, DateFormat.LongDate)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_FormatNumber_System_Object_System_Int32_Microsoft_VisualBasic_TriState_Microsoft_VisualBasic_TriState_Microsoft_VisualBasic_TriState_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_FormatNumber_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FormatNumber(Object,Int32,TriState,TriState,TriState)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an expression formatted as a number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string FormatNumber (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. Expression to be formatted.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>NumDigitsAfterDecimal</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Optional. Numeric value indicating how many places are displayed to the right of the decimal. The default value is â€“1, which indicates that the computer&#39;s regional settings are used.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>IncludeLeadingDigit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.visualbasic.tristate\" data-linktype=\"relative-path\">TriState</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Optional. <a class=\"xref\" href=\"microsoft.visualbasic.tristate\" data-linktype=\"relative-path\">TriState</a> constant that indicates whether a leading 0 is displayed for fractional values. See &quot;Settings&quot; for values.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>UseParensForNegativeNumbers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.visualbasic.tristate\" data-linktype=\"relative-path\">TriState</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Optional. <a class=\"xref\" href=\"microsoft.visualbasic.tristate\" data-linktype=\"relative-path\">TriState</a> constant that indicates whether to place negative values within parentheses. See &quot;Settings&quot; for values.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>GroupDigits</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.visualbasic.tristate\" data-linktype=\"relative-path\">TriState</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Optional. <a class=\"xref\" href=\"microsoft.visualbasic.tristate\" data-linktype=\"relative-path\">TriState</a> constant that indicates whether or not numbers are grouped using the group delimiter specified in the locale settings. See &quot;Settings&quot; for values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Returns an expression formatted as a number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>Type is not numeric.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When one or more optional arguments are omitted the values for omitted arguments are provided by the locale settings.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> All settings information comes from the locale of the application. By default, that will be the locale set in the control panel. However, it may be changed programmatically by using the .NET Framework.  </p>\n</div>\n<p> The <code>IncludeLeadingDigit</code>, <code>UseParensForNegativeNumbers</code>, and <code>GroupDigits</code> arguments have the following settings.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Constant</td>\n<td>Description</td>\n</tr>\n<tr>\n<td><code>TriState.True</code></td>\n<td>True</td>\n</tr>\n<tr>\n<td><code>TriState.False</code></td>\n<td>False</td>\n</tr>\n<tr>\n<td><code>TriState.UseDefault</code></td>\n<td>The computer&#39;s regional settings</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example demonstrates the <code>FormatNumber</code> function.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#15\">        Dim TestNumber As Integer = 45600\n        &#39; Returns &quot;45,600.00&quot;.\n        Dim TestString As String = FormatNumber(TestNumber, 2, , , TriState.True)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_FormatPercent_System_Object_System_Int32_Microsoft_VisualBasic_TriState_Microsoft_VisualBasic_TriState_Microsoft_VisualBasic_TriState_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_FormatPercent_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FormatPercent(Object,Int32,TriState,TriState,TriState)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an expression formatted as a percentage (that is, multiplied by 100) with a trailing % character.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string FormatPercent (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. Expression to be formatted.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>NumDigitsAfterDecimal</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Optional. Numeric value indicating how many places to the right of the decimal are displayed. Default value is â€“1, which indicates that the locale settings are used.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>IncludeLeadingDigit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.visualbasic.tristate\" data-linktype=\"relative-path\">TriState</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Optional. <a class=\"xref\" href=\"microsoft.visualbasic.tristate\" data-linktype=\"relative-path\">TriState</a> constant that indicates whether or not a leading zero displays for fractional values. See &quot;Settings&quot; for values.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>UseParensForNegativeNumbers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.visualbasic.tristate\" data-linktype=\"relative-path\">TriState</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Optional. <a class=\"xref\" href=\"microsoft.visualbasic.tristate\" data-linktype=\"relative-path\">TriState</a> constant that indicates whether or not to place negative values within parentheses. See &quot;Settings&quot; for values.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>GroupDigits</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.visualbasic.tristate\" data-linktype=\"relative-path\">TriState</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Optional. <a class=\"xref\" href=\"microsoft.visualbasic.tristate\" data-linktype=\"relative-path\">TriState</a> constant that indicates whether or not numbers are grouped using the group delimiter specified in the locale settings. See &quot;Settings&quot; for values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Returns an expression formatted as a percentage (that is, multiplied by 100) with a trailing % character.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>Type is not numeric.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When one or more optional arguments are omitted, the values for omitted arguments are provided by the locale settings.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> All settings information comes from the locale of the application. By default, that will be the locale set in the control panel. However, it may be changed programmatically by using the .NET Framework.  </p>\n</div>\n<p> The <code>IncludeLeadingDigit</code>, <code>UseParensForNegativeNumbers</code>, and <code>GroupDigits</code> arguments have the following settings.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Constant</td>\n<td>Description</td>\n</tr>\n<tr>\n<td><code>TriState.True</code></td>\n<td>True</td>\n</tr>\n<tr>\n<td><code>TriState.False</code></td>\n<td>False</td>\n</tr>\n<tr>\n<td><code>TriState.Default</code></td>\n<td>The computer&#39;s regional settings</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example illustrates the use of the <code>FormatPercent</code> function.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#28\">        Dim TestNumber As Single = 0.76\n        &#39; Returns &quot;76.00%&quot;.\n        Dim TestString As String = FormatPercent(TestNumber)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_GetChar_System_String_System_Int32_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_GetChar_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetChar(String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <code>Char</code> value representing the character from the specified index in the supplied string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static char GetChar (string str, int Index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>str</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. Any valid <code>String</code> expression.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>Index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. <code>Integer</code> expression. The (1-based) index of the character in <code>str</code> to be returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p><code>Char</code> value representing the character from the specified index in the supplied string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>str</code> is <code>Nothing</code>, <code>Index</code> &lt; 1, or <code>Index</code> is greater than index of last character of <code>str</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>Index</code> is less than 1 or greater than the index of the last character in <code>str</code>, an <code>ArgumentException</code> is thrown.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example shows how to use the <code>GetChar</code> function to return a character from a specified index in a <code>String</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#23\">        Dim TestString As String = &quot;ABCDE&quot;\n        Dim TestChar As Char\n        &#39; Returns &quot;D&quot;\n        TestChar = GetChar(TestString, 4)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_InStr_System_String_System_String_Microsoft_VisualBasic_CompareMethod_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_InStr_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InStr(String,String,CompareMethod)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an integer specifying the start position of the first occurrence of one string within another.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int InStr (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>String1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. <code>String</code> expression being searched.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>String2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. <code>String</code> expression sought.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>Compare</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.visualbasic.comparemethod\" data-linktype=\"relative-path\">CompareMethod</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Optional. Specifies the type of string comparison. If <code>Compare</code> is omitted, the <code>Option Compare</code> setting determines the type of comparison.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <table><tbody><tr><td> If<br>\n </td><td> InStr returns<br>\n </td></tr><tr><td>\n          <code>String1</code> is zero length or <code>Nothing</code></td><td> 0<br>\n </td></tr><tr><td>\n          <code>String2</code> is zero length or <code>Nothing</code></td><td> The starting position for the search, which defaults to the first character position.<br>\n </td></tr><tr><td>\n          <code>String2</code> is not found<br>\n </td><td> 0<br>\n </td></tr><tr><td>\n          <code>String2</code> is found within <code>String1</code></td><td> Position where match begins<br>\n </td></tr><tr><td></td><td></td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Typically, the <code>InStr</code> function is used when parsing strings.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>InStrB</code> function in previous versions of Visual Basic returns a number of bytes rather than a character position. It is used primarily for converting strings in double-byte character set (DBCS) applications. All Visual Basic 2005 strings are in Unicode, and <code>InStrB</code> is no longer supported.  </p>\n</div>\n<p> The <code>Compare</code> argument settings are:  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Constant</td>\n<td>Value</td>\n<td>Description</td>\n</tr>\n<tr>\n<td><code>Binary</code></td>\n<td>0</td>\n<td>Performs a binary comparison</td>\n</tr>\n<tr>\n<td><code>Text</code></td>\n<td>1</td>\n<td>Performs a text comparison</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the <code>InStr</code> function to return the position of the first occurrence of one string within another.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#8\">        &#39; String to search in.\n        Dim SearchString As String = &quot;XXpXXpXXPXXP&quot;\n        &#39; Search for &quot;P&quot;.\n        Dim SearchChar As String = &quot;P&quot;\n\n        Dim TestPos As Integer\n        &#39; A textual comparison starting at position 4. Returns 6.\n        TestPos = InStr(4, SearchString, SearchChar, CompareMethod.Text)\n\n        &#39; A binary comparison starting at position 1. Returns 9.\n        TestPos = InStr(1, SearchString, SearchChar, CompareMethod.Binary)\n\n        &#39; If Option Compare is not set, or set to Binary, return 9.\n        &#39; If Option Compare is set to Text, returns 3.\n        TestPos = InStr(SearchString, SearchChar)\n\n        &#39; Returns 0.\n        TestPos = InStr(1, SearchString, &quot;W&quot;)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_InStr_System_Int32_System_String_System_String_Microsoft_VisualBasic_CompareMethod_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_InStr_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InStr(Int32,String,String,CompareMethod)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an integer specifying the start position of the first occurrence of one string within another.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int InStr (int Start, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Start</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Optional. Numeric expression that sets the starting position for each search. If omitted, search begins at the first character position. The start index is 1-based.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>String1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. <code>String</code> expression being searched.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>String2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. <code>String</code> expression sought.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>Compare</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.visualbasic.comparemethod\" data-linktype=\"relative-path\">CompareMethod</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Optional. Specifies the type of string comparison. If <code>Compare</code> is omitted, the <code>Option Compare</code> setting determines the type of comparison.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <table><tbody><tr><td> If<br>\n </td><td> InStr returns<br>\n </td></tr><tr><td>\n          <code>String1</code> is zero length or <code>Nothing</code></td><td> 0<br>\n </td></tr><tr><td>\n          <code>String2</code> is zero length or <code>Nothing</code></td><td>\n          <code>start</code>\n        </td></tr><tr><td>\n          <code>String2</code> is not found<br>\n </td><td> 0<br>\n </td></tr><tr><td>\n          <code>String2</code> is found within <code>String1</code></td><td> Position where match begins<br>\n </td></tr><tr><td>\n          <code>Start</code> &gt; length of <code>String1</code></td><td> 0<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>Start</code> &lt; 1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Typically, the <code>InStr</code> function is used when parsing strings.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>InStrB</code> function in previous versions of Visual Basic returns a number of bytes rather than a character position. It is used primarily for converting strings in double-byte character set (DBCS) applications. All Visual Basic 2005 strings are in Unicode, and <code>InStrB</code> is no longer supported.  </p>\n</div>\n<p> The <code>Compare</code> argument settings are:  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Constant</td>\n<td>Value</td>\n<td>Description</td>\n</tr>\n<tr>\n<td><code>Binary</code></td>\n<td>0</td>\n<td>Performs a binary comparison</td>\n</tr>\n<tr>\n<td><code>Text</code></td>\n<td>1</td>\n<td>Performs a text comparison</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the <code>InStr</code> function to return the position of the first occurrence of one string within another.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#8\">        &#39; String to search in.\n        Dim SearchString As String = &quot;XXpXXpXXPXXP&quot;\n        &#39; Search for &quot;P&quot;.\n        Dim SearchChar As String = &quot;P&quot;\n\n        Dim TestPos As Integer\n        &#39; A textual comparison starting at position 4. Returns 6.\n        TestPos = InStr(4, SearchString, SearchChar, CompareMethod.Text)\n\n        &#39; A binary comparison starting at position 1. Returns 9.\n        TestPos = InStr(1, SearchString, SearchChar, CompareMethod.Binary)\n\n        &#39; If Option Compare is not set, or set to Binary, return 9.\n        &#39; If Option Compare is set to Text, returns 3.\n        TestPos = InStr(SearchString, SearchChar)\n\n        &#39; Returns 0.\n        TestPos = InStr(1, SearchString, &quot;W&quot;)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_InStrRev_System_String_System_String_System_Int32_Microsoft_VisualBasic_CompareMethod_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_InStrRev_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InStrRev(String,String,Int32,CompareMethod)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the position of the first occurrence of one string within another, starting from the right side of the string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int InStrRev (string StringCheck, string StringMatch, int Start = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>StringCheck</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. String expression being searched.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>StringMatch</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. String expression being searched for.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>Start</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Optional. Numeric expression setting the one-based starting position for each search, starting from the left side of the string. If <code>Start</code> is omitted then â€“1 is used, meaning the search begins at the last character position. Search then proceeds from right to left.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>Compare</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.visualbasic.comparemethod\" data-linktype=\"relative-path\">CompareMethod</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Optional. Numeric value indicating the kind of comparison to use when evaluating substrings. If omitted, a binary comparison is performed. See Settings for values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <table><tbody><tr><td> If<br>\n </td><td> InStrRev returns<br>\n </td></tr><tr><td>\n          <code>StringCheck</code> is zero-length<br>\n </td><td> 0<br>\n </td></tr><tr><td>\n          <code>StringMatch</code> is zero-length<br>\n </td><td>\n          <code>Start</code>\n        </td></tr><tr><td>\n          <code>StringMatch</code> is not found<br>\n </td><td> 0<br>\n </td></tr><tr><td>\n          <code>StringMatch</code> is found within <code>StringCheck</code></td><td> Position at which the first match is found, starting with the right side of the string.<br>\n </td></tr><tr><td>\n          <code>Start</code> is greater than length of <code>StringMatch</code></td><td> 0<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>Start</code> = 0 or <code>Start</code> &lt; -1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Note that the syntax for the <code>InStrRev</code> function is not the same as the syntax for the <code>InStr</code> function.  </p>\n<p> The <code>Compare</code> argument can have the following values.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Constant</td>\n<td>Description</td>\n</tr>\n<tr>\n<td><code>Binary</code></td>\n<td>Performs a binary comparison.</td>\n</tr>\n<tr>\n<td><code>Text</code></td>\n<td>Performs a textual comparison.</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example demonstrates the use of the <code>InStrRev</code> function.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#26\">        Dim TestString As String = &quot;the quick brown fox jumps over the lazy dog&quot;\n        Dim TestNumber As Integer\n        &#39; Returns 32.\n        TestNumber = InStrRev(TestString, &quot;the&quot;)\n        &#39; Returns 1.\n        TestNumber = InStrRev(TestString, &quot;the&quot;, 16)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_Join_System_Object___System_String_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_Join_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Join(Object[],String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string created by joining a number of substrings contained in an array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Join (object[] SourceArray, string Delimiter = &quot; &quot;);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>SourceArray</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. One-dimensional array containing substrings to be joined.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>Delimiter</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Optional. Any string, used to separate the substrings in the returned string. If omitted, the space character (&quot; &quot;) is used. If <code>Delimiter</code> is a zero-length string (&quot;&quot;) or <code>Nothing</code>, all items in the list are concatenated with no delimiters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Returns a string created by joining a number of substrings contained in an array.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>SourceArray</code> is not one dimensional.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>There is a parity between the <code>Join</code> and <code>Split</code> functions. The <code>Join</code> function takes an array of strings and joins them using a delimiter string, to return a single string. The <code>Split</code> function takes a string and separates it at the delimiter, to return an array of strings. However, a key difference is that <code>Join</code> can concatenate strings with any delimiter string, <code>Split</code> can only separate strings using a single character delimiter.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the <code>Join</code> function to create a list from several strings.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#10\">        Dim TestItem() As String = {&quot;Pickle&quot;, &quot;Pineapple&quot;, &quot;Papaya&quot;}\n        &#39; Returns &quot;Pickle, Pineapple, Papaya&quot;\n        Dim TestShoppingList As String = Join(TestItem, &quot;, &quot;)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_Join_System_String___System_String_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_Join_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Join(String[],String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string created by joining a number of substrings contained in an array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Join (string[] SourceArray, string Delimiter = &quot; &quot;);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>SourceArray</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. One-dimensional array containing substrings to be joined.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>Delimiter</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Optional. Any string, used to separate the substrings in the returned string. If omitted, the space character (&quot; &quot;) is used. If <code>Delimiter</code> is a zero-length string (&quot;&quot;) or <code>Nothing</code>, all items in the list are concatenated with no delimiters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Returns a string created by joining a number of substrings contained in an array.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>SourceArray</code> is not one dimensional.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>There is a parity between the <code>Join</code> and <code>Split</code> functions. The <code>Join</code> function takes an array of strings and joins them using a delimiter string, to return a single string. The <code>Split</code> function takes a string and separates it at the delimiter, to return an array of strings. However, a key difference is that <code>Join</code> can concatenate strings with any delimiter string, <code>Split</code> can only separate strings using a single character delimiter.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the <code>Join</code> function to create a list from several strings.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#10\">        Dim TestItem() As String = {&quot;Pickle&quot;, &quot;Pineapple&quot;, &quot;Papaya&quot;}\n        &#39; Returns &quot;Pickle, Pineapple, Papaya&quot;\n        Dim TestShoppingList As String = Join(TestItem, &quot;, &quot;)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_LCase_System_Char_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_LCase_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LCase(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string or character converted to lowercase.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static char LCase (char Value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. Any valid <code>String</code> or <code>Char</code> expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p>Returns a string or character converted to lowercase.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Only uppercase letters are converted to lowercase; all lowercase letters and nonletter characters remain unchanged.  </p>\n<p> This function uses the application&#39;s culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <a class=\"xref\" href=\"system.string#System_String_Compare_\" data-linktype=\"relative-path\">Compare</a> method, and pass <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> or <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> for the <code>comparisonType</code> argument. For more information, see <a href=\"../Topic/How%20Culture%20Affects%20Strings%20in%20Visual%20Basic.md\" data-linktype=\"relative-path\">How Culture Affects Strings in Visual Basic</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the <code>LCase</code> function to return a lowercase version of a string.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#12\">        &#39; String to convert.\n        Dim UpperCase As String = &quot;Hello World 1234&quot;\n        &#39; Returns &quot;hello world 1234&quot;.\n        Dim LowerCase As String = LCase(UpperCase)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_LCase_System_String_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_LCase_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LCase(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string or character converted to lowercase.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string LCase (string Value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. Any valid <code>String</code> or <code>Char</code> expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Returns a string or character converted to lowercase.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Only uppercase letters are converted to lowercase; all lowercase letters and nonletter characters remain unchanged.  </p>\n<p> This function uses the application&#39;s culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <a class=\"xref\" href=\"system.string#System_String_Compare_\" data-linktype=\"relative-path\">Compare</a> method, and pass <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> or <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> for the <code>comparisonType</code> argument. For more information, see <a href=\"../Topic/How%20Culture%20Affects%20Strings%20in%20Visual%20Basic.md\" data-linktype=\"relative-path\">How Culture Affects Strings in Visual Basic</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the <code>LCase</code> function to return a lowercase version of a string.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#12\">        &#39; String to convert.\n        Dim UpperCase As String = &quot;Hello World 1234&quot;\n        &#39; Returns &quot;hello world 1234&quot;.\n        Dim LowerCase As String = LCase(UpperCase)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_Left_System_String_System_Int32_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_Left_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Left(String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string containing a specified number of characters from the left side of a string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Left (string str, int Length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>str</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. <code>String</code> expression from which the leftmost characters are returned.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>Length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. <code>Integer</code> expression. Numeric expression indicating how many characters to return. If 0, a zero-length string (&quot;&quot;) is returned. If greater than or equal to the number of characters in <code>str</code>, the entire string is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Returns a string containing a specified number of characters from the left side of a string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>Length</code> &lt; 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To determine the number of characters in <code>str</code>, use the <code>Len</code> function. If used in a Windows Forms application, or any other class that has a <code>Left</code> property, you must fully qualify the function with <code>Microsoft.VisualBasic.Left</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>LeftB</code> function in previous versions of Visual Basic returns a string in bytes rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and <code>LeftB</code> is no longer supported.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example demonstrates the use of the <code>Left</code> function to return a substring of a given <code>String</code>. In a class that has a <code>Left</code> property, it may be necessary to fully qualify the <code>Left</code> function.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#20\">        Dim TestString As String = &quot;Hello World!&quot;\n        &#39; Returns &quot;Hello&quot;.\n        Dim subString As String = Left(TestString, 5)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_Len_System_Boolean_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_Len_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Len(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Len (bool Expression);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Any valid <code>String</code> expression or variable name. If <code>Expression</code> is of type <code>Object</code>, the <code>Len</code> function returns the size as it will be written to the file by the <code>FilePut</code> function.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>With user-defined types and <code>Object</code> variables, the <code>Len</code> function returns the size as it will be written to the file by the <code>FilePut</code> function. If an <code>Object</code> contains a <code>String</code>, it will return the length of the string. If an <code>Object</code> contains any other type, it will return the size of the object as it will be written to the file by the <code>FilePut</code> function.  </p>\n<p> The <code>VBFixedString</code> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk. The <code>Len</code> function uses the <code>VBFixedString</code> attribute, if available, when determining the size of <code>Object</code> variables.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>Len</code> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>LenB</code> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and <code>LenB</code> is no longer supported.  </p>\n</div>\n<h2 id=\"smart-device-developer-notes\">Smart Device Developer Notes</h2>\n<p> The <code>Len</code> function accepts only <code>String</code> and <code>Object</code> variables as parameters. If an <code>Object</code> contains a <code>String</code>, it will return the length of the <code>String</code>. If a parameter is a NULL <code>Object</code> reference, the function returns zero. If an <code>Object</code> contains any other type, an exception is thrown.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses <code>Len</code> to return the number of characters in a string.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#33\">        &#39; Initializes variable.\n        Dim TestString As String = &quot;Hello World&quot;\n        &#39; Returns 11.\n        Dim TestLen As Integer = Len(TestString)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_Len_System_Byte_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_Len_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Len(Byte)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Len (byte Expression);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Any valid <code>String</code> expression or variable name. If <code>Expression</code> is of type <code>Object</code>, the <code>Len</code> function returns the size as it will be written to the file by the <code>FilePut</code> function.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>With user-defined types and <code>Object</code> variables, the <code>Len</code> function returns the size as it will be written to the file by the <code>FilePut</code> function. If an <code>Object</code> contains a <code>String</code>, it will return the length of the string. If an <code>Object</code> contains any other type, it will return the size of the object as it will be written to the file by the <code>FilePut</code> function.  </p>\n<p> The <code>VBFixedString</code> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk. The <code>Len</code> function uses the <code>VBFixedString</code> attribute, if available, when determining the size of <code>Object</code> variables.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>Len</code> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>LenB</code> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and <code>LenB</code> is no longer supported.  </p>\n</div>\n<h2 id=\"smart-device-developer-notes\">Smart Device Developer Notes</h2>\n<p> The <code>Len</code> function accepts only <code>String</code> and <code>Object</code> variables as parameters. If an <code>Object</code> contains a <code>String</code>, it will return the length of the <code>String</code>. If a parameter is a NULL <code>Object</code> reference, the function returns zero. If an <code>Object</code> contains any other type, an exception is thrown.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses <code>Len</code> to return the number of characters in a string.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#33\">        &#39; Initializes variable.\n        Dim TestString As String = &quot;Hello World&quot;\n        &#39; Returns 11.\n        Dim TestLen As Integer = Len(TestString)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_Len_System_Char_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_Len_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Len(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Len (char Expression);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Any valid <code>String</code> expression or variable name. If <code>Expression</code> is of type <code>Object</code>, the <code>Len</code> function returns the size as it will be written to the file by the <code>FilePut</code> function.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>With user-defined types and <code>Object</code> variables, the <code>Len</code> function returns the size as it will be written to the file by the <code>FilePut</code> function. If an <code>Object</code> contains a <code>String</code>, it will return the length of the string. If an <code>Object</code> contains any other type, it will return the size of the object as it will be written to the file by the <code>FilePut</code> function.  </p>\n<p> The <code>VBFixedString</code> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk. The <code>Len</code> function uses the <code>VBFixedString</code> attribute, if available, when determining the size of <code>Object</code> variables.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>Len</code> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>LenB</code> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and <code>LenB</code> is no longer supported.  </p>\n</div>\n<h2 id=\"smart-device-developer-notes\">Smart Device Developer Notes</h2>\n<p> The <code>Len</code> function accepts only <code>String</code> and <code>Object</code> variables as parameters. If an <code>Object</code> contains a <code>String</code>, it will return the length of the <code>String</code>. If a parameter is a NULL <code>Object</code> reference, the function returns zero. If an <code>Object</code> contains any other type, an exception is thrown.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses <code>Len</code> to return the number of characters in a string.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#33\">        &#39; Initializes variable.\n        Dim TestString As String = &quot;Hello World&quot;\n        &#39; Returns 11.\n        Dim TestLen As Integer = Len(TestString)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_Len_System_DateTime_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_Len_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Len(DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Len (DateTime Expression);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Any valid <code>String</code> expression or variable name. If <code>Expression</code> is of type <code>Object</code>, the <code>Len</code> function returns the size as it will be written to the file by the <code>FilePut</code> function.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>With user-defined types and <code>Object</code> variables, the <code>Len</code> function returns the size as it will be written to the file by the <code>FilePut</code> function. If an <code>Object</code> contains a <code>String</code>, it will return the length of the string. If an <code>Object</code> contains any other type, it will return the size of the object as it will be written to the file by the <code>FilePut</code> function.  </p>\n<p> The <code>VBFixedString</code> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk. The <code>Len</code> function uses the <code>VBFixedString</code> attribute, if available, when determining the size of <code>Object</code> variables.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>Len</code> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>LenB</code> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and <code>LenB</code> is no longer supported.  </p>\n</div>\n<h2 id=\"smart-device-developer-notes\">Smart Device Developer Notes</h2>\n<p> The <code>Len</code> function accepts only <code>String</code> and <code>Object</code> variables as parameters. If an <code>Object</code> contains a <code>String</code>, it will return the length of the <code>String</code>. If a parameter is a NULL <code>Object</code> reference, the function returns zero. If an <code>Object</code> contains any other type, an exception is thrown.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses <code>Len</code> to return the number of characters in a string.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#33\">        &#39; Initializes variable.\n        Dim TestString As String = &quot;Hello World&quot;\n        &#39; Returns 11.\n        Dim TestLen As Integer = Len(TestString)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_Len_System_Decimal_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_Len_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Len(Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Len (decimal Expression);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Any valid <code>String</code> expression or variable name. If <code>Expression</code> is of type <code>Object</code>, the <code>Len</code> function returns the size as it will be written to the file by the <code>FilePut</code> function.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>With user-defined types and <code>Object</code> variables, the <code>Len</code> function returns the size as it will be written to the file by the <code>FilePut</code> function. If an <code>Object</code> contains a <code>String</code>, it will return the length of the string. If an <code>Object</code> contains any other type, it will return the size of the object as it will be written to the file by the <code>FilePut</code> function.  </p>\n<p> The <code>VBFixedString</code> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk. The <code>Len</code> function uses the <code>VBFixedString</code> attribute, if available, when determining the size of <code>Object</code> variables.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>Len</code> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>LenB</code> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and <code>LenB</code> is no longer supported.  </p>\n</div>\n<h2 id=\"smart-device-developer-notes\">Smart Device Developer Notes</h2>\n<p> The <code>Len</code> function accepts only <code>String</code> and <code>Object</code> variables as parameters. If an <code>Object</code> contains a <code>String</code>, it will return the length of the <code>String</code>. If a parameter is a NULL <code>Object</code> reference, the function returns zero. If an <code>Object</code> contains any other type, an exception is thrown.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses <code>Len</code> to return the number of characters in a string.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#33\">        &#39; Initializes variable.\n        Dim TestString As String = &quot;Hello World&quot;\n        &#39; Returns 11.\n        Dim TestLen As Integer = Len(TestString)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_Len_System_Double_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_Len_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Len(Double)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Len (double Expression);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Any valid <code>String</code> expression or variable name. If <code>Expression</code> is of type <code>Object</code>, the <code>Len</code> function returns the size as it will be written to the file by the <code>FilePut</code> function.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>With user-defined types and <code>Object</code> variables, the <code>Len</code> function returns the size as it will be written to the file by the <code>FilePut</code> function. If an <code>Object</code> contains a <code>String</code>, it will return the length of the string. If an <code>Object</code> contains any other type, it will return the size of the object as it will be written to the file by the <code>FilePut</code> function.  </p>\n<p> The <code>VBFixedString</code> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk. The <code>Len</code> function uses the <code>VBFixedString</code> attribute, if available, when determining the size of <code>Object</code> variables.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>Len</code> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>LenB</code> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and <code>LenB</code> is no longer supported.  </p>\n</div>\n<h2 id=\"smart-device-developer-notes\">Smart Device Developer Notes</h2>\n<p> The <code>Len</code> function accepts only <code>String</code> and <code>Object</code> variables as parameters. If an <code>Object</code> contains a <code>String</code>, it will return the length of the <code>String</code>. If a parameter is a NULL <code>Object</code> reference, the function returns zero. If an <code>Object</code> contains any other type, an exception is thrown.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses <code>Len</code> to return the number of characters in a string.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#33\">        &#39; Initializes variable.\n        Dim TestString As String = &quot;Hello World&quot;\n        &#39; Returns 11.\n        Dim TestLen As Integer = Len(TestString)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_Len_System_Int16_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_Len_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Len(Int16)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Len (short Expression);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Any valid <code>String</code> expression or variable name. If <code>Expression</code> is of type <code>Object</code>, the <code>Len</code> function returns the size as it will be written to the file by the <code>FilePut</code> function.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>With user-defined types and <code>Object</code> variables, the <code>Len</code> function returns the size as it will be written to the file by the <code>FilePut</code> function. If an <code>Object</code> contains a <code>String</code>, it will return the length of the string. If an <code>Object</code> contains any other type, it will return the size of the object as it will be written to the file by the <code>FilePut</code> function.  </p>\n<p> The <code>VBFixedString</code> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk. The <code>Len</code> function uses the <code>VBFixedString</code> attribute, if available, when determining the size of <code>Object</code> variables.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>Len</code> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>LenB</code> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and <code>LenB</code> is no longer supported.  </p>\n</div>\n<h2 id=\"smart-device-developer-notes\">Smart Device Developer Notes</h2>\n<p> The <code>Len</code> function accepts only <code>String</code> and <code>Object</code> variables as parameters. If an <code>Object</code> contains a <code>String</code>, it will return the length of the <code>String</code>. If a parameter is a NULL <code>Object</code> reference, the function returns zero. If an <code>Object</code> contains any other type, an exception is thrown.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses <code>Len</code> to return the number of characters in a string.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#33\">        &#39; Initializes variable.\n        Dim TestString As String = &quot;Hello World&quot;\n        &#39; Returns 11.\n        Dim TestLen As Integer = Len(TestString)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_Len_System_Int32_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_Len_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Len(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Len (int Expression);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Any valid <code>String</code> expression or variable name. If <code>Expression</code> is of type <code>Object</code>, the <code>Len</code> function returns the size as it will be written to the file by the <code>FilePut</code> function.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>With user-defined types and <code>Object</code> variables, the <code>Len</code> function returns the size as it will be written to the file by the <code>FilePut</code> function. If an <code>Object</code> contains a <code>String</code>, it will return the length of the string. If an <code>Object</code> contains any other type, it will return the size of the object as it will be written to the file by the <code>FilePut</code> function.  </p>\n<p> The <code>VBFixedString</code> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk. The <code>Len</code> function uses the <code>VBFixedString</code> attribute, if available, when determining the size of <code>Object</code> variables.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>Len</code> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>LenB</code> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and <code>LenB</code> is no longer supported.  </p>\n</div>\n<h2 id=\"smart-device-developer-notes\">Smart Device Developer Notes</h2>\n<p> The <code>Len</code> function accepts only <code>String</code> and <code>Object</code> variables as parameters. If an <code>Object</code> contains a <code>String</code>, it will return the length of the <code>String</code>. If a parameter is a NULL <code>Object</code> reference, the function returns zero. If an <code>Object</code> contains any other type, an exception is thrown.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses <code>Len</code> to return the number of characters in a string.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#33\">        &#39; Initializes variable.\n        Dim TestString As String = &quot;Hello World&quot;\n        &#39; Returns 11.\n        Dim TestLen As Integer = Len(TestString)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_Len_System_Int64_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_Len_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Len(Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Len (long Expression);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Any valid <code>String</code> expression or variable name. If <code>Expression</code> is of type <code>Object</code>, the <code>Len</code> function returns the size as it will be written to the file by the <code>FilePut</code> function.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>With user-defined types and <code>Object</code> variables, the <code>Len</code> function returns the size as it will be written to the file by the <code>FilePut</code> function. If an <code>Object</code> contains a <code>String</code>, it will return the length of the string. If an <code>Object</code> contains any other type, it will return the size of the object as it will be written to the file by the <code>FilePut</code> function.  </p>\n<p> The <code>VBFixedString</code> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk. The <code>Len</code> function uses the <code>VBFixedString</code> attribute, if available, when determining the size of <code>Object</code> variables.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>Len</code> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>LenB</code> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and <code>LenB</code> is no longer supported.  </p>\n</div>\n<h2 id=\"smart-device-developer-notes\">Smart Device Developer Notes</h2>\n<p> The <code>Len</code> function accepts only <code>String</code> and <code>Object</code> variables as parameters. If an <code>Object</code> contains a <code>String</code>, it will return the length of the <code>String</code>. If a parameter is a NULL <code>Object</code> reference, the function returns zero. If an <code>Object</code> contains any other type, an exception is thrown.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses <code>Len</code> to return the number of characters in a string.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#33\">        &#39; Initializes variable.\n        Dim TestString As String = &quot;Hello World&quot;\n        &#39; Returns 11.\n        Dim TestLen As Integer = Len(TestString)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_Len_System_Object_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_Len_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Len(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Len (object Expression);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Any valid <code>String</code> expression or variable name. If <code>Expression</code> is of type <code>Object</code>, the <code>Len</code> function returns the size as it will be written to the file by the <code>FilePut</code> function.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>With user-defined types and <code>Object</code> variables, the <code>Len</code> function returns the size as it will be written to the file by the <code>FilePut</code> function. If an <code>Object</code> contains a <code>String</code>, it will return the length of the string. If an <code>Object</code> contains any other type, it will return the size of the object as it will be written to the file by the <code>FilePut</code> function.  </p>\n<p> The <code>VBFixedString</code> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk. The <code>Len</code> function uses the <code>VBFixedString</code> attribute, if available, when determining the size of <code>Object</code> variables.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>Len</code> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>LenB</code> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and <code>LenB</code> is no longer supported.  </p>\n</div>\n<h2 id=\"smart-device-developer-notes\">Smart Device Developer Notes</h2>\n<p> The <code>Len</code> function accepts only <code>String</code> and <code>Object</code> variables as parameters. If an <code>Object</code> contains a <code>String</code>, it will return the length of the <code>String</code>. If a parameter is a NULL <code>Object</code> reference, the function returns zero. If an <code>Object</code> contains any other type, an exception is thrown.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses <code>Len</code> to return the number of characters in a string.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#33\">        &#39; Initializes variable.\n        Dim TestString As String = &quot;Hello World&quot;\n        &#39; Returns 11.\n        Dim TestLen As Integer = Len(TestString)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_Len_System_SByte_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_Len_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Len(SByte)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Len (sbyte Expression);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Any valid <code>String</code> expression or variable name. If <code>Expression</code> is of type <code>Object</code>, the <code>Len</code> function returns the size as it will be written to the file by the <code>FilePut</code> function.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>With user-defined types and <code>Object</code> variables, the <code>Len</code> function returns the size as it will be written to the file by the <code>FilePut</code> function. If an <code>Object</code> contains a <code>String</code>, it will return the length of the string. If an <code>Object</code> contains any other type, it will return the size of the object as it will be written to the file by the <code>FilePut</code> function.  </p>\n<p> The <code>VBFixedString</code> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk. The <code>Len</code> function uses the <code>VBFixedString</code> attribute, if available, when determining the size of <code>Object</code> variables.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>Len</code> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>LenB</code> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and <code>LenB</code> is no longer supported.  </p>\n</div>\n<h2 id=\"smart-device-developer-notes\">Smart Device Developer Notes</h2>\n<p> The <code>Len</code> function accepts only <code>String</code> and <code>Object</code> variables as parameters. If an <code>Object</code> contains a <code>String</code>, it will return the length of the <code>String</code>. If a parameter is a NULL <code>Object</code> reference, the function returns zero. If an <code>Object</code> contains any other type, an exception is thrown.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses <code>Len</code> to return the number of characters in a string.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#33\">        &#39; Initializes variable.\n        Dim TestString As String = &quot;Hello World&quot;\n        &#39; Returns 11.\n        Dim TestLen As Integer = Len(TestString)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_Len_System_Single_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_Len_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Len(Single)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Len (float Expression);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Any valid <code>String</code> expression or variable name. If <code>Expression</code> is of type <code>Object</code>, the <code>Len</code> function returns the size as it will be written to the file by the <code>FilePut</code> function.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>With user-defined types and <code>Object</code> variables, the <code>Len</code> function returns the size as it will be written to the file by the <code>FilePut</code> function. If an <code>Object</code> contains a <code>String</code>, it will return the length of the string. If an <code>Object</code> contains any other type, it will return the size of the object as it will be written to the file by the <code>FilePut</code> function.  </p>\n<p> The <code>VBFixedString</code> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk. The <code>Len</code> function uses the <code>VBFixedString</code> attribute, if available, when determining the size of <code>Object</code> variables.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>Len</code> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>LenB</code> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and <code>LenB</code> is no longer supported.  </p>\n</div>\n<h2 id=\"smart-device-developer-notes\">Smart Device Developer Notes</h2>\n<p> The <code>Len</code> function accepts only <code>String</code> and <code>Object</code> variables as parameters. If an <code>Object</code> contains a <code>String</code>, it will return the length of the <code>String</code>. If a parameter is a NULL <code>Object</code> reference, the function returns zero. If an <code>Object</code> contains any other type, an exception is thrown.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses <code>Len</code> to return the number of characters in a string.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#33\">        &#39; Initializes variable.\n        Dim TestString As String = &quot;Hello World&quot;\n        &#39; Returns 11.\n        Dim TestLen As Integer = Len(TestString)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_Len_System_String_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_Len_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Len(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Len (string Expression);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Any valid <code>String</code> expression or variable name. If <code>Expression</code> is of type <code>Object</code>, the <code>Len</code> function returns the size as it will be written to the file by the <code>FilePut</code> function.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>With user-defined types and <code>Object</code> variables, the <code>Len</code> function returns the size as it will be written to the file by the <code>FilePut</code> function. If an <code>Object</code> contains a <code>String</code>, it will return the length of the string. If an <code>Object</code> contains any other type, it will return the size of the object as it will be written to the file by the <code>FilePut</code> function.  </p>\n<p> The <code>VBFixedString</code> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk. The <code>Len</code> function uses the <code>VBFixedString</code> attribute, if available, when determining the size of <code>Object</code> variables.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>Len</code> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>LenB</code> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and <code>LenB</code> is no longer supported.  </p>\n</div>\n<h2 id=\"smart-device-developer-notes\">Smart Device Developer Notes</h2>\n<p> The <code>Len</code> function accepts only <code>String</code> and <code>Object</code> variables as parameters. If an <code>Object</code> contains a <code>String</code>, it will return the length of the <code>String</code>. If a parameter is a NULL <code>Object</code> reference, the function returns zero. If an <code>Object</code> contains any other type, an exception is thrown.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses <code>Len</code> to return the number of characters in a string.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#33\">        &#39; Initializes variable.\n        Dim TestString As String = &quot;Hello World&quot;\n        &#39; Returns 11.\n        Dim TestLen As Integer = Len(TestString)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_Len_System_UInt16_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_Len_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Len(UInt16)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Len (ushort Expression);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Any valid <code>String</code> expression or variable name. If <code>Expression</code> is of type <code>Object</code>, the <code>Len</code> function returns the size as it will be written to the file by the <code>FilePut</code> function.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>With user-defined types and <code>Object</code> variables, the <code>Len</code> function returns the size as it will be written to the file by the <code>FilePut</code> function. If an <code>Object</code> contains a <code>String</code>, it will return the length of the string. If an <code>Object</code> contains any other type, it will return the size of the object as it will be written to the file by the <code>FilePut</code> function.  </p>\n<p> The <code>VBFixedString</code> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk. The <code>Len</code> function uses the <code>VBFixedString</code> attribute, if available, when determining the size of <code>Object</code> variables.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>Len</code> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>LenB</code> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and <code>LenB</code> is no longer supported.  </p>\n</div>\n<h2 id=\"smart-device-developer-notes\">Smart Device Developer Notes</h2>\n<p> The <code>Len</code> function accepts only <code>String</code> and <code>Object</code> variables as parameters. If an <code>Object</code> contains a <code>String</code>, it will return the length of the <code>String</code>. If a parameter is a NULL <code>Object</code> reference, the function returns zero. If an <code>Object</code> contains any other type, an exception is thrown.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses <code>Len</code> to return the number of characters in a string.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#33\">        &#39; Initializes variable.\n        Dim TestString As String = &quot;Hello World&quot;\n        &#39; Returns 11.\n        Dim TestLen As Integer = Len(TestString)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_Len_System_UInt32_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_Len_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Len(UInt32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Len (uint Expression);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Any valid <code>String</code> expression or variable name. If <code>Expression</code> is of type <code>Object</code>, the <code>Len</code> function returns the size as it will be written to the file by the <code>FilePut</code> function.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>With user-defined types and <code>Object</code> variables, the <code>Len</code> function returns the size as it will be written to the file by the <code>FilePut</code> function. If an <code>Object</code> contains a <code>String</code>, it will return the length of the string. If an <code>Object</code> contains any other type, it will return the size of the object as it will be written to the file by the <code>FilePut</code> function.  </p>\n<p> The <code>VBFixedString</code> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk. The <code>Len</code> function uses the <code>VBFixedString</code> attribute, if available, when determining the size of <code>Object</code> variables.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>Len</code> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>LenB</code> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and <code>LenB</code> is no longer supported.  </p>\n</div>\n<h2 id=\"smart-device-developer-notes\">Smart Device Developer Notes</h2>\n<p> The <code>Len</code> function accepts only <code>String</code> and <code>Object</code> variables as parameters. If an <code>Object</code> contains a <code>String</code>, it will return the length of the <code>String</code>. If a parameter is a NULL <code>Object</code> reference, the function returns zero. If an <code>Object</code> contains any other type, an exception is thrown.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses <code>Len</code> to return the number of characters in a string.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#33\">        &#39; Initializes variable.\n        Dim TestString As String = &quot;Hello World&quot;\n        &#39; Returns 11.\n        Dim TestLen As Integer = Len(TestString)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_Len_System_UInt64_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_Len_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Len(UInt64)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Len (ulong Expression);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Any valid <code>String</code> expression or variable name. If <code>Expression</code> is of type <code>Object</code>, the <code>Len</code> function returns the size as it will be written to the file by the <code>FilePut</code> function.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>With user-defined types and <code>Object</code> variables, the <code>Len</code> function returns the size as it will be written to the file by the <code>FilePut</code> function. If an <code>Object</code> contains a <code>String</code>, it will return the length of the string. If an <code>Object</code> contains any other type, it will return the size of the object as it will be written to the file by the <code>FilePut</code> function.  </p>\n<p> The <code>VBFixedString</code> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk. The <code>Len</code> function uses the <code>VBFixedString</code> attribute, if available, when determining the size of <code>Object</code> variables.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>Len</code> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>LenB</code> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and <code>LenB</code> is no longer supported.  </p>\n</div>\n<h2 id=\"smart-device-developer-notes\">Smart Device Developer Notes</h2>\n<p> The <code>Len</code> function accepts only <code>String</code> and <code>Object</code> variables as parameters. If an <code>Object</code> contains a <code>String</code>, it will return the length of the <code>String</code>. If a parameter is a NULL <code>Object</code> reference, the function returns zero. If an <code>Object</code> contains any other type, an exception is thrown.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses <code>Len</code> to return the number of characters in a string.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#33\">        &#39; Initializes variable.\n        Dim TestString As String = &quot;Hello World&quot;\n        &#39; Returns 11.\n        Dim TestLen As Integer = Len(TestString)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_LSet_System_String_System_Int32_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_LSet_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LSet(String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a left-aligned string containing the specified string adjusted to the specified length.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string LSet (string Source, int Length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. <code>String</code> expression. Name of string variable.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>Length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. <code>Integer</code> expression. Length of returned string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Returns a left-aligned string containing the specified string adjusted to the specified length.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the specified string is longer than the specified length, the returned string is shortened to the specified length. If the specified string is shorter than the specified length, spaces are added to the right end of the returned string to produce the appropriate length.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example demonstrates the use of the <code>LSet</code> function.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#11\">        Dim TestString As String = &quot;Left&quot;\n        Dim lString As String\n        &#39; Returns &quot;Left      &quot;\n        lString = LSet(TestString, 10)\n        &#39; Returns &quot;Le&quot;\n        lString = LSet(TestString, 2)\n        &#39; Returns &quot;Left&quot;\n        lString = LSet(TestString, 4)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_LTrim_System_String_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_LTrim_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LTrim(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string containing a copy of a specified string with no leading spaces (<code>LTrim</code>), no trailing spaces (<code>RTrim</code>), or no leading or trailing spaces (<code>Trim</code>).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string LTrim (string str);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>str</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. Any valid <code>String</code> expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Returns a string containing a copy of a specified string with no leading spaces (<code>LTrim</code>), no trailing spaces (<code>RTrim</code>), or no leading or trailing spaces (<code>Trim</code>).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>LTrim</code>, <code>RTrim</code>, and <code>Trim</code> functions remove spaces from the ends of strings.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the <code>LTrim</code> function to strip leading spaces and the <code>RTrim</code> function to strip trailing spaces from a string variable. It uses the <code>Trim</code> function to strip both types of spaces.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#25\">        &#39; Initializes string.\n        Dim TestString As String = &quot;  &lt;-Trim-&gt;  &quot;\n        Dim TrimString As String\n        &#39; Returns &quot;&lt;-Trim-&gt;  &quot;.\n        TrimString = LTrim(TestString)\n        &#39; Returns &quot;  &lt;-Trim-&gt;&quot;.\n        TrimString = RTrim(TestString)\n        &#39; Returns &quot;&lt;-Trim-&gt;&quot;.\n        TrimString = LTrim(RTrim(TestString))\n        &#39; Using the Trim function alone achieves the same result.\n        &#39; Returns &quot;&lt;-Trim-&gt;&quot;.\n        TrimString = Trim(TestString)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_Mid_System_String_System_Int32_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_Mid_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Mid(String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string that contains all the characters starting from a specified position in a string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Mid (string str, int Start);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>str</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. <code>String</code> expression from which characters are returned.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>Start</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. <code>Integer</code> expression. Starting position of the characters to return. If <code>Start</code> is greater than the number of characters in <code>str</code>, the <code>Mid</code> function returns a zero-length string (&quot;&quot;). <code>Start</code> is one-based.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that consists of all the characters starting from the specified position in the string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>Start</code> &lt;= 0 or <code>Length</code> &lt; 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To determine the number of characters in <code>str</code>, use the <code>Len</code> function.  </p>\n<p> Visual Basic has a <code>Mid</code> function and a <code>Mid</code> statement. These elements both operate on a specified number of characters in a string, but the <code>Mid</code> function returns the characters while the <code>Mid</code> statement replaces the characters. For more information, see <a href=\"../Topic/Mid%20Statement.md\" data-linktype=\"relative-path\">Mid Statement</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>MidB</code> function in previous versions of Visual Basic returns a string in bytes rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All Visual Basic strings are in Unicode, and <code>MidB</code> is no longer supported.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The last line in this example uses this overload of the <code>Mid</code> function to return the fifth and subsequent characters from a string.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#17\">        &#39; Creates text string.\n        Dim TestString As String = &quot;Mid Function Demo&quot;\n        &#39; Returns &quot;Mid&quot;.\n        Dim FirstWord As String = Mid(TestString, 1, 3)\n        &#39; Returns &quot;Demo&quot;.\n        Dim LastWord As String = Mid(TestString, 14, 4)\n        &#39; Returns &quot;Function Demo&quot;.\n        Dim MidWords As String = Mid(TestString, 5)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_Mid_System_String_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_Mid_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Mid(String,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string that contains a specified number of characters starting from a specified position in a string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Mid (string str, int Start, int Length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>str</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. <code>String</code> expression from which characters are returned.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>Start</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. <code>Integer</code> expression. Starting position of the characters to return. If <code>Start</code> is greater than the number of characters in <code>str</code>, the <code>Mid</code> function returns a zero-length string (&quot;&quot;). <code>Start</code> is one based.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>Length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Optional. <code>Integer</code> expression. Number of characters to return. If omitted or if there are fewer than <code>Length</code> characters in the text (including the character at position <code>Start</code>), all characters from the start position to the end of the string are returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that consists of the specified number of characters starting from the specified position in the string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>Start</code> &lt;= 0 or <code>Length</code> &lt; 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To determine the number of characters in <code>str</code>, use the <code>Len</code> function.  </p>\n<p> Visual Basic has a <code>Mid</code> function and a <code>Mid</code> statement. These elements both operate on a specified number of characters in a string, but the <code>Mid</code> function returns the characters while the <code>Mid</code> statement replaces the characters. For more information, see <a href=\"../Topic/Mid%20Statement.md\" data-linktype=\"relative-path\">Mid Statement</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>MidB</code> function in previous versions of Visual Basic returns a string in bytes rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All Visual Basic strings are in Unicode, and <code>MidB</code> is no longer supported.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The first two <code>Mid</code> functions in this example return the specified number of characters from a string, starting from the given positions. (The last function illustrates the <a class=\"xref\" href=\"microsoft.visualbasic.strings#Microsoft_VisualBasic_Strings_Mid_System_String_System_Int32_\" data-linktype=\"relative-path\">Mid(String,Int32)</a> overload and only specifies the starting point for the string extraction.)  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#17\">        &#39; Creates text string.\n        Dim TestString As String = &quot;Mid Function Demo&quot;\n        &#39; Returns &quot;Mid&quot;.\n        Dim FirstWord As String = Mid(TestString, 1, 3)\n        &#39; Returns &quot;Demo&quot;.\n        Dim LastWord As String = Mid(TestString, 14, 4)\n        &#39; Returns &quot;Function Demo&quot;.\n        Dim MidWords As String = Mid(TestString, 5)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_Replace_System_String_System_String_System_String_System_Int32_System_Int32_Microsoft_VisualBasic_CompareMethod_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_Replace_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Replace(String,String,String,Int32,Int32,CompareMethod)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string in which a specified substring has been replaced with another substring a specified number of times.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Replace (string Expression, string Find, string Replacement, int Start = 1, int Count = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. String expression containing substring to replace.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>Find</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. Substring being searched for.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>Replacement</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. Replacement substring.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>Start</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Optional. Position within <code>Expression</code> that starts a substring used for replacement. The return value of <code>Replace</code> is a string that begins at <code>Start</code>, with appropriate substitutions. If omitted, 1 is assumed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>Count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Optional. Number of substring substitutions to perform. If omitted, the default value is â€“1, which means &quot;make all possible substitutions.&quot;</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>Compare</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.visualbasic.comparemethod\" data-linktype=\"relative-path\">CompareMethod</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Optional. Numeric value indicating the kind of comparison to use when evaluating substrings. See Settings for values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p><code>Replace</code> returns the following values.  </p>\n <table><tbody><tr><td> If<br>\n </td><td> Replace returns<br>\n </td></tr><tr><td><code>Find</code> is zero-length or <code>Nothing</code></td><td> Copy of <code>Expression</code></td></tr><tr><td><code>Replace</code> is zero-length<br>\n </td><td> Copy of <code>Expression</code> with no occurrences of <code>Find</code></td></tr><tr><td><code>Expression</code> is zero-length or <code>Nothing</code>, or <code>Start</code> is greater than length of <code>Expression</code></td><td><code>Nothing</code></td></tr><tr><td><code>Count</code> is 0<br>\n </td><td> Copy of <code>Expression</code></td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>Count</code> &lt; -1 or <code>Start</code> &lt;= 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The return value of the <code>Replace</code> function is a string that begins at the position specified by <code>Start</code> and concludes at the end of the <code>Expression</code> string, with the substitutions made as specified by the <code>Find</code> and <code>Replace</code> values.  </p>\n<p> The <code>Compare</code> argument can have the following values.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Constant</td>\n<td>Description</td>\n</tr>\n<tr>\n<td><code>Binary</code></td>\n<td>Performs a binary comparison</td>\n</tr>\n<tr>\n<td><code>Text</code></td>\n<td>Performs a textual comparison</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example demonstrates the <code>Replace</code> function.  </p>\n<pre><code class=\"lang-vb#\">Dim TestString As String = &quot;Shopping List&quot;  \n&#39; Returns &quot;Shipping List&quot;.  \nDim aString As String = Replace(TestString, &quot;o&quot;, &quot;i&quot;)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_Right_System_String_System_Int32_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_Right_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Right(String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string containing a specified number of characters from the right side of a string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Right (string str, int Length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>str</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. <code>String</code> expression from which the rightmost characters are returned.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>Length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. <code>Integer</code>. Numeric expression indicating how many characters to return. If 0, a zero-length string (&quot;&quot;) is returned. If greater than or equal to the number of characters in <code>str</code>, the entire string is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Returns a string containing a specified number of characters from the right side of a string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>Length</code> &lt; 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To determine the number of characters in <code>str</code>, use the <code>Len</code> function. If used in a Windows Form, or any other class that has a <code>Right</code> property, you must fully qualify the function with <code>Microsoft.VisualBasic.Strings.Right</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>RightB</code> function in earlier versions of Visual Basic returns a string in bytes, rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and <code>RightB</code> is no longer supported.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example demonstrates the use of the <code>Right</code> function to return a substring of a given <code>String</code>. In a class that has a <code>Right</code> property, it may be necessary to fully qualify the <code>Right</code> function.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#21\">        Dim TestString As String = &quot;Hello World!&quot;\n        &#39; Returns &quot;World!&quot;.\n        Dim subString As String = Right(TestString, 6)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_RSet_System_String_System_Int32_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_RSet_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RSet(String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a right-aligned string containing the specified string adjusted to the specified length.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string RSet (string Source, int Length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. <code>String</code> expression. Name of string variable.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>Length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. <code>Integer</code> expression. Length of returned string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Returns a right-aligned string containing the specified string adjusted to the specified length.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>Source</code> is longer than <code>Length</code>, <code>RSet</code> places only the leftmost characters, up to the length of <code>Source</code>, in the returned string. If the specified string is shorter than the specified length, spaces are added to the left end of the string to produce the appropriate length. If the specified string is longer than the specified length, it is shortened to the specified length.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example demonstrates the use of the <code>RSet</code> function.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#9\">        Dim TestString As String = &quot;Right&quot;\n        &#39; Returns &quot;      Right&quot;\n        Dim rString As String = RSet(TestString, 11)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_RTrim_System_String_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_RTrim_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RTrim(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string containing a copy of a specified string with no leading spaces (<code>LTrim</code>), no trailing spaces (<code>RTrim</code>), or no leading or trailing spaces (<code>Trim</code>).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string RTrim (string str);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>str</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. Any valid <code>String</code> expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Returns a string containing a copy of a specified string with no leading spaces (<code>LTrim</code>), no trailing spaces (<code>RTrim</code>), or no leading or trailing spaces (<code>Trim</code>).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>LTrim</code>, <code>RTrim</code>, and <code>Trim</code> functions remove spaces from the ends of strings.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the <code>LTrim</code> function to strip leading spaces and the <code>RTrim</code> function to strip trailing spaces from a string variable. It uses the <code>Trim</code> function to strip both types of spaces.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#25\">        &#39; Initializes string.\n        Dim TestString As String = &quot;  &lt;-Trim-&gt;  &quot;\n        Dim TrimString As String\n        &#39; Returns &quot;&lt;-Trim-&gt;  &quot;.\n        TrimString = LTrim(TestString)\n        &#39; Returns &quot;  &lt;-Trim-&gt;&quot;.\n        TrimString = RTrim(TestString)\n        &#39; Returns &quot;&lt;-Trim-&gt;&quot;.\n        TrimString = LTrim(RTrim(TestString))\n        &#39; Using the Trim function alone achieves the same result.\n        &#39; Returns &quot;&lt;-Trim-&gt;&quot;.\n        TrimString = Trim(TestString)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_Space_System_Int32_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_Space_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Space(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string consisting of the specified number of spaces.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Space (int Number);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Number</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. <code>Integer</code> expression. The number of spaces you want in the string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Returns a string consisting of the specified number of spaces.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>Number</code> &lt; 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>Space</code> function is useful for formatting output and clearing data in fixed-length strings.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the <code>Space</code> function to return a string consisting of a specified number of spaces.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#2\">        Dim TestString As String\n        &#39; Returns a string with 10 spaces.\n        TestString = Space(10)\n        &#39; Inserts 10 spaces between two strings.\n        TestString = &quot;Hello&quot; &amp; Space(10) &amp; &quot;World&quot;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_Split_System_String_System_String_System_Int32_Microsoft_VisualBasic_CompareMethod_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_Split_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Split(String,String,Int32,CompareMethod)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a zero-based, one-dimensional array containing a specified number of substrings.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string[] Split (string Expression, string Delimiter = &quot; &quot;, int Limit = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. <code>String</code> expression containing substrings and delimiters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>Delimiter</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Optional. Any single character used to identify substring limits. If <code>Delimiter</code> is omitted, the space character (&quot; &quot;) is assumed to be the delimiter.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>Limit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Optional. Maximum number of substrings into which the input string should be split. The default, â€“1, indicates that the input string should be split at every occurrence of the <code>Delimiter</code> string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>Compare</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.visualbasic.comparemethod\" data-linktype=\"relative-path\">CompareMethod</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Optional. Numeric value indicating the comparison to use when evaluating substrings. See &quot;Settings&quot; for values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p><code>String</code> array. If <code>Expression</code> is a zero-length string (&quot;&quot;), <code>Split</code> returns a single-element array containing a zero-length string. If <code>Delimiter</code> is a zero-length string, or if it does not appear anywhere in <code>Expression</code>, <code>Split</code> returns a single-element array containing the entire <code>Expression</code> string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default, or when <code>Limit</code> equals -1, the <code>Split</code> function splits the input string at every occurrence of the delimiter string, and returns the substrings in an array. When the <code>Limit</code> parameter is greater than zero, the <code>Split</code> function splits the string at the first <code>Limit</code>-1 occurrences of the delimiter, and returns an array with the resulting substrings. For example, <code>Split(&quot;a:b:c&quot;, &quot;:&quot;)</code> returns the array <code>{&quot;a&quot;, &quot;b&quot;, &quot;c&quot;}</code>, while <code>Split(&quot;a:b:c&quot;, &quot;:&quot;, 2)</code> returns the array <code>{&quot;a&quot;, &quot;b:c&quot;}</code>.  </p>\n<p> When the <code>Split</code> function encounters two delimiters in a row, or a delimiter at the beginning or end of the string, it interprets them as surrounding an empty string (&quot;&quot;). For example, <code>Split(&quot;xx&quot;, &quot;x&quot;)</code> returns the array containing three empty strings: one from between the beginning of the string and the first &quot;x&quot;, one from between the two &quot;x&quot; strings, and one from between the last &quot;x&quot; and the end of the string.  </p>\n<p> This table demonstrates how the optional <code>Delimiter</code>, <code>Limit</code>, and <code>Compare</code> parameters can change the behavior of the <code>Split</code> function.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Split Call</td>\n<td>Return Value</td>\n</tr>\n<tr>\n<td><code>Split(&quot;42, 12, 19&quot;)</code></td>\n<td>{&quot;42,&quot; , &quot;12,&quot; , &quot;19&quot;}</td>\n</tr>\n<tr>\n<td><code>Split(&quot;42, 12, 19&quot;, &quot;, &quot;)</code></td>\n<td>{&quot;42&quot;, &quot;12&quot;, &quot;19&quot;}</td>\n</tr>\n<tr>\n<td><code>Split(&quot;42, 12, 19&quot;, &quot;, &quot;, 2)</code></td>\n<td>{&quot;42&quot;, &quot;12, 19&quot;}</td>\n</tr>\n<tr>\n<td><code>Split(&quot;192.168.0.1&quot;, &quot;.&quot;)</code></td>\n<td>{&quot;192&quot;, &quot;168&quot;, &quot;0&quot;, &quot;1&quot;}</td>\n</tr>\n<tr>\n<td><code>Split(&quot;Alice and Bob&quot;, &quot; AND &quot;)</code></td>\n<td>{&quot;Alice and Bob&quot;}</td>\n</tr>\n<tr>\n<td><code>Split(&quot;Alice and Bob&quot;, &quot; AND &quot;, ,CompareMethod.Text)</code></td>\n<td>{&quot;Alice&quot;, &quot;Bob&quot;}</td>\n</tr>\n<tr>\n<td><code>Split(&quot;someone@example.com&quot;, &quot;@&quot;,1)</code></td>\n<td>{&quot;someone@example.com&quot;}</td>\n</tr>\n<tr>\n<td><code>Split(&quot;someone@example.com&quot;, &quot;@&quot;,2)</code></td>\n<td>{&quot;someone&quot;, &quot;example.com&quot;}</td>\n</tr>\n</tbody>\n</table>\n<p> The <code>Compare</code> argument can have the following values.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Constant</td>\n<td>Description</td>\n<td>Value</td>\n</tr>\n<tr>\n<td><code>CompareMethod.Binary</code></td>\n<td>Performs a binary comparison</td>\n<td>0</td>\n</tr>\n<tr>\n<td><code>CompareMethod.Text</code></td>\n<td>Performs a textual comparison</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to split a string at its spaces.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#13\">        Dim TestString As String = &quot;Look at these!&quot;\n        &#39; Returns an array containing &quot;Look&quot;, &quot;at&quot;, and &quot;these!&quot;.\n        Dim TestArray() As String = Split(TestString)\n</code></pre><p> The following example demonstrates how to split strings with multiple delimiters in a row and filter out the empty strings.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#14\">        Dim TestString As String = &quot;apple    pear banana  &quot;\n        Dim TestArray() As String = Split(TestString)\n        &#39; TestArray holds {&quot;apple&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;pear&quot;, &quot;banana&quot;, &quot;&quot;, &quot;&quot;}\n        Dim LastNonEmpty As Integer = -1\n        For i As Integer = 0 To TestArray.Length - 1\n            If TestArray(i) &lt;&gt; &quot;&quot; Then\n                LastNonEmpty += 1\n                TestArray(LastNonEmpty) = TestArray(i)\n            End If\n        Next\n        ReDim Preserve TestArray(LastNonEmpty)\n        &#39; TestArray now holds {&quot;apple&quot;, &quot;pear&quot;, &quot;banana&quot;}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_StrComp_System_String_System_String_Microsoft_VisualBasic_CompareMethod_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_StrComp_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StrComp(String,String,CompareMethod)</div>        \r\n          </div>\r\n    \r\n            <p>Returns -1, 0, or 1, based on the result of a string comparison.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int StrComp (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>String1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. Any valid <code>String</code> expression.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>String2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. Any valid <code>String</code> expression.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>Compare</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.visualbasic.comparemethod\" data-linktype=\"relative-path\">CompareMethod</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Optional. Specifies the type of string comparison. If <code>Compare</code> is omitted, the <code>Option Compare</code> setting determines the type of comparison.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The <code>StrComp</code> function has the following return values.  </p>\n <table><tbody><tr><td> If<br>\n </td><td> StrComp returns<br>\n </td></tr><tr><td><code>String1</code> sorts ahead of <code>String2</code></td><td> -1<br>\n </td></tr><tr><td><code>String1</code> is equal to <code>String2</code></td><td> 0<br>\n </td></tr><tr><td><code>String1</code> sorts after <code>String2</code></td><td> 1<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>Compare</code> value is not valid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The strings are compared by alphanumeric sort values beginning with the first character. For further information on binary comparisons, textual comparisons, and sort order, see <a href=\"../Topic/Option%20Compare%20Statement.md\" data-linktype=\"relative-path\">Option Compare Statement</a>.  </p>\n<p> The <code>Compare</code> argument settings are:  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Constant</td>\n<td>Description</td>\n</tr>\n<tr>\n<td><code>Binary</code></td>\n<td>Performs a binary comparison, based on a sort order derived from the internal binary representations of the characters.</td>\n</tr>\n<tr>\n<td><code>Text</code></td>\n<td>Performs a text comparison, based on a case-insensitive text sort order determined by your system&#39;s <code>LocaleID</code> value.</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the <code>StrComp</code> function to return the results of a string comparison.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#22\">        &#39; Defines variables.\n        Dim TestStr1 As String = &quot;ABCD&quot;\n        Dim TestStr2 As String = &quot;abcd&quot;\n        Dim TestComp As Integer\n        &#39; The two strings sort equally. Returns 0.\n        TestComp = StrComp(TestStr1, TestStr2, CompareMethod.Text)\n        &#39; TestStr1 sorts before TestStr2. Returns -1.\n        TestComp = StrComp(TestStr1, TestStr2, CompareMethod.Binary)\n        &#39; TestStr2 sorts after TestStr1. Returns 1.\n        TestComp = StrComp(TestStr2, TestStr1, CompareMethod.Binary)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_StrConv_System_String_Microsoft_VisualBasic_VbStrConv_System_Int32_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_StrConv_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StrConv(String,VbStrConv,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string converted as specified.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string StrConv (string str, Microsoft.VisualBasic.VbStrConv Conversion, int LocaleID = 0);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>str</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. <code>String</code> expression to be converted.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>Conversion</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.visualbasic.vbstrconv\" data-linktype=\"relative-path\">VbStrConv</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. <a class=\"xref\" href=\"microsoft.visualbasic.vbstrconv\" data-linktype=\"relative-path\">VbStrConv</a> member. The enumeration value specifying the type of conversion to perform.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>LocaleID</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Optional. The <code>LocaleID</code> value, if different from the system <code>LocaleID</code> value. (The system <code>LocaleID</code> value is the default.)</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Returns a string converted as specified.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Unsupported <code>LocaleID</code>, <code>Conversion</code> &lt; 0 or &gt; 2048, or unsupported conversion for specified locale.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The constants <code>VbStrConv.Wide</code>, <code>VbStrConv.Narrow</code>, <code>VbStrConv.SimplifiedChinese</code>, <code>VbStrConv.TraditionalChinese</code>, <code>VbStrConv.Katakana</code>, and <code>VbStrConv.Hiragana</code> can cause run-time errors when used in locales where they do not apply, but not always: the constants <code>VbStrConv.Katakana</code> and <code>VbStrConv.Hiragana</code> can be used in a non-Japanese system with the Japanese Language Pack installed. In addition, use of the constants <code>VbStrConv.Wide</code> and <code>VbStrConv.Narrow</code> is supported on any system with an East Asian language installed.  </p>\n<p> This function uses the application&#39;s culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <a class=\"xref\" href=\"system.string#System_String_Compare_\" data-linktype=\"relative-path\">Compare</a> method, and pass <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> or <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> for the <code>comparisonType</code> argument. For more information, see <a href=\"../Topic/How%20Culture%20Affects%20Strings%20in%20Visual%20Basic.md\" data-linktype=\"relative-path\">How Culture Affects Strings in Visual Basic</a>.  </p>\n</div>\n<p> The <code>Conversion</code> argument settings are:  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Enumeration member</td>\n<td>Description</td>\n</tr>\n<tr>\n<td><code>VbStrConv.None</code></td>\n<td>Performs no conversion</td>\n</tr>\n<tr>\n<td><code>VbStrConv.LinguisticCasing</code></td>\n<td>Uses linguistic rules for casing, rather than File System (default). Valid with <code>VbStrConv.UpperCase</code> and <code>VbStrConv.LowerCase</code> only.</td>\n</tr>\n<tr>\n<td><code>VbStrConv.UpperCase</code></td>\n<td>Converts the string to uppercase characters.</td>\n</tr>\n<tr>\n<td><code>VbStrConv.LowerCase</code></td>\n<td>Converts the string to lowercase characters.</td>\n</tr>\n<tr>\n<td><code>VbStrConv.ProperCase</code></td>\n<td>Converts the first letter of every word in string to uppercase.</td>\n</tr>\n<tr>\n<td><code>VbStrConv.Wide</code> <sup>*</sup></td>\n<td>Converts narrow (half-width) characters in the string to wide (full-width) characters.</td>\n</tr>\n<tr>\n<td><code>VbStrConv.Narrow</code> <sup>*</sup></td>\n<td>Converts wide (full-width) characters in the string to narrow (half-width) characters.</td>\n</tr>\n<tr>\n<td><code>VbStrConv.Katakana</code> <sup>**</sup></td>\n<td>Converts Hiragana characters in the string to Katakana characters.</td>\n</tr>\n<tr>\n<td><code>VbStrConv.Hiragana</code> <sup>**</sup></td>\n<td>Converts Katakana characters in the string to Hiragana characters.</td>\n</tr>\n<tr>\n<td><code>VbStrConv.SimplifiedChinese</code> <sup>*</sup></td>\n<td>Converts Traditional Chinese characters to Simplified Chinese.</td>\n</tr>\n<tr>\n<td><code>VbStrConv.TraditionalChinese</code> <sup>*</sup></td>\n<td>Converts Simplified Chinese characters to Traditional Chinese.</td>\n</tr>\n</tbody>\n</table>\n<p> <sup>*</sup> Applies to Asian locales.  </p>\n<p> <sup>**</sup> Applies to Japan only.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> These constants are specified in the .NET Framework common language runtime. As a result, they can be used anywhere in your code in place of the actual values. Most can be combined (for example, <code>UpperCase + Wide</code>), except when they are mutually exclusive (for example, <code>VbStrConv.Wide + VbStrConv.Narrow</code>).  </p>\n</div>\n<p> The following are valid word separators for proper casing: Null (<code>Chr$(0)</code>), horizontal tab (<code>Chr$(9)</code>), line feed (<code>Chr$(10)</code>), vertical tab (<code>Chr$(11)</code>), form feed (<code>Chr$(12)</code>), carriage return (<code>Chr$(13)</code>), space (single-byte character set) (<code>Chr$(32)</code>). The actual value for a space, which can be full or half width, varies by country/region for East Asian cultures.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example converts text into all lowercase letters.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#6\">        Dim sText As String = &quot;Hello World&quot;\n        &#39; Returns &quot;hello world&quot;.\n        Dim sNewText As String = StrConv(sText, VbStrConv.LowerCase)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_StrDup_System_Int32_System_Char_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_StrDup_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StrDup(Int32,Char)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string or object consisting of the specified character repeated the specified number of times.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string StrDup (int Number, char Character);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Number</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. <code>Integer</code> expression. The length to the string to be returned.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>Character</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. Any valid <code>Char</code>, <code>String</code>, or <code>Object</code> expression. Only the first character of the expression will be used. If Character is of type <code>Object</code>, it must contain either a <code>Char</code> or a <code>String</code>value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Returns a string or object consisting of the specified character repeated the specified number of times.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>Number</code> is less than 0 or <code>Character</code> type is not valid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>Character</code> is <code>Nothing</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This function returns a <code>String</code> made up of repeated characters. The character that makes up the string is the first character in the <code>Character</code> argument, and it is duplicated <code>Number</code> number of times.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the <code>StrDup</code> function to return a string of duplicated characters.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#34\">        Dim aString As String = &quot;Wow! What a string!&quot;\n        Dim aObject As New Object\n        Dim TestString As String\n        aObject = &quot;This is a String contained within an Object&quot;\n        &#39; Returns &quot;PPPPP&quot;\n        TestString = StrDup(5, &quot;P&quot;)\n        &#39; Returns &quot;WWWWWWWWWW&quot;\n        TestString = StrDup(10, aString)\n        &#39; Returns &quot;TTTTTT&quot;\n        TestString = CStr(StrDup(6, aObject))\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_StrDup_System_Int32_System_Object_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_StrDup_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StrDup(Int32,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string or object consisting of the specified character repeated the specified number of times.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static object StrDup (int Number, object Character);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Number</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. <code>Integer</code> expression. The length to the string to be returned.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>Character</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. Any valid <code>Char</code>, <code>String</code>, or <code>Object</code> expression. Only the first character of the expression will be used. If Character is of type <code>Object</code>, it must contain either a <code>Char</code> or a <code>String</code>value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>Returns a string or object consisting of the specified character repeated the specified number of times.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>Number</code> is less than 0 or <code>Character</code> type is not valid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>Character</code> is <code>Nothing</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This function returns a <code>String</code> made up of repeated characters. The character that makes up the string is the first character in the <code>Character</code> argument, and it is duplicated <code>Number</code> number of times.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the <code>StrDup</code> function to return a string of duplicated characters.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#34\">        Dim aString As String = &quot;Wow! What a string!&quot;\n        Dim aObject As New Object\n        Dim TestString As String\n        aObject = &quot;This is a String contained within an Object&quot;\n        &#39; Returns &quot;PPPPP&quot;\n        TestString = StrDup(5, &quot;P&quot;)\n        &#39; Returns &quot;WWWWWWWWWW&quot;\n        TestString = StrDup(10, aString)\n        &#39; Returns &quot;TTTTTT&quot;\n        TestString = CStr(StrDup(6, aObject))\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_StrDup_System_Int32_System_String_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_StrDup_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StrDup(Int32,String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string or object consisting of the specified character repeated the specified number of times.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string StrDup (int Number, string Character);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Number</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. <code>Integer</code> expression. The length to the string to be returned.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>Character</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. Any valid <code>Char</code>, <code>String</code>, or <code>Object</code> expression. Only the first character of the expression will be used. If Character is of type <code>Object</code>, it must contain either a <code>Char</code> or a <code>String</code>value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Returns a string or object consisting of the specified character repeated the specified number of times.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>Number</code> is less than 0 or <code>Character</code> type is not valid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>Character</code> is <code>Nothing</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This function returns a <code>String</code> made up of repeated characters. The character that makes up the string is the first character in the <code>Character</code> argument, and it is duplicated <code>Number</code> number of times.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the <code>StrDup</code> function to return a string of duplicated characters.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#34\">        Dim aString As String = &quot;Wow! What a string!&quot;\n        Dim aObject As New Object\n        Dim TestString As String\n        aObject = &quot;This is a String contained within an Object&quot;\n        &#39; Returns &quot;PPPPP&quot;\n        TestString = StrDup(5, &quot;P&quot;)\n        &#39; Returns &quot;WWWWWWWWWW&quot;\n        TestString = StrDup(10, aString)\n        &#39; Returns &quot;TTTTTT&quot;\n        TestString = CStr(StrDup(6, aObject))\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_StrReverse_System_String_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_StrReverse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StrReverse(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string in which the character order of a specified string is reversed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string StrReverse (string Expression);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. String expression whose characters are to be reversed. If <code>Expression</code> is a zero-length string (&quot;&quot;), a zero-length string is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Returns a string in which the character order of a specified string is reversed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>StrReverse</code> function returns a string that contains the same characters as <code>Expression</code>, but in the opposite order.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-vb\" name=\"VbVbalrStrings#29\">        Dim TestString As String = &quot;ABCDEFG&quot;\n        &#39; Returns &quot;GFEDCBA&quot;.\n        Dim revString As String = StrReverse(TestString)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_Trim_System_String_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_Trim_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Trim(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string containing a copy of a specified string with no leading spaces (<code>LTrim</code>), no trailing spaces (<code>RTrim</code>), or no leading or trailing spaces (<code>Trim</code>).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Trim (string str);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>str</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. Any valid <code>String</code> expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Returns a string containing a copy of a specified string with no leading spaces (<code>LTrim</code>), no trailing spaces (<code>RTrim</code>), or no leading or trailing spaces (<code>Trim</code>).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>LTrim</code>, <code>RTrim</code>, and <code>Trim</code> functions remove spaces from the ends of strings.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the <code>LTrim</code> function to strip leading spaces and the <code>RTrim</code> function to strip trailing spaces from a string variable. It uses the <code>Trim</code> function to strip both types of spaces.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#25\">        &#39; Initializes string.\n        Dim TestString As String = &quot;  &lt;-Trim-&gt;  &quot;\n        Dim TrimString As String\n        &#39; Returns &quot;&lt;-Trim-&gt;  &quot;.\n        TrimString = LTrim(TestString)\n        &#39; Returns &quot;  &lt;-Trim-&gt;&quot;.\n        TrimString = RTrim(TestString)\n        &#39; Returns &quot;&lt;-Trim-&gt;&quot;.\n        TrimString = LTrim(RTrim(TestString))\n        &#39; Using the Trim function alone achieves the same result.\n        &#39; Returns &quot;&lt;-Trim-&gt;&quot;.\n        TrimString = Trim(TestString)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_UCase_System_Char_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_UCase_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UCase(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string or character containing the specified string converted to uppercase.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static char UCase (char Value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. Any valid <code>String</code> or <code>Char</code> expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p>Returns a string or character containing the specified string converted to uppercase.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Only lowercase letters are converted to uppercase; all uppercase letters and nonletter characters remain unchanged.  </p>\n<p> This function uses the application&#39;s culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <a class=\"xref\" href=\"system.string#System_String_Compare_\" data-linktype=\"relative-path\">Compare</a> method, and pass <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> or <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> for the <code>comparisonType</code> argument. For more information, see <a href=\"../Topic/How%20Culture%20Affects%20Strings%20in%20Visual%20Basic.md\" data-linktype=\"relative-path\">How Culture Affects Strings in Visual Basic</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the <code>UCase</code> function to return an uppercase version of a string.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#31\">        &#39; String to convert.\n        Dim LowerCase As String = &quot;Hello World 1234&quot;\n        &#39; Returns &quot;HELLO WORLD 1234&quot;.\n        Dim UpperCase As String = UCase(LowerCase)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Strings_UCase_System_String_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Strings_UCase_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UCase(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string or character containing the specified string converted to uppercase.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string UCase (string Value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. Any valid <code>String</code> or <code>Char</code> expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Returns a string or character containing the specified string converted to uppercase.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Only lowercase letters are converted to uppercase; all uppercase letters and nonletter characters remain unchanged.  </p>\n<p> This function uses the application&#39;s culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <a class=\"xref\" href=\"system.string#System_String_Compare_\" data-linktype=\"relative-path\">Compare</a> method, and pass <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> or <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> for the <code>comparisonType</code> argument. For more information, see <a href=\"../Topic/How%20Culture%20Affects%20Strings%20in%20Visual%20Basic.md\" data-linktype=\"relative-path\">How Culture Affects Strings in Visual Basic</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the <code>UCase</code> function to return an uppercase version of a string.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#31\">        &#39; String to convert.\n        Dim LowerCase As String = &quot;Hello World 1234&quot;\n        &#39; Returns &quot;HELLO WORLD 1234&quot;.\n        Dim UpperCase As String = UCase(LowerCase)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/Microsoft.VisualBasic.Strings.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/Microsoft.VisualBasic.Strings.yml\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.Strings\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.Strings.Asc\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.Strings.AscW\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.Strings.Chr\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.Strings.ChrW\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.Strings.Filter\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.Strings.Format\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.Strings.FormatCurrency\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.Strings.FormatDateTime\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.Strings.FormatNumber\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.Strings.FormatPercent\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.Strings.GetChar\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.Strings.InStr\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.Strings.InStrRev\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.Strings.Join\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.Strings.LCase\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.Strings.Left\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.Strings.Len\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.Strings.LSet\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.Strings.LTrim\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.Strings.Mid\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.Strings.Replace\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.Strings.Right\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.Strings.RSet\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.Strings.RTrim\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.Strings.Space\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.Strings.Split\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.Strings.StrComp\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.Strings.StrConv\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.Strings.StrDup\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.Strings.StrReverse\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.Strings.Trim\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.Strings.UCase\">\r\n<meta name=\"APILocation\" content=\"Microsoft.VisualBasic.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"c259c6a3-147c-9aad-9577-6099a0df99a6\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\Microsoft.VisualBasic\\Strings.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"The Strings module contains procedures used to perform string operations.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/Microsoft.VisualBasic/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"Microsoft.VisualBasic.Strings\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/Microsoft.VisualBasic.Strings.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/Microsoft.VisualBasic.Strings.yml","open_to_public_contributors":true,"api_name":["Microsoft.VisualBasic.Strings","Microsoft.VisualBasic.Strings.Asc","Microsoft.VisualBasic.Strings.AscW","Microsoft.VisualBasic.Strings.Chr","Microsoft.VisualBasic.Strings.ChrW","Microsoft.VisualBasic.Strings.Filter","Microsoft.VisualBasic.Strings.Format","Microsoft.VisualBasic.Strings.FormatCurrency","Microsoft.VisualBasic.Strings.FormatDateTime","Microsoft.VisualBasic.Strings.FormatNumber","Microsoft.VisualBasic.Strings.FormatPercent","Microsoft.VisualBasic.Strings.GetChar","Microsoft.VisualBasic.Strings.InStr","Microsoft.VisualBasic.Strings.InStrRev","Microsoft.VisualBasic.Strings.Join","Microsoft.VisualBasic.Strings.LCase","Microsoft.VisualBasic.Strings.Left","Microsoft.VisualBasic.Strings.Len","Microsoft.VisualBasic.Strings.LSet","Microsoft.VisualBasic.Strings.LTrim","Microsoft.VisualBasic.Strings.Mid","Microsoft.VisualBasic.Strings.Replace","Microsoft.VisualBasic.Strings.Right","Microsoft.VisualBasic.Strings.RSet","Microsoft.VisualBasic.Strings.RTrim","Microsoft.VisualBasic.Strings.Space","Microsoft.VisualBasic.Strings.Split","Microsoft.VisualBasic.Strings.StrComp","Microsoft.VisualBasic.Strings.StrConv","Microsoft.VisualBasic.Strings.StrDup","Microsoft.VisualBasic.Strings.StrReverse","Microsoft.VisualBasic.Strings.Trim","Microsoft.VisualBasic.Strings.UCase"],"api_location":["Microsoft.VisualBasic.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["Microsoft.VisualBasic.Strings","Microsoft::VisualBasic::Strings","Microsoft.VisualBasic.Strings.Asc","Microsoft::VisualBasic::Strings::Asc","Microsoft.VisualBasic.Strings.AscW","Microsoft::VisualBasic::Strings::AscW","Microsoft.VisualBasic.Strings.Chr","Microsoft::VisualBasic::Strings::Chr","Microsoft.VisualBasic.Strings.ChrW","Microsoft::VisualBasic::Strings::ChrW","Microsoft.VisualBasic.Strings.Filter","Microsoft::VisualBasic::Strings::Filter","Microsoft.VisualBasic.Strings.Format","Microsoft::VisualBasic::Strings::Format","Microsoft.VisualBasic.Strings.FormatCurrency","Microsoft::VisualBasic::Strings::FormatCurrency","Microsoft.VisualBasic.Strings.FormatDateTime","Microsoft::VisualBasic::Strings::FormatDateTime","Microsoft.VisualBasic.Strings.FormatNumber","Microsoft::VisualBasic::Strings::FormatNumber","Microsoft.VisualBasic.Strings.FormatPercent","Microsoft::VisualBasic::Strings::FormatPercent","Microsoft.VisualBasic.Strings.GetChar","Microsoft::VisualBasic::Strings::GetChar","Microsoft.VisualBasic.Strings.InStr","Microsoft::VisualBasic::Strings::InStr","Microsoft.VisualBasic.Strings.InStrRev","Microsoft::VisualBasic::Strings::InStrRev","Microsoft.VisualBasic.Strings.Join","Microsoft::VisualBasic::Strings::Join","Microsoft.VisualBasic.Strings.LCase","Microsoft::VisualBasic::Strings::LCase","Microsoft.VisualBasic.Strings.Left","Microsoft::VisualBasic::Strings::Left","Microsoft.VisualBasic.Strings.Len","Microsoft::VisualBasic::Strings::Len","Microsoft.VisualBasic.Strings.LSet","Microsoft::VisualBasic::Strings::LSet","Microsoft.VisualBasic.Strings.LTrim","Microsoft::VisualBasic::Strings::LTrim","Microsoft.VisualBasic.Strings.Mid","Microsoft::VisualBasic::Strings::Mid","Microsoft.VisualBasic.Strings.Replace","Microsoft::VisualBasic::Strings::Replace","Microsoft.VisualBasic.Strings.Right","Microsoft::VisualBasic::Strings::Right","Microsoft.VisualBasic.Strings.RSet","Microsoft::VisualBasic::Strings::RSet","Microsoft.VisualBasic.Strings.RTrim","Microsoft::VisualBasic::Strings::RTrim","Microsoft.VisualBasic.Strings.Space","Microsoft::VisualBasic::Strings::Space","Microsoft.VisualBasic.Strings.Split","Microsoft::VisualBasic::Strings::Split","Microsoft.VisualBasic.Strings.StrComp","Microsoft::VisualBasic::Strings::StrComp","Microsoft.VisualBasic.Strings.StrConv","Microsoft::VisualBasic::Strings::StrConv","Microsoft.VisualBasic.Strings.StrDup","Microsoft::VisualBasic::Strings::StrDup","Microsoft.VisualBasic.Strings.StrReverse","Microsoft::VisualBasic::Strings::StrReverse","Microsoft.VisualBasic.Strings.Trim","Microsoft::VisualBasic::Strings::Trim","Microsoft.VisualBasic.Strings.UCase","Microsoft::VisualBasic::Strings::UCase"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"c259c6a3-147c-9aad-9577-6099a0df99a6","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\Microsoft.VisualBasic\\Strings.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/Microsoft.VisualBasic/Strings.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Strings class | Microsoft Docs","_op_ogTitle":"Strings class","description":"The Strings module contains procedures used to perform string operations.\n","toc_asset_id":"_splitted/Microsoft.VisualBasic/toc.json","toc_rel":"_splitted/Microsoft.VisualBasic/toc.json","source_url":"","ms.assetid":"Microsoft.VisualBasic.Strings","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/microsoft.visualbasic.strings","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/microsoft.visualbasic.strings","fileRelativePath":"Microsoft.VisualBasic.Strings.html"},"themesRelativePathToOutputRoot":"_themes/"}