{"content":"    \r\n    <h1 id=\"System_Windows_Automation_WindowPattern_WindowPatternInformation\">\r\n      <span class=\"lang-csharp\">WindowPattern+WindowPatternInformation</span>\r\n        Struct\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides access to the property values of a <a class=\"xref\" href=\"system.windows.automation.windowpattern\" data-linktype=\"relative-path\">WindowPattern</a> object using its <span class=\"xref\">stem.Windows.Automation.WindowPattern.Current*</span> or <span class=\"xref\">stem.Windows.Automation.WindowPattern.Cached*</span> accessors.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public struct WindowPattern.WindowPatternInformation</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">System.ValueType</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">WindowPattern+WindowPatternInformation</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_WindowPattern_WindowPatternInformation_CanMaximize\" data-linktype=\"self-bookmark\">CanMaximize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that specifies whether the <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a> can be maximized.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_WindowPattern_WindowPatternInformation_CanMinimize\" data-linktype=\"self-bookmark\">CanMinimize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that specifies whether the current <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a> can be minimized.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_WindowPattern_WindowPatternInformation_IsModal\" data-linktype=\"self-bookmark\">IsModal</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that specifies whether the <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a> is modal.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_WindowPattern_WindowPatternInformation_IsTopmost\" data-linktype=\"self-bookmark\">IsTopmost</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that specifies whether the <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a> is the topmost element in the z-order.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_WindowPattern_WindowPatternInformation_WindowInteractionState\" data-linktype=\"self-bookmark\">WindowInteractionState</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.windows.automation.windowinteractionstate\" data-linktype=\"relative-path\">WindowInteractionState</a> of the <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_WindowPattern_WindowPatternInformation_WindowVisualState\" data-linktype=\"self-bookmark\">WindowVisualState</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.windows.automation.windowvisualstate\" data-linktype=\"relative-path\">WindowVisualState</a> of the <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_WindowPattern_WindowPatternInformation_CanMaximize\">\r\n    \r\n            <a id=\"System_Windows_Automation_WindowPattern_WindowPatternInformation_CanMaximize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CanMaximize</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that specifies whether the <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a> can be maximized.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool CanMaximize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a> can be maximized; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>In the following example, a <a class=\"xref\" href=\"system.windows.automation.windowpattern\" data-linktype=\"relative-path\">WindowPattern</a>control pattern is obtained from an <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a> and is subsequently used to specify the visual state of the <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"UIAWindowPattern_snip#101\">&#39;&#39;&#39;------------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Obtains a WindowPattern control pattern from an automation element.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;targetControl&quot;&gt;\n&#39;&#39;&#39; The automation element of interest.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;returns&gt;\n&#39;&#39;&#39; A WindowPattern object.\n&#39;&#39;&#39; &lt;/returns&gt;\n&#39;&#39;&#39;------------------------------------------------------------------------\nPrivate Function GetWindowPattern(ByVal targetControl As AutomationElement) As WindowPattern\n    Dim windowPattern As WindowPattern = Nothing\n\n    Try\n        windowPattern = DirectCast( _\n        targetControl.GetCurrentPattern(windowPattern.Pattern), _\n        WindowPattern)\n    Catch\n        &#39; object doesn&#39;t support the WindowPattern control pattern\n        Return Nothing\n    End Try\n    &#39; Make sure the element is usable.\n    If False = windowPattern.WaitForInputIdle(10000) Then\n        &#39; Object not responding in a timely manner\n        Return Nothing\n    End If\n    Return windowPattern\nEnd Function &#39;GetWindowPattern\n\n</code></pre><pre><code class=\"lang-cs\" name=\"UIAWindowPattern_snip#101\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Obtains a WindowPattern control pattern from an automation element.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;targetControl&quot;&gt;\n/// The automation element of interest.\n/// &lt;/param&gt;\n/// &lt;returns&gt;\n/// A WindowPattern object.\n/// &lt;/returns&gt;\n///--------------------------------------------------------------------\nprivate WindowPattern GetWindowPattern(AutomationElement targetControl)\n{\n    WindowPattern windowPattern = null;\n\n    try\n    {\n        windowPattern =\n            targetControl.GetCurrentPattern(WindowPattern.Pattern)\n            as WindowPattern;\n    }\n    catch (InvalidOperationException)\n    {\n        // object doesn&#39;t support the WindowPattern control pattern\n        return null;\n    }\n    // Make sure the element is usable.\n    if (false == windowPattern.WaitForInputIdle(10000))\n    {\n        // Object not responding in a timely manner\n        return null;\n    }\n    return windowPattern;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIAWindowPattern_snip#103\">&#39;&#39;&#39;------------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Calls the WindowPattern.SetVisualState() method for an associated \n&#39;&#39;&#39; automation element.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;windowPattern&quot;&gt;\n&#39;&#39;&#39; The WindowPattern control pattern obtained from\n&#39;&#39;&#39; an automation element.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;param name=&quot;visualState&quot;&gt;\n&#39;&#39;&#39; The specified WindowVisualState enumeration value.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39;------------------------------------------------------------------------\nPrivate Sub SetVisualState(ByVal windowPattern As WindowPattern, _\n    ByVal visualState As WindowVisualState)\n    Try\n        If (windowPattern.Current.WindowInteractionState = _\n                WindowInteractionState.ReadyForUserInteraction) Then\n            Select Case visualState\n                Case WindowVisualState.Maximized\n                    &#39; Confirm that the element can be maximized\n                    If ((windowPattern.Current.CanMaximize) &amp; _\n                            Not (windowPattern.Current.IsModal)) Then\n                        windowPattern.SetWindowVisualState( _\n                        WindowVisualState.Maximized)\n                    End If\n                    &#39; TODO: additional processing\n                Case WindowVisualState.Minimized\n                    &#39; Confirm that the element can be minimized\n                    If ((windowPattern.Current.CanMinimize) &amp; _\n                            Not (windowPattern.Current.IsModal)) Then\n                        windowPattern.SetWindowVisualState( _\n                        WindowVisualState.Minimized)\n                    End If\n                    &#39; TODO: additional processing\n                Case WindowVisualState.Normal\n                    windowPattern.SetWindowVisualState( _\n                    WindowVisualState.Normal)\n                Case Else\n                    windowPattern.SetWindowVisualState( _\n                    WindowVisualState.Normal)\n            End Select\n            &#39; TODO: additional processing\n        End If\n    Catch exc As InvalidOperationException\n        &#39; object is not able to perform the requested action\n        Return\n    End Try\nEnd Sub &#39;SetVisualState\n\n</code></pre><pre><code class=\"lang-cs\" name=\"UIAWindowPattern_snip#103\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Calls the WindowPattern.SetVisualState() method for an associated \n/// automation element.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;windowPattern&quot;&gt;\n/// The WindowPattern control pattern obtained from\n/// an automation element.\n/// &lt;/param&gt;\n/// &lt;param name=&quot;visualState&quot;&gt;\n/// The specified WindowVisualState enumeration value.\n/// &lt;/param&gt;\n///--------------------------------------------------------------------\nprivate void SetVisualState(WindowPattern windowPattern, \n    WindowVisualState visualState)\n{\n    try\n    {\n        if (windowPattern.Current.WindowInteractionState ==\n            WindowInteractionState.ReadyForUserInteraction)\n        {\n            switch (visualState)\n            {\n                case WindowVisualState.Maximized:\n                    // Confirm that the element can be maximized\n                    if ((windowPattern.Current.CanMaximize) &amp;&amp; \n                        !(windowPattern.Current.IsModal))\n                    {\n                        windowPattern.SetWindowVisualState(\n                            WindowVisualState.Maximized);\n                        // TODO: additional processing\n                    }\n                    break;\n                case WindowVisualState.Minimized:\n                    // Confirm that the element can be minimized\n                    if ((windowPattern.Current.CanMinimize) &amp;&amp;\n                        !(windowPattern.Current.IsModal))\n                    {\n                        windowPattern.SetWindowVisualState(\n                            WindowVisualState.Minimized);\n                        // TODO: additional processing\n                    }\n                    break;\n                case WindowVisualState.Normal:\n                    windowPattern.SetWindowVisualState(\n                        WindowVisualState.Normal);\n                    break;\n                default:\n                    windowPattern.SetWindowVisualState(\n                        WindowVisualState.Normal);\n                    // TODO: additional processing\n                    break;\n            }\n        }\n    }\n    catch (InvalidOperationException)\n    {\n        // object is not able to perform the requested action\n        return;\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_WindowPattern_WindowPatternInformation_CanMinimize\">\r\n    \r\n            <a id=\"System_Windows_Automation_WindowPattern_WindowPatternInformation_CanMinimize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CanMinimize</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that specifies whether the current <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a> can be minimized.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool CanMinimize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a> can be minimized; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>In the following example, a <a class=\"xref\" href=\"system.windows.automation.windowpattern\" data-linktype=\"relative-path\">WindowPattern</a>control pattern is obtained from an <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a> and is subsequently used to specify the visual state of the <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"UIAWindowPattern_snip#101\">&#39;&#39;&#39;------------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Obtains a WindowPattern control pattern from an automation element.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;targetControl&quot;&gt;\n&#39;&#39;&#39; The automation element of interest.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;returns&gt;\n&#39;&#39;&#39; A WindowPattern object.\n&#39;&#39;&#39; &lt;/returns&gt;\n&#39;&#39;&#39;------------------------------------------------------------------------\nPrivate Function GetWindowPattern(ByVal targetControl As AutomationElement) As WindowPattern\n    Dim windowPattern As WindowPattern = Nothing\n\n    Try\n        windowPattern = DirectCast( _\n        targetControl.GetCurrentPattern(windowPattern.Pattern), _\n        WindowPattern)\n    Catch\n        &#39; object doesn&#39;t support the WindowPattern control pattern\n        Return Nothing\n    End Try\n    &#39; Make sure the element is usable.\n    If False = windowPattern.WaitForInputIdle(10000) Then\n        &#39; Object not responding in a timely manner\n        Return Nothing\n    End If\n    Return windowPattern\nEnd Function &#39;GetWindowPattern\n\n</code></pre><pre><code class=\"lang-cs\" name=\"UIAWindowPattern_snip#101\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Obtains a WindowPattern control pattern from an automation element.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;targetControl&quot;&gt;\n/// The automation element of interest.\n/// &lt;/param&gt;\n/// &lt;returns&gt;\n/// A WindowPattern object.\n/// &lt;/returns&gt;\n///--------------------------------------------------------------------\nprivate WindowPattern GetWindowPattern(AutomationElement targetControl)\n{\n    WindowPattern windowPattern = null;\n\n    try\n    {\n        windowPattern =\n            targetControl.GetCurrentPattern(WindowPattern.Pattern)\n            as WindowPattern;\n    }\n    catch (InvalidOperationException)\n    {\n        // object doesn&#39;t support the WindowPattern control pattern\n        return null;\n    }\n    // Make sure the element is usable.\n    if (false == windowPattern.WaitForInputIdle(10000))\n    {\n        // Object not responding in a timely manner\n        return null;\n    }\n    return windowPattern;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIAWindowPattern_snip#103\">&#39;&#39;&#39;------------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Calls the WindowPattern.SetVisualState() method for an associated \n&#39;&#39;&#39; automation element.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;windowPattern&quot;&gt;\n&#39;&#39;&#39; The WindowPattern control pattern obtained from\n&#39;&#39;&#39; an automation element.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;param name=&quot;visualState&quot;&gt;\n&#39;&#39;&#39; The specified WindowVisualState enumeration value.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39;------------------------------------------------------------------------\nPrivate Sub SetVisualState(ByVal windowPattern As WindowPattern, _\n    ByVal visualState As WindowVisualState)\n    Try\n        If (windowPattern.Current.WindowInteractionState = _\n                WindowInteractionState.ReadyForUserInteraction) Then\n            Select Case visualState\n                Case WindowVisualState.Maximized\n                    &#39; Confirm that the element can be maximized\n                    If ((windowPattern.Current.CanMaximize) &amp; _\n                            Not (windowPattern.Current.IsModal)) Then\n                        windowPattern.SetWindowVisualState( _\n                        WindowVisualState.Maximized)\n                    End If\n                    &#39; TODO: additional processing\n                Case WindowVisualState.Minimized\n                    &#39; Confirm that the element can be minimized\n                    If ((windowPattern.Current.CanMinimize) &amp; _\n                            Not (windowPattern.Current.IsModal)) Then\n                        windowPattern.SetWindowVisualState( _\n                        WindowVisualState.Minimized)\n                    End If\n                    &#39; TODO: additional processing\n                Case WindowVisualState.Normal\n                    windowPattern.SetWindowVisualState( _\n                    WindowVisualState.Normal)\n                Case Else\n                    windowPattern.SetWindowVisualState( _\n                    WindowVisualState.Normal)\n            End Select\n            &#39; TODO: additional processing\n        End If\n    Catch exc As InvalidOperationException\n        &#39; object is not able to perform the requested action\n        Return\n    End Try\nEnd Sub &#39;SetVisualState\n\n</code></pre><pre><code class=\"lang-cs\" name=\"UIAWindowPattern_snip#103\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Calls the WindowPattern.SetVisualState() method for an associated \n/// automation element.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;windowPattern&quot;&gt;\n/// The WindowPattern control pattern obtained from\n/// an automation element.\n/// &lt;/param&gt;\n/// &lt;param name=&quot;visualState&quot;&gt;\n/// The specified WindowVisualState enumeration value.\n/// &lt;/param&gt;\n///--------------------------------------------------------------------\nprivate void SetVisualState(WindowPattern windowPattern, \n    WindowVisualState visualState)\n{\n    try\n    {\n        if (windowPattern.Current.WindowInteractionState ==\n            WindowInteractionState.ReadyForUserInteraction)\n        {\n            switch (visualState)\n            {\n                case WindowVisualState.Maximized:\n                    // Confirm that the element can be maximized\n                    if ((windowPattern.Current.CanMaximize) &amp;&amp; \n                        !(windowPattern.Current.IsModal))\n                    {\n                        windowPattern.SetWindowVisualState(\n                            WindowVisualState.Maximized);\n                        // TODO: additional processing\n                    }\n                    break;\n                case WindowVisualState.Minimized:\n                    // Confirm that the element can be minimized\n                    if ((windowPattern.Current.CanMinimize) &amp;&amp;\n                        !(windowPattern.Current.IsModal))\n                    {\n                        windowPattern.SetWindowVisualState(\n                            WindowVisualState.Minimized);\n                        // TODO: additional processing\n                    }\n                    break;\n                case WindowVisualState.Normal:\n                    windowPattern.SetWindowVisualState(\n                        WindowVisualState.Normal);\n                    break;\n                default:\n                    windowPattern.SetWindowVisualState(\n                        WindowVisualState.Normal);\n                    // TODO: additional processing\n                    break;\n            }\n        }\n    }\n    catch (InvalidOperationException)\n    {\n        // object is not able to perform the requested action\n        return;\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_WindowPattern_WindowPatternInformation_IsModal\">\r\n    \r\n            <a id=\"System_Windows_Automation_WindowPattern_WindowPatternInformation_IsModal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsModal</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that specifies whether the <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a> is modal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsModal { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a> is modal; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>In the following example, a <a class=\"xref\" href=\"system.windows.automation.windowpattern\" data-linktype=\"relative-path\">WindowPattern</a>control pattern is obtained from an <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a> and is subsequently used to specify the visual state of the <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"UIAWindowPattern_snip#101\">&#39;&#39;&#39;------------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Obtains a WindowPattern control pattern from an automation element.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;targetControl&quot;&gt;\n&#39;&#39;&#39; The automation element of interest.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;returns&gt;\n&#39;&#39;&#39; A WindowPattern object.\n&#39;&#39;&#39; &lt;/returns&gt;\n&#39;&#39;&#39;------------------------------------------------------------------------\nPrivate Function GetWindowPattern(ByVal targetControl As AutomationElement) As WindowPattern\n    Dim windowPattern As WindowPattern = Nothing\n\n    Try\n        windowPattern = DirectCast( _\n        targetControl.GetCurrentPattern(windowPattern.Pattern), _\n        WindowPattern)\n    Catch\n        &#39; object doesn&#39;t support the WindowPattern control pattern\n        Return Nothing\n    End Try\n    &#39; Make sure the element is usable.\n    If False = windowPattern.WaitForInputIdle(10000) Then\n        &#39; Object not responding in a timely manner\n        Return Nothing\n    End If\n    Return windowPattern\nEnd Function &#39;GetWindowPattern\n\n</code></pre><pre><code class=\"lang-cs\" name=\"UIAWindowPattern_snip#101\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Obtains a WindowPattern control pattern from an automation element.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;targetControl&quot;&gt;\n/// The automation element of interest.\n/// &lt;/param&gt;\n/// &lt;returns&gt;\n/// A WindowPattern object.\n/// &lt;/returns&gt;\n///--------------------------------------------------------------------\nprivate WindowPattern GetWindowPattern(AutomationElement targetControl)\n{\n    WindowPattern windowPattern = null;\n\n    try\n    {\n        windowPattern =\n            targetControl.GetCurrentPattern(WindowPattern.Pattern)\n            as WindowPattern;\n    }\n    catch (InvalidOperationException)\n    {\n        // object doesn&#39;t support the WindowPattern control pattern\n        return null;\n    }\n    // Make sure the element is usable.\n    if (false == windowPattern.WaitForInputIdle(10000))\n    {\n        // Object not responding in a timely manner\n        return null;\n    }\n    return windowPattern;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIAWindowPattern_snip#103\">&#39;&#39;&#39;------------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Calls the WindowPattern.SetVisualState() method for an associated \n&#39;&#39;&#39; automation element.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;windowPattern&quot;&gt;\n&#39;&#39;&#39; The WindowPattern control pattern obtained from\n&#39;&#39;&#39; an automation element.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;param name=&quot;visualState&quot;&gt;\n&#39;&#39;&#39; The specified WindowVisualState enumeration value.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39;------------------------------------------------------------------------\nPrivate Sub SetVisualState(ByVal windowPattern As WindowPattern, _\n    ByVal visualState As WindowVisualState)\n    Try\n        If (windowPattern.Current.WindowInteractionState = _\n                WindowInteractionState.ReadyForUserInteraction) Then\n            Select Case visualState\n                Case WindowVisualState.Maximized\n                    &#39; Confirm that the element can be maximized\n                    If ((windowPattern.Current.CanMaximize) &amp; _\n                            Not (windowPattern.Current.IsModal)) Then\n                        windowPattern.SetWindowVisualState( _\n                        WindowVisualState.Maximized)\n                    End If\n                    &#39; TODO: additional processing\n                Case WindowVisualState.Minimized\n                    &#39; Confirm that the element can be minimized\n                    If ((windowPattern.Current.CanMinimize) &amp; _\n                            Not (windowPattern.Current.IsModal)) Then\n                        windowPattern.SetWindowVisualState( _\n                        WindowVisualState.Minimized)\n                    End If\n                    &#39; TODO: additional processing\n                Case WindowVisualState.Normal\n                    windowPattern.SetWindowVisualState( _\n                    WindowVisualState.Normal)\n                Case Else\n                    windowPattern.SetWindowVisualState( _\n                    WindowVisualState.Normal)\n            End Select\n            &#39; TODO: additional processing\n        End If\n    Catch exc As InvalidOperationException\n        &#39; object is not able to perform the requested action\n        Return\n    End Try\nEnd Sub &#39;SetVisualState\n\n</code></pre><pre><code class=\"lang-cs\" name=\"UIAWindowPattern_snip#103\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Calls the WindowPattern.SetVisualState() method for an associated \n/// automation element.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;windowPattern&quot;&gt;\n/// The WindowPattern control pattern obtained from\n/// an automation element.\n/// &lt;/param&gt;\n/// &lt;param name=&quot;visualState&quot;&gt;\n/// The specified WindowVisualState enumeration value.\n/// &lt;/param&gt;\n///--------------------------------------------------------------------\nprivate void SetVisualState(WindowPattern windowPattern, \n    WindowVisualState visualState)\n{\n    try\n    {\n        if (windowPattern.Current.WindowInteractionState ==\n            WindowInteractionState.ReadyForUserInteraction)\n        {\n            switch (visualState)\n            {\n                case WindowVisualState.Maximized:\n                    // Confirm that the element can be maximized\n                    if ((windowPattern.Current.CanMaximize) &amp;&amp; \n                        !(windowPattern.Current.IsModal))\n                    {\n                        windowPattern.SetWindowVisualState(\n                            WindowVisualState.Maximized);\n                        // TODO: additional processing\n                    }\n                    break;\n                case WindowVisualState.Minimized:\n                    // Confirm that the element can be minimized\n                    if ((windowPattern.Current.CanMinimize) &amp;&amp;\n                        !(windowPattern.Current.IsModal))\n                    {\n                        windowPattern.SetWindowVisualState(\n                            WindowVisualState.Minimized);\n                        // TODO: additional processing\n                    }\n                    break;\n                case WindowVisualState.Normal:\n                    windowPattern.SetWindowVisualState(\n                        WindowVisualState.Normal);\n                    break;\n                default:\n                    windowPattern.SetWindowVisualState(\n                        WindowVisualState.Normal);\n                    // TODO: additional processing\n                    break;\n            }\n        }\n    }\n    catch (InvalidOperationException)\n    {\n        // object is not able to perform the requested action\n        return;\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_WindowPattern_WindowPatternInformation_IsTopmost\">\r\n    \r\n            <a id=\"System_Windows_Automation_WindowPattern_WindowPatternInformation_IsTopmost_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsTopmost</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that specifies whether the <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a> is the topmost element in the z-order.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsTopmost { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a> is topmost; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>In the following example, an <a class=\"xref\" href=\"system.windows.automation.automationpropertychangedeventhandler\" data-linktype=\"relative-path\">AutomationPropertyChangedEventHandler</a> is defined to listen for changes to the <a class=\"xref\" href=\"system.windows.automation.windowpattern#System_Windows_Automation_WindowPattern_IsTopmostProperty\" data-linktype=\"relative-path\">IsTopmostProperty</a> of an <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"UIAWindowPattern_snip#105\">&#39;&#39;&#39;--------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Register for automation property change events of interest.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;targetControl&quot;&gt;\n&#39;&#39;&#39; The automation element of interest.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39;--------------------------------------------------------------------\nPrivate Sub RegisterForPropertyChangedEvents( _\nByVal targetControl As AutomationElement)\n    Dim propertyChangeListener As AutomationPropertyChangedEventHandler = _\n        New AutomationPropertyChangedEventHandler(AddressOf _\n        OnTopmostPropertyChange)\n    Automation.AddAutomationPropertyChangedEventHandler( _\n        targetControl, _\n        TreeScope.Element, _\n        propertyChangeListener, _\n        WindowPattern.IsTopmostProperty)\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"UIAWindowPattern_snip#105\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Register for automation property change events of interest.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;targetControl&quot;&gt;\n/// The automation element of interest.\n/// &lt;/param&gt;\n///--------------------------------------------------------------------\nprivate void RegisterForPropertyChangedEvents(\n    AutomationElement targetControl)\n{\n    AutomationPropertyChangedEventHandler propertyChangeListener = \n        new AutomationPropertyChangedEventHandler(\n        OnTopmostPropertyChange);\n    Automation.AddAutomationPropertyChangedEventHandler(\n        targetControl, \n        TreeScope.Element, \n        propertyChangeListener, \n        WindowPattern.IsTopmostProperty);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIAWindowPattern_snip#106\">&#39;&#39;&#39;--------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Register for automation property change events of interest.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;src&quot;&gt;Object that raised the event.&lt;/param&gt;\n&#39;&#39;&#39; &lt;param name=&quot;e&quot;&gt;Event arguments.&lt;/param&gt;\n&#39;&#39;&#39;--------------------------------------------------------------------\nPrivate Sub OnTopmostPropertyChange(ByVal src As Object, _\nByVal e As AutomationPropertyChangedEventArgs)\n    &#39; Make sure the element still exists. Elements such as tooltips\n    &#39; can disappear before the event is processed.\n    Dim sourceElement As AutomationElement\n    Try\n        sourceElement = DirectCast(src, AutomationElement)\n    Catch exc As ElementNotAvailableException\n        Return\n    End Try\n    &#39; Get a WindowPattern from the source of the event.\n    Dim windowPattern As WindowPattern = GetWindowPattern(sourceElement)\n    If (WindowPattern.Current.IsTopmost) Then\n        &#39;TODO: event handling\n    End If\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"UIAWindowPattern_snip#106\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Register for automation property change events of interest.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;src&quot;&gt;Object that raised the event.&lt;/param&gt;\n/// &lt;param name=&quot;e&quot;&gt;Event arguments.&lt;/param&gt;\n///--------------------------------------------------------------------\nprivate void OnTopmostPropertyChange(object src, AutomationPropertyChangedEventArgs e)\n{\n    // Make sure the element still exists. Elements such as tooltips\n    // can disappear before the event is processed.\n    AutomationElement sourceElement;\n    try\n    {\n        sourceElement = src as AutomationElement;\n    }\n    catch (ElementNotAvailableException)\n    {\n        return;\n    }\n    \n    // Get a WindowPattern from the source of the event.\n    WindowPattern windowPattern = GetWindowPattern(sourceElement);\n    if (windowPattern.Current.IsTopmost)\n    {\n        //TODO: event handling\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_WindowPattern_WindowPatternInformation_WindowInteractionState\">\r\n    \r\n            <a id=\"System_Windows_Automation_WindowPattern_WindowPatternInformation_WindowInteractionState_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WindowInteractionState</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.windows.automation.windowinteractionstate\" data-linktype=\"relative-path\">WindowInteractionState</a> of the <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Automation.WindowInteractionState WindowInteractionState { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.automation.windowinteractionstate\" data-linktype=\"relative-path\">WindowInteractionState</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.automation.windowinteractionstate\" data-linktype=\"relative-path\">WindowInteractionState</a> of the <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a>. The default value is <a class=\"xref\" href=\"system.windows.automation.windowinteractionstate\" data-linktype=\"relative-path\">WindowInteractionState</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>In the following example, a <a class=\"xref\" href=\"system.windows.automation.windowpattern\" data-linktype=\"relative-path\">WindowPattern</a>control pattern is obtained from an <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a> and is subsequently used to specify the visual state of the <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"UIAWindowPattern_snip#101\">&#39;&#39;&#39;------------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Obtains a WindowPattern control pattern from an automation element.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;targetControl&quot;&gt;\n&#39;&#39;&#39; The automation element of interest.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;returns&gt;\n&#39;&#39;&#39; A WindowPattern object.\n&#39;&#39;&#39; &lt;/returns&gt;\n&#39;&#39;&#39;------------------------------------------------------------------------\nPrivate Function GetWindowPattern(ByVal targetControl As AutomationElement) As WindowPattern\n    Dim windowPattern As WindowPattern = Nothing\n\n    Try\n        windowPattern = DirectCast( _\n        targetControl.GetCurrentPattern(windowPattern.Pattern), _\n        WindowPattern)\n    Catch\n        &#39; object doesn&#39;t support the WindowPattern control pattern\n        Return Nothing\n    End Try\n    &#39; Make sure the element is usable.\n    If False = windowPattern.WaitForInputIdle(10000) Then\n        &#39; Object not responding in a timely manner\n        Return Nothing\n    End If\n    Return windowPattern\nEnd Function &#39;GetWindowPattern\n\n</code></pre><pre><code class=\"lang-cs\" name=\"UIAWindowPattern_snip#101\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Obtains a WindowPattern control pattern from an automation element.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;targetControl&quot;&gt;\n/// The automation element of interest.\n/// &lt;/param&gt;\n/// &lt;returns&gt;\n/// A WindowPattern object.\n/// &lt;/returns&gt;\n///--------------------------------------------------------------------\nprivate WindowPattern GetWindowPattern(AutomationElement targetControl)\n{\n    WindowPattern windowPattern = null;\n\n    try\n    {\n        windowPattern =\n            targetControl.GetCurrentPattern(WindowPattern.Pattern)\n            as WindowPattern;\n    }\n    catch (InvalidOperationException)\n    {\n        // object doesn&#39;t support the WindowPattern control pattern\n        return null;\n    }\n    // Make sure the element is usable.\n    if (false == windowPattern.WaitForInputIdle(10000))\n    {\n        // Object not responding in a timely manner\n        return null;\n    }\n    return windowPattern;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIAWindowPattern_snip#103\">&#39;&#39;&#39;------------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Calls the WindowPattern.SetVisualState() method for an associated \n&#39;&#39;&#39; automation element.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;windowPattern&quot;&gt;\n&#39;&#39;&#39; The WindowPattern control pattern obtained from\n&#39;&#39;&#39; an automation element.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;param name=&quot;visualState&quot;&gt;\n&#39;&#39;&#39; The specified WindowVisualState enumeration value.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39;------------------------------------------------------------------------\nPrivate Sub SetVisualState(ByVal windowPattern As WindowPattern, _\n    ByVal visualState As WindowVisualState)\n    Try\n        If (windowPattern.Current.WindowInteractionState = _\n                WindowInteractionState.ReadyForUserInteraction) Then\n            Select Case visualState\n                Case WindowVisualState.Maximized\n                    &#39; Confirm that the element can be maximized\n                    If ((windowPattern.Current.CanMaximize) &amp; _\n                            Not (windowPattern.Current.IsModal)) Then\n                        windowPattern.SetWindowVisualState( _\n                        WindowVisualState.Maximized)\n                    End If\n                    &#39; TODO: additional processing\n                Case WindowVisualState.Minimized\n                    &#39; Confirm that the element can be minimized\n                    If ((windowPattern.Current.CanMinimize) &amp; _\n                            Not (windowPattern.Current.IsModal)) Then\n                        windowPattern.SetWindowVisualState( _\n                        WindowVisualState.Minimized)\n                    End If\n                    &#39; TODO: additional processing\n                Case WindowVisualState.Normal\n                    windowPattern.SetWindowVisualState( _\n                    WindowVisualState.Normal)\n                Case Else\n                    windowPattern.SetWindowVisualState( _\n                    WindowVisualState.Normal)\n            End Select\n            &#39; TODO: additional processing\n        End If\n    Catch exc As InvalidOperationException\n        &#39; object is not able to perform the requested action\n        Return\n    End Try\nEnd Sub &#39;SetVisualState\n\n</code></pre><pre><code class=\"lang-cs\" name=\"UIAWindowPattern_snip#103\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Calls the WindowPattern.SetVisualState() method for an associated \n/// automation element.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;windowPattern&quot;&gt;\n/// The WindowPattern control pattern obtained from\n/// an automation element.\n/// &lt;/param&gt;\n/// &lt;param name=&quot;visualState&quot;&gt;\n/// The specified WindowVisualState enumeration value.\n/// &lt;/param&gt;\n///--------------------------------------------------------------------\nprivate void SetVisualState(WindowPattern windowPattern, \n    WindowVisualState visualState)\n{\n    try\n    {\n        if (windowPattern.Current.WindowInteractionState ==\n            WindowInteractionState.ReadyForUserInteraction)\n        {\n            switch (visualState)\n            {\n                case WindowVisualState.Maximized:\n                    // Confirm that the element can be maximized\n                    if ((windowPattern.Current.CanMaximize) &amp;&amp; \n                        !(windowPattern.Current.IsModal))\n                    {\n                        windowPattern.SetWindowVisualState(\n                            WindowVisualState.Maximized);\n                        // TODO: additional processing\n                    }\n                    break;\n                case WindowVisualState.Minimized:\n                    // Confirm that the element can be minimized\n                    if ((windowPattern.Current.CanMinimize) &amp;&amp;\n                        !(windowPattern.Current.IsModal))\n                    {\n                        windowPattern.SetWindowVisualState(\n                            WindowVisualState.Minimized);\n                        // TODO: additional processing\n                    }\n                    break;\n                case WindowVisualState.Normal:\n                    windowPattern.SetWindowVisualState(\n                        WindowVisualState.Normal);\n                    break;\n                default:\n                    windowPattern.SetWindowVisualState(\n                        WindowVisualState.Normal);\n                    // TODO: additional processing\n                    break;\n            }\n        }\n    }\n    catch (InvalidOperationException)\n    {\n        // object is not able to perform the requested action\n        return;\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_WindowPattern_WindowPatternInformation_WindowVisualState\">\r\n    \r\n            <a id=\"System_Windows_Automation_WindowPattern_WindowPatternInformation_WindowVisualState_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WindowVisualState</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.windows.automation.windowvisualstate\" data-linktype=\"relative-path\">WindowVisualState</a> of the <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Automation.WindowVisualState WindowVisualState { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.automation.windowvisualstate\" data-linktype=\"relative-path\">WindowVisualState</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.automation.windowvisualstate\" data-linktype=\"relative-path\">WindowVisualState</a> of the <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a>. The default value is <a class=\"xref\" href=\"system.windows.automation.windowvisualstate\" data-linktype=\"relative-path\">WindowVisualState</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>In the following example, a <a class=\"xref\" href=\"system.windows.automation.windowpattern\" data-linktype=\"relative-path\">WindowPattern</a>control pattern is obtained from an <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a> and is subsequently used to specify the visual state of the <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"UIAWindowPattern_snip#101\">&#39;&#39;&#39;------------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Obtains a WindowPattern control pattern from an automation element.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;targetControl&quot;&gt;\n&#39;&#39;&#39; The automation element of interest.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;returns&gt;\n&#39;&#39;&#39; A WindowPattern object.\n&#39;&#39;&#39; &lt;/returns&gt;\n&#39;&#39;&#39;------------------------------------------------------------------------\nPrivate Function GetWindowPattern(ByVal targetControl As AutomationElement) As WindowPattern\n    Dim windowPattern As WindowPattern = Nothing\n\n    Try\n        windowPattern = DirectCast( _\n        targetControl.GetCurrentPattern(windowPattern.Pattern), _\n        WindowPattern)\n    Catch\n        &#39; object doesn&#39;t support the WindowPattern control pattern\n        Return Nothing\n    End Try\n    &#39; Make sure the element is usable.\n    If False = windowPattern.WaitForInputIdle(10000) Then\n        &#39; Object not responding in a timely manner\n        Return Nothing\n    End If\n    Return windowPattern\nEnd Function &#39;GetWindowPattern\n\n</code></pre><pre><code class=\"lang-cs\" name=\"UIAWindowPattern_snip#101\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Obtains a WindowPattern control pattern from an automation element.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;targetControl&quot;&gt;\n/// The automation element of interest.\n/// &lt;/param&gt;\n/// &lt;returns&gt;\n/// A WindowPattern object.\n/// &lt;/returns&gt;\n///--------------------------------------------------------------------\nprivate WindowPattern GetWindowPattern(AutomationElement targetControl)\n{\n    WindowPattern windowPattern = null;\n\n    try\n    {\n        windowPattern =\n            targetControl.GetCurrentPattern(WindowPattern.Pattern)\n            as WindowPattern;\n    }\n    catch (InvalidOperationException)\n    {\n        // object doesn&#39;t support the WindowPattern control pattern\n        return null;\n    }\n    // Make sure the element is usable.\n    if (false == windowPattern.WaitForInputIdle(10000))\n    {\n        // Object not responding in a timely manner\n        return null;\n    }\n    return windowPattern;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIAWindowPattern_snip#103\">&#39;&#39;&#39;------------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Calls the WindowPattern.SetVisualState() method for an associated \n&#39;&#39;&#39; automation element.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;windowPattern&quot;&gt;\n&#39;&#39;&#39; The WindowPattern control pattern obtained from\n&#39;&#39;&#39; an automation element.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;param name=&quot;visualState&quot;&gt;\n&#39;&#39;&#39; The specified WindowVisualState enumeration value.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39;------------------------------------------------------------------------\nPrivate Sub SetVisualState(ByVal windowPattern As WindowPattern, _\n    ByVal visualState As WindowVisualState)\n    Try\n        If (windowPattern.Current.WindowInteractionState = _\n                WindowInteractionState.ReadyForUserInteraction) Then\n            Select Case visualState\n                Case WindowVisualState.Maximized\n                    &#39; Confirm that the element can be maximized\n                    If ((windowPattern.Current.CanMaximize) &amp; _\n                            Not (windowPattern.Current.IsModal)) Then\n                        windowPattern.SetWindowVisualState( _\n                        WindowVisualState.Maximized)\n                    End If\n                    &#39; TODO: additional processing\n                Case WindowVisualState.Minimized\n                    &#39; Confirm that the element can be minimized\n                    If ((windowPattern.Current.CanMinimize) &amp; _\n                            Not (windowPattern.Current.IsModal)) Then\n                        windowPattern.SetWindowVisualState( _\n                        WindowVisualState.Minimized)\n                    End If\n                    &#39; TODO: additional processing\n                Case WindowVisualState.Normal\n                    windowPattern.SetWindowVisualState( _\n                    WindowVisualState.Normal)\n                Case Else\n                    windowPattern.SetWindowVisualState( _\n                    WindowVisualState.Normal)\n            End Select\n            &#39; TODO: additional processing\n        End If\n    Catch exc As InvalidOperationException\n        &#39; object is not able to perform the requested action\n        Return\n    End Try\nEnd Sub &#39;SetVisualState\n\n</code></pre><pre><code class=\"lang-cs\" name=\"UIAWindowPattern_snip#103\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Calls the WindowPattern.SetVisualState() method for an associated \n/// automation element.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;windowPattern&quot;&gt;\n/// The WindowPattern control pattern obtained from\n/// an automation element.\n/// &lt;/param&gt;\n/// &lt;param name=&quot;visualState&quot;&gt;\n/// The specified WindowVisualState enumeration value.\n/// &lt;/param&gt;\n///--------------------------------------------------------------------\nprivate void SetVisualState(WindowPattern windowPattern, \n    WindowVisualState visualState)\n{\n    try\n    {\n        if (windowPattern.Current.WindowInteractionState ==\n            WindowInteractionState.ReadyForUserInteraction)\n        {\n            switch (visualState)\n            {\n                case WindowVisualState.Maximized:\n                    // Confirm that the element can be maximized\n                    if ((windowPattern.Current.CanMaximize) &amp;&amp; \n                        !(windowPattern.Current.IsModal))\n                    {\n                        windowPattern.SetWindowVisualState(\n                            WindowVisualState.Maximized);\n                        // TODO: additional processing\n                    }\n                    break;\n                case WindowVisualState.Minimized:\n                    // Confirm that the element can be minimized\n                    if ((windowPattern.Current.CanMinimize) &amp;&amp;\n                        !(windowPattern.Current.IsModal))\n                    {\n                        windowPattern.SetWindowVisualState(\n                            WindowVisualState.Minimized);\n                        // TODO: additional processing\n                    }\n                    break;\n                case WindowVisualState.Normal:\n                    windowPattern.SetWindowVisualState(\n                        WindowVisualState.Normal);\n                    break;\n                default:\n                    windowPattern.SetWindowVisualState(\n                        WindowVisualState.Normal);\n                    // TODO: additional processing\n                    break;\n            }\n        }\n    }\n    catch (InvalidOperationException)\n    {\n        // object is not able to perform the requested action\n        return;\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Automation.WindowPattern.WindowPatternInformation.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Automation.WindowPattern.WindowPatternInformation.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.WindowPattern+WindowPatternInformation\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.WindowPattern+WindowPatternInformation.CanMaximize\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.WindowPattern+WindowPatternInformation.CanMinimize\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.WindowPattern+WindowPatternInformation.IsModal\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.WindowPattern+WindowPatternInformation.IsTopmost\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.WindowPattern+WindowPatternInformation.WindowInteractionState\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.WindowPattern+WindowPatternInformation.WindowVisualState\">\r\n<meta name=\"APILocation\" content=\"UIAutomationClient.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"c0613735-77ca-772e-4090-9c83228c0c64\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides access to the property values of a  object using its  or  accessors.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Windows.Automation/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Automation.WindowPattern.WindowPatternInformation\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Automation.WindowPattern.WindowPatternInformation.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Automation.WindowPattern.WindowPatternInformation.yml","open_to_public_contributors":true,"api_name":["System.Windows.Automation.WindowPattern+WindowPatternInformation","System.Windows.Automation.WindowPattern+WindowPatternInformation.CanMaximize","System.Windows.Automation.WindowPattern+WindowPatternInformation.CanMinimize","System.Windows.Automation.WindowPattern+WindowPatternInformation.IsModal","System.Windows.Automation.WindowPattern+WindowPatternInformation.IsTopmost","System.Windows.Automation.WindowPattern+WindowPatternInformation.WindowInteractionState","System.Windows.Automation.WindowPattern+WindowPatternInformation.WindowVisualState"],"api_location":["UIAutomationClient.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Automation.WindowPattern.WindowPatternInformation","System::Windows::Automation::WindowPattern::WindowPatternInformation","System.Windows.Automation.WindowPattern.WindowPatternInformation.CanMaximize","System::Windows::Automation::WindowPattern::WindowPatternInformation::CanMaximize","System.Windows.Automation.WindowPattern.WindowPatternInformation.CanMinimize","System::Windows::Automation::WindowPattern::WindowPatternInformation::CanMinimize","System.Windows.Automation.WindowPattern.WindowPatternInformation.IsModal","System::Windows::Automation::WindowPattern::WindowPatternInformation::IsModal","System.Windows.Automation.WindowPattern.WindowPatternInformation.IsTopmost","System::Windows::Automation::WindowPattern::WindowPatternInformation::IsTopmost","System.Windows.Automation.WindowPattern.WindowPatternInformation.WindowInteractionState","System::Windows::Automation::WindowPattern::WindowPatternInformation::WindowInteractionState","System.Windows.Automation.WindowPattern.WindowPatternInformation.WindowVisualState","System::Windows::Automation::WindowPattern::WindowPatternInformation::WindowVisualState"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"c0613735-77ca-772e-4090-9c83228c0c64","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Windows.Automation/WindowPattern+WindowPatternInformation.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"WindowPattern+WindowPatternInformation struct | Microsoft Docs","_op_ogTitle":"WindowPattern+WindowPatternInformation struct","description":"Provides access to the property values of a  object using its  or  accessors.\n","toc_asset_id":"_splitted/System.Windows.Automation/toc.json","toc_rel":"_splitted/System.Windows.Automation/toc.json","source_url":"","ms.assetid":"System.Windows.Automation.WindowPattern.WindowPatternInformation","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.automation.windowpattern.windowpatterninformation","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.automation.windowpattern.windowpatterninformation","fileRelativePath":"System.Windows.Automation.WindowPattern.WindowPatternInformation.html"},"themesRelativePathToOutputRoot":"_themes/"}