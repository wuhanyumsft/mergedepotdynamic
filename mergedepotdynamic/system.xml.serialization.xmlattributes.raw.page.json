{"content":"    \r\n    <h1 id=\"System_Xml_Serialization_XmlAttributes\">\r\n      <span class=\"lang-csharp\">XmlAttributes</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a collection of attribute objects that control how the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> serializes and deserializes an object.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class XmlAttributes</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">XmlAttributes</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Creating the XmlAttributes is part of a process that overrides the default way the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> serializes class instances. For example, suppose you want to serialize an object that is created from a DLL which has an inaccessible source. By using the <a class=\"xref\" href=\"system.xml.serialization.xmlattributeoverrides\" data-linktype=\"relative-path\">XmlAttributeOverrides</a>, you can augment or otherwise control how the object is serialized.  </p>\n<p> The members of the XmlAttributes class correspond directly to a family of attribute classes that control serialization. For example, the <a class=\"xref\" href=\"system.xml.serialization.xmlattributes#System_Xml_Serialization_XmlAttributes_XmlText_\" data-linktype=\"relative-path\">XmlText</a> property must be set to an <a class=\"xref\" href=\"system.xml.serialization.xmltextattribute\" data-linktype=\"relative-path\">XmlTextAttribute</a>, which allows you to override serialization of a field or property by instructing the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> to serialize the property value as XML text. For a complete list of attributes that control serialization, see the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a>.  </p>\n<p> For more details on using the <a class=\"xref\" href=\"system.xml.serialization.xmlattributeoverrides\" data-linktype=\"relative-path\">XmlAttributeOverrides</a> with the XmlAttributes class, see <a href=\"../Topic/How%20to:%20Specify%20an%20Alternate%20Element%20Name%20for%20an%20XML%20Stream.md\" data-linktype=\"relative-path\">How to: Specify an Alternate Element Name for an XML Stream</a>.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Serialization_XmlAttributes__ctor\" data-linktype=\"self-bookmark\">XmlAttributes()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.serialization.xmlattributes\" data-linktype=\"relative-path\">XmlAttributes</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Serialization_XmlAttributes__ctor_System_Reflection_ICustomAttributeProvider_\" data-linktype=\"self-bookmark\">XmlAttributes(ICustomAttributeProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.serialization.xmlattributes\" data-linktype=\"relative-path\">XmlAttributes</a> class and customizes how the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> serializes and deserializes an object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Serialization_XmlAttributes_XmlAnyAttribute\" data-linktype=\"self-bookmark\">XmlAnyAttribute</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.xml.serialization.xmlanyattributeattribute\" data-linktype=\"relative-path\">XmlAnyAttributeAttribute</a> to override.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Serialization_XmlAttributes_XmlAnyElements\" data-linktype=\"self-bookmark\">XmlAnyElements</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the collection of <a class=\"xref\" href=\"system.xml.serialization.xmlanyelementattribute\" data-linktype=\"relative-path\">XmlAnyElementAttribute</a> objects to override.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Serialization_XmlAttributes_XmlArray\" data-linktype=\"self-bookmark\">XmlArray</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets an object that specifies how the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> serializes a public field or read/write property that returns an array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Serialization_XmlAttributes_XmlArrayItems\" data-linktype=\"self-bookmark\">XmlArrayItems</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a collection of objects that specify how the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> serializes items inserted into an array returned by a public field or read/write property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Serialization_XmlAttributes_XmlAttribute\" data-linktype=\"self-bookmark\">XmlAttribute</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets an object that specifies how the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> serializes a public field or public read/write property as an XML attribute.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Serialization_XmlAttributes_XmlChoiceIdentifier\" data-linktype=\"self-bookmark\">XmlChoiceIdentifier</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets an object that allows you to distinguish between a set of choices.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Serialization_XmlAttributes_XmlDefaultValue\" data-linktype=\"self-bookmark\">XmlDefaultValue</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the default value of an XML element or attribute.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Serialization_XmlAttributes_XmlElements\" data-linktype=\"self-bookmark\">XmlElements</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a collection of objects that specify how the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> serializes a public field or read/write property as an XML element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Serialization_XmlAttributes_XmlEnum\" data-linktype=\"self-bookmark\">XmlEnum</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets an object that specifies how the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> serializes an enumeration member.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Serialization_XmlAttributes_XmlIgnore\" data-linktype=\"self-bookmark\">XmlIgnore</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that specifies whether or not the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> serializes a public field or public read/write property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Serialization_XmlAttributes_Xmlns\" data-linktype=\"self-bookmark\">Xmlns</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that specifies whether to keep all namespace declarations when an object containing a member that returns an <a class=\"xref\" href=\"system.xml.serialization.xmlserializernamespaces\" data-linktype=\"relative-path\">XmlSerializerNamespaces</a> object is overridden.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Serialization_XmlAttributes_XmlRoot\" data-linktype=\"self-bookmark\">XmlRoot</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets an object that specifies how the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> serializes a class as an XML root element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Serialization_XmlAttributes_XmlText\" data-linktype=\"self-bookmark\">XmlText</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets an object that instructs the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> to serialize a public field or public read/write property as XML text.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Serialization_XmlAttributes_XmlType\" data-linktype=\"self-bookmark\">XmlType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets an object that specifies how the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> serializes a class to which the <a class=\"xref\" href=\"system.xml.serialization.xmltypeattribute\" data-linktype=\"relative-path\">XmlTypeAttribute</a> has been applied.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Serialization_XmlAttributes__ctor\">\r\n    \r\n            <a id=\"System_Xml_Serialization_XmlAttributes__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlAttributes()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.serialization.xmlattributes\" data-linktype=\"relative-path\">XmlAttributes</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public XmlAttributes ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example serializes an instance of a class named <code>Orchestra</code>, which contains a single field named <code>Instruments</code> that returns an array of <code>Instrument</code> objects. A second class named <code>Brass</code> inherits from the <code>Instrument</code> class. The example creates an <a class=\"xref\" href=\"system.xml.serialization.xmlattributes\" data-linktype=\"relative-path\">XmlAttributes</a> object to override the <code>Instrument</code> field--allowing the field to accept <code>Brass</code> objects--and adds the <a class=\"xref\" href=\"system.xml.serialization.xmlattributes\" data-linktype=\"relative-path\">XmlAttributes</a> object to an instance of the <a class=\"xref\" href=\"system.xml.serialization.xmlattributeoverrides\" data-linktype=\"relative-path\">XmlAttributeOverrides</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic XmlAttributes.XmlAttributes Example#1\">using System;\nusing System.IO;\nusing System.Xml.Serialization;\n\npublic class Orchestra\n{\n   public Instrument[] Instruments;\n}   \n\npublic class Instrument\n{\n   public string Name;\n}\n\npublic class Brass:Instrument\n{\n   public bool IsValved;\n}\n\npublic class Run\n{\n    public static void Main()\n    {\n       Run test = new Run();\n       test.SerializeObject(&quot;Override.xml&quot;);\n       test.DeserializeObject(&quot;Override.xml&quot;);\n    }\n\n    public void SerializeObject(string filename)\n    {\n      /* Each overridden field, property, or type requires \n      an XmlAttributes object. */\n      XmlAttributes attrs = new XmlAttributes();\n\n      /* Create an XmlElementAttribute to override the \n      field that returns Instrument objects. The overridden field\n      returns Brass objects instead. */\n      XmlElementAttribute attr = new XmlElementAttribute();\n      attr.ElementName = &quot;Brass&quot;;\n      attr.Type = typeof(Brass);\n\n      // Add the element to the collection of elements.\n      attrs.XmlElements.Add(attr);\n\n      // Create the XmlAttributeOverrides object.\n      XmlAttributeOverrides attrOverrides = new XmlAttributeOverrides();\n\n      /* Add the type of the class that contains the overridden \n      member and the XmlAttributes to override it with to the \n      XmlAttributeOverrides object. */\n      attrOverrides.Add(typeof(Orchestra), &quot;Instruments&quot;, attrs);\n\n      // Create the XmlSerializer using the XmlAttributeOverrides.\n      XmlSerializer s = \n      new XmlSerializer(typeof(Orchestra), attrOverrides);\n\n      // Writing the file requires a TextWriter.\n      TextWriter writer = new StreamWriter(filename);\n\n      // Create the object that will be serialized.\n      Orchestra band = new Orchestra();\n      \n      // Create an object of the derived type.\n      Brass i = new Brass();\n      i.Name = &quot;Trumpet&quot;;\n      i.IsValved = true;\n      Instrument[] myInstruments = {i};\n      band.Instruments = myInstruments;\n\n      // Serialize the object.\n      s.Serialize(writer,band);\n      writer.Close();\n   }\n\n   public void DeserializeObject(string filename)\n   {\n      XmlAttributeOverrides attrOverrides = \n         new XmlAttributeOverrides();\n      XmlAttributes attrs = new XmlAttributes();\n\n      // Create an XmlElementAttribute to override the Instrument.\n      XmlElementAttribute attr = new XmlElementAttribute();\n      attr.ElementName = &quot;Brass&quot;;\n      attr.Type = typeof(Brass);\n\n      // Add the element to the collection of elements.\n      attrs.XmlElements.Add(attr);\n\n      attrOverrides.Add(typeof(Orchestra), &quot;Instruments&quot;, attrs);\n\n      // Create the XmlSerializer using the XmlAttributeOverrides.\n      XmlSerializer s = \n      new XmlSerializer(typeof(Orchestra), attrOverrides);\n\n      FileStream fs = new FileStream(filename, FileMode.Open);\n      Orchestra band = (Orchestra) s.Deserialize(fs);\n      Console.WriteLine(&quot;Brass:&quot;);\n\n      /* The difference between deserializing the overridden \n      XML document and serializing it is this: To read the derived \n      object values, you must declare an object of the derived type \n      (Brass), and cast the Instrument instance to it. */\n      Brass b;\n      foreach(Instrument i in band.Instruments) \n      {\n         b = (Brass)i;\n         Console.WriteLine(\n         b.Name + &quot;<br>&quot; + \n         b.IsValved);\n      }\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic XmlAttributes.XmlAttributes Example#1\">Imports System\nImports System.IO\nImports System.Xml.Serialization\nImports Microsoft.VisualBasic\n\n\nPublic Class Orchestra\n    Public Instruments() As Instrument\nEnd Class\n\nPublic Class Instrument\n    Public Name As String\nEnd Class\n\nPublic Class Brass\n    Inherits Instrument\n    Public IsValved As Boolean\nEnd Class\n\n\nPublic Class Run\n    \n    Public Shared Sub Main()\n        Dim test As New Run()\n        test.SerializeObject(&quot;Override.xml&quot;)\n        test.DeserializeObject(&quot;Override.xml&quot;)\n    End Sub    \n    \n    Public Sub SerializeObject(ByVal filename As String)\n        &#39; Each overridden field, property, or type requires\n        &#39; an XmlAttributes object. \n        Dim attrs As New XmlAttributes()\n        \n        &#39; Create an XmlElementAttribute to override the\n        &#39; field that returns Instrument objects. The overridden field\n        &#39; returns Brass objects instead. \n        Dim attr As New XmlElementAttribute()\n        attr.ElementName = &quot;Brass&quot;\n        attr.Type = GetType(Brass)\n        \n        &#39; Add the element to the collection of elements.\n        attrs.XmlElements.Add(attr)\n        \n        &#39; Create the XmlAttributeOverrides object.\n        Dim attrOverrides As New XmlAttributeOverrides()\n        \n        &#39; Add the type of the class that contains the overridden\n        &#39; member and the XmlAttributes to override it with to the\n        &#39; XmlAttributeOverrides object. \n        attrOverrides.Add(GetType(Orchestra), &quot;Instruments&quot;, attrs)\n        \n        &#39; Create the XmlSerializer using the XmlAttributeOverrides.\n        Dim s As New XmlSerializer(GetType(Orchestra), attrOverrides)\n        \n        &#39; Writing the file requires a TextWriter.\n        Dim writer As New StreamWriter(filename)\n        \n        &#39; Create the object that will be serialized.\n        Dim band As New Orchestra()\n        \n        &#39; Create an object of the derived type.\n        Dim i As New Brass()\n        i.Name = &quot;Trumpet&quot;\n        i.IsValved = True\n        Dim myInstruments() As Instrument = {i}\n        band.Instruments = myInstruments\n        \n        &#39; Serialize the object.\n        s.Serialize(writer, band)\n        writer.Close()\n    End Sub\n    \n    \n    Public Sub DeserializeObject(ByVal filename As String)\n        Dim attrOverrides As New XmlAttributeOverrides()\n        Dim attrs As New XmlAttributes()\n        \n        &#39; Create an XmlElementAttribute to override the Instrument.\n        Dim attr As New XmlElementAttribute()\n        attr.ElementName = &quot;Brass&quot;\n        attr.Type = GetType(Brass)\n        \n        &#39; Add the element to the collection of elements.\n        attrs.XmlElements.Add(attr)\n        \n        attrOverrides.Add(GetType(Orchestra), &quot;Instruments&quot;, attrs)\n        \n        &#39; Create the XmlSerializer using the XmlAttributeOverrides.\n        Dim s As New XmlSerializer(GetType(Orchestra), attrOverrides)\n        \n        Dim fs As New FileStream(filename, FileMode.Open)\n        Dim band As Orchestra = CType(s.Deserialize(fs), Orchestra)\n        Console.WriteLine(&quot;Brass:&quot;)\n        \n        &#39; The difference between deserializing the overridden\n        &#39; XML document and serializing it is this: To read the derived\n        &#39; object values, you must declare an object of the derived type\n        &#39; (Brass), and cast the Instrument instance to it. \n        Dim b As Brass\n        Dim i As Instrument\n        For Each i In  band.Instruments\n            b = CType(i, Brass)\n            Console.WriteLine(b.Name + ControlChars.Cr + _\n                              b.IsValved.ToString())\n        Next i\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic XmlAttributes.XmlAttributes Example#1\">#using &lt;System.Xml.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml::Serialization;\npublic ref class Instrument\n{\npublic:\n   String^ Name;\n};\n\npublic ref class Brass: public Instrument\n{\npublic:\n   bool IsValved;\n};\n\npublic ref class Orchestra\n{\npublic:\n   array&lt;Instrument^&gt;^Instruments;\n};\n\nvoid SerializeObject( String^ filename )\n{\n   /* Each overridden field, property, or type requires \n      an XmlAttributes object. */\n   XmlAttributes^ attrs = gcnew XmlAttributes;\n\n   /* Create an XmlElementAttribute to override the \n      field that returns Instrument objects. The overridden field\n      returns Brass objects instead. */\n   XmlElementAttribute^ attr = gcnew XmlElementAttribute;\n   attr-&gt;ElementName = &quot;Brass&quot;;\n   attr-&gt;Type = Brass::typeid;\n\n   // Add the element to the collection of elements.\n   attrs-&gt;XmlElements-&gt;Add( attr );\n\n   // Create the XmlAttributeOverrides object.\n   XmlAttributeOverrides^ attrOverrides = gcnew XmlAttributeOverrides;\n\n   /* Add the type of the class that contains the overridden \n      member and the XmlAttributes to override it with to the \n      XmlAttributeOverrides object. */\n   attrOverrides-&gt;Add( Orchestra::typeid, &quot;Instruments&quot;, attrs );\n\n   // Create the XmlSerializer using the XmlAttributeOverrides.\n   XmlSerializer^ s = gcnew XmlSerializer( Orchestra::typeid,attrOverrides );\n\n   // Writing the file requires a TextWriter.\n   TextWriter^ writer = gcnew StreamWriter( filename );\n\n   // Create the object that will be serialized.\n   Orchestra^ band = gcnew Orchestra;\n\n   // Create an object of the derived type.\n   Brass^ i = gcnew Brass;\n   i-&gt;Name = &quot;Trumpet&quot;;\n   i-&gt;IsValved = true;\n   array&lt;Instrument^&gt;^myInstruments = {i};\n   band-&gt;Instruments = myInstruments;\n\n   // Serialize the object.\n   s-&gt;Serialize( writer, band );\n   writer-&gt;Close();\n}\n\nvoid DeserializeObject( String^ filename )\n{\n   XmlAttributeOverrides^ attrOverrides = gcnew XmlAttributeOverrides;\n   XmlAttributes^ attrs = gcnew XmlAttributes;\n\n   // Create an XmlElementAttribute to override the Instrument.\n   XmlElementAttribute^ attr = gcnew XmlElementAttribute;\n   attr-&gt;ElementName = &quot;Brass&quot;;\n   attr-&gt;Type = Brass::typeid;\n\n   // Add the element to the collection of elements.\n   attrs-&gt;XmlElements-&gt;Add( attr );\n   attrOverrides-&gt;Add( Orchestra::typeid, &quot;Instruments&quot;, attrs );\n\n   // Create the XmlSerializer using the XmlAttributeOverrides.\n   XmlSerializer^ s = gcnew XmlSerializer( Orchestra::typeid,attrOverrides );\n   FileStream^ fs = gcnew FileStream( filename,FileMode::Open );\n   Orchestra^ band = dynamic_cast&lt;Orchestra^&gt;(s-&gt;Deserialize( fs ));\n   Console::WriteLine( &quot;Brass:&quot; );\n\n   /* The difference between deserializing the overridden \n      XML document and serializing it is this: To read the derived \n      object values, you must declare an object of the derived type \n      (Brass), and cast the Instrument instance to it. */\n   Brass^ b;\n   System::Collections::IEnumerator^ myEnum = band-&gt;Instruments-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Instrument^ i = safe_cast&lt;Instrument^&gt;(myEnum-&gt;Current);\n      b = dynamic_cast&lt;Brass^&gt;(i);\n      Console::WriteLine( &quot;{0}<br>{1}&quot;, b-&gt;Name, b-&gt;IsValved );\n   }\n}\n\nint main()\n{\n   SerializeObject( &quot;Override.xml&quot; );\n   DeserializeObject( &quot;Override.xml&quot; );\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Serialization_XmlAttributes__ctor_System_Reflection_ICustomAttributeProvider_\">\r\n    \r\n            <a id=\"System_Xml_Serialization_XmlAttributes__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlAttributes(ICustomAttributeProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.serialization.xmlattributes\" data-linktype=\"relative-path\">XmlAttributes</a> class and customizes how the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> serializes and deserializes an object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public XmlAttributes (System.Reflection.ICustomAttributeProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.icustomattributeprovider\" data-linktype=\"relative-path\">ICustomAttributeProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A class that can provide alternative implementations of attributes that control XML serialization.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the default constructor for the <a class=\"xref\" href=\"system.xml.serialization.xmlattributes\" data-linktype=\"relative-path\">XmlAttributes</a> class, rather than using this constructor.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Serialization_XmlAttributes_XmlAnyAttribute\">\r\n    \r\n            <a id=\"System_Xml_Serialization_XmlAttributes_XmlAnyAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlAnyAttribute</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.xml.serialization.xmlanyattributeattribute\" data-linktype=\"relative-path\">XmlAnyAttributeAttribute</a> to override.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.Serialization.XmlAnyAttributeAttribute XmlAnyAttribute { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.serialization.xmlanyattributeattribute\" data-linktype=\"relative-path\">XmlAnyAttributeAttribute</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.serialization.xmlanyattributeattribute\" data-linktype=\"relative-path\">XmlAnyAttributeAttribute</a> to override.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.xml.serialization.xmlanyattributeattribute\" data-linktype=\"relative-path\">XmlAnyAttributeAttribute</a> can be applied to a member that returns an array of <a class=\"xref\" href=\"system.xml.xmlattribute\" data-linktype=\"relative-path\">XmlAttribute</a> objects on deserialization. This allows the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> to deserialize any attributes that do not have a corresponding member in the object being deserialized--thus those elements are &quot;unknown&quot; to the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a>. This is useful when the XML stream has been altered by an XML Web service, or when it is known that random data is always included with the XML stream.  </p>\n<p> The XmlAnyAttribute property allows you to override the serialization of a member to which the <a class=\"xref\" href=\"system.xml.serialization.xmlanyattributeattribute\" data-linktype=\"relative-path\">XmlAnyAttributeAttribute</a> has been applied.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Serialization_XmlAttributes_XmlAnyElements\">\r\n    \r\n            <a id=\"System_Xml_Serialization_XmlAttributes_XmlAnyElements_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlAnyElements</div>        \r\n          </div>\r\n    \r\n            <p>Gets the collection of <a class=\"xref\" href=\"system.xml.serialization.xmlanyelementattribute\" data-linktype=\"relative-path\">XmlAnyElementAttribute</a> objects to override.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.Serialization.XmlAnyElementAttributes XmlAnyElements { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.serialization.xmlanyelementattributes\" data-linktype=\"relative-path\">XmlAnyElementAttributes</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.serialization.xmlanyelementattributes\" data-linktype=\"relative-path\">XmlAnyElementAttributes</a> object that represents the collection of <a class=\"xref\" href=\"system.xml.serialization.xmlanyelementattribute\" data-linktype=\"relative-path\">XmlAnyElementAttribute</a> objects.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.xml.serialization.xmlanyelementattribute\" data-linktype=\"relative-path\">XmlAnyElementAttribute</a> can be applied to a member that returns an array of <a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a> objects on deserialization. This allows the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> to deserialize any elements that do not have a corresponding member in the object being deserialized--thus those elements are &quot;unknown&quot; to the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a>. This is useful when the XML stream has been altered by an XML Web service, or when it is known that random data is always included with the XML stream.  </p>\n<p> The XmlAnyElements property allows you to override the serialization of a member to function as a member to which the <a class=\"xref\" href=\"system.xml.serialization.xmlanyelementattribute\" data-linktype=\"relative-path\">XmlAnyElementAttribute</a> has been applied.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a new <a class=\"xref\" href=\"system.xml.serialization.xmlanyelementattribute\" data-linktype=\"relative-path\">XmlAnyElementAttribute</a> object and adds it to the collection of objects accessed through the XmlAnyElements property. The <a class=\"xref\" href=\"system.xml.serialization.xmlattributes\" data-linktype=\"relative-path\">XmlAttributes</a> object is then added to a <a class=\"xref\" href=\"system.xml.serialization.xmlattributeoverrides\" data-linktype=\"relative-path\">XmlAttributeOverrides</a> object which is used to create an <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> object. The <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> is used to serialize or deserialize an object. To see the effect of using the <a class=\"xref\" href=\"system.xml.serialization.xmlanyelementattributes\" data-linktype=\"relative-path\">XmlAnyElementAttributes</a> property, create an XML document named &quot;UnknownElements.xml&quot; by running the <code>SerializeObject</code> method in the <code>Main</code> method. Edit the resulting document to include other (unknown) elements. Comment out the <code>SerializeObject</code> call in the <code>Main</code> method, and uncomment the call to the <code>DeserializeObject</code> method, which prints out the name and value of any unknown XML element.  </p>\n<pre><code class=\"lang-cpp\" name=\"XmlAttributes.XmlAnyElements#1\">#using &lt;System.dll&gt;\n#using &lt;System.xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml::Serialization;\nusing namespace System::Xml;\npublic ref class Group\n{\npublic:\n   String^ GroupName;\n\n   [XmlAnyElement]\n   array&lt;Object^&gt;^Things;\n};\n\nvoid SerializeObject( String^ filename );\nvoid DeserializeObject( String^ filename );\nXmlSerializer^ CreateOverrideSerializer();\nint main()\n{\n   // 1 Run this and create the XML document.\n   // 2 Add new elements to the XML document.\n   // 3 Comment out the next line, and uncomment\n   // the DeserializeObject line to deserialize the\n   // XML document and see unknown elements.\n   SerializeObject( &quot;UnknownElements.xml&quot; );\n\n   // DeserializeObject(S&quot;UnknownElements.xml&quot;);\n}\n\nvoid SerializeObject( String^ filename )\n{\n   XmlSerializer^ ser = gcnew XmlSerializer( Group::typeid );\n   TextWriter^ writer = gcnew StreamWriter( filename );\n   Group^ g = gcnew Group;\n   g-&gt;GroupName = &quot;MyGroup&quot;;\n   ser-&gt;Serialize( writer, g );\n   writer-&gt;Close();\n}\n\nvoid DeserializeObject( String^ filename )\n{\n   XmlSerializer^ ser = CreateOverrideSerializer();\n\n   // A FileStream is needed to read the XML document.\n   FileStream^ fs = gcnew FileStream( filename,FileMode::Open );\n   Group^ g = safe_cast&lt;Group^&gt;(ser-&gt;Deserialize( fs ));\n   fs-&gt;Close();\n   Console::WriteLine( g-&gt;GroupName );\n   Console::WriteLine( g-&gt;Things-&gt;Length );\n   for ( int i = 0; i &lt; g-&gt;Things-&gt;Length; ++i )\n   {\n      XmlElement^ xelement = safe_cast&lt;XmlElement^&gt;(g-&gt;Things[ i ]);\n      Console::WriteLine( &quot;{0}: {1}&quot;, xelement-&gt;Name, xelement-&gt;InnerXml );\n   }\n}\n\nXmlSerializer^ CreateOverrideSerializer()\n{\n   XmlAnyElementAttribute^ myAnyElement = gcnew XmlAnyElementAttribute;\n   XmlAttributeOverrides^ xOverride = gcnew XmlAttributeOverrides;\n   XmlAttributes^ xAtts = gcnew XmlAttributes;\n   xAtts-&gt;XmlAnyElements-&gt;Add( myAnyElement );\n   xOverride-&gt;Add( Group::typeid, &quot;Things&quot;, xAtts );\n   return gcnew XmlSerializer( Group::typeid,xOverride );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlAttributes.XmlAnyElements#1\">using System;\nusing System.IO;\nusing System.Xml.Serialization;\nusing System.Xml;\n\npublic class Group{\n   public string GroupName;\n   [XmlAnyElement]\n   public object[]Things;\n\n}\n\npublic class Test{\n   static void Main(){\n      Test t = new Test();\n      // 1 Run this and create the XML document.\n      // 2 Add new elements to the XML document.\n      // 3 Comment out the new line, and uncomment\n      // the DeserializeObject line to deserialize the\n      // XML document and see unknown elements.\n      t.SerializeObject(&quot;UnknownElements.xml&quot;);\n     \n      // t.DeserializeObject(&quot;UnknownElements.xml&quot;);\n   }\n\n   private void SerializeObject(string filename){\n      XmlSerializer ser = new XmlSerializer(typeof (Group));\n      TextWriter writer = new StreamWriter(filename);\n      Group g = new Group();\n      g.GroupName = &quot;MyGroup&quot;;\n      ser.Serialize(writer, g);\n      writer.Close();\n   }\n\n   \n   private void DeserializeObject(string filename){\n\n      XmlSerializer ser = CreateOverrideSerializer();\n      // A FileStream is needed to read the XML document.\n      FileStream fs = new FileStream(filename, FileMode.Open);\n     Group g = (Group)\n     \tser.Deserialize(fs);\n     fs.Close();\n     Console.WriteLine(g.GroupName);\n     Console.WriteLine(g.Things.Length);\n     foreach(XmlElement xelement in g.Things){\n     Console.WriteLine(xelement.Name + &quot;: &quot; + xelement.InnerXml);\n     }\n   }\n\n   private XmlSerializer CreateOverrideSerializer(){\n      XmlAnyElementAttribute myAnyElement = \n      new XmlAnyElementAttribute();\n      XmlAttributeOverrides xOverride = \n      new XmlAttributeOverrides();\n      XmlAttributes xAtts = new XmlAttributes();\n      xAtts.XmlAnyElements.Add(myAnyElement);\n      xOverride.Add(typeof(Group), &quot;Things&quot;, xAtts);\n      return new XmlSerializer(typeof(Group) , xOverride);\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"XmlAttributes.XmlAnyElements#1\">Imports System\nImports System.IO\nImports System.Xml.Serialization\nImports System.Xml\n\nPublic Class Group\n   Public GroupName As String \n   &lt;XmlAnyElement&gt; _\n   Public Things () As object\nEnd Class\n\nPublic Class Test\n   Shared Sub Main()\n      Dim t As Test = New Test()\n      &#39; 1 Run this and create the XML document.\n      &#39; 2 Add New elements to the XML document.\n      &#39; 3 Comment out the New line, and uncomment\n      &#39; the DeserializeObject line to deserialize the\n      &#39; XML document and see unknown elements.\n     t.SerializeObject(&quot;UnknownElements.xml&quot;)\n     \n      &#39;t.DeserializeObject(&quot;UnknownElements.xml&quot;)\n   End Sub\n\n   Private Sub SerializeObject(filename As String)\n      Dim ser As XmlSerializer = New XmlSerializer(GetType (Group))\n      Dim writer As TextWriter = New StreamWriter(filename)\n      \n      Dim g As Group = New Group()\n      g.GroupName = &quot;MyGroup&quot;\n      ser.Serialize(writer, g)\n      writer.Close()\n   End Sub\n\n   \n   Private Sub DeserializeObject(filename As String)\n\n      Dim ser As XmlSerializer = CreateOverrideSerializer()\n      &#39; A FileStream is needed to read the XML document.\n      Dim fs As FileStream = New FileStream(filename, FileMode.Open)\n     Dim g As Group = CType( _\n     \tser.Deserialize(fs), Group)\n     fs.Close()\n     Console.WriteLine(g.GroupName)\n     Console.WriteLine(g.Things.Length)\n     Dim xelement As XmlELement\n     for each xelement in g.Things\n        Console.WriteLine(xelement.Name &amp;&quot;: &quot; &amp; xelement.InnerXml)\n     next\n   End Sub\n   \n\n   Private Function CreateOverrideSerializer() As XmlSerializer \n      Dim myAnyElement As XmlAnyElementAttribute = _\n      New XmlAnyElementAttribute()\n      Dim xOverride As XmlAttributeOverrides = _\n      New XmlAttributeOverrides()\n      Dim xAtts As XmlAttributes = New XmlAttributes()\n      xAtts.XmlAnyElements.Add(myAnyElement)\n      xOverride.Add(GetType(Group), &quot;Things&quot;, xAtts)\n      return New XmlSerializer(GetType(Group) , xOverride)\n   End Function\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Serialization_XmlAttributes_XmlArray\">\r\n    \r\n            <a id=\"System_Xml_Serialization_XmlAttributes_XmlArray_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlArray</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets an object that specifies how the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> serializes a public field or read/write property that returns an array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.Serialization.XmlArrayAttribute XmlArray { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.serialization.xmlarrayattribute\" data-linktype=\"relative-path\">XmlArrayAttribute</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.serialization.xmlarrayattribute\" data-linktype=\"relative-path\">XmlArrayAttribute</a> that specifies how the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> serializes a public field or read/write property that returns an array.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>There are two ways in which a public field or public read/write property that returns an array is serialized by the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a>: the default serialization, and the controlled serialization.  </p>\n<p> In the default serialization, no attribute is applied to the member. When serialized, the array is serialized as a nested sequence of XML elements with the XML element name of the nested sequence taken from the member name.  </p>\n<p> To control the serialization more precisely, apply an <a class=\"xref\" href=\"system.xml.serialization.xmlarrayattribute\" data-linktype=\"relative-path\">XmlArrayAttribute</a> to the field or property. For example, you can change the generated XML element name from the default to a different name by setting the <a class=\"xref\" href=\"system.xml.serialization.xmlarrayattribute#System_Xml_Serialization_XmlArrayAttribute_ElementName_\" data-linktype=\"relative-path\">ElementName</a> property to a new value.  </p>\n<p> The XmlArray property allows you to override the default serialization, as well as the serialization controlled by applying an <a class=\"xref\" href=\"system.xml.serialization.xmlarrayattribute\" data-linktype=\"relative-path\">XmlArrayAttribute</a> to the member. For example, you can change the XML element name generated from the default (the member identifier) to a new value. In addition, if you apply an <a class=\"xref\" href=\"system.xml.serialization.xmlarrayattribute\" data-linktype=\"relative-path\">XmlArrayAttribute</a> to a member, it is overridden by any <a class=\"xref\" href=\"system.xml.serialization.xmlarrayattribute\" data-linktype=\"relative-path\">XmlArrayAttribute</a> that is assigned to the XmlArray property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example serializes a class that contains a field named <code>Members</code> that returns an array of objects. The <a class=\"xref\" href=\"system.xml.serialization.xmlarrayattribute\" data-linktype=\"relative-path\">XmlArrayAttribute</a> is used to override the serialization of the field, and rename the element name to <code>Staff</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic XmlAttributes.XmlArray Example#1\">using System;\nusing System.IO;\nusing System.Xml;\nusing System.Xml.Serialization;\n\n// This is the class that will be serialized.\npublic class Group\n{\n   // This field will be overridden.\n   public Member [] Members;\n}\n\npublic class Member\n{\n   public string MemberName;\n}\n\npublic class Run\n{\n   public static void Main()\n   {\n      Run test = new Run();\n      test.SerializeObject(&quot;OverrideArray.xml&quot;);\n      test.DeserializeObject(&quot;OverrideArray.xml&quot;);\n   }\n   // Return an XmlSerializer used for overriding. \n   public XmlSerializer CreateOverrider()\n   {\n      // Creating XmlAttributeOverrides and XmlAttributes objects.\n      XmlAttributeOverrides xOver = new XmlAttributeOverrides();\n      XmlAttributes xAttrs = new XmlAttributes();\n\n      // Add an override for the XmlArray.    \n      XmlArrayAttribute xArray = new XmlArrayAttribute(&quot;Staff&quot;);\n      xArray.Namespace = &quot;http://www.cpandl.com&quot;;\n      xAttrs.XmlArray = xArray;\n      xOver.Add(typeof(Group), &quot;Members&quot;, xAttrs);\n\n      // Create the XmlSerializer and return it.\n      return new XmlSerializer(typeof(Group), xOver);\n   }\n   \n \n   public void SerializeObject(string filename)\n   {\n      // Create an instance of the XmlSerializer class.\n      XmlSerializer mySerializer =  CreateOverrider();\n      // Writing the file requires a TextWriter.\n      TextWriter writer = new StreamWriter(filename);\n\n      // Create an instance of the class that will be serialized.\n      Group myGroup = new Group();\n\n      // Set the object properties.\n      Member m = new Member();\n      m.MemberName = &quot;Paul&quot;;\n      myGroup.Members = new Member[1] {m};\n      \n      // Serialize the class, and close the TextWriter.\n      mySerializer.Serialize(writer, myGroup);\n      writer.Close();\n   }\n\n   public void DeserializeObject(string filename)\n   {\n      XmlSerializer mySerializer = CreateOverrider();\n      FileStream fs = new FileStream(filename, FileMode.Open);\n      Group myGroup = (Group) \n      mySerializer.Deserialize(fs);\n      foreach(Member m in myGroup.Members)\n      {\n         Console.WriteLine(m.MemberName);\n      }\n   }\n}\n   \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic XmlAttributes.XmlArray Example#1\">Imports System\nImports System.IO\nImports System.Xml\nImports System.Xml.Serialization\n\n\n&#39; This is the class that will be serialized.\nPublic Class Group\n    &#39; This field will be overridden.\n    Public Members() As Member\nEnd Class\n\nPublic Class Member\n    Public MemberName As String\nEnd Class\n\nPublic Class Run\n    \n    Public Shared Sub Main()\n        Dim test As New Run()\n        test.SerializeObject(&quot;OverrideArray.xml&quot;)\n        test.DeserializeObject(&quot;OverrideArray.xml&quot;)\n    End Sub\n    \n    &#39; Return an XmlSerializer used for overriding. \n    Public Function CreateOverrider() As XmlSerializer\n        &#39; Creating XmlAttributeOverrides and XmlAttributes objects.\n        Dim xOver As New XmlAttributeOverrides()\n        Dim xAttrs As New XmlAttributes()\n        \n        &#39; Add an override for the XmlArray.    \n        Dim xArray As New XmlArrayAttribute(&quot;Staff&quot;)\n        xArray.Namespace = &quot;http://www.cpandl.com&quot;\n        xAttrs.XmlArray = xArray\n        xOver.Add(GetType(Group), &quot;Members&quot;, xAttrs)\n        \n        &#39; Create the XmlSerializer and return it.\n        Return New XmlSerializer(GetType(Group), xOver)\n    End Function\n    \n    Public Sub SerializeObject(ByVal filename As String)\n        &#39; Create an instance of the XmlSerializer class.\n        Dim mySerializer As XmlSerializer = CreateOverrider()\n        &#39; Writing the file requires a TextWriter.\n        Dim writer As New StreamWriter(filename)\n        \n        &#39; Create an instance of the class that will be serialized.\n        Dim myGroup As New Group()\n        \n        &#39; Set the object properties.\n        Dim m As New Member()\n        m.MemberName = &quot;Paul&quot;\n        myGroup.Members = New Member(0) {m}\n        \n        &#39; Serialize the class, and close the TextWriter.\n        mySerializer.Serialize(writer, myGroup)\n        writer.Close()\n    End Sub    \n    \n    Public Sub DeserializeObject(ByVal filename As String)\n        Dim mySerializer As XmlSerializer = CreateOverrider()\n        Dim fs As New FileStream(filename, FileMode.Open)\n        Dim myGroup As Group = CType(mySerializer.Deserialize(fs), Group)\n        Dim m As Member\n        For Each m In  myGroup.Members\n            Console.WriteLine(m.MemberName)\n        Next m\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic XmlAttributes.XmlArray Example#1\">#using &lt;System.Xml.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nusing namespace System::Xml::Serialization;\npublic ref class Member\n{\npublic:\n   String^ MemberName;\n};\n\n\n// This is the class that will be serialized.\npublic ref class Group\n{\npublic:\n\n   // This field will be overridden.\n   array&lt;Member^&gt;^Members;\n};\n\n\n// Return an XmlSerializer used for overriding. \nXmlSerializer^ CreateOverrider()\n{\n   // Creating XmlAttributeOverrides and XmlAttributes objects.\n   XmlAttributeOverrides^ xOver = gcnew XmlAttributeOverrides;\n   XmlAttributes^ xAttrs = gcnew XmlAttributes;\n\n   // Add an override for the XmlArray.    \n   XmlArrayAttribute^ xArray = gcnew XmlArrayAttribute( &quot;Staff&quot; );\n   xArray-&gt;Namespace = &quot;http://www.cpandl.com&quot;;\n   xAttrs-&gt;XmlArray = xArray;\n   xOver-&gt;Add( Group::typeid, &quot;Members&quot;, xAttrs );\n\n   // Create the XmlSerializer and return it.\n   return gcnew XmlSerializer( Group::typeid,xOver );\n}\n\nvoid SerializeObject( String^ filename )\n{\n   // Create an instance of the XmlSerializer class.\n   XmlSerializer^ mySerializer = CreateOverrider();\n\n   // Writing the file requires a TextWriter.\n   TextWriter^ writer = gcnew StreamWriter( filename );\n\n   // Create an instance of the class that will be serialized.\n   Group^ myGroup = gcnew Group;\n\n   // Set the object properties.\n   Member^ m = gcnew Member;\n   m-&gt;MemberName = &quot;Paul&quot;;\n   array&lt;Member^&gt;^temp = {m};\n   myGroup-&gt;Members = temp;\n\n   // Serialize the class, and close the TextWriter.\n   mySerializer-&gt;Serialize( writer, myGroup );\n   writer-&gt;Close();\n}\n\nvoid DeserializeObject( String^ filename )\n{\n   XmlSerializer^ mySerializer = CreateOverrider();\n   FileStream^ fs = gcnew FileStream( filename,FileMode::Open );\n   Group^ myGroup = dynamic_cast&lt;Group^&gt;(mySerializer-&gt;Deserialize( fs ));\n   System::Collections::IEnumerator^ myEnum = myGroup-&gt;Members-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Member^ m = safe_cast&lt;Member^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( m-&gt;MemberName );\n   }\n}\n\nint main()\n{\n   SerializeObject( &quot;OverrideArray.xml&quot; );\n   DeserializeObject( &quot;OverrideArray.xml&quot; );\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Serialization_XmlAttributes_XmlArrayItems\">\r\n    \r\n            <a id=\"System_Xml_Serialization_XmlAttributes_XmlArrayItems_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlArrayItems</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a collection of objects that specify how the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> serializes items inserted into an array returned by a public field or read/write property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.Serialization.XmlArrayItemAttributes XmlArrayItems { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.serialization.xmlarrayitemattributes\" data-linktype=\"relative-path\">XmlArrayItemAttributes</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.serialization.xmlarrayitemattributes\" data-linktype=\"relative-path\">XmlArrayItemAttributes</a> object that contains a collection of <a class=\"xref\" href=\"system.xml.serialization.xmlarrayitemattribute\" data-linktype=\"relative-path\">XmlArrayItemAttribute</a> objects.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The XmlArrayItems property allows you to specify the derived types that can be inserted into an array returned by a public field or public read/write property. For each new type you want the field or property to accept, create an <a class=\"xref\" href=\"system.xml.serialization.xmlarrayitemattribute\" data-linktype=\"relative-path\">XmlArrayItemAttribute</a> object and <a class=\"xref\" href=\"system.xml.serialization.xmlarrayitemattributes#System_Xml_Serialization_XmlArrayItemAttributes_Add_\" data-linktype=\"relative-path\">Add</a> it to the <a class=\"xref\" href=\"system.xml.serialization.xmlarrayitemattributes\" data-linktype=\"relative-path\">XmlArrayItemAttributes</a>) returned by the XmlArrayItems property. (The new type must be derived from the type already accepted by the field or property.) <a class=\"xref\" href=\"system.xml.serialization.xmlattributeoverrides#System_Xml_Serialization_XmlAttributeOverrides_Add_\" data-linktype=\"relative-path\">Add</a> the <a class=\"xref\" href=\"system.xml.serialization.xmlattributes\" data-linktype=\"relative-path\">XmlAttributes</a> object to an <a class=\"xref\" href=\"system.xml.serialization.xmlattributeoverrides\" data-linktype=\"relative-path\">XmlAttributeOverrides</a> object and specify the type of the object that contains the field or property, and the name of the field or property. Construct an <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> with the <a class=\"xref\" href=\"system.xml.serialization.xmlattributeoverrides\" data-linktype=\"relative-path\">XmlAttributeOverrides</a> object before calling <a class=\"xref\" href=\"system.xml.serialization.xmlserializer#System_Xml_Serialization_XmlSerializer_Serialize_\" data-linktype=\"relative-path\">Serialize</a> or <a class=\"xref\" href=\"system.xml.serialization.xmlserializer#System_Xml_Serialization_XmlSerializer_Deserialize_\" data-linktype=\"relative-path\">Deserialize</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example serializes a class that contains a field named <code>Members</code> that returns an array of objects. Two <a class=\"xref\" href=\"system.xml.serialization.xmlarrayitemattribute\" data-linktype=\"relative-path\">XmlArrayItemAttribute</a> objects are created to allow the field to accept objects that derive from the base class named <code>Member</code>. Each object is added to the <a class=\"xref\" href=\"system.xml.serialization.xmlattributes\" data-linktype=\"relative-path\">XmlAttributes</a> through the XmlArrayItems property.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic XmlAttributes.XmlArrayItems Example#1\">using System;\nusing System.IO;\nusing System.Xml;\nusing System.Xml.Serialization;\n\n// This is the class that will be serialized.\npublic class Group\n{\n    public Member [] Members;\n}\n\npublic class Member\n{\n    public string MemberName;\n}\n\npublic class NewMember:Member\n{\n    public int MemberID;\n}\n\npublic class RetiredMember:NewMember\n{\n    public DateTime RetireDate;\n}\n    \n\npublic class Run\n{\n   public static void Main()\n   {\n      Run test = new Run();\n      test.SerializeObject(&quot;OverrideArrayItem.xml&quot;);\n      test.DeserializeObject(&quot;OverrideArrayItem.xml&quot;);\n   }\n\n   // Return an XmlSerializer used for overriding. \n   public XmlSerializer CreateOverrider()\n   {\n      // Create XmlAttributeOverrides and XmlAttributes objects.\n      XmlAttributeOverrides xOver = new XmlAttributeOverrides();\n      XmlAttributes xAttrs = new XmlAttributes();\n\n      // Add an override for the XmlArrayItem.    \n      XmlArrayItemAttribute xArrayItem = \n      new XmlArrayItemAttribute(typeof(NewMember));\n      xArrayItem.Namespace = &quot;http://www.cpandl.com&quot;;\n      xAttrs.XmlArrayItems.Add(xArrayItem);\n\n      // Add a second override.\n      XmlArrayItemAttribute xArrayItem2 = \n      new XmlArrayItemAttribute(typeof(RetiredMember));\n      xArrayItem2.Namespace = &quot;http://www.cpandl.com&quot;;\n      xAttrs.XmlArrayItems.Add(xArrayItem2);\n\n      // Add all overrides to XmlAttribueOverrides object.\n      xOver.Add(typeof(Group), &quot;Members&quot;, xAttrs);\n\n      // Create the XmlSerializer and return it.\n      return new XmlSerializer(typeof(Group), xOver);\n   }\n   \n \n   public void SerializeObject(string filename)\n   {\n      // Create an instance of the XmlSerializer class.\n      XmlSerializer mySerializer =  CreateOverrider();\n      // Writing the file requires a TextWriter.\n      TextWriter writer = new StreamWriter(filename);\n\n      // Create an instance of the class that will be serialized.\n      Group myGroup = new Group();\n\n      // Set the object properties.\n      NewMember m = new NewMember();\n      m.MemberName = &quot;Paul&quot;;\n      m.MemberID = 2;\n\n      // Create a second member.\n      RetiredMember m2 = new RetiredMember();\n      m2.MemberName = &quot;Renaldo&quot;;\n      m2.MemberID = 23;\n      m2.RetireDate = new DateTime(2000, 10,10);\n\n      myGroup.Members = new Member[2] {m, m2};\n      \n      // Serialize the class, and close the TextWriter.\n      mySerializer.Serialize(writer, myGroup);\n      writer.Close();\n   }\n\n   public void DeserializeObject(string filename)\n   {\n      XmlSerializer mySerializer = CreateOverrider();\n      FileStream fs = new FileStream(filename, FileMode.Open);\n      Group myGroup = (Group) \n      mySerializer.Deserialize(fs);\n      foreach(Member m in myGroup.Members)\n      {\n          Console.WriteLine(m.MemberName);\n      }\n   }\n}\n   \n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic XmlAttributes.XmlArrayItems Example#1\">#using &lt;System.Xml.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nusing namespace System::Xml::Serialization;\npublic ref class Member\n{\npublic:\n   String^ MemberName;\n};\n\n// This is the class that will be serialized.\npublic ref class Group\n{\npublic:\n   array&lt;Member^&gt;^Members;\n};\n\npublic ref class NewMember: public Member\n{\npublic:\n   int MemberID;\n};\n\npublic ref class RetiredMember: public NewMember\n{\npublic:\n   DateTime RetireDate;\n};\n\n// Return an XmlSerializer used for overriding. \nXmlSerializer^ CreateOverrider()\n{\n   // Create XmlAttributeOverrides and XmlAttributes objects.\n   XmlAttributeOverrides^ xOver = gcnew XmlAttributeOverrides;\n   XmlAttributes^ xAttrs = gcnew XmlAttributes;\n\n   // Add an override for the XmlArrayItem.    \n   XmlArrayItemAttribute^ xArrayItem = gcnew XmlArrayItemAttribute( NewMember::typeid );\n   xArrayItem-&gt;Namespace = &quot;http://www.cpandl.com&quot;;\n   xAttrs-&gt;XmlArrayItems-&gt;Add( xArrayItem );\n\n   // Add a second override.\n   XmlArrayItemAttribute^ xArrayItem2 = gcnew XmlArrayItemAttribute( RetiredMember::typeid );\n   xArrayItem2-&gt;Namespace = &quot;http://www.cpandl.com&quot;;\n   xAttrs-&gt;XmlArrayItems-&gt;Add( xArrayItem2 );\n\n   // Add all overrides to XmlAttribueOverrides object.\n   xOver-&gt;Add( Group::typeid, &quot;Members&quot;, xAttrs );\n\n   // Create the XmlSerializer and return it.\n   return gcnew XmlSerializer( Group::typeid,xOver );\n}\n\nvoid SerializeObject( String^ filename )\n{\n   // Create an instance of the XmlSerializer class.\n   XmlSerializer^ mySerializer = CreateOverrider();\n\n   // Writing the file requires a TextWriter.\n   TextWriter^ writer = gcnew StreamWriter( filename );\n\n   // Create an instance of the class that will be serialized.\n   Group^ myGroup = gcnew Group;\n\n   // Set the object properties.\n   NewMember^ m = gcnew NewMember;\n   m-&gt;MemberName = &quot;Paul&quot;;\n   m-&gt;MemberID = 2;\n\n   // Create a second member.\n   RetiredMember^ m2 = gcnew RetiredMember;\n   m2-&gt;MemberName = &quot;Renaldo&quot;;\n   m2-&gt;MemberID = 23;\n   m2-&gt;RetireDate = DateTime(2000,10,10);\n   array&lt;Member^&gt;^temp = {m,m2};\n   myGroup-&gt;Members = temp;\n\n   // Serialize the class, and close the TextWriter.\n   mySerializer-&gt;Serialize( writer, myGroup );\n   writer-&gt;Close();\n}\n\nvoid DeserializeObject( String^ filename )\n{\n   XmlSerializer^ mySerializer = CreateOverrider();\n   FileStream^ fs = gcnew FileStream( filename,FileMode::Open );\n   Group^ myGroup = dynamic_cast&lt;Group^&gt;(mySerializer-&gt;Deserialize( fs ));\n   System::Collections::IEnumerator^ myEnum = myGroup-&gt;Members-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Member^ m = safe_cast&lt;Member^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( m-&gt;MemberName );\n   }\n}\n\nint main()\n{\n   SerializeObject( &quot;OverrideArrayItem.xml&quot; );\n   DeserializeObject( &quot;OverrideArrayItem.xml&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic XmlAttributes.XmlArrayItems Example#1\">Imports System\nImports System.IO\nImports System.Xml\nImports System.Xml.Serialization\n\n\n&#39; This is the class that will be serialized.\nPublic Class Group\n    Public Members() As Member\nEnd Class\n\nPublic Class Member\n    Public MemberName As String\nEnd Class\n\nPublic Class NewMember\n    Inherits Member\n    Public MemberID As Integer\nEnd Class\n\nPublic Class RetiredMember\n    Inherits NewMember\n    Public RetireDate As DateTime\nEnd Class\n\n\nPublic Class Run\n    \n    Public Shared Sub Main()\n        Dim test As New Run()\n        test.SerializeObject(&quot;OverrideArrayItem.xml&quot;)\n        test.DeserializeObject(&quot;OverrideArrayItem.xml&quot;)\n    End Sub    \n    \n    &#39; Return an XmlSerializer used for overriding. \n    Public Function CreateOverrider() As XmlSerializer\n        &#39; Create XmlAttributeOverrides and XmlAttributes objects.\n        Dim xOver As New XmlAttributeOverrides()\n        Dim xAttrs As New XmlAttributes()\n        \n        &#39; Add an override for the XmlArrayItem.    \n        Dim xArrayItem As New XmlArrayItemAttribute(GetType(NewMember))\n        xArrayItem.Namespace = &quot;http://www.cpandl.com&quot;\n        xAttrs.XmlArrayItems.Add(xArrayItem)\n        \n        &#39; Add a second override.\n        Dim xArrayItem2 As New XmlArrayItemAttribute(GetType(RetiredMember))\n        xArrayItem2.Namespace = &quot;http://www.cpandl.com&quot;\n        xAttrs.XmlArrayItems.Add(xArrayItem2)\n        \n        &#39; Add all overrides to XmlAttribueOverrides object.\n        xOver.Add(GetType(Group), &quot;Members&quot;, xAttrs)\n        \n        &#39; Create the XmlSerializer and return it.\n        Return New XmlSerializer(GetType(Group), xOver)\n    End Function \n    \n    \n    Public Sub SerializeObject(ByVal filename As String)\n        &#39; Create an instance of the XmlSerializer class.\n        Dim mySerializer As XmlSerializer = CreateOverrider()\n        &#39; Writing the file requires a TextWriter.\n        Dim writer As New StreamWriter(filename)\n        \n        &#39; Create an instance of the class that will be serialized.\n        Dim myGroup As New Group()\n        \n        &#39; Set the object properties.\n        Dim m As New NewMember()\n        m.MemberName = &quot;Paul&quot;\n        m.MemberID = 2\n        \n        &#39; Create a second member.\n        Dim m2 As New RetiredMember()\n        m2.MemberName = &quot;Renaldo&quot;\n        m2.MemberID = 23\n        m2.RetireDate = New DateTime(2000, 10, 10)\n        \n        myGroup.Members = New Member(1) {m, m2}\n        \n        &#39; Serialize the class, and close the TextWriter.\n        mySerializer.Serialize(writer, myGroup)\n        writer.Close()\n    End Sub    \n    \n    Public Sub DeserializeObject(ByVal filename As String)\n        Dim mySerializer As XmlSerializer = CreateOverrider()\n        Dim fs As New FileStream(filename, FileMode.Open)\n        Dim myGroup As Group = CType(mySerializer.Deserialize(fs), Group)\n        Dim m As Member\n        For Each m In  myGroup.Members\n            Console.WriteLine(m.MemberName)\n        Next m\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Serialization_XmlAttributes_XmlAttribute\">\r\n    \r\n            <a id=\"System_Xml_Serialization_XmlAttributes_XmlAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlAttribute</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets an object that specifies how the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> serializes a public field or public read/write property as an XML attribute.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.Serialization.XmlAttributeAttribute XmlAttribute { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.serialization.xmlattributeattribute\" data-linktype=\"relative-path\">XmlAttributeAttribute</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.serialization.xmlattributeattribute\" data-linktype=\"relative-path\">XmlAttributeAttribute</a> that controls the serialization of a public field or read/write property as an XML attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default, if no attribute is applied to a public field or public read/write property, it is serialized as an XML element. You can also instruct the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> to generate an XML attribute by applying an <a class=\"xref\" href=\"system.xml.serialization.xmlattributeattribute\" data-linktype=\"relative-path\">XmlAttributeAttribute</a> to the field or property.  </p>\n<p> The XmlAttribute property allows you to override the default serialization, as well as the serialization controlled by applying an <a class=\"xref\" href=\"system.xml.serialization.xmlattributeattribute\" data-linktype=\"relative-path\">XmlAttributeAttribute</a> to the member. To do this, create an <a class=\"xref\" href=\"system.xml.serialization.xmlattributeattribute\" data-linktype=\"relative-path\">XmlAttributeAttribute</a> and set its properties (such as <a class=\"xref\" href=\"system.xml.serialization.xmlattributeattribute#System_Xml_Serialization_XmlAttributeAttribute_AttributeName_\" data-linktype=\"relative-path\">AttributeName</a>). Assign the new object to the XmlAttribute property of an <a class=\"xref\" href=\"system.xml.serialization.xmlattributes\" data-linktype=\"relative-path\">XmlAttributes</a> object. Add the <a class=\"xref\" href=\"system.xml.serialization.xmlattributes\" data-linktype=\"relative-path\">XmlAttributes</a> object to an <a class=\"xref\" href=\"system.xml.serialization.xmlattributeoverrides\" data-linktype=\"relative-path\">XmlAttributeOverrides</a> object and specify the type of the object that contains the field or property, and the name of the field or property. Lastly, create an <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> using the <a class=\"xref\" href=\"system.xml.serialization.xmlattributeoverrides\" data-linktype=\"relative-path\">XmlAttributeOverrides</a> object and call the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer#System_Xml_Serialization_XmlSerializer_Serialize_\" data-linktype=\"relative-path\">Serialize</a> or <a class=\"xref\" href=\"system.xml.serialization.xmlserializer#System_Xml_Serialization_XmlSerializer_Deserialize_\" data-linktype=\"relative-path\">Deserialize</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example serializes a class named <code>Group</code> that contains a property named <code>GroupName</code>; the <code>GroupName</code> property is serialized as an XML attribute. The example creates an <a class=\"xref\" href=\"system.xml.serialization.xmlattributeoverrides\" data-linktype=\"relative-path\">XmlAttributeOverrides</a> and an <a class=\"xref\" href=\"system.xml.serialization.xmlattributes\" data-linktype=\"relative-path\">XmlAttributes</a> object to override the default serialization of the field. The example then creates an <a class=\"xref\" href=\"system.xml.serialization.xmlattributeattribute\" data-linktype=\"relative-path\">XmlAttributeAttribute</a> to specifically override the property, and the object is set to the XmlAttribute property The <a class=\"xref\" href=\"system.xml.serialization.xmlattributes\" data-linktype=\"relative-path\">XmlAttributes</a> object is added to the <a class=\"xref\" href=\"system.xml.serialization.xmlattributeoverrides\" data-linktype=\"relative-path\">XmlAttributeOverrides</a> object with the name of the overridden member specified. Finally, an <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> is constructed and returned using the <a class=\"xref\" href=\"system.xml.serialization.xmlattributeoverrides\" data-linktype=\"relative-path\">XmlAttributeOverrides</a> object.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic XmlAttributes.XmlAttribute Example#1\">#using &lt;System.Xml.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nusing namespace System::Xml::Serialization;\n\n// This is the class that will be serialized.\npublic ref class Group\n{\npublic:\n\n   // This is the attribute that will be overridden.\n\n   [XmlAttributeAttribute]\n   String^ GroupName;\n   int GroupNumber;\n};\n\n// Return an XmlSerializer used for overriding. \nXmlSerializer^ CreateOverrider()\n{\n   // Create the XmlAttributeOverrides and XmlAttributes objects.\n   XmlAttributeOverrides^ xOver = gcnew XmlAttributeOverrides;\n   XmlAttributes^ xAttrs = gcnew XmlAttributes;\n\n   /* Create an overriding XmlAttributeAttribute set it to \n      the XmlAttribute property of the XmlAttributes object.*/\n   XmlAttributeAttribute^ xAttribute = gcnew XmlAttributeAttribute( &quot;SplinterName&quot; );\n   xAttrs-&gt;XmlAttribute = xAttribute;\n\n   // Add to the XmlAttributeOverrides. Specify the member name.\n   xOver-&gt;Add( Group::typeid, &quot;GroupName&quot;, xAttrs );\n\n   // Create the XmlSerializer and return it.\n   return gcnew XmlSerializer( Group::typeid,xOver );\n}\n\nvoid SerializeObject( String^ filename )\n{\n   // Create an instance of the XmlSerializer class.\n   XmlSerializer^ mySerializer = CreateOverrider();\n\n   // Writing the file requires a TextWriter.\n   TextWriter^ writer = gcnew StreamWriter( filename );\n\n   // Create an instance of the class that will be serialized.\n   Group^ myGroup = gcnew Group;\n\n   /* Set the Name property, which will be generated \n      as an XML attribute. */\n   myGroup-&gt;GroupName = &quot;.NET&quot;;\n   myGroup-&gt;GroupNumber = 1;\n\n   // Serialize the class, and close the TextWriter.\n   mySerializer-&gt;Serialize( writer, myGroup );\n   writer-&gt;Close();\n}\n\nvoid DeserializeObject( String^ filename )\n{\n   XmlSerializer^ mySerializer = CreateOverrider();\n   FileStream^ fs = gcnew FileStream( filename,FileMode::Open );\n   Group^ myGroup = dynamic_cast&lt;Group^&gt;(mySerializer-&gt;Deserialize( fs ));\n   Console::WriteLine( myGroup-&gt;GroupName );\n   Console::WriteLine( myGroup-&gt;GroupNumber );\n}\n\nint main()\n{\n   SerializeObject( &quot;OverrideAttribute.xml&quot; );\n   DeserializeObject( &quot;OverrideAttribute.xml&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic XmlAttributes.XmlAttribute Example#1\">Imports System\nImports System.IO\nImports System.Xml\nImports System.Xml.Serialization\n\n\n&#39; This is the class that will be serialized.\nPublic Class Group\n    &#39; This is the attribute that will be overridden.\n    &lt;XmlAttribute()&gt; Public GroupName As String\n    Public GroupNumber As Integer\nEnd Class\n\n\nPublic Class Run\n    \n    Public Shared Sub Main()\n        Dim test As New Run()\n        test.SerializeObject(&quot;OverrideAttribute.xml&quot;)\n        test.DeserializeObject(&quot;OverrideAttribute.xml&quot;)\n    End Sub\n    \n    &#39; Return an XmlSerializer used for overriding. \n    Public Function CreateOverrider() As XmlSerializer\n        &#39; Create the XmlAttributeOverrides and XmlAttributes objects.\n        Dim xOver As New XmlAttributeOverrides()\n        Dim xAttrs As New XmlAttributes()\n        \n        &#39; Create an overriding XmlAttributeAttribute set it to\n        &#39; the XmlAttribute property of the XmlAttributes object.\n        Dim xAttribute As New XmlAttributeAttribute(&quot;SplinterName&quot;)\n        xAttrs.XmlAttribute = xAttribute\n        \n        &#39; Add to the XmlAttributeOverrides. Specify the member name.\n        xOver.Add(GetType(Group), &quot;GroupName&quot;, xAttrs)\n        \n        &#39; Create the XmlSerializer and return it.\n        Return New XmlSerializer(GetType(Group), xOver)\n    End Function &#39;CreateOverrider\n    \n    \n    Public Sub SerializeObject(ByVal filename As String)\n        &#39; Create an instance of the XmlSerializer class.\n        Dim mySerializer As XmlSerializer = CreateOverrider()\n        &#39; Writing the file requires a TextWriter.\n        Dim writer As New StreamWriter(filename)\n        \n        &#39; Create an instance of the class that will be serialized.\n        Dim myGroup As New Group()\n        \n        &#39; Set the Name property, which will be generated\n        &#39; as an XML attribute. \n        myGroup.GroupName = &quot;.NET&quot;\n        myGroup.GroupNumber = 1\n        &#39; Serialize the class, and close the TextWriter.\n        mySerializer.Serialize(writer, myGroup)\n        writer.Close()\n    End Sub\n    \n    \n    Public Sub DeserializeObject(ByVal filename As String)\n        Dim mySerializer As XmlSerializer = CreateOverrider()\n        Dim fs As New FileStream(filename, FileMode.Open)\n        Dim myGroup As Group = CType(mySerializer.Deserialize(fs), Group)\n\n        Console.WriteLine(myGroup.GroupName)\n        Console.WriteLine(myGroup.GroupNumber)\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic XmlAttributes.XmlAttribute Example#1\">using System;\nusing System.IO;\nusing System.Xml;\nusing System.Xml.Serialization;\n\n// This is the class that will be serialized.\npublic class Group\n{\n   // This is the attribute that will be overridden.\n   [XmlAttribute]\n   public string GroupName;\n   public int GroupNumber;\n}\n \npublic class Run\n{\n   public static void Main()\n   {\n      Run test = new Run();\n      test.SerializeObject(&quot;OverrideAttribute.xml&quot;);\n      test.DeserializeObject(&quot;OverrideAttribute.xml&quot;);\n   }\n   // Return an XmlSerializer used for overriding. \n   public XmlSerializer CreateOverrider()\n   {\n      // Create the XmlAttributeOverrides and XmlAttributes objects.\n      XmlAttributeOverrides xOver = new XmlAttributeOverrides();\n      XmlAttributes xAttrs = new XmlAttributes();\n\n      /* Create an overriding XmlAttributeAttribute set it to \n      the XmlAttribute property of the XmlAttributes object.*/\n      XmlAttributeAttribute xAttribute = new XmlAttributeAttribute(&quot;SplinterName&quot;);\n      xAttrs.XmlAttribute = xAttribute;\n\n      // Add to the XmlAttributeOverrides. Specify the member name.\n      xOver.Add(typeof(Group), &quot;GroupName&quot;, xAttrs);\n\n      // Create the XmlSerializer and return it.\n      return new XmlSerializer(typeof(Group), xOver);\n   }\n \n   public void SerializeObject(string filename)\n   {\n      // Create an instance of the XmlSerializer class.\n      XmlSerializer mySerializer =  CreateOverrider();\n      // Writing the file requires a TextWriter.\n      TextWriter writer = new StreamWriter(filename);\n\n      // Create an instance of the class that will be serialized.\n      Group myGroup = new Group();\n\n      /* Set the Name property, which will be generated \n      as an XML attribute. */\n      myGroup.GroupName = &quot;.NET&quot;;\n      myGroup.GroupNumber = 1;\n      // Serialize the class, and close the TextWriter.\n      mySerializer.Serialize(writer, myGroup);\n       writer.Close();\n   }\n\n   public void DeserializeObject(string filename)\n   {\n      XmlSerializer mySerializer = CreateOverrider();\n      FileStream fs = new FileStream(filename, FileMode.Open);\n      Group myGroup = (Group) \n      mySerializer.Deserialize(fs);\n      \n      Console.WriteLine(myGroup.GroupName);\n      Console.WriteLine(myGroup.GroupNumber);\n   }\n}\n   \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Serialization_XmlAttributes_XmlChoiceIdentifier\">\r\n    \r\n            <a id=\"System_Xml_Serialization_XmlAttributes_XmlChoiceIdentifier_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlChoiceIdentifier</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets an object that allows you to distinguish between a set of choices.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.Serialization.XmlChoiceIdentifierAttribute XmlChoiceIdentifier { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.serialization.xmlchoiceidentifierattribute\" data-linktype=\"relative-path\">XmlChoiceIdentifierAttribute</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.serialization.xmlchoiceidentifierattribute\" data-linktype=\"relative-path\">XmlChoiceIdentifierAttribute</a> that can be applied to a class member that is serialized as an <code>xsi:choice</code> element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Serialization_XmlAttributes_XmlDefaultValue\">\r\n    \r\n            <a id=\"System_Xml_Serialization_XmlAttributes_XmlDefaultValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlDefaultValue</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the default value of an XML element or attribute.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object XmlDefaultValue { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> that represents the default value of an XML element or attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can specify the default value of an XML element or XML attribute by applying a <a class=\"xref\" href=\"system.componentmodel.defaultvalueattribute\" data-linktype=\"relative-path\">DefaultValueAttribute</a> to a member. To examine the result of applying the value, compile the application into a DLL or executable, and pass the resulting file as an argument to the XML Schema Definition tool (XSD.exe). In the XML schema document, a default value is assigned to the <code>default</code> attribute. In the following example, the default for the &lt;Animal&gt; element is &quot;Dogs.&quot;  </p>\n<pre><code>&lt;?xml version=&quot;1.0&quot;?&gt;  \n &lt;schema attributeFormDefault=&quot;qualified&quot;   \n elementFormDefault=&quot;qualified&quot; targetNamespace=&quot;&quot;   \n xmlns=&quot;http://www.w3.org/2000/10/XMLSchema&quot;&gt;  \n   &lt;element name=&quot;Pets&quot; nullable=&quot;true&quot; type=&quot;Pets&quot;/&gt;  \n   &lt;complexType name=&quot;Pets&quot;&gt;  \n     &lt;sequence&gt;  \n       &lt;element default=&quot;Dogs&quot; name=&quot;Animal&quot; nullable=&quot;true&quot;   \n        type=&quot;string&quot; minOccurs=&quot;0&quot;/&gt;  \n     &lt;/sequence&gt;  \n   &lt;/complexType&gt;  \n &lt;/schema&gt;\n</code></pre><p> To override the default value, create an <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> and assign it to the XmlDefaultValue.  </p>\n<p> If the value assigned to a field or property is equal to the default value for that field or property, the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> does not serialize the value to the XML-instance. This is because the assigned value can be recovered from the XML schema. In other words, setting a field or property to its own default value is equivalent of not setting it at all. Likewise, if no value is set for the field or property, the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> uses the default value found in the schema. In both cases, (setting the property to its default, or not setting it at all), the XML-document instance does not contain any value for the property.  </p>\n<p> You can use the class constructors instead of the schema to assign the default values. If you are using Xsd.exe to generate a classes from schemas, you can comment out or remove all of the [System.ComponentModel.DefaultValueAttribute(&quot;myFieldName&quot;)] attributes from the class files.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows a class named <code>Pet</code> that contains a field that has a default value set to &quot;Dog&quot;. However, the example also creates an <a class=\"xref\" href=\"system.xml.serialization.xmlattributes\" data-linktype=\"relative-path\">XmlAttributes</a> object, and sets its XmlDefaultValue property to a new default value (&quot;Cat&quot;). This overrides the original default value. Thus, if the field value is set to &quot;Cat&quot;, the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> treats it as the default value, and not serialize it. If it is set to any other value, the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> serializes the value.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic XmlAttributes.XmlDefaultValue Example#1\">Imports System\nImports System.IO\nImports System.Xml\nImports System.Xml.Serialization\nImports System.ComponentModel\n\n\n&#39; This is the class that will be serialized. \nPublic Class Pet\n    &#39; The default value for the Animal field is &quot;Dog&quot;. \n    &lt;DefaultValueAttribute(&quot;Dog&quot;)&gt; Public Animal As String \nEnd Class\n\n\nPublic Class Run\n    \n    Public Shared Sub Main()\n        Dim test As New Run()\n        test.SerializeObject(&quot;OverrideDefaultValue.xml&quot;)\n        test.DeserializeObject(&quot;OverrideDefaultValue.xml&quot;)\n    End Sub &#39;Main\n    \n    \n    &#39; Return an XmlSerializer used for overriding. \n    Public Function CreateOverrider() As XmlSerializer\n        &#39; Create the XmlAttributeOverrides and XmlAttributes objects. \n        Dim xOver As New XmlAttributeOverrides()\n        Dim xAttrs As New XmlAttributes()\n        \n        &#39; Add an override for the default value of the GroupName. \n        Dim defaultName As Object = &quot;Cat&quot;\n        xAttrs.XmlDefaultValue = defaultName\n        \n        &#39; Add all the XmlAttributes to the XmlAttributeOverrides object. \n        xOver.Add(GetType(Pet), &quot;Animal&quot;, xAttrs)\n        \n        &#39; Create the XmlSerializer and return it.\n        Return New XmlSerializer(GetType(Pet), xOver)\n    End Function\n    \n    \n    Public Sub SerializeObject(ByVal filename As String)\n       &#39; Create an instance of the XmlSerializer class.\n       Dim mySerializer As XmlSerializer = CreateOverrider()\n        \n       &#39; Writing the file requires a TextWriter.\n       Dim writer As New StreamWriter(filename)\n        \n       &#39; Create an instance of the class that will be serialized. \n       Dim myPet As New Pet()\n        \n       &#39; Set the Animal property. If you set it to the default value,\n       &#39; which is &quot;Cat&quot; (the value assigned to the XmlDefaultValue\n       &#39; of the XmlAttributes object), no value will be serialized.\n       &#39; If you change the value to any other value (including &quot;Dog&quot;),\n       &#39; the value will be serialized.\n\n      &#39; The default value &quot;Cat&quot; will be assigned (nothing serialized).\n      myPet.Animal = &quot;&quot;\n      &#39; Uncommenting the next line also results in the default \n      &#39; value because Cat is the default value (not serialized).\n      &#39;  myPet.Animal = &quot;Cat&quot;; \n      \n      &#39; Uncomment the next line to see the value serialized:\n      &#39; myPet.Animal = &quot;fish&quot;;\n      &#39; This will also be serialized because Dog is not the \n      &#39; default anymore.\n      &#39;  myPet.Animal = &quot;Dog&quot;;\n       &#39; Serialize the class, and close the TextWriter.\n        mySerializer.Serialize(writer, myPet)\n        writer.Close()\n    End Sub\n    \n    \n    Public Sub DeserializeObject(ByVal filename As String)\n        Dim mySerializer As XmlSerializer = CreateOverrider()\n        Dim fs As New FileStream(filename, FileMode.Open)\n        Dim myPet As Pet = CType(mySerializer.Deserialize(fs), Pet)\n        Console.WriteLine(myPet.Animal)\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic XmlAttributes.XmlDefaultValue Example#1\">using System; \nusing System.IO; \nusing System.Xml; \nusing System.Xml.Serialization; \nusing System.ComponentModel; \n\n// This is the class that will be serialized. \npublic class Pet \n{\n   // The default value for the Animal field is &quot;Dog&quot;. \n   [DefaultValueAttribute(&quot;Dog&quot;)] \n   public string Animal ; \n} \n\npublic class Run \n{ \n   public static void Main() \n   { \n      Run test = new Run();\n      test.SerializeObject(&quot;OverrideDefaultValue.xml&quot;);\n      test.DeserializeObject(&quot;OverrideDefaultValue.xml&quot;); \n   }\n \n   // Return an XmlSerializer used for overriding. \n   public XmlSerializer CreateOverrider() \n   { \n      // Create the XmlAttributeOverrides and XmlAttributes objects. \n      XmlAttributeOverrides xOver = new XmlAttributeOverrides(); \n      XmlAttributes xAttrs = new XmlAttributes(); \n\n      // Add an override for the default value of the GroupName. \n      Object defaultAnimal= &quot;Cat&quot;;\n      xAttrs.XmlDefaultValue = defaultAnimal; \n\n      // Add all the XmlAttributes to the XmlAttributeOverrides object. \n      xOver.Add(typeof(Pet), &quot;Animal&quot;, xAttrs); \n\n      // Create the XmlSerializer and return it.\n      return new XmlSerializer(typeof(Pet), xOver);\n   }\n\n   public void SerializeObject(string filename)\n   {\n      // Create an instance of the XmlSerializer class.\n      XmlSerializer mySerializer = CreateOverrider(); \n\n      // Writing the file requires a TextWriter.\n      TextWriter writer = new StreamWriter(filename); \n\n      // Create an instance of the class that will be serialized. \n      Pet myPet = new Pet(); \n\n      /* Set the Animal property. If you set it to the default value,\n         which is &quot;Cat&quot; (the value assigned to the XmlDefaultValue\n         of the XmlAttributes object), no value will be serialized.\n         If you change the value to any other value (including &quot;Dog&quot;),\n         the value will be serialized.\n      */\n      // The default value &quot;Cat&quot; will be assigned (nothing serialized).\n      myPet.Animal= &quot;&quot;; \n      // Uncommenting the next line also results in the default \n      // value because Cat is the default value (not serialized).\n      //  myPet.Animal = &quot;Cat&quot;; \n      \n      // Uncomment the next line to see the value serialized:\n      // myPet.Animal = &quot;fish&quot;;\n      // This will also be serialized because Dog is not the \n      // default anymore.\n      //  myPet.Animal = &quot;Dog&quot;;\n      // Serialize the class, and close the TextWriter. \n      mySerializer.Serialize(writer, myPet); \n      writer.Close(); \n   } \n\n   public void DeserializeObject(string filename) \n   {\n      XmlSerializer mySerializer = CreateOverrider();\n      FileStream fs = new FileStream(filename, FileMode.Open);\n      Pet myPet= (Pet)mySerializer.Deserialize(fs);\n      Console.WriteLine(myPet.Animal);\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic XmlAttributes.XmlDefaultValue Example#1\">#using &lt;System.dll&gt;\n#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nusing namespace System::Xml::Serialization;\nusing namespace System::ComponentModel;\n\n// This is the class that will be serialized. \npublic ref class Pet\n{\npublic:\n\n   // The default value for the Animal field is &quot;Dog&quot;. \n\n   [DefaultValueAttribute(&quot;Dog&quot;)]\n   String^ Animal;\n};\n\n// Return an XmlSerializer used for overriding. \nXmlSerializer^ CreateOverrider()\n{\n   // Create the XmlAttributeOverrides and XmlAttributes objects. \n   XmlAttributeOverrides^ xOver = gcnew XmlAttributeOverrides;\n   XmlAttributes^ xAttrs = gcnew XmlAttributes;\n\n   // Add an override for the default value of the GroupName. \n   Object^ defaultAnimal = &quot;Cat&quot;;\n   xAttrs-&gt;XmlDefaultValue = defaultAnimal;\n\n   // Add all the XmlAttributes to the XmlAttributeOverrides object. \n   xOver-&gt;Add( Pet::typeid, &quot;Animal&quot;, xAttrs );\n\n   // Create the XmlSerializer and return it.\n   return gcnew XmlSerializer( Pet::typeid,xOver );\n}\n\nvoid SerializeObject( String^ filename )\n{\n   // Create an instance of the XmlSerializer class.\n   XmlSerializer^ mySerializer = CreateOverrider();\n\n   // Writing the file requires a TextWriter.\n   TextWriter^ writer = gcnew StreamWriter( filename );\n\n   // Create an instance of the class that will be serialized. \n   Pet^ myPet = gcnew Pet;\n\n   /* Set the Animal property. If you set it to the default value,\n      which is &quot;Cat&quot; (the value assigned to the XmlDefaultValue\n      of the XmlAttributes object), no value will be serialized.\n      If you change the value to any other value (including &quot;Dog&quot;),\n      the value will be serialized.\n      */\n   // The default value &quot;Cat&quot; will be assigned (nothing serialized).\n   myPet-&gt;Animal = &quot;&quot;;\n\n   // Uncommenting the next line also results in the default \n   // value because Cat is the default value (not serialized).\n   //  myPet.Animal = &quot;Cat&quot;; \n   // Uncomment the next line to see the value serialized:\n   // myPet.Animal = &quot;fish&quot;;\n   // This will also be serialized because Dog is not the \n   // default anymore.\n   //  myPet.Animal = &quot;Dog&quot;;\n   // Serialize the class, and close the TextWriter. \n   mySerializer-&gt;Serialize( writer, myPet );\n   writer-&gt;Close();\n}\n\nvoid DeserializeObject( String^ filename )\n{\n   XmlSerializer^ mySerializer = CreateOverrider();\n   FileStream^ fs = gcnew FileStream( filename,FileMode::Open );\n   Pet^ myPet = dynamic_cast&lt;Pet^&gt;(mySerializer-&gt;Deserialize( fs ));\n   Console::WriteLine( myPet-&gt;Animal );\n}\n\nint main()\n{\n   SerializeObject( &quot;OverrideDefaultValue.xml&quot; );\n   DeserializeObject( &quot;OverrideDefaultValue.xml&quot; );\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Serialization_XmlAttributes_XmlElements\">\r\n    \r\n            <a id=\"System_Xml_Serialization_XmlAttributes_XmlElements_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlElements</div>        \r\n          </div>\r\n    \r\n            <p>Gets a collection of objects that specify how the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> serializes a public field or read/write property as an XML element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.Serialization.XmlElementAttributes XmlElements { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.serialization.xmlelementattributes\" data-linktype=\"relative-path\">XmlElementAttributes</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.serialization.xmlelementattributes\" data-linktype=\"relative-path\">XmlElementAttributes</a> that contains a collection of <a class=\"xref\" href=\"system.xml.serialization.xmlelementattribute\" data-linktype=\"relative-path\">XmlElementAttribute</a> objects.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For each overridden member that is serialized as an XML element, you must add a new <a class=\"xref\" href=\"system.xml.serialization.xmlelementattribute\" data-linktype=\"relative-path\">XmlElementAttribute</a> to an <a class=\"xref\" href=\"system.xml.serialization.xmlelementattributes\" data-linktype=\"relative-path\">XmlElementAttributes</a> by calling the <a class=\"xref\" href=\"system.xml.serialization.xmlelementattributes#System_Xml_Serialization_XmlElementAttributes_Add_\" data-linktype=\"relative-path\">Add</a> method. By default, an <a class=\"xref\" href=\"system.xml.serialization.xmlelementattributes\" data-linktype=\"relative-path\">XmlElementAttributes</a> object is created and assigned to the XmlElements property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example serializes the <code>Transportation</code> class, which contains a single field named <code>Vehicles</code> that returns an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>. The example applies two <a class=\"xref\" href=\"system.xml.serialization.xmlelementattribute\" data-linktype=\"relative-path\">XmlElementAttribute</a> attributes to the <code>Vehicles</code> field. The example creates two <a class=\"xref\" href=\"system.xml.serialization.xmlelementattribute\" data-linktype=\"relative-path\">XmlElementAttribute</a> objects and adds them to the <a class=\"xref\" href=\"system.xml.serialization.xmlelementattributes\" data-linktype=\"relative-path\">XmlElementAttributes</a> collection of an <a class=\"xref\" href=\"system.xml.serialization.xmlattributes\" data-linktype=\"relative-path\">XmlAttributes</a> object. To allow the array to accept different object types, the <a class=\"xref\" href=\"system.xml.serialization.xmlattributes\" data-linktype=\"relative-path\">XmlAttributes</a> object is added to the <a class=\"xref\" href=\"system.xml.serialization.xmlattributeoverrides\" data-linktype=\"relative-path\">XmlAttributeOverrides</a> object.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic XmlAttributes.XmlElements Example#1\">using System;\nusing System.IO;\nusing System.Xml.Serialization;\nusing System.Collections;\nusing System.Xml;\n\npublic class Transportation\n{\n   // Subsequent code overrides these two XmlElementAttributes.\n   [XmlElement(typeof(Car)),\n   XmlElement(typeof(Plane))]\n   public ArrayList Vehicles;\n}\n\npublic class Car\n{\n   public string Name;\n}\n\npublic class Plane\n{\n   public string Name;\n}\npublic class Truck\n{\n   public string Name;\n}\npublic class Train\n{\n   public string Name;\n}\n\npublic class Test\n{\n   public static void Main()\n   {\n      Test t = new Test();\n      t.SerializeObject(&quot;OverrideElement.xml&quot;);\n   }\n\n   // Return an XmlSerializer used for overriding.\n   public XmlSerializer CreateOverrider()\n   {\n      // Create the XmlAttributes and XmlAttributeOverrides objects.\n      XmlAttributes attrs = new XmlAttributes();\n\n      XmlAttributeOverrides xOver = \n      new XmlAttributeOverrides();\n      \n      \n      /* Create an XmlElementAttribute to override \n      the Vehicles property. */\n      XmlElementAttribute xElement1 = \n      new XmlElementAttribute(typeof(Truck));\n      // Add the XmlElementAttribute to the collection.\n      attrs.XmlElements.Add(xElement1);\n\n      /* Create a second XmlElementAttribute, and \n      add it to the collection. */\n      XmlElementAttribute xElement2 = \n      new XmlElementAttribute(typeof(Train));\n      attrs.XmlElements.Add(xElement2);\n\n      /* Add the XmlAttributes to the XmlAttributeOverrides,\n      specifying the member to override. */\n      xOver.Add(typeof(Transportation), &quot;Vehicles&quot;, attrs);\n      \n      // Create the XmlSerializer, and return it.\n      XmlSerializer xSer = new XmlSerializer\n      (typeof(Transportation), xOver);\n      return xSer;\n   }\n\n   public void SerializeObject(string filename)\n   {\n      // Create an XmlSerializer instance.\n      XmlSerializer xSer = CreateOverrider();\n\n      // Create the object and serialize it.\n      Transportation myTransportation = \n      new Transportation();\n\n      /* Create two new override objects that can be\n      inserted into the array. */\n      myTransportation.Vehicles = new ArrayList();\n      Truck myTruck = new Truck();\n      myTruck.Name = &quot;MyTruck&quot;;\n\n      Train myTrain = new Train();\n      myTrain.Name = &quot;MyTrain&quot;;\n\n      myTransportation.Vehicles.Add(myTruck);\n      myTransportation.Vehicles.Add(myTrain);\n\n      TextWriter writer = new StreamWriter(filename);\n      xSer.Serialize(writer, myTransportation);\n      \n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic XmlAttributes.XmlElements Example#1\">Imports System\nImports System.IO\nImports System.Xml.Serialization\nImports System.Collections\nImports System.Xml\n\n\nPublic Class Transportation\n    &#39; Subsequent code overrides these two XmlElementAttributes.\n    &lt;XmlElement(GetType(Car)), _\n     XmlElement(GetType(Plane))&gt; _\n    Public Vehicles As ArrayList\nEnd Class\n\nPublic Class Car\n    Public Name As String\nEnd Class\n\nPublic Class Plane\n    Public Name As String\nEnd Class\n\nPublic Class Truck\n    Public Name As String\nEnd Class\n\nPublic Class Train\n    Public Name As String\nEnd Class\n\n\nPublic Class Test\n    \n    Public Shared Sub Main()\n        Dim t As New Test()\n        t.SerializeObject(&quot;OverrideElement.xml&quot;)\n    End Sub\n    \n    \n    &#39; Return an XmlSerializer used for overriding.\n    Public Function CreateOverrider() As XmlSerializer\n        &#39; Create the XmlAttributes and XmlAttributeOverrides objects.\n        Dim attrs As New XmlAttributes()\n        \n        Dim xOver As New XmlAttributeOverrides()\n        \n        \n        &#39; Create an XmlElementAttribute to override\n        &#39; the Vehicles property. \n        Dim xElement1 As New XmlElementAttribute(GetType(Truck))\n        &#39; Add the XmlElementAttribute to the collection.\n        attrs.XmlElements.Add(xElement1)\n        \n        &#39; Create a second XmlElementAttribute, and\n        &#39; add it to the collection. \n        Dim xElement2 As New XmlElementAttribute(GetType(Train))\n        attrs.XmlElements.Add(xElement2)\n        \n        &#39; Add the XmlAttributes to the XmlAttributeOverrides,\n        &#39; specifying the member to override. \n        xOver.Add(GetType(Transportation), &quot;Vehicles&quot;, attrs)\n        \n        &#39; Create the XmlSerializer, and return it.\n        Dim xSer As New XmlSerializer(GetType(Transportation), xOver)\n        Return xSer\n    End Function\n    \n    \n    Public Sub SerializeObject(ByVal filename As String)\n        &#39; Create an XmlSerializer instance.\n        Dim xSer As XmlSerializer = CreateOverrider()\n        \n        &#39; Create the object and serialize it.\n        Dim myTransportation As New Transportation()\n        \n        &#39; Create two new override objects that can be\n&#39;\n        &#39; inserted into the array. \n        myTransportation.Vehicles = New ArrayList()\n        Dim myTruck As New Truck()\n        myTruck.Name = &quot;MyTruck&quot;\n        \n        Dim myTrain As New Train()\n        myTrain.Name = &quot;MyTrain&quot;\n        \n        myTransportation.Vehicles.Add(myTruck)\n        myTransportation.Vehicles.Add(myTrain)\n        \n        Dim writer As New StreamWriter(filename)\n        xSer.Serialize(writer, myTransportation)\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic XmlAttributes.XmlElements Example#1\">#using &lt;System.Xml.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml::Serialization;\nusing namespace System::Collections;\nusing namespace System::Xml;\n\npublic ref class Car\n{\npublic:\n   String^ Name;\n};\n\npublic ref class Plane\n{\npublic:\n   String^ Name;\n};\n\npublic ref class Truck\n{\npublic:\n   String^ Name;\n};\n\npublic ref class Train\n{\npublic:\n   String^ Name;\n};\n\npublic ref class Transportation\n{\npublic:\n\n   // Subsequent code overrides these two XmlElementAttributes.\n\n   [XmlElement(Car::typeid),\n   XmlElement(Plane::typeid)]\n   ArrayList^ Vehicles;\n};\n\n// Return an XmlSerializer used for overriding.\nXmlSerializer^ CreateOverrider()\n{\n   // Create the XmlAttributes and XmlAttributeOverrides objects.\n   XmlAttributes^ attrs = gcnew XmlAttributes;\n   XmlAttributeOverrides^ xOver = gcnew XmlAttributeOverrides;\n\n   /* Create an XmlElementAttribute to override \n      the Vehicles property. */\n   XmlElementAttribute^ xElement1 = gcnew XmlElementAttribute( Truck::typeid );\n\n   // Add the XmlElementAttribute to the collection.\n   attrs-&gt;XmlElements-&gt;Add( xElement1 );\n\n   /* Create a second XmlElementAttribute, and \n      add it to the collection. */\n   XmlElementAttribute^ xElement2 = gcnew XmlElementAttribute( Train::typeid );\n   attrs-&gt;XmlElements-&gt;Add( xElement2 );\n\n   /* Add the XmlAttributes to the XmlAttributeOverrides,\n      specifying the member to override. */\n   xOver-&gt;Add( Transportation::typeid, &quot;Vehicles&quot;, attrs );\n\n   // Create the XmlSerializer, and return it.\n   XmlSerializer^ xSer = gcnew XmlSerializer( Transportation::typeid,xOver );\n   return xSer;\n}\n\nvoid SerializeObject( String^ filename )\n{\n   // Create an XmlSerializer instance.\n   XmlSerializer^ xSer = CreateOverrider();\n\n   // Create the object and serialize it.\n   Transportation^ myTransportation = gcnew Transportation;\n\n   /* Create two new override objects that can be\n      inserted into the array. */\n   myTransportation-&gt;Vehicles = gcnew ArrayList;\n   Truck^ myTruck = gcnew Truck;\n   myTruck-&gt;Name = &quot;MyTruck&quot;;\n   Train^ myTrain = gcnew Train;\n   myTrain-&gt;Name = &quot;MyTrain&quot;;\n   myTransportation-&gt;Vehicles-&gt;Add( myTruck );\n   myTransportation-&gt;Vehicles-&gt;Add( myTrain );\n   TextWriter^ writer = gcnew StreamWriter( filename );\n   xSer-&gt;Serialize( writer, myTransportation );\n}\n\nint main()\n{\n   SerializeObject( &quot;OverrideElement.xml&quot; );\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Serialization_XmlAttributes_XmlEnum\">\r\n    \r\n            <a id=\"System_Xml_Serialization_XmlAttributes_XmlEnum_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlEnum</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets an object that specifies how the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> serializes an enumeration member.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.Serialization.XmlEnumAttribute XmlEnum { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.serialization.xmlenumattribute\" data-linktype=\"relative-path\">XmlEnumAttribute</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.serialization.xmlenumattribute\" data-linktype=\"relative-path\">XmlEnumAttribute</a> that specifies how the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> serializes an enumeration member.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For each identifier you want to override, you must create an <a class=\"xref\" href=\"system.xml.serialization.xmlattributes\" data-linktype=\"relative-path\">XmlAttributes</a> object, and set the XmlEnum property to an <a class=\"xref\" href=\"system.xml.serialization.xmlenumattribute\" data-linktype=\"relative-path\">XmlEnumAttribute</a> that overrides the identifier. Add the <a class=\"xref\" href=\"system.xml.serialization.xmlattributes\" data-linktype=\"relative-path\">XmlAttributes</a> object to the <a class=\"xref\" href=\"system.xml.serialization.xmlattributeoverrides\" data-linktype=\"relative-path\">XmlAttributeOverrides</a> object and specify both the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> of the class that contains the enumeration, and the overridden member name.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example serializes two classes named <code>Food</code> and <code>FoodType</code>. The <code>FoodType</code> class contains two enumerations that are overridden and, for each enumeration, the example creates an <a class=\"xref\" href=\"system.xml.serialization.xmlenumattribute\" data-linktype=\"relative-path\">XmlEnumAttribute</a> object that it assigns to the XmlEnum property of an <a class=\"xref\" href=\"system.xml.serialization.xmlattributes\" data-linktype=\"relative-path\">XmlAttributes</a> object. The example then adds the <a class=\"xref\" href=\"system.xml.serialization.xmlattributes\" data-linktype=\"relative-path\">XmlAttributes</a> object to an <a class=\"xref\" href=\"system.xml.serialization.xmlattributeoverrides\" data-linktype=\"relative-path\">XmlAttributeOverrides</a> object, which is used to create an <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic XmlAttributes.XmlEnum Example#1\">using System;\nusing System.IO;\nusing System.Xml;\nusing System.Xml.Serialization;\n\n// This is the class that will be serialized.\npublic class Food\n{\n   public FoodType Type;\n}\n\npublic enum FoodType\n{\n   // Subsequent code overrides these enumerations.\n   Low,\n   High\n}\n\n\n \npublic class Run\n{\n   public static void Main()\n   {\n      Run test = new Run();\n      test.SerializeObject(&quot;OverrideEnum.xml&quot;);\n      test.DeserializeObject(&quot;OverrideEnum.xml&quot;);\n   }\n\n   // Return an XmlSerializer used for overriding. \n   public XmlSerializer CreateOverrider()\n   {\n      // Create the XmlAttributeOverrides and XmlAttributes objects.\n      XmlAttributeOverrides xOver = new XmlAttributeOverrides();\n      XmlAttributes xAttrs = new XmlAttributes();\n\n      // Add an XmlEnumAttribute for the FoodType.Low enumeration.\n      XmlEnumAttribute xEnum = new XmlEnumAttribute();\n      xEnum.Name = &quot;Cold&quot;;\n      xAttrs.XmlEnum = xEnum;\n      xOver.Add(typeof(FoodType), &quot;Low&quot;, xAttrs);\n\n      // Add an XmlEnumAttribute for the FoodType.High enumeration.\n      xAttrs = new XmlAttributes();\n      xEnum = new XmlEnumAttribute();\n      xEnum.Name = &quot;Hot&quot;;\n      xAttrs.XmlEnum = xEnum;\n      xOver.Add(typeof(FoodType), &quot;High&quot;, xAttrs);\n\n      // Create the XmlSerializer, and return it.\n      return new XmlSerializer(typeof(Food), xOver);\n   }\n   \n \n   public void SerializeObject(string filename)\n   {\n      // Create an instance of the XmlSerializer class.\n      XmlSerializer mySerializer =  CreateOverrider();\n      // Writing the file requires a TextWriter.\n      TextWriter writer = new StreamWriter(filename);\n\n      // Create an instance of the class that will be serialized.\n      Food myFood = new Food();\n\n      // Set the object properties.\n      myFood.Type = FoodType.High;\n\n      // Serialize the class, and close the TextWriter.\n      mySerializer.Serialize(writer, myFood);\n      writer.Close();\n   }\n\n   public void DeserializeObject(string filename)\n   {\n      XmlSerializer mySerializer = CreateOverrider();\n      FileStream fs = new FileStream(filename, FileMode.Open);\n      Food myFood = (Food) \n      mySerializer.Deserialize(fs);\n\n      Console.WriteLine(myFood.Type);\n   }\n}\n   \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic XmlAttributes.XmlEnum Example#1\">Imports System\nImports System.IO\nImports System.Xml\nImports System.Xml.Serialization\n\n\n&#39; This is the class that will be serialized.\nPublic Class Food\n    Public Type As FoodType\nEnd Class\n\nPublic Enum FoodType\n    &#39; Subsequent code overrides these enumerations.\n    Low\n    High\nEnd Enum\n\n\nPublic Class Run\n    \n    Public Shared Sub Main()\n        Dim test As New Run()\n        test.SerializeObject(&quot;OverrideEnum.xml&quot;)\n        test.DeserializeObject(&quot;OverrideEnum.xml&quot;)\n    End Sub\n    \n    \n    &#39; Return an XmlSerializer used for overriding. \n    Public Function CreateOverrider() As XmlSerializer\n        &#39; Create the XmlAttributeOverrides and XmlAttributes objects.\n        Dim xOver As New XmlAttributeOverrides()\n        Dim xAttrs As New XmlAttributes()\n        \n        &#39; Add an XmlEnumAttribute for the FoodType.Low enumeration.\n        Dim xEnum As New XmlEnumAttribute()\n        xEnum.Name = &quot;Cold&quot;\n        xAttrs.XmlEnum = xEnum\n        xOver.Add(GetType(FoodType), &quot;Low&quot;, xAttrs)\n        \n        &#39; Add an XmlEnumAttribute for the FoodType.High enumeration.\n        xAttrs = New XmlAttributes()\n        xEnum = New XmlEnumAttribute()\n        xEnum.Name = &quot;Hot&quot;\n        xAttrs.XmlEnum = xEnum\n        xOver.Add(GetType(FoodType), &quot;High&quot;, xAttrs)\n        \n        &#39; Create the XmlSerializer, and return it.\n        Return New XmlSerializer(GetType(Food), xOver)\n    End Function\n    \n        \n    Public Sub SerializeObject(ByVal filename As String)\n        &#39; Create an instance of the XmlSerializer class.\n        Dim mySerializer As XmlSerializer = CreateOverrider()\n        &#39; Writing the file requires a TextWriter.\n        Dim writer As New StreamWriter(filename)\n        \n        &#39; Create an instance of the class that will be serialized.\n        Dim myFood As New Food()\n        \n        &#39; Set the object properties.\n        myFood.Type = FoodType.High\n        \n        &#39; Serialize the class, and close the TextWriter.\n        mySerializer.Serialize(writer, myFood)\n        writer.Close()\n    End Sub\n    \n    \n    Public Sub DeserializeObject(ByVal filename As String)\n        Dim mySerializer As XmlSerializer = CreateOverrider()\n        Dim fs As New FileStream(filename, FileMode.Open)\n        Dim myFood As Food = CType(mySerializer.Deserialize(fs), Food)\n        \n        Console.WriteLine(myFood.Type)\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic XmlAttributes.XmlEnum Example#1\">#using &lt;System.Xml.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nusing namespace System::Xml::Serialization;\npublic enum class FoodType\n{\n   // Subsequent code overrides these enumerations.\n   Low, High\n};\n\n// This is the class that will be serialized.\npublic ref class Food\n{\npublic:\n   FoodType Type;\n};\n\n// Return an XmlSerializer used for overriding. \nXmlSerializer^ CreateOverrider()\n{\n   // Create the XmlAttributeOverrides and XmlAttributes objects.\n   XmlAttributeOverrides^ xOver = gcnew XmlAttributeOverrides;\n   XmlAttributes^ xAttrs = gcnew XmlAttributes;\n\n   // Add an XmlEnumAttribute for the FoodType.Low enumeration.\n   XmlEnumAttribute^ xEnum = gcnew XmlEnumAttribute;\n   xEnum-&gt;Name = &quot;Cold&quot;;\n   xAttrs-&gt;XmlEnum = xEnum;\n   xOver-&gt;Add( FoodType::typeid, &quot;Low&quot;, xAttrs );\n\n   // Add an XmlEnumAttribute for the FoodType.High enumeration.\n   xAttrs = gcnew XmlAttributes;\n   xEnum = gcnew XmlEnumAttribute;\n   xEnum-&gt;Name = &quot;Hot&quot;;\n   xAttrs-&gt;XmlEnum = xEnum;\n   xOver-&gt;Add( FoodType::typeid, &quot;High&quot;, xAttrs );\n\n   // Create the XmlSerializer, and return it.\n   return gcnew XmlSerializer( Food::typeid,xOver );\n}\n\nvoid SerializeObject( String^ filename )\n{\n   // Create an instance of the XmlSerializer class.\n   XmlSerializer^ mySerializer = CreateOverrider();\n\n   // Writing the file requires a TextWriter.\n   TextWriter^ writer = gcnew StreamWriter( filename );\n\n   // Create an instance of the class that will be serialized.\n   Food^ myFood = gcnew Food;\n\n   // Set the object properties.\n   myFood-&gt;Type = FoodType::High;\n\n   // Serialize the class, and close the TextWriter.\n   mySerializer-&gt;Serialize( writer, myFood );\n   writer-&gt;Close();\n}\n\nvoid DeserializeObject( String^ filename )\n{\n   XmlSerializer^ mySerializer = CreateOverrider();\n   FileStream^ fs = gcnew FileStream( filename,FileMode::Open );\n   Food^ myFood = dynamic_cast&lt;Food^&gt;(mySerializer-&gt;Deserialize( fs ));\n   Console::WriteLine( myFood-&gt;Type );\n}\n\nint main()\n{\n   SerializeObject( &quot;OverrideEnum.xml&quot; );\n   DeserializeObject( &quot;OverrideEnum.xml&quot; );\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Serialization_XmlAttributes_XmlIgnore\">\r\n    \r\n            <a id=\"System_Xml_Serialization_XmlAttributes_XmlIgnore_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlIgnore</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that specifies whether or not the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> serializes a public field or public read/write property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool XmlIgnore { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> must not serialize the field or property; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default, all public fields and public read/write properties are serialized by the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a>. That is, the value of each public field or property is persisted as an XML element or XML attribute in an XML-document instance.  </p>\n<p> To override the default serialization of a field or property, create an <a class=\"xref\" href=\"system.xml.serialization.xmlattributes\" data-linktype=\"relative-path\">XmlAttributes</a> object, and set its XmlIgnore property to <code>true</code>. <a class=\"xref\" href=\"system.xml.serialization.xmlattributeoverrides#System_Xml_Serialization_XmlAttributeOverrides_Add_\" data-linktype=\"relative-path\">Add</a> the object to an <a class=\"xref\" href=\"system.xml.serialization.xmlattributeoverrides\" data-linktype=\"relative-path\">XmlAttributeOverrides</a> object and specify the type of the object that contains the field or property to ignore, and the name of the field or property to ignore.  </p>\n<p> If an <a class=\"xref\" href=\"system.xml.serialization.xmlignoreattribute\" data-linktype=\"relative-path\">XmlIgnoreAttribute</a> is applied to a field or property, the field or property is ignored. However you can override that behavior by creating an <a class=\"xref\" href=\"system.xml.serialization.xmlattributes\" data-linktype=\"relative-path\">XmlAttributes</a> object, setting its XmlIgnore property to <code>false</code>, adding it to an <a class=\"xref\" href=\"system.xml.serialization.xmlattributeoverrides\" data-linktype=\"relative-path\">XmlAttributeOverrides</a> object specifying the type of the object that contains the field or property, and the name of the field or property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example serializes a class named <code>Group</code>, which contains a member named <code>Comment</code> to which the <a class=\"xref\" href=\"system.xml.serialization.xmlignoreattribute\" data-linktype=\"relative-path\">XmlIgnoreAttribute</a> is applied. The example creates an <a class=\"xref\" href=\"system.xml.serialization.xmlattributes\" data-linktype=\"relative-path\">XmlAttributes</a> object, and sets the XmlIgnore property to <code>false</code>, thereby overriding the <a class=\"xref\" href=\"system.xml.serialization.xmlignoreattribute\" data-linktype=\"relative-path\">XmlIgnoreAttribute</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic XmlAttributes.XmlIgnore Example#1\">using System;\nusing System.IO;\nusing System.Xml.Serialization;\n\n// This is the class that will be serialized. \npublic class Group\n{\n   // The GroupName value will be serialized--unless it&#39;s overridden.\n   public string GroupName;\n\n   /* This field will be ignored when serialized--\n      unless it&#39;s overridden. */\n   [XmlIgnoreAttribute]\n   public string Comment;\n}\n\npublic class Test\n{\n   public static void Main()\n   {\n      Test t = new Test();\n      t.SerializeObject(&quot;IgnoreXml.xml&quot;);\n   }\n\n   // Return an XmlSerializer used for overriding.\n   public XmlSerializer CreateOverrider()\n   {\n      // Create the XmlAttributeOverrides and XmlAttributes objects.\n      XmlAttributeOverrides xOver = new XmlAttributeOverrides();\n      XmlAttributes attrs = new XmlAttributes();\n\n      /* Setting XmlIgnore to false overrides the XmlIgnoreAttribute\n         applied to the Comment field. Thus it will be serialized.*/\n      attrs.XmlIgnore = false;\n      xOver.Add(typeof(Group), &quot;Comment&quot;, attrs);\n\n      /* Use the XmlIgnore to instruct the XmlSerializer to ignore\n         the GroupName instead. */\n      attrs = new XmlAttributes();\n      attrs.XmlIgnore = true;\n      xOver.Add(typeof(Group), &quot;GroupName&quot;, attrs);\n      \n      XmlSerializer xSer = new XmlSerializer(typeof(Group), xOver);\n      return xSer;\n   }\n\n   public void SerializeObject(string filename)\n   {\n      // Create an XmlSerializer instance.\n      XmlSerializer xSer = CreateOverrider();\n\n      // Create the object to serialize and set its properties.\n      Group myGroup = new Group();\n      myGroup.GroupName = &quot;.NET&quot;;\n      myGroup.Comment = &quot;My Comment...&quot;;\n   \n      // Writing the file requires a TextWriter.\n      TextWriter writer = new StreamWriter(filename);\n\n      // Serialize the object and close the TextWriter.\n      xSer.Serialize(writer, myGroup);\n      writer.Close();\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic XmlAttributes.XmlIgnore Example#1\">Imports System\nImports System.IO\nImports System.Xml.Serialization\n\n\n&#39; This is the class that will be serialized. \nPublic Class Group\n    &#39; The GroupName value will be serialized--unless it&#39;s overridden.\n    Public GroupName As String\n    \n    &#39; This field will be ignored when serialized--\n    &#39;  unless it&#39;s overridden.\n    &lt;XmlIgnoreAttribute()&gt; Public Comment As String\nEnd Class\n\n\nPublic Class Test\n    \n    Public Shared Sub Main()\n        Dim t As New Test()\n        t.SerializeObject(&quot;IgnoreXml.xml&quot;)\n    End Sub\n    \n    \n    &#39; Return an XmlSerializer used for overriding.\n    Public Function CreateOverrider() As XmlSerializer\n        &#39; Create the XmlAttributeOverrides and XmlAttributes objects.\n        Dim xOver As New XmlAttributeOverrides()\n        Dim attrs As New XmlAttributes()\n        \n        &#39; Setting XmlIgnore to false overrides the XmlIgnoreAttribute\n        &#39; applied to the Comment field. Thus it will be serialized.\n        attrs.XmlIgnore = False\n        xOver.Add(GetType(Group), &quot;Comment&quot;, attrs)\n        \n        &#39; Use the XmlIgnore to instruct the XmlSerializer to ignore\n        &#39; the GroupName instead. \n        attrs = New XmlAttributes()\n        attrs.XmlIgnore = True\n        xOver.Add(GetType(Group), &quot;GroupName&quot;, attrs)\n        \n        Dim xSer As New XmlSerializer(GetType(Group), xOver)\n        Return xSer\n    End Function\n    \n    \n    Public Sub SerializeObject(ByVal filename As String)\n        &#39; Create an XmlSerializer instance.\n        Dim xSer As XmlSerializer = CreateOverrider()\n        \n        &#39; Create the object to serialize and set its properties.\n        Dim myGroup As New Group()\n        myGroup.GroupName = &quot;.NET&quot;\n        myGroup.Comment = &quot;My Comment...&quot;\n        \n        &#39; Writing the file requires a TextWriter.\n        Dim writer As New StreamWriter(filename)\n        \n        &#39; Serialize the object and close the TextWriter.\n        xSer.Serialize(writer, myGroup)\n        writer.Close()\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic XmlAttributes.XmlIgnore Example#1\">#using &lt;System.Xml.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml::Serialization;\n\n// This is the class that will be serialized. \npublic ref class Group\n{\npublic:\n\n   // The GroupName value will be serialized--unless it&#39;s overridden.\n   String^ GroupName;\n\n   /* This field will be ignored when serialized--\n      unless it&#39;s overridden. */\n\n   [XmlIgnoreAttribute]\n   String^ Comment;\n};\n\n\n// Return an XmlSerializer used for overriding.\nXmlSerializer^ CreateOverrider()\n{\n   // Create the XmlAttributeOverrides and XmlAttributes objects.\n   XmlAttributeOverrides^ xOver = gcnew XmlAttributeOverrides;\n   XmlAttributes^ attrs = gcnew XmlAttributes;\n\n   /* Setting XmlIgnore to false overrides the XmlIgnoreAttribute\n      applied to the Comment field. Thus it will be serialized.*/\n   attrs-&gt;XmlIgnore = false;\n   xOver-&gt;Add( Group::typeid, &quot;Comment&quot;, attrs );\n\n   /* Use the XmlIgnore to instruct the XmlSerializer to ignore\n      the GroupName instead. */\n   attrs = gcnew XmlAttributes;\n   attrs-&gt;XmlIgnore = true;\n   xOver-&gt;Add( Group::typeid, &quot;GroupName&quot;, attrs );\n   XmlSerializer^ xSer = gcnew XmlSerializer( Group::typeid,xOver );\n   return xSer;\n}\n\nvoid SerializeObject( String^ filename )\n{\n   // Create an XmlSerializer instance.\n   XmlSerializer^ xSer = CreateOverrider();\n\n   // Create the object to serialize and set its properties.\n   Group^ myGroup = gcnew Group;\n   myGroup-&gt;GroupName = &quot;.NET&quot;;\n   myGroup-&gt;Comment = &quot;My Comment...&quot;;\n\n   // Writing the file requires a TextWriter.\n   TextWriter^ writer = gcnew StreamWriter( filename );\n\n   // Serialize the object and close the TextWriter.\n   xSer-&gt;Serialize( writer, myGroup );\n   writer-&gt;Close();\n}\n\nint main()\n{\n   SerializeObject( &quot;IgnoreXml.xml&quot; );\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Serialization_XmlAttributes_Xmlns\">\r\n    \r\n            <a id=\"System_Xml_Serialization_XmlAttributes_Xmlns_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Xmlns</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that specifies whether to keep all namespace declarations when an object containing a member that returns an <a class=\"xref\" href=\"system.xml.serialization.xmlserializernamespaces\" data-linktype=\"relative-path\">XmlSerializerNamespaces</a> object is overridden.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Xmlns { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the namespace declarations should be kept; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example contains a class named <code>Student</code>. The class contains a member named <code>MyNamespaces</code> that returns an <a class=\"xref\" href=\"system.xml.serialization.xmlserializernamespaces\" data-linktype=\"relative-path\">XmlSerializerNamespaces</a> object. The example creates an <a class=\"xref\" href=\"system.xml.serialization.xmlattributes\" data-linktype=\"relative-path\">XmlAttributes</a> object that is added to an instance of the <a class=\"xref\" href=\"system.xml.serialization.xmlattributeoverrides\" data-linktype=\"relative-path\">XmlAttributeOverrides</a> class. The Xmlns property is set to <code>true</code>, which instructs the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> to preserve the namespaces when the serialization of the <code>Student</code> object is overridden.  </p>\n<pre><code class=\"lang-cpp\" name=\"XmlAttributes.Xmlns property example#1\">#using &lt;System.dll&gt;\n#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nusing namespace System::Xml::Serialization;\npublic ref class Student\n{\npublic:\n\n   [XmlAttributeAttribute]\n   String^ Name;\n\n   [XmlNamespaceDeclarationsAttribute]\n   XmlSerializerNamespaces^ myNamespaces;\n};\n\nvoid SerializeStudent( String^ filename );\nvoid DeserializeStudent( String^ filename );\nint main()\n{\n   SerializeStudent( &quot;Student.xml&quot; );\n   DeserializeStudent( &quot;Student.xml&quot; );\n}\n\nvoid SerializeStudent( String^ filename )\n{\n   XmlAttributes^ atts = gcnew XmlAttributes;\n\n   // Set to true to preserve namespaces, \n   // or false to ignore them.\n   atts-&gt;Xmlns = true;\n   XmlAttributeOverrides^ xover = gcnew XmlAttributeOverrides;\n\n   // Add the XmlAttributes and specify the name of the element \n   // containing namespaces.\n   xover-&gt;Add( Student::typeid, &quot;myNamespaces&quot;, atts );\n\n   // Create the XmlSerializer using the \n   // XmlAttributeOverrides object.\n   XmlSerializer^ xser = gcnew XmlSerializer( Student::typeid,xover );\n   Student^ myStudent = gcnew Student;\n   XmlSerializerNamespaces^ ns = gcnew XmlSerializerNamespaces;\n   ns-&gt;Add( &quot;myns1&quot;, &quot;http://www.cpandl.com&quot; );\n   ns-&gt;Add( &quot;myns2&quot;, &quot;http://www.cohowinery.com&quot; );\n   myStudent-&gt;myNamespaces = ns;\n   myStudent-&gt;Name = &quot;Student1&quot;;\n   FileStream^ fs = gcnew FileStream( filename,FileMode::Create );\n   xser-&gt;Serialize( fs, myStudent );\n   fs-&gt;Close();\n}\n\nvoid DeserializeStudent( String^ filename )\n{\n   XmlAttributes^ atts = gcnew XmlAttributes;\n\n   // Set to true to preserve namespaces, or false to ignore them.\n   atts-&gt;Xmlns = true;\n   XmlAttributeOverrides^ xover = gcnew XmlAttributeOverrides;\n\n   // Add the XmlAttributes and specify the name of the \n   // element containing namespaces.\n   xover-&gt;Add( Student::typeid, &quot;myNamespaces&quot;, atts );\n\n   // Create the XmlSerializer using the \n   // XmlAttributeOverrides object.\n   XmlSerializer^ xser = gcnew XmlSerializer( Student::typeid,xover );\n   FileStream^ fs = gcnew FileStream( filename,FileMode::Open );\n   Student^ myStudent;\n   myStudent = safe_cast&lt;Student^&gt;(xser-&gt;Deserialize( fs ));\n   fs-&gt;Close();\n\n   // Use the ToArray method to get an array of \n   // XmlQualifiedName objects.\n   array&lt;XmlQualifiedName^&gt;^qNames = myStudent-&gt;myNamespaces-&gt;ToArray();\n   for ( int i = 0; i &lt; qNames-&gt;Length; i++ )\n   {\n      Console::WriteLine( &quot;{0}:{1}&quot;, qNames[ i ]-&gt;Name, qNames[ i ]-&gt;Namespace );\n\n   }\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlAttributes.Xmlns property example#1\">using System;\nusing System.IO;\nusing System.Xml;\nusing System.Xml.Serialization; \n\npublic class Student\n{\n    [XmlAttributeAttribute]\n    public string Name;\n\n    [XmlNamespaceDeclarationsAttribute]\n    public XmlSerializerNamespaces myNamespaces;\n\n}\n    \npublic class Run\n{\n    public static void Main()\n    {\n        Run test = new Run();\n        test.SerializeStudent(&quot;Student.xml&quot;);\n        test.DeserializeStudent(&quot;Student.xml&quot;);\n    }\n\n    public void SerializeStudent(string filename)\n    {\n        XmlAttributes atts = new XmlAttributes();\n        // Set to true to preserve namespaces, \n\t// or false to ignore them.\n        atts.Xmlns=true;\n\n        XmlAttributeOverrides xover = new XmlAttributeOverrides();\n        // Add the XmlAttributes and specify the name of the element \n\t// containing namespaces.\n        xover.Add(typeof(Student),&quot;myNamespaces&quot;, atts);\n        // Create the XmlSerializer using the \n\t\t// XmlAttributeOverrides object.\n        XmlSerializer xser = new XmlSerializer(typeof (Student),xover);\n\n        Student myStudent = new Student();\n        XmlSerializerNamespaces ns = new XmlSerializerNamespaces();\n        ns.Add(&quot;myns1&quot;, &quot;http://www.cpandl.com&quot;);\n        ns.Add(&quot;myns2&quot;, &quot;http://www.cohowinery.com&quot;);\n        myStudent.myNamespaces= ns;\n        myStudent.Name= &quot;Student1&quot;;\n\n        FileStream fs = new FileStream(filename,FileMode.Create);\n\n        xser.Serialize(fs,myStudent);\n        fs.Close();\n\n    }\n\n    private void DeserializeStudent(string filename)\n    {\n        XmlAttributes atts = new XmlAttributes();\n        // Set to true to preserve namespaces, or false to ignore them.\n        atts.Xmlns=true;\n\n        XmlAttributeOverrides xover = new XmlAttributeOverrides();\n        // Add the XmlAttributes and specify the name of the \n        // element containing namespaces.\n        xover.Add(typeof(Student),&quot;myNamespaces&quot;, atts);\n\n        // Create the XmlSerializer using the \n        // XmlAttributeOverrides object.\n        XmlSerializer xser = \n        new XmlSerializer(typeof (Student),xover);\n\n        FileStream fs = new FileStream(filename,FileMode.Open);\n\n        Student myStudent;\n        myStudent= (Student) xser.Deserialize(fs);\n        fs.Close();\n\n        // Use the ToArray method to get an array of \n        // XmlQualifiedName objects.\n        XmlQualifiedName[] qNames= myStudent.myNamespaces.ToArray();\n        for(int i = 0; i &lt; qNames.Length;i++)\n        {\n            Console.WriteLine(&quot;{0}:{1}&quot;, \n\t    qNames[i].Name,qNames[i].Namespace);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"XmlAttributes.Xmlns property example#1\">Imports System\nImports System.IO\nImports System.Xml\nImports System.Xml.Serialization\n \nPublic Class Student\n   &lt;XmlAttributeAttribute()&gt; _\n   Public Name As String\n\n   &lt;XmlNamespaceDeclarationsAttribute()&gt; _   \n   Public myNamespaces As XmlSerializerNamespaces\nEnd Class &#39;Student\n \n\nPublic Class Run\n   \n   Public Shared Sub Main()\n      Dim test As New Run()\n      test.SerializeStudent(&quot;Student_v.xml&quot;)\n      test.DeserializeStudent(&quot;Student_v.xml&quot;)\n   End Sub \n   \n   \n   Public Sub SerializeStudent(filename As String)\n      Dim atts As New XmlAttributes()\n      &#39; Set to true to preserve namespaces, or false to ignore them.\n      atts.Xmlns = True\n      \n      Dim xover As New XmlAttributeOverrides()\n      &#39; Add the XmlAttributes and specify the name of \n      &#39; the element containing namespaces.\n      xover.Add(GetType(Student), &quot;myNamespaces&quot;, atts)\n      &#39; Create the XmlSerializer using the \n      &#39; XmlAttributeOverrides object.\n      Dim xser As New XmlSerializer(GetType(Student), xover)\n      \n      Dim myStudent As New Student()\n      Dim ns As New XmlSerializerNamespaces()\n      ns.Add(&quot;myns1&quot;, &quot;http://www.cpandl.com&quot;)\n      ns.Add(&quot;myns2&quot;, &quot;http://www.cohowinery.com&quot;)\n      myStudent.myNamespaces = ns\n      myStudent.Name = &quot;Student1&quot;\n      \n      Dim fs As New FileStream(filename, FileMode.Create)\n      \n      xser.Serialize(fs, myStudent)\n      fs.Close()\n   End Sub \n       \n   Private Sub DeserializeStudent(filename As String)\n      Dim atts As New XmlAttributes()\n      &#39; Set to true to preserve namespaces, or false to ignore them.\n      atts.Xmlns = True\n      \n      Dim xover As New XmlAttributeOverrides()\n      &#39; Add the XmlAttributes and specify the name \n      &#39; of the element containing namespaces.\n      xover.Add(GetType(Student), &quot;myNamespaces&quot;, atts)\n      \n      &#39; Create the XmlSerializer using the \n      &#39; XmlAttributeOverrides object.\n      Dim xser As New XmlSerializer(GetType(Student), xover)\n      \n      Dim fs As New FileStream(filename, FileMode.Open)\n      \n      Dim myStudent As Student\n      myStudent = CType(xser.Deserialize(fs), Student)\n      fs.Close()\n      \n      &#39; Use the ToArray method to get an array \n      &#39; of XmlQualifiedName objects.\n      Dim qNames As XmlQualifiedName() = _\n           myStudent.myNamespaces.ToArray()\n      Dim i As Integer\n      For i = 0 To qNames.Length - 1\n         Console.WriteLine(&quot;{0}:{1}&quot;, _\n              qNames(i).Name, qNames(i).Namespace)\n      Next i\n   End Sub \nEnd Class \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Serialization_XmlAttributes_XmlRoot\">\r\n    \r\n            <a id=\"System_Xml_Serialization_XmlAttributes_XmlRoot_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlRoot</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets an object that specifies how the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> serializes a class as an XML root element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.Serialization.XmlRootAttribute XmlRoot { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.serialization.xmlrootattribute\" data-linktype=\"relative-path\">XmlRootAttribute</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.serialization.xmlrootattribute\" data-linktype=\"relative-path\">XmlRootAttribute</a> that overrides a class attributed as an XML root element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an <a class=\"xref\" href=\"system.xml.serialization.xmlattributeoverrides\" data-linktype=\"relative-path\">XmlAttributeOverrides</a> object, an <a class=\"xref\" href=\"system.xml.serialization.xmlattributes\" data-linktype=\"relative-path\">XmlAttributes</a> object, and an <a class=\"xref\" href=\"system.xml.serialization.xmlrootattribute\" data-linktype=\"relative-path\">XmlRootAttribute</a> object. The example assigns the <a class=\"xref\" href=\"system.xml.serialization.xmlrootattribute\" data-linktype=\"relative-path\">XmlRootAttribute</a> to the XmlRoot property of the <a class=\"xref\" href=\"system.xml.serialization.xmlattributes\" data-linktype=\"relative-path\">XmlAttributes</a> object, and adds the <a class=\"xref\" href=\"system.xml.serialization.xmlattributes\" data-linktype=\"relative-path\">XmlAttributes</a> object to the <a class=\"xref\" href=\"system.xml.serialization.xmlattributeoverrides\" data-linktype=\"relative-path\">XmlAttributeOverrides</a> object. Lastly, the example gets the <a class=\"xref\" href=\"system.xml.serialization.xmlattributes\" data-linktype=\"relative-path\">XmlAttributes</a> object by passing the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> of the serialized class to the <a class=\"xref\" href=\"system.xml.serialization.xmlattributeoverrides\" data-linktype=\"relative-path\">XmlAttributeOverrides</a> object. (In this example, the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> is <code>Group</code>.)  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic XmlAttributes.XmlRoot Example#1\">#using &lt;System.dll&gt;\n#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml::Serialization;\n\n// This is the class that will be serialized.\npublic ref class Group\n{\npublic:\n   String^ GroupName;\n\n   [XmlAttributeAttribute]\n   int GroupCode;\n};\n\n// Return an XmlSerializer for overriding attributes.\nXmlSerializer^ CreateOverrider()\n{\n   // Create the XmlAttributes and XmlAttributeOverrides objects.\n   XmlAttributes^ attrs = gcnew XmlAttributes;\n   XmlAttributeOverrides^ xOver = gcnew XmlAttributeOverrides;\n   XmlRootAttribute^ xRoot = gcnew XmlRootAttribute;\n\n   // Set a new Namespace and ElementName for the root element.\n   xRoot-&gt;Namespace = &quot;http://www.cpandl.com&quot;;\n   xRoot-&gt;ElementName = &quot;NewGroup&quot;;\n   attrs-&gt;XmlRoot = xRoot;\n\n   /* Add the XmlAttributes object to the XmlAttributeOverrides. \n      No  member name is needed because the whole class is \n      overridden. */\n   xOver-&gt;Add( Group::typeid, attrs );\n\n   // Get the XmlAttributes object, based on the type.\n   XmlAttributes^ tempAttrs;\n   tempAttrs = xOver[ Group::typeid ];\n\n   // Print the Namespace and ElementName of the root.\n   Console::WriteLine( tempAttrs-&gt;XmlRoot-&gt;Namespace );\n   Console::WriteLine( tempAttrs-&gt;XmlRoot-&gt;ElementName );\n   XmlSerializer^ xSer = gcnew XmlSerializer( Group::typeid,xOver );\n   return xSer;\n}\n\nvoid SerializeObject( String^ filename )\n{\n   // Create the XmlSerializer using the CreateOverrider method.\n   XmlSerializer^ xSer = CreateOverrider();\n\n   // Create the object to serialize.\n   Group^ myGroup = gcnew Group;\n   myGroup-&gt;GroupName = &quot;.NET&quot;;\n   myGroup-&gt;GroupCode = 123;\n\n   // To write the file, a TextWriter is required.\n   TextWriter^ writer = gcnew StreamWriter( filename );\n\n   // Serialize the object and close the TextWriter.\n   xSer-&gt;Serialize( writer, myGroup );\n   writer-&gt;Close();\n}\n\nint main()\n{\n   SerializeObject( &quot;OverrideRoot.xml&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic XmlAttributes.XmlRoot Example#1\">Imports System\nImports System.IO\nImports System.Xml.Serialization\n\n\n&#39; This is the class that will be serialized.\nPublic Class Group\n    Public GroupName As String\n    &lt;XmlAttribute()&gt; Public GroupCode As Integer\nEnd Class\n\n\nPublic Class Test\n    \n    Public Shared Sub Main()\n        Dim t As New Test()\n        t.SerializeObject(&quot;OverrideRoot.xml&quot;)\n    End Sub\n    \n    \n    &#39; Return an XmlSerializer for overriding attributes.\n    Public Function CreateOverrider() As XmlSerializer\n        &#39; Create the XmlAttributes and XmlAttributeOverrides objects.\n        Dim attrs As New XmlAttributes()\n        Dim xOver As New XmlAttributeOverrides()\n        \n        Dim xRoot As New XmlRootAttribute()\n        \n        &#39; Set a new Namespace and ElementName for the root element.\n        xRoot.Namespace = &quot;http://www.cpandl.com&quot;\n        xRoot.ElementName = &quot;NewGroup&quot;\n        attrs.XmlRoot = xRoot\n        \n        &#39; Add the XmlAttributes object to the XmlAttributeOverrides.\n        &#39; No  member name is needed because the whole class is\n        &#39; overridden. \n        xOver.Add(GetType(Group), attrs)\n        \n        &#39; Get the XmlAttributes object, based on the type.\n        Dim tempAttrs As XmlAttributes\n        tempAttrs = xOver(GetType(Group))\n        \n        &#39; Print the Namespace and ElementName of the root.\n        Console.WriteLine(tempAttrs.XmlRoot.Namespace)\n        Console.WriteLine(tempAttrs.XmlRoot.ElementName)\n        \n        Dim xSer As New XmlSerializer(GetType(Group), xOver)\n        Return xSer\n    End Function\n    \n    \n    Public Sub SerializeObject(ByVal filename As String)\n        &#39; Create the XmlSerializer using the CreateOverrider method.\n        Dim xSer As XmlSerializer = CreateOverrider()\n        \n        &#39; Create the object to serialize.\n        Dim myGroup As New Group()\n        myGroup.GroupName = &quot;.NET&quot;\n        myGroup.GroupCode = 123\n        \n        &#39; To write the file, a TextWriter is required.\n        Dim writer As New StreamWriter(filename)\n        \n        &#39; Serialize the object and close the TextWriter.\n        xSer.Serialize(writer, myGroup)\n        writer.Close()\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic XmlAttributes.XmlRoot Example#1\">using System;\nusing System.IO;\nusing System.Xml.Serialization;\n\n// This is the class that will be serialized.\npublic class Group\n{\n   public string GroupName;\n   [XmlAttribute]\n   public int GroupCode;\n}\n\npublic class Test\n{\n   public static void Main()\n   {\n      Test t = new Test();\n      t.SerializeObject(&quot;OverrideRoot.xml&quot;);\n   }\n\n   // Return an XmlSerializer for overriding attributes.\n   public XmlSerializer CreateOverrider()\n   {\n      // Create the XmlAttributes and XmlAttributeOverrides objects.\n      XmlAttributes attrs = new XmlAttributes();\n      XmlAttributeOverrides xOver = new XmlAttributeOverrides();\n   \n      XmlRootAttribute xRoot = new XmlRootAttribute();\n\n      // Set a new Namespace and ElementName for the root element.\n      xRoot.Namespace = &quot;http://www.cpandl.com&quot;;\n      xRoot.ElementName = &quot;NewGroup&quot;;\n      attrs.XmlRoot = xRoot;\n\n      /* Add the XmlAttributes object to the XmlAttributeOverrides. \n         No  member name is needed because the whole class is \n         overridden. */\n      xOver.Add(typeof(Group), attrs);\n\n      // Get the XmlAttributes object, based on the type.\n      XmlAttributes tempAttrs;\n      tempAttrs = xOver[typeof(Group)];\n\n      // Print the Namespace and ElementName of the root.\n      Console.WriteLine(tempAttrs.XmlRoot.Namespace);\n      Console.WriteLine(tempAttrs.XmlRoot.ElementName);\n\n      XmlSerializer xSer = new XmlSerializer(typeof(Group), xOver);\n      return xSer;\n   }\n\n   public void SerializeObject(string filename)\n   {\n      // Create the XmlSerializer using the CreateOverrider method.\n      XmlSerializer xSer = CreateOverrider();\n\n      // Create the object to serialize.\n      Group myGroup = new Group();\n      myGroup.GroupName = &quot;.NET&quot;;\n      myGroup.GroupCode = 123;\n\n      // To write the file, a TextWriter is required.\n      TextWriter writer = new StreamWriter(filename);\n\n      // Serialize the object and close the TextWriter.\n      xSer.Serialize(writer, myGroup);\n      writer.Close();\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Serialization_XmlAttributes_XmlText\">\r\n    \r\n            <a id=\"System_Xml_Serialization_XmlAttributes_XmlText_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlText</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets an object that instructs the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> to serialize a public field or public read/write property as XML text.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.Serialization.XmlTextAttribute XmlText { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.serialization.xmltextattribute\" data-linktype=\"relative-path\">XmlTextAttribute</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.serialization.xmltextattribute\" data-linktype=\"relative-path\">XmlTextAttribute</a> that overrides the default serialization of a public property or field.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default, a public field or public read/write property is serialized as an XML element by the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a>. However, it can force the field or property to be serialized as XML text by applying an <a class=\"xref\" href=\"system.xml.serialization.xmltextattribute\" data-linktype=\"relative-path\">XmlTextAttribute</a> to the field or property.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.xml.serialization.xmltextattribute\" data-linktype=\"relative-path\">XmlTextAttribute</a> cannot be applied to a field or property that returns an array.  </p>\n</div>\n<p> To override the default serialization of a field or property (that does not return an array), create an <a class=\"xref\" href=\"system.xml.serialization.xmltextattribute\" data-linktype=\"relative-path\">XmlTextAttribute</a> and assign it to the XmlText property of an <a class=\"xref\" href=\"system.xml.serialization.xmlattributes\" data-linktype=\"relative-path\">XmlAttributes</a> object. Add the <a class=\"xref\" href=\"system.xml.serialization.xmlattributes\" data-linktype=\"relative-path\">XmlAttributes</a> object to an <a class=\"xref\" href=\"system.xml.serialization.xmlattributeoverrides\" data-linktype=\"relative-path\">XmlAttributeOverrides</a> object and specify the type of the object that contains the overridden field or property, and the name of the overridden field or property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example serializes the class named <code>Group</code>, which contains a field named <code>Comment</code>. To override the default way the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> serializes the field, the example creates an <a class=\"xref\" href=\"system.xml.serialization.xmlattributeoverrides\" data-linktype=\"relative-path\">XmlAttributeOverrides</a> and an <a class=\"xref\" href=\"system.xml.serialization.xmlattributes\" data-linktype=\"relative-path\">XmlAttributes</a> object. The example then creates an <a class=\"xref\" href=\"system.xml.serialization.xmltextattribute\" data-linktype=\"relative-path\">XmlTextAttribute</a> object, which it assigns to the XmlText property, and adds the <a class=\"xref\" href=\"system.xml.serialization.xmlattributes\" data-linktype=\"relative-path\">XmlAttributes</a> object (with the name of the field to be serialized as XML text) to the <a class=\"xref\" href=\"system.xml.serialization.xmlattributeoverrides\" data-linktype=\"relative-path\">XmlAttributeOverrides</a> object. Lastly the example creates an <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> using the <a class=\"xref\" href=\"system.xml.serialization.xmlattributeoverrides\" data-linktype=\"relative-path\">XmlAttributeOverrides</a> object.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic XmlAttributes.XmlText Example#1\">using System;\nusing System.IO;\nusing System.Xml;\nusing System.Xml.Serialization;\n\n// This is the class that will be serialized.\npublic class Group\n{\n   public string GroupName;\n\n   // This field will be serialized as XML text. \n   public string Comment;\n}\n \npublic class Run\n{\n   public static void Main()\n   {\n      Run test = new Run();\n      test.SerializeObject(&quot;OverrideText.xml&quot;);\n      test.DeserializeObject(&quot;OverrideText.xml&quot;);\n   }\n\n   // Return an XmlSerializer to be used for overriding. \n   public XmlSerializer CreateOverrider()\n   {\n      // Create the XmlAttributeOverrides and XmlAttributes objects.\n      XmlAttributeOverrides xOver = new XmlAttributeOverrides();\n      XmlAttributes xAttrs = new XmlAttributes();\n\n      /* Create an XmlTextAttribute and assign it to the XmlText \n      property. This instructs the XmlSerializer to treat the \n      Comment field as XML text. */      \n      XmlTextAttribute xText = new XmlTextAttribute();\n      xAttrs.XmlText = xText;\n      xOver.Add(typeof(Group), &quot;Comment&quot;, xAttrs);\n\n      // Create the XmlSerializer, and return it.\n      return new XmlSerializer(typeof(Group), xOver);\n   }\n   \n \n   public void SerializeObject(string filename)\n   {\n      // Create an instance of the XmlSerializer class.\n      XmlSerializer mySerializer =  CreateOverrider();\n      // Writing the file requires a TextWriter.\n      TextWriter writer = new StreamWriter(filename);\n\n      // Create an instance of the class that will be serialized.\n      Group myGroup = new Group();\n\n      // Set the object properties.\n      myGroup.GroupName = &quot;.NET&quot;;\n      myGroup.Comment = &quot;Great Stuff!&quot;;      \n      // Serialize the class, and close the TextWriter.\n      mySerializer.Serialize(writer, myGroup);\n      writer.Close();\n   }\n\n   public void DeserializeObject(string filename)\n   {\n      XmlSerializer mySerializer = CreateOverrider();\n      FileStream fs = new FileStream(filename, FileMode.Open);\n      Group myGroup = (Group) \n      mySerializer.Deserialize(fs);\n      Console.WriteLine(myGroup.GroupName);\n      Console.WriteLine(myGroup.Comment);\n   }\n}\n   \n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic XmlAttributes.XmlText Example#1\">#using &lt;System.Xml.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nusing namespace System::Xml::Serialization;\n\n// This is the class that will be serialized.\npublic ref class Group\n{\npublic:\n   String^ GroupName;\n\n   // This field will be serialized as XML text. \n   String^ Comment;\n};\n\n// Return an XmlSerializer to be used for overriding. \nXmlSerializer^ CreateOverrider()\n{\n   // Create the XmlAttributeOverrides and XmlAttributes objects.\n   XmlAttributeOverrides^ xOver = gcnew XmlAttributeOverrides;\n   XmlAttributes^ xAttrs = gcnew XmlAttributes;\n\n   /* Create an XmlTextAttribute and assign it to the XmlText \n      property. This instructs the XmlSerializer to treat the \n      Comment field as XML text. */\n   XmlTextAttribute^ xText = gcnew XmlTextAttribute;\n   xAttrs-&gt;XmlText = xText;\n   xOver-&gt;Add( Group::typeid, &quot;Comment&quot;, xAttrs );\n\n   // Create the XmlSerializer, and return it.\n   return gcnew XmlSerializer( Group::typeid,xOver );\n}\n\nvoid SerializeObject( String^ filename )\n{\n   // Create an instance of the XmlSerializer class.\n   XmlSerializer^ mySerializer = CreateOverrider();\n\n   // Writing the file requires a TextWriter.\n   TextWriter^ writer = gcnew StreamWriter( filename );\n\n   // Create an instance of the class that will be serialized.\n   Group^ myGroup = gcnew Group;\n\n   // Set the object properties.\n   myGroup-&gt;GroupName = &quot;.NET&quot;;\n   myGroup-&gt;Comment = &quot;Great Stuff!&quot;;\n\n   // Serialize the class, and close the TextWriter.\n   mySerializer-&gt;Serialize( writer, myGroup );\n   writer-&gt;Close();\n}\n\nvoid DeserializeObject( String^ filename )\n{\n   XmlSerializer^ mySerializer = CreateOverrider();\n   FileStream^ fs = gcnew FileStream( filename,FileMode::Open );\n   Group^ myGroup = dynamic_cast&lt;Group^&gt;(mySerializer-&gt;Deserialize( fs ));\n   Console::WriteLine( myGroup-&gt;GroupName );\n   Console::WriteLine( myGroup-&gt;Comment );\n}\n\nint main()\n{\n   SerializeObject( &quot;OverrideText.xml&quot; );\n   DeserializeObject( &quot;OverrideText.xml&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic XmlAttributes.XmlText Example#1\">Imports System\nImports System.IO\nImports System.Xml\nImports System.Xml.Serialization\n\n\n&#39; This is the class that will be serialized.\nPublic Class Group\n    Public GroupName As String\n    \n    &#39; This field will be serialized as XML text. \n    Public Comment As String\nEnd Class\n\n\nPublic Class Run\n    \n    Public Shared Sub Main()\n        Dim test As New Run()\n        test.SerializeObject(&quot;OverrideText.xml&quot;)\n        test.DeserializeObject(&quot;OverrideText.xml&quot;)\n    End Sub\n\n        \n    &#39; Return an XmlSerializer to be used for overriding. \n    Public Function CreateOverrider() As XmlSerializer\n        &#39; Create the XmlAttributeOverrides and XmlAttributes objects.\n        Dim xOver As New XmlAttributeOverrides()\n        Dim xAttrs As New XmlAttributes()\n        \n        &#39; Create an XmlTextAttribute and assign it to the XmlText\n        &#39; property. This instructs the XmlSerializer to treat the\n        &#39; Comment field as XML text. \n        Dim xText As New XmlTextAttribute()\n        xAttrs.XmlText = xText\n        xOver.Add(GetType(Group), &quot;Comment&quot;, xAttrs)\n        \n        &#39; Create the XmlSerializer, and return it.\n        Return New XmlSerializer(GetType(Group), xOver)\n    End Function\n    \n    \n    \n    Public Sub SerializeObject(ByVal filename As String)\n        &#39; Create an instance of the XmlSerializer class.\n        Dim mySerializer As XmlSerializer = CreateOverrider()\n        &#39; Writing the file requires a TextWriter.\n        Dim writer As New StreamWriter(filename)\n        \n        &#39; Create an instance of the class that will be serialized.\n        Dim myGroup As New Group()\n        \n        &#39; Set the object properties.\n        myGroup.GroupName = &quot;.NET&quot;\n        myGroup.Comment = &quot;Great Stuff!&quot;\n        &#39; Serialize the class, and close the TextWriter.\n        mySerializer.Serialize(writer, myGroup)\n        writer.Close()\n    End Sub\n    \n    \n    Public Sub DeserializeObject(ByVal filename As String)\n        Dim mySerializer As XmlSerializer = CreateOverrider()\n        Dim fs As New FileStream(filename, FileMode.Open)\n        Dim myGroup As Group = CType(mySerializer.Deserialize(fs), Group)\n        Console.WriteLine(myGroup.GroupName)\n        Console.WriteLine(myGroup.Comment)\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Serialization_XmlAttributes_XmlType\">\r\n    \r\n            <a id=\"System_Xml_Serialization_XmlAttributes_XmlType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlType</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets an object that specifies how the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> serializes a class to which the <a class=\"xref\" href=\"system.xml.serialization.xmltypeattribute\" data-linktype=\"relative-path\">XmlTypeAttribute</a> has been applied.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.Serialization.XmlTypeAttribute XmlType { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.serialization.xmltypeattribute\" data-linktype=\"relative-path\">XmlTypeAttribute</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.serialization.xmltypeattribute\" data-linktype=\"relative-path\">XmlTypeAttribute</a> that overrides an <a class=\"xref\" href=\"system.xml.serialization.xmltypeattribute\" data-linktype=\"relative-path\">XmlTypeAttribute</a> applied to a class declaration.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.xml.serialization.xmltypeattribute\" data-linktype=\"relative-path\">XmlTypeAttribute</a> can be used to control how a type is serialized by the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a>. For example, by default, when a type is serialized, the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> uses the class name as the XML element name. By creating an <a class=\"xref\" href=\"system.xml.serialization.xmltypeattribute\" data-linktype=\"relative-path\">XmlTypeAttribute</a>, setting the XmlType property to it, and creating an <a class=\"xref\" href=\"system.xml.serialization.xmlattributeoverrides\" data-linktype=\"relative-path\">XmlAttributeOverrides</a> object, you can change the XML element name.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an <a class=\"xref\" href=\"system.xml.serialization.xmltypeattribute\" data-linktype=\"relative-path\">XmlTypeAttribute</a> object, and assigns it to the XmlType property of an <a class=\"xref\" href=\"system.xml.serialization.xmlattributes\" data-linktype=\"relative-path\">XmlAttributes</a> object.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic XmlAttributes.XmlType Example#1\">using System;\nusing System.IO;\nusing System.Xml.Serialization;\n\npublic class Transportation\n{\n   public Car[] Cars;\n}\n\npublic class Car\n{\n   public int ID;\n}\n\npublic class Test\n{\n   public static void Main()\n   {\n      Test t = new Test();\n      t.SerializeObject(&quot;XmlType.xml&quot;);\n   }\n\n   // Return an XmlSerializer used for overriding.\n   public XmlSerializer CreateOverrider()\n   {\n      // Create the XmlAttributes and XmlAttributeOverrides objects.\n      XmlAttributes attrs = new XmlAttributes();\n      XmlAttributeOverrides xOver = new XmlAttributeOverrides();\n      \n      /* Create an XmlTypeAttribute and change the name of the \n         XML type. */\n      XmlTypeAttribute xType = new XmlTypeAttribute();\n      xType.TypeName = &quot;Autos&quot;;\n\n      // Set the XmlTypeAttribute to the XmlType property.\n      attrs.XmlType = xType;\n\n      /* Add the XmlAttributes to the XmlAttributeOverrides,\n         specifying the member to override. */\n      xOver.Add(typeof(Car), attrs);\n\n      // Create the XmlSerializer, and return it.\n      XmlSerializer xSer = new XmlSerializer\n      (typeof(Transportation), xOver);\n      return xSer;\n   }\n\n   public void SerializeObject(string filename)\n   {\n      // Create an XmlSerializer instance.\n      XmlSerializer xSer = CreateOverrider();\n\n      // Create object and serialize it.\n      Transportation myTransportation = \n      new Transportation();\n\n      Car c1 = new Car();\n      c1.ID = 12;\n\n      Car c2 = new Car();\n      c2.ID = 44;\n\n      myTransportation.Cars = new Car[2]{c1,c2};\n\n      // To write the file, a TextWriter is required.\n      TextWriter writer = new StreamWriter(filename);\n      xSer.Serialize(writer, myTransportation);\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic XmlAttributes.XmlType Example#1\">#using &lt;System.Xml.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml::Serialization;\npublic ref class Car\n{\npublic:\n   int ID;\n};\n\npublic ref class Transportation\n{\npublic:\n   array&lt;Car^&gt;^Cars;\n};\n\n// Return an XmlSerializer used for overriding.\nXmlSerializer^ CreateOverrider()\n{\n   // Create the XmlAttributes and XmlAttributeOverrides objects.\n   XmlAttributes^ attrs = gcnew XmlAttributes;\n   XmlAttributeOverrides^ xOver = gcnew XmlAttributeOverrides;\n\n   /* Create an XmlTypeAttribute and change the name of the \n      XML type. */\n   XmlTypeAttribute^ xType = gcnew XmlTypeAttribute;\n   xType-&gt;TypeName = &quot;Autos&quot;;\n\n   // Set the XmlTypeAttribute to the XmlType property.\n   attrs-&gt;XmlType = xType;\n\n   /* Add the XmlAttributes to the XmlAttributeOverrides,\n      specifying the member to override. */\n   xOver-&gt;Add( Car::typeid, attrs );\n\n   // Create the XmlSerializer, and return it.\n   XmlSerializer^ xSer = gcnew XmlSerializer( Transportation::typeid,xOver );\n   return xSer;\n}\n\nvoid SerializeObject( String^ filename )\n{\n   // Create an XmlSerializer instance.\n   XmlSerializer^ xSer = CreateOverrider();\n\n   // Create object and serialize it.\n   Transportation^ myTransportation = gcnew Transportation;\n   Car^ c1 = gcnew Car;\n   c1-&gt;ID = 12;\n   Car^ c2 = gcnew Car;\n   c2-&gt;ID = 44;\n   array&lt;Car^&gt;^temp0 = {c1,c2};\n   myTransportation-&gt;Cars = temp0;\n\n   // To write the file, a TextWriter is required.\n   TextWriter^ writer = gcnew StreamWriter( filename );\n   xSer-&gt;Serialize( writer, myTransportation );\n}\n\nint main()\n{\n   SerializeObject( &quot;XmlType.xml&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic XmlAttributes.XmlType Example#1\">Imports System\nImports System.IO\nImports System.Xml.Serialization\n\n\nPublic Class Transportation\n    Public Cars() As Car\nEnd Class\n\nPublic Class Car\n    Public ID As Integer\nEnd Class\n\n\nPublic Class Test\n    \n    Public Shared Sub Main()\n        Dim t As New Test()\n        t.SerializeObject(&quot;XmlType.xml&quot;)\n    End Sub\n    \n    \n    &#39; Return an XmlSerializer used for overriding.\n    Public Function CreateOverrider() As XmlSerializer\n        &#39; Create the XmlAttributes and XmlAttributeOverrides objects.\n        Dim attrs As New XmlAttributes()\n        Dim xOver As New XmlAttributeOverrides()\n        \n        &#39; Create an XmlTypeAttribute and change the name of the\n        &#39; XML type. \n        Dim xType As New XmlTypeAttribute()\n        xType.TypeName = &quot;Autos&quot;\n        \n        &#39; Set the XmlTypeAttribute to the XmlType property.\n        attrs.XmlType = xType\n        \n        &#39; Add the XmlAttributes to the XmlAttributeOverrides,\n        &#39; specifying the member to override. \n        xOver.Add(GetType(Car), attrs)\n        \n        &#39; Create the XmlSerializer, and return it.\n        Dim xSer As New XmlSerializer(GetType(Transportation), xOver)\n        Return xSer\n    End Function\n    \n    \n    Public Sub SerializeObject(ByVal filename As String)\n        &#39; Create an XmlSerializer instance.\n        Dim xSer As XmlSerializer = CreateOverrider()\n        \n        &#39; Create an object and serialize it.\n        Dim myTransportation As New Transportation()\n        \n        Dim c1 As New Car()\n        c1.ID = 12\n        \n        Dim c2 As New Car()\n        c2.ID = 44\n        \n        myTransportation.Cars = New Car(1) {c1, c2}\n        \n        &#39; To write the file, a TextWriter is required.\n        Dim writer As New StreamWriter(filename)\n        xSer.Serialize(writer, myTransportation)\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Xml.Serialization.XmlAttributes.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Xml.Serialization.XmlAttributes.yml\">\r\n<meta name=\"APIName\" content=\"System.Xml.Serialization.XmlAttributes\">\r\n<meta name=\"APIName\" content=\"System.Xml.Serialization.XmlAttributes..ctor\">\r\n<meta name=\"APIName\" content=\"System.Xml.Serialization.XmlAttributes.XmlAnyAttribute\">\r\n<meta name=\"APIName\" content=\"System.Xml.Serialization.XmlAttributes.XmlAnyElements\">\r\n<meta name=\"APIName\" content=\"System.Xml.Serialization.XmlAttributes.XmlArray\">\r\n<meta name=\"APIName\" content=\"System.Xml.Serialization.XmlAttributes.XmlArrayItems\">\r\n<meta name=\"APIName\" content=\"System.Xml.Serialization.XmlAttributes.XmlAttribute\">\r\n<meta name=\"APIName\" content=\"System.Xml.Serialization.XmlAttributes.XmlChoiceIdentifier\">\r\n<meta name=\"APIName\" content=\"System.Xml.Serialization.XmlAttributes.XmlDefaultValue\">\r\n<meta name=\"APIName\" content=\"System.Xml.Serialization.XmlAttributes.XmlElements\">\r\n<meta name=\"APIName\" content=\"System.Xml.Serialization.XmlAttributes.XmlEnum\">\r\n<meta name=\"APIName\" content=\"System.Xml.Serialization.XmlAttributes.XmlIgnore\">\r\n<meta name=\"APIName\" content=\"System.Xml.Serialization.XmlAttributes.Xmlns\">\r\n<meta name=\"APIName\" content=\"System.Xml.Serialization.XmlAttributes.XmlRoot\">\r\n<meta name=\"APIName\" content=\"System.Xml.Serialization.XmlAttributes.XmlText\">\r\n<meta name=\"APIName\" content=\"System.Xml.Serialization.XmlAttributes.XmlType\">\r\n<meta name=\"APILocation\" content=\"System.Xml.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"7187a276-d30f-1b86-d154-e2c93e759155\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Xml.Serialization\\XmlAttributes.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a collection of attribute objects that control how the  serializes and deserializes an object.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Xml.Serialization/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Xml.Serialization.XmlAttributes\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Xml.Serialization.XmlAttributes.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Xml.Serialization.XmlAttributes.yml","open_to_public_contributors":true,"api_name":["System.Xml.Serialization.XmlAttributes","System.Xml.Serialization.XmlAttributes..ctor","System.Xml.Serialization.XmlAttributes.XmlAnyAttribute","System.Xml.Serialization.XmlAttributes.XmlAnyElements","System.Xml.Serialization.XmlAttributes.XmlArray","System.Xml.Serialization.XmlAttributes.XmlArrayItems","System.Xml.Serialization.XmlAttributes.XmlAttribute","System.Xml.Serialization.XmlAttributes.XmlChoiceIdentifier","System.Xml.Serialization.XmlAttributes.XmlDefaultValue","System.Xml.Serialization.XmlAttributes.XmlElements","System.Xml.Serialization.XmlAttributes.XmlEnum","System.Xml.Serialization.XmlAttributes.XmlIgnore","System.Xml.Serialization.XmlAttributes.Xmlns","System.Xml.Serialization.XmlAttributes.XmlRoot","System.Xml.Serialization.XmlAttributes.XmlText","System.Xml.Serialization.XmlAttributes.XmlType"],"api_location":["System.Xml.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Xml.Serialization.XmlAttributes","System::Xml::Serialization::XmlAttributes","System.Xml.Serialization.XmlAttributes.#ctor","System::Xml::Serialization::XmlAttributes::#ctor","System.Xml.Serialization.XmlAttributes.XmlAnyAttribute","System::Xml::Serialization::XmlAttributes::XmlAnyAttribute","System.Xml.Serialization.XmlAttributes.XmlAnyElements","System::Xml::Serialization::XmlAttributes::XmlAnyElements","System.Xml.Serialization.XmlAttributes.XmlArray","System::Xml::Serialization::XmlAttributes::XmlArray","System.Xml.Serialization.XmlAttributes.XmlArrayItems","System::Xml::Serialization::XmlAttributes::XmlArrayItems","System.Xml.Serialization.XmlAttributes.XmlAttribute","System::Xml::Serialization::XmlAttributes::XmlAttribute","System.Xml.Serialization.XmlAttributes.XmlChoiceIdentifier","System::Xml::Serialization::XmlAttributes::XmlChoiceIdentifier","System.Xml.Serialization.XmlAttributes.XmlDefaultValue","System::Xml::Serialization::XmlAttributes::XmlDefaultValue","System.Xml.Serialization.XmlAttributes.XmlElements","System::Xml::Serialization::XmlAttributes::XmlElements","System.Xml.Serialization.XmlAttributes.XmlEnum","System::Xml::Serialization::XmlAttributes::XmlEnum","System.Xml.Serialization.XmlAttributes.XmlIgnore","System::Xml::Serialization::XmlAttributes::XmlIgnore","System.Xml.Serialization.XmlAttributes.Xmlns","System::Xml::Serialization::XmlAttributes::Xmlns","System.Xml.Serialization.XmlAttributes.XmlRoot","System::Xml::Serialization::XmlAttributes::XmlRoot","System.Xml.Serialization.XmlAttributes.XmlText","System::Xml::Serialization::XmlAttributes::XmlText","System.Xml.Serialization.XmlAttributes.XmlType","System::Xml::Serialization::XmlAttributes::XmlType"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"7187a276-d30f-1b86-d154-e2c93e759155","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Xml.Serialization\\XmlAttributes.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Xml.Serialization/XmlAttributes.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"XmlAttributes class | Microsoft Docs","_op_ogTitle":"XmlAttributes class","description":"Represents a collection of attribute objects that control how the  serializes and deserializes an object.\n","toc_asset_id":"_splitted/System.Xml.Serialization/toc.json","toc_rel":"_splitted/System.Xml.Serialization/toc.json","source_url":"","ms.assetid":"System.Xml.Serialization.XmlAttributes","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.xml.serialization.xmlattributes","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.xml.serialization.xmlattributes","fileRelativePath":"System.Xml.Serialization.XmlAttributes.html"},"themesRelativePathToOutputRoot":"_themes/"}