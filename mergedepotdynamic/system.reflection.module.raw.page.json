{"content":"    \r\n    <h1 id=\"System_Reflection_Module\">\r\n      <span class=\"lang-csharp\">Module</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Performs reflection on a module.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]\n[System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._Module))]\n[System.Runtime.InteropServices.ComVisible(true)]\npublic abstract class Module : System.Reflection.ICustomAttributeProvider, System.Runtime.InteropServices._Module, System.Runtime.Serialization.ISerializable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Module</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>A module is a portable executable file, such as type.dll or application.exe, consisting of one or more classes and interfaces. There may be multiple namespaces contained in a single module, and a namespace may span multiple modules.  </p>\n<p> One or more modules deployed as a unit compose an assembly. For information about creating an assembly with more than one module, see <a href=\"../Topic/Multifile%20Assemblies.md\" data-linktype=\"relative-path\">Multifile Assemblies</a>.  </p>\n<p> Note that a .NET Framework module is not the same as a module in Visual Basic, which is used by a programmers to organize functions and subroutines in an application.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module__ctor\" data-linktype=\"self-bookmark\">Module()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Fields\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_FilterTypeName\" data-linktype=\"self-bookmark\">FilterTypeName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>A <code>TypeFilter</code> object that filters the list of types defined in this module based upon the name. This field is case-sensitive and read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_FilterTypeNameIgnoreCase\" data-linktype=\"self-bookmark\">FilterTypeNameIgnoreCase</a></div>\r\n          </td>\r\n            <td>\r\n            <p>A <code>TypeFilter</code> object that filters the list of types defined in this module based upon the name. This field is case-insensitive and read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_Assembly\" data-linktype=\"self-bookmark\">Assembly</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the appropriate <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> for this instance of <a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_CustomAttributes\" data-linktype=\"self-bookmark\">CustomAttributes</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a collection that contains this module&#39;s custom attributes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_FullyQualifiedName\" data-linktype=\"self-bookmark\">FullyQualifiedName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a string representing the fully qualified name and path to this module.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_MDStreamVersion\" data-linktype=\"self-bookmark\">MDStreamVersion</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the metadata stream version.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_MetadataToken\" data-linktype=\"self-bookmark\">MetadataToken</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a token that identifies the module in metadata.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_ModuleHandle\" data-linktype=\"self-bookmark\">ModuleHandle</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a handle for the module.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_ModuleVersionId\" data-linktype=\"self-bookmark\">ModuleVersionId</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a universally unique identifier (UUID) that can be used to distinguish between two versions of a module.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_Name\" data-linktype=\"self-bookmark\">Name</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <code>String</code> representing the name of the module with the path removed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_ScopeName\" data-linktype=\"self-bookmark\">ScopeName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a string representing the name of the module.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether this module and the specified object are equal.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_FindTypes_System_Reflection_TypeFilter_System_Object_\" data-linktype=\"self-bookmark\">FindTypes(TypeFilter,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an array of classes accepted by the given filter and filter criteria.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_GetCustomAttributes_System_Boolean_\" data-linktype=\"self-bookmark\">GetCustomAttributes(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns all custom attributes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_GetCustomAttributes_System_Type_System_Boolean_\" data-linktype=\"self-bookmark\">GetCustomAttributes(Type,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets custom attributes of the specified type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_GetCustomAttributesData\" data-linktype=\"self-bookmark\">GetCustomAttributesData()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a list of <a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a> objects for the current module, which can be used in the reflection-only context.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_GetField_System_String_\" data-linktype=\"self-bookmark\">GetField(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a field having the specified name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_GetField_System_String_System_Reflection_BindingFlags_\" data-linktype=\"self-bookmark\">GetField(String,BindingFlags)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a field having the specified name and binding attributes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_GetFields\" data-linktype=\"self-bookmark\">GetFields()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the global fields defined on the module.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_GetFields_System_Reflection_BindingFlags_\" data-linktype=\"self-bookmark\">GetFields(BindingFlags)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the global fields defined on the module that match the specified binding flags.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the hash code for this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_GetMethod_System_String_\" data-linktype=\"self-bookmark\">GetMethod(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a method having the specified name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_GetMethod_System_String_System_Type___\" data-linktype=\"self-bookmark\">GetMethod(String,Type[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a method having the specified name and parameter types.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_GetMethod_System_String_System_Reflection_BindingFlags_System_Reflection_Binder_System_Reflection_CallingConventions_System_Type___System_Reflection_ParameterModifier___\" data-linktype=\"self-bookmark\">GetMethod(String,BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a method having the specified name, binding information, calling convention, and parameter types and modifiers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_GetMethodImpl_System_String_System_Reflection_BindingFlags_System_Reflection_Binder_System_Reflection_CallingConventions_System_Type___System_Reflection_ParameterModifier___\" data-linktype=\"self-bookmark\">GetMethodImpl(String,BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the method implementation in accordance with the specified criteria.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_GetMethods\" data-linktype=\"self-bookmark\">GetMethods()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the global methods defined on the module.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_GetMethods_System_Reflection_BindingFlags_\" data-linktype=\"self-bookmark\">GetMethods(BindingFlags)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the global methods defined on the module that match the specified binding flags.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"self-bookmark\">GetObjectData(SerializationInfo,StreamingContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides an <a class=\"xref\" href=\"system.runtime.serialization.iserializable\" data-linktype=\"relative-path\">ISerializable</a> implementation for serialized objects.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_GetPEKind_System_Reflection_PortableExecutableKinds__System_Reflection_ImageFileMachine__\" data-linktype=\"self-bookmark\">GetPEKind(PortableExecutableKinds,ImageFileMachine)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a pair of values indicating the nature of the code in a module and the platform targeted by the module.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_GetSignerCertificate\" data-linktype=\"self-bookmark\">GetSignerCertificate()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an <code>X509Certificate</code> object corresponding to the certificate included in the Authenticode signature of the assembly which this module belongs to. If the assembly has not been Authenticode signed, <code>null</code> is returned.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_GetType_System_String_\" data-linktype=\"self-bookmark\">GetType(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the specified type, performing a case-sensitive search.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_GetType_System_String_System_Boolean_\" data-linktype=\"self-bookmark\">GetType(String,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the specified type, searching the module with the specified case sensitivity.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_GetType_System_String_System_Boolean_System_Boolean_\" data-linktype=\"self-bookmark\">GetType(String,Boolean,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the specified type, specifying whether to make a case-sensitive search of the module and whether to throw an exception if the type cannot be found.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_GetTypes\" data-linktype=\"self-bookmark\">GetTypes()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns all the types defined within this module.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_IsDefined_System_Type_System_Boolean_\" data-linktype=\"self-bookmark\">IsDefined(Type,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value that indicates whether the specified attribute type has been applied to this module.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_IsResource\" data-linktype=\"self-bookmark\">IsResource()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the object is a resource.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_ResolveField_System_Int32_\" data-linktype=\"self-bookmark\">ResolveField(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the field identified by the specified metadata token.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_ResolveField_System_Int32_System_Type___System_Type___\" data-linktype=\"self-bookmark\">ResolveField(Int32,Type[],Type[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the field identified by the specified metadata token, in the context defined by the specified generic type parameters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_ResolveMember_System_Int32_\" data-linktype=\"self-bookmark\">ResolveMember(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the type or member identified by the specified metadata token.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_ResolveMember_System_Int32_System_Type___System_Type___\" data-linktype=\"self-bookmark\">ResolveMember(Int32,Type[],Type[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the type or member identified by the specified metadata token, in the context defined by the specified generic type parameters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_ResolveMethod_System_Int32_\" data-linktype=\"self-bookmark\">ResolveMethod(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the method or constructor identified by the specified metadata token.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_ResolveMethod_System_Int32_System_Type___System_Type___\" data-linktype=\"self-bookmark\">ResolveMethod(Int32,Type[],Type[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the method or constructor identified by the specified metadata token, in the context defined by the specified generic type parameters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_ResolveSignature_System_Int32_\" data-linktype=\"self-bookmark\">ResolveSignature(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the signature blob identified by a metadata token.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_ResolveString_System_Int32_\" data-linktype=\"self-bookmark\">ResolveString(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the string identified by the specified metadata token.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_ResolveType_System_Int32_\" data-linktype=\"self-bookmark\">ResolveType(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the type identified by the specified metadata token.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_ResolveType_System_Int32_System_Type___System_Type___\" data-linktype=\"self-bookmark\">ResolveType(Int32,Type[],Type[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the type identified by the specified metadata token, in the context defined by the specified generic type parameters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the name of the module.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Operators\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_op_Equality_System_Reflection_Module_System_Reflection_Module_\" data-linktype=\"self-bookmark\">op_Equality(Module,Module)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether two <a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a> objects are equal.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_op_Inequality_System_Reflection_Module_System_Reflection_Module_\" data-linktype=\"self-bookmark\">op_Inequality(Module,Module)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether two <a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a> objects are not equal.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_System_Runtime_InteropServices__Module_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"self-bookmark\">_Module.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Maps a set of names to a corresponding set of dispatch identifiers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_System_Runtime_InteropServices__Module_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"self-bookmark\">_Module.GetTypeInfo(UInt32,UInt32,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the type information for an object, which can then be used to get the type information for an interface.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_System_Runtime_InteropServices__Module_GetTypeInfoCount_System_UInt32__\" data-linktype=\"self-bookmark\">_Module.GetTypeInfoCount(UInt32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Module_System_Runtime_InteropServices__Module_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\" data-linktype=\"self-bookmark\">_Module.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides access to properties and methods exposed by an object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module__ctor\">\r\n    \r\n            <a id=\"System_Reflection_Module__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Module()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected Module ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor is invoked by derived classes during the construction of <a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a> objects.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"fields\">\r\n        <h2>Fields\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_FilterTypeName\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FilterTypeName</div>        \r\n          </div>\r\n    \r\n            <p>A <code>TypeFilter</code> object that filters the list of types defined in this module based upon the name. This field is case-sensitive and read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.TypeFilter FilterTypeName;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The filter supports a trailing &quot;*&quot; wildcard.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the module names that match the specified search criteria.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Reflection.Module.FilterTypeName Example#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Collections;\npublic ref class MySecondClass{};\n\n\n// This class does not fit the filter criterion My*.\npublic ref class YourClass{};\n\nint main()\n{\n   array&lt;Module^&gt;^moduleArray;\n   moduleArray = Assembly::GetExecutingAssembly()-&gt;GetModules( false );\n   \n   // In a simple project with only one module, the module at index\n   // 0 will be the module containing these classes.\n   Module^ myModule = moduleArray[ 0 ];\n   array&lt;Type^&gt;^tArray;\n   tArray = myModule-&gt;FindTypes( Module::FilterTypeName, &quot;My*&quot; );\n   IEnumerator^ myEnum = tArray-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Type^ t = safe_cast&lt;Type^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( &quot;Found a module beginning with My*: {0}.&quot;, t-&gt;Name );\n   }\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Reflection.Module.FilterTypeName Example#1\">using System;\nusing System.Reflection;\n\nnamespace ReflectionModule_Examples\n{\n    class MyMainClass\n    {\n        static void Main()\n        {\n            Module[] moduleArray;\n            \n            moduleArray = typeof(MyMainClass).Assembly.GetModules(false);\n            \n            // In a simple project with only one module, the module at index\n            // 0 will be the module containing these classes.\n            Module myModule = moduleArray[0];\n\n            Type[] tArray;\n\n            tArray = myModule.FindTypes(Module.FilterTypeName, &quot;My*&quot;);\n            \n            foreach(Type t in tArray)\n            {\n                Console.WriteLine(&quot;Found a module beginning with My*: {0}.&quot;, t.Name);\n            }\n        }\n    }\n\n    class MySecondClass\n    {\n    }\n\n    // This class does not fit the filter criteria My*.\n    class YourClass\n    {\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Reflection.Module.FilterTypeName Example#1\">Imports System.Reflection\n\nNamespace ReflectionModule_Examples\n    Class MyMainClass\n        Shared Sub Main()\n            Dim moduleArray() As [Module]\n\n            moduleArray = GetType(MyMainClass).Assembly.GetModules(False)\n\n            &#39; In a simple project with only one module, the module at index\n            &#39; 0 will be the module containing these classes.\n            Dim myModule As [Module] = moduleArray(0)\n\n            Dim tArray() As Type\n\n            tArray = myModule.FindTypes([Module].FilterTypeName, &quot;My*&quot;)\n\n            Dim t As Type\n            For Each t In tArray\n                Console.WriteLine(&quot;Found a module beginning with My*: {0}&quot;, t.Name)\n            Next t\n        End Sub &#39;Main\n    End Class &#39;MyMainClass\n\n    Class MySecondClass\n    End Class &#39;MySecondClass\n\n    &#39; This class does not fit the filter criteria My*.\n    Class YourClass\n    End Class &#39;YourClass\nEnd Namespace &#39;ReflectionModule_Examples\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_FilterTypeNameIgnoreCase\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FilterTypeNameIgnoreCase</div>        \r\n          </div>\r\n    \r\n            <p>A <code>TypeFilter</code> object that filters the list of types defined in this module based upon the name. This field is case-insensitive and read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.TypeFilter FilterTypeNameIgnoreCase;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The filter supports a trailing &quot;*&quot; wildcard.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the module names that match the specified search criteria, ignoring the case.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Reflection.Module.FilterTypeNameIgnoreCase Example#1\">using System;\nusing System.Reflection;\n\nnamespace ReflectionModule_Examples\n{\n    class MyMainClass\n    {\n        static void Main()\n        {\n            Module[] moduleArray;\n            \n            moduleArray = typeof(MyMainClass).Assembly.GetModules(false);\n            \n            // In a simple project with only one module, the module at index\n            // 0 will be the module containing these classes.\n            Module myModule = moduleArray[0];\n\n            Type[] tArray;\n\n            tArray = myModule.FindTypes(Module.FilterTypeNameIgnoreCase, &quot;my*&quot;);\n            \n            foreach(Type t in tArray)\n            {\n                Console.WriteLine(&quot;Found a module beginning with my*: {0}&quot;, t.Name);\n            }\n        }\n    }\n\n    class MySecondClass\n    {\n    }\n\n    // This class does not fit the filter criteria my*.\n    class YourClass\n    {\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Reflection.Module.FilterTypeNameIgnoreCase Example#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Collections;\npublic ref class MyMainClass{};\n\npublic ref class MySecondClass{};\n\n\n// This class does not fit the filter criteria my*.\npublic ref class YourClass{};\n\nint main()\n{\n   array&lt;Module^&gt;^moduleArray;\n   moduleArray = Assembly::GetExecutingAssembly()-&gt;GetModules( false );\n   \n   // In a simple project with only one module, the module at index\n   // 0 will be the module containing these classes.\n   Module^ myModule = moduleArray[ 0 ];\n   array&lt;Type^&gt;^tArray;\n   tArray = myModule-&gt;FindTypes( Module::FilterTypeNameIgnoreCase, &quot;my*&quot; );\n   IEnumerator^ myEnum = tArray-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Type^ t = safe_cast&lt;Type^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( &quot;Found a module beginning with my*: {0}&quot;, t-&gt;Name );\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Reflection.Module.FilterTypeNameIgnoreCase Example#1\">Imports System.Reflection\n\nNamespace ReflectionModule_Examples\n    Class MyMainClass\n        Shared Sub Main()\n            Dim moduleArray() As [Module]\n\n            moduleArray = GetType(MyMainClass).Assembly.GetModules(False)\n\n            &#39;In a simple project with only one module, the module at index\n            &#39; 0 will be the module containing these classes.\n            Dim myModule As [Module] = moduleArray(0)\n\n            Dim tArray() As Type\n\n            tArray = myModule.FindTypes([Module].FilterTypeNameIgnoreCase, &quot;my*&quot;)\n\n            Dim t As Type\n            For Each t In tArray\n                Console.WriteLine(&quot;Found a module beginning with my*: {0}&quot;, t.Name)\n            Next t\n        End Sub &#39;Main\n    End Class &#39;MyMainClass\n\n    Class MySecondClass\n    End Class &#39;MySecondClass\n\n    &#39;This class does not fit the filter criteria my*\n    Class YourClass\n    End Class &#39;YourClass\nEnd Namespace &#39;ReflectionModule_Examples\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_Assembly\">\r\n    \r\n            <a id=\"System_Reflection_Module_Assembly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Assembly</div>        \r\n          </div>\r\n    \r\n            <p>Gets the appropriate <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> for this instance of <a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Reflection.Assembly Assembly { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </div>\r\n                  <p>An <code>Assembly</code> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the full name of the specified assembly in the specified module.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Reflection.Module.Assembly Example#1\">using System;\nusing System.Reflection;\n\nnamespace ReflectionModule_Examples\n{\n    class MyMainClass\n    {\n        static void Main()\n        {\n            Module[] moduleArray;\n            \n            moduleArray = typeof(MyMainClass).Assembly.GetModules(false);\n            \n            // In a simple project with only one module, the module at index\n            // 0 will be the module containing this class.\n            Module myModule = moduleArray[0];\n\n            Assembly myAssembly = myModule.Assembly;\n            Console.WriteLine(&quot;myModule.Assembly = {0}.&quot;, myAssembly.FullName);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Reflection.Module.Assembly Example#1\">using namespace System;\nusing namespace System::Reflection;\nint main()\n{\n   array&lt;Module^&gt;^moduleArray;\n   moduleArray = Assembly::GetExecutingAssembly()-&gt;GetModules( false );\n   \n   // In a simple project with only one module, the module at index\n   // 0 will be the module containing this class.\n   Module^ myModule = moduleArray[ 0 ];\n   Assembly^ myAssembly = myModule-&gt;Assembly;\n   Console::WriteLine( &quot;myModule.Assembly = {0}.&quot;, myAssembly-&gt;FullName );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Reflection.Module.Assembly Example#1\">Imports System.Reflection\n\nNamespace ReflectionModule_Examples\n    Class MyMainClass\n        Shared Sub Main()\n            Dim moduleArray() As [Module]\n\n            moduleArray = GetType(MyMainClass).Assembly.GetModules(False)\n\n            &#39; In a simple project with only one module, the module at index\n            &#39; 0 will be the module containing this class.\n            Dim myModule As [Module] = moduleArray(0)\n\n            Dim myAssembly As [Assembly] = myModule.Assembly\n            Console.WriteLine(&quot;myModule.Assembly = {0}.&quot;, myAssembly.FullName)\n        End Sub &#39;Main\n    End Class &#39;MyMainClass\nEnd Namespace &#39;ReflectionModule_Examples\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_CustomAttributes\">\r\n    \r\n            <a id=\"System_Reflection_Module_CustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CustomAttributes</div>        \r\n          </div>\r\n    \r\n            <p>Gets a collection that contains this module&#39;s custom attributes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Collections.Generic.IEnumerable&lt;System.Reflection.CustomAttributeData&gt; CustomAttributes { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a>&gt;</div>\r\n                  </div>\r\n                  <p>A collection that contains this module&#39;s custom attributes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_FullyQualifiedName\">\r\n    \r\n            <a id=\"System_Reflection_Module_FullyQualifiedName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FullyQualifiedName</div>        \r\n          </div>\r\n    \r\n            <p>Gets a string representing the fully qualified name and path to this module.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string FullyQualifiedName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The fully qualified module name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permissions.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To get the name without the path, use <a class=\"xref\" href=\"system.reflection.module#System_Reflection_Module_Name_\" data-linktype=\"relative-path\">Name</a>.  </p>\n<p> If the assembly for this module was loaded from a byte array then the <code>FullyQualifiedName</code> for the module will be: &lt;Unknown&gt;.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The case of module name is platform-dependent.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the fully qualified name of the specified module.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Reflection.Module.FullyQualifiedName#1\">using namespace System;\nusing namespace System::Reflection;\nint main()\n{\n   array&lt;Module^&gt;^moduleArray;\n   moduleArray = Assembly::GetExecutingAssembly()-&gt;GetModules( false );\n   \n   // In a simple project with only one module, the module at index\n   // 0 will be the module containing this class.\n   Module^ myModule = moduleArray[ 0 ];\n   Console::WriteLine( &quot;myModule.FullyQualifiedName = {0}&quot;, myModule-&gt;FullyQualifiedName );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Reflection.Module.FullyQualifiedName#1\">using System;\nusing System.Reflection;\n\nnamespace ReflectionModule_Examples\n{\n    class MyMainClass\n    {\n        static void Main()\n        {\n            Module[] moduleArray;\n            \n            moduleArray = typeof(MyMainClass).Assembly.GetModules(false);\n            \n            // In a simple project with only one module, the module at index\n            // 0 will be the module containing this class.\n            Module myModule = moduleArray[0];\n\n            Console.WriteLine(&quot;myModule.FullyQualifiedName = {0}&quot;, myModule.FullyQualifiedName);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Reflection.Module.FullyQualifiedName#1\">Imports System.Reflection\n\nNamespace ReflectionModule_Examples\n    Class MyMainClass\n        Shared Sub Main()\n            Dim moduleArray() As [Module]\n\n            moduleArray = GetType(MyMainClass).Assembly.GetModules(False)\n\n            &#39; In a simple project with only one module, the module at index\n            &#39; 0 will be the module containing this class.\n            Dim myModule As [Module] = moduleArray(0)\n\n            Console.WriteLine(&quot;myModule.FullyQualifiedName = {0}&quot;, myModule.FullyQualifiedName)\n        End Sub &#39;Main\n    End Class &#39;MyMainClass\nEnd Namespace &#39;ReflectionModule_Examples\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_MDStreamVersion\">\r\n    \r\n            <a id=\"System_Reflection_Module_MDStreamVersion_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MDStreamVersion</div>        \r\n          </div>\r\n    \r\n            <p>Gets the metadata stream version.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int MDStreamVersion { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit integer representing the metadata stream version. The high-order two bytes represent the major version number, and the low-order two bytes represent the minor version number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> For more information on the metadata header, see &quot;Partition II: Metadata Definition and Semantics&quot; in the Common Language Infrastructure (CLI) documentation. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the ECMA Web site.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_MetadataToken\">\r\n    \r\n            <a id=\"System_Reflection_Module_MetadataToken_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MetadataToken</div>        \r\n          </div>\r\n    \r\n            <p>Gets a token that identifies the module in metadata.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int MetadataToken { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An integer token that identifies the current module in metadata.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The tokens obtained using this property can be passed to the unmanaged Reflection API. For more information, see <a href=\"http://msdn.microsoft.com/en-us/0c5bb9de-0cf6-438d-ba47-134e6c775fb8\" data-linktype=\"external\">Unmanaged Reflection API</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially &quot;Partition II: Metadata Definition and Semantics&quot;. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the ECMA Web site.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_ModuleHandle\">\r\n    \r\n            <a id=\"System_Reflection_Module_ModuleHandle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ModuleHandle</div>        \r\n          </div>\r\n    \r\n            <p>Gets a handle for the module.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public ModuleHandle ModuleHandle { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.modulehandle\" data-linktype=\"relative-path\">ModuleHandle</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.modulehandle\" data-linktype=\"relative-path\">ModuleHandle</a> structure for the current module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_ModuleVersionId\">\r\n    \r\n            <a id=\"System_Reflection_Module_ModuleVersionId_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ModuleVersionId</div>        \r\n          </div>\r\n    \r\n            <p>Gets a universally unique identifier (UUID) that can be used to distinguish between two versions of a module.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual Guid ModuleVersionId { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a> that can be used to distinguish between two versions of a module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In unmanaged metadata, the GUID returned by the ModuleVersionId property is referred to as the <code>mvid</code>, and is stored in the GUID heap.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> More information about metadata can be found in the Common Language Infrastructure (CLI) documentation, especially &quot;Partition II: Metadata Definition and Semantics&quot;. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the ECMA Web site.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_Name\">\r\n    \r\n            <a id=\"System_Reflection_Module_Name_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Name</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <code>String</code> representing the name of the module with the path removed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string Name { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The module name with no path.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>Name</code> is a platform-dependent string.  </p>\n<p> If the assembly for this module was loaded from a byte array then the <code>FullyQualifiedName</code> for the module will be: &lt;Unknown&gt;.  </p>\n<p> To get the name and the path, use <a class=\"xref\" href=\"system.reflection.module#System_Reflection_Module_FullyQualifiedName_\" data-linktype=\"relative-path\">FullyQualifiedName</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example shows the effect of the <code>ScopeName</code>, <code>FullyQualifiedName</code>, and <code>Name</code> properties.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic Module.Name Example#1\">Imports System.Reflection\n\nPublic Class Simple\n    Public Shared Sub Main()\n        Dim myMod As System.Reflection.Module = \n           GetType(Simple).Assembly.GetModules()(0)\n        Console.WriteLine(&quot;Module Name is &quot; + myMod.Name)\n        Console.WriteLine(&quot;Module FullyQualifiedName is &quot; _\n           + myMod.FullyQualifiedName)\n        Console.WriteLine(&quot;Module ScopeName is &quot; + myMod.ScopeName)\n    End Sub\n    \nEnd Class\n&#39; This code produces output like the following:\n&#39;       Module Name is modname.exe\n&#39;       Module FullyQualifiedName is C:\\Bin\\modname.exe\n&#39;       Module ScopeName is modname.exe \n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic Module.Name Example#1\">using namespace System;\nusing namespace System::Reflection;\nint main()\n{\n   Module^ mod = Assembly::GetExecutingAssembly()-&gt;GetModules()[ 0 ];\n   Console::WriteLine( &quot;Module Name is {0}&quot;, mod-&gt;Name );\n   Console::WriteLine( &quot;Module FullyQualifiedName is {0}&quot;, mod-&gt;FullyQualifiedName );\n   Console::WriteLine( &quot;Module ScopeName is {0}&quot;, mod-&gt;ScopeName );\n}\n\n/*\nThis code produces the following output:\n\nModule Name is modname.exe\nModule FullyQualifiedName is C:\\Bin\\modname.exe\nModule ScopeName is modname.exe\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Module.Name Example#1\">using System.Reflection;\nusing System;\n \n public class Simple\n {\n    public static void Main ()\n    {\n         Module mod = typeof(Simple).Assembly.GetModules () [0];\n         Console.WriteLine (&quot;Module Name is &quot; + mod.Name);\n         Console.WriteLine (&quot;Module FullyQualifiedName is &quot; + mod.FullyQualifiedName);\n         Console.WriteLine (&quot;Module ScopeName is &quot; + mod.ScopeName);\n    }\n }\n /*\n This code produces output like the following:\n\n Module Name is modname.exe\n Module FullyQualifiedName is C:\\Bin\\modname.exe\n Module ScopeName is modname.exe\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_ScopeName\">\r\n    \r\n            <a id=\"System_Reflection_Module_ScopeName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ScopeName</div>        \r\n          </div>\r\n    \r\n            <p>Gets a string representing the name of the module.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string ScopeName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The module name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>ScopeName</code> property is not used by the common language runtime, but you can use it to store any string you want in the property when you emit a module using the metadata APIs. Reflection itself does not allow you to set the <code>ScopeName</code> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example shows the effect of the <code>ScopeName</code>, <code>FullyQualifiedName</code>, and <code>Name</code> properties.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Module.ScopeName Example#1\">using namespace System;\nusing namespace System::Reflection;\nint main()\n{\n   Module^ mod = Assembly::GetExecutingAssembly()-&gt;GetModules()[ 0 ];\n   Console::WriteLine( &quot;Module Name is {0}&quot;, mod-&gt;Name );\n   Console::WriteLine( &quot;Module FullyQualifiedName is {0}&quot;, mod-&gt;FullyQualifiedName );\n   Console::WriteLine( &quot;Module ScopeName is {0}&quot;, mod-&gt;ScopeName );\n}\n\n/*\nProduces this output:\nModule Name is modname.exe\nModule FullyQualifiedName is C:\\Bin\\modname.exe\nModule ScopeName is modname.exe\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Module.ScopeName Example#1\"> using System.Reflection;\n using System;\n \n public class Simple\n {\n    public static void Main ()\n    {\n         Module mod = typeof(Simple).Assembly.GetModules()[0];\n         Console.WriteLine (&quot;Module Name is &quot;\n            + mod.Name);\n         Console.WriteLine (&quot;Module FullyQualifiedName is &quot;\n            + mod.FullyQualifiedName);\n         Console.WriteLine (&quot;Module ScopeName is &quot;\n            + mod.ScopeName);\n    }\n }\n /*\n The example displays output like the folloowing:\n Module Name is modname.exe\n Module FullyQualifiedName is C:\\Bin\\modname.exe\n Module ScopeName is modname.exe\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Module.ScopeName Example#1\">Imports System.Reflection\n\nPublic Class Simple\n    Public Shared Sub Main()\n        Dim myMod As [Module] = GetType(Simple).Assembly.GetModules()(0)\n        Console.WriteLine(&quot;Module Name is &quot; + myMod.Name)\n        Console.WriteLine(&quot;Module FullyQualifiedName is &quot; +\n                          myMod.FullyQualifiedName)\n        Console.WriteLine(&quot;Module ScopeName is &quot; +\n                          myMod.ScopeName)\n    End Sub\nEnd Class\n&#39; The example displays output like the following:\n&#39; Module Name is modname.exe\n&#39; Module FullyQualifiedName is C:\\Bin\\modname.exe\n&#39; Module ScopeName is modname.exe \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_Reflection_Module_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether this module and the specified object are equal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object o);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>o</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to compare with this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>o</code> is equal to this instance; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_FindTypes_System_Reflection_TypeFilter_System_Object_\">\r\n    \r\n            <a id=\"System_Reflection_Module_FindTypes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FindTypes(TypeFilter,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an array of classes accepted by the given filter and filter criteria.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual Type[] FindTypes (System.Reflection.TypeFilter filter, object filterCriteria);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>filter</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.typefilter\" data-linktype=\"relative-path\">TypeFilter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate used to filter the classes.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>filterCriteria</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An Object used to filter the classes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </div>\r\n                  <p>An array of type <code>Type</code> containing classes that were accepted by the filter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.reflectiontypeloadexception\" data-linktype=\"relative-path\">ReflectionTypeLoadException</a></div>\r\n                  </div>\r\n                  <p>One or more classes in a module could not be loaded.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.reflection.reflectiontypeloadexception\" data-linktype=\"relative-path\">ReflectionTypeLoadException</a> is a special class load exception. The <code>ReflectionTypeLoadException.Types</code> property contains the array of classes that were defined in the module and were loaded. This array may contain some null values. The <code>ReflectionTypeLoadException.LoaderExceptions</code> property is an array of exceptions that represent the exceptions that were thrown by the class loader. The holes in the class array line up with the exceptions.  </p>\n<p> The delegate given by <code>filter</code> is called for each class in the module, passing along the <code>Type</code> object representing the class as well as the given <code>filterCriteria</code>. If <code>filter</code> returns a particular class, that class will be included in the returned array. If <code>filter</code> returns <code>null</code>, all classes are returned and <code>filterCriteria</code> is ignored.  </p>\n<p> <code>FindTypes</code> cannot be used to look up parameterized types such as arrays.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <code>FindTypes</code> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Reflection.Module.FilterTypeName Example#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Collections;\npublic ref class MySecondClass{};\n\n\n// This class does not fit the filter criterion My*.\npublic ref class YourClass{};\n\nint main()\n{\n   array&lt;Module^&gt;^moduleArray;\n   moduleArray = Assembly::GetExecutingAssembly()-&gt;GetModules( false );\n   \n   // In a simple project with only one module, the module at index\n   // 0 will be the module containing these classes.\n   Module^ myModule = moduleArray[ 0 ];\n   array&lt;Type^&gt;^tArray;\n   tArray = myModule-&gt;FindTypes( Module::FilterTypeName, &quot;My*&quot; );\n   IEnumerator^ myEnum = tArray-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Type^ t = safe_cast&lt;Type^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( &quot;Found a module beginning with My*: {0}.&quot;, t-&gt;Name );\n   }\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Reflection.Module.FilterTypeName Example#1\">using System;\nusing System.Reflection;\n\nnamespace ReflectionModule_Examples\n{\n    class MyMainClass\n    {\n        static void Main()\n        {\n            Module[] moduleArray;\n            \n            moduleArray = typeof(MyMainClass).Assembly.GetModules(false);\n            \n            // In a simple project with only one module, the module at index\n            // 0 will be the module containing these classes.\n            Module myModule = moduleArray[0];\n\n            Type[] tArray;\n\n            tArray = myModule.FindTypes(Module.FilterTypeName, &quot;My*&quot;);\n            \n            foreach(Type t in tArray)\n            {\n                Console.WriteLine(&quot;Found a module beginning with My*: {0}.&quot;, t.Name);\n            }\n        }\n    }\n\n    class MySecondClass\n    {\n    }\n\n    // This class does not fit the filter criteria My*.\n    class YourClass\n    {\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Reflection.Module.FilterTypeName Example#1\">Imports System.Reflection\n\nNamespace ReflectionModule_Examples\n    Class MyMainClass\n        Shared Sub Main()\n            Dim moduleArray() As [Module]\n\n            moduleArray = GetType(MyMainClass).Assembly.GetModules(False)\n\n            &#39; In a simple project with only one module, the module at index\n            &#39; 0 will be the module containing these classes.\n            Dim myModule As [Module] = moduleArray(0)\n\n            Dim tArray() As Type\n\n            tArray = myModule.FindTypes([Module].FilterTypeName, &quot;My*&quot;)\n\n            Dim t As Type\n            For Each t In tArray\n                Console.WriteLine(&quot;Found a module beginning with My*: {0}&quot;, t.Name)\n            Next t\n        End Sub &#39;Main\n    End Class &#39;MyMainClass\n\n    Class MySecondClass\n    End Class &#39;MySecondClass\n\n    &#39; This class does not fit the filter criteria My*.\n    Class YourClass\n    End Class &#39;YourClass\nEnd Namespace &#39;ReflectionModule_Examples\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_GetCustomAttributes_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Module_GetCustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributes(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Returns all custom attributes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual object[] GetCustomAttributes (bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This argument is ignored for objects of this type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </div>\r\n                  <p>An array of type <code>Object</code> containing all custom attributes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the module names that match the specified search criteria.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Reflection.Module.GetCustomAttributes 1Arg Example#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Collections;\n\nnamespace ReflectionModule_Examples\n{\n\n   //Define a module-level attribute.\n   //A very simple custom attribute.\n\n   [AttributeUsage(AttributeTargets::Class|AttributeTargets::Module)]\n   public ref class MySimpleAttribute: public Attribute\n   {\n   private:\n      String^ name;\n\n   public:\n      MySimpleAttribute( String^ newName )\n      {\n         name = newName;\n      }\n\n   };\n\n\n   [module:MySimpleAttribute(&quot;module-level&quot;)];\n   ref class MyMainClass{};\n\n}\n\nint main()\n{\n   array&lt;System::Reflection::Module^&gt;^moduleArray;\n   moduleArray = ReflectionModule_Examples::MySimpleAttribute::typeid-&gt;Assembly-&gt;GetModules( false );\n   \n   // In a simple project with only one module, the module at index\n   // 0 will be the module containing these classes.\n   System::Reflection::Module^ myModule = moduleArray[ 0 ];\n   array&lt;Object^&gt;^attributes;\n   attributes = myModule-&gt;GetCustomAttributes( true );\n   IEnumerator^ myEnum = attributes-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ o = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( &quot;Found this attribute on myModule: {0}.&quot;, o );\n   }\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Reflection.Module.GetCustomAttributes 1Arg Example#1\">using System;\nusing System.Reflection;\n//Define a module-level attribute.\n[module: ReflectionModule_Examples.MySimpleAttribute(&quot;module-level&quot;)]\nnamespace ReflectionModule_Examples\n{\n    class MyMainClass\n    {\n        static void Main()\n        {\n            Module[] moduleArray;\n            moduleArray = typeof(MyMainClass).Assembly.GetModules(false);\n            // In a simple project with only one module, the module at index\n            // 0 will be the module containing these classes.\n            Module myModule = moduleArray[0];\n            object[] attributes;\n            attributes = myModule.GetCustomAttributes(true);\n            foreach(Object o in attributes)\n            {\n                Console.WriteLine(&quot;Found this attribute on myModule: {0}.&quot;, o.ToString());\n            }\n        }\n    }\n    //A very simple custom attribute.\n    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Module)]\n    public class MySimpleAttribute : Attribute\n    {\n        private string name;\n\n        public MySimpleAttribute(string newName)\n        {\n            name = newName;\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Reflection.Module.GetCustomAttributes 1Arg Example#1\">Imports System.Reflection\n&#39; Define a module-level attribute.\n&lt;Module: ReflectionModule_Examples.MySimpleAttribute(&quot;module-level&quot;)&gt; \n\nNamespace ReflectionModule_Examples\n    Class MyMainClass\n        Shared Sub Main()\n            Dim moduleArray() As [Module]\n            moduleArray = GetType(MyMainClass).Assembly.GetModules(False)\n            &#39; In a simple project with only one module, the module at index\n            &#39; 0 will be the module containing these classes.\n            Dim myModule As [Module] = moduleArray(0)\n            Dim attributes() As Object\n            attributes = myModule.GetCustomAttributes(True)\n            Dim o As [Object]\n            For Each o In attributes\n                Console.WriteLine(&quot;Found this attribute on myModule: {0}&quot;, o.ToString())\n            Next o\n        End Sub &#39;Main\n    End Class &#39;MyMainClass\n    &#39;A very simple custom attribute.\n    &lt;AttributeUsage(AttributeTargets.Class Or AttributeTargets.Module)&gt; _\n     Public Class MySimpleAttribute\n        Inherits Attribute\n        Private name As String\n        Public Sub New(ByVal newName As String)\n            name = newName\n        End Sub &#39;New\n    End Class &#39;MySimpleAttribute\nEnd Namespace &#39;ReflectionModule_Examples\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_GetCustomAttributes_System_Type_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Module_GetCustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributes(Type,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Gets custom attributes of the specified type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual object[] GetCustomAttributes (Type attributeType, bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of attribute to get.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This argument is ignored for objects of this type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </div>\r\n                  <p>An array of type <code>Object</code> containing all custom attributes of the specified type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>attributeType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>attributeType</code> is not a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object supplied by the runtime. For example, <code>attributeType</code> is a <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the module names of the specified type that match the specified search criteria.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Reflection.Module.GetCustomAttributes 2Arg Example#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Collections;\n\nnamespace ReflectionModule_Examples\n{\n\n   // Define a very simple custom attribute\n\n   [AttributeUsage(AttributeTargets::Class|AttributeTargets::Module)]\n   public ref class MySimpleAttribute: public Attribute\n   {\n   private:\n      String^ name;\n\n   public:\n      MySimpleAttribute( String^ newName )\n      {\n         name = newName;\n      }\n\n   };\n\n}\n\n\n//Define a module-level attribute.\n\n[module:ReflectionModule_Examples::MySimpleAttribute(&quot;module-level&quot;)];\nint main()\n{\n   array&lt;System::Reflection::Module^&gt;^moduleArray;\n   moduleArray = ReflectionModule_Examples::MySimpleAttribute::typeid-&gt;Assembly-&gt;GetModules( false );\n   \n   // In a simple project with only one module, the module at index\n   // 0 will be the module containing these classes.\n   System::Reflection::Module^ myModule = moduleArray[ 0 ];\n   array&lt;Object^&gt;^attributes;\n   \n   //Get only MySimpleAttribute attributes for this module.\n   attributes = myModule-&gt;GetCustomAttributes( myModule-&gt;GetType( &quot;ReflectionModule_Examples.MySimpleAttribute&quot;, false, false ), true );\n   IEnumerator^ myEnum = attributes-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ o = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( &quot;Found this attribute on myModule: {0}&quot;, o );\n   }\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Reflection.Module.GetCustomAttributes 2Arg Example#1\">using System;\nusing System.Reflection;\n//Define a module-level attribute.\n[module: ReflectionModule_Examples.MySimpleAttribute(&quot;module-level&quot;)]\nnamespace ReflectionModule_Examples\n{\n    class MyMainClass\n    {\n        static void Main()\n        {\n            Module[] moduleArray;\n            moduleArray = typeof(MyMainClass).Assembly.GetModules(false);\n            // In a simple project with only one module, the module at index\n            // 0 will be the module containing these classes.\n            Module myModule = moduleArray[0];\n            object[] attributes;\n            //Get only MySimpleAttribute attributes for this module.\n            attributes = myModule.GetCustomAttributes(\n                myModule.GetType(&quot;ReflectionModule_Examples.MySimpleAttribute&quot;, false, false),\n                true);\n            foreach(Object o in attributes)\n            {\n                Console.WriteLine(&quot;Found this attribute on myModule: {0}&quot;, o.ToString());\n            }\n        }\n    }\n\n    // Define a very simple custom attribute\n    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Module)]\n    public class MySimpleAttribute : Attribute\n    {\n        private string name;\n\n        public MySimpleAttribute(string newName)\n        {\n            name = newName;\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Reflection.Module.GetCustomAttributes 2Arg Example#1\">Imports System.Reflection\n\n&#39; Define a module-level attribute.\n&lt;Module: ReflectionModule_Examples.MySimpleAttribute(&quot;module-level&quot;)&gt; \n&#39; This code assumes that the root namespace is set to empty(&quot;&quot;).\nNamespace ReflectionModule_Examples\n    Class MyMainClass\n        Shared Sub Main()\n            Dim moduleArray() As [Module]\n            moduleArray = GetType(MyMainClass).Assembly.GetModules(False)\n            &#39; In a simple project with only one module, the module at index\n            &#39; 0 will be the module containing these classes.\n            Dim myModule As [Module] = moduleArray(0)\n            Dim attributes() As Object\n            &#39; Get only MySimpleAttribute attributes for this module.\n            attributes = myModule.GetCustomAttributes( _\n                myModule.GetType(&quot;ReflectionModule_Examples.MySimpleAttribute&quot;, _\n                False, False), True)\n            Dim o As [Object]\n            For Each o In attributes\n                Console.WriteLine(&quot;Found this attribute on myModule: {0}&quot;, o.ToString())\n            Next o\n        End Sub &#39;Main\n    End Class &#39;MyMainClass\n    &#39; Define a very simple custom attribute.\n    &lt;AttributeUsage(AttributeTargets.Class Or AttributeTargets.Module)&gt; _\n     Public Class MySimpleAttribute\n        Inherits Attribute\n        Private name As String\n        Public Sub New(ByVal newName As String)\n            name = newName\n        End Sub &#39;New\n    End Class &#39;MySimpleAttribute\nEnd Namespace &#39;ReflectionModule_Examples\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_GetCustomAttributesData\">\r\n    \r\n            <a id=\"System_Reflection_Module_GetCustomAttributesData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributesData()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a list of <a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a> objects for the current module, which can be used in the reflection-only context.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt; GetCustomAttributesData ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList</a>&lt;<a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a>&gt;</div>\r\n                  </div>\r\n                  <p>A generic list of <a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a> objects representing data about the attributes that have been applied to the current module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to examine the custom attributes of code in the reflection-only context, in cases where the custom attributes themselves are defined in code that is loaded into the reflection-only context. Methods such as <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a> and <a class=\"xref\" href=\"system.reflection.module#System_Reflection_Module_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a> cannot be used in such cases, because they create instances of the attributes. Code in the reflection-only context cannot be executed. For more information and example code, see the <a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a> class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_GetField_System_String_\">\r\n    \r\n            <a id=\"System_Reflection_Module_GetField_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetField(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a field having the specified name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.FieldInfo GetField (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The field name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a></div>\r\n                  </div>\r\n                  <p>A <code>FieldInfo</code> object having the specified name, or <code>null</code> if the field does not exist.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>name</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_GetField_System_String_System_Reflection_BindingFlags_\">\r\n    \r\n            <a id=\"System_Reflection_Module_GetField_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetField(String,BindingFlags)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a field having the specified name and binding attributes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The field name.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <code>BindingFlags</code> bit flags used to control the search.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a></div>\r\n                  </div>\r\n                  <p>A <code>FieldInfo</code> object having the specified name and binding attributes, or <code>null</code> if the field does not exist.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>name</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_GetFields\">\r\n    \r\n            <a id=\"System_Reflection_Module_GetFields_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetFields()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the global fields defined on the module.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.FieldInfo[] GetFields ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a>[]</div>\r\n                  </div>\r\n                  <p>An array of <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a> objects representing the global fields defined on the module; if there are no global fields, an empty array is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The GetFields method does not return fields in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which fields are returned, because that order can vary.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_GetFields_System_Reflection_BindingFlags_\">\r\n    \r\n            <a id=\"System_Reflection_Module_GetFields_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetFields(BindingFlags)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the global fields defined on the module that match the specified binding flags.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingFlags);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingFlags</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of <a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a> values that limit the search.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a>[]</div>\r\n                  </div>\r\n                  <p>An array of type <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a> representing the global fields defined on the module that match the specified binding flags; if no global fields match the binding flags, an empty array is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.reflection.module#System_Reflection_Module_GetFields_\" data-linktype=\"relative-path\">GetFields</a> method does not return fields in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which fields are returned, because that order can vary.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_GetHashCode\">\r\n    \r\n            <a id=\"System_Reflection_Module_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the hash code for this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer hash code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_GetMethod_System_String_\">\r\n    \r\n            <a id=\"System_Reflection_Module_GetMethod_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMethod(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a method having the specified name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.MethodInfo GetMethod (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The method name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </div>\r\n                  <p>A <code>MethodInfo</code> object having the specified name, or <code>null</code> if the method does not exist.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_GetMethod_System_String_System_Type___\">\r\n    \r\n            <a id=\"System_Reflection_Module_GetMethod_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMethod(String,Type[])</div>        \r\n          </div>\r\n    \r\n            <p>Returns a method having the specified name and parameter types.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.MethodInfo GetMethod (string name, Type[] types);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The method name.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>types</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The parameter types to search for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </div>\r\n                  <p>A <code>MethodInfo</code> object in accordance with the specified criteria, or <code>null</code> if the method does not exist.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>, <code>types</code> is <code>null</code>, or <code>types</code> (i) is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_GetMethod_System_String_System_Reflection_BindingFlags_System_Reflection_Binder_System_Reflection_CallingConventions_System_Type___System_Reflection_ParameterModifier___\">\r\n    \r\n            <a id=\"System_Reflection_Module_GetMethod_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMethod(String,BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])</div>        \r\n          </div>\r\n    \r\n            <p>Returns a method having the specified name, binding information, calling convention, and parameter types and modifiers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The method name.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <code>BindingFlags</code> bit flags used to control the search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.binder\" data-linktype=\"relative-path\">Binder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that implements <code>Binder</code>, containing properties related to this method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>callConvention</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.callingconventions\" data-linktype=\"relative-path\">CallingConventions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The calling convention for the method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>types</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The parameter types to search for.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>modifiers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.parametermodifier\" data-linktype=\"relative-path\">ParameterModifier</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of parameter modifiers used to make binding work with parameter signatures in which the types have been modified.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </div>\r\n                  <p>A <code>MethodInfo</code> object in accordance with the specified criteria, or <code>null</code> if the method does not exist.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>, <code>types</code> is <code>null</code>, or <code>types</code> (i) is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_GetMethodImpl_System_String_System_Reflection_BindingFlags_System_Reflection_Binder_System_Reflection_CallingConventions_System_Type___System_Reflection_ParameterModifier___\">\r\n    \r\n            <a id=\"System_Reflection_Module_GetMethodImpl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMethodImpl(String,BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])</div>        \r\n          </div>\r\n    \r\n            <p>Returns the method implementation in accordance with the specified criteria.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual System.Reflection.MethodInfo GetMethodImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The method name.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <code>BindingFlags</code> bit flags used to control the search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.binder\" data-linktype=\"relative-path\">Binder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that implements <code>Binder</code>, containing properties related to this method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>callConvention</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.callingconventions\" data-linktype=\"relative-path\">CallingConventions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The calling convention for the method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>types</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The parameter types to search for.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>modifiers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.parametermodifier\" data-linktype=\"relative-path\">ParameterModifier</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of parameter modifiers used to make binding work with parameter signatures in which the types have been modified.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </div>\r\n                  <p>A <code>MethodInfo</code> object containing implementation information as specified, or <code>null</code> if the method does not exist.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.ambiguousmatchexception\" data-linktype=\"relative-path\">AmbiguousMatchException</a></div>\r\n                  </div>\r\n                  <p><code>types</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_GetMethods\">\r\n    \r\n            <a id=\"System_Reflection_Module_GetMethods_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMethods()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the global methods defined on the module.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.MethodInfo[] GetMethods ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a>[]</div>\r\n                  </div>\r\n                  <p>An array of <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> objects representing all the global methods defined on the module; if there are no global methods, an empty array is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_GetMethods_System_Reflection_BindingFlags_\">\r\n    \r\n            <a id=\"System_Reflection_Module_GetMethods_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMethods(BindingFlags)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the global methods defined on the module that match the specified binding flags.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingFlags);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingFlags</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of <a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a> values that limit the search.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a>[]</div>\r\n                  </div>\r\n                  <p>An array of type <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> representing the global methods defined on the module that match the specified binding flags; if no global methods match the binding flags, an empty array is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\">\r\n    \r\n            <a id=\"System_Reflection_Module_GetObjectData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetObjectData(SerializationInfo,StreamingContext)</div>        \r\n          </div>\r\n    \r\n            <p>Provides an <a class=\"xref\" href=\"system.runtime.serialization.iserializable\" data-linktype=\"relative-path\">ISerializable</a> implementation for serialized objects.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>info</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The information and data needed to serialize or deserialize an object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>context</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The context for the serialization.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>info</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_GetPEKind_System_Reflection_PortableExecutableKinds__System_Reflection_ImageFileMachine__\">\r\n    \r\n            <a id=\"System_Reflection_Module_GetPEKind_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetPEKind(PortableExecutableKinds,ImageFileMachine)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a pair of values indicating the nature of the code in a module and the platform targeted by the module.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void GetPEKind (out System.Reflection.PortableExecutableKinds peKind, out System.Reflection.ImageFileMachine machine);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>peKind</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.portableexecutablekinds\" data-linktype=\"relative-path\">PortableExecutableKinds</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>When this method returns, a combination of the <a class=\"xref\" href=\"system.reflection.portableexecutablekinds\" data-linktype=\"relative-path\">PortableExecutableKinds</a> values indicating the nature of the code in the module.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>machine</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.imagefilemachine\" data-linktype=\"relative-path\">ImageFileMachine</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>When this method returns, one of the <a class=\"xref\" href=\"system.reflection.imagefilemachine\" data-linktype=\"relative-path\">ImageFileMachine</a> values indicating the platform targeted by the module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_GetSignerCertificate\">\r\n    \r\n            <a id=\"System_Reflection_Module_GetSignerCertificate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetSignerCertificate()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an <code>X509Certificate</code> object corresponding to the certificate included in the Authenticode signature of the assembly which this module belongs to. If the assembly has not been Authenticode signed, <code>null</code> is returned.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Security.Cryptography.X509Certificates.X509Certificate GetSignerCertificate ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate\" data-linktype=\"relative-path\">X509Certificate</a></div>\r\n                  </div>\r\n                  <p>An <code>X509Certificate</code> object, or <code>null</code> if the assembly to which this module belongs has not been Authenticode signed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_GetType_System_String_\">\r\n    \r\n            <a id=\"System_Reflection_Module_GetType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetType(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the specified type, performing a case-sensitive search.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual Type GetType (string className);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>className</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the type to locate. The name must be fully qualified with the namespace.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>A <code>Type</code> object representing the given type, if the type is in this module; otherwise, <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>className</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.targetinvocationexception\" data-linktype=\"relative-path\">TargetInvocationException</a></div>\r\n                  </div>\r\n                  <p>The class initializers are invoked and an exception is thrown.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>className</code> is a zero-length string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>className</code> requires a dependent assembly that could not be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p><code>className</code> requires a dependent assembly that was found but could not be loaded.  </p>\n<p> -or-  </p>\n<p> The current assembly was loaded into the reflection-only context, and <code>className</code> requires a dependent assembly that was not preloaded.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>className</code> requires a dependent assembly, but the file is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> <code>className</code> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> If the type has been forwarded to another assembly, it is still returned by this method. For information on type forwarding, see <a href=\"../Topic/Type%20Forwarding%20in%20the%20Common%20Language%20Runtime.md\" data-linktype=\"relative-path\">Type Forwarding in the Common Language Runtime</a>.  </p>\n</div>\n<p> A type can be retrieved from a specific module using <a class=\"xref\" href=\"system.reflection.module#System_Reflection_Module_GetType_\" data-linktype=\"relative-path\">GetType</a>. Calling <a class=\"xref\" href=\"system.reflection.module#System_Reflection_Module_GetType_\" data-linktype=\"relative-path\">GetType</a> on the module that contains the manifest will not search the entire assembly. To retrieve a type from an assembly, regardless of which module it is in, you must call <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetType_\" data-linktype=\"relative-path\">GetType</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the name of a type in the specified module.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Reflection.Module.GetType 1Arg Example#1\">using namespace System;\nusing namespace System::Reflection;\n\nnamespace ReflectionModule_Examples\n{\n   public ref class MyMainClass{};\n\n}\n\nint main()\n{\n   array&lt;Module^&gt;^moduleArray;\n   moduleArray = ReflectionModule_Examples::MyMainClass::typeid-&gt;Assembly-&gt;GetModules( false );\n   \n   //In a simple project with only one module, the module at index\n   // 0 will be the module containing these classes.\n   Module^ myModule = moduleArray[ 0 ];\n   Type^ myType;\n   myType = myModule-&gt;GetType( &quot;ReflectionModule_Examples.MyMainClass&quot; );\n   Console::WriteLine( &quot;Got type: {0}&quot;, myType );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Reflection.Module.GetType 1Arg Example#1\">using System;\nusing System.Reflection;\n\nnamespace ReflectionModule_Examples\n{\n    class MyMainClass\n    {\n        static void Main()\n        {\n            Module[] moduleArray;\n            \n            moduleArray = typeof(MyMainClass).Assembly.GetModules(false);\n            \n            //In a simple project with only one module, the module at index\n            // 0 will be the module containing these classes.\n            Module myModule = moduleArray[0];\n\n            Type myType;\n\n            myType = myModule.GetType(&quot;ReflectionModule_Examples.MyMainClass&quot;);\n            Console.WriteLine(&quot;Got type: {0}&quot;, myType.ToString());\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Reflection.Module.GetType 1Arg Example#1\">Imports System.Reflection\n\n&#39;This code assumes that the root namespace is set to empty(&quot;&quot;).\nNamespace ReflectionModule_Examples\n    Class MyMainClass\n        Shared Sub Main()\n            Dim moduleArray() As [Module]\n\n            moduleArray = GetType(MyMainClass).Assembly.GetModules(False)\n\n            &#39;In a simple project with only one module, the module at index\n            &#39; 0 will be the module containing these classes.\n            Dim myModule As [Module] = moduleArray(0)\n\n            Dim myType As Type\n\n            myType = myModule.GetType(&quot;ReflectionModule_Examples.MyMainClass&quot;)\n            Console.WriteLine(&quot;Got type: {0}&quot;, myType.ToString())\n        End Sub &#39;Main\n    End Class &#39;MyMainClass\nEnd Namespace &#39;ReflectionModule_Examples\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_GetType_System_String_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Module_GetType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetType(String,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the specified type, searching the module with the specified case sensitivity.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual Type GetType (string className, bool ignoreCase);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>className</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the type to locate. The name must be fully qualified with the namespace.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ignoreCase</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> for case-insensitive search; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>A <code>Type</code> object representing the given type, if the type is in this module; otherwise, <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>className</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.targetinvocationexception\" data-linktype=\"relative-path\">TargetInvocationException</a></div>\r\n                  </div>\r\n                  <p>The class initializers are invoked and an exception is thrown.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>className</code> is a zero-length string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>className</code> requires a dependent assembly that could not be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p><code>className</code> requires a dependent assembly that was found but could not be loaded.  </p>\n<p> -or-  </p>\n<p> The current assembly was loaded into the reflection-only context, and <code>className</code> requires a dependent assembly that was not preloaded.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>className</code> requires a dependent assembly, but the file is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> <code>className</code> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> If the type has been forwarded to another assembly, it is still returned by this method. For information on type forwarding, see <a href=\"../Topic/Type%20Forwarding%20in%20the%20Common%20Language%20Runtime.md\" data-linktype=\"relative-path\">Type Forwarding in the Common Language Runtime</a>.  </p>\n</div>\n<p> A type can be retrieved from a specific module using GetType. Calling GetType on the module that contains the manifest will not search the entire assembly. To retrieve a type from an assembly, regardless of which module it is in, you must call <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetType_\" data-linktype=\"relative-path\">GetType</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the name of a type in the specified module, specifying <code>false</code> for the <code>ignoreCase</code> parameter so that case will not be ignored.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Reflection.Module.GetType 2Arg Example#1\">using System;\nusing System.Reflection;\n\nnamespace ReflectionModule_Examples\n{\n    class MyMainClass\n    {\n        static void Main()\n        {\n            Module[] moduleArray;\n            \n            moduleArray = typeof(MyMainClass).Assembly.GetModules(false);\n            \n            //In a simple project with only one module, the module at index\n            // 0 will be the module containing these classes.\n            Module myModule = moduleArray[0];\n\n            Type myType;\n            myType = myModule.GetType(&quot;ReflectionModule_Examples.MyMainClass&quot;, false);\n            Console.WriteLine(&quot;Got type: {0}&quot;, myType.ToString());\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Reflection.Module.GetType 2Arg Example#1\">using namespace System;\nusing namespace System::Reflection;\n\nnamespace ReflectionModule_Examples\n{\n   public ref class MyMainClass{};\n\n}\n\nint main()\n{\n   array&lt;Module^&gt;^moduleArray;\n   moduleArray = ReflectionModule_Examples::MyMainClass::typeid-&gt;Assembly-&gt;GetModules( false );\n   \n   //In a simple project with only one module, the module at index\n   // 0 will be the module containing these classes.\n   Module^ myModule = moduleArray[ 0 ];\n   Type^ myType;\n   myType = myModule-&gt;GetType( &quot;ReflectionModule_Examples.MyMainClass&quot;, false );\n   Console::WriteLine( &quot;Got type: {0}&quot;, myType );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Reflection.Module.GetType 2Arg Example#1\">Imports System.Reflection\n\n&#39;This code assumes that the root namespace is set to empty(&quot;&quot;).\nNamespace ReflectionModule_Examples\n    Class MyMainClass\n        Shared Sub Main()\n            Dim moduleArray() As [Module]\n\n            moduleArray = GetType(MyMainClass).Assembly.GetModules(False)\n\n            &#39;In a simple project with only one module, the module at index\n            &#39; 0 will be the module containing these classes.\n            Dim myModule As [Module] = moduleArray(0)\n\n            Dim myType As Type\n            myType = myModule.GetType(&quot;ReflectionModule_Examples.MyMainClass&quot;, False)\n            Console.WriteLine(&quot;Got type: {0}&quot;, myType.ToString())\n        End Sub &#39;Main\n    End Class &#39;MyMainClass\nEnd Namespace &#39;ReflectionModule_Examples\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_GetType_System_String_System_Boolean_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Module_GetType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetType(String,Boolean,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the specified type, specifying whether to make a case-sensitive search of the module and whether to throw an exception if the type cannot be found.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual Type GetType (string className, bool throwOnError, bool ignoreCase);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>className</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the type to locate. The name must be fully qualified with the namespace.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>throwOnError</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to throw an exception if the type cannot be found; <code>false</code> to return <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ignoreCase</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> for case-insensitive search; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object representing the specified type, if the type is declared in this module; otherwise, <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>className</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.targetinvocationexception\" data-linktype=\"relative-path\">TargetInvocationException</a></div>\r\n                  </div>\r\n                  <p>The class initializers are invoked and an exception is thrown.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>className</code> is a zero-length string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a></div>\r\n                  </div>\r\n                  <p><code>throwOnError</code> is <code>true</code>, and the type cannot be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>className</code> requires a dependent assembly that could not be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p><code>className</code> requires a dependent assembly that was found but could not be loaded.  </p>\n<p> -or-  </p>\n<p> The current assembly was loaded into the reflection-only context, and <code>className</code> requires a dependent assembly that was not preloaded.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>className</code> requires a dependent assembly, but the file is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> <code>className</code> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>throwOnError</code> parameter affects only what happens when the type is not found. It does not affect any other exceptions that might be thrown. In particular, if the type is found but cannot be loaded, <a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a> can be thrown even if <code>throwOnError</code> is <code>false</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If the type has been forwarded to another assembly, it is still returned by this method. For information on type forwarding, see <a href=\"../Topic/Type%20Forwarding%20in%20the%20Common%20Language%20Runtime.md\" data-linktype=\"relative-path\">Type Forwarding in the Common Language Runtime</a>.  </p>\n</div>\n<p> A type can be retrieved from a specific module using <a class=\"xref\" href=\"system.reflection.module#System_Reflection_Module_GetType_\" data-linktype=\"relative-path\">GetType</a>. Calling <a class=\"xref\" href=\"system.reflection.module#System_Reflection_Module_GetType_\" data-linktype=\"relative-path\">GetType</a> on the module that contains the manifest will not search the entire assembly. To retrieve a type from an assembly, regardless of which module it is in, you must call <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetType_\" data-linktype=\"relative-path\">GetType</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the name of a type in the specified module. The <code>throwOnError</code> and <code>ignoreCase</code> parameters are specified as <code>false</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Reflection.Module.GetType 3Arg Example#1\">using System;\nusing System.Reflection;\n\nnamespace ReflectionModule_Examples\n{\n    class MyMainClass\n    {\n        static void Main()\n        {\n            Module[] moduleArray;\n            \n            moduleArray = typeof(MyMainClass).Assembly.GetModules(false);\n            \n            //In a simple project with only one module, the module at index\n            // 0 will be the module containing this class.\n            Module myModule = moduleArray[0];\n\n            Type myType;\n            myType = myModule.GetType(&quot;ReflectionModule_Examples.MyMainClass&quot;, false, false);\n            Console.WriteLine(&quot;Got type: {0}&quot;, myType.ToString());\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Reflection.Module.GetType 3Arg Example#1\">using namespace System;\nusing namespace System::Reflection;\n\nnamespace ReflectionModule_Examples\n{\n   public ref class MyMainClass{};\n\n}\n\nint main()\n{\n   array&lt;Module^&gt;^moduleArray;\n   moduleArray = ReflectionModule_Examples::MyMainClass::typeid-&gt;Assembly-&gt;GetModules( false );\n   \n   //In a simple project with only one module, the module at index\n   // 0 will be the module containing this class.\n   Module^ myModule = moduleArray[ 0 ];\n   Type^ myType;\n   myType = myModule-&gt;GetType( &quot;ReflectionModule_Examples.MyMainClass&quot;, false, false );\n   Console::WriteLine( &quot;Got type: {0}&quot;, myType );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Reflection.Module.GetType 3Arg Example#1\">Imports System.Reflection\n\n&#39;This code assumes that the root namespace is set to empty(&quot;&quot;).\nNamespace ReflectionModule_Examples\n    Class MyMainClass\n        Shared Sub Main()\n            Dim moduleArray() As [Module]\n\n            moduleArray = GetType(MyMainClass).Assembly.GetModules(False)\n\n            &#39;In a simple project with only one module, the module at index\n            &#39; 0 will be the module containing this class.\n            Dim myModule As [Module] = moduleArray(0)\n\n            Dim myType As Type\n            myType = myModule.GetType(&quot;ReflectionModule_Examples.MyMainClass&quot;, False, False)\n            Console.WriteLine(&quot;Got type: {0}&quot;, myType.ToString())\n        End Sub &#39;Main\n    End Class &#39;MyMainClass\nEnd Namespace &#39;ReflectionModule_Examples\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_GetTypes\">\r\n    \r\n            <a id=\"System_Reflection_Module_GetTypes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetTypes()</div>        \r\n          </div>\r\n    \r\n            <p>Returns all the types defined within this module.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual Type[] GetTypes ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </div>\r\n                  <p>An array of type <code>Type</code> containing types defined within the module that is reflected by this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.reflectiontypeloadexception\" data-linktype=\"relative-path\">ReflectionTypeLoadException</a></div>\r\n                  </div>\r\n                  <p>One or more classes in a module could not be loaded.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>ReflectionTypeLoadException</code> is a special load exception. The <code>ReflectionTypeLoadException.Types</code> property contains the array of types that were defined in the module and were loaded. This array may contain some null values. The <code>ReflectionTypeLoadException.LoaderExceptions</code> property is an array of exceptions that represent the exceptions that were thrown by the loader. The holes in the class array line up with the exceptions.  </p>\n<p> For example, if the class initializers of one of the classes throws an exception while it is being loaded, a <code>TargetInvocationException</code> is stored in the corresponding element of the <code>LoaderExceptions</code> array.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If a type has been forwarded to another assembly, it is not included in the returned array. For information on type forwarding, see <a href=\"../Topic/Type%20Forwarding%20in%20the%20Common%20Language%20Runtime.md\" data-linktype=\"relative-path\">Type Forwarding in the Common Language Runtime</a>.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_IsDefined_System_Type_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Module_IsDefined_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsDefined(Type,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value that indicates whether the specified attribute type has been applied to this module.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool IsDefined (Type attributeType, bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of custom attribute to test for.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This argument is ignored for objects of this type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if one or more instances of <code>attributeType</code> have been applied to this module; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>attributeType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>attributeType</code> is not a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object supplied by the runtime. For example, <code>attributeType</code> is a <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates a use of the <code>IsDefined</code> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Reflection.Module.IsDefined Example#1\">using namespace System;\nusing namespace System::Reflection;\n\nnamespace ReflectionModule_Examples\n{\n\n   //A very simple custom attribute.\n\n   [AttributeUsage(AttributeTargets::Class|AttributeTargets::Module)]\n   public ref class MySimpleAttribute: public Attribute\n   {\n   private:\n      String^ name;\n\n   public:\n      MySimpleAttribute( String^ newName )\n      {\n         name = newName;\n      }\n\n   };\n\n}\n\n\n//Define a module-level attribute.\n\n[module:ReflectionModule_Examples::MySimpleAttribute(&quot;module-level&quot;)];\nint main()\n{\n   array&lt;System::Reflection::Module^&gt;^moduleArray;\n   moduleArray = ReflectionModule_Examples::MySimpleAttribute::typeid-&gt;Assembly-&gt;GetModules( false );\n   \n   //In a simple project with only one module, the module at index\n   // 0 will be the module containing these classes.\n   System::Reflection::Module^ myModule = moduleArray[ 0 ];\n   Type^ myType;\n   myType = myModule-&gt;GetType( &quot;ReflectionModule_Examples.MySimpleAttribute&quot; );\n   Console::WriteLine( &quot;IsDefined(MySimpleAttribute) = {0}&quot;, myModule-&gt;IsDefined( myType, false ) );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Reflection.Module.IsDefined Example#1\">using System;\nusing System.Reflection;\n\n//Define a module-level attribute.\n[module: ReflectionModule_Examples.MySimpleAttribute(&quot;module-level&quot;)]\n\nnamespace ReflectionModule_Examples\n{\n    class MyMainClass\n    {\n        static void Main()\n        {\n            Module[] moduleArray;\n            \n            moduleArray = typeof(MyMainClass).Assembly.GetModules(false);\n            \n            //In a simple project with only one module, the module at index\n            // 0 will be the module containing these classes.\n            Module myModule = moduleArray[0];\n\n            Type myType;\n            myType = myModule.GetType(&quot;ReflectionModule_Examples.MySimpleAttribute&quot;);\n            Console.WriteLine(&quot;IsDefined(MySimpleAttribute) = {0}&quot;, myModule.IsDefined(myType, false));\n        }\n    }\n\n    //A very simple custom attribute.\n    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Module)]\n    public class MySimpleAttribute : Attribute\n    {\n        private string name;\n\n        public MySimpleAttribute(string newName)\n        {\n            name = newName;\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Reflection.Module.IsDefined Example#1\">Imports System.Reflection\n\n&#39;Define a module-level attribute.\n&lt;Module: ReflectionModule_Examples.MySimpleAttribute(&quot;module-level&quot;)&gt; \n\n&#39;Define a module-level attribute.\nNamespace ReflectionModule_Examples\n    Class MyMainClass\n        Shared Sub Main()\n            Dim moduleArray() As [Module]\n\n            moduleArray = GetType(MyMainClass).Assembly.GetModules(False)\n\n            &#39;In a simple project with only one module, the module at index\n            &#39; 0 will be the module containing these classes.\n            Dim myModule As [Module] = moduleArray(0)\n\n            Dim myType As Type\n            myType = myModule.GetType(&quot;ReflectionModule_Examples.MySimpleAttribute&quot;)\n            Console.WriteLine(&quot;IsDefined(MySimpleAttribute) = {0}&quot;, myModule.IsDefined(myType, False))\n        End Sub &#39;Main\n    End Class &#39;MyMainClass\n\n    &#39;A very simple custom attribute.\n    &lt;AttributeUsage(AttributeTargets.Class Or AttributeTargets.Module)&gt; _\n    Public Class MySimpleAttribute\n        Inherits Attribute\n        Private name As String\n\n        Public Sub New(ByVal newName As String)\n            name = newName\n        End Sub &#39;New\n    End Class &#39;MySimpleAttribute\nEnd Namespace &#39;ReflectionModule_Examples\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_IsResource\">\r\n    \r\n            <a id=\"System_Reflection_Module_IsResource_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsResource()</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the object is a resource.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool IsResource ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the object is a resource; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates a use of the <code>IsResource</code> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Reflection.Module.IsResource Example#1\">using namespace System;\nusing namespace System::Reflection;\nint main()\n{\n   array&lt;Module^&gt;^moduleArray;\n   moduleArray = Assembly::GetExecutingAssembly()-&gt;GetModules( false );\n   \n   //In a simple project with only one module, the module at index\n   // 0 will be the module containing this class.\n   Module^ myModule = moduleArray[ 0 ];\n   Console::WriteLine( &quot;myModule-&gt;IsResource() = {0}&quot;, myModule-&gt;IsResource() );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Reflection.Module.IsResource Example#1\">Imports System.Reflection\n\nNamespace ReflectionModule_Examples\n    Class MyMainClass\n        Shared Sub Main()\n            Dim moduleArray() As [Module]\n\n            moduleArray = GetType(MyMainClass).Assembly.GetModules(False)\n\n            &#39;In a simple project with only one module, the module at index\n            &#39; 0 will be the module containing this class.\n            Dim myModule As [Module] = moduleArray(0)\n\n            Console.WriteLine(&quot;myModule.IsResource() = {0}&quot;, myModule.IsResource())\n        End Sub &#39;Main\n    End Class &#39;MyMainClass\nEnd Namespace &#39;ReflectionModule_Examples\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Reflection.Module.IsResource Example#1\">using System;\nusing System.Reflection;\n\nnamespace ReflectionModule_Examples\n{\n    class MyMainClass\n    {\n        static void Main()\n        {\n            Module[] moduleArray;\n            \n            moduleArray = typeof(MyMainClass).Assembly.GetModules(false);\n            \n            //In a simple project with only one module, the module at index\n            // 0 will be the module containing this class.\n            Module myModule = moduleArray[0];\n\n            Console.WriteLine(&quot;myModule.IsResource() = {0}&quot;, myModule.IsResource());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_ResolveField_System_Int32_\">\r\n    \r\n            <a id=\"System_Reflection_Module_ResolveField_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ResolveField(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the field identified by the specified metadata token.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.FieldInfo ResolveField (int metadataToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>metadataToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A metadata token that identifies a field in the module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a> object representing the field that is identified by the specified metadata token.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>metadataToken</code> is not a token for a field in the scope of the current module.  </p>\n<p> -or-  </p>\n<p> <code>metadataToken</code> identifies a field whose parent <code>TypeSpec</code> has a signature containing element type <code>var</code> (a type parameter of a generic type) or <code>mvar</code> (a type parameter of a generic method).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>metadataToken</code> is not a valid token in the scope of the current module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To resolve a metadata token that identifies a field whose parent <code>TypeSpec</code> has a signature containing element type <code>ELEMENT_TYPE_VAR</code> or <code>ELEMENT_TYPE_MVAR</code>, use the [ResolveField(Int32,â€‚Type[],â€‚Type&lt;xref:System.Reflection.Module.ResolveField%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29&gt; method overload, which allows you to supply the necessary context. That is, when you are resolving a metadata token for a field that depends on the generic type parameters of the generic type and/or the generic method in which the token is embedded, you must use the overload that allows you to supply those type parameters.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially &quot;Partition II: Metadata Definition and Semantics&quot;. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the ECMA Web site.  </p>\n</div>\n<p> For code that demonstrates token resolution using the generic context (that is, the generic type parameters of the generic type and/or the generic method in which the token is embedded) see the [ResolveMethod(Int32,â€‚Type[],â€‚Type&lt;xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29&gt; method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_ResolveField_System_Int32_System_Type___System_Type___\">\r\n    \r\n            <a id=\"System_Reflection_Module_ResolveField_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ResolveField(Int32,Type[],Type[])</div>        \r\n          </div>\r\n    \r\n            <p>Returns the field identified by the specified metadata token, in the context defined by the specified generic type parameters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Reflection.FieldInfo ResolveField (int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>metadataToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A metadata token that identifies a field in the module.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>genericTypeArguments</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects representing the generic type arguments of the type where the token is in scope, or <code>null</code> if that type is not generic.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>genericMethodArguments</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects representing the generic type arguments of the method where the token is in scope, or <code>null</code> if that method is not generic.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a> object representing the field that is identified by the specified metadata token.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>metadataToken</code> is not a token for a field in the scope of the current module.  </p>\n<p> -or-  </p>\n<p> <code>metadataToken</code> identifies a field whose parent <code>TypeSpec</code> has a signature containing element type <code>var</code> (a type parameter of a generic type) or <code>mvar</code> (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of <code>genericTypeArguments</code> and <code>genericMethodArguments</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>metadataToken</code> is not a valid token in the scope of the current module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.type#System_Type_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method on the type where <code>metadataToken</code> is in scope to obtain an array of generic type arguments for <code>genericTypeArguments</code>. Use the <a class=\"xref\" href=\"system.reflection.methodinfo#System_Reflection_MethodInfo_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method on the method where <code>metadataToken</code> is in scope to obtain an array of generic type arguments for <code>genericTypeArguments</code>. It is always safe to provide these arguments, even when they are not needed.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially &quot;Partition II: Metadata Definition and Semantics&quot;. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the ECMA Web site.  </p>\n</div>\n<p> For code that demonstrates token resolution using the generic context (that is, the generic type parameters of the generic type and/or the generic method in which the token is embedded) see the [ResolveMethod(Int32,â€‚Type[],â€‚Type&lt;xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29&gt; method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_ResolveMember_System_Int32_\">\r\n    \r\n            <a id=\"System_Reflection_Module_ResolveMember_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ResolveMember(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the type or member identified by the specified metadata token.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.MemberInfo ResolveMember (int metadataToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>metadataToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A metadata token that identifies a type or member in the module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> object representing the type or member that is identified by the specified metadata token.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>metadataToken</code> is not a token for a type or member in the scope of the current module.  </p>\n<p> -or-  </p>\n<p> <code>metadataToken</code> is a <code>MethodSpec</code> or <code>TypeSpec</code> whose signature contains element type <code>var</code> (a type parameter of a generic type) or <code>mvar</code> (a type parameter of a generic method).  </p>\n<p> -or-  </p>\n<p> <code>metadataToken</code> identifies a property or event.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>metadataToken</code> is not a valid token in the scope of the current module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To resolve a metadata token for a <code>MethodSpec</code> or <code>TypeSpec</code> whose signature contains element type <code>ELEMENT_TYPE_VAR</code> or <code>ELEMENT_TYPE_MVAR</code>, use the [ResolveMember(Int32,â€‚Type[],â€‚Type&lt;xref:System.Reflection.Module.ResolveMember%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29&gt; method overload, which allows you to supply the necessary context. That is, when you are resolving a metadata token for a member that depends on the generic type parameters of the generic type and/or the generic method in which the token is embedded, you must use the overload that allows you to supply those type parameters.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially &quot;Partition II: Metadata Definition and Semantics&quot;. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the ECMA Web site.  </p>\n</div>\n<p> For code that demonstrates token resolution using the generic context (that is, the generic type parameters of the generic type and/or the generic method in which the token is embedded) see the [ResolveMethod(Int32,â€‚Type[],â€‚Type&lt;xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29&gt; method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_ResolveMember_System_Int32_System_Type___System_Type___\">\r\n    \r\n            <a id=\"System_Reflection_Module_ResolveMember_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ResolveMember(Int32,Type[],Type[])</div>        \r\n          </div>\r\n    \r\n            <p>Returns the type or member identified by the specified metadata token, in the context defined by the specified generic type parameters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Reflection.MemberInfo ResolveMember (int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>metadataToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A metadata token that identifies a type or member in the module.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>genericTypeArguments</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects representing the generic type arguments of the type where the token is in scope, or <code>null</code> if that type is not generic.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>genericMethodArguments</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects representing the generic type arguments of the method where the token is in scope, or <code>null</code> if that method is not generic.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> object representing the type or member that is identified by the specified metadata token.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>metadataToken</code> is not a token for a type or member in the scope of the current module.  </p>\n<p> -or-  </p>\n<p> <code>metadataToken</code> is a <code>MethodSpec</code> or <code>TypeSpec</code> whose signature contains element type <code>var</code> (a type parameter of a generic type) or <code>mvar</code> (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of <code>genericTypeArguments</code> and <code>genericMethodArguments</code>.  </p>\n<p> -or-  </p>\n<p> <code>metadataToken</code> identifies a property or event.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>metadataToken</code> is not a valid token in the scope of the current module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.type#System_Type_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method on the type where <code>metadataToken</code> is in scope to obtain an array of generic type arguments for <code>genericTypeArguments</code>. Use the <a class=\"xref\" href=\"system.reflection.methodinfo#System_Reflection_MethodInfo_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method on the method where <code>metadataToken</code> is in scope to obtain an array of generic type arguments for <code>genericTypeArguments</code>. It is always safe to provide these arguments, even when they are not needed.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially &quot;Partition II: Metadata Definition and Semantics&quot;. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the ECMA Web site.  </p>\n</div>\n<p> For code that demonstrates token resolution using the generic context (that is, the generic type parameters of the generic type and/or the generic method in which the token is embedded) see the [ResolveMethod(Int32,â€‚Type[],â€‚Type&lt;xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29&gt; method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_ResolveMethod_System_Int32_\">\r\n    \r\n            <a id=\"System_Reflection_Module_ResolveMethod_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ResolveMethod(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the method or constructor identified by the specified metadata token.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.MethodBase ResolveMethod (int metadataToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>metadataToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A metadata token that identifies a method or constructor in the module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodbase\" data-linktype=\"relative-path\">MethodBase</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodbase\" data-linktype=\"relative-path\">MethodBase</a> object representing the method or constructor that is identified by the specified metadata token.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>metadataToken</code> is not a token for a method or constructor in the scope of the current module.  </p>\n<p> -or-  </p>\n<p> <code>metadataToken</code> is a <code>MethodSpec</code> whose signature contains element type <code>var</code> (a type parameter of a generic type) or <code>mvar</code> (a type parameter of a generic method).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>metadataToken</code> is not a valid token in the scope of the current module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To resolve a metadata token for a <code>MethodSpec</code> whose signature contains element type <code>ELEMENT_TYPE_VAR</code> or <code>ELEMENT_TYPE_MVAR</code>, use the [ResolveMethod(Int32,â€‚Type[],â€‚Type&lt;xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29&gt; method overload, which allows you to supply the necessary context. That is, when you are resolving a metadata token for a method that depends on the generic type parameters of the generic type and/or the generic method in which the token is embedded, you must use the overload that allows you to supply those type parameters.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially &quot;Partition II: Metadata Definition and Semantics&quot;. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the ECMA Web site.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the two overloads of the ResolveMethod method to resolve metadata tokens from call sites in generic and non-generic contexts.  </p>\n<p> The code example defines two generic types, <code>G1&lt;Tg1&gt;</code> and <code>G2&lt;Tg2&gt;</code> (<code>G1(Of Tg1)</code> and <code>G2(Of Tg2)</code> in Visual Basic), each of which has a generic method. <code>G1&lt;Tg1&gt;</code> also has a non-generic method that uses the type parameter <code>Tg1</code> for its parameter. The generic method <code>GM2&lt;Tgm2&gt;</code> in type <code>G2&lt;Tg2&gt;</code> contains several method calls:  </p>\n<ul>\n<li><p>Case 1: The generic method <code>GM1&lt;Tgm1&gt;</code> is called, using the type parameters of <code>G2&lt;Tg2&gt;</code> and <code>GM2&lt;Tgm2&gt;</code> as the type arguments. In other words, the parameter types of the called method will depend on the types that are used to construct a closed generic type from the type definition for <code>G2&lt;Tg2&gt;</code>.  </p>\n</li>\n<li><p>Case 2: The non-generic method <code>M1</code> is called. The parameter of this method uses the type parameter of the defining type, <code>G1&lt;Tg1&gt;</code>, which is replaced in this case by the type parameter of the enclosing type, <code>G2&lt;Tg2&gt;</code>.  </p>\n</li>\n<li><p>Case 3: The generic method <code>GM1&lt;Tgm1&gt;</code> is called, specifying <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> and <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> for the type arguments of the generic type and the generic method, respectively. This method call does not depend on the type parameters of the enclosing type or method.  </p>\n</li>\n<li><p>Case 4: The non-generic method <code>M1</code> of the <code>Example</code> class is called. This method call does not depend on the type parameters of the enclosing type or method.  </p>\n<p>In addition, the example defines the non-generic <code>Example</code> class. This class has a method <code>M</code> that makes a call to a generic method:  </p>\n</li>\n<li><p>Case 5: The generic method <code>GM1</code> is called, specifying <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> and <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> for the type arguments of the generic type and the generic method, respectively. The context for this method has no enclosing generic type or generic method.  </p>\n<p>For each case, the example first constructs a <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents the called method, and then resolves the token using the [ResolveMethod(Int32,â€‚Type[],â€‚Type&lt;xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29&gt; method overload, using the <a class=\"xref\" href=\"system.type#System_Type_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> and <a class=\"xref\" href=\"system.reflection.methodinfo#System_Reflection_MethodInfo_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> methods to get the values for the <code>genericTypeArguments</code> and <code>genericMethodArguments</code> parameters. This technique works in all cases, because the methods return <a class=\"xref\" href=\"system.type#System_Type_EmptyTypes\" data-linktype=\"relative-path\">System.Type.EmptyTypes</a> for non-generic contexts. The example compares the resolved <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> with the constructed <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a>.  </p>\n<p>The example then attempts to use the ResolveMethod method overload to resolve the token. This works in cases 3, 4, and 5, because the method calls do not depend on the generic context. In cases 1 and 2, an exception is thrown because there is insufficient information to resolve the token.  </p>\n<p>The metadata token values are hard-coded as an enumeration. If you change this code example, the token values are likely to change. To determine the new token values, compile the code and use Ildasm.exe with the <strong>/TOKENS</strong> option to examine the assembly. The tokens can be found at the points of call. Insert the new values into the enumeration, and recompile the example.  </p>\n<pre><code class=\"lang-cs\" name=\"Module.MethodResolve#1\">using System;\nusing System.Reflection;\n\nnamespace ResolveMethodExample\n{\n    // Metadata tokens for the MethodRefs that are to be resolved.\n    // If you change this program, some or all of these metadata tokens might\n    // change. The new token values can be discovered by compiling the example\n    // and examining the assembly with Ildasm.exe, using the /TOKENS option. \n    // Recompile the program after correcting the token values. \n    enum Tokens\n    {\n        Case1 = 0x2b000001,\n        Case2 = 0x0A000006,\n        Case3 = 0x2b000002,\n        Case4 = 0x06000006,\n        Case5 = 0x2b000002        \n    }\n\n    class G1&lt;Tg1&gt;\n    {\n        public void GM1&lt;Tgm1&gt; (Tg1 param1, Tgm1 param2) {}\n        public void M1(Tg1 param) {}\n    }\n\n    class G2&lt;Tg2&gt;\n    {\n        public void GM2&lt;Tgm2&gt; (Tg2 param1, Tgm2 param2)\n        {\n            // Case 1: A generic method call that depends on its generic \n            // context, because it uses the type parameters of the enclosing\n            // generic type G2 and the enclosing generic method GM2. The token \n            // for the MethodSpec is Tokens.Case1.\n            G1&lt;Tg2&gt; g = new G1&lt;Tg2&gt;();\n            g.GM1&lt;Tgm2&gt;(param1, param2);\n\n            // Case 2: A non-generic method call that depends on its generic \n            // context, because it uses the type parameter of the enclosing\n            // generic type G2. The token for the MemberRef is Tokens.Case2.\n            g.M1(param1);\n\n            // Case 3: A generic method call that does not depend on its generic \n            // context, because it does not use type parameters of the enclosing\n            // generic type or method. The token for the MethodSpec is Tokens.Case3.\n            G1&lt;int&gt; gi = new G1&lt;int&gt;();\n            gi.GM1&lt;object&gt;(42, new Object());\n\n            // Case 4: A non-generic method call that does not depend on its \n            // generic context, because it does not use the type parameters of the\n            // enclosing generic type or method. The token for the MethodDef is \n            // Tokens.Case4.\n            Example e = new Example();\n            e.M();\n        } \n    }\n\n    class Example\n    {\n        public void M()\n        {\n            G1&lt;int&gt; g = new G1&lt;int&gt;();\n            // Case 5: A generic method call that does not have any generic \n            // context. The token for the MethodSpec is Tokens.Case5.\n            g.GM1&lt;object&gt;(42, new Object());\n        }\n\n        static void Main ()\n        {      \n            Module mod = typeof(Example).Assembly.ManifestModule;\n            MethodInfo miResolved2 = null;\n\n            // Case 1: A generic method call that is dependent on its generic context.\n            //\n            // Create and display a MethodInfo representing the MethodSpec of the \n            // generic method g.GM1&lt;Tgm2&gt;() that is called in G2&lt;Tg2&gt;.GM2&lt;Tgm2&gt;().\n            Type t = typeof(G1&lt;&gt;).MakeGenericType(typeof(G2&lt;&gt;).GetGenericArguments());\n            MethodInfo mi = typeof(G2&lt;&gt;).GetMethod(&quot;GM2&quot;);\n            MethodInfo miTest = t.GetMethod(&quot;GM1&quot;).MakeGenericMethod(mi.GetGenericArguments());\n            Console.WriteLine(&quot;<br>Case 1:<br>{0}&quot;, miTest);\n\n            // Resolve the MethodSpec token for method G1&lt;Tg2&gt;.GM1&lt;Tgm2&gt;(), which \n            // is called in method G2&lt;Tg2&gt;.GM2&lt;Tgm2&gt;(). The GetGenericArguments method \n            // must be used to obtain the context for resolving the method.\n            MethodInfo miResolved = (MethodInfo) mod.ResolveMethod(\n                (int)Tokens.Case1, \n                typeof(G2&lt;&gt;).GetGenericArguments(), \n                typeof(G2&lt;&gt;).GetMethod(&quot;GM2&quot;).GetGenericArguments());\n            Console.WriteLine(miResolved);\n            Console.WriteLine(&quot;Is the resolved method the same? {0}&quot;, miResolved == miTest);\n\n            // The overload that doesn&#39;t specify generic context throws an exception\n            // because there is insufficient context to resolve the token.\n            try \n            { \n                miResolved2 = (MethodInfo) mod.ResolveMethod((int)Tokens.Case1);\n            } \n            catch (Exception ex) \n            { \n                Console.WriteLine(&quot;{0}: {1}&quot;, ex.GetType(), ex.Message); \n            }\n\n\n            // Case 2: A non-generic method call that is dependent on its generic context.\n            //\n            // Create and display a MethodInfo representing the MemberRef of the \n            // non-generic method g.M1() that is called in G2&lt;Tg2&gt;.GM2&lt;Tgm2&gt;().\n            t = typeof(G1&lt;&gt;).MakeGenericType(typeof(G2&lt;&gt;).GetGenericArguments());\n            miTest = t.GetMethod(&quot;M1&quot;);\n            Console.WriteLine(&quot;<br>Case 2:<br>{0}&quot;, miTest);\n\n            // Resolve the MemberRef token for method G1&lt;Tg2&gt;.M1(), which is\n            // called in method G2&lt;Tg2&gt;.GM2&lt;Tgm2&gt;(). The GetGenericArguments method \n            // must be used to obtain the context for resolving the method, because\n            // the method parameter comes from the generic type G1, and the type\n            // argument, Tg2, comes from the generic type that encloses the call.\n            // There is no enclosing generic method, so the value Type.EmptyTypes\n            // could be passed for the genericMethodArguments parameter.\n            miResolved = (MethodInfo) mod.ResolveMethod(\n                (int)Tokens.Case2, \n                typeof(G2&lt;&gt;).GetGenericArguments(), \n                typeof(G2&lt;&gt;).GetMethod(&quot;GM2&quot;).GetGenericArguments());\n            Console.WriteLine(miResolved);\n            Console.WriteLine(&quot;Is the resolved method the same? {0}&quot;, miResolved == miTest);\n\n            // The overload that doesn&#39;t specify generic context throws an exception\n            // because there is insufficient context to resolve the token.\n            try \n            { \n                miResolved2 = (MethodInfo) mod.ResolveMethod((int)Tokens.Case2);\n            } \n            catch (Exception ex) \n            { \n                Console.WriteLine(&quot;{0}: {1}&quot;, ex.GetType(), ex.Message); \n            }\n\n\n            // Case 3: A generic method call that is independent of its generic context.\n            //\n            // Create and display a MethodInfo representing the MethodSpec of the \n            // generic method gi.GM1&lt;object&gt;() that is called in G2&lt;Tg2&gt;.GM2&lt;Tgm2&gt;().\n            mi = typeof(G1&lt;int&gt;).GetMethod(&quot;GM1&quot;);\n            miTest = mi.MakeGenericMethod(new Type[] { typeof(object) });\n            Console.WriteLine(&quot;<br>Case 3:<br>{0}&quot;, miTest);\n\n            // Resolve the token for method G1&lt;int&gt;.GM1&lt;object&gt;(), which is called\n            // in G2&lt;Tg2&gt;.GM2&lt;Tgm2&gt;(). The GetGenericArguments method is used to \n            // obtain the context for resolving the method, but the method call in\n            // this case does not use type parameters of the enclosing type or\n            // method, so Type.EmptyTypes could be used for both arguments.\n            miResolved = (MethodInfo) mod.ResolveMethod(\n                (int)Tokens.Case3, \n                typeof(G2&lt;&gt;).GetGenericArguments(), \n                typeof(G2&lt;&gt;).GetMethod(&quot;GM2&quot;).GetGenericArguments());\n            Console.WriteLine(miResolved);\n            Console.WriteLine(&quot;Is the resolved method the same? {0}&quot;, miResolved == miTest);\n\n            // The method call in this case does not depend on the enclosing generic\n            // context, so the token can also be resolved by the simpler overload.\n            miResolved2 = (MethodInfo) mod.ResolveMethod((int)Tokens.Case3);\n\n\n            // Case 4: A non-generic method call that is independent of its generic context.\n            //\n            // Create and display a MethodInfo representing the MethodDef of the \n            // method e.M() that is called in G2&lt;Tg2&gt;.GM2&lt;Tgm2&gt;().\n            miTest = typeof(Example).GetMethod(&quot;M&quot;);\n            Console.WriteLine(&quot;<br>Case 4:<br>{0}&quot;, miTest);\n\n            // Resolve the token for method Example.M(), which is called in\n            // G2&lt;Tg2&gt;.GM2&lt;Tgm2&gt;(). The GetGenericArguments method is used to \n            // obtain the context for resolving the method, but the non-generic \n            // method call does not use type parameters of the enclosing type or\n            // method, so Type.EmptyTypes could be used for both arguments.\n            miResolved = (MethodInfo) mod.ResolveMethod(\n                (int)Tokens.Case4, \n                typeof(G2&lt;&gt;).GetGenericArguments(), \n                typeof(G2&lt;&gt;).GetMethod(&quot;GM2&quot;).GetGenericArguments());\n            Console.WriteLine(miResolved);\n            Console.WriteLine(&quot;Is the resolved method the same? {0}&quot;, miResolved == miTest);\n\n            // The method call in this case does not depend on any enclosing generic\n            // context, so the token can also be resolved by the simpler overload.\n            miResolved2 = (MethodInfo) mod.ResolveMethod((int)Tokens.Case4);\n\n\n            // Case 5: Generic method call in a non-generic context.\n            //\n            // Create and display a MethodInfo representing the MethodRef of the \n            // closed generic method g.GM1&lt;object&gt;() that is called in Example.M().\n            mi = typeof(G1&lt;int&gt;).GetMethod(&quot;GM1&quot;);\n            miTest = mi.MakeGenericMethod(new Type[] { typeof(object) });\n            Console.WriteLine(&quot;<br>Case 5:<br>{0}&quot;, miTest);\n\n            // Resolve the token for method G1&lt;int&gt;.GM1&lt;object&gt;(), which is called\n            // in method Example.M(). The GetGenericArguments method is used to \n            // obtain the context for resolving the method, but the enclosing type\n            // and method are not generic, so Type.EmptyTypes could be used for\n            // both arguments.\n            miResolved = (MethodInfo) mod.ResolveMethod(\n                (int)Tokens.Case5, \n                typeof(Example).GetGenericArguments(),\n                typeof(Example).GetMethod(&quot;M&quot;).GetGenericArguments());\n            Console.WriteLine(miResolved);\n            Console.WriteLine(&quot;Is the resolved method the same? {0}&quot;, miResolved == miTest);\n\n            // The method call in this case does not depend on any enclosing generic\n            // context, so the token can also be resolved by the simpler overload.\n            miResolved2 = (MethodInfo) mod.ResolveMethod((int)Tokens.Case5);\n        }\n    }\n}\n/* This example produces the following output:\n\nCase 1:\nVoid GM1[Tgm2](Tg2, Tgm2)\nVoid GM1[Tgm2](Tg2, Tgm2)\nIs the resolved method the same? True\nSystem.ArgumentException: A BadImageFormatException has been thrown while parsing the signature. This is likely due to lack of a generic context. Ensure genericTypeArguments and genericMethodArguments are provided and contain enough context.\n\nCase 2:\nVoid M1(Tg2)\nVoid M1(Tg2)\nIs the resolved method the same? True\nSystem.ArgumentException: A BadImageFormatException has been thrown while parsing the signature. This is likely due to lack of a generic context. Ensure genericTypeArguments and genericMethodArguments are provided and contain enough context.\n\nCase 3:\nVoid GM1[Object](Int32, System.Object)\nVoid GM1[Object](Int32, System.Object)\nIs the resolved method the same? True\n\nCase 4:\nVoid M()\nVoid M()\nIs the resolved method the same? True\n\nCase 5:\nVoid GM1[Object](Int32, System.Object)\nVoid GM1[Object](Int32, System.Object)\nIs the resolved method the same? True\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Module.MethodResolve#1\">Imports System.Reflection\n\nNamespace ResolveMethodExample\n\n    &#39; Metadata tokens for the MethodRefs that are to be resolved.\n    &#39; If you change this program, some or all of these metadata tokens might\n    &#39; change. The new token values can be discovered by compiling the example\n    &#39; and examining the assembly with Ildasm.exe, using the /TOKENS option. \n    &#39; Recompile the program after correcting the token values. \n    Enum Tokens\n        Case1 = &amp;H2B000003\n        Case2 = &amp;HA00001F\n        Case3 = &amp;H2B000004\n        Case4 = &amp;H6000017\n        Case5 = &amp;H2B000004\n    End Enum \n\n\n    Class G1(Of Tg1)\n\n        Public Sub GM1(Of Tgm1) (ByVal param1 As Tg1, ByVal param2 As Tgm1)\n        End Sub\n\n        Public Sub M1(ByVal param As Tg1)\n        End Sub\n    End Class\n\n    Class G2(Of Tg2)\n    \n        Public Sub GM2(Of Tgm2) (ByVal param1 As Tg2, ByVal param2 As Tgm2)\n        \n            &#39; Case 1: A generic method call that depends on its generic \n            &#39; context, because it uses the type parameters of the enclosing\n            &#39; generic type G2 and the enclosing generic method GM2. The token \n            &#39; for the MethodSpec is Tokens.Case1.\n            Dim g As New G1(Of Tg2)()\n            g.GM1(Of Tgm2)(param1, param2)\n\n            &#39; Case 2: A non-generic method call that depends on its generic \n            &#39; context, because it uses the type parameter of the enclosing\n            &#39; generic type G2. The token for the MemberRef is Tokens.Case2.\n            g.M1(param1)\n\n            &#39; Case 3: A generic method call that does not depend on its generic \n            &#39; context, because it does not use type parameters of the enclosing\n            &#39; generic type or method. The token for the MethodSpec is Tokens.Case3.\n            Dim gi As New G1(Of Integer)()\n            gi.GM1(Of Object)(42, New Object())\n\n            &#39; Case 4: A non-generic method call that does not depend on its \n            &#39; generic context, because it does not use the type parameters of the\n            &#39; enclosing generic type or method. The token for the MethodDef is \n            &#39; Tokens.Case4.\n            Dim e As New Example()\n            e.M()\n        End Sub \n    End Class\n\n    Class Example\n        Public Sub M() \n            Dim g As New G1(Of Integer)()\n            &#39; Case 5: A generic method call that does not have any generic \n            &#39; context. The token for the MethodSpec is Tokens.Case5.\n            g.GM1(Of Object)(42, New Object())\n        End Sub \n    \n        Shared Sub Main() \n            Dim m As [Module] = GetType(Example).Assembly.ManifestModule\n            Dim miResolved2 As MethodInfo = Nothing\n        \n            &#39; Case 1: A generic method call that is dependent on its generic context.\n            &#39;\n            &#39; Create and display a MethodInfo representing the MethodSpec of the \n            &#39; generic method g.GM1(Of Tgm2)() that is called in G2(Of Tg2).GM2(Of Tgm2)().\n            Dim t As Type = GetType(G1(Of )).MakeGenericType(GetType(G2(Of )).GetGenericArguments())\n            Dim mi As MethodInfo = GetType(G2(Of )).GetMethod(&quot;GM2&quot;)\n            Dim miTest As MethodInfo = t.GetMethod(&quot;GM1&quot;).MakeGenericMethod(mi.GetGenericArguments())\n            Console.WriteLine(vbCrLf &amp; &quot;Case 1:&quot; &amp; vbCrLf &amp; miTest.ToString())\n        \n            &#39; Resolve the MethodSpec token for method G1(Of Tg2).GM1(Of Tgm2)(), which \n            &#39; is called in method G2(Of Tg2).GM2(Of Tgm2)(). The GetGenericArguments \n            &#39; method must be used to obtain the context for resolving the method.\n            Dim miResolved As MethodInfo = CType(m.ResolveMethod( _\n                    CInt(Tokens.Case1), _\n                    GetType(G2(Of )).GetGenericArguments(), _\n                    GetType(G2(Of )).GetMethod(&quot;GM2&quot;).GetGenericArguments()), _\n                MethodInfo)\n            Console.WriteLine(miResolved)\n            Console.WriteLine(&quot;Is the resolved method the same? {0}&quot;, miResolved Is miTest)\n        \n            &#39; The overload that doesn&#39;t specify generic context throws an exception\n            &#39; because there is insufficient context to resolve the token.\n            Try\n                miResolved2 = CType(m.ResolveMethod(CInt(Tokens.Case1)), MethodInfo)\n            Catch ex As Exception\n                Console.WriteLine(&quot;{0}: {1}&quot;, ex.GetType(), ex.Message)\n            End Try\n        \n        \n            &#39; Case 2: A non-generic method call that is dependent on its generic context.\n            &#39;\n            &#39; Create and display a MethodInfo representing the MemberRef of the \n            &#39; non-generic method g.M1() that is called in G2(Of Tg2).GM2(Of Tgm2)().\n            t = GetType(G1(Of )).MakeGenericType(GetType(G2(Of )).GetGenericArguments())\n            miTest = t.GetMethod(&quot;M1&quot;)\n            Console.WriteLine(vbCrLf &amp; &quot;Case 2:&quot; &amp; vbCrLf &amp; miTest.ToString())\n        \n            &#39; Resolve the MemberRef token for method G1(Of Tg2).M1(), which is\n            &#39; called in method G2(Of Tg2).GM2(Of Tgm2)(). The GetGenericArguments \n            &#39; method must be used to obtain the context for resolving the method, \n            &#39; because the method parameter comes from the generic type G1, and the \n            &#39; because argument, Tg2, comes from the generic type that encloses the \n            &#39; call. There is no enclosing generic method, so Type.EmptyTypes could\n            &#39; be passed for the genericMethodArguments parameter.\n            miResolved = CType(m.ResolveMethod( _\n                    CInt(Tokens.Case2), _\n                    GetType(G2(Of )).GetGenericArguments(), _\n                    GetType(G2(Of )).GetMethod(&quot;GM2&quot;).GetGenericArguments()), _\n                MethodInfo)\n            Console.WriteLine(miResolved)\n            Console.WriteLine(&quot;Is the resolved method the same? {0}&quot;, miResolved Is miTest)\n        \n            &#39; The overload that doesn&#39;t specify generic context throws an exception\n            &#39; because there is insufficient context to resolve the token.\n            Try\n                miResolved2 = CType(m.ResolveMethod(CInt(Tokens.Case2)), MethodInfo)\n            Catch ex As Exception\n                Console.WriteLine(&quot;{0}: {1}&quot;, ex.GetType(), ex.Message)\n            End Try\n        \n        \n            &#39; Case 3: A generic method call that is independent of its generic context.\n            &#39;\n            &#39; Create and display a MethodInfo representing the MethodSpec of the \n            &#39; generic method gi.GM1(Of Object)() that is called in G2(Of Tg2).GM2(Of Tgm2)().\n            mi = GetType(G1(Of Integer)).GetMethod(&quot;GM1&quot;)\n            miTest = mi.MakeGenericMethod(New Type() {GetType(Object)})\n            Console.WriteLine(vbCrLf &amp; &quot;Case 3:&quot; &amp; vbCrLf &amp; miTest.ToString())\n        \n            &#39; Resolve the token for method G1(Of Integer).GM1(Of Object)(), which is \n            &#39; calledin G2(Of Tg2).GM2(Of Tgm2)(). The GetGenericArguments method is  \n            &#39; used to obtain the context for resolving the method, but the method call\n            &#39; in this case does not use type parameters of the enclosing type or\n            &#39; method, so Type.EmptyTypes could be used for both arguments.\n            miResolved = CType(m.ResolveMethod( _\n                    CInt(Tokens.Case3), _\n                    GetType(G2(Of )).GetGenericArguments(), _\n                    GetType(G2(Of )).GetMethod(&quot;GM2&quot;).GetGenericArguments()), _\n                MethodInfo)\n            Console.WriteLine(miResolved)\n            Console.WriteLine(&quot;Is the resolved method the same? {0}&quot;, miResolved Is miTest)\n        \n            &#39; The method call in this case does not depend on the enclosing generic\n            &#39; context, so the token can also be resolved by the simpler overload.\n            miResolved2 = CType(m.ResolveMethod(CInt(Tokens.Case3)), MethodInfo)\n        \n        \n            &#39; Case 4: A non-generic method call that is independent of its generic context.\n            &#39;\n            &#39; Create and display a MethodInfo representing the MethodDef of the \n            &#39; method e.M() that is called in G2(Of Tg2).GM2(Of Tgm2)().\n            miTest = GetType(Example).GetMethod(&quot;M&quot;)\n            Console.WriteLine(vbCrLf &amp; &quot;Case 4:&quot; &amp; vbCrLf &amp; miTest.ToString())\n        \n            &#39; Resolve the token for method Example.M(), which is called in\n            &#39; G2(Of Tg2).GM2(Of Tgm2)(). The GetGenericArguments method is used to \n            &#39; obtain the context for resolving the method, but the non-generic \n            &#39; method call does not use type parameters of the enclosing type or\n            &#39; method, so Type.EmptyTypes could be used for both arguments.\n            miResolved = CType(m.ResolveMethod( _\n                    CInt(Tokens.Case4), _\n                    GetType(G2(Of )).GetGenericArguments(), _\n                    GetType(G2(Of )).GetMethod(&quot;GM2&quot;).GetGenericArguments()), _\n                MethodInfo)\n            Console.WriteLine(miResolved)\n            Console.WriteLine(&quot;Is the resolved method the same? {0}&quot;, miResolved Is miTest)\n        \n            &#39; The method call in this case does not depend on any enclosing generic\n            &#39; context, so the token can also be resolved by the simpler overload.\n            miResolved2 = CType(m.ResolveMethod(CInt(Tokens.Case4)), MethodInfo)\n        \n        \n            &#39; Case 5: Generic method call in a non-generic context.\n            &#39;\n            &#39; Create and display a MethodInfo representing the MethodRef of the \n            &#39; closed generic method g.GM1(Of Object)() that is called in Example.M().\n            mi = GetType(G1(Of Integer)).GetMethod(&quot;GM1&quot;)\n            miTest = mi.MakeGenericMethod(New Type() {GetType(Object)})\n            Console.WriteLine(vbCrLf &amp; &quot;Case 5:&quot; &amp; vbCrLf &amp; miTest.ToString())\n        \n            &#39; Resolve the token for method G1(Of Integer).GM1(Of Object)(), which is \n            &#39; called in method Example.M(). The GetGenericArguments method is used to \n            &#39; obtain the context for resolving the method, but the enclosing type\n            &#39; and method are not generic, so Type.EmptyTypes could be used for\n            &#39; both arguments.\n            miResolved = CType(m.ResolveMethod( _\n                    CInt(Tokens.Case5), _\n                    GetType(Example).GetGenericArguments(), _\n                    GetType(Example).GetMethod(&quot;M&quot;).GetGenericArguments()), _\n                MethodInfo)\n            Console.WriteLine(miResolved)\n            Console.WriteLine(&quot;Is the resolved method the same? {0}&quot;, miResolved Is miTest)\n        \n            &#39; The method call in this case does not depend on any enclosing generic\n            &#39; context, so the token can also be resolved by the simpler overload.\n            miResolved2 = CType(m.ResolveMethod(CInt(Tokens.Case5)), MethodInfo)\n    \n        End Sub \n    End Class \nEnd Namespace\n\n&#39; This example produces the following output:\n&#39;\n&#39;Case 1:\n&#39;Void GM1[Tgm2](Tg2, Tgm2)\n&#39;Void GM1[Tgm2](Tg2, Tgm2)\n&#39;Is the resolved method the same? True\n&#39;System.ArgumentException: A BadImageFormatException has been thrown while parsing the signature. This is likely due to lack of a generic context. Ensure genericTypeArguments and genericMethodArguments are provided and contain enough context.\n&#39;\n&#39;Case 2:\n&#39;Void M1(Tg2)\n&#39;Void M1(Tg2)\n&#39;Is the resolved method the same? True\n&#39;System.ArgumentException: A BadImageFormatException has been thrown while parsing the signature. This is likely due to lack of a generic context. Ensure genericTypeArguments and genericMethodArguments are provided and contain enough context.\n&#39;\n&#39;Case 3:\n&#39;Void GM1[Object](Int32, System.Object)\n&#39;Void GM1[Object](Int32, System.Object)\n&#39;Is the resolved method the same? True\n&#39;\n&#39;Case 4:\n&#39;Void M()\n&#39;Void M()\n&#39;Is the resolved method the same? True\n&#39;\n&#39;Case 5:\n&#39;Void GM1[Object](Int32, System.Object)\n&#39;Void GM1[Object](Int32, System.Object)\n&#39;Is the resolved method the same? True\n&#39; \n</code></pre></li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_ResolveMethod_System_Int32_System_Type___System_Type___\">\r\n    \r\n            <a id=\"System_Reflection_Module_ResolveMethod_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ResolveMethod(Int32,Type[],Type[])</div>        \r\n          </div>\r\n    \r\n            <p>Returns the method or constructor identified by the specified metadata token, in the context defined by the specified generic type parameters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Reflection.MethodBase ResolveMethod (int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>metadataToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A metadata token that identifies a method or constructor in the module.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>genericTypeArguments</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects representing the generic type arguments of the type where the token is in scope, or <code>null</code> if that type is not generic.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>genericMethodArguments</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects representing the generic type arguments of the method where the token is in scope, or <code>null</code> if that method is not generic.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodbase\" data-linktype=\"relative-path\">MethodBase</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodbase\" data-linktype=\"relative-path\">MethodBase</a> object representing the method that is identified by the specified metadata token.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>metadataToken</code> is not a token for a method or constructor in the scope of the current module.  </p>\n<p> -or-  </p>\n<p> <code>metadataToken</code> is a <code>MethodSpec</code> whose signature contains element type <code>var</code> (a type parameter of a generic type) or <code>mvar</code> (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of <code>genericTypeArguments</code> and <code>genericMethodArguments</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>metadataToken</code> is not a valid token in the scope of the current module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.type#System_Type_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method on the type where <code>metadataToken</code> is in scope to obtain an array of generic type arguments for <code>genericTypeArguments</code>. Use the <a class=\"xref\" href=\"system.reflection.methodinfo#System_Reflection_MethodInfo_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method on the method where <code>metadataToken</code> is in scope to obtain an array of generic type arguments for <code>genericMethodArguments</code>. It is always safe to provide these arguments, even when they are not needed.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially &quot;Partition II: Metadata Definition and Semantics&quot;. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the ECMA Web site.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the two overloads of the <a class=\"xref\" href=\"system.reflection.module#System_Reflection_Module_ResolveMethod_\" data-linktype=\"relative-path\">ResolveMethod</a> method to resolve metadata tokens from call sites in generic and non-generic contexts.  </p>\n<p> The code example defines two generic types, <code>G1&lt;Tg1&gt;</code> and <code>G2&lt;Tg2&gt;</code>, each of which has a generic method. <code>G1&lt;Tg1&gt;</code> also has a non-generic method that uses the type parameter <code>Tg1</code> for its parameter. The generic method <code>GM2&lt;Tgm2&gt;</code> in type <code>G2&lt;Tg2&gt;</code> contains several method calls:  </p>\n<ul>\n<li><p>Case 1: The generic method <code>GM1&lt;Tgm1&gt;</code> is called, using the type parameters of <code>G2&lt;Tg2&gt;</code> and <code>GM2&lt;Tgm2&gt;</code> as the type arguments. In other words, the parameter types of the called method will depend on the types that are used to construct a closed generic type from the type definition for <code>G2&lt;Tg2&gt;</code>.  </p>\n</li>\n<li><p>Case 2: The non-generic method <code>M1</code> is called. The parameter of this method uses the type parameter of the defining type, <code>G1&lt;Tg1&gt;</code>, which is replaced in this case by the type parameter of the enclosing type, <code>G2&lt;Tg2&gt;</code>.  </p>\n</li>\n<li><p>Case 3: The generic method <code>GM1&lt;Tgm1&gt;</code> is called, specifying <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> and <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> for the type arguments of the generic type and the generic method, respectively. This method call does not depend on the type parameters of the enclosing type or method.  </p>\n</li>\n<li><p>Case 4: The non-generic method <code>M1</code> of the <code>Example</code> class is called. This method call does not depend on the type parameters of the enclosing type or method.  </p>\n<p>In addition, the example defines the non-generic <code>Example</code> class. This class has a method <code>M</code> that makes a call to a generic method.  </p>\n</li>\n<li><p>Case 5: The generic method <code>GM1&lt;Tgm1&gt;</code> is called, specifying <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> and <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> for the type arguments of the generic type and the generic method, respectively. The context for this method has no enclosing generic type or generic method.  </p>\n<p>For each case, the example first constructs a <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents the called method, and then resolves the token using the ResolveMethod method overload, using the <a class=\"xref\" href=\"system.type#System_Type_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> and <a class=\"xref\" href=\"system.reflection.methodinfo#System_Reflection_MethodInfo_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> methods to get the values for the <code>genericTypeArguments</code> and <code>genericMethodArguments</code> parameters. This technique works in all cases, because the methods return <a class=\"xref\" href=\"system.type#System_Type_EmptyTypes\" data-linktype=\"relative-path\">System.Type.EmptyTypes</a> for non-generic contexts. The example compares the resolved <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> with the constructed <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a>.  </p>\n<p>The example then attempts to use the <a class=\"xref\" href=\"system.reflection.module#System_Reflection_Module_ResolveMethod_System_Int32_\" data-linktype=\"relative-path\">ResolveMethod(Int32)</a> method overload to resolve the token. This works in cases 3, 4, and 5, because the method calls do not depend on the generic context. In cases 1 and 2, an exception is thrown because there is insufficient information to resolve the token.  </p>\n<p>The metadata token values are hard-coded as an enumeration. If you change this code example, the token values are likely to change. To determine the new token values, compile the code and use Ildasm.exe with the <strong>/TOKENS</strong> option to examine the assembly. The tokens can be found at the points of call. Insert the new values into the enumeration, and recompile the example.  </p>\n<pre><code class=\"lang-cs\" name=\"Module.MethodResolve#1\">using System;\nusing System.Reflection;\n\nnamespace ResolveMethodExample\n{\n    // Metadata tokens for the MethodRefs that are to be resolved.\n    // If you change this program, some or all of these metadata tokens might\n    // change. The new token values can be discovered by compiling the example\n    // and examining the assembly with Ildasm.exe, using the /TOKENS option. \n    // Recompile the program after correcting the token values. \n    enum Tokens\n    {\n        Case1 = 0x2b000001,\n        Case2 = 0x0A000006,\n        Case3 = 0x2b000002,\n        Case4 = 0x06000006,\n        Case5 = 0x2b000002        \n    }\n\n    class G1&lt;Tg1&gt;\n    {\n        public void GM1&lt;Tgm1&gt; (Tg1 param1, Tgm1 param2) {}\n        public void M1(Tg1 param) {}\n    }\n\n    class G2&lt;Tg2&gt;\n    {\n        public void GM2&lt;Tgm2&gt; (Tg2 param1, Tgm2 param2)\n        {\n            // Case 1: A generic method call that depends on its generic \n            // context, because it uses the type parameters of the enclosing\n            // generic type G2 and the enclosing generic method GM2. The token \n            // for the MethodSpec is Tokens.Case1.\n            G1&lt;Tg2&gt; g = new G1&lt;Tg2&gt;();\n            g.GM1&lt;Tgm2&gt;(param1, param2);\n\n            // Case 2: A non-generic method call that depends on its generic \n            // context, because it uses the type parameter of the enclosing\n            // generic type G2. The token for the MemberRef is Tokens.Case2.\n            g.M1(param1);\n\n            // Case 3: A generic method call that does not depend on its generic \n            // context, because it does not use type parameters of the enclosing\n            // generic type or method. The token for the MethodSpec is Tokens.Case3.\n            G1&lt;int&gt; gi = new G1&lt;int&gt;();\n            gi.GM1&lt;object&gt;(42, new Object());\n\n            // Case 4: A non-generic method call that does not depend on its \n            // generic context, because it does not use the type parameters of the\n            // enclosing generic type or method. The token for the MethodDef is \n            // Tokens.Case4.\n            Example e = new Example();\n            e.M();\n        } \n    }\n\n    class Example\n    {\n        public void M()\n        {\n            G1&lt;int&gt; g = new G1&lt;int&gt;();\n            // Case 5: A generic method call that does not have any generic \n            // context. The token for the MethodSpec is Tokens.Case5.\n            g.GM1&lt;object&gt;(42, new Object());\n        }\n\n        static void Main ()\n        {      \n            Module mod = typeof(Example).Assembly.ManifestModule;\n            MethodInfo miResolved2 = null;\n\n            // Case 1: A generic method call that is dependent on its generic context.\n            //\n            // Create and display a MethodInfo representing the MethodSpec of the \n            // generic method g.GM1&lt;Tgm2&gt;() that is called in G2&lt;Tg2&gt;.GM2&lt;Tgm2&gt;().\n            Type t = typeof(G1&lt;&gt;).MakeGenericType(typeof(G2&lt;&gt;).GetGenericArguments());\n            MethodInfo mi = typeof(G2&lt;&gt;).GetMethod(&quot;GM2&quot;);\n            MethodInfo miTest = t.GetMethod(&quot;GM1&quot;).MakeGenericMethod(mi.GetGenericArguments());\n            Console.WriteLine(&quot;<br>Case 1:<br>{0}&quot;, miTest);\n\n            // Resolve the MethodSpec token for method G1&lt;Tg2&gt;.GM1&lt;Tgm2&gt;(), which \n            // is called in method G2&lt;Tg2&gt;.GM2&lt;Tgm2&gt;(). The GetGenericArguments method \n            // must be used to obtain the context for resolving the method.\n            MethodInfo miResolved = (MethodInfo) mod.ResolveMethod(\n                (int)Tokens.Case1, \n                typeof(G2&lt;&gt;).GetGenericArguments(), \n                typeof(G2&lt;&gt;).GetMethod(&quot;GM2&quot;).GetGenericArguments());\n            Console.WriteLine(miResolved);\n            Console.WriteLine(&quot;Is the resolved method the same? {0}&quot;, miResolved == miTest);\n\n            // The overload that doesn&#39;t specify generic context throws an exception\n            // because there is insufficient context to resolve the token.\n            try \n            { \n                miResolved2 = (MethodInfo) mod.ResolveMethod((int)Tokens.Case1);\n            } \n            catch (Exception ex) \n            { \n                Console.WriteLine(&quot;{0}: {1}&quot;, ex.GetType(), ex.Message); \n            }\n\n\n            // Case 2: A non-generic method call that is dependent on its generic context.\n            //\n            // Create and display a MethodInfo representing the MemberRef of the \n            // non-generic method g.M1() that is called in G2&lt;Tg2&gt;.GM2&lt;Tgm2&gt;().\n            t = typeof(G1&lt;&gt;).MakeGenericType(typeof(G2&lt;&gt;).GetGenericArguments());\n            miTest = t.GetMethod(&quot;M1&quot;);\n            Console.WriteLine(&quot;<br>Case 2:<br>{0}&quot;, miTest);\n\n            // Resolve the MemberRef token for method G1&lt;Tg2&gt;.M1(), which is\n            // called in method G2&lt;Tg2&gt;.GM2&lt;Tgm2&gt;(). The GetGenericArguments method \n            // must be used to obtain the context for resolving the method, because\n            // the method parameter comes from the generic type G1, and the type\n            // argument, Tg2, comes from the generic type that encloses the call.\n            // There is no enclosing generic method, so the value Type.EmptyTypes\n            // could be passed for the genericMethodArguments parameter.\n            miResolved = (MethodInfo) mod.ResolveMethod(\n                (int)Tokens.Case2, \n                typeof(G2&lt;&gt;).GetGenericArguments(), \n                typeof(G2&lt;&gt;).GetMethod(&quot;GM2&quot;).GetGenericArguments());\n            Console.WriteLine(miResolved);\n            Console.WriteLine(&quot;Is the resolved method the same? {0}&quot;, miResolved == miTest);\n\n            // The overload that doesn&#39;t specify generic context throws an exception\n            // because there is insufficient context to resolve the token.\n            try \n            { \n                miResolved2 = (MethodInfo) mod.ResolveMethod((int)Tokens.Case2);\n            } \n            catch (Exception ex) \n            { \n                Console.WriteLine(&quot;{0}: {1}&quot;, ex.GetType(), ex.Message); \n            }\n\n\n            // Case 3: A generic method call that is independent of its generic context.\n            //\n            // Create and display a MethodInfo representing the MethodSpec of the \n            // generic method gi.GM1&lt;object&gt;() that is called in G2&lt;Tg2&gt;.GM2&lt;Tgm2&gt;().\n            mi = typeof(G1&lt;int&gt;).GetMethod(&quot;GM1&quot;);\n            miTest = mi.MakeGenericMethod(new Type[] { typeof(object) });\n            Console.WriteLine(&quot;<br>Case 3:<br>{0}&quot;, miTest);\n\n            // Resolve the token for method G1&lt;int&gt;.GM1&lt;object&gt;(), which is called\n            // in G2&lt;Tg2&gt;.GM2&lt;Tgm2&gt;(). The GetGenericArguments method is used to \n            // obtain the context for resolving the method, but the method call in\n            // this case does not use type parameters of the enclosing type or\n            // method, so Type.EmptyTypes could be used for both arguments.\n            miResolved = (MethodInfo) mod.ResolveMethod(\n                (int)Tokens.Case3, \n                typeof(G2&lt;&gt;).GetGenericArguments(), \n                typeof(G2&lt;&gt;).GetMethod(&quot;GM2&quot;).GetGenericArguments());\n            Console.WriteLine(miResolved);\n            Console.WriteLine(&quot;Is the resolved method the same? {0}&quot;, miResolved == miTest);\n\n            // The method call in this case does not depend on the enclosing generic\n            // context, so the token can also be resolved by the simpler overload.\n            miResolved2 = (MethodInfo) mod.ResolveMethod((int)Tokens.Case3);\n\n\n            // Case 4: A non-generic method call that is independent of its generic context.\n            //\n            // Create and display a MethodInfo representing the MethodDef of the \n            // method e.M() that is called in G2&lt;Tg2&gt;.GM2&lt;Tgm2&gt;().\n            miTest = typeof(Example).GetMethod(&quot;M&quot;);\n            Console.WriteLine(&quot;<br>Case 4:<br>{0}&quot;, miTest);\n\n            // Resolve the token for method Example.M(), which is called in\n            // G2&lt;Tg2&gt;.GM2&lt;Tgm2&gt;(). The GetGenericArguments method is used to \n            // obtain the context for resolving the method, but the non-generic \n            // method call does not use type parameters of the enclosing type or\n            // method, so Type.EmptyTypes could be used for both arguments.\n            miResolved = (MethodInfo) mod.ResolveMethod(\n                (int)Tokens.Case4, \n                typeof(G2&lt;&gt;).GetGenericArguments(), \n                typeof(G2&lt;&gt;).GetMethod(&quot;GM2&quot;).GetGenericArguments());\n            Console.WriteLine(miResolved);\n            Console.WriteLine(&quot;Is the resolved method the same? {0}&quot;, miResolved == miTest);\n\n            // The method call in this case does not depend on any enclosing generic\n            // context, so the token can also be resolved by the simpler overload.\n            miResolved2 = (MethodInfo) mod.ResolveMethod((int)Tokens.Case4);\n\n\n            // Case 5: Generic method call in a non-generic context.\n            //\n            // Create and display a MethodInfo representing the MethodRef of the \n            // closed generic method g.GM1&lt;object&gt;() that is called in Example.M().\n            mi = typeof(G1&lt;int&gt;).GetMethod(&quot;GM1&quot;);\n            miTest = mi.MakeGenericMethod(new Type[] { typeof(object) });\n            Console.WriteLine(&quot;<br>Case 5:<br>{0}&quot;, miTest);\n\n            // Resolve the token for method G1&lt;int&gt;.GM1&lt;object&gt;(), which is called\n            // in method Example.M(). The GetGenericArguments method is used to \n            // obtain the context for resolving the method, but the enclosing type\n            // and method are not generic, so Type.EmptyTypes could be used for\n            // both arguments.\n            miResolved = (MethodInfo) mod.ResolveMethod(\n                (int)Tokens.Case5, \n                typeof(Example).GetGenericArguments(),\n                typeof(Example).GetMethod(&quot;M&quot;).GetGenericArguments());\n            Console.WriteLine(miResolved);\n            Console.WriteLine(&quot;Is the resolved method the same? {0}&quot;, miResolved == miTest);\n\n            // The method call in this case does not depend on any enclosing generic\n            // context, so the token can also be resolved by the simpler overload.\n            miResolved2 = (MethodInfo) mod.ResolveMethod((int)Tokens.Case5);\n        }\n    }\n}\n/* This example produces the following output:\n\nCase 1:\nVoid GM1[Tgm2](Tg2, Tgm2)\nVoid GM1[Tgm2](Tg2, Tgm2)\nIs the resolved method the same? True\nSystem.ArgumentException: A BadImageFormatException has been thrown while parsing the signature. This is likely due to lack of a generic context. Ensure genericTypeArguments and genericMethodArguments are provided and contain enough context.\n\nCase 2:\nVoid M1(Tg2)\nVoid M1(Tg2)\nIs the resolved method the same? True\nSystem.ArgumentException: A BadImageFormatException has been thrown while parsing the signature. This is likely due to lack of a generic context. Ensure genericTypeArguments and genericMethodArguments are provided and contain enough context.\n\nCase 3:\nVoid GM1[Object](Int32, System.Object)\nVoid GM1[Object](Int32, System.Object)\nIs the resolved method the same? True\n\nCase 4:\nVoid M()\nVoid M()\nIs the resolved method the same? True\n\nCase 5:\nVoid GM1[Object](Int32, System.Object)\nVoid GM1[Object](Int32, System.Object)\nIs the resolved method the same? True\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Module.MethodResolve#1\">Imports System.Reflection\n\nNamespace ResolveMethodExample\n\n    &#39; Metadata tokens for the MethodRefs that are to be resolved.\n    &#39; If you change this program, some or all of these metadata tokens might\n    &#39; change. The new token values can be discovered by compiling the example\n    &#39; and examining the assembly with Ildasm.exe, using the /TOKENS option. \n    &#39; Recompile the program after correcting the token values. \n    Enum Tokens\n        Case1 = &amp;H2B000003\n        Case2 = &amp;HA00001F\n        Case3 = &amp;H2B000004\n        Case4 = &amp;H6000017\n        Case5 = &amp;H2B000004\n    End Enum \n\n\n    Class G1(Of Tg1)\n\n        Public Sub GM1(Of Tgm1) (ByVal param1 As Tg1, ByVal param2 As Tgm1)\n        End Sub\n\n        Public Sub M1(ByVal param As Tg1)\n        End Sub\n    End Class\n\n    Class G2(Of Tg2)\n    \n        Public Sub GM2(Of Tgm2) (ByVal param1 As Tg2, ByVal param2 As Tgm2)\n        \n            &#39; Case 1: A generic method call that depends on its generic \n            &#39; context, because it uses the type parameters of the enclosing\n            &#39; generic type G2 and the enclosing generic method GM2. The token \n            &#39; for the MethodSpec is Tokens.Case1.\n            Dim g As New G1(Of Tg2)()\n            g.GM1(Of Tgm2)(param1, param2)\n\n            &#39; Case 2: A non-generic method call that depends on its generic \n            &#39; context, because it uses the type parameter of the enclosing\n            &#39; generic type G2. The token for the MemberRef is Tokens.Case2.\n            g.M1(param1)\n\n            &#39; Case 3: A generic method call that does not depend on its generic \n            &#39; context, because it does not use type parameters of the enclosing\n            &#39; generic type or method. The token for the MethodSpec is Tokens.Case3.\n            Dim gi As New G1(Of Integer)()\n            gi.GM1(Of Object)(42, New Object())\n\n            &#39; Case 4: A non-generic method call that does not depend on its \n            &#39; generic context, because it does not use the type parameters of the\n            &#39; enclosing generic type or method. The token for the MethodDef is \n            &#39; Tokens.Case4.\n            Dim e As New Example()\n            e.M()\n        End Sub \n    End Class\n\n    Class Example\n        Public Sub M() \n            Dim g As New G1(Of Integer)()\n            &#39; Case 5: A generic method call that does not have any generic \n            &#39; context. The token for the MethodSpec is Tokens.Case5.\n            g.GM1(Of Object)(42, New Object())\n        End Sub \n    \n        Shared Sub Main() \n            Dim m As [Module] = GetType(Example).Assembly.ManifestModule\n            Dim miResolved2 As MethodInfo = Nothing\n        \n            &#39; Case 1: A generic method call that is dependent on its generic context.\n            &#39;\n            &#39; Create and display a MethodInfo representing the MethodSpec of the \n            &#39; generic method g.GM1(Of Tgm2)() that is called in G2(Of Tg2).GM2(Of Tgm2)().\n            Dim t As Type = GetType(G1(Of )).MakeGenericType(GetType(G2(Of )).GetGenericArguments())\n            Dim mi As MethodInfo = GetType(G2(Of )).GetMethod(&quot;GM2&quot;)\n            Dim miTest As MethodInfo = t.GetMethod(&quot;GM1&quot;).MakeGenericMethod(mi.GetGenericArguments())\n            Console.WriteLine(vbCrLf &amp; &quot;Case 1:&quot; &amp; vbCrLf &amp; miTest.ToString())\n        \n            &#39; Resolve the MethodSpec token for method G1(Of Tg2).GM1(Of Tgm2)(), which \n            &#39; is called in method G2(Of Tg2).GM2(Of Tgm2)(). The GetGenericArguments \n            &#39; method must be used to obtain the context for resolving the method.\n            Dim miResolved As MethodInfo = CType(m.ResolveMethod( _\n                    CInt(Tokens.Case1), _\n                    GetType(G2(Of )).GetGenericArguments(), _\n                    GetType(G2(Of )).GetMethod(&quot;GM2&quot;).GetGenericArguments()), _\n                MethodInfo)\n            Console.WriteLine(miResolved)\n            Console.WriteLine(&quot;Is the resolved method the same? {0}&quot;, miResolved Is miTest)\n        \n            &#39; The overload that doesn&#39;t specify generic context throws an exception\n            &#39; because there is insufficient context to resolve the token.\n            Try\n                miResolved2 = CType(m.ResolveMethod(CInt(Tokens.Case1)), MethodInfo)\n            Catch ex As Exception\n                Console.WriteLine(&quot;{0}: {1}&quot;, ex.GetType(), ex.Message)\n            End Try\n        \n        \n            &#39; Case 2: A non-generic method call that is dependent on its generic context.\n            &#39;\n            &#39; Create and display a MethodInfo representing the MemberRef of the \n            &#39; non-generic method g.M1() that is called in G2(Of Tg2).GM2(Of Tgm2)().\n            t = GetType(G1(Of )).MakeGenericType(GetType(G2(Of )).GetGenericArguments())\n            miTest = t.GetMethod(&quot;M1&quot;)\n            Console.WriteLine(vbCrLf &amp; &quot;Case 2:&quot; &amp; vbCrLf &amp; miTest.ToString())\n        \n            &#39; Resolve the MemberRef token for method G1(Of Tg2).M1(), which is\n            &#39; called in method G2(Of Tg2).GM2(Of Tgm2)(). The GetGenericArguments \n            &#39; method must be used to obtain the context for resolving the method, \n            &#39; because the method parameter comes from the generic type G1, and the \n            &#39; because argument, Tg2, comes from the generic type that encloses the \n            &#39; call. There is no enclosing generic method, so Type.EmptyTypes could\n            &#39; be passed for the genericMethodArguments parameter.\n            miResolved = CType(m.ResolveMethod( _\n                    CInt(Tokens.Case2), _\n                    GetType(G2(Of )).GetGenericArguments(), _\n                    GetType(G2(Of )).GetMethod(&quot;GM2&quot;).GetGenericArguments()), _\n                MethodInfo)\n            Console.WriteLine(miResolved)\n            Console.WriteLine(&quot;Is the resolved method the same? {0}&quot;, miResolved Is miTest)\n        \n            &#39; The overload that doesn&#39;t specify generic context throws an exception\n            &#39; because there is insufficient context to resolve the token.\n            Try\n                miResolved2 = CType(m.ResolveMethod(CInt(Tokens.Case2)), MethodInfo)\n            Catch ex As Exception\n                Console.WriteLine(&quot;{0}: {1}&quot;, ex.GetType(), ex.Message)\n            End Try\n        \n        \n            &#39; Case 3: A generic method call that is independent of its generic context.\n            &#39;\n            &#39; Create and display a MethodInfo representing the MethodSpec of the \n            &#39; generic method gi.GM1(Of Object)() that is called in G2(Of Tg2).GM2(Of Tgm2)().\n            mi = GetType(G1(Of Integer)).GetMethod(&quot;GM1&quot;)\n            miTest = mi.MakeGenericMethod(New Type() {GetType(Object)})\n            Console.WriteLine(vbCrLf &amp; &quot;Case 3:&quot; &amp; vbCrLf &amp; miTest.ToString())\n        \n            &#39; Resolve the token for method G1(Of Integer).GM1(Of Object)(), which is \n            &#39; calledin G2(Of Tg2).GM2(Of Tgm2)(). The GetGenericArguments method is  \n            &#39; used to obtain the context for resolving the method, but the method call\n            &#39; in this case does not use type parameters of the enclosing type or\n            &#39; method, so Type.EmptyTypes could be used for both arguments.\n            miResolved = CType(m.ResolveMethod( _\n                    CInt(Tokens.Case3), _\n                    GetType(G2(Of )).GetGenericArguments(), _\n                    GetType(G2(Of )).GetMethod(&quot;GM2&quot;).GetGenericArguments()), _\n                MethodInfo)\n            Console.WriteLine(miResolved)\n            Console.WriteLine(&quot;Is the resolved method the same? {0}&quot;, miResolved Is miTest)\n        \n            &#39; The method call in this case does not depend on the enclosing generic\n            &#39; context, so the token can also be resolved by the simpler overload.\n            miResolved2 = CType(m.ResolveMethod(CInt(Tokens.Case3)), MethodInfo)\n        \n        \n            &#39; Case 4: A non-generic method call that is independent of its generic context.\n            &#39;\n            &#39; Create and display a MethodInfo representing the MethodDef of the \n            &#39; method e.M() that is called in G2(Of Tg2).GM2(Of Tgm2)().\n            miTest = GetType(Example).GetMethod(&quot;M&quot;)\n            Console.WriteLine(vbCrLf &amp; &quot;Case 4:&quot; &amp; vbCrLf &amp; miTest.ToString())\n        \n            &#39; Resolve the token for method Example.M(), which is called in\n            &#39; G2(Of Tg2).GM2(Of Tgm2)(). The GetGenericArguments method is used to \n            &#39; obtain the context for resolving the method, but the non-generic \n            &#39; method call does not use type parameters of the enclosing type or\n            &#39; method, so Type.EmptyTypes could be used for both arguments.\n            miResolved = CType(m.ResolveMethod( _\n                    CInt(Tokens.Case4), _\n                    GetType(G2(Of )).GetGenericArguments(), _\n                    GetType(G2(Of )).GetMethod(&quot;GM2&quot;).GetGenericArguments()), _\n                MethodInfo)\n            Console.WriteLine(miResolved)\n            Console.WriteLine(&quot;Is the resolved method the same? {0}&quot;, miResolved Is miTest)\n        \n            &#39; The method call in this case does not depend on any enclosing generic\n            &#39; context, so the token can also be resolved by the simpler overload.\n            miResolved2 = CType(m.ResolveMethod(CInt(Tokens.Case4)), MethodInfo)\n        \n        \n            &#39; Case 5: Generic method call in a non-generic context.\n            &#39;\n            &#39; Create and display a MethodInfo representing the MethodRef of the \n            &#39; closed generic method g.GM1(Of Object)() that is called in Example.M().\n            mi = GetType(G1(Of Integer)).GetMethod(&quot;GM1&quot;)\n            miTest = mi.MakeGenericMethod(New Type() {GetType(Object)})\n            Console.WriteLine(vbCrLf &amp; &quot;Case 5:&quot; &amp; vbCrLf &amp; miTest.ToString())\n        \n            &#39; Resolve the token for method G1(Of Integer).GM1(Of Object)(), which is \n            &#39; called in method Example.M(). The GetGenericArguments method is used to \n            &#39; obtain the context for resolving the method, but the enclosing type\n            &#39; and method are not generic, so Type.EmptyTypes could be used for\n            &#39; both arguments.\n            miResolved = CType(m.ResolveMethod( _\n                    CInt(Tokens.Case5), _\n                    GetType(Example).GetGenericArguments(), _\n                    GetType(Example).GetMethod(&quot;M&quot;).GetGenericArguments()), _\n                MethodInfo)\n            Console.WriteLine(miResolved)\n            Console.WriteLine(&quot;Is the resolved method the same? {0}&quot;, miResolved Is miTest)\n        \n            &#39; The method call in this case does not depend on any enclosing generic\n            &#39; context, so the token can also be resolved by the simpler overload.\n            miResolved2 = CType(m.ResolveMethod(CInt(Tokens.Case5)), MethodInfo)\n    \n        End Sub \n    End Class \nEnd Namespace\n\n&#39; This example produces the following output:\n&#39;\n&#39;Case 1:\n&#39;Void GM1[Tgm2](Tg2, Tgm2)\n&#39;Void GM1[Tgm2](Tg2, Tgm2)\n&#39;Is the resolved method the same? True\n&#39;System.ArgumentException: A BadImageFormatException has been thrown while parsing the signature. This is likely due to lack of a generic context. Ensure genericTypeArguments and genericMethodArguments are provided and contain enough context.\n&#39;\n&#39;Case 2:\n&#39;Void M1(Tg2)\n&#39;Void M1(Tg2)\n&#39;Is the resolved method the same? True\n&#39;System.ArgumentException: A BadImageFormatException has been thrown while parsing the signature. This is likely due to lack of a generic context. Ensure genericTypeArguments and genericMethodArguments are provided and contain enough context.\n&#39;\n&#39;Case 3:\n&#39;Void GM1[Object](Int32, System.Object)\n&#39;Void GM1[Object](Int32, System.Object)\n&#39;Is the resolved method the same? True\n&#39;\n&#39;Case 4:\n&#39;Void M()\n&#39;Void M()\n&#39;Is the resolved method the same? True\n&#39;\n&#39;Case 5:\n&#39;Void GM1[Object](Int32, System.Object)\n&#39;Void GM1[Object](Int32, System.Object)\n&#39;Is the resolved method the same? True\n&#39; \n</code></pre></li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_ResolveSignature_System_Int32_\">\r\n    \r\n            <a id=\"System_Reflection_Module_ResolveSignature_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ResolveSignature(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the signature blob identified by a metadata token.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual byte[] ResolveSignature (int metadataToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>metadataToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A metadata token that identifies a signature in the module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>An array of bytes representing the signature blob.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>metadataToken</code> is not a valid <code>MemberRef</code>, <code>MethodDef</code>, <code>TypeSpec</code>, signature, or <code>FieldDef</code> token in the scope of the current module.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>metadataToken</code> is not a valid token in the scope of the current module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Information about metadata tokens and signatures can be found in the Common Language Infrastructure (CLI) documentation, especially &quot;Partition II: Metadata Definition and Semantics&quot;. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the ECMA Web site.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_ResolveString_System_Int32_\">\r\n    \r\n            <a id=\"System_Reflection_Module_ResolveString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ResolveString(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the string identified by the specified metadata token.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string ResolveString (int metadataToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>metadataToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A metadata token that identifies a string in the string heap of the module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> containing a string value from the metadata string heap.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>metadataToken</code> is not a token for a string in the scope of the current module.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>metadataToken</code> is not a valid token in the scope of the current module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially &quot;Partition II: Metadata Definition and Semantics&quot;. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the ECMA Web site.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_ResolveType_System_Int32_\">\r\n    \r\n            <a id=\"System_Reflection_Module_ResolveType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ResolveType(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the type identified by the specified metadata token.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Type ResolveType (int metadataToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>metadataToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A metadata token that identifies a type in the module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object representing the type that is identified by the specified metadata token.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>metadataToken</code> is not a token for a type in the scope of the current module.  </p>\n<p> -or-  </p>\n<p> <code>metadataToken</code> is a <code>TypeSpec</code> whose signature contains element type <code>var</code> (a type parameter of a generic type) or <code>mvar</code> (a type parameter of a generic method).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>metadataToken</code> is not a valid token in the scope of the current module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To resolve a metadata token for a <code>TypeSpec</code> whose signature contains <code>ELEMENT_TYPE_VAR</code> or <code>ELEMENT_TYPE_MVAR</code>, use the [ResolveType(Int32,â€‚Type[],â€‚Type&lt;xref:System.Reflection.Module.ResolveType%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29&gt; method overload, which allows you to supply the necessary context. That is, when you are resolving a metadata token for a type that depends on the generic type parameters of the generic type and/or the generic method in which the token is embedded, you must use the overload that allows you to supply those type parameters.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially &quot;Partition II: Metadata Definition and Semantics&quot;. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the ECMA Web site.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_ResolveType_System_Int32_System_Type___System_Type___\">\r\n    \r\n            <a id=\"System_Reflection_Module_ResolveType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ResolveType(Int32,Type[],Type[])</div>        \r\n          </div>\r\n    \r\n            <p>Returns the type identified by the specified metadata token, in the context defined by the specified generic type parameters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual Type ResolveType (int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>metadataToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A metadata token that identifies a type in the module.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>genericTypeArguments</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects representing the generic type arguments of the type where the token is in scope, or <code>null</code> if that type is not generic.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>genericMethodArguments</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects representing the generic type arguments of the method where the token is in scope, or <code>null</code> if that method is not generic.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object representing the type that is identified by the specified metadata token.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>metadataToken</code> is not a token for a type in the scope of the current module.  </p>\n<p> -or-  </p>\n<p> <code>metadataToken</code> is a <code>TypeSpec</code> whose signature contains element type <code>var</code> (a type parameter of a generic type) or <code>mvar</code> (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of <code>genericTypeArguments</code> and <code>genericMethodArguments</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>metadataToken</code> is not a valid token in the scope of the current module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.type#System_Type_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method on the type where <code>metadataToken</code> is in scope to obtain an array of generic type arguments for <code>genericTypeArguments</code>. Use the <a class=\"xref\" href=\"system.reflection.methodinfo#System_Reflection_MethodInfo_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method on the method where <code>metadataToken</code> is in scope to obtain an array of generic type arguments for <code>genericTypeArguments</code>. It is always safe to provide these arguments, even when they are not needed.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially &quot;Partition II: Metadata Definition and Semantics&quot;. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the ECMA Web site.  </p>\n</div>\n<p> For code that demonstrates token resolution using the generic context (that is, the generic type parameters of the generic type and/or the generic method in which the token is embedded) see the [ResolveMethod(Int32,â€‚Type[],â€‚Type&lt;xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29&gt; method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_ToString\">\r\n    \r\n            <a id=\"System_Reflection_Module_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the name of the module.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A <code>String</code> representing the name of this module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates a use of the <code>ToString</code> method.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Reflection.Module.ToString Example#1\">Imports System.Reflection\n\nNamespace ReflectionModule_Examples\n    Class MyMainClass\n        Shared Sub Main()\n            Dim moduleArray() As [Module]\n\n            moduleArray = GetType(MyMainClass).Assembly.GetModules(False)\n\n            &#39;In a simple project with only one module, the module at index\n            &#39; 0 will be the module containing this class.\n            Dim myModule As [Module] = moduleArray(0)\n\n            Console.WriteLine(&quot;myModule.ToString returns: {0}&quot;, myModule.ToString())\n        End Sub &#39;Main\n    End Class &#39;MyMainClass\nEnd Namespace &#39;ReflectionModule_Examples\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Reflection.Module.ToString Example#1\">using System;\nusing System.Reflection;\n\nnamespace ReflectionModule_Examples\n{\n    class MyMainClass\n    {\n        static void Main()\n        {\n            Module[] moduleArray;\n            \n            moduleArray = typeof(MyMainClass).Assembly.GetModules(false);\n            \n            //In a simple project with only one module, the module at index\n            // 0 will be the module containing this class.\n            Module myModule = moduleArray[0];\n\n            Console.WriteLine(&quot;myModule.ToString returns: {0}&quot;, myModule.ToString());\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Reflection.Module.ToString Example#1\">using namespace System;\nusing namespace System::Reflection;\nint main()\n{\n   array&lt;Module^&gt;^moduleArray;\n   moduleArray = Assembly::GetExecutingAssembly()-&gt;GetModules( false );\n   \n   //In a simple project with only one module, the module at index\n   // 0 will be the module containing this class.\n   Module^ myModule = moduleArray[ 0 ];\n   Console::WriteLine( &quot;myModule-&gt;ToString returns: {0}&quot;, myModule );\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"operators\">\r\n        <h2>Operators\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_op_Equality_System_Reflection_Module_System_Reflection_Module_\">\r\n    \r\n            <a id=\"System_Reflection_Module_op_Equality_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Equality(Module,Module)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether two <a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a> objects are equal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_Equality (System.Reflection.Module left, System.Reflection.Module right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first object to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second object to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>left</code> is equal to <code>right</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_op_Inequality_System_Reflection_Module_System_Reflection_Module_\">\r\n    \r\n            <a id=\"System_Reflection_Module_op_Inequality_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Inequality(Module,Module)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether two <a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a> objects are not equal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_Inequality (System.Reflection.Module left, System.Reflection.Module right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first object to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second object to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>left</code> is not equal to <code>right</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_System_Runtime_InteropServices__Module_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Reflection_Module_System_Runtime_InteropServices__Module_GetIDsOfNames_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_Module.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Maps a set of names to a corresponding set of dispatch identifiers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _Module.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>riid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Reserved for future use. Must be IID_NULL.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgszNames</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Passed-in array of names to be mapped.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cNames</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Count of the names to be mapped.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lcid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The locale context in which to interpret the names.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgDispId</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Caller-allocated array that receives the IDs corresponding to the names.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Late-bound access using the COM <code>IDispatch</code> interface is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetIDsOfNames</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_System_Runtime_InteropServices__Module_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Reflection_Module_System_Runtime_InteropServices__Module_GetTypeInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_Module.GetTypeInfo(UInt32,UInt32,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the type information for an object, which can then be used to get the type information for an interface.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _Module.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>iTInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type information to return.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lcid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The locale identifier for the type information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ppTInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Receives a pointer to the requested type information object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Late-bound access using the COM <code>IDispatch</code> interface is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetTypeInfo</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_System_Runtime_InteropServices__Module_GetTypeInfoCount_System_UInt32__\">\r\n    \r\n            <a id=\"System_Reflection_Module_System_Runtime_InteropServices__Module_GetTypeInfoCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_Module.GetTypeInfoCount(UInt32)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _Module.GetTypeInfoCount (out uint pcTInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pcTInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Points to a location that receives the number of type information interfaces provided by the object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Late-bound access using the COM <code>IDispatch</code> interface is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetTypeInfoCount</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Module_System_Runtime_InteropServices__Module_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Reflection_Module_System_Runtime_InteropServices__Module_Invoke_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_Module.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Provides access to properties and methods exposed by an object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _Module.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dispIdMember</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Identifies the member.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>riid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Reserved for future use. Must be IID_NULL.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lcid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The locale context in which to interpret arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>wFlags</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Flags describing the context of the call.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pDispParams</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Pointer to a structure containing an array of arguments, an array of argument DispIDs for named arguments, and counts for the number of elements in the arrays.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pVarResult</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Pointer to the location where the result is to be stored.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pExcepInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Pointer to a structure that contains exception information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>puArgErr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the first argument that has an error.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Late-bound access using the COM <code>IDispatch</code> interface is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::Invoke</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Reflection.Module.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Reflection.Module.yml\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Module\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Module..ctor\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Module.Assembly\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Module.CustomAttributes\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Module.Equals\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Module.FilterTypeName\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Module.FilterTypeNameIgnoreCase\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Module.FindTypes\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Module.FullyQualifiedName\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Module.GetCustomAttributes\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Module.GetCustomAttributesData\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Module.GetField\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Module.GetFields\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Module.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Module.GetMethod\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Module.GetMethodImpl\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Module.GetMethods\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Module.GetObjectData\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Module.GetPEKind\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Module.GetSignerCertificate\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Module.GetType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Module.GetTypes\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Module.IsDefined\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Module.IsResource\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Module.MDStreamVersion\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Module.MetadataToken\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Module.ModuleHandle\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Module.ModuleVersionId\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Module.Name\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Module.op_Equality\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Module.op_op_Equality\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Module.op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Module.op_op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Module.ResolveField\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Module.ResolveMember\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Module.ResolveMethod\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Module.ResolveSignature\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Module.ResolveString\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Module.ResolveType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Module.ScopeName\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Module._Module.GetIDsOfNames\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Module._Module.GetTypeInfo\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Module._Module.GetTypeInfoCount\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Module._Module.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Module.ToString\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"69a5c019-8ef1-a852-e356-ebce0a37ef76\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\o2y0\\s\\fulldocset\\xml\\System.Reflection\\Module.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Performs reflection on a module.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Reflection/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Reflection.Module\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Reflection.Module.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Reflection.Module.yml","open_to_public_contributors":true,"api_name":["System.Reflection.Module","System.Reflection.Module..ctor","System.Reflection.Module.Assembly","System.Reflection.Module.CustomAttributes","System.Reflection.Module.Equals","System.Reflection.Module.FilterTypeName","System.Reflection.Module.FilterTypeNameIgnoreCase","System.Reflection.Module.FindTypes","System.Reflection.Module.FullyQualifiedName","System.Reflection.Module.GetCustomAttributes","System.Reflection.Module.GetCustomAttributesData","System.Reflection.Module.GetField","System.Reflection.Module.GetFields","System.Reflection.Module.GetHashCode","System.Reflection.Module.GetMethod","System.Reflection.Module.GetMethodImpl","System.Reflection.Module.GetMethods","System.Reflection.Module.GetObjectData","System.Reflection.Module.GetPEKind","System.Reflection.Module.GetSignerCertificate","System.Reflection.Module.GetType","System.Reflection.Module.GetTypes","System.Reflection.Module.IsDefined","System.Reflection.Module.IsResource","System.Reflection.Module.MDStreamVersion","System.Reflection.Module.MetadataToken","System.Reflection.Module.ModuleHandle","System.Reflection.Module.ModuleVersionId","System.Reflection.Module.Name","System.Reflection.Module.op_Equality","System.Reflection.Module.op_op_Equality","System.Reflection.Module.op_Inequality","System.Reflection.Module.op_op_Inequality","System.Reflection.Module.ResolveField","System.Reflection.Module.ResolveMember","System.Reflection.Module.ResolveMethod","System.Reflection.Module.ResolveSignature","System.Reflection.Module.ResolveString","System.Reflection.Module.ResolveType","System.Reflection.Module.ScopeName","System.Reflection.Module._Module.GetIDsOfNames","System.Reflection.Module._Module.GetTypeInfo","System.Reflection.Module._Module.GetTypeInfoCount","System.Reflection.Module._Module.Invoke","System.Reflection.Module.ToString"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Reflection.Module","System::Reflection::Module","System.Reflection.Module.#ctor","System::Reflection::Module::#ctor","System.Reflection.Module.Assembly","System::Reflection::Module::Assembly","System.Reflection.Module.CustomAttributes","System::Reflection::Module::CustomAttributes","System.Reflection.Module.Equals","System::Reflection::Module::Equals","System.Reflection.Module.FilterTypeName","System::Reflection::Module::FilterTypeName","System.Reflection.Module.FilterTypeNameIgnoreCase","System::Reflection::Module::FilterTypeNameIgnoreCase","System.Reflection.Module.FindTypes","System::Reflection::Module::FindTypes","System.Reflection.Module.FullyQualifiedName","System::Reflection::Module::FullyQualifiedName","System.Reflection.Module.GetCustomAttributes","System::Reflection::Module::GetCustomAttributes","System.Reflection.Module.GetCustomAttributesData","System::Reflection::Module::GetCustomAttributesData","System.Reflection.Module.GetField","System::Reflection::Module::GetField","System.Reflection.Module.GetFields","System::Reflection::Module::GetFields","System.Reflection.Module.GetHashCode","System::Reflection::Module::GetHashCode","System.Reflection.Module.GetMethod","System::Reflection::Module::GetMethod","System.Reflection.Module.GetMethodImpl","System::Reflection::Module::GetMethodImpl","System.Reflection.Module.GetMethods","System::Reflection::Module::GetMethods","System.Reflection.Module.GetObjectData","System::Reflection::Module::GetObjectData","System.Reflection.Module.GetPEKind","System::Reflection::Module::GetPEKind","System.Reflection.Module.GetSignerCertificate","System::Reflection::Module::GetSignerCertificate","System.Reflection.Module.GetType","System::Reflection::Module::GetType","System.Reflection.Module.GetTypes","System::Reflection::Module::GetTypes","System.Reflection.Module.IsDefined","System::Reflection::Module::IsDefined","System.Reflection.Module.IsResource","System::Reflection::Module::IsResource","System.Reflection.Module.MDStreamVersion","System::Reflection::Module::MDStreamVersion","System.Reflection.Module.MetadataToken","System::Reflection::Module::MetadataToken","System.Reflection.Module.ModuleHandle","System::Reflection::Module::ModuleHandle","System.Reflection.Module.ModuleVersionId","System::Reflection::Module::ModuleVersionId","System.Reflection.Module.Name","System::Reflection::Module::Name","System.Reflection.Module.op_Equality","System::Reflection::Module::op_Equality","System.Reflection.Module.op_Inequality","System::Reflection::Module::op_Inequality","System.Reflection.Module.ResolveField","System::Reflection::Module::ResolveField","System.Reflection.Module.ResolveMember","System::Reflection::Module::ResolveMember","System.Reflection.Module.ResolveMethod","System::Reflection::Module::ResolveMethod","System.Reflection.Module.ResolveSignature","System::Reflection::Module::ResolveSignature","System.Reflection.Module.ResolveString","System::Reflection::Module::ResolveString","System.Reflection.Module.ResolveType","System::Reflection::Module::ResolveType","System.Reflection.Module.ScopeName","System::Reflection::Module::ScopeName","System.Reflection.Module.System#Runtime#InteropServices#_Module#GetIDsOfNames","System::Reflection::Module::System#Runtime#InteropServices#_Module#GetIDsOfNames","System.Reflection.Module.System#Runtime#InteropServices#_Module#GetTypeInfo","System::Reflection::Module::System#Runtime#InteropServices#_Module#GetTypeInfo","System.Reflection.Module.System#Runtime#InteropServices#_Module#GetTypeInfoCount","System::Reflection::Module::System#Runtime#InteropServices#_Module#GetTypeInfoCount","System.Reflection.Module.System#Runtime#InteropServices#_Module#Invoke","System::Reflection::Module::System#Runtime#InteropServices#_Module#Invoke","System.Reflection.Module.ToString","System::Reflection::Module::ToString"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"69a5c019-8ef1-a852-e356-ebce0a37ef76","original_ecmaxml_local_path":"W:\\o2y0\\s\\fulldocset\\xml\\System.Reflection\\Module.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Reflection/Module.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Module class | Microsoft Docs","_op_ogTitle":"Module class","description":"Performs reflection on a module.\n","toc_asset_id":"_splitted/System.Reflection/toc.json","toc_rel":"_splitted/System.Reflection/toc.json","source_url":"","ms.assetid":"System.Reflection.Module","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.reflection.module","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.reflection.module","fileRelativePath":"System.Reflection.Module.html"},"themesRelativePathToOutputRoot":"_themes/"}