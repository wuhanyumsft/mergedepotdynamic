{"content":"    \r\n    <h1 id=\"System_Globalization_IdnMapping\">\r\n      <span class=\"lang-csharp\">IdnMapping</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Supports the use of non-ASCII characters for Internet domain names. This class cannot be inherited.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public sealed class IdnMapping</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">IdnMapping</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>An Internet domain name consists of one or more parts, called domain name labels, separated by label separators. For example, the domain name &quot;www.proseware.com&quot; consists of the labels, &quot;www&quot;, &quot;proseware&quot;, and &quot;com&quot;, separated by periods. Standard domain names consist of designated characters in the US-ASCII (or Basic Latin) character range, from U+0021 to U+007E. To facilitate Internet usage in cultures that do not use the US-ASCII character set, the Internationalizing Domain Names in Applications (IDNA) standard was adopted in 2003 to support the inclusion of Unicode characters outside the US-ASCII character range. However, name servers and domain name resolution continue to rely on characters within the US-ASCII character range.  </p>\n<p> The IDNA mechanism uses Punycode to map an internationalized domain name that contains Unicode characters outside the US-ASCII character range to the US-ASCII character range supported by the domain name system. The IDNA mechanism is used to convert only domain names, not data transmitted over the Internet.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> In the .NET Framework 4.5, the IdnMapping class supports different versions of the IDNA standard, depending on the operating system in use:  </p>\n<ul>\n<li><p>When run on Windows 8, it supports the 2008 version of the IDNA standard outlined by <a href=\"http://go.microsoft.com/fwlink/?LinkId=231875\" data-linktype=\"external\">RFC 5891: Internationalized Domain Names in Applications (IDNA): Protocol</a>.  </p>\n<ul>\n<li>When run on earlier versions of the Windows operating system, it supports the 2003 version of the standard outlined by <a href=\"http://go.microsoft.com/fwlink/?LinkId=158110\" data-linktype=\"external\">RFC 3490: Internationalizing Domain Names in Applications (IDNA)</a>.  </li>\n</ul>\n<p>See <a href=\"http://go.microsoft.com/fwlink/?LinkId=232459\" data-linktype=\"external\">Unicode Technical Standard #46: IDNA Compatibility Processing</a> for the differences in the way these standards handle particular sets of characters.  </p>\n</li>\n</ul>\n</div>\n<p> The <a class=\"xref\" href=\"system.globalization.idnmapping#System_Globalization_IdnMapping_GetAscii_\" data-linktype=\"relative-path\">GetAscii</a> method normalizes a domain name, converts the normalized name to a representation that consists of displayable Unicode characters in the US-ASCII code point range (U+0020 to U+007E), and prepends an ASCII-compatible encoding (ACE) prefix (&quot;xn--&quot;) to each label. The <a class=\"xref\" href=\"system.globalization.idnmapping#System_Globalization_IdnMapping_GetUnicode_\" data-linktype=\"relative-path\">GetUnicode</a> method restores the domain name labels converted by the <a class=\"xref\" href=\"system.globalization.idnmapping#System_Globalization_IdnMapping_GetAscii_\" data-linktype=\"relative-path\">GetAscii</a> method.  </p>\n<p> If the string to be converted includes the label separator characters IDEOGRAPHIC FULL STOP (U+3002), FULLWIDTH FULL STOP (U+FF0E), and HALFWIDTH IDEOGRAPHIC FULL STOP (U+FF61), the <a class=\"xref\" href=\"system.globalization.idnmapping#System_Globalization_IdnMapping_GetAscii_\" data-linktype=\"relative-path\">GetAscii</a> method converts them to the label separator FULL STOP (period, U+002E). The <a class=\"xref\" href=\"system.globalization.idnmapping#System_Globalization_IdnMapping_GetUnicode_\" data-linktype=\"relative-path\">GetUnicode</a> method, however, does not restore the original label separator character.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_IdnMapping__ctor\" data-linktype=\"self-bookmark\">IdnMapping()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.globalization.idnmapping\" data-linktype=\"relative-path\">IdnMapping</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_IdnMapping_AllowUnassigned\" data-linktype=\"self-bookmark\">AllowUnassigned</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether unassigned Unicode code points are used in operations performed by members of the current <a class=\"xref\" href=\"system.globalization.idnmapping\" data-linktype=\"relative-path\">IdnMapping</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_IdnMapping_UseStd3AsciiRules\" data-linktype=\"self-bookmark\">UseStd3AsciiRules</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether standard or relaxed naming conventions are used in operations performed by members of the current <a class=\"xref\" href=\"system.globalization.idnmapping\" data-linktype=\"relative-path\">IdnMapping</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_IdnMapping_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether a specified object and the current <a class=\"xref\" href=\"system.globalization.idnmapping\" data-linktype=\"relative-path\">IdnMapping</a> object are equal.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_IdnMapping_GetAscii_System_String_\" data-linktype=\"self-bookmark\">GetAscii(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Encodes a string of domain name labels that consist of Unicode characters to a string of displayable Unicode characters in the US-ASCII character range. The string is formatted according to the IDNA standard.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_IdnMapping_GetAscii_System_String_System_Int32_\" data-linktype=\"self-bookmark\">GetAscii(String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Encodes a substring of domain name labels that include Unicode characters outside the US-ASCII character range. The substring is converted to a string of displayable Unicode characters in the US-ASCII character range and is formatted according to the IDNA standard.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_IdnMapping_GetAscii_System_String_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">GetAscii(String,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Encodes the specified number of characters in a  substring of domain name labels that include Unicode characters outside the US-ASCII character range. The substring is converted to a string of displayable Unicode characters in the US-ASCII character range and is formatted according to the IDNA standard.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_IdnMapping_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a hash code for this <a class=\"xref\" href=\"system.globalization.idnmapping\" data-linktype=\"relative-path\">IdnMapping</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_IdnMapping_GetUnicode_System_String_\" data-linktype=\"self-bookmark\">GetUnicode(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Decodes a string of one or more domain name labels, encoded according to the IDNA standard, to a string of Unicode characters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_IdnMapping_GetUnicode_System_String_System_Int32_\" data-linktype=\"self-bookmark\">GetUnicode(String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Decodes a substring of one or more domain name labels, encoded according to the IDNA standard, to a string of Unicode characters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_IdnMapping_GetUnicode_System_String_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">GetUnicode(String,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Decodes a substring of a specified length that contains one or more domain name labels, encoded according to the IDNA standard, to a string of Unicode characters.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_IdnMapping__ctor\">\r\n    \r\n            <a id=\"System_Globalization_IdnMapping__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IdnMapping()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.globalization.idnmapping\" data-linktype=\"relative-path\">IdnMapping</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IdnMapping ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.globalization.idnmapping#System_Globalization_IdnMapping_AllowUnassigned_\" data-linktype=\"relative-path\">AllowUnassigned</a> and <a class=\"xref\" href=\"system.globalization.idnmapping#System_Globalization_IdnMapping_UseStd3AsciiRules_\" data-linktype=\"relative-path\">UseStd3AsciiRules</a> properties are initialized to <code>false</code>. A small subset of ASCII characters other than A-Z, 0-9, the hyphen (-) character (U+002D), and the period (.) character are permitted in domain names, but unassigned Unicode code points are not.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_IdnMapping_AllowUnassigned\">\r\n    \r\n            <a id=\"System_Globalization_IdnMapping_AllowUnassigned_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AllowUnassigned</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether unassigned Unicode code points are used in operations performed by members of the current <a class=\"xref\" href=\"system.globalization.idnmapping\" data-linktype=\"relative-path\">IdnMapping</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool AllowUnassigned { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if unassigned code points are used in operations; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A registered domain name cannot contain unassigned code points. Consequently, the default value of the AllowUnassigned property is <code>false</code>. The IDNA specification permits unassigned code points only in queries for matching strings (that is, in domain name lookup). For more information about the use of unassigned code points in domain names, see <a href=\"http://go.microsoft.com/fwlink/?LinkId=231873\" data-linktype=\"external\">RFC 3454, &quot;Preparation of Internationalized Strings (stringprep)&quot;</a> and <a href=\"http://go.microsoft.com/fwlink/?LinkId=231875\" data-linktype=\"external\">RFC 5891, &quot;Internationalized Domain Names in Applications (IDNA): Protocol&quot;</a>.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> If theAllowUnassigned property is <code>false</code>, the behavior associated with the property depends on the underlying operating system. On Windows 8, the <a class=\"xref\" href=\"system.globalization.idnmapping\" data-linktype=\"relative-path\">IdnMapping</a> class conforms to IDNA 2008, which is based on the Unicode 6.0 standard. On previous versions of Windows, the <a class=\"xref\" href=\"system.globalization.idnmapping\" data-linktype=\"relative-path\">IdnMapping</a> class is based on IDNA 2003, which is based on Unicode 3.<em>x</em>. Some code points that were unassigned in IDNA 2003 have been assigned characters and are supported in IDNA 2008. For example, U+0221 was introduced in Unicode 4.0. On Windows 8, it is encoded as &quot;xn—6la&quot;. On previous versions of Windows, it throws an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a> exception.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_IdnMapping_UseStd3AsciiRules\">\r\n    \r\n            <a id=\"System_Globalization_IdnMapping_UseStd3AsciiRules_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UseStd3AsciiRules</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether standard or relaxed naming conventions are used in operations performed by members of the current <a class=\"xref\" href=\"system.globalization.idnmapping\" data-linktype=\"relative-path\">IdnMapping</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool UseStd3AsciiRules { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if standard naming conventions are used in operations; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Domain names that follow standard naming rules consist of a specific subset of characters in the US-ASCII character range. The characters are the letters A through Z, the digits 0 through 9, the hyphen (-) character (U+002D), and the period (.) character. The case of the characters is not significant. Relaxed naming conventions allow the use of a broader range of ASCII characters, including the space character (U+0020), the exclamation point character (U+0021), and the underbar character (U+005F). If UseStd3AsciiRules is <code>true</code>, only standard characters can appear in a label returned by the <a class=\"xref\" href=\"system.globalization.idnmapping#System_Globalization_IdnMapping_GetAscii_\" data-linktype=\"relative-path\">GetAscii</a> method.  </p>\n<p> By default, the value of the UseStd3AsciiRules property is <code>false</code>, and an expanded subset of ASCII characters is permitted in a label.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.globalization.idnmapping\" data-linktype=\"relative-path\">IdnMapping</a> class prohibits the use of the nondisplayable characters U+0000 through U+001F, and U+007F in domain name labels regardless of the setting of the UseStd3AsciiRules property. This prohibition reduces the risk of security attacks such as name spoofing.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example generates URLs that contain characters in the ASCII range from U+0000 to U+007F and passes them to the <a class=\"xref\" href=\"system.globalization.idnmapping#System_Globalization_IdnMapping_GetAscii_System_String_\" data-linktype=\"relative-path\">GetAscii(String)</a> method of two <a class=\"xref\" href=\"system.globalization.idnmapping\" data-linktype=\"relative-path\">IdnMapping</a> objects. One object has its UseStd3AsciiRules property set to <code>true</code>, and the other object has it set to <code>false</code>. The output displays the characters that are invalid when the UseStd3AsciiRules property is <code>true</code> but valid when it is <code>false</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.IdnMapping.UseStd3AsciiRules#1\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      int nFailed = 0;\n      IdnMapping idnStd = new IdnMapping();\n      idnStd.UseStd3AsciiRules = true;\n      \n      IdnMapping idnRelaxed = new IdnMapping();\n      idnRelaxed.UseStd3AsciiRules = false;  // The default, but make it explicit.\n      \n      for (int ctr = 0; ctr &lt;= 0x7F; ctr++) { \n         string name = &quot;Prose&quot; + Convert.ToChar(ctr) + &quot;ware.com&quot;;\n         \n         bool stdFailed = false;\n         bool relaxedFailed = false;\n         string punyCode = &quot;&quot;;\n         try {\n            punyCode = idnStd.GetAscii(name);\n         }   \n         catch (ArgumentException) {\n            stdFailed = true;\n         }       \n         \n         try {\n            punyCode = idnRelaxed.GetAscii(name);\n         }\n         catch (ArgumentException) {\n            relaxedFailed = true;\n         }       \n         \n         if (relaxedFailed != stdFailed) {\n            Console.Write(&quot;U+{0:X4}     &quot;, ctr);\n            nFailed++;\n            if (nFailed % 5 == 0)\n               Console.WriteLine();       \n         }        \n      }   \n   }\n}\n// The example displays the following output:\n//       U+0020     U+0021     U+0022     U+0023     U+0024\n//       U+0025     U+0026     U+0027     U+0028     U+0029\n//       U+002A     U+002B     U+002C     U+002F     U+003A\n//       U+003B     U+003C     U+003D     U+003E     U+003F\n//       U+0040     U+005B     U+005C     U+005D     U+005E\n//       U+005F     U+0060     U+007B     U+007C     U+007D\n//       U+007E\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.IdnMapping.UseStd3AsciiRules#1\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim nFailed As Integer = 0\n      Dim idnStd As New IdnMapping()\n      idnStd.UseStd3AsciiRules = True\n      \n      Dim idnRelaxed As New IdnMapping\n      idnRelaxed.UseStd3AsciiRules = False     &#39; The default, but make it explicit.\n      \n      For ctr As Integer = 0 To &amp;h7F \n         Dim name As String = &quot;Prose&quot; + ChrW(ctr) + &quot;ware.com&quot;\n         \n         Dim stdFailed As Boolean = False\n         Dim relaxedFailed As Boolean = False\n         Dim punyCode As String\n         Try\n            punyCode = idnStd.GetAscii(name)\n         Catch e As ArgumentException\n            stdFailed = True\n         End Try       \n         \n         Try\n            punyCode = idnRelaxed.GetAscii(name)\n         Catch e As ArgumentException\n            relaxedFailed = True\n         End Try       \n         \n         If relaxedFailed &lt;&gt; stdFailed Then\n            Console.Write(&quot;U+{0:X4}     &quot;, ctr)\n            nFailed += 1\n            If nFailed Mod 5 = 0 Then Console.WriteLine()         \n         End If \n      Next   \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       U+0020     U+0021     U+0022     U+0023     U+0024\n&#39;       U+0025     U+0026     U+0027     U+0028     U+0029\n&#39;       U+002A     U+002B     U+002C     U+002F     U+003A\n&#39;       U+003B     U+003C     U+003D     U+003E     U+003F\n&#39;       U+0040     U+005B     U+005C     U+005D     U+005E\n&#39;       U+005F     U+0060     U+007B     U+007C     U+007D\n&#39;       U+007E\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_IdnMapping_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_Globalization_IdnMapping_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether a specified object and the current <a class=\"xref\" href=\"system.globalization.idnmapping\" data-linktype=\"relative-path\">IdnMapping</a> object are equal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to compare to the current object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the object specified by the <code>obj</code> parameter is derived from <a class=\"xref\" href=\"system.globalization.idnmapping\" data-linktype=\"relative-path\">IdnMapping</a> and its <span class=\"xref\">stem.Globalization.IdnMapping.AllowUnassigned*</span> and <span class=\"xref\">stem.Globalization.IdnMapping.UseStd3AsciiRules*</span> properties are equal; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_IdnMapping_GetAscii_System_String_\">\r\n    \r\n            <a id=\"System_Globalization_IdnMapping_GetAscii_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAscii(String)</div>        \r\n          </div>\r\n    \r\n            <p>Encodes a string of domain name labels that consist of Unicode characters to a string of displayable Unicode characters in the US-ASCII character range. The string is formatted according to the IDNA standard.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string GetAscii (string unicode);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>unicode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to convert, which consists of one or more domain name labels delimited with label separators.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The equivalent of the string specified by the <code>unicode</code> parameter, consisting of displayable Unicode characters in the US-ASCII character range (U+0020 to U+007E) and formatted according to the IDNA standard.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>unicode</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>unicode</code> is invalid based on the <span class=\"xref\">stem.Globalization.IdnMapping.AllowUnassigned*</span> and <span class=\"xref\">stem.Globalization.IdnMapping.UseStd3AsciiRules*</span> properties, and the IDNA standard.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>unicode</code> parameter specifies a string of one or more labels that consist of valid Unicode characters. The labels are separated by label separators. The <code>unicode</code> parameter cannot begin with a label separator, but it can include and optionally end with a separator. The label separators are FULL STOP (period, U+002E), IDEOGRAPHIC FULL STOP (U+3002), FULLWIDTH FULL STOP (U+FF0E), and HALFWIDTH IDEOGRAPHIC FULL STOP (U+FF61). For example, the domain name &quot;www.adatum.com&quot; consists of the labels, &quot;www&quot;, &quot;adatum&quot;, and &quot;com&quot;, separated by periods.  </p>\n<p> A label cannot contain any of the following characters:  </p>\n<ul>\n<li><p>Unicode control characters from U+0001 through U+001F, and U+007F.  </p>\n</li>\n<li><p>Unassigned Unicode characters, if the value of the <a class=\"xref\" href=\"system.globalization.idnmapping#System_Globalization_IdnMapping_AllowUnassigned_\" data-linktype=\"relative-path\">AllowUnassigned</a> property is <code>false</code>.  </p>\n</li>\n<li><p>Non-standard characters in the US-ASCII character range, such as the SPACE (U+0020), EXCLAMATION MARK (U+0021), and LOW LINE (U+005F) characters, if the value of the <a class=\"xref\" href=\"system.globalization.idnmapping#System_Globalization_IdnMapping_UseStd3AsciiRules_\" data-linktype=\"relative-path\">UseStd3AsciiRules</a> property is <code>true</code>.  </p>\n</li>\n<li><p>Characters that are prohibited by a specific version of the IDNA standard. For more information about prohibited characters, see <a href=\"http://go.microsoft.com/fwlink/?LinkId=231873\" data-linktype=\"external\">RFC 3454: Preparation of Internationalized Strings (&quot;stringprep&quot;)</a> for IDNA 2003, and <a href=\"http://go.microsoft.com/fwlink/?LinkId=231877\" data-linktype=\"external\">RFC 5982: The Unicode Code Points and Internationalized Domain Names for Applications</a> for IDNA 2008.  </p>\n<p>The <a class=\"xref\" href=\"system.globalization.idnmapping#System_Globalization_IdnMapping_GetAscii_\" data-linktype=\"relative-path\">GetAscii</a> method converts all label separators to FULL STOP (period, U+002E).  </p>\n<p>If <code>unicode</code> contains no characters outside the US-ASCII character range and no characters within the US-ASCII character range are prohibited, the method returns <code>unicode</code> unchanged.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the GetAscii method to convert an array of internationalized domain names to Punycode, which is an encoded equivalent that consists of characters in the US-ASCII character range. The <a class=\"xref\" href=\"system.globalization.idnmapping#System_Globalization_IdnMapping_GetUnicode_System_String_\" data-linktype=\"relative-path\">GetUnicode(String)</a> method then converts the Punycode domain name back into the original domain name, but replaces the original label separators with the standard label separator.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.IdnMapping.Class#1\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim names() As String = { &quot;b&#252;cher.com&quot;, &quot;мойдомен.рф&quot;, &quot;παράδειγμα.δοκιμή&quot;,\n                                &quot;mycharity&quot; + ChrW(&amp;h3002) + &quot;org&quot;,\n                                &quot;prose&quot; + ChrW(0) + &quot;ware.com&quot;, &quot;proseware..com&quot;, &quot;a.org&quot;, \n                                &quot;my_company.com&quot; }\n      Dim idn As New IdnMapping()\n      \n      For Each name In names\n         Try\n            Dim punyCode As String = idn.GetAscii(name)\n            Dim name2 As String = idn.GetUnicode(punyCode)\n            Console.WriteLine(&quot;{0} --&gt; {1} --&gt; {2}&quot;, name, punyCode, name2) \n            Console.WriteLine(&quot;Original: {0}&quot;, ShowCodePoints(name))\n            Console.WriteLine(&quot;Restored: {0}&quot;, ShowCodePoints(name2))\n         Catch e As ArgumentException \n            Console.WriteLine(&quot;{0} is not a valid domain name.&quot;, name)\n         End Try\n         Console.WriteLine()\n      Next   \n   End Sub\n   \n   Private Function ShowCodePoints(str1 As String) As String\n      Dim output As String = &quot;&quot;\n      For Each ch In str1\n         output += String.Format(&quot;U+{0} &quot;, Convert.ToUInt16(ch).ToString(&quot;X4&quot;))\n      Next\n      Return output\n   End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;    b&#252;cher.com --&gt; xn--bcher-kva.com --&gt; b&#252;cher.com\n&#39;    Original: U+0062 U+00FC U+0063 U+0068 U+0065 U+0072 U+002E U+0063 U+006F U+006D\n&#39;    Restored: U+0062 U+00FC U+0063 U+0068 U+0065 U+0072 U+002E U+0063 U+006F U+006D\n&#39;    \n&#39;    мойдомен.рф --&gt; xn--d1acklchcc.xn--p1ai --&gt; мойдомен.рф\n&#39;    Original: U+043C U+043E U+0439 U+0434 U+043E U+043C U+0435 U+043D U+002E U+0440 U+0444\n&#39;    Restored: U+043C U+043E U+0439 U+0434 U+043E U+043C U+0435 U+043D U+002E U+0440 U+0444\n&#39;    \n&#39;    παράδειγμα.δοκιμή --&gt; xn--hxajbheg2az3al.xn--jxalpdlp --&gt; παράδειγμα.δοκιμή\n&#39;    Original: U+03C0 U+03B1 U+03C1 U+03AC U+03B4 U+03B5 U+03B9 U+03B3 U+03BC U+03B1 U+002E U+03B4 U+03BF U+03BA U+03B9 U+03BC U+03AE\n&#39;    Restored: U+03C0 U+03B1 U+03C1 U+03AC U+03B4 U+03B5 U+03B9 U+03B3 U+03BC U+03B1 U+002E U+03B4 U+03BF U+03BA U+03B9 U+03BC U+03AE\n&#39;    \n&#39;    mycharity。org --&gt; mycharity.org --&gt; mycharity.org\n&#39;    Original: U+006D U+0079 U+0063 U+0068 U+0061 U+0072 U+0069 U+0074 U+0079 U+3002 U+006F U+0072 U+0067\n&#39;    Restored: U+006D U+0079 U+0063 U+0068 U+0061 U+0072 U+0069 U+0074 U+0079 U+002E U+006F U+0072 U+0067\n&#39;    \n&#39;    prose ware.com is not a valid domain name.\n&#39;    \n&#39;    proseware..com is not a valid domain name.\n&#39;    \n&#39;    a.org --&gt; a.org --&gt; a.org\n&#39;    Original: U+0061 U+002E U+006F U+0072 U+0067\n&#39;    Restored: U+0061 U+002E U+006F U+0072 U+0067\n&#39;    \n&#39;    my_company.com --&gt; my_company.com --&gt; my_company.com\n&#39;    Original: U+006D U+0079 U+005F U+0063 U+006F U+006D U+0070 U+0061 U+006E U+0079 U+002E U+0063 U+006F U+006D\n&#39;    Restored: U+006D U+0079 U+005F U+0063 U+006F U+006D U+0070 U+0061 U+006E U+0079 U+002E U+0063 U+006F U+006D\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.IdnMapping.Class#1\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string[] names = { &quot;b&#252;cher.com&quot;, &quot;мойдомен.рф&quot;, &quot;παράδειγμα.δοκιμή&quot;,\n                         &quot;mycharity\\u3002org&quot;,\n                         &quot;prose\\u0000ware.com&quot;, &quot;proseware..com&quot;, &quot;a.org&quot;, \n                         &quot;my_company.com&quot; };\n      IdnMapping idn = new IdnMapping();\n      \n      foreach (var name in names) {\n         try {\n            string punyCode = idn.GetAscii(name);\n            string name2 = idn.GetUnicode(punyCode);\n            Console.WriteLine(&quot;{0} --&gt; {1} --&gt; {2}&quot;, name, punyCode, name2); \n            Console.WriteLine(&quot;Original: {0}&quot;, ShowCodePoints(name));\n            Console.WriteLine(&quot;Restored: {0}&quot;, ShowCodePoints(name2));\n         }   \n         catch (ArgumentException) { \n            Console.WriteLine(&quot;{0} is not a valid domain name.&quot;, name);\n         }\n         Console.WriteLine();\n      }   \n   }\n\n   private static string ShowCodePoints(string str1) \n   {\n      string output = &quot;&quot;;\n      foreach (var ch in str1)\n         output += String.Format(&quot;U+{0} &quot;, Convert.ToUInt16(ch).ToString(&quot;X4&quot;));\n      \n      return output;\n   }\n}\n// The example displays the following output:\n//    b&#252;cher.com --&gt; xn--bcher-kva.com --&gt; b&#252;cher.com\n//    Original: U+0062 U+00FC U+0063 U+0068 U+0065 U+0072 U+002E U+0063 U+006F U+006D\n//    Restored: U+0062 U+00FC U+0063 U+0068 U+0065 U+0072 U+002E U+0063 U+006F U+006D\n//    \n//    мойдомен.рф --&gt; xn--d1acklchcc.xn--p1ai --&gt; мойдомен.рф\n//    Original: U+043C U+043E U+0439 U+0434 U+043E U+043C U+0435 U+043D U+002E U+0440 U+0444\n//    Restored: U+043C U+043E U+0439 U+0434 U+043E U+043C U+0435 U+043D U+002E U+0440 U+0444\n//    \n//    παράδειγμα.δοκιμή --&gt; xn--hxajbheg2az3al.xn--jxalpdlp --&gt; παράδειγμα.δοκιμή\n//    Original: U+03C0 U+03B1 U+03C1 U+03AC U+03B4 U+03B5 U+03B9 U+03B3 U+03BC U+03B1 U+002E U+03B4 U+03BF U+03BA U+03B9 U+03BC U+03AE\n//    Restored: U+03C0 U+03B1 U+03C1 U+03AC U+03B4 U+03B5 U+03B9 U+03B3 U+03BC U+03B1 U+002E U+03B4 U+03BF U+03BA U+03B9 U+03BC U+03AE\n//    \n//    mycharity。org --&gt; mycharity.org --&gt; mycharity.org\n//    Original: U+006D U+0079 U+0063 U+0068 U+0061 U+0072 U+0069 U+0074 U+0079 U+3002 U+006F U+0072 U+0067\n//    Restored: U+006D U+0079 U+0063 U+0068 U+0061 U+0072 U+0069 U+0074 U+0079 U+002E U+006F U+0072 U+0067\n//    \n//    prose ware.com is not a valid domain name.\n//    \n//    proseware..com is not a valid domain name.\n//    \n//    a.org --&gt; a.org --&gt; a.org\n//    Original: U+0061 U+002E U+006F U+0072 U+0067\n//    Restored: U+0061 U+002E U+006F U+0072 U+0067\n//    \n//    my_company.com --&gt; my_company.com --&gt; my_company.com\n//    Original: U+006D U+0079 U+005F U+0063 U+006F U+006D U+0070 U+0061 U+006E U+0079 U+002E U+0063 U+006F U+006D\n//    Restored: U+006D U+0079 U+005F U+0063 U+006F U+006D U+0070 U+0061 U+006E U+0079 U+002E U+0063 U+006F U+006D\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_IdnMapping_GetAscii_System_String_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_IdnMapping_GetAscii_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAscii(String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Encodes a substring of domain name labels that include Unicode characters outside the US-ASCII character range. The substring is converted to a string of displayable Unicode characters in the US-ASCII character range and is formatted according to the IDNA standard.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string GetAscii (string unicode, int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>unicode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to convert, which consists of one or more domain name labels delimited with label separators.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A zero-based offset into <code>unicode</code> that specifies the start of the substring to convert. The conversion operation continues to the end of the <code>unicode</code> string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The equivalent of the substring specified by the <code>unicode</code> and <code>index</code> parameters, consisting of displayable Unicode characters in the US-ASCII character range (U+0020 to U+007E) and formatted according to the IDNA standard.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>unicode</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>index</code> is greater than the length of <code>unicode</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>unicode</code> is invalid based on the <span class=\"xref\">stem.Globalization.IdnMapping.AllowUnassigned*</span> and <span class=\"xref\">stem.Globalization.IdnMapping.UseStd3AsciiRules*</span> properties, and the IDNA standard.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>unicode</code> and <code>index</code> parameters define a substring with one or more labels that consist of valid Unicode characters. The labels are separated by label separators. The first character of the substring cannot begin with a label separator, but it can include and optionally end with a separator. The label separators are FULL STOP (period, U+002E), IDEOGRAPHIC FULL STOP (U+3002), FULLWIDTH FULL STOP (U+FF0E), and HALFWIDTH IDEOGRAPHIC FULL STOP (U+FF61). For example, the domain name &quot;www.adatum.com&quot; consists of the labels, &quot;www&quot;, &quot;adatum&quot;, and &quot;com&quot;, separated by periods.  </p>\n<p> A label cannot contain any of the following characters:  </p>\n<ul>\n<li><p>Unicode control characters from U+0001 through U+001F, and U+007F.  </p>\n</li>\n<li><p>Unassigned Unicode characters, depending on the value of the <a class=\"xref\" href=\"system.globalization.idnmapping#System_Globalization_IdnMapping_AllowUnassigned_\" data-linktype=\"relative-path\">AllowUnassigned</a> property.  </p>\n</li>\n<li><p>Non-standard characters in the US-ASCII character range, such as the SPACE (U+0020), EXCLAMATION MARK (U+0021), and LOW LINE (U+005F) characters, depending on the value of the <a class=\"xref\" href=\"system.globalization.idnmapping#System_Globalization_IdnMapping_UseStd3AsciiRules_\" data-linktype=\"relative-path\">UseStd3AsciiRules</a> property.  </p>\n</li>\n<li><p>Characters that are prohibited by a specific version of the IDNA standard. For more information about prohibited characters, see <a href=\"http://go.microsoft.com/fwlink/?LinkId=231873\" data-linktype=\"external\">RFC 3454: Preparation of Internationalized Strings (&quot;stringprep&quot;)</a> for IDNA 2003, and <a href=\"http://go.microsoft.com/fwlink/?LinkId=231877\" data-linktype=\"external\">RFC 5982: The Unicode Code Points and Internationalized Domain Names for Applications</a> for IDNA 2008.  </p>\n<p>The <a class=\"xref\" href=\"system.globalization.idnmapping#System_Globalization_IdnMapping_GetAscii_\" data-linktype=\"relative-path\">GetAscii</a> method converts all label separators to FULL STOP (period, U+002E).  </p>\n<p>If <code>unicode</code> contains no characters outside the US-ASCII character range and no characters within the US-ASCII character range are prohibited, the method returns <code>unicode</code> unchanged.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example removes the local part and the @ character from an email address, and passes the resulting domain name to the GetAscii method to create a Punycode domain name, which is an encoded equivalent that consists of characters in the US-ASCII character range. The <a class=\"xref\" href=\"system.globalization.idnmapping#System_Globalization_IdnMapping_GetUnicode_System_String_System_Int32_System_Int32_\" data-linktype=\"relative-path\">GetUnicode(String,Int32,Int32)</a> method then converts the Punycode domain name back into the original domain name, but replaces the original label separators with the standard label separator.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.IdnMapping.GetAscii#2\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string[] names = { &quot;johann_doe@b&#252;cher.com&quot;, &quot;vi@мойдомен.рф&quot;, &quot;ia@παράδειγμα.δοκιμή&quot;,\n                         &quot;webmaster@mycharity\\u3002org&quot;,\n                         &quot;admin@prose\\u0000ware.com&quot;, &quot;john_doe@proseware..com&quot;, \n                         &quot;jane_doe@a.org&quot;, &quot;me@my_company.com&quot; };\n      IdnMapping idn = new IdnMapping();\n      \n      foreach (var thisName in names) {\n         string name = thisName;\n         try {\n            int position = name.LastIndexOf(&quot;@&quot;);\n            if (position &gt;= 0) \n               name = name.Substring(position + 1);\n\n            string punyCode = idn.GetAscii(name);\n            string name2 = idn.GetUnicode(punyCode);\n            Console.WriteLine(&quot;{0} --&gt; {1} --&gt; {2}&quot;, name, punyCode, name2); \n            Console.WriteLine(&quot;Original: {0}&quot;, ShowCodePoints(name));\n            Console.WriteLine(&quot;Restored: {0}&quot;, ShowCodePoints(name2));\n         }   \n         catch (ArgumentException) { \n            Console.WriteLine(&quot;{0} is not a valid domain name.&quot;, name);\n         }\n         Console.WriteLine();\n      }   \n   }\n\n   private static string ShowCodePoints(string str1) \n   {\n      string output = &quot;&quot;;\n      foreach (var ch in str1)\n         output += String.Format(&quot;U+{0} &quot;, Convert.ToUInt16(ch).ToString(&quot;X4&quot;));\n      \n      return output;\n   }\n}\n// The example displays the following output:\n//    b&#252;cher.com --&gt; xn--bcher-kva.com --&gt; b&#252;cher.com\n//    Original: U+0062 U+00FC U+0063 U+0068 U+0065 U+0072 U+002E U+0063 U+006F U+006D\n//    Restored: U+0062 U+00FC U+0063 U+0068 U+0065 U+0072 U+002E U+0063 U+006F U+006D\n//    \n//    мойдомен.рф --&gt; xn--d1acklchcc.xn--p1ai --&gt; мойдомен.рф\n//    Original: U+043C U+043E U+0439 U+0434 U+043E U+043C U+0435 U+043D U+002E U+0440 U+0444\n//    Restored: U+043C U+043E U+0439 U+0434 U+043E U+043C U+0435 U+043D U+002E U+0440 U+0444\n//    \n//    παράδειγμα.δοκιμή --&gt; xn--hxajbheg2az3al.xn--jxalpdlp --&gt; παράδειγμα.δοκιμή\n//    Original: U+03C0 U+03B1 U+03C1 U+03AC U+03B4 U+03B5 U+03B9 U+03B3 U+03BC U+03B1 U+002E U+03B4 U+03BF U+03BA U+03B9 U+03BC U+03AE\n//    Restored: U+03C0 U+03B1 U+03C1 U+03AC U+03B4 U+03B5 U+03B9 U+03B3 U+03BC U+03B1 U+002E U+03B4 U+03BF U+03BA U+03B9 U+03BC U+03AE\n//    \n//    mycharity。org --&gt; mycharity.org --&gt; mycharity.org\n//    Original: U+006D U+0079 U+0063 U+0068 U+0061 U+0072 U+0069 U+0074 U+0079 U+3002 U+006F U+0072 U+0067\n//    Restored: U+006D U+0079 U+0063 U+0068 U+0061 U+0072 U+0069 U+0074 U+0079 U+002E U+006F U+0072 U+0067\n//    \n//    prose ware.com is not a valid domain name.\n//    \n//    proseware..com is not a valid domain name.\n//    \n//    a.org --&gt; a.org --&gt; a.org\n//    Original: U+0061 U+002E U+006F U+0072 U+0067\n//    Restored: U+0061 U+002E U+006F U+0072 U+0067\n//    \n//    my_company.com --&gt; my_company.com --&gt; my_company.com\n//    Original: U+006D U+0079 U+005F U+0063 U+006F U+006D U+0070 U+0061 U+006E U+0079 U+002E U+0063 U+006F U+006D\n//    Restored: U+006D U+0079 U+005F U+0063 U+006F U+006D U+0070 U+0061 U+006E U+0079 U+002E U+0063 U+006F U+006D\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.IdnMapping.GetAscii#2\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim names() As String = { &quot;johann_doe@b&#252;cher.com&quot;, &quot;vi@мойдомен.рф&quot;, &quot;ia@παράδειγμα.δοκιμή&quot;,\n                                &quot;webmaster@mycharity&quot; + ChrW(&amp;h3002) + &quot;org&quot;,\n                                &quot;admin@prose&quot; + ChrW(0) + &quot;ware.com&quot;, &quot;john_doe@proseware..com&quot;, \n                                &quot;jane_doe@a.org&quot;, &quot;me@my_company.com&quot; }\n      Dim idn As New IdnMapping()\n      \n      For Each name In names\n         Try\n            Dim position As Integer = name.LastIndexOf(&quot;@&quot;)\n            If position &gt;= 0 Then name = name.Substring(position + 1)\n\n            Dim punyCode As String = idn.GetAscii(name)\n            Dim name2 As String = idn.GetUnicode(punyCode)\n            Console.WriteLine(&quot;{0} --&gt; {1} --&gt; {2}&quot;, name, punyCode, name2) \n            Console.WriteLine(&quot;Original: {0}&quot;, ShowCodePoints(name))\n            Console.WriteLine(&quot;Restored: {0}&quot;, ShowCodePoints(name2))\n         Catch e As ArgumentException \n            Console.WriteLine(&quot;{0} is not a valid domain name.&quot;, name)\n         End Try\n         Console.WriteLine()\n      Next   \n   End Sub\n   \n   Private Function ShowCodePoints(str1 As String) As String\n      Dim output As String = &quot;&quot;\n      For Each ch In str1\n         output += String.Format(&quot;U+{0} &quot;, Convert.ToUInt16(ch).ToString(&quot;X4&quot;))\n      Next\n      Return output\n   End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;    b&#252;cher.com --&gt; xn--bcher-kva.com --&gt; b&#252;cher.com\n&#39;    Original: U+0062 U+00FC U+0063 U+0068 U+0065 U+0072 U+002E U+0063 U+006F U+006D\n&#39;    Restored: U+0062 U+00FC U+0063 U+0068 U+0065 U+0072 U+002E U+0063 U+006F U+006D\n&#39;    \n&#39;    мойдомен.рф --&gt; xn--d1acklchcc.xn--p1ai --&gt; мойдомен.рф\n&#39;    Original: U+043C U+043E U+0439 U+0434 U+043E U+043C U+0435 U+043D U+002E U+0440 U+0444\n&#39;    Restored: U+043C U+043E U+0439 U+0434 U+043E U+043C U+0435 U+043D U+002E U+0440 U+0444\n&#39;    \n&#39;    παράδειγμα.δοκιμή --&gt; xn--hxajbheg2az3al.xn--jxalpdlp --&gt; παράδειγμα.δοκιμή\n&#39;    Original: U+03C0 U+03B1 U+03C1 U+03AC U+03B4 U+03B5 U+03B9 U+03B3 U+03BC U+03B1 U+002E U+03B4 U+03BF U+03BA U+03B9 U+03BC U+03AE\n&#39;    Restored: U+03C0 U+03B1 U+03C1 U+03AC U+03B4 U+03B5 U+03B9 U+03B3 U+03BC U+03B1 U+002E U+03B4 U+03BF U+03BA U+03B9 U+03BC U+03AE\n&#39;    \n&#39;    mycharity。org --&gt; mycharity.org --&gt; mycharity.org\n&#39;    Original: U+006D U+0079 U+0063 U+0068 U+0061 U+0072 U+0069 U+0074 U+0079 U+3002 U+006F U+0072 U+0067\n&#39;    Restored: U+006D U+0079 U+0063 U+0068 U+0061 U+0072 U+0069 U+0074 U+0079 U+002E U+006F U+0072 U+0067\n&#39;    \n&#39;    prose ware.com is not a valid domain name.\n&#39;    \n&#39;    proseware..com is not a valid domain name.\n&#39;    \n&#39;    a.org --&gt; a.org --&gt; a.org\n&#39;    Original: U+0061 U+002E U+006F U+0072 U+0067\n&#39;    Restored: U+0061 U+002E U+006F U+0072 U+0067\n&#39;    \n&#39;    my_company.com --&gt; my_company.com --&gt; my_company.com\n&#39;    Original: U+006D U+0079 U+005F U+0063 U+006F U+006D U+0070 U+0061 U+006E U+0079 U+002E U+0063 U+006F U+006D\n&#39;    Restored: U+006D U+0079 U+005F U+0063 U+006F U+006D U+0070 U+0061 U+006E U+0079 U+002E U+0063 U+006F U+006D\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_IdnMapping_GetAscii_System_String_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_IdnMapping_GetAscii_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAscii(String,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Encodes the specified number of characters in a  substring of domain name labels that include Unicode characters outside the US-ASCII character range. The substring is converted to a string of displayable Unicode characters in the US-ASCII character range and is formatted according to the IDNA standard.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string GetAscii (string unicode, int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>unicode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to convert, which consists of one or more domain name labels delimited with label separators.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A zero-based offset into <code>unicode</code> that specifies the start of the substring.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of characters to convert in the substring that starts at the position specified by  <code>index</code> in the <code>unicode</code> string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The equivalent of the substring specified by the <code>unicode</code>, <code>index</code>, and <code>count</code> parameters, consisting of displayable Unicode characters in the US-ASCII character range (U+0020 to U+007E) and formatted according to the IDNA standard.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>unicode</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> or <code>count</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>index</code> is greater than the length of <code>unicode</code>.  </p>\n<p> -or-  </p>\n<p> <code>index</code> is greater than the length of <code>unicode</code> minus <code>count</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>unicode</code> is invalid based on the <span class=\"xref\">stem.Globalization.IdnMapping.AllowUnassigned*</span> and <span class=\"xref\">stem.Globalization.IdnMapping.UseStd3AsciiRules*</span> properties, and the IDNA standard.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>Unicode</code>, <code>index</code>, and <code>count</code> parameters define a substring with one or more labels that consist of valid Unicode characters. The labels are separated by label separators. The first character of the substring cannot begin with a label separator, but it can include and optionally end with a separator. The label separators are FULL STOP (period, U+002E), IDEOGRAPHIC FULL STOP (U+3002), FULLWIDTH FULL STOP (U+FF0E), and HALFWIDTH IDEOGRAPHIC FULL STOP (U+FF61). For example, the domain name &quot;www.adatum.com&quot; consists of the labels, &quot;www&quot;, &quot;adatum&quot;, and &quot;com&quot;, separated by periods.  </p>\n<p> A label cannot contain any of the following characters:  </p>\n<ul>\n<li><p>Unicode control characters from U+0001 through U+001F, and U+007F.  </p>\n</li>\n<li><p>Unassigned Unicode characters, depending on the value of the <a class=\"xref\" href=\"system.globalization.idnmapping#System_Globalization_IdnMapping_AllowUnassigned_\" data-linktype=\"relative-path\">AllowUnassigned</a> property.  </p>\n</li>\n<li><p>Non-standard characters in the US-ASCII character range, such as the SPACE (U+0020), EXCLAMATION MARK (U+0021), and LOW LINE (U+005F) characters, depending on the value of the <a class=\"xref\" href=\"system.globalization.idnmapping#System_Globalization_IdnMapping_UseStd3AsciiRules_\" data-linktype=\"relative-path\">UseStd3AsciiRules</a> property.  </p>\n</li>\n<li><p>Characters that are prohibited by a specific version of the IDNA standard. For more information about prohibited characters, see <a href=\"http://go.microsoft.com/fwlink/?LinkId=231873\" data-linktype=\"external\">RFC 3454: Preparation of Internationalized Strings (&quot;stringprep&quot;)</a> for IDNA 2003, and <a href=\"http://go.microsoft.com/fwlink/?LinkId=231877\" data-linktype=\"external\">RFC 5982: The Unicode Code Points and Internationalized Domain Names for Applications</a> for IDNA 2008.  </p>\n<p>The <a class=\"xref\" href=\"system.globalization.idnmapping#System_Globalization_IdnMapping_GetAscii_\" data-linktype=\"relative-path\">GetAscii</a> method converts all label separators to FULL STOP (period, U+002E). If the substring contains no characters outside the US-ASCII character range, and no characters within the US-ASCII character range are prohibited, the method returns the substring unchanged.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the GetAscii method to convert an internationalized domain name to a domain name that complies with the IDNA standard. The <a class=\"xref\" href=\"system.globalization.idnmapping#System_Globalization_IdnMapping_GetUnicode_System_String_System_Int32_System_Int32_\" data-linktype=\"relative-path\">GetUnicode(String,Int32,Int32)</a> method then converts the standardized domain name back into the original domain name, but replaces the original label separators with the standard label separator.  </p>\n<pre><code class=\"lang-vb\" name=\"IdnMapping.GetX#1\">&#39; This example demonstrates the GetAscii and GetUnicode methods.\n&#39; For sake of illustration, this example uses the most complex\n&#39; form of those methods, not the most convenient.\n\nImports System\nImports System.Globalization\n\nClass Sample\n    Public Shared Sub Main() \n\n&#39;   Define a domain name consisting of the labels: GREEK SMALL LETTER \n&#39;   PI (U+03C0); IDEOGRAPHIC FULL STOP (U+3002); GREEK SMALL LETTER \n&#39;   THETA (U+03B8); FULLWIDTH FULL STOP (U+FF0E); and &quot;com&quot;.\n\n        Dim name As String = &quot;π。θ．com&quot;\n        Dim international As String\n        Dim nonInternational As String\n        \n        Dim msg1 As String = &quot;the original non-internationalized &quot; &amp; vbCrLf &amp; &quot;domain name:&quot;\n        Dim msg2 As String = &quot;Allow unassigned characters?:     {0}&quot;\n        Dim msg3 As String = &quot;Use non-internationalized rules?: {0}&quot;\n        Dim msg4 As String = &quot;Convert the non-internationalized domain name to international format...&quot;\n        Dim msg5 As String = &quot;Display the encoded domain name:&quot; &amp; vbCrLf &amp; &quot;&quot;&quot;{0}&quot;&quot;&quot;\n        Dim msg6 As String = &quot;the encoded domain name:&quot;\n        Dim msg7 As String = &quot;Convert the internationalized domain name to non-international format...&quot;\n        Dim msg8 As String = &quot;the reconstituted non-internationalized &quot; &amp; vbCrLf &amp; &quot;domain name:&quot;\n        Dim msg9 As String = &quot;Visually compare the code points of the reconstituted string to the &quot; &amp; _\n                             &quot;original.&quot; &amp; vbCrLf &amp; _\n                             &quot;Note that the reconstituted string contains standard label &quot; &amp; _\n                             &quot;separators (U+002e).&quot;\n        &#39; ----------------------------------------------------------------------------\n        Console.Clear()\n        CodePoints(name, msg1)\n        &#39; ----------------------------------------------------------------------------\n        Dim idn As New IdnMapping()\n        \n        Console.WriteLine(msg2, idn.AllowUnassigned)\n        Console.WriteLine(msg3, idn.UseStd3AsciiRules)\n        Console.WriteLine()\n        &#39; ----------------------------------------------------------------------------\n        Console.WriteLine(msg4)\n        international = idn.GetAscii(name, 0, name.Length)\n        Console.WriteLine(msg5, international)\n        Console.WriteLine()\n        CodePoints(international, msg6)\n        &#39; ----------------------------------------------------------------------------\n        Console.WriteLine(msg7)\n        nonInternational = idn.GetUnicode(international, 0, international.Length)\n        CodePoints(nonInternational, msg8)\n        Console.WriteLine(msg9)\n    End Sub &#39;Main\n    \n    &#39; ----------------------------------------------------------------------------\n    Shared Sub CodePoints(ByVal value As String, ByVal title As String) \n        Console.WriteLine(&quot;Display the Unicode code points of {0}&quot;, title)\n        Dim c As Char\n        For Each c In  value\n            Console.Write(&quot;{0:x4} &quot;, Convert.ToInt32(c))\n        Next c\n        Console.WriteLine()\n        Console.WriteLine()\n    \n    End Sub &#39;CodePoints\nEnd Class &#39;Sample\n&#39;\n&#39;This code example produces the following results:\n&#39;\n&#39;Display the Unicode code points of the original non-internationalized\n&#39;domain name:\n&#39;03c0 3002 03b8 ff0e 0063 006f 006d\n&#39;\n&#39;Allow unassigned characters?:     False\n&#39;Use non-internationalized rules?: False\n&#39;\n&#39;Convert the non-internationalized domain name to international format...\n&#39;Display the encoded domain name:\n&#39;&quot;xn--1xa.xn--txa.com&quot;\n&#39;\n&#39;Display the Unicode code points of the encoded domain name:\n&#39;0078 006e 002d 002d 0031 0078 0061 002e 0078 006e 002d 002d 0074 0078 0061 002e 0063 006f\n&#39;006d\n&#39;\n&#39;Convert the internationalized domain name to non-international format...\n&#39;Display the Unicode code points of the reconstituted non-internationalized\n&#39;domain name:\n&#39;03c0 002e 03b8 002e 0063 006f 006d\n&#39;\n&#39;Visually compare the code points of the reconstituted string to the original.\n&#39;Note that the reconstituted string contains standard label separators (U+002e).\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"IdnMapping.GetX#1\">// This example demonstrates the GetAscii and GetUnicode methods.\n// For sake of illustration, this example uses the most complex\n// form of those methods, not the most convenient.\n\nusing System;\nusing System.Globalization;\n\nclass Sample \n{\n    public static void Main() \n    {\n/* \n   Define a domain name consisting of the labels: GREEK SMALL LETTER \n   PI (U+03C0); IDEOGRAPHIC FULL STOP (U+3002); GREEK SMALL LETTER \n   THETA (U+03B8); FULLWIDTH FULL STOP (U+FF0E); and &quot;com&quot;.\n*/\n    string name = &quot;\\u03C0\\u3002\\u03B8\\uFF0Ecom&quot;;\n    string international;\n    string nonInternational;\n\n    string msg1 = &quot;the original non-internationalized <br>domain name:&quot;;\n    string msg2 = &quot;Allow unassigned characters?:     {0}&quot;;\n    string msg3 = &quot;Use non-internationalized rules?: {0}&quot;;\n    string msg4 = &quot;Convert the non-internationalized domain name to international format...&quot;;\n    string msg5 = &quot;Display the encoded domain name:<br>\\&quot;{0}\\&quot;&quot;;\n    string msg6 = &quot;the encoded domain name:&quot;;\n    string msg7 = &quot;Convert the internationalized domain name to non-international format...&quot;;\n    string msg8 = &quot;the reconstituted non-internationalized <br>domain name:&quot;;\n    string msg9 = &quot;Visually compare the code points of the reconstituted string to the &quot; +\n                  &quot;original.<br>&quot; +\n                  &quot;Note that the reconstituted string contains standard label &quot; +\n                  &quot;separators (U+002e).&quot;;\n// ----------------------------------------------------------------------------\n    Console.Clear();\n    CodePoints(name, msg1);\n// ----------------------------------------------------------------------------\n\n    IdnMapping idn = new IdnMapping();\n\n    Console.WriteLine(msg2, idn.AllowUnassigned);\n    Console.WriteLine(msg3, idn.UseStd3AsciiRules);\n    Console.WriteLine();\n// ----------------------------------------------------------------------------\n    Console.WriteLine(msg4);\n    international = idn.GetAscii(name, 0, name.Length);\n    Console.WriteLine(msg5, international);\n    Console.WriteLine();\n    CodePoints(international, msg6);\n// ----------------------------------------------------------------------------\n    Console.WriteLine(msg7);\n    nonInternational = idn.GetUnicode(international, 0, international.Length);\n    CodePoints(nonInternational, msg8);\n    Console.WriteLine(msg9);\n    }\n// ----------------------------------------------------------------------------\n    static void CodePoints(string value, string title)\n    {\n    Console.WriteLine(&quot;Display the Unicode code points of {0}&quot;, title);\n    foreach (char c in value) \n        {\n        Console.Write(&quot;{0:x4} &quot;, Convert.ToInt32(c));\n        }\n        Console.WriteLine();\n        Console.WriteLine();\n    }\n}\n/*\nThis code example produces the following results:\n\nDisplay the Unicode code points of the original non-internationalized\ndomain name:\n03c0 3002 03b8 ff0e 0063 006f 006d\n\nAllow unassigned characters?:     False\nUse non-internationalized rules?: False\n\nConvert the non-internationalized domain name to international format...\nDisplay the encoded domain name:\n&quot;xn--1xa.xn--txa.com&quot;\n\nDisplay the Unicode code points of the encoded domain name:\n0078 006e 002d 002d 0031 0078 0061 002e 0078 006e 002d 002d 0074 0078 0061 002e 0063 006f\n006d\n\nConvert the internationalized domain name to non-international format...\nDisplay the Unicode code points of the reconstituted non-internationalized\ndomain name:\n03c0 002e 03b8 002e 0063 006f 006d\n\nVisually compare the code points of the reconstituted string to the original.\nNote that the reconstituted string contains standard label separators (U+002e).\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_IdnMapping_GetHashCode\">\r\n    \r\n            <a id=\"System_Globalization_IdnMapping_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a hash code for this <a class=\"xref\" href=\"system.globalization.idnmapping\" data-linktype=\"relative-path\">IdnMapping</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>One of four 32-bit signed constants derived from the properties of an <a class=\"xref\" href=\"system.globalization.idnmapping\" data-linktype=\"relative-path\">IdnMapping</a> object.  The return value has no special meaning and is not suitable for use in a hash code algorithm.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Override the GetHashCode method if your application needs to implement a meaningful hash code algorithm.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example assumes that a single string can contain multiple email addresses separated by spaces. It removes the local part and the @ character from each email address, and passes the resulting domain name to the <a class=\"xref\" href=\"system.globalization.idnmapping#System_Globalization_IdnMapping_GetAscii_System_String_System_Int32_\" data-linktype=\"relative-path\">GetAscii(String,Int32)</a> or <a class=\"xref\" href=\"system.globalization.idnmapping#System_Globalization_IdnMapping_GetAscii_System_String_System_Int32_System_Int32_\" data-linktype=\"relative-path\">GetAscii(String,Int32,Int32)</a> method to create a Punycode domain name. The <a class=\"xref\" href=\"system.globalization.idnmapping#System_Globalization_IdnMapping_GetUnicode_System_String_System_Int32_System_Int32_\" data-linktype=\"relative-path\">GetUnicode(String,Int32,Int32)</a> method then converts the Punycode domain name back into the original domain name.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.IdnMapping.GetAscii#3\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string email = &quot;johann_doe@b&#252;cher.com john_doe@hotmail.com иван@мойдомен.рф&quot;;\n      IdnMapping idn = new IdnMapping();\n      int start = 0, end = 0;\n      \n      while (end &gt;= 0) {\n         start = email.IndexOf(&quot;@&quot;, end);\n         end = email.IndexOf(&quot; &quot;, start);\n         string domain = String.Empty;\n\n         try {\n            string punyCode = String.Empty;\n            if (start &gt;= 0 &amp;&amp; end &gt;= 0) { \n               domain = email.Substring(start + 1, end - start - 1);\n               punyCode = idn.GetAscii(email, start + 1, end - start - 1);\n            }\n            else {\n               domain = email.Substring(start + 1);\n               punyCode = idn.GetAscii(email, start + 1);\n            }\n            string name2 = idn.GetUnicode(punyCode);\n            Console.WriteLine(&quot;{0} --&gt; {1} --&gt; {2}&quot;, domain, punyCode, name2); \n         }   \n         catch (ArgumentException) { \n            Console.WriteLine(&quot;{0} is not a valid domain name.&quot;, domain);\n         }\n         Console.WriteLine();\n      }   \n   }\n}\n// The example displays the following output:\n//       b&#252;cher.com --&gt; xn--bcher-kva.com --&gt; b&#252;cher.com\n//       \n//       hotmail.com --&gt; hotmail.com --&gt; hotmail.com\n//       \n//       мойдомен.рф --&gt; xn--d1acklchcc.xn--p1ai --&gt; мойдомен.рф\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.IdnMapping.GetAscii#3\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim email As String = &quot;johann_doe@b&#252;cher.com john_doe@hotmail.com иван@мойдомен.рф&quot;\n      Dim idn As New IdnMapping()\n      Dim start, [end] As Integer\n      \n      Do While [end] &gt;= 0\n         start = email.IndexOf(&quot;@&quot;, [end])\n         [end] = email.IndexOf(&quot; &quot;, start)\n         Dim domain As String = String.Empty\n         \n         Try\n            Dim punyCode As String = String.Empty\n            If start &gt;= 0 And [end] &gt;= 0 Then \n               domain = email.Substring(start + 1, [end] - start - 1)\n               punyCode = idn.GetAscii(email, start + 1, [end] - start - 1)\n            Else\n               domain = email.Substring(start + 1)\n               punyCode = idn.GetAscii(email, start + 1)\n            End If\n            Dim name2 As String = idn.GetUnicode(punyCode)\n            Console.WriteLine(&quot;{0} --&gt; {1} --&gt; {2}&quot;, domain, punyCode, name2) \n         Catch e As ArgumentException \n            Console.WriteLine(&quot;{0} is not a valid domain name.&quot;, domain)\n         End Try\n         Console.WriteLine()\n      Loop   \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       b&#252;cher.com --&gt; xn--bcher-kva.com --&gt; b&#252;cher.com\n&#39;       \n&#39;       hotmail.com --&gt; hotmail.com --&gt; hotmail.com\n&#39;       \n&#39;       мойдомен.рф --&gt; xn--d1acklchcc.xn--p1ai --&gt; мойдомен.рф\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_IdnMapping_GetUnicode_System_String_\">\r\n    \r\n            <a id=\"System_Globalization_IdnMapping_GetUnicode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetUnicode(String)</div>        \r\n          </div>\r\n    \r\n            <p>Decodes a string of one or more domain name labels, encoded according to the IDNA standard, to a string of Unicode characters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string GetUnicode (string ascii);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ascii</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to decode, which consists of one or more labels in the US-ASCII character range (U+0020 to U+007E) encoded according to the IDNA standard.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The Unicode equivalent of the IDNA substring specified by the <code>ascii</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>ascii</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>ascii</code> is invalid based on the <span class=\"xref\">stem.Globalization.IdnMapping.AllowUnassigned*</span> and <span class=\"xref\">stem.Globalization.IdnMapping.UseStd3AsciiRules*</span> properties, and the IDNA standard.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about domain names, labels, and label separators, see the remarks for the <a class=\"xref\" href=\"system.globalization.idnmapping#System_Globalization_IdnMapping_GetAscii_System_String_System_Int32_System_Int32_\" data-linktype=\"relative-path\">System.Globalization.IdnMapping.GetAscii(String,Int32,Int32)</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <a class=\"xref\" href=\"system.globalization.idnmapping#System_Globalization_IdnMapping_GetAscii_System_String_\" data-linktype=\"relative-path\">GetAscii(String)</a> method to convert an array of internationalized domain names to Punycode. The GetUnicode method then converts the Punycode domain name back into the original domain name, but replaces the original label separators with the standard label separator.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.IdnMapping.Class#1\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim names() As String = { &quot;b&#252;cher.com&quot;, &quot;мойдомен.рф&quot;, &quot;παράδειγμα.δοκιμή&quot;,\n                                &quot;mycharity&quot; + ChrW(&amp;h3002) + &quot;org&quot;,\n                                &quot;prose&quot; + ChrW(0) + &quot;ware.com&quot;, &quot;proseware..com&quot;, &quot;a.org&quot;, \n                                &quot;my_company.com&quot; }\n      Dim idn As New IdnMapping()\n      \n      For Each name In names\n         Try\n            Dim punyCode As String = idn.GetAscii(name)\n            Dim name2 As String = idn.GetUnicode(punyCode)\n            Console.WriteLine(&quot;{0} --&gt; {1} --&gt; {2}&quot;, name, punyCode, name2) \n            Console.WriteLine(&quot;Original: {0}&quot;, ShowCodePoints(name))\n            Console.WriteLine(&quot;Restored: {0}&quot;, ShowCodePoints(name2))\n         Catch e As ArgumentException \n            Console.WriteLine(&quot;{0} is not a valid domain name.&quot;, name)\n         End Try\n         Console.WriteLine()\n      Next   \n   End Sub\n   \n   Private Function ShowCodePoints(str1 As String) As String\n      Dim output As String = &quot;&quot;\n      For Each ch In str1\n         output += String.Format(&quot;U+{0} &quot;, Convert.ToUInt16(ch).ToString(&quot;X4&quot;))\n      Next\n      Return output\n   End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;    b&#252;cher.com --&gt; xn--bcher-kva.com --&gt; b&#252;cher.com\n&#39;    Original: U+0062 U+00FC U+0063 U+0068 U+0065 U+0072 U+002E U+0063 U+006F U+006D\n&#39;    Restored: U+0062 U+00FC U+0063 U+0068 U+0065 U+0072 U+002E U+0063 U+006F U+006D\n&#39;    \n&#39;    мойдомен.рф --&gt; xn--d1acklchcc.xn--p1ai --&gt; мойдомен.рф\n&#39;    Original: U+043C U+043E U+0439 U+0434 U+043E U+043C U+0435 U+043D U+002E U+0440 U+0444\n&#39;    Restored: U+043C U+043E U+0439 U+0434 U+043E U+043C U+0435 U+043D U+002E U+0440 U+0444\n&#39;    \n&#39;    παράδειγμα.δοκιμή --&gt; xn--hxajbheg2az3al.xn--jxalpdlp --&gt; παράδειγμα.δοκιμή\n&#39;    Original: U+03C0 U+03B1 U+03C1 U+03AC U+03B4 U+03B5 U+03B9 U+03B3 U+03BC U+03B1 U+002E U+03B4 U+03BF U+03BA U+03B9 U+03BC U+03AE\n&#39;    Restored: U+03C0 U+03B1 U+03C1 U+03AC U+03B4 U+03B5 U+03B9 U+03B3 U+03BC U+03B1 U+002E U+03B4 U+03BF U+03BA U+03B9 U+03BC U+03AE\n&#39;    \n&#39;    mycharity。org --&gt; mycharity.org --&gt; mycharity.org\n&#39;    Original: U+006D U+0079 U+0063 U+0068 U+0061 U+0072 U+0069 U+0074 U+0079 U+3002 U+006F U+0072 U+0067\n&#39;    Restored: U+006D U+0079 U+0063 U+0068 U+0061 U+0072 U+0069 U+0074 U+0079 U+002E U+006F U+0072 U+0067\n&#39;    \n&#39;    prose ware.com is not a valid domain name.\n&#39;    \n&#39;    proseware..com is not a valid domain name.\n&#39;    \n&#39;    a.org --&gt; a.org --&gt; a.org\n&#39;    Original: U+0061 U+002E U+006F U+0072 U+0067\n&#39;    Restored: U+0061 U+002E U+006F U+0072 U+0067\n&#39;    \n&#39;    my_company.com --&gt; my_company.com --&gt; my_company.com\n&#39;    Original: U+006D U+0079 U+005F U+0063 U+006F U+006D U+0070 U+0061 U+006E U+0079 U+002E U+0063 U+006F U+006D\n&#39;    Restored: U+006D U+0079 U+005F U+0063 U+006F U+006D U+0070 U+0061 U+006E U+0079 U+002E U+0063 U+006F U+006D\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.IdnMapping.Class#1\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string[] names = { &quot;b&#252;cher.com&quot;, &quot;мойдомен.рф&quot;, &quot;παράδειγμα.δοκιμή&quot;,\n                         &quot;mycharity\\u3002org&quot;,\n                         &quot;prose\\u0000ware.com&quot;, &quot;proseware..com&quot;, &quot;a.org&quot;, \n                         &quot;my_company.com&quot; };\n      IdnMapping idn = new IdnMapping();\n      \n      foreach (var name in names) {\n         try {\n            string punyCode = idn.GetAscii(name);\n            string name2 = idn.GetUnicode(punyCode);\n            Console.WriteLine(&quot;{0} --&gt; {1} --&gt; {2}&quot;, name, punyCode, name2); \n            Console.WriteLine(&quot;Original: {0}&quot;, ShowCodePoints(name));\n            Console.WriteLine(&quot;Restored: {0}&quot;, ShowCodePoints(name2));\n         }   \n         catch (ArgumentException) { \n            Console.WriteLine(&quot;{0} is not a valid domain name.&quot;, name);\n         }\n         Console.WriteLine();\n      }   \n   }\n\n   private static string ShowCodePoints(string str1) \n   {\n      string output = &quot;&quot;;\n      foreach (var ch in str1)\n         output += String.Format(&quot;U+{0} &quot;, Convert.ToUInt16(ch).ToString(&quot;X4&quot;));\n      \n      return output;\n   }\n}\n// The example displays the following output:\n//    b&#252;cher.com --&gt; xn--bcher-kva.com --&gt; b&#252;cher.com\n//    Original: U+0062 U+00FC U+0063 U+0068 U+0065 U+0072 U+002E U+0063 U+006F U+006D\n//    Restored: U+0062 U+00FC U+0063 U+0068 U+0065 U+0072 U+002E U+0063 U+006F U+006D\n//    \n//    мойдомен.рф --&gt; xn--d1acklchcc.xn--p1ai --&gt; мойдомен.рф\n//    Original: U+043C U+043E U+0439 U+0434 U+043E U+043C U+0435 U+043D U+002E U+0440 U+0444\n//    Restored: U+043C U+043E U+0439 U+0434 U+043E U+043C U+0435 U+043D U+002E U+0440 U+0444\n//    \n//    παράδειγμα.δοκιμή --&gt; xn--hxajbheg2az3al.xn--jxalpdlp --&gt; παράδειγμα.δοκιμή\n//    Original: U+03C0 U+03B1 U+03C1 U+03AC U+03B4 U+03B5 U+03B9 U+03B3 U+03BC U+03B1 U+002E U+03B4 U+03BF U+03BA U+03B9 U+03BC U+03AE\n//    Restored: U+03C0 U+03B1 U+03C1 U+03AC U+03B4 U+03B5 U+03B9 U+03B3 U+03BC U+03B1 U+002E U+03B4 U+03BF U+03BA U+03B9 U+03BC U+03AE\n//    \n//    mycharity。org --&gt; mycharity.org --&gt; mycharity.org\n//    Original: U+006D U+0079 U+0063 U+0068 U+0061 U+0072 U+0069 U+0074 U+0079 U+3002 U+006F U+0072 U+0067\n//    Restored: U+006D U+0079 U+0063 U+0068 U+0061 U+0072 U+0069 U+0074 U+0079 U+002E U+006F U+0072 U+0067\n//    \n//    prose ware.com is not a valid domain name.\n//    \n//    proseware..com is not a valid domain name.\n//    \n//    a.org --&gt; a.org --&gt; a.org\n//    Original: U+0061 U+002E U+006F U+0072 U+0067\n//    Restored: U+0061 U+002E U+006F U+0072 U+0067\n//    \n//    my_company.com --&gt; my_company.com --&gt; my_company.com\n//    Original: U+006D U+0079 U+005F U+0063 U+006F U+006D U+0070 U+0061 U+006E U+0079 U+002E U+0063 U+006F U+006D\n//    Restored: U+006D U+0079 U+005F U+0063 U+006F U+006D U+0070 U+0061 U+006E U+0079 U+002E U+0063 U+006F U+006D\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_IdnMapping_GetUnicode_System_String_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_IdnMapping_GetUnicode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetUnicode(String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Decodes a substring of one or more domain name labels, encoded according to the IDNA standard, to a string of Unicode characters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string GetUnicode (string ascii, int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ascii</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to decode, which consists of one or more labels in the US-ASCII character range (U+0020 to U+007E) encoded according to the IDNA standard.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A zero-based offset into <code>ascii</code> that specifies the start of the substring to decode. The decoding operation continues to the end of the <code>ascii</code> string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The Unicode equivalent of the IDNA substring specified by the <code>ascii</code> and <code>index</code> parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>ascii</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>index</code> is greater than the length of <code>ascii</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>ascii</code> is invalid based on the <span class=\"xref\">stem.Globalization.IdnMapping.AllowUnassigned*</span> and <span class=\"xref\">stem.Globalization.IdnMapping.UseStd3AsciiRules*</span> properties, and the IDNA standard.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about domain names, labels, and label separators, see the remarks for the <a class=\"xref\" href=\"system.globalization.idnmapping#System_Globalization_IdnMapping_GetAscii_System_String_System_Int32_System_Int32_\" data-linktype=\"relative-path\">System.Globalization.IdnMapping.GetAscii(String,Int32,Int32)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_IdnMapping_GetUnicode_System_String_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_IdnMapping_GetUnicode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetUnicode(String,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Decodes a substring of a specified length that contains one or more domain name labels, encoded according to the IDNA standard, to a string of Unicode characters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string GetUnicode (string ascii, int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ascii</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to decode, which consists of one or more labels in the US-ASCII character range (U+0020 to U+007E) encoded according to the IDNA standard.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A zero-based offset into <code>ascii</code> that specifies the start of the substring.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of characters to convert in the substring that starts at the position specified by <code>index</code> in the <code>ascii</code> string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The Unicode equivalent of the IDNA substring specified by the <code>ascii</code>, <code>index</code>, and <code>count</code> parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>ascii</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> or <code>count</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>index</code> is greater than the length of <code>ascii</code>.  </p>\n<p> -or-  </p>\n<p> <code>index</code> is greater than the length of <code>ascii</code> minus <code>count</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>ascii</code> is invalid based on the <span class=\"xref\">stem.Globalization.IdnMapping.AllowUnassigned*</span> and <span class=\"xref\">stem.Globalization.IdnMapping.UseStd3AsciiRules*</span> properties, and the IDNA standard.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about domain names, labels, and label separators, see the remarks for the <a class=\"xref\" href=\"system.globalization.idnmapping#System_Globalization_IdnMapping_GetAscii_System_String_System_Int32_System_Int32_\" data-linktype=\"relative-path\">System.Globalization.IdnMapping.GetAscii(String,Int32,Int32)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Globalization.IdnMapping.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Globalization.IdnMapping.yml\">\r\n<meta name=\"APIName\" content=\"System.Globalization.IdnMapping\">\r\n<meta name=\"APIName\" content=\"System.Globalization.IdnMapping..ctor\">\r\n<meta name=\"APIName\" content=\"System.Globalization.IdnMapping.AllowUnassigned\">\r\n<meta name=\"APIName\" content=\"System.Globalization.IdnMapping.Equals\">\r\n<meta name=\"APIName\" content=\"System.Globalization.IdnMapping.GetAscii\">\r\n<meta name=\"APIName\" content=\"System.Globalization.IdnMapping.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Globalization.IdnMapping.GetUnicode\">\r\n<meta name=\"APIName\" content=\"System.Globalization.IdnMapping.UseStd3AsciiRules\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"e4e7081c-4c81-7639-e90c-b124ab86cb9a\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Supports the use of non-ASCII characters for Internet domain names. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Globalization/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Globalization.IdnMapping\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Globalization.IdnMapping.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Globalization.IdnMapping.yml","open_to_public_contributors":true,"api_name":["System.Globalization.IdnMapping","System.Globalization.IdnMapping..ctor","System.Globalization.IdnMapping.AllowUnassigned","System.Globalization.IdnMapping.Equals","System.Globalization.IdnMapping.GetAscii","System.Globalization.IdnMapping.GetHashCode","System.Globalization.IdnMapping.GetUnicode","System.Globalization.IdnMapping.UseStd3AsciiRules"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Globalization.IdnMapping","System::Globalization::IdnMapping","System.Globalization.IdnMapping.#ctor","System::Globalization::IdnMapping::#ctor","System.Globalization.IdnMapping.AllowUnassigned","System::Globalization::IdnMapping::AllowUnassigned","System.Globalization.IdnMapping.Equals","System::Globalization::IdnMapping::Equals","System.Globalization.IdnMapping.GetAscii","System::Globalization::IdnMapping::GetAscii","System.Globalization.IdnMapping.GetHashCode","System::Globalization::IdnMapping::GetHashCode","System.Globalization.IdnMapping.GetUnicode","System::Globalization::IdnMapping::GetUnicode","System.Globalization.IdnMapping.UseStd3AsciiRules","System::Globalization::IdnMapping::UseStd3AsciiRules"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"e4e7081c-4c81-7639-e90c-b124ab86cb9a","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Globalization/IdnMapping.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IdnMapping class | Microsoft Docs","_op_ogTitle":"IdnMapping class","description":"Supports the use of non-ASCII characters for Internet domain names. This class cannot be inherited.\n","toc_asset_id":"_splitted/System.Globalization/toc.json","toc_rel":"_splitted/System.Globalization/toc.json","source_url":"","ms.assetid":"System.Globalization.IdnMapping","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.globalization.idnmapping","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.globalization.idnmapping","fileRelativePath":"System.Globalization.IdnMapping.html"},"themesRelativePathToOutputRoot":"_themes/"}