{"content":"    \r\n    <h1 id=\"System_Threading_AbandonedMutexException\">\r\n      <span class=\"lang-csharp\">AbandonedMutexException</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>The exception that is thrown when one thread acquires a <a class=\"xref\" href=\"system.threading.mutex\" data-linktype=\"relative-path\">Mutex</a> object that another thread has abandoned by exiting without releasing it.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(false)]\npublic class AbandonedMutexException : SystemException</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.systemexception\" data-linktype=\"relative-path\">System.SystemException</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l3\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">AbandonedMutexException</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_Data\" data-linktype=\"relative-path\">Data</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_GetBaseException\" data-linktype=\"relative-path\">GetBaseException()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"relative-path\">GetObjectData(SerializationInfo,StreamingContext)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_HelpLink\" data-linktype=\"relative-path\">HelpLink</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_HResult\" data-linktype=\"relative-path\">HResult</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_InnerException\" data-linktype=\"relative-path\">InnerException</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_Message\" data-linktype=\"relative-path\">Message</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_SerializeObjectState\" data-linktype=\"relative-path\">SerializeObjectState</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_Source\" data-linktype=\"relative-path\">Source</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_StackTrace\" data-linktype=\"relative-path\">StackTrace</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_TargetSite\" data-linktype=\"relative-path\">TargetSite</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>When a thread abandons a mutex, the exception is thrown in the next thread that acquires the mutex. The thread might acquire the mutex because it was already waiting on the mutex or because it enters the mutex at a later time.  </p>\n<p> An abandoned mutex indicates a serious programming error. When a thread exits without releasing the mutex, the data structures protected by the mutex might not be in a consistent state. Prior to version 2.0 of the .NET Framework, such problems were hard to discover because no exception was thrown if a wait completed as the result of an abandoned mutex. For more information, see the <a class=\"xref\" href=\"system.threading.mutex\" data-linktype=\"relative-path\">Mutex</a> class.  </p>\n<p> The next thread to request ownership of the mutex can handle this exception and proceed, provided that the integrity of the data structures can be verified.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_AbandonedMutexException__ctor\" data-linktype=\"self-bookmark\">AbandonedMutexException()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.threading.abandonedmutexexception\" data-linktype=\"relative-path\">AbandonedMutexException</a> class with default values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_AbandonedMutexException__ctor_System_String_\" data-linktype=\"self-bookmark\">AbandonedMutexException(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.threading.abandonedmutexexception\" data-linktype=\"relative-path\">AbandonedMutexException</a> class with a specified error message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_AbandonedMutexException__ctor_System_Int32_System_Threading_WaitHandle_\" data-linktype=\"self-bookmark\">AbandonedMutexException(Int32,WaitHandle)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.threading.abandonedmutexexception\" data-linktype=\"relative-path\">AbandonedMutexException</a> class with a specified index for the abandoned mutex, if applicable, and a <a class=\"xref\" href=\"system.threading.mutex\" data-linktype=\"relative-path\">Mutex</a> object that represents the mutex.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_AbandonedMutexException__ctor_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"self-bookmark\">AbandonedMutexException(SerializationInfo,StreamingContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.threading.abandonedmutexexception\" data-linktype=\"relative-path\">AbandonedMutexException</a> class with serialized data.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_AbandonedMutexException__ctor_System_String_System_Exception_\" data-linktype=\"self-bookmark\">AbandonedMutexException(String,Exception)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.threading.abandonedmutexexception\" data-linktype=\"relative-path\">AbandonedMutexException</a> class with a specified error message and inner exception.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_AbandonedMutexException__ctor_System_String_System_Int32_System_Threading_WaitHandle_\" data-linktype=\"self-bookmark\">AbandonedMutexException(String,Int32,WaitHandle)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.threading.abandonedmutexexception\" data-linktype=\"relative-path\">AbandonedMutexException</a> class with a specified error message, the index of the abandoned mutex, if applicable, and the abandoned mutex.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_AbandonedMutexException__ctor_System_String_System_Exception_System_Int32_System_Threading_WaitHandle_\" data-linktype=\"self-bookmark\">AbandonedMutexException(String,Exception,Int32,WaitHandle)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.threading.abandonedmutexexception\" data-linktype=\"relative-path\">AbandonedMutexException</a> class with a specified error message, the inner exception, the index for the abandoned mutex, if applicable, and a <a class=\"xref\" href=\"system.threading.mutex\" data-linktype=\"relative-path\">Mutex</a> object that represents the mutex.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_AbandonedMutexException_Mutex\" data-linktype=\"self-bookmark\">Mutex</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the abandoned mutex that caused the exception, if known.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_AbandonedMutexException_MutexIndex\" data-linktype=\"self-bookmark\">MutexIndex</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the index of the abandoned mutex that caused the exception, if known.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_AbandonedMutexException__ctor\">\r\n    \r\n            <a id=\"System_Threading_AbandonedMutexException__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AbandonedMutexException()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.threading.abandonedmutexexception\" data-linktype=\"relative-path\">AbandonedMutexException</a> class with default values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public AbandonedMutexException ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor initializes the <a class=\"xref\" href=\"system.exception#System_Exception_Message_\" data-linktype=\"relative-path\">Message</a> property of the new instance to a system-supplied message that describes the error, such as &quot;The wait completed due to an abandoned mutex.&quot; This message takes into account the current system culture.  </p>\n<p> The following table shows the initial property values for an instance of <a class=\"xref\" href=\"system.threading.abandonedmutexexception\" data-linktype=\"relative-path\">AbandonedMutexException</a>.  </p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a></td>\n<td><code>null</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.exception#System_Exception_Message_\" data-linktype=\"relative-path\">Message</a></td>\n<td>The system-supplied error message string.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.threading.abandonedmutexexception#System_Threading_AbandonedMutexException_Mutex_\" data-linktype=\"relative-path\">Mutex</a></td>\n<td><code>null</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.threading.abandonedmutexexception#System_Threading_AbandonedMutexException_MutexIndex_\" data-linktype=\"relative-path\">MutexIndex</a></td>\n<td>–1 (minus one).</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_AbandonedMutexException__ctor_System_String_\">\r\n    \r\n            <a id=\"System_Threading_AbandonedMutexException__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AbandonedMutexException(String)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.threading.abandonedmutexexception\" data-linktype=\"relative-path\">AbandonedMutexException</a> class with a specified error message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public AbandonedMutexException (string message);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>message</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An error message that explains the reason for the exception.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The content of <code>message</code> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.  </p>\n<p> The following table shows the initial property values for an instance of <a class=\"xref\" href=\"system.threading.abandonedmutexexception\" data-linktype=\"relative-path\">AbandonedMutexException</a> initialized with this constructor.  </p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a></td>\n<td><code>null</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.exception#System_Exception_Message_\" data-linktype=\"relative-path\">Message</a></td>\n<td><code>message</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.threading.abandonedmutexexception#System_Threading_AbandonedMutexException_Mutex_\" data-linktype=\"relative-path\">Mutex</a></td>\n<td><code>null</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.threading.abandonedmutexexception#System_Threading_AbandonedMutexException_MutexIndex_\" data-linktype=\"relative-path\">MutexIndex</a></td>\n<td>–1 (minus one).</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_AbandonedMutexException__ctor_System_Int32_System_Threading_WaitHandle_\">\r\n    \r\n            <a id=\"System_Threading_AbandonedMutexException__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AbandonedMutexException(Int32,WaitHandle)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.threading.abandonedmutexexception\" data-linktype=\"relative-path\">AbandonedMutexException</a> class with a specified index for the abandoned mutex, if applicable, and a <a class=\"xref\" href=\"system.threading.mutex\" data-linktype=\"relative-path\">Mutex</a> object that represents the mutex.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public AbandonedMutexException (int location, System.Threading.WaitHandle handle);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>location</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the abandoned mutex in the array of wait handles if the exception is thrown for the <span class=\"xref\">stem.Threading.WaitHandle.WaitAny*</span> method, or –1 if the exception is thrown for the <span class=\"xref\">stem.Threading.WaitHandle.WaitOne*</span> or <span class=\"xref\">stem.Threading.WaitHandle.WaitAll*</span> methods.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>handle</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.waithandle\" data-linktype=\"relative-path\">WaitHandle</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.threading.mutex\" data-linktype=\"relative-path\">Mutex</a> object that represents the abandoned mutex.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor initializes the <a class=\"xref\" href=\"system.exception#System_Exception_Message_\" data-linktype=\"relative-path\">Message</a> property of the new instance to a system-supplied message that describes the error, such as &quot;The wait completed due to an abandoned mutex.&quot; This message takes into account the current system culture.  </p>\n<p> The following table shows the initial property values for an instance of <a class=\"xref\" href=\"system.threading.abandonedmutexexception\" data-linktype=\"relative-path\">AbandonedMutexException</a> initialized with this constructor.  </p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a></td>\n<td><code>null</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.exception#System_Exception_Message_\" data-linktype=\"relative-path\">Message</a></td>\n<td>A system-supplied error message string.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.threading.abandonedmutexexception#System_Threading_AbandonedMutexException_Mutex_\" data-linktype=\"relative-path\">Mutex</a></td>\n<td><code>handle</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.threading.abandonedmutexexception#System_Threading_AbandonedMutexException_MutexIndex_\" data-linktype=\"relative-path\">MutexIndex</a></td>\n<td><code>location</code>.</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_AbandonedMutexException__ctor_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\">\r\n    \r\n            <a id=\"System_Threading_AbandonedMutexException__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AbandonedMutexException(SerializationInfo,StreamingContext)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.threading.abandonedmutexexception\" data-linktype=\"relative-path\">AbandonedMutexException</a> class with serialized data.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected AbandonedMutexException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>info</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> object that holds the serialized object data about the exception being thrown.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>context</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a> object that contains contextual information about the source or destination.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. For more information, see <a href=\"../Topic/XML%20and%20SOAP%20Serialization.md\" data-linktype=\"relative-path\">XML and SOAP Serialization</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_AbandonedMutexException__ctor_System_String_System_Exception_\">\r\n    \r\n            <a id=\"System_Threading_AbandonedMutexException__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AbandonedMutexException(String,Exception)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.threading.abandonedmutexexception\" data-linktype=\"relative-path\">AbandonedMutexException</a> class with a specified error message and inner exception.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public AbandonedMutexException (string message, Exception inner);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>message</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An error message that explains the reason for the exception.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inner</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The exception that is the cause of the current exception. If the <code>inner</code> parameter is not <code>null</code>, the current exception is raised in a <code>catch</code> block that handles the inner exception.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The content of <code>message</code> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.  </p>\n<p> An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a> property. The <a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a> property returns the same value that is passed into the constructor, or <code>null</code> if the <a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a> property does not supply the inner exception value to the constructor.  </p>\n<p> The following table shows the initial property values for an instance of <a class=\"xref\" href=\"system.threading.abandonedmutexexception\" data-linktype=\"relative-path\">AbandonedMutexException</a> initialized with this constructor.  </p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a></td>\n<td><code>inner</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.exception#System_Exception_Message_\" data-linktype=\"relative-path\">Message</a></td>\n<td><code>message</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.threading.abandonedmutexexception#System_Threading_AbandonedMutexException_Mutex_\" data-linktype=\"relative-path\">Mutex</a></td>\n<td><code>null</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.threading.abandonedmutexexception#System_Threading_AbandonedMutexException_MutexIndex_\" data-linktype=\"relative-path\">MutexIndex</a></td>\n<td>–1 (minus one).</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_AbandonedMutexException__ctor_System_String_System_Int32_System_Threading_WaitHandle_\">\r\n    \r\n            <a id=\"System_Threading_AbandonedMutexException__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AbandonedMutexException(String,Int32,WaitHandle)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.threading.abandonedmutexexception\" data-linktype=\"relative-path\">AbandonedMutexException</a> class with a specified error message, the index of the abandoned mutex, if applicable, and the abandoned mutex.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public AbandonedMutexException (string message, int location, System.Threading.WaitHandle handle);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>message</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An error message that explains the reason for the exception.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>location</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the abandoned mutex in the array of wait handles if the exception is thrown for the <span class=\"xref\">stem.Threading.WaitHandle.WaitAny*</span> method, or –1 if the exception is thrown for the <span class=\"xref\">stem.Threading.WaitHandle.WaitOne*</span> or <span class=\"xref\">stem.Threading.WaitHandle.WaitAll*</span> methods.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>handle</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.waithandle\" data-linktype=\"relative-path\">WaitHandle</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.threading.mutex\" data-linktype=\"relative-path\">Mutex</a> object that represents the abandoned mutex.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The content of <code>message</code> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.  </p>\n<p> The following table shows the initial property values for an instance of <a class=\"xref\" href=\"system.threading.abandonedmutexexception\" data-linktype=\"relative-path\">AbandonedMutexException</a> initialized with this constructor.  </p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a></td>\n<td><code>null</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.exception#System_Exception_Message_\" data-linktype=\"relative-path\">Message</a></td>\n<td><code>message</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.threading.abandonedmutexexception#System_Threading_AbandonedMutexException_Mutex_\" data-linktype=\"relative-path\">Mutex</a></td>\n<td><code>handle</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.threading.abandonedmutexexception#System_Threading_AbandonedMutexException_MutexIndex_\" data-linktype=\"relative-path\">MutexIndex</a></td>\n<td><code>location</code>.</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_AbandonedMutexException__ctor_System_String_System_Exception_System_Int32_System_Threading_WaitHandle_\">\r\n    \r\n            <a id=\"System_Threading_AbandonedMutexException__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AbandonedMutexException(String,Exception,Int32,WaitHandle)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.threading.abandonedmutexexception\" data-linktype=\"relative-path\">AbandonedMutexException</a> class with a specified error message, the inner exception, the index for the abandoned mutex, if applicable, and a <a class=\"xref\" href=\"system.threading.mutex\" data-linktype=\"relative-path\">Mutex</a> object that represents the mutex.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public AbandonedMutexException (string message, Exception inner, int location, System.Threading.WaitHandle handle);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>message</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An error message that explains the reason for the exception.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inner</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The exception that is the cause of the current exception. If the <code>inner</code> parameter is not <code>null</code>, the current exception is raised in a <code>catch</code> block that handles the inner exception.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>location</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the abandoned mutex in the array of wait handles if the exception is thrown for the <span class=\"xref\">stem.Threading.WaitHandle.WaitAny*</span> method, or –1 if the exception is thrown for the <span class=\"xref\">stem.Threading.WaitHandle.WaitOne*</span> or <span class=\"xref\">stem.Threading.WaitHandle.WaitAll*</span> methods.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>handle</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.waithandle\" data-linktype=\"relative-path\">WaitHandle</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.threading.mutex\" data-linktype=\"relative-path\">Mutex</a> object that represents the abandoned mutex.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The content of <code>message</code> is a text string intended to inform the user about the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.  </p>\n<p> An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a> property. The <a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a> property returns the same value that is passed into the constructor, or <code>null</code> if the <a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a> property does not supply the inner exception value to the constructor.  </p>\n<p> The following table shows the initial property values for an instance of <a class=\"xref\" href=\"system.threading.abandonedmutexexception\" data-linktype=\"relative-path\">AbandonedMutexException</a> initialized with this constructor.  </p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a></td>\n<td><code>inner</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.exception#System_Exception_Message_\" data-linktype=\"relative-path\">Message</a></td>\n<td><code>message</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.threading.abandonedmutexexception#System_Threading_AbandonedMutexException_Mutex_\" data-linktype=\"relative-path\">Mutex</a></td>\n<td><code>handle</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.threading.abandonedmutexexception#System_Threading_AbandonedMutexException_MutexIndex_\" data-linktype=\"relative-path\">MutexIndex</a></td>\n<td><code>location</code>.</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_AbandonedMutexException_Mutex\">\r\n    \r\n            <a id=\"System_Threading_AbandonedMutexException_Mutex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Mutex</div>        \r\n          </div>\r\n    \r\n            <p>Gets the abandoned mutex that caused the exception, if known.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Mutex Mutex { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.mutex\" data-linktype=\"relative-path\">Mutex</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.threading.mutex\" data-linktype=\"relative-path\">Mutex</a> object that represents the abandoned mutex, or <code>null</code> if the abandoned mutex could not be identified.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the exception is thrown on a call to the <a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitAny_\" data-linktype=\"relative-path\">WaitAny</a> method, the <a class=\"xref\" href=\"system.threading.mutex\" data-linktype=\"relative-path\">Mutex</a> returned is the abandoned mutex with the lowest index in the array of <a class=\"xref\" href=\"system.threading.waithandle\" data-linktype=\"relative-path\">WaitHandle</a> objects that was passed to <a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitAny_\" data-linktype=\"relative-path\">WaitAny</a>, or <code>null</code> if the abandoned mutex could not be identified. If the exception is thrown on a call to <a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitOne_\" data-linktype=\"relative-path\">WaitOne</a> or <a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitAll_\" data-linktype=\"relative-path\">WaitAll</a>, this property always returns <code>null</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_AbandonedMutexException_MutexIndex\">\r\n    \r\n            <a id=\"System_Threading_AbandonedMutexException_MutexIndex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MutexIndex</div>        \r\n          </div>\r\n    \r\n            <p>Gets the index of the abandoned mutex that caused the exception, if known.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int MutexIndex { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The index, in the array of wait handles passed to the <span class=\"xref\">stem.Threading.WaitHandle.WaitAny*</span> method, of the <a class=\"xref\" href=\"system.threading.mutex\" data-linktype=\"relative-path\">Mutex</a> object that represents the abandoned mutex, or –1 if the index of the abandoned mutex could not be determined.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the exception is thrown on a call to the <a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitAny_\" data-linktype=\"relative-path\">WaitAny</a> method, this property returns the index of the abandoned mutex with the lowest index in the array of <a class=\"xref\" href=\"system.threading.waithandle\" data-linktype=\"relative-path\">WaitHandle</a> objects that was passed to <a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitAny_\" data-linktype=\"relative-path\">WaitAny</a>, or –1 if the abandoned mutex could not be identified. If the exception is thrown on a call to <a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitOne_\" data-linktype=\"relative-path\">WaitOne</a> or <a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitAll_\" data-linktype=\"relative-path\">WaitAll</a>, this property always returns –1.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example executes a thread that abandons five mutexes. The abandoned mutexes are used to demonstrate the effects on the <a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitOne_\" data-linktype=\"relative-path\">WaitOne</a>, <a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitAny_\" data-linktype=\"relative-path\">WaitAny</a>, and <a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitAll_\" data-linktype=\"relative-path\">WaitAll</a> method calls. The value of the MutexIndex property is displayed for the <a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitAny_\" data-linktype=\"relative-path\">WaitAny</a> call.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The call to <a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitAny_\" data-linktype=\"relative-path\">WaitAny</a> is interrupted by one of the abandoned mutexes. The other abandoned mutex could still cause an <a class=\"xref\" href=\"system.threading.abandonedmutexexception\" data-linktype=\"relative-path\">AbandonedMutexException</a> to be thrown by subsequent wait methods.  </p>\n</div>\n<pre><code class=\"lang-cpp\" name=\"System.Threading.AbandonedMutexException#1\">using namespace System;\nusing namespace System::Threading;\n\nnamespace SystemThreadingExample\n{\n    public ref class Example\n    {\n    private:\n        static ManualResetEvent^ dummyEvent = \n            gcnew ManualResetEvent(false);\n            \n        static Mutex^ orphanMutex1 = gcnew Mutex;\n        static Mutex^ orphanMutex2 = gcnew Mutex;\n        static Mutex^ orphanMutex3 = gcnew Mutex;\n        static Mutex^ orphanMutex4 = gcnew Mutex;\n        static Mutex^ orphanMutex5 = gcnew Mutex;\n        \n    public:\n        static void ProduceAbandonMutexException(void)\n        {\n            \n            // Start a thread that grabs all five mutexes, and then\n            // abandons them.\n            Thread^ abandonThread = \n                gcnew Thread(gcnew ThreadStart(AbandonMutex));\n\n            abandonThread-&gt;Start();\n            \n            // Make sure the thread is finished.\n            abandonThread-&gt;Join();\n            \n            // Wait on one of the abandoned mutexes. The WaitOne\n            // throws an AbandonedMutexException.\n            try\n            {\n                orphanMutex1-&gt;WaitOne();\n                Console::WriteLine(&quot;WaitOne succeeded.&quot;);\n            }\n            catch (AbandonedMutexException^ ex) \n            {\n                Console::WriteLine(&quot;Exception in WaitOne: {0}&quot;, \n                    ex-&gt;Message);\n            }\n            finally\n            {\n                \n                // Whether or not the exception was thrown, \n                // the current thread owns the mutex, and \n                // must release it.\n                orphanMutex1-&gt;ReleaseMutex();\n            }\n\n            \n            // Create an array of wait handles, consisting of one\n            // ManualResetEvent and two mutexes, using two more of\n            // the abandoned mutexes.\n    \t    array &lt;WaitHandle^&gt;^ waitFor = {dummyEvent, \n                orphanMutex2, orphanMutex3};\n            \n            // WaitAny returns when any of the wait handles in the \n            // array is signaled. Either of the two abandoned mutexes\n            // satisfy the wait, but lower of the two index values is\n            // returned by MutexIndex. Note that the Try block and\n            // the Catch block obtain the index in different ways.\n            try\n            {\n                int index = WaitHandle::WaitAny(waitFor);\n                Console::WriteLine(&quot;WaitAny succeeded.&quot;);\n                (safe_cast&lt;Mutex^&gt;(waitFor[index]))-&gt;ReleaseMutex();\n            }\n            catch (AbandonedMutexException^ ex) \n            {\n                Console::WriteLine(&quot;Exception in WaitAny at index {0}&quot;\n                    &quot;\\r<br>&nbsp;&nbsp;&nbsp;&nbsp;Message: {1}&quot;, ex-&gt;MutexIndex, \n                    ex-&gt;Message);\n                (safe_cast&lt;Mutex^&gt;(waitFor[ex-&gt;MutexIndex]))-&gt;\n                    ReleaseMutex();\n            }\n\n            orphanMutex3-&gt;ReleaseMutex();\n            \n            // Use two more of the abandoned mutexes for the WaitAll \n            // call. WaitAll doesn&#39;t return until all wait handles \n            // are signaled, so the ManualResetEvent must be signaled \n            // by calling Set().\n            dummyEvent-&gt;Set();\n            waitFor[1] = orphanMutex4;\n            waitFor[2] = orphanMutex5;\n            \n            // Because WaitAll requires all the wait handles to be\n            // signaled, both mutexes must be released even if the\n            // exception is thrown. Thus, the ReleaseMutex calls are \n            // placed in the Finally block. Again, MutexIndex returns\n            // the lower of the two index values for the abandoned\n            // mutexes.\n            //  \n            try\n            {\n                WaitHandle::WaitAll(waitFor);\n                Console::WriteLine(&quot;WaitAll succeeded.&quot;);\n            }\n            catch (AbandonedMutexException^ ex) \n            {\n                Console::WriteLine(&quot;Exception in WaitAny at index {0}&quot;\n                    &quot;\\r<br>&nbsp;&nbsp;&nbsp;&nbsp;Message: {1}&quot;, ex-&gt;MutexIndex, \n                    ex-&gt;Message);\n            }\n            finally\n            {\n                orphanMutex4-&gt;ReleaseMutex();\n                orphanMutex5-&gt;ReleaseMutex();\n            }\n\n        }\n\n\n    private:\n        [MTAThread]\n        static void AbandonMutex()\n        {\n            orphanMutex1-&gt;WaitOne();\n            orphanMutex2-&gt;WaitOne();\n            orphanMutex3-&gt;WaitOne();\n            orphanMutex4-&gt;WaitOne();\n            orphanMutex5-&gt;WaitOne();\n            Console::WriteLine(\n                &quot;Thread exits without releasing the mutexes.&quot;);\n        }\n    };   \n}\n\n//Entry point of example application\n[MTAThread]\nint main(void)\n{\n    SystemThreadingExample::Example::ProduceAbandonMutexException();\n}\n\n// This code example produces the following output:\n// Thread exits without releasing the mutexes.\n// Exception in WaitOne: The wait completed due to an abandoned mutex.\n// Exception in WaitAny at index 1\n//         Message: The wait completed due to an abandoned mutex.\n// Exception in WaitAll at index -1\n//         Message: The wait completed due to an abandoned mutex.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.AbandonedMutexException#1\">Option Explicit\nImports System\nImports System.Threading\n\nPublic Class Example\n    Private Shared _dummy As New ManualResetEvent(False)\n\n    Private Shared _orphan1 As New Mutex()\n    Private Shared _orphan2 As New Mutex()\n    Private Shared _orphan3 As New Mutex()\n    Private Shared _orphan4 As New Mutex()\n    Private Shared _orphan5 As New Mutex()\n\n    &lt;MTAThread&gt; _\n    Public Shared Sub Main()\n        &#39; Start a thread that takes all five mutexes, and then\n        &#39; ends without releasing them.\n        &#39;\n        Dim t As New Thread(AddressOf AbandonMutex)\n        t.Start()\n        &#39; Make sure the thread is finished.\n        t.Join()\n\n        &#39; Wait on one of the abandoned mutexes. The WaitOne returns\n        &#39; immediately, because its wait condition is satisfied by\n        &#39; the abandoned mutex, but on return it throws\n        &#39; AbandonedMutexException.\n        Try\n            _orphan1.WaitOne()\n            Console.WriteLine(&quot;WaitOne succeeded.&quot;)\n        Catch ex As AbandonedMutexException\n            Console.WriteLine(&quot;Exception on return from WaitOne.&quot; _\n                &amp; vbCrLf &amp; vbTab &amp; &quot;Message: &quot; _\n                &amp; ex.Message) \n        Finally\n            &#39; Whether or not the exception was thrown, the current\n            &#39; thread owns the mutex, and must release it.\n            &#39;\n            _orphan1.ReleaseMutex()\n        End Try\n\n        &#39; Create an array of wait handles, consisting of one\n        &#39; ManualResetEvent and two mutexes, using two more of the\n        &#39; abandoned mutexes.\n        Dim waitFor(2) As WaitHandle\n        waitFor(0) = _dummy\n        waitFor(1) = _orphan2\n        waitFor(2) = _orphan3\n\n        &#39; WaitAny returns when any of the wait handles in the \n        &#39; array is signaled, so either of the two abandoned mutexes\n        &#39; satisfy its wait condition. On returning from the wait,\n        &#39; WaitAny throws AbandonedMutexException. The MutexIndex\n        &#39; property returns the lower of the two index values for \n        &#39; the abandoned mutexes. Note that the Try block and the\n        &#39; Catch block obtain the index in different ways.\n        &#39;  \n        Try\n            Dim index As Integer = WaitHandle.WaitAny(waitFor)\n            Console.WriteLine(&quot;WaitAny succeeded.&quot;)\n\n            Dim m As Mutex = TryCast(waitFor(index), Mutex)\n\n            &#39; The current thread owns the mutex, and must release\n            &#39; it.\n            If m IsNot Nothing Then m.ReleaseMutex()\n        Catch ex As AbandonedMutexException\n            Console.WriteLine(&quot;Exception on return from WaitAny at index &quot; _\n                &amp; ex.MutexIndex &amp; &quot;.&quot; _\n                &amp; vbCrLf &amp; vbTab &amp; &quot;Message: &quot; _\n                &amp; ex.Message) \n\n            &#39; Whether or not the exception was thrown, the current\n            &#39; thread owns the mutex, and must release it.\n            &#39;\n            If ex.Mutex IsNot Nothing Then ex.Mutex.ReleaseMutex()            \n        End Try\n\n        &#39; Use two more of the abandoned mutexes for the WaitAll call.\n        &#39; WaitAll doesn&#39;t return until all wait handles are signaled,\n        &#39; so the ManualResetEvent must be signaled by calling Set(). \n        _dummy.Set()\n        waitFor(1) = _orphan4\n        waitFor(2) = _orphan5\n\n        &#39; The signaled event and the two abandoned mutexes satisfy\n        &#39; the wait condition for WaitAll, but on return it throws\n        &#39; AbandonedMutexException. For WaitAll, the MutexIndex\n        &#39; property is always -1 and the Mutex property is always\n        &#39; Nothing.\n        &#39;  \n        Try\n            WaitHandle.WaitAll(waitFor)\n            Console.WriteLine(&quot;WaitAll succeeded.&quot;)\n        Catch ex As AbandonedMutexException\n            Console.WriteLine(&quot;Exception on return from WaitAll. MutexIndex = &quot; _\n                &amp; ex.MutexIndex &amp; &quot;.&quot; _\n                &amp; vbCrLf &amp; vbTab &amp; &quot;Message: &quot; _\n                &amp; ex.Message) \n        Finally\n            &#39; Whether or not the exception was thrown, the current\n            &#39; thread owns the mutexes, and must release them.\n            &#39;\n            CType(waitFor(1), Mutex).ReleaseMutex()\n            CType(waitFor(2), Mutex).ReleaseMutex()\n        End Try\n    End Sub\n\n    &lt;MTAThread&gt; _\n    Public Shared Sub AbandonMutex()\n        _orphan1.WaitOne()\n        _orphan2.WaitOne()\n        _orphan3.WaitOne()\n        _orphan4.WaitOne()\n        _orphan5.WaitOne()\n        &#39; Abandon the mutexes by exiting without releasing them.\n        Console.WriteLine(&quot;Thread exits without releasing the mutexes.&quot;)\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Thread exits without releasing the mutexes.\n&#39;Exception on return from WaitOne.\n&#39;        Message: The wait completed due to an abandoned mutex.\n&#39;Exception on return from WaitAny at index 1.\n&#39;        Message: The wait completed due to an abandoned mutex.\n&#39;Exception on return from WaitAll. MutexIndex = -1.\n&#39;        Message: The wait completed due to an abandoned mutex.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.AbandonedMutexException#1\">\nusing System;\nusing System.Threading;\n\npublic class Example\n{\n    private static ManualResetEvent _dummy = new ManualResetEvent(false);\n\n    private static Mutex _orphan1 = new Mutex();\n    private static Mutex _orphan2 = new Mutex();\n    private static Mutex _orphan3 = new Mutex();\n    private static Mutex _orphan4 = new Mutex();\n    private static Mutex _orphan5 = new Mutex();\n\n    [MTAThread]\n    public static void Main()\n    {\n        // Start a thread that takes all five mutexes, and then\n        // ends without releasing them.\n        //\n        Thread t = new Thread(new ThreadStart(AbandonMutex));\n        t.Start();\n        // Make sure the thread is finished.\n        t.Join();\n\n        // Wait on one of the abandoned mutexes. The WaitOne returns\n        // immediately, because its wait condition is satisfied by\n        // the abandoned mutex, but on return it throws\n        // AbandonedMutexException.\n        try\n        {\n            _orphan1.WaitOne();\n            Console.WriteLine(&quot;WaitOne succeeded.&quot;);\n        }\n        catch(AbandonedMutexException ex)\n        {\n            Console.WriteLine(&quot;Exception on return from WaitOne.&quot; +\n                &quot;\\r<br>&nbsp;&nbsp;&nbsp;&nbsp;Message: {0}&quot;, ex.Message);\n        }\n        finally\n        {\n            // Whether or not the exception was thrown, the current\n            // thread owns the mutex, and must release it.\n            //\n            _orphan1.ReleaseMutex();\n        }\n\n        // Create an array of wait handles, consisting of one\n        // ManualResetEvent and two mutexes, using two more of the\n        // abandoned mutexes.\n        WaitHandle[] waitFor = {_dummy, _orphan2, _orphan3};\n\n        // WaitAny returns when any of the wait handles in the \n        // array is signaled, so either of the two abandoned mutexes\n        // satisfy its wait condition. On returning from the wait,\n        // WaitAny throws AbandonedMutexException. The MutexIndex\n        // property returns the lower of the two index values for \n        // the abandoned mutexes. Note that the Try block and the\n        // Catch block obtain the index in different ways.\n        //  \n        try\n        {\n            int index = WaitHandle.WaitAny(waitFor);\n            Console.WriteLine(&quot;WaitAny succeeded.&quot;);\n\n            // The current thread owns the mutex, and must release\n            // it.\n            Mutex m = waitFor[index] as Mutex;\n            if (m != null) m.ReleaseMutex();\n        }\n        catch(AbandonedMutexException ex)\n        {\n            Console.WriteLine(&quot;Exception on return from WaitAny at index {0}.&quot; +\n                &quot;\\r<br>&nbsp;&nbsp;&nbsp;&nbsp;Message: {1}&quot;, ex.MutexIndex, ex.Message);\n\n            // Whether or not the exception was thrown, the current\n            // thread owns the mutex, and must release it.\n            //\n            if (ex.Mutex != null) ex.Mutex.ReleaseMutex();\n        }\n\n        // Use two more of the abandoned mutexes for the WaitAll call.\n        // WaitAll doesn&#39;t return until all wait handles are signaled,\n        // so the ManualResetEvent must be signaled by calling Set().\n        _dummy.Set();\n        waitFor[1] = _orphan4;\n        waitFor[2] = _orphan5;\n\n        // The signaled event and the two abandoned mutexes satisfy\n        // the wait condition for WaitAll, but on return it throws\n        // AbandonedMutexException. For WaitAll, the MutexIndex\n        // property is always -1 and the Mutex property is always\n        // null.\n        //  \n        try\n        {\n            WaitHandle.WaitAll(waitFor);\n            Console.WriteLine(&quot;WaitAll succeeded.&quot;);\n        }\n        catch(AbandonedMutexException ex)\n        {\n            Console.WriteLine(&quot;Exception on return from WaitAll. MutexIndex = {0}.&quot; +\n                &quot;\\r<br>&nbsp;&nbsp;&nbsp;&nbsp;Message: {1}&quot;, ex.MutexIndex, ex.Message);\n        }\n        finally\n        {\n            // Whether or not the exception was thrown, the current\n            // thread owns the mutexes, and must release them.\n            //\n            _orphan4.ReleaseMutex();\n            _orphan5.ReleaseMutex();\n        }\n    }\n\n    [MTAThread]\n    public static void AbandonMutex()\n    {\n        _orphan1.WaitOne();\n        _orphan2.WaitOne();\n        _orphan3.WaitOne();\n        _orphan4.WaitOne();\n        _orphan5.WaitOne();\n        // Abandon the mutexes by exiting without releasing them.\n        Console.WriteLine(&quot;Thread exits without releasing the mutexes.&quot;);\n    }\n}\n\n/* This code example produces the following output:\n\nThread exits without releasing the mutexes.\nException on return from WaitOne.\n        Message: The wait completed due to an abandoned mutex.\nException on return from WaitAny at index 1.\n        Message: The wait completed due to an abandoned mutex.\nException on return from WaitAll. MutexIndex = -1.\n        Message: The wait completed due to an abandoned mutex.\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Threading.AbandonedMutexException.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Threading.AbandonedMutexException.yml\">\r\n<meta name=\"APIName\" content=\"System.Threading.AbandonedMutexException\">\r\n<meta name=\"APIName\" content=\"System.Threading.AbandonedMutexException..ctor\">\r\n<meta name=\"APIName\" content=\"System.Threading.AbandonedMutexException.Mutex\">\r\n<meta name=\"APIName\" content=\"System.Threading.AbandonedMutexException.MutexIndex\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"a8ec3661-d664-debe-4f7c-68038a6cbe20\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"The exception that is thrown when one thread acquires a  object that another thread has abandoned by exiting without releasing it.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Threading/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Threading.AbandonedMutexException\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Threading.AbandonedMutexException.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Threading.AbandonedMutexException.yml","open_to_public_contributors":true,"api_name":["System.Threading.AbandonedMutexException","System.Threading.AbandonedMutexException..ctor","System.Threading.AbandonedMutexException.Mutex","System.Threading.AbandonedMutexException.MutexIndex"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Threading.AbandonedMutexException","System::Threading::AbandonedMutexException","System.Threading.AbandonedMutexException.#ctor","System::Threading::AbandonedMutexException::#ctor","System.Threading.AbandonedMutexException.Mutex","System::Threading::AbandonedMutexException::Mutex","System.Threading.AbandonedMutexException.MutexIndex","System::Threading::AbandonedMutexException::MutexIndex"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"a8ec3661-d664-debe-4f7c-68038a6cbe20","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Threading/AbandonedMutexException.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"AbandonedMutexException class | Microsoft Docs","_op_ogTitle":"AbandonedMutexException class","description":"The exception that is thrown when one thread acquires a  object that another thread has abandoned by exiting without releasing it.\n","toc_asset_id":"_splitted/System.Threading/toc.json","toc_rel":"_splitted/System.Threading/toc.json","source_url":"","ms.assetid":"System.Threading.AbandonedMutexException","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.threading.abandonedmutexexception","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.threading.abandonedmutexexception","fileRelativePath":"System.Threading.AbandonedMutexException.html"},"themesRelativePathToOutputRoot":"_themes/"}