{"content":"    \r\n    <h1 id=\"System_IndexOutOfRangeException\">\r\n      <span class=\"lang-csharp\">IndexOutOfRangeException</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>The exception that is thrown when an attempt is made to access an element of an array or collection with an index that is outside its bounds.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic sealed class IndexOutOfRangeException : SystemException</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.systemexception\" data-linktype=\"relative-path\">System.SystemException</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l3\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">IndexOutOfRangeException</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_Data\" data-linktype=\"relative-path\">Data</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_GetBaseException\" data-linktype=\"relative-path\">GetBaseException()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"relative-path\">GetObjectData(SerializationInfo,StreamingContext)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_HelpLink\" data-linktype=\"relative-path\">HelpLink</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_HResult\" data-linktype=\"relative-path\">HResult</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_InnerException\" data-linktype=\"relative-path\">InnerException</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_Message\" data-linktype=\"relative-path\">Message</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_SerializeObjectState\" data-linktype=\"relative-path\">SerializeObjectState</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_Source\" data-linktype=\"relative-path\">Source</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_StackTrace\" data-linktype=\"relative-path\">StackTrace</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_TargetSite\" data-linktype=\"relative-path\">TargetSite</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>An IndexOutOfRangeException exception is thrown when an invalid index is used to access a member of an array or a collection, or to read or write from a particular location in a buffer. This exception  inherits from the <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> class but adds no unique members.  </p>\n<p> Typically, an IndexOutOfRangeException exception is thrown as a result of developer error. Instead of handling the exception, you should diagnose the cause of the error and correct your code. The most common causes of the error are:  </p>\n<ul>\n<li><p>Forgetting that the upper bound of a collection or a zero-based array is one less than its number of members or elements, as the following example illustrates.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IndexOutOfRangeException#3\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n   public static void Main()\n   {\n      List&lt;Char&gt; characters = new List&lt;Char&gt;();\n      characters.InsertRange(0, new Char[] { &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39; } );\n      for (int ctr = 0; ctr &lt;= characters.Count; ctr++)\n         Console.Write(&quot;&#39;{0}&#39;    &quot;, characters[ctr]);\n   }\n}\n// The example displays the following output:\n//    &#39;a&#39;    &#39;b&#39;    &#39;c&#39;    &#39;d&#39;    &#39;e&#39;    &#39;f&#39;\n//    Unhandled Exception: \n//    System.ArgumentOutOfRangeException: \n//    Index was out of range. Must be non-negative and less than the size of the collection.\n//    Parameter name: index\n//       at Example.Main()\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IndexOutOfRangeException#3\">Imports System.Collections.Generic\n\nModule Example\n   Public Sub Main()\n      Dim characters As New List(Of Char)()\n      characters.InsertRange(0, { &quot;a&quot;c, &quot;b&quot;c, &quot;c&quot;c, &quot;d&quot;c, &quot;e&quot;c, &quot;f&quot;c} )\n      For ctr As Integer = 0 To characters.Count\n         Console.Write(&quot;&#39;{0}&#39;    &quot;, characters(ctr))\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    &#39;a&#39;    &#39;b&#39;    &#39;c&#39;    &#39;d&#39;    &#39;e&#39;    &#39;f&#39;\n&#39;    Unhandled Exception: \n&#39;    System.ArgumentOutOfRangeException: \n&#39;    Index was out of range. Must be non-negative and less than the size of the collection.\n&#39;    Parameter name: index\n&#39;       at System.Collections.Generic.List`1.get_Item(Int32 index)\n&#39;       at Example.Main()\n</code></pre><p> To correct the error, you can use code like the following.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IndexOutOfRangeException#4\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n   public static void Main()\n   {\n      List&lt;Char&gt; characters = new List&lt;Char&gt;();\n      characters.InsertRange(0, new Char[] { &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39; } );\n      for (int ctr = 0; ctr &lt; characters.Count; ctr++)\n         Console.Write(&quot;&#39;{0}&#39;    &quot;, characters[ctr]);\n   }\n}\n// The example displays the following output:\n//        &#39;a&#39;    &#39;b&#39;    &#39;c&#39;    &#39;d&#39;    &#39;e&#39;    &#39;f&#39;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IndexOutOfRangeException#4\">Imports System.Collections.Generic\n\nModule Example\n   Public Sub Main()\n      Dim characters As New List(Of Char)()\n      characters.InsertRange(0, { &quot;a&quot;c, &quot;b&quot;c, &quot;c&quot;c, &quot;d&quot;c, &quot;e&quot;c, &quot;f&quot;c} )\n      For ctr As Integer = 0 To characters.Count - 1\n         Console.Write(&quot;&#39;{0}&#39;    &quot;, characters(ctr))\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       &#39;a&#39;    &#39;b&#39;    &#39;c&#39;    &#39;d&#39;    &#39;e&#39;    &#39;f&#39;\n</code></pre><p> Alternately, instead of iterating all the elements in the array by their index, you can use the  (in C#) or the  (in Visual Basic).  </p>\n</li>\n<li><p>Attempting to assign an array element to another array that has not been adequately dimensioned and that has fewer elements than the original array. The following example attempts to assign the last element in the <code>value1</code> array to the same element in the <code>value2</code> array. However, the <code>value2</code> array has been incorrectly dimensioned to have six instead of seven elements. As a result, the assignment throws an IndexOutOfRangeException exception.  </p>\n<pre><code class=\"lang-vb\" name=\"System.IndexOutOfRangeException#10\">Module Example\n   Public Sub Main()\n      Dim values1() As Integer = { 3, 6, 9, 12, 15, 18, 21 }\n      Dim values2(5) As Integer\n      \n      &#39; Assign last element of the array to the new array.\n      values2(values1.Length - 1) = values1(values1.Length - 1)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Unhandled Exception: \n&#39;       System.IndexOutOfRangeException: \n&#39;       Index was outside the bounds of the array.\n&#39;       at Example.Main()\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IndexOutOfRangeException#10\">public class Example\n{\n   public static void Main()\n   {\n      int[] values1 = { 3, 6, 9, 12, 15, 18, 21 };\n      int[] values2 = new int[6];\n      \n      // Assign last element of the array to the new array.\n      values2[values1.Length - 1] = values1[values1.Length - 1];\n   }\n}\n// The example displays the following output:\n//       Unhandled Exception: \n//       System.IndexOutOfRangeException: \n//       Index was outside the bounds of the array.\n//       at Example.Main()\n</code></pre></li>\n<li><p>Using a value returned by a search method to iterate a portion of an array or collection starting at a particular index position. If you forget to check whether the search operation found a match, the runtime throws an IndexOutOfRangeException exception, as shown in this example.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IndexOutOfRangeException#5\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n   static List&lt;int&gt; numbers = new List&lt;int&gt;();\n\n   public static void Main()\n   {\n      int startValue; \n      string[] args = Environment.GetCommandLineArgs();\n      if (args.Length &lt; 2) \n         startValue = 2;\n      else \n         if (! Int32.TryParse(args[1], out startValue))\n            startValue = 2;\n\n      ShowValues(startValue);\n   }\n   \n   private static void ShowValues(int startValue)\n   {   \n      // Create a collection with numeric values.\n      if (numbers.Count == 0)  \n         numbers.AddRange( new int[] { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22} );\n\n      // Get the index of a startValue.\n      Console.WriteLine(&quot;Displaying values greater than or equal to {0}:&quot;,\n                        startValue);\n      int startIndex = numbers.IndexOf(startValue);\n      // Display all numbers from startIndex on.\n      for (int ctr = startIndex; ctr &lt; numbers.Count; ctr++)\n         Console.Write(&quot;    {0}&quot;, numbers[ctr]);\n   }\n}\n// The example displays the following output if the user supplies\n// 7 as a command-line parameter:\n//    Displaying values greater than or equal to 7:\n//    \n//    Unhandled Exception: System.ArgumentOutOfRangeException: \n//    Index was out of range. Must be non-negative and less than the size of the collection.\n//    Parameter name: index\n//       at System.Collections.Generic.List`1.get_Item(Int32 index)\n//       at Example.ShowValues(Int32 startValue)\n//       at Example.Main()\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IndexOutOfRangeException#5\">Imports System.Collections.Generic\n\nModule Example\n   Dim numbers As New List(Of Integer)\n\n   Public Sub Main()\n      Dim startValue As Integer \n      Dim args() As String = Environment.GetCommandLineArgs()\n      If args.Length &lt; 2 Then\n         startValue = 2\n      Else\n         If Not Int32.TryParse(args(1), startValue) Then\n            startValue = 2\n         End If   \n      End If\n      ShowValues(startValue)\n   End Sub\n   \n   Private Sub ShowValues(startValue As Integer)   \n      &#39; Create a collection with numeric values.\n      If numbers.Count = 0 Then \n         numbers.AddRange( { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22} )\n      End If   \n      &#39; Get the index of a particular number, in this case 7.\n      Console.WriteLine(&quot;Displaying values greater than or equal to {0}:&quot;,\n                        startValue)\n      Dim startIndex As Integer = numbers.IndexOf(startValue)\n      &#39; Display all numbers from startIndex on.\n      For ctr As Integer = startIndex To numbers.Count - 1\n         Console.Write(&quot;    {0}&quot;, numbers(ctr))\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output if the user supplies\n&#39; 7 as a command-line parameter:\n&#39;    Displaying values greater than or equal to 7:\n&#39;    \n&#39;    Unhandled Exception: System.ArgumentOutOfRangeException: \n&#39;    Index was out of range. Must be non-negative and less than the size of the collection.\n&#39;    Parameter name: index\n&#39;       at System.Collections.Generic.List`1.get_Item(Int32 index)\n&#39;       at Example.ShowValues(Int32 startValue)\n&#39;       at Example.Main()\n</code></pre><p> In this case, the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method returns -1, which is an invalid index value, when it fails to find a match. To correct this error, check the search method&#39;s return value before iterating the array, as shown in this example.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IndexOutOfRangeException#6\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n   static List&lt;int&gt; numbers = new List&lt;int&gt;();\n\n   public static void Main()\n   {\n      int startValue; \n      string[] args = Environment.GetCommandLineArgs();\n      if (args.Length &lt; 2) \n         startValue = 2;\n      else \n         if (! Int32.TryParse(args[1], out startValue))\n            startValue = 2;\n\n      ShowValues(startValue);\n   }\n   \n   private static void ShowValues(int startValue)\n   {   \n      // Create a collection with numeric values.\n      if (numbers.Count == 0)  \n         numbers.AddRange( new int[] { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22} );\n\n      // Get the index of startValue.\n      int startIndex = numbers.IndexOf(startValue);\n      if (startIndex &lt; 0) {\n         Console.WriteLine(&quot;Unable to find {0} in the collection.&quot;, startValue);\n      }\n      else {\n         // Display all numbers from startIndex on.\n         Console.WriteLine(&quot;Displaying values greater than or equal to {0}:&quot;,\n                        startValue);\n         for (int ctr = startIndex; ctr &lt; numbers.Count; ctr++)\n            Console.Write(&quot;    {0}&quot;, numbers[ctr]);\n      }\n   }\n}\n// The example displays the following output if the user supplies\n// 7 as a command-line parameter:\n//      Unable to find 7 in the collection.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IndexOutOfRangeException#6\">Imports System.Collections.Generic\n\nModule Example\n   Dim numbers As New List(Of Integer)\n\n   Public Sub Main()\n      Dim startValue As Integer \n      Dim args() As String = Environment.GetCommandLineArgs()\n      If args.Length &lt; 2 Then\n         startValue = 2\n      Else\n         If Not Int32.TryParse(args(1), startValue) Then\n            startValue = 2\n         End If   \n      End If\n      ShowValues(startValue)\n   End Sub\n   \n   Private Sub ShowValues(startValue As Integer)   \n      &#39; Create a collection with numeric values.\n      If numbers.Count = 0 Then \n         numbers.AddRange( { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22} )\n      End If   \n      &#39; Get the index of startValue.\n      Dim startIndex As Integer = numbers.IndexOf(startValue)\n      If startIndex &lt; 0 Then\n         Console.WriteLine(&quot;Unable to find {0} in the collection.&quot;, startValue)\n      Else\n         &#39; Display all numbers from startIndex on.\n         Console.WriteLine(&quot;Displaying values greater than or equal to {0}:&quot;,\n                        startValue)\n         For ctr As Integer = startIndex To numbers.Count - 1\n            Console.Write(&quot;    {0}&quot;, numbers(ctr))\n         Next\n      End If\n   End Sub\nEnd Module\n&#39; The example displays the following output if the user supplies\n&#39;       Unable to find 7 in the collection.\n</code></pre></li>\n<li><p>Trying to use or enumerate a result set, collection, or array returned by a query without testing whether the returned object has any valid data.  </p>\n</li>\n<li><p>Using a computed value to define the starting index, the ending index, or the number of items to be iterated. If the result of the computation is unexpected, it might result in an IndexOutOfRangeException exception. You should check your program&#39;s logic in calculating the index value and validate the value before iterating the array or collection. The following conditions must all be true; otherwise, an IndexOutOfRangeException exception is thrown:  </p>\n<ul>\n<li><p>The starting index must be greater than or equal to <a class=\"xref\" href=\"system.array#System_Array_GetLowerBound_\" data-linktype=\"relative-path\">GetLowerBound</a> for the dimension of the array that you want to iterate, or greater than or equal to 0 for a collection.  </p>\n</li>\n<li><p>The ending index cannot exceed <a class=\"xref\" href=\"system.array#System_Array_GetUpperBound_\" data-linktype=\"relative-path\">GetUpperBound</a> for the dimension of the array that you want to iterate, or cannot be greater than or equal to the <code>Count</code> property of a collection.  </p>\n</li>\n<li><p>The following equation must be true for the dimension of the array that you want to iterate:  </p>\n<pre><code>start_index &gt;= lower_bound And start_index + items_to_iterate – 1 &lt;= upper_bound  \n</code></pre><p> For a collection, the following equation must be true:  </p>\n<pre><code>start_index &gt;= 0 And start_index + items_to_iterate &lt;= Count  \n</code></pre><div class=\"TIP\"><h5>Tip</h5><p> The starting index of an array or collection can never be a negative number.  </p>\n</div>\n</li>\n</ul>\n</li>\n<li><p>Assuming that an array must be zero-based. Arrays that are not zero-based can be created by the [Array.CreateInstance(Type, Int32[], Int32&lt;xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29?displayProperty=fullName&gt; method and can be returned by COM interop, although they aren’t CLS-compliant. The following example illustrates the IndexOutOfRangeException that is thrown when you try to iterate a non-zero-based array created by the [Array.CreateInstance(Type, Int32[], Int32&lt;xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29?displayProperty=fullName&gt; method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IndexOutOfRangeException#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Array values = Array.CreateInstance(typeof(int), new int[] { 10 }, \n                                          new int[] { 1 });\n      int value = 2;\n      // Assign values.\n      for (int ctr = 0; ctr &lt; values.Length; ctr++) {\n         values.SetValue(value, ctr);\n         value *= 2;\n      }\n      \n      // Display values.\n      for (int ctr = 0; ctr &lt; values.Length; ctr++)\n         Console.Write(&quot;{0}    &quot;, values.GetValue(ctr));\n   }\n}\n// The example displays the following output:\n//    Unhandled Exception: \n//    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n//       at System.Array.InternalGetReference(Void* elemRef, Int32 rank, Int32* pIndices)\n//       at System.Array.SetValue(Object value, Int32 index)\n//       at Example.Main()\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IndexOutOfRangeException#1\">Module Example\n   Public Sub Main()\n      Dim values = Array.CreateInstance(GetType(Integer), { 10 }, { 1 })\n      Dim value As Integer = 2\n      &#39; Assign values.\n      For ctr As Integer = 0 To values.Length - 1\n         values(ctr) = value\n         value *= 2\n      Next\n      \n      &#39; Display values.\n      For ctr As Integer = 0 To values.Length - 1\n         Console.Write(&quot;{0}    &quot;, values(ctr))\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    Unhandled Exception: \n&#39;    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n&#39;       at System.Array.InternalGetReference(Void* elemRef, Int32 rank, Int32* pIndices)\n&#39;       at System.Array.SetValue(Object value, Int32 index)\n&#39;       at Microsoft.VisualBasic.CompilerServices.NewLateBinding.ObjectLateIndexSetComplex(Obje\n&#39;    ct Instance, Object[] Arguments, String[] ArgumentNames, Boolean OptimisticSet, Boolean RV\n&#39;    alueBase)\n&#39;       at Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateIndexSet(Object Instance,\n&#39;    Object[] Arguments, String[] ArgumentNames)\n&#39;       at Example.Main()\n</code></pre><p> To correct the error, as the following example does, you can call the <a class=\"xref\" href=\"system.array#System_Array_GetLowerBound_\" data-linktype=\"relative-path\">GetLowerBound</a> method instead of making assumptions about the starting index of an array.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IndexOutOfRangeException#2\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Array values = Array.CreateInstance(typeof(int), new int[] { 10 }, \n                                          new int[] { 1 });\n      int value = 2;\n      // Assign values.\n      for (int ctr = values.GetLowerBound(0); ctr &lt;= values.GetUpperBound(0); ctr++) {\n         values.SetValue(value, ctr);\n         value *= 2;\n      }\n      \n      // Display values.\n      for (int ctr = values.GetLowerBound(0); ctr &lt;= values.GetUpperBound(0); ctr++)\n         Console.Write(&quot;{0}    &quot;, values.GetValue(ctr));\n   }\n}\n// The example displays the following output:\n//        2    4    8    16    32    64    128    256    512    1024\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IndexOutOfRangeException#2\">Module Example\n   Public Sub Main()\n      Dim values = Array.CreateInstance(GetType(Integer), { 10 }, { 1 })\n      Dim value As Integer = 2\n      &#39; Assign values.\n      For ctr As Integer = values.GetLowerBound(0) To values.GetUpperBound(0)\n         values(ctr) = value\n         value *= 2\n      Next\n      \n      &#39; Display values.\n      For ctr As Integer = values.GetLowerBound(0) To values.GetUpperBound(0)\n         Console.Write(&quot;{0}    &quot;, values(ctr))\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       2    4    8    16    32    64    128    256    512    1024\n</code></pre><p> Note that when you call the <a class=\"xref\" href=\"system.array#System_Array_GetLowerBound_\" data-linktype=\"relative-path\">GetLowerBound</a> method to get the starting index of an array, you should also call the <a class=\"xref\" href=\"system.array#System_Array_GetUpperBound_System_Int32_\" data-linktype=\"relative-path\">System.Array.GetUpperBound(Int32)</a> method to get its ending index.  </p>\n</li>\n<li><p>Confusing an index and the value at that index in a numeric array or collection. This issue usually occurs when using the <code>foreach</code> statement (in C#) or the <code>For Each</code> statement (in Visual Basic). The following example illustrates the problem.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IndexOutOfRangeException#7\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Generate array of random values.\n      int[] values = PopulateArray(5, 10);\n      // Display each element in the array.\n      foreach (var value in values)\n         Console.Write(&quot;{0}   &quot;, values[value]);\n   }\n\n   private static int[] PopulateArray(int items, int maxValue)\n   {\n      int[] values = new int[items];\n      Random rnd = new Random();\n      for (int ctr = 0; ctr &lt; items; ctr++)\n         values[ctr] = rnd.Next(0, maxValue + 1);   \n\n      return values;                                                      \n   }\n}\n// The example displays output like the following:\n//    6   4   4\n//    Unhandled Exception: System.IndexOutOfRangeException: \n//    Index was outside the bounds of the array.\n//       at Example.Main()\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IndexOutOfRangeException#7\">Module Example\n   Public Sub Main()\n      &#39; Generate array of random values.\n      Dim values() As Integer = PopulateArray(5, 10)\n      &#39; Display each element in the array.\n      For Each value In values\n         Console.Write(&quot;{0}   &quot;, values(value))\n      Next\n   End Sub\n   \n   Private Function PopulateArray(items As Integer, \n                                  maxValue As Integer) As Integer()\n      Dim values(items - 1) As Integer\n      Dim rnd As New Random()\n      For ctr As Integer = 0 To items - 1\n         values(ctr) = rnd.Next(0, maxValue + 1)   \n      Next    \n      Return values                                                      \n   End Function\nEnd Module\n&#39; The example displays output like the following:\n&#39;    6   4   4\n&#39;    Unhandled Exception: System.IndexOutOfRangeException: \n&#39;    Index was outside the bounds of the array.\n&#39;       at Example.Main()\n</code></pre><p> The iteration construct returns each value in an array or collection, not its index. To eliminate the exception, use this code.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IndexOutOfRangeException#8\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Generate array of random values.\n      int[] values = PopulateArray(5, 10);\n      // Display each element in the array.\n      foreach (var value in values)\n         Console.Write(&quot;{0}   &quot;, value);\n   }\n\n   private static int[] PopulateArray(int items, int maxValue)\n   {\n      int[] values = new int[items];\n      Random rnd = new Random();\n      for (int ctr = 0; ctr &lt; items; ctr++)\n         values[ctr] = rnd.Next(0, maxValue + 1);   \n\n      return values;                                                      \n   }\n}\n// The example displays output like the following:\n//        10   6   7   5   8\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IndexOutOfRangeException#8\">Module Example\n   Public Sub Main()\n      &#39; Generate array of random values.\n      Dim values() As Integer = PopulateArray(5, 10)\n      &#39; Display each element in the array.\n      For Each value In values\n         Console.Write(&quot;{0}   &quot;, value)\n      Next\n   End Sub\n   \n   Private Function PopulateArray(items As Integer, \n                                  maxValue As Integer) As Integer()\n      Dim values(items - 1) As Integer\n      Dim rnd As New Random()\n      For ctr As Integer = 0 To items - 1\n         values(ctr) = rnd.Next(0, maxValue + 1)   \n      Next    \n      Return values                                                      \n   End Function\nEnd Module\n&#39; The example displays output like the following:\n&#39;       10   6   7   5   8\n</code></pre></li>\n<li><p>Providing an invalid column name to the <a class=\"xref\" href=\"system.data.dataview#System_Data_DataView_Sort_\" data-linktype=\"relative-path\">Sort</a> property.  </p>\n</li>\n<li><p>Violating thread safety. Operations such as reading from the same <a class=\"xref\" href=\"system.io.streamreader\" data-linktype=\"relative-path\">StreamReader</a> object, writing to the same <a class=\"xref\" href=\"system.io.streamwriter\" data-linktype=\"relative-path\">StreamWriter</a> object from multiple threads, or enumerating the objects in a <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> from different threads can throw an IndexOutOfRangeException if the object isn’t accessed in a thread-safe way. This exception is typically intermittent because it relies on a race condition.  </p>\n<p>Using hard-coded index values to manipulate an array is likely to throw an exception if the index value is incorrect or invalid, or if the size of the array being manipulation is unexpected. To prevent an operation from throwing an  IndexOutOfRangeException exception, you can do the following:  </p>\n</li>\n<li><p>Iterate the elements of the array using the <a href=\"https://msdn.microsoft.com/library/ttw7t8t6.aspx\" data-linktype=\"external\">foreach</a> statement (in C#) or the <a href=\"https://msdn.microsoft.com/library/5ebk1751.aspx\" data-linktype=\"external\">For Each...Next</a> construct (in Visual Basic)  instead of iterating elements by index.  </p>\n</li>\n<li><p>Iterate the elements by index starting with the index returned by the <a class=\"xref\" href=\"system.array#System_Array_GetLowerBound_\" data-linktype=\"relative-path\">GetLowerBound</a> method and ending with the index returned by the <a class=\"xref\" href=\"system.array#System_Array_GetUpperBound_\" data-linktype=\"relative-path\">GetUpperBound</a> method.  </p>\n</li>\n<li><p>If you are assigning elements in one array to another, ensure that  the target array has at least as many elements as the source array by comparing their <a class=\"xref\" href=\"system.array#System_Array_Length_\" data-linktype=\"relative-path\">Length</a> properties.  </p>\n<p>For a list of initial property values for an instance of IndexOutOfRangeException, see the IndexOutOfRangeException constructors.  </p>\n<p>The following intermediate language (IL) instructions throw IndexOutOfRangeException:  </p>\n</li>\n<li><p>ldelem.&lt;type&gt;  </p>\n</li>\n<li><p>ldelema  </p>\n</li>\n<li><p>stelem.&lt;type&gt;  </p>\n<p>IndexOutOfRangeException uses the HRESULT COR_E_INDEXOUTOFRANGE, which has the value 0x80131508.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IndexOutOfRangeException__ctor\" data-linktype=\"self-bookmark\">IndexOutOfRangeException()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IndexOutOfRangeException__ctor_System_String_\" data-linktype=\"self-bookmark\">IndexOutOfRangeException(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a> class with a specified error message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IndexOutOfRangeException__ctor_System_String_System_Exception_\" data-linktype=\"self-bookmark\">IndexOutOfRangeException(String,Exception)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a> class with a specified error message and a reference to the inner exception that is the cause of this exception.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_IndexOutOfRangeException__ctor\">\r\n    \r\n            <a id=\"System_IndexOutOfRangeException__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndexOutOfRangeException()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IndexOutOfRangeException ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor initializes the <a class=\"xref\" href=\"system.exception#System_Exception_Message_\" data-linktype=\"relative-path\">Message</a> property of the new instance to a system-supplied message that describes the error, such as &quot;An array index is out of range.&quot; This message takes into account the current system culture.  </p>\n<p> The following table shows the initial property values for an instance of <a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a>.  </p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a></td>\n<td>A null reference (<code>Nothing</code> in Visual Basic).</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.exception#System_Exception_Message_\" data-linktype=\"relative-path\">Message</a></td>\n<td>The localized error message string.</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IndexOutOfRangeException__ctor_System_String_\">\r\n    \r\n            <a id=\"System_IndexOutOfRangeException__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndexOutOfRangeException(String)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a> class with a specified error message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IndexOutOfRangeException (string message);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>message</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The message that describes the error.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor initializes the <a class=\"xref\" href=\"system.exception#System_Exception_Message_\" data-linktype=\"relative-path\">Message</a> property of the new exception using the <code>message</code> parameter. The content of <code>message</code> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.  </p>\n<p> The following table shows the initial property values for an instance of <a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a>.  </p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a></td>\n<td>A null reference (<code>Nothing</code> in Visual Basic).</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.exception#System_Exception_Message_\" data-linktype=\"relative-path\">Message</a></td>\n<td>The error message string.</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IndexOutOfRangeException__ctor_System_String_System_Exception_\">\r\n    \r\n            <a id=\"System_IndexOutOfRangeException__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndexOutOfRangeException(String,Exception)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a> class with a specified error message and a reference to the inner exception that is the cause of this exception.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IndexOutOfRangeException (string message, Exception innerException);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>message</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The error message that explains the reason for the exception.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>innerException</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The exception that is the cause of the current exception. If the <code>innerException</code> parameter is not a null reference (<code>Nothing</code> in Visual Basic), the current exception is raised in a <code>catch</code> block that handles the inner exception.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a> property. The <code>InnerException</code> property returns the same value that is passed into the constructor, or a null reference (<code>Nothing</code> in Visual Basic) if the <code>InnerException</code> property does not supply the inner exception value to the constructor.  </p>\n<p> The following table shows the initial property values for an instance of <a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a>.  </p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a></td>\n<td>The inner exception reference.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.exception#System_Exception_Message_\" data-linktype=\"relative-path\">Message</a></td>\n<td>The error message string.</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.IndexOutOfRangeException.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.IndexOutOfRangeException.yml\">\r\n<meta name=\"APIName\" content=\"System.IndexOutOfRangeException\">\r\n<meta name=\"APIName\" content=\"System.IndexOutOfRangeException..ctor\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"97d5143c-0ec1-f392-3190-a57254670634\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"The exception that is thrown when an attempt is made to access an element of an array or collection with an index that is outside its bounds.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.IndexOutOfRangeException\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.IndexOutOfRangeException.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.IndexOutOfRangeException.yml","open_to_public_contributors":true,"api_name":["System.IndexOutOfRangeException","System.IndexOutOfRangeException..ctor"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.IndexOutOfRangeException","System::IndexOutOfRangeException","System.IndexOutOfRangeException.#ctor","System::IndexOutOfRangeException::#ctor"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"97d5143c-0ec1-f392-3190-a57254670634","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/IndexOutOfRangeException.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IndexOutOfRangeException class | Microsoft Docs","_op_ogTitle":"IndexOutOfRangeException class","description":"The exception that is thrown when an attempt is made to access an element of an array or collection with an index that is outside its bounds.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.IndexOutOfRangeException","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.indexoutofrangeexception","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.indexoutofrangeexception","fileRelativePath":"System.IndexOutOfRangeException.html"},"themesRelativePathToOutputRoot":"_themes/"}